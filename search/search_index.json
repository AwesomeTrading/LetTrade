{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"LetTrade","text":"<p>A lightweight trading framework compatible with Stock, Forex, Crypto... markets</p> <p>Inspired by <code>freqtrade</code>, <code>backtrader</code>, <code>backtesting.py</code>...</p> <p>Let make algo trading simple :)</p> <p>Find more at Documentation</p>"},{"location":"#installation","title":"Installation","text":"<p>Stable version</p> <pre><code>pip install lettrade\n</code></pre> <p>Developing version</p> <pre><code>pip install git+https://git@github.com/AwesomeTrading/lettrade.git@main\n</code></pre>"},{"location":"#example","title":"Example","text":"<pre><code>import talib.abstract as ta\n\nfrom lettrade import DataFeed, Strategy, let_backtest\nfrom lettrade.indicator import crossover, crossunder\n\n\nclass SmaCross(Strategy):\n    ema1_period = 9\n    ema2_period = 21\n\n    def indicators(self, df: DataFeed):\n        df[\"ema1\"] = ta.EMA(df, timeperiod=self.ema1_period)\n        df[\"ema2\"] = ta.EMA(df, timeperiod=self.ema2_period)\n\n        df[\"crossover\"] = crossover(df.ema1, df.ema2)\n        df[\"crossunder\"] = crossunder(df.ema1, df.ema2)\n\n    def next(self, df: DataFeed):\n        if df.crossover[-1]:\n            self.buy(0.1)\n        elif df.crossunder[-1]:\n            self.sell(0.1)\n\nlt = let_backtest(\n    strategy=SmaCross,\n    datas=\"example/data/data/EURUSD_5m_0_1000.csv\",\n)\n\nlt.run()\nlt.plot()\n</code></pre> <pre><code># Strategy                       &lt;class 'SmaCross'&gt;\nStart                     2024-05-13 21:15:00+00:00\nEnd                       2024-05-17 08:30:00+00:00\nDuration                            3 days 11:15:00\nStart Balance [$]                             10000\nEquity [$]                                  10000.0\nPL [$]                                          0.0\nPL [%]                                          0.0\nBuy &amp; Hold PL [%]                               2.0\nMax. Drawdown [%]                            -33.08\nAvg. Drawdown [%]                             -5.58\nMax. Drawdown Duration            688 days 00:00:00\nAvg. Drawdown Duration             41 days 00:00:00\n\n# Trades                                         34\nBest Trade [%]                               0.0007\nWorst Trade [%]                           -0.000732\nProfit Factor                                  2.13\nSQN                                            1.78\n</code></pre>"},{"location":"#start-a-strategy","title":"Start a strategy","text":"<p>All example in <code>example/</code> directory</p>"},{"location":"#download-data","title":"Download data","text":"<pre><code>python -m example.data.yfinance\n</code></pre>"},{"location":"#backtest-strategy","title":"Backtest strategy","text":"<pre><code>python -m example.strategy.backtest_sma_cross\n</code></pre> <pre><code># Strategy                &lt;class '__main__.SmaCross'&gt;\nStart                       2023-01-02 00:00:00+00:00\nEnd                         2023-12-29 21:00:00+00:00\nDuration                            361 days 21:00:00\nStart Balance [$]                               10000\nEquity [$]                                   38249.07\nPL [$]                                       28249.07\nPL [%]                                         282.49\nBuy &amp; Hold PL [%]                                 2.0\nMax. Drawdown [%]                              -33.08\nAvg. Drawdown [%]                               -5.58\nMax. Drawdown Duration              688 days 00:00:00\nAvg. Drawdown Duration               41 days 00:00:00\n\n# Trades                                          248\nBest Trade [%]                            5559.456348\nWorst Trade [%]                          -5438.327789\nProfit Factor                                    2.13\nSQN                                              1.78\n</code></pre>"},{"location":"#live-trading","title":"Live Trading","text":""},{"location":"#official","title":"Official","text":"<ul> <li><code>MetaTrader</code>: Support MetaTrader 5 Terminal trading</li> <li><code>CCXT</code>: Support most of cryptocurrency exchange from CCXT library</li> </ul>"},{"location":"#development","title":"Development","text":"<p>Set up conda environment</p> <pre><code>conda create -y -n LetTrade python=3.10\nconda activate LetTrade\nconda install -c conda-forge ta-lib\npip install -r requirements-dev.txt\n</code></pre>"},{"location":"dev/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p>"},{"location":"dev/#development","title":"Development","text":"<p>Guide for developer to install <code>lettrade</code></p>"},{"location":"dev/#environment-setup","title":"Environment setup","text":"<p>Set up conda environment</p> <pre><code>conda create -y -n LetTrade python=3.10\nconda activate LetTrade\nconda install -c conda-forge ta-lib\npip install -r requirements-dev.txt\n</code></pre>"},{"location":"dev/#document","title":"Document","text":"<p>Building <code>lettrade</code> document guide</p>"},{"location":"dev/#dependencies","title":"Dependencies","text":"<p>Install <code>lettrade</code> as module</p> <pre><code>pip install .\n</code></pre> <p>Install python document requirements</p> <pre><code>pip install -r docs/requirements-docs.txt\n</code></pre>"},{"location":"dev/#view-document","title":"View document","text":"<p>Start mkdocs local server</p> <pre><code>mkdocs serve\n</code></pre>"},{"location":"talib/","title":"TA Library","text":""},{"location":"talib/#ta-lib","title":"TA-Lib","text":"<p>Home | Indicators</p>"},{"location":"talib/#build-from-source","title":"Build from source","text":"<p>Download ta-lib from github ta-lib-0.4.0-src.tar.gz</p> <pre><code>tar zxvf ta-lib-0.4.0-src.tar.gz\ncd ta-lib\n./configure --prefix=/usr\nmake\nsudo make install\n</code></pre> <p>Full install tutorial from TA-Lib</p>"},{"location":"talib/#conda-forge","title":"Conda-Forge","text":"<pre><code>conda install -c conda-forge ta-lib\n</code></pre>"},{"location":"talib/#python-library","title":"Python library","text":"<pre><code>pip install TA-Lib\n</code></pre>"},{"location":"talib/#tulip-indicators","title":"Tulip Indicators","text":"<p>Home | Indicators</p>"},{"location":"talib/#python-library_1","title":"Python library","text":"<pre><code>pip install Cython numpy\npip install tulipy\n</code></pre>"},{"location":"talib/#build-c-library-from-source-option","title":"Build C library from source [option]","text":"<pre><code>git clone https://github.com/TulipCharts/tulipindicators\ncd tulipindicators\nmake\n</code></pre> <p>Example</p> Unordered ListOrdered List <pre><code>* Sed sagittis eleifend rutrum\n* Donec vitae suscipit est\n* Nulla tempor lobortis orci\n</code></pre> <pre><code>1. Sed sagittis eleifend rutrum\n2. Donec vitae suscipit est\n3. Nulla tempor lobortis orci\n</code></pre>"},{"location":"talib/#pandas-ta","title":"Pandas-TA","text":"<p>Home | Indicators</p> <pre><code>pip install pandas_ta\n</code></pre>"},{"location":"install/","title":"LetTrade install","text":"<p>Guide to quick install <code>lettrade</code></p>"},{"location":"install/#installation","title":"Installation","text":"<p>Stable version</p> <pre><code>pip install lettrade\n</code></pre> <p>Developing version</p> <pre><code>pip install git+https://git@github.com/AwesomeTrading/lettrade.git@main\n</code></pre>"},{"location":"install/metatrader/","title":"MetaTrader 5 Install","text":""},{"location":"install/metatrader/#wine","title":"Wine","text":"<p>Ubuntu</p> <pre><code>wget https://download.mql5.com/cdn/web/metaquotes.software.corp/mt5/mt5ubuntu.sh ; chmod +x mt5ubuntu.sh ; ./mt5ubuntu.sh\n</code></pre>"},{"location":"install/metatrader/#python","title":"Python","text":"<pre><code>wget https://www.python.org/ftp/python/3.10.9/python-3.10.9.exe\n\nexport WINEPREFIX=$HOME/.mt5\nwine python-3.10.9.exe\n</code></pre>"},{"location":"install/metatrader/#python-requirements","title":"Python requirements","text":"<pre><code>export WINEPREFIX=$HOME/.mt5\n\ncd $HOME/.mt5/dosdevices/c:/users/$USER/AppData/Local/Programs/Python/Python310-32/\n\nwine python.exe -m pip install --upgrade pip\nwine python.exe -m pip install MetaTrader5\nwine python.exe -m pip install https://github.com/AwesomeTrading/mt5linux/archive/master.zip\n</code></pre>"},{"location":"install/metatrader/#start-server","title":"Start Server","text":"<pre><code>export WINEPREFIX=$HOME/.mt5\n\npython -m mt5linux \"$HOME/.mt5/dosdevices/c:/users/$USER/AppData/Local/Programs/Python/Python310-32/python.exe\"\n</code></pre>"},{"location":"install/metatrader/#metatrader-terminal","title":"MetaTrader Terminal","text":"<p>Load broker information before start by steps:</p> <p><code>File</code> -&gt; <code>Open an Account</code> -&gt; Search your broker (ex: <code>Tickmill</code>, <code>Roboforex</code>...) -&gt; <code>Enter</code> to load -&gt; <code>Cancel</code> (Done)</p> <p>Enable Automatic Algo Trading</p> <p><code>Tools</code> -&gt; <code>Options</code> -&gt; <code>Expert Advisors</code> -&gt; <code>Allow Auto Trading</code> -&gt; uncheck <code>Disable automated trading when switching accounts</code> and <code>Disable automated trading when switching profiles</code></p>"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li> account<ul> <li> account</li> </ul> </li> <li> all</li> <li> brain<ul> <li> brain</li> </ul> </li> <li> commander<ul> <li> commander</li> <li> telegram</li> </ul> </li> <li> data<ul> <li> csv</li> <li> data</li> <li> exporter<ul> <li> csv</li> </ul> </li> <li> feeder</li> <li> pickle</li> <li> replay</li> </ul> </li> <li> exchange<ul> <li> backtest<ul> <li> account</li> <li> backtest</li> <li> commander</li> <li> data<ul> <li> data</li> <li> yfinance</li> </ul> </li> <li> exchange</li> <li> feeder</li> <li> trade</li> </ul> </li> <li> base</li> <li> ccxt<ul> <li> ccxt</li> </ul> </li> <li> exchange</li> <li> execute</li> <li> metatrader<ul> <li> account</li> <li> api</li> <li> data</li> <li> exchange</li> <li> feeder</li> <li> metatrader</li> <li> trade</li> </ul> </li> <li> order</li> <li> position</li> <li> trade</li> </ul> </li> <li> indicator<ul> <li> function</li> <li> indicator</li> </ul> </li> <li> lettrade</li> <li> plot<ul> <li> plot</li> </ul> </li> <li> stats<ul> <li> stats</li> </ul> </li> <li> strategy<ul> <li> strategy</li> </ul> </li> <li> utils<ul> <li> docs</li> </ul> </li> </ul>"},{"location":"reference/all/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> all","text":""},{"location":"reference/all/#lettrade.all","title":"all","text":"<p>Import everything at one. Import some unnecessary but convenient for developer</p>"},{"location":"reference/lettrade/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> lettrade","text":""},{"location":"reference/lettrade/#lettrade.lettrade","title":"lettrade","text":""},{"location":"reference/lettrade/#lettrade.lettrade.LetTrade","title":"LetTrade","text":"<pre><code>LetTrade(\n    strategy: Type[Strategy],\n    datas: DataFeed | list[DataFeed] | str | list[str],\n    feeder: DataFeeder,\n    exchange: Exchange,\n    account: Account,\n    commander: Optional[Commander] = None,\n    plot: Optional[Type[Plotter]] = None,\n    *args,\n    **kwargs\n)\n</code></pre> <p>Help to load and connect module</p> Source code in <code>lettrade/lettrade.py</code> <pre><code>def __init__(\n    self,\n    strategy: Type[Strategy],\n    datas: DataFeed | list[DataFeed] | str | list[str],\n    feeder: DataFeeder,\n    exchange: Exchange,\n    account: Account,\n    commander: Optional[Commander] = None,\n    plot: Optional[Type[\"Plotter\"]] = None,\n    *args,\n    **kwargs,\n) -&gt; None:\n    # DataFeeder\n    if not feeder:\n        raise RuntimeError(\"Feeder is invalid\")\n    self.feeder = feeder\n\n    # DataFeeds\n    self.datas: list[DataFeed] = self._init_datafeeds(datas)\n    self.data: DataFeed = self.datas[0]\n    self.feeder.init(self.datas)\n\n    # Account\n    if account is None:\n        raise RuntimeError(\"Account is invalid\")\n    self.account = account\n\n    # Exchange\n    if exchange is None:\n        raise RuntimeError(\"Exchange is invalid\")\n    self.exchange = exchange\n\n    # Strategy\n    self.strategy = strategy(\n        feeder=self.feeder,\n        exchange=self.exchange,\n        account=self.account,\n        commander=commander,\n        # params=params,\n    )\n\n    # Brain\n    self.brain = Brain(\n        strategy=self.strategy,\n        exchange=self.exchange,\n        feeder=self.feeder,\n        commander=commander,\n        *args,\n        **kwargs,\n    )\n\n    self.exchange.init(\n        brain=self.brain,\n        feeder=self.feeder,\n        account=self.account,\n        commander=commander,\n    )\n\n    # Commander\n    if commander:\n        self.commander = commander\n        self.commander.init(\n            lettrade=self,\n            brain=self.brain,\n            exchange=self.exchange,\n            strategy=self.strategy,\n        )\n\n    # Plot class\n    if plot:\n        self._plot_cls = plot\n</code></pre>"},{"location":"reference/lettrade/#lettrade.lettrade.LetTrade.stats","title":"stats  <code>property</code>","text":"<pre><code>stats: Statistic\n</code></pre> <p>Get Statistic object</p>"},{"location":"reference/lettrade/#lettrade.lettrade.LetTrade.plot","title":"plot","text":"<pre><code>plot(*args, **kwargs)\n</code></pre> <p>Plot strategy result</p> Source code in <code>lettrade/lettrade.py</code> <pre><code>def plot(self, *args, **kwargs):\n    \"\"\"Plot strategy result\"\"\"\n    if __debug__:\n        from .utils.docs import is_docs_session\n\n        if is_docs_session():\n            return\n\n    if self.plotter is None:\n        if self._plot_cls is None:\n            raise RuntimeError(\"Plotter class is None\")\n\n        self.plotter = self._plot_cls(\n            feeder=self.feeder,\n            exchange=self.exchange,\n            account=self.account,\n            strategy=self.strategy,\n        )\n\n    self.plotter.plot(*args, **kwargs)\n</code></pre>"},{"location":"reference/lettrade/#lettrade.lettrade.LetTrade.run","title":"run","text":"<pre><code>run(*args, **kwargs)\n</code></pre> <p>Run strategy</p> Source code in <code>lettrade/lettrade.py</code> <pre><code>def run(self, *args, **kwargs):\n    \"\"\"Run strategy\"\"\"\n    if self.commander:\n        self.commander.start()\n\n    self.brain.run(*args, **kwargs)\n\n    if self.commander:\n        self.commander.stop()\n\n    # Only show stats when backtest data\n    if not self.feeder.is_continous:\n        self.stats.compute()\n        return self.stats.show()\n</code></pre>"},{"location":"reference/lettrade/#lettrade.lettrade.LetTrade.stop","title":"stop","text":"<pre><code>stop()\n</code></pre> <p>Stop strategy</p> Source code in <code>lettrade/lettrade.py</code> <pre><code>def stop(self):\n    \"\"\"Stop strategy\"\"\"\n    self.brain.stop()\n    if self.plotter is not None:\n        self.plotter.stop()\n</code></pre>"},{"location":"reference/account/","title":"Index","text":""},{"location":"reference/account/#lettrade.account","title":"account","text":""},{"location":"reference/account/account/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> account","text":""},{"location":"reference/account/account/#lettrade.account.account","title":"account","text":""},{"location":"reference/account/account/#lettrade.account.account.Account","title":"Account","text":"<pre><code>Account(\n    *,\n    risk=0.02,\n    cash=10000,\n    commission=0.0,\n    margin=None,\n    leverage=1.0\n)\n</code></pre> <p>Manage account balance, leverage, commission. Risk calculate and control</p> Source code in <code>lettrade/account/account.py</code> <pre><code>def __init__(\n    self,\n    *,\n    risk=0.02,\n    cash=10_000,\n    commission=0.0,\n    margin=None,\n    leverage=1.0,\n) -&gt; None:\n    self._risk: risk\n    self._cash: float = cash\n    self._commission: float = commission\n    self._margin = margin\n    self._leverage: float = leverage\n\n    self._equities: dict[str, object] = dict()\n    self._do_snapshot_equity = True  # Snapshot balance\n</code></pre>"},{"location":"reference/account/account/#lettrade.account.account.Account.pl","title":"pl","text":"<pre><code>pl(size, entry_price: float, exit_price=None)\n</code></pre> <p>Estimate temporary profit and loss</p> Source code in <code>lettrade/account/account.py</code> <pre><code>def pl(self, size, entry_price: float, exit_price=None):\n    \"\"\"Estimate temporary profit and loss\"\"\"\n    if exit_price is None:\n        exit_price = self._exchange.data.open[0]\n\n    return size * (exit_price - entry_price)\n</code></pre>"},{"location":"reference/account/account/#lettrade.account.account.Account.risk","title":"risk","text":"<pre><code>risk(size, **kwargs)\n</code></pre> <p>Risk calculation</p> Source code in <code>lettrade/account/account.py</code> <pre><code>def risk(self, size, **kwargs):\n    \"\"\"\n    Risk calculation\n    \"\"\"\n    if size is None:\n        return self._risk\n    return size\n</code></pre>"},{"location":"reference/brain/","title":"Index","text":""},{"location":"reference/brain/#lettrade.brain","title":"brain","text":""},{"location":"reference/brain/brain/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> brain","text":""},{"location":"reference/brain/brain/#lettrade.brain.brain","title":"brain","text":""},{"location":"reference/brain/brain/#lettrade.brain.brain.Brain","title":"Brain","text":"<pre><code>Brain(\n    strategy: Strategy,\n    exchange: Exchange,\n    feeder: DataFeeder,\n    commander: Commander,\n    *args,\n    **kwargs\n)\n</code></pre> <p>Brain of <code>lettrade</code></p> Source code in <code>lettrade/brain/brain.py</code> <pre><code>def __init__(\n    self,\n    strategy: Strategy,\n    exchange: Exchange,\n    feeder: DataFeeder,\n    commander: \"Commander\",\n    *args,\n    **kwargs,\n) -&gt; None:\n    self.strategy: Strategy = strategy\n    self.exchange: Exchange = exchange\n    self.feeder: DataFeeder = feeder\n    self.datas: list[DataFeed] = self.feeder.datas\n    self.data: DataFeed = self.feeder.data\n\n    self.commander: \"Commander\" = commander\n</code></pre>"},{"location":"reference/commander/","title":"Index","text":""},{"location":"reference/commander/#lettrade.commander","title":"commander","text":""},{"location":"reference/commander/commander/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> commander","text":""},{"location":"reference/commander/commander/#lettrade.commander.commander","title":"commander","text":""},{"location":"reference/commander/commander/#lettrade.commander.commander.Commander","title":"Commander","text":"<pre><code>Commander()\n</code></pre> <p>               Bases: <code>ABC</code></p> <p>Abstract class for strategy commander. Help to manage and report strategy real-time</p> Source code in <code>lettrade/commander/commander.py</code> <pre><code>def __init__(self) -&gt; None:\n    super().__init__()\n</code></pre>"},{"location":"reference/commander/commander/#lettrade.commander.commander.Commander.init","title":"init","text":"<pre><code>init(\n    lettrade: LetTrade,\n    brain: Brain,\n    exchange: Exchange,\n    strategy: Strategy,\n)\n</code></pre> <p>Init commander dependencies</p> <p>Parameters:</p> <ul> <li> <code>lettrade</code>               (<code>LetTrade</code>)           \u2013            <p>LetTrade object</p> </li> <li> <code>brain</code>               (<code>Brain</code>)           \u2013            <p>Brain of bot</p> </li> <li> <code>exchange</code>               (<code>Exchange</code>)           \u2013            <p>Manage bot trading</p> </li> <li> <code>strategy</code>               (<code>Strategy</code>)           \u2013            <p>Strategy of bot</p> </li> </ul> Source code in <code>lettrade/commander/commander.py</code> <pre><code>def init(\n    self,\n    lettrade: \"LetTrade\",\n    brain: \"Brain\",\n    exchange: \"Exchange\",\n    strategy: \"Strategy\",\n):\n    \"\"\"Init commander dependencies\n\n    Args:\n        lettrade (LetTrade): LetTrade object\n        brain (Brain): Brain of bot\n        exchange (Exchange): Manage bot trading\n        strategy (Strategy): Strategy of bot\n    \"\"\"\n    self.lettrade = lettrade\n    self.brain = brain\n    self.exchange = exchange\n    self.strategy = strategy\n</code></pre>"},{"location":"reference/commander/telegram/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> telegram","text":""},{"location":"reference/commander/telegram/#lettrade.commander.telegram","title":"telegram","text":"<p>Module help LetTrade send notify and receive command from Telegram Bot</p>"},{"location":"reference/commander/telegram/#lettrade.commander.telegram--example","title":"Example","text":"Example <pre><code>import logging\nimport os\nfrom datetime import datetime\n\nimport talib.abstract as ta\nfrom dotenv import load_dotenv\n\n# import example.logger\nfrom lettrade.all import (\n    DataFeed,\n    Strategy,\n    TelegramCommander,\n    crossover,\n    crossunder,\n    let_metatrader,\n)\n\nlogger = logging.getLogger(__name__)\nload_dotenv()\n\n\nclass SmaCross(Strategy):\n    ema1_period = 9\n    ema2_period = 21\n\n    _now: datetime\n\n    def indicators(self, df: DataFeed):\n        df[\"ema1\"] = ta.EMA(df, timeperiod=self.ema1_period)\n        df[\"ema2\"] = ta.EMA(df, timeperiod=self.ema2_period)\n\n        df[\"signal_ema_crossover\"] = crossover(df.ema1, df.ema2)\n        df[\"signal_ema_crossunder\"] = crossunder(df.ema1, df.ema2)\n        return df\n\n    def start(self, df: DataFeed):\n        self._now = df.now\n\n    def next(self, df: DataFeed):\n        if self.is_live:\n            # Filter start of new bar\n            if self._now == df.now:\n                return\n            self._now = df.now\n\n        if len(self.orders) &gt; 0 or len(self.trades) &gt; 0:\n            return\n\n        if df.signal_ema_crossover[-1]:\n            price = self.data.close[-1]\n            self.buy(size=0.1, sl=price - 0.01, tp=price + 0.01)\n        elif df.signal_ema_crossunder[-1]:\n            price = self.data.close[-1]\n            self.sell(size=0.1, sl=price + 0.01, tp=price - 0.01)\n\n    def end(self, df: DataFeed):\n        print(df)\n        print(self.orders)\n\n    def plot(self, df: DataFeed):\n        return dict(\n            scatters=[\n                dict(\n                    x=df.index,\n                    y=df[\"ema1\"],\n                    line=dict(color=\"blue\", width=1),\n                    name=\"ema1\",\n                ),\n                dict(\n                    x=df.index,\n                    y=df[\"ema2\"],\n                    line=dict(color=\"green\", width=1),\n                    name=\"ema2\",\n                ),\n            ]\n        )\n\n\nif __name__ == \"__main__\":\n    lt = let_metatrader(\n        strategy=SmaCross,\n        datas={(\"EURGBP\", \"5m\")},\n        login=os.getenv(\"MT5_LOGIN\"),\n        password=os.getenv(\"MT5_PASSWORD\"),\n        server=os.getenv(\"MT5_SERVER\"),\n        commander=TelegramCommander(\n            token=os.getenv(\"TELEGRAM_TOKEN\"),\n            chat_id=os.getenv(\"TELEGRAM_CHAT_ID\"),\n        ),\n    )\n\n    lt.run()\n</code></pre>"},{"location":"reference/commander/telegram/#lettrade.commander.telegram.TelegramCommander","title":"TelegramCommander","text":"<pre><code>TelegramCommander(\n    token: str, chat_id: int, *args, **kwargs\n)\n</code></pre> <p>               Bases: <code>Commander</code></p> <p>Send notify and receive command from Telegram Bot</p> <p>Parameters:</p> <ul> <li> <code>token</code>               (<code>str</code>)           \u2013            <p>Telegram Bot token</p> </li> <li> <code>chat_id</code>               (<code>int</code>)           \u2013            <p>Telegram chat_id</p> </li> </ul> Source code in <code>lettrade/commander/telegram.py</code> <pre><code>def __init__(self, token: str, chat_id: int, *args, **kwargs) -&gt; None:\n    \"\"\"_summary_\n\n    Args:\n        token (str): Telegram Bot token\n        chat_id (int): Telegram chat_id\n    \"\"\"\n    super().__init__(*args, **kwargs)\n\n    self._token: str = token\n    self._chat_id: int = int(chat_id)\n\n    self._app: Application\n    self._loop: asyncio.AbstractEventLoop\n</code></pre>"},{"location":"reference/commander/telegram/#lettrade.commander.telegram.TelegramCommander.cleanup","title":"cleanup","text":"<pre><code>cleanup() -&gt; None\n</code></pre> <p>Stops all running telegram threads.</p> Source code in <code>lettrade/commander/telegram.py</code> <pre><code>def cleanup(self) -&gt; None:\n    \"\"\"Stops all running telegram threads.\"\"\"\n    # This can take up to `timeout` from the call to `start_polling`.\n    asyncio.run_coroutine_threadsafe(self._cleanup_telegram(), self._loop)\n    self._thread.join()\n</code></pre>"},{"location":"reference/commander/telegram/#lettrade.commander.telegram.TelegramCommander.init","title":"init","text":"<pre><code>init(\n    lettrade: LetTrade,\n    brain: Brain,\n    exchange: Exchange,\n    strategy: Strategy,\n)\n</code></pre> <p>Init commander dependencies</p> <p>Parameters:</p> <ul> <li> <code>lettrade</code>               (<code>LetTrade</code>)           \u2013            <p>LetTrade object</p> </li> <li> <code>brain</code>               (<code>Brain</code>)           \u2013            <p>Brain of bot</p> </li> <li> <code>exchange</code>               (<code>Exchange</code>)           \u2013            <p>Manage bot trading</p> </li> <li> <code>strategy</code>               (<code>Strategy</code>)           \u2013            <p>Strategy of bot</p> </li> </ul> Source code in <code>lettrade/commander/commander.py</code> <pre><code>def init(\n    self,\n    lettrade: \"LetTrade\",\n    brain: \"Brain\",\n    exchange: \"Exchange\",\n    strategy: \"Strategy\",\n):\n    \"\"\"Init commander dependencies\n\n    Args:\n        lettrade (LetTrade): LetTrade object\n        brain (Brain): Brain of bot\n        exchange (Exchange): Manage bot trading\n        strategy (Strategy): Strategy of bot\n    \"\"\"\n    self.lettrade = lettrade\n    self.brain = brain\n    self.exchange = exchange\n    self.strategy = strategy\n</code></pre>"},{"location":"reference/commander/telegram/#lettrade.commander.telegram.TelegramCommander.send_message","title":"send_message","text":"<pre><code>send_message(msg: str, **kwargs) -&gt; None\n</code></pre> <p>Send message to Telegram Bot</p> <p>Parameters:</p> <ul> <li> <code>msg</code>               (<code>str</code>)           \u2013            <p>Message</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>_type_</code> (              <code>None</code> )          \u2013            <p><code>None</code></p> </li> </ul> Source code in <code>lettrade/commander/telegram.py</code> <pre><code>def send_message(self, msg: str, **kwargs) -&gt; None:\n    \"\"\"Send message to Telegram Bot\n\n    Args:\n        msg (str): Message\n\n    Returns:\n        _type_: `None`\n    \"\"\"\n    return self._send_msg(msg, **kwargs)\n</code></pre>"},{"location":"reference/commander/telegram/#lettrade.commander.telegram.TelegramCommander.start","title":"start","text":"<pre><code>start()\n</code></pre> <p>Start</p> Source code in <code>lettrade/commander/telegram.py</code> <pre><code>def start(self):\n    \"\"\"Start\"\"\"\n    self._init_keyboard()\n    self._start_thread()\n</code></pre>"},{"location":"reference/commander/telegram/#lettrade.commander.telegram.TelegramCommander.stop","title":"stop","text":"<pre><code>stop()\n</code></pre> <p>Stop</p> Source code in <code>lettrade/commander/telegram.py</code> <pre><code>def stop(self):\n    \"\"\"Stop\"\"\"\n    self.cleanup()\n</code></pre>"},{"location":"reference/commander/telegram/#lettrade.commander.telegram.authorized_only","title":"authorized_only","text":"<pre><code>authorized_only(\n    command_handler: Callable[\n        ..., Coroutine[Any, Any, None]\n    ]\n)\n</code></pre> <p>Decorator to check if the message comes from the correct chat_id</p> <p>Parameters:</p> <ul> <li> <code>command_handler</code>               (<code>Callable[..., Coroutine[Any, Any, None]]</code>)           \u2013            <p>Telegram CommandHandler</p> </li> </ul> Source code in <code>lettrade/commander/telegram.py</code> <pre><code>def authorized_only(command_handler: Callable[..., Coroutine[Any, Any, None]]):\n    \"\"\"Decorator to check if the message comes from the correct chat_id\n\n    Args:\n        command_handler (Callable[..., Coroutine[Any, Any, None]]): Telegram CommandHandler\n    \"\"\"\n\n    @wraps(command_handler)\n    async def wrapper(self: \"TelegramCommander\", *args, **kwargs):\n        \"\"\"Decorator logic\"\"\"\n        update = kwargs.get(\"update\") or args[0]\n\n        # Reject unauthorized messages\n        if update.callback_query:\n            cchat_id = int(update.callback_query.message.chat.id)\n        else:\n            cchat_id = int(update.message.chat_id)\n\n        if cchat_id != self._chat_id:\n            logger.info(f\"Rejected unauthorized message from: {update.message.chat_id}\")\n            return wrapper\n\n        logger.debug(\n            \"Executing handler: %s for chat_id: %s\",\n            command_handler.__name__,\n            self._chat_id,\n        )\n        try:\n            return await command_handler(self, *args, **kwargs)\n        except Exception as e:\n            await self._send_msg(str(e))\n            # except BaseException:\n            logger.exception(\"Exception occurred within Telegram module\", exc_info=e)\n\n    return wrapper\n</code></pre>"},{"location":"reference/data/","title":"Index","text":""},{"location":"reference/data/#lettrade.data","title":"data","text":""},{"location":"reference/data/csv/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> csv","text":""},{"location":"reference/data/csv/#lettrade.data.csv","title":"csv","text":""},{"location":"reference/data/csv/#lettrade.data.csv.CSVDataFeed","title":"CSVDataFeed","text":"<pre><code>CSVDataFeed(\n    path: str,\n    delimiter: str = \",\",\n    index_col: int = 0,\n    header: int = 0,\n    *args: list,\n    **kwargs: dict\n)\n</code></pre> <p>               Bases: <code>DataFeed</code></p> <p>Implement help to load DataFeed from csv file</p> <p>Parameters:</p> <ul> <li> <code>path</code>               (<code>str</code>)           \u2013            <p>Path of csv file</p> </li> <li> <code>delimiter</code>               (<code>str</code>, default:                   <code>','</code> )           \u2013            <p>description. Defaults to \",\".</p> </li> <li> <code>index_col</code>               (<code>int</code>, default:                   <code>0</code> )           \u2013            <p>description. Defaults to 0.</p> </li> <li> <code>header</code>               (<code>int</code>, default:                   <code>0</code> )           \u2013            <p>description. Defaults to 0.</p> </li> <li> <code>*args</code>               (<code>list</code>, default:                   <code>()</code> )           \u2013            <p>DataFeed list parameters</p> </li> <li> <code>**kwargs</code>               (<code>dict</code>, default:                   <code>{}</code> )           \u2013            <p>DataFeed dict parameters</p> </li> </ul> Source code in <code>lettrade/data/csv.py</code> <pre><code>def __init__(\n    self,\n    path: str,\n    delimiter: str = \",\",\n    index_col: int = 0,\n    header: int = 0,\n    *args: list,\n    **kwargs: dict,\n) -&gt; None:\n    \"\"\"_summary_\n\n    Args:\n        path (str): Path of csv file\n        delimiter (str, optional): _description_. Defaults to \",\".\n        index_col (int, optional): _description_. Defaults to 0.\n        header (int, optional): _description_. Defaults to 0.\n        *args (list): [DataFeed](./data.md#lettrade.data.data.DataFeed) list parameters\n        **kwargs (dict): [DataFeed](./data.md#lettrade.data.data.DataFeed) dict parameters\n    \"\"\"\n    df = pd.read_csv(\n        path,\n        index_col=index_col,\n        parse_dates=[\"datetime\"],\n        delimiter=delimiter,\n        header=header,\n    )\n    # df.reset_index(inplace=True)\n    # TODO: validate data\n\n    super().__init__(data=df, name=path, *args, **kwargs)\n</code></pre>"},{"location":"reference/data/data/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> data","text":""},{"location":"reference/data/data/#lettrade.data.data","title":"data","text":""},{"location":"reference/data/data/#lettrade.data.data.DataFeed","title":"DataFeed","text":"<pre><code>DataFeed(\n    name: str, meta: Optional[dict] = None, *args, **kwargs\n)\n</code></pre> <p>               Bases: <code>DataFrame</code></p> <p>Data for Strategy. A implement of pandas.DataFrame</p> <p>Parameters:</p> <ul> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>Name of DataFeed</p> </li> <li> <code>meta</code>               (<code>Optional[dict]</code>, default:                   <code>None</code> )           \u2013            <p>metadata of DataFeed. Defaults to None.</p> </li> <li> <code>*args</code>               (<code>list</code>, default:                   <code>()</code> )           \u2013            <p><code>pandas.DataFrame</code> list parameters</p> </li> <li> <code>**kwargs</code>               (<code>dict</code>, default:                   <code>{}</code> )           \u2013            <p><code>pandas.DataFrame</code> dict parameters</p> </li> </ul> Source code in <code>lettrade/data/data.py</code> <pre><code>def __init__(\n    self,\n    name: str,\n    # data: pd.DataFrame,\n    meta: Optional[dict] = None,\n    # dtype={},\n    *args,\n    **kwargs,\n) -&gt; None:\n    \"\"\"_summary_\n\n    Args:\n        name (str): Name of DataFeed\n        meta (Optional[dict], optional): metadata of DataFeed. Defaults to None.\n        *args (list): `pandas.DataFrame` list parameters\n        **kwargs (dict): `pandas.DataFrame` dict parameters\n    \"\"\"\n\n    # dtype.update(\n    #     {\n    #         \"datetime\": \"datetime64[ns, UTC]\",\n    #         \"open\": \"float\",\n    #         \"high\": \"float\",\n    #         \"low\": \"float\",\n    #         \"close\": \"float\",\n    #         \"volume\": \"float\",\n    #     }\n    # )\n    # print(dtype)\n    # data.set_index(\n    #     pd.DatetimeIndex(data.datetime, dtype=\"datetime64[ns, UTC]\"), inplace=True\n    # )\n    # print(data.index.tz_convert(pytz.utc))\n\n    super().__init__(*args, **kwargs)\n    if not isinstance(self.index, pd.RangeIndex):\n        self.reset_index(inplace=True)\n\n    # self.index = pd.RangeIndex(start=-len(self.index) + 1, stop=1, step=1)\n\n    # Metadata\n    if not meta:\n        meta = dict()\n    meta[\"name\"] = name\n    self.attrs = {\"lt_meta\": meta}\n</code></pre>"},{"location":"reference/data/feeder/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> feeder","text":""},{"location":"reference/data/feeder/#lettrade.data.feeder","title":"feeder","text":""},{"location":"reference/data/feeder/#lettrade.data.feeder.DataFeeder","title":"DataFeeder","text":""},{"location":"reference/data/feeder/#lettrade.data.feeder.DataFeeder.is_continous","title":"is_continous  <code>property</code>","text":"<pre><code>is_continous\n</code></pre> <p>Flag check is realtime continous datafeeder</p>"},{"location":"reference/data/pickle/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> pickle","text":""},{"location":"reference/data/pickle/#lettrade.data.pickle","title":"pickle","text":""},{"location":"reference/data/replay/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> replay","text":""},{"location":"reference/data/replay/#lettrade.data.replay","title":"replay","text":""},{"location":"reference/data/exporter/","title":"Index","text":""},{"location":"reference/data/exporter/#lettrade.data.exporter","title":"exporter","text":""},{"location":"reference/data/exporter/csv/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> csv","text":""},{"location":"reference/data/exporter/csv/#lettrade.data.exporter.csv","title":"csv","text":""},{"location":"reference/exchange/","title":"Index","text":""},{"location":"reference/exchange/#lettrade.exchange","title":"exchange","text":"<p>Exchange implements</p>"},{"location":"reference/exchange/#lettrade.exchange--stable-exchanges","title":"Stable Exchanges","text":"<ul> <li>BackTest: Backtesting exchange</li> <li>MetaTrader: MetaTrader 5 live data and trading</li> <li>CCXT: CCXT CryptoCurrency live data and trading</li> </ul>"},{"location":"reference/exchange/base/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> base","text":""},{"location":"reference/exchange/base/#lettrade.exchange.base","title":"base","text":""},{"location":"reference/exchange/exchange/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> exchange","text":""},{"location":"reference/exchange/exchange/#lettrade.exchange.exchange","title":"exchange","text":""},{"location":"reference/exchange/exchange/#lettrade.exchange.exchange.Exchange","title":"Exchange","text":"<pre><code>Exchange()\n</code></pre> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def __init__(self):\n    self.executes = dict()\n    self.orders = dict()\n    self.history_orders = dict()\n    self.trades = dict()\n    self.history_trades = dict()\n    self.positions = dict()\n\n    self._state = ExchangeState.Init\n</code></pre>"},{"location":"reference/exchange/exchange/#lettrade.exchange.exchange.Exchange.next","title":"next","text":"<pre><code>next()\n</code></pre> <p>Call when new data feeded</p> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def next(self):\n    \"Call when new data feeded\"\n    self._account._snapshot_equity()\n</code></pre>"},{"location":"reference/exchange/exchange/#lettrade.exchange.exchange.Exchange.on_execute","title":"on_execute","text":"<pre><code>on_execute(execute: Execute, broadcast=True, **kwargs)\n</code></pre> <p>Receive Execute event from exchange then store and emit for Brain</p> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def on_execute(self, execute: Execute, broadcast=True, **kwargs):\n    \"\"\"\n    Receive Execute event from exchange then store and emit for Brain\n    \"\"\"\n    if not isinstance(execute, Execute):\n        raise RuntimeError(f\"{execute} is not instance of type Execute\")\n\n    if execute.id in self.executes:\n        # Merge to keep Execute handler for strategy using\n        # when strategy want to store Execute object\n        # and object will be automatic update directly\n        self.executes[execute.id].merge(execute)\n        execute = self.executes[execute.id]\n    else:\n        self.executes[execute.id] = execute\n\n    if self._state != ExchangeState.Run:\n        return\n\n    if broadcast:\n        self._brain.on_execute(execute)\n</code></pre>"},{"location":"reference/exchange/exchange/#lettrade.exchange.exchange.Exchange.on_order","title":"on_order","text":"<pre><code>on_order(order: Order, broadcast=True, **kwargs)\n</code></pre> <p>Receive Order event from exchange then store and emit for Brain</p> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def on_order(self, order: Order, broadcast=True, **kwargs):\n    \"\"\"\n    Receive Order event from exchange then store and emit for Brain\n    \"\"\"\n    if not isinstance(order, Order):\n        raise RuntimeError(f\"{order} is not instance of type Order\")\n\n    if order.state in [OrderState.Executed, OrderState.Canceled]:\n        self.history_orders[order.id] = order\n        if order.id in self.orders:\n            del self.orders[order.id]\n    else:\n        if order.id in self.history_orders:\n            raise RuntimeError(f\"Order {order.id} closed\")\n\n        if order.id in self.orders:\n            # Merge to keep Order handler for strategy using\n            # when strategy want to store Order object\n            # and object will be automatic update directly\n            self.orders[order.id].merge(order)\n            order = self.orders[order.id]\n        else:\n            self.orders[order.id] = order\n\n    if self._state != ExchangeState.Run:\n        return\n\n    if broadcast:\n        self._brain.on_order(order)\n</code></pre>"},{"location":"reference/exchange/exchange/#lettrade.exchange.exchange.Exchange.on_position","title":"on_position","text":"<pre><code>on_position(\n    position: Position, broadcast=True, *args, **kwargs\n)\n</code></pre> <p>Receive Position event from exchange then store and emit for Brain</p> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def on_position(self, position: Position, broadcast=True, *args, **kwargs):\n    \"\"\"\n    Receive Position event from exchange then store and emit for Brain\n    \"\"\"\n    if not isinstance(position, Position):\n        raise RuntimeError(f\"{position} is not instance of type Position\")\n\n    if position.id in self.positions:\n        # Merge to keep Position handler for strategy using\n        # when strategy want to store Position object\n        # and object will be automatic update directly\n        self.positions[position.id].merge(position)\n    else:\n        self.positions[position.id] = position\n\n    if self._state != ExchangeState.Run:\n        return\n\n    if broadcast:\n        self._brain.on_position(position)\n</code></pre>"},{"location":"reference/exchange/exchange/#lettrade.exchange.exchange.Exchange.on_trade","title":"on_trade","text":"<pre><code>on_trade(trade: Trade, broadcast=True, *args, **kwargs)\n</code></pre> <p>Receive Trade event from exchange then store and emit for Brain</p> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def on_trade(self, trade: Trade, broadcast=True, *args, **kwargs):\n    \"\"\"\n    Receive Trade event from exchange then store and emit for Brain\n    \"\"\"\n    if not isinstance(trade, Trade):\n        raise RuntimeError(f\"{trade} is not instance of type Trade\")\n\n    if trade.state == TradeState.Exit:\n        self.history_trades[trade.id] = trade\n        if trade.id in self.trades:\n            del self.trades[trade.id]\n\n        self._account._on_trade_exit(trade)\n    else:\n        if trade.id in self.history_trades:\n            raise RuntimeError(f\"Order {trade.id} closed\")\n        if trade.id in self.trades:\n            # Merge to keep Trade handler for strategy using\n            # when strategy want to store Trade object\n            # and object will be automatic update directly\n            self.trades[trade.id].merge(trade)\n            trade = self.trades[trade.id]\n        else:\n            self.trades[trade.id] = trade\n\n    if self._state != ExchangeState.Run:\n        return\n\n    if broadcast:\n        self._brain.on_trade(trade)\n</code></pre>"},{"location":"reference/exchange/execute/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> execute","text":""},{"location":"reference/exchange/execute/#lettrade.exchange.execute","title":"execute","text":""},{"location":"reference/exchange/execute/#lettrade.exchange.execute.Execute","title":"Execute","text":"<pre><code>Execute(\n    id: str,\n    exchange: Exchange,\n    data: DataFeed,\n    size: float,\n    price: float,\n    at: float,\n    order_id: str = None,\n    order: Order = None,\n    trade_id: str = None,\n    trade: Trade = None,\n)\n</code></pre> <p>               Bases: <code>BaseTransaction</code></p> <p>Place new orders through <code>Strategy.buy()</code> and <code>Strategy.sell()</code>. Query existing orders through <code>Strategy.orders</code>.</p> <p>When an order is executed or filled, it results in a <code>Trade</code>.</p> <p>If you wish to modify aspects of a placed but not yet filled order, cancel it and place a new one instead.</p> <p>All placed orders are Good 'Til Canceled.</p> Source code in <code>lettrade/exchange/execute.py</code> <pre><code>def __init__(\n    self,\n    id: str,\n    exchange: \"Exchange\",\n    data: \"DataFeed\",\n    size: float,\n    price: float,\n    at: float,\n    order_id: str = None,\n    order: \"Order\" = None,\n    trade_id: str = None,\n    trade: \"Trade\" = None,\n):\n    super().__init__(\n        id=id,\n        exchange=exchange,\n        data=data,\n        size=size,\n    )\n    self.order_id = order_id\n    self.order: \"Order\" = order\n    self.trade_id = trade_id\n    self.trade: \"Trade\" = trade\n    self.price = price\n    self.at = at\n</code></pre>"},{"location":"reference/exchange/execute/#lettrade.exchange.execute.Execute.merge","title":"merge","text":"<pre><code>merge(other: Execute)\n</code></pre> <p>Merge to keep object handler but not overwrite for Strategy using when Strategy want to store object and object will be automatic update directly</p> Source code in <code>lettrade/exchange/execute.py</code> <pre><code>def merge(self, other: \"Execute\"):\n    \"\"\"\n    Merge to keep object handler but not overwrite for Strategy using when Strategy want to store object and object will be automatic update directly\n    \"\"\"\n    if other is self:\n        return\n\n    if self.id != other.id:\n        raise RuntimeError(f\"Merge difference id {self.id} != {other.id} execute\")\n\n    self.price = other.price\n    self.size = other.size\n\n    if other.at:\n        self.at = other.at\n    if other.order_id:\n        self.order_id = other.order_id\n    if other.order:\n        self.order = other.order\n    if other.trade_id:\n        self.trade_id = other.trade_id\n    if other.trade:\n        self.trade = other.trade\n</code></pre>"},{"location":"reference/exchange/order/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> order","text":""},{"location":"reference/exchange/order/#lettrade.exchange.order","title":"order","text":""},{"location":"reference/exchange/order/#lettrade.exchange.order.Order","title":"Order","text":"<pre><code>Order(\n    id: str,\n    exchange: Exchange,\n    data: DataFeed,\n    size: float,\n    state: OrderState = OrderState.Pending,\n    type: OrderType = OrderType.Market,\n    limit_price: Optional[float] = None,\n    stop_price: Optional[float] = None,\n    sl_price: Optional[float] = None,\n    tp_price: Optional[float] = None,\n    trade: Optional[Trade] = None,\n    tag: object = None,\n    open_at: int = None,\n    open_price: int = None,\n)\n</code></pre> <p>               Bases: <code>BaseTransaction</code></p> Source code in <code>lettrade/exchange/order.py</code> <pre><code>def __init__(\n    self,\n    id: str,\n    exchange: \"Exchange\",\n    data: \"DataFeed\",\n    size: float,\n    state: OrderState = OrderState.Pending,\n    type: OrderType = OrderType.Market,\n    limit_price: Optional[float] = None,\n    stop_price: Optional[float] = None,\n    sl_price: Optional[float] = None,\n    tp_price: Optional[float] = None,\n    trade: Optional[\"Trade\"] = None,\n    tag: object = None,\n    open_at: int = None,\n    open_price: int = None,\n):\n    super().__init__(\n        id=id,\n        exchange=exchange,\n        data=data,\n        size=size,\n    )\n\n    self.type: OrderType = type\n    self.state: OrderState = state\n    self.limit_price: Optional[float] = limit_price\n    self.stop_price: Optional[float] = stop_price\n    self.sl_price: Optional[float] = sl_price\n    self.tp_price: Optional[float] = tp_price\n    self.trade: Optional[\"Trade\"] = trade\n    self.tag: object = tag\n\n    self.open_at: int = open_at\n    self.open_price: int = open_price\n    self.entry_at: int = None\n    self.entry_price: int = None\n</code></pre>"},{"location":"reference/exchange/order/#lettrade.exchange.order.Order.is_long","title":"is_long  <code>property</code>","text":"<pre><code>is_long\n</code></pre> <p>True if the order is long (order size is positive).</p>"},{"location":"reference/exchange/order/#lettrade.exchange.order.Order.is_short","title":"is_short  <code>property</code>","text":"<pre><code>is_short\n</code></pre> <p>True if the order is short (order size is negative).</p>"},{"location":"reference/exchange/position/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> position","text":""},{"location":"reference/exchange/position/#lettrade.exchange.position","title":"position","text":""},{"location":"reference/exchange/position/#lettrade.exchange.position.Position","title":"Position","text":"<pre><code>Position(exchange: Exchange)\n</code></pre> Source code in <code>lettrade/exchange/position.py</code> <pre><code>def __init__(self, exchange: \"Exchange\"):\n    self.__exchange = exchange\n</code></pre>"},{"location":"reference/exchange/position/#lettrade.exchange.position.Position.is_long","title":"is_long  <code>property</code>","text":"<pre><code>is_long: bool\n</code></pre> <p>True if the position is long (position size is positive).</p>"},{"location":"reference/exchange/position/#lettrade.exchange.position.Position.is_short","title":"is_short  <code>property</code>","text":"<pre><code>is_short: bool\n</code></pre> <p>True if the position is short (position size is negative).</p>"},{"location":"reference/exchange/position/#lettrade.exchange.position.Position.pl","title":"pl  <code>property</code>","text":"<pre><code>pl: float\n</code></pre> <p>Profit (positive) or loss (negative) of the current position in cash units.</p>"},{"location":"reference/exchange/position/#lettrade.exchange.position.Position.pl_pct","title":"pl_pct  <code>property</code>","text":"<pre><code>pl_pct: float\n</code></pre> <p>Profit (positive) or loss (negative) of the current position in percent.</p>"},{"location":"reference/exchange/position/#lettrade.exchange.position.Position.size","title":"size  <code>property</code>","text":"<pre><code>size: float\n</code></pre> <p>Position size in units of asset. Negative if position is short.</p>"},{"location":"reference/exchange/position/#lettrade.exchange.position.Position.close","title":"close","text":"<pre><code>close(portion: float = 1.0)\n</code></pre> <p>Close portion of position by closing <code>portion</code> of each active trade. See <code>Trade.close</code>.</p> Source code in <code>lettrade/exchange/position.py</code> <pre><code>def close(self, portion: float = 1.0):\n    \"\"\"\n    Close portion of position by closing `portion` of each active trade. See `Trade.close`.\n    \"\"\"\n    for trade in self.__exchange.trades:\n        trade.close(portion)\n</code></pre>"},{"location":"reference/exchange/trade/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> trade","text":""},{"location":"reference/exchange/trade/#lettrade.exchange.trade","title":"trade","text":""},{"location":"reference/exchange/trade/#lettrade.exchange.trade.Trade","title":"Trade","text":"<pre><code>Trade(\n    id: str,\n    exchange: Exchange,\n    data: DataFeed,\n    size: float,\n    parent: Order,\n    tag: object = \"\",\n    state: TradeState = TradeState.Open,\n    entry_price: Optional[float] = None,\n    entry_at: Optional[int] = None,\n    sl_order: Optional[Order] = None,\n    tp_order: Optional[Order] = None,\n)\n</code></pre> <p>               Bases: <code>BaseTransaction</code></p> <p>When an <code>Order</code> is filled, it results in an active <code>Trade</code>. Find active trades in <code>Strategy.trades</code> and closed, settled trades in <code>Strategy.closed_trades</code>.</p> Source code in <code>lettrade/exchange/trade.py</code> <pre><code>def __init__(\n    self,\n    id: str,\n    exchange: \"Exchange\",\n    data: \"DataFeed\",\n    size: float,\n    parent: \"Order\",\n    tag: object = \"\",\n    state: TradeState = TradeState.Open,\n    entry_price: Optional[float] = None,\n    entry_at: Optional[int] = None,\n    sl_order: Optional[Order] = None,\n    tp_order: Optional[Order] = None,\n):\n    super().__init__(\n        id=id,\n        exchange=exchange,\n        data=data,\n        size=size,\n    )\n    self._account = self.exchange._account\n\n    self.state = state\n    self.tag: object = tag\n    self.parent: \"Order\" = parent\n\n    self.entry_price: Optional[float] = entry_price\n    self.entry_at: Optional[int] = entry_at\n    self.exit_price: Optional[float] = None\n    self.exit_at: Optional[int] = None\n    self.exit_pl: Optional[float] = None\n    self.exit_fee: Optional[float] = None\n    self.sl_order: Optional[Order] = sl_order\n    self.tp_order: Optional[Order] = tp_order\n</code></pre>"},{"location":"reference/exchange/trade/#lettrade.exchange.trade.Trade.fee","title":"fee  <code>property</code>","text":"<pre><code>fee: float\n</code></pre> <p>Fee/Estimate Fee for trade</p> <p>Returns:</p> <ul> <li> <code>float</code> (              <code>float</code> )          \u2013            <p>Fee</p> </li> </ul>"},{"location":"reference/exchange/trade/#lettrade.exchange.trade.Trade.is_exited","title":"is_exited  <code>property</code>","text":"<pre><code>is_exited: bool\n</code></pre> <p>Flag to check Trade state.</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True if the trade exited</p> </li> </ul>"},{"location":"reference/exchange/trade/#lettrade.exchange.trade.Trade.is_long","title":"is_long  <code>property</code>","text":"<pre><code>is_long: bool\n</code></pre> <p>Flag to check Trade is long side.</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True if the trade is long (trade size is positive).</p> </li> </ul>"},{"location":"reference/exchange/trade/#lettrade.exchange.trade.Trade.is_short","title":"is_short  <code>property</code>","text":"<pre><code>is_short: bool\n</code></pre> <p>Flag to check Trade is short side.</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True if the trade is short (trade size is negative).</p> </li> </ul>"},{"location":"reference/exchange/trade/#lettrade.exchange.trade.Trade.pl","title":"pl  <code>property</code>","text":"<pre><code>pl: float\n</code></pre> <p>Estimate Profit or Loss of Trade</p> <p>Returns:</p> <ul> <li> <code>float</code> (              <code>float</code> )          \u2013            <p>PnL</p> </li> </ul>"},{"location":"reference/exchange/backtest/","title":"Index","text":""},{"location":"reference/exchange/backtest/#lettrade.exchange.backtest","title":"backtest","text":""},{"location":"reference/exchange/backtest/account/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> account","text":""},{"location":"reference/exchange/backtest/account/#lettrade.exchange.backtest.account","title":"account","text":""},{"location":"reference/exchange/backtest/backtest/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> backtest","text":""},{"location":"reference/exchange/backtest/backtest/#lettrade.exchange.backtest.backtest","title":"backtest","text":""},{"location":"reference/exchange/backtest/backtest/#lettrade.exchange.backtest.backtest.let_backtest","title":"let_backtest","text":"<pre><code>let_backtest(\n    strategy: Type[Strategy],\n    datas: Optional[\n        DataFeed | list[DataFeed] | str | list[str]\n    ],\n    feeder: Optional[DataFeeder] = None,\n    exchange: Optional[Exchange] = None,\n    commander: Optional[Commander] = None,\n    plot: Optional[Type[Plotter]] = None,\n    cash: Optional[float] = 10000.0,\n    account: Optional[Account] = None,\n    **kwargs\n) -&gt; LetTrade\n</code></pre> <p>Complete <code>lettrade</code> backtest depenencies</p> <p>Parameters:</p> <ul> <li> <code>strategy</code>               (<code>Type[Strategy]</code>)           \u2013            <p>The Strategy implement class</p> </li> <li> <code>datas</code>               (<code>Optional[DataFeed | list[DataFeed] | str | list[str]]</code>)           \u2013            <p>description</p> </li> <li> <code>feeder</code>               (<code>Optional[DataFeeder]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>exchange</code>               (<code>Optional[Exchange]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>commander</code>               (<code>Optional[Commander]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>plot</code>               (<code>Optional[Type[Plotter]]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>cash</code>               (<code>Optional[float]</code>, default:                   <code>10000.0</code> )           \u2013            <p>description. Defaults to 10_000.0.</p> </li> <li> <code>account</code>               (<code>Optional[Account]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>The validate parameter error</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>LetTrade</code> (              <code>LetTrade</code> )          \u2013            <p>The LetTrade backtest object</p> </li> </ul> Source code in <code>lettrade/exchange/backtest/backtest.py</code> <pre><code>def let_backtest(\n    strategy: Type[Strategy],\n    datas: Optional[DataFeed | list[DataFeed] | str | list[str]],\n    feeder: Optional[DataFeeder] = None,\n    exchange: Optional[Exchange] = None,\n    commander: Optional[Commander] = None,\n    plot: Optional[Type[\"Plotter\"]] = None,\n    cash: Optional[float] = 10_000.0,\n    account: Optional[Account] = None,\n    **kwargs,\n) -&gt; \"LetTrade\":\n    \"\"\"Complete `lettrade` backtest depenencies\n\n    Args:\n        strategy (Type[Strategy]): The Strategy implement class\n        datas (Optional[DataFeed  |  list[DataFeed]  |  str  |  list[str]]): _description_\n        feeder (Optional[DataFeeder], optional): _description_. Defaults to None.\n        exchange (Optional[Exchange], optional): _description_. Defaults to None.\n        commander (Optional[Commander], optional): _description_. Defaults to None.\n        plot (Optional[Type[Plotter]], optional): _description_. Defaults to None.\n        cash (Optional[float], optional): _description_. Defaults to 10_000.0.\n        account (Optional[Account], optional): _description_. Defaults to None.\n\n    Raises:\n        RuntimeError: The validate parameter error\n\n    Returns:\n        LetTrade: The LetTrade backtest object\n    \"\"\"\n    from lettrade.plot import Plotter\n\n    # Data\n    feeds = []\n    # Support single and multiple data\n    if not isinstance(datas, list):\n        datas = [datas]\n    for data in datas:\n        if isinstance(data, BackTestDataFeed):\n            feeds.append(data)\n            continue\n\n        if isinstance(data, str):\n            feeds.append(CSVBackTestDataFeed(data))\n            continue\n\n        if not isinstance(data, DataFeed):\n            raise RuntimeError(f\"Data {data} type is invalid\")\n\n        feeds.append(BackTestDataFeed(data))\n\n    # DataFeeder\n    if not feeder:\n        feeder = BackTestDataFeeder()\n\n    # Account\n    if account is None:\n        account = BackTestAccount()\n\n    # Exchange\n    if exchange is None:\n        exchange = BackTestExchange()\n\n    # Commander\n    if commander is None:\n        commander = BackTestCommander()\n\n    # Plot\n    if plot is None:\n        plot = Plotter\n\n    return LetTrade(\n        strategy=strategy,\n        datas=feeds,\n        feeder=feeder,\n        exchange=exchange,\n        commander=commander,\n        plot=plot,\n        cash=cash,\n        account=account,\n        **kwargs,\n    )\n</code></pre>"},{"location":"reference/exchange/backtest/commander/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> commander","text":""},{"location":"reference/exchange/backtest/commander/#lettrade.exchange.backtest.commander","title":"commander","text":""},{"location":"reference/exchange/backtest/commander/#lettrade.exchange.backtest.commander.BackTestCommander","title":"BackTestCommander","text":"<pre><code>BackTestCommander()\n</code></pre> <p>               Bases: <code>Commander</code></p> <p>BackTest Commander to debug commander notify</p> Source code in <code>lettrade/commander/commander.py</code> <pre><code>def __init__(self) -&gt; None:\n    super().__init__()\n</code></pre>"},{"location":"reference/exchange/backtest/commander/#lettrade.exchange.backtest.commander.BackTestCommander.init","title":"init","text":"<pre><code>init(\n    lettrade: LetTrade,\n    brain: Brain,\n    exchange: Exchange,\n    strategy: Strategy,\n)\n</code></pre> <p>Init commander dependencies</p> <p>Parameters:</p> <ul> <li> <code>lettrade</code>               (<code>LetTrade</code>)           \u2013            <p>LetTrade object</p> </li> <li> <code>brain</code>               (<code>Brain</code>)           \u2013            <p>Brain of bot</p> </li> <li> <code>exchange</code>               (<code>Exchange</code>)           \u2013            <p>Manage bot trading</p> </li> <li> <code>strategy</code>               (<code>Strategy</code>)           \u2013            <p>Strategy of bot</p> </li> </ul> Source code in <code>lettrade/commander/commander.py</code> <pre><code>def init(\n    self,\n    lettrade: \"LetTrade\",\n    brain: \"Brain\",\n    exchange: \"Exchange\",\n    strategy: \"Strategy\",\n):\n    \"\"\"Init commander dependencies\n\n    Args:\n        lettrade (LetTrade): LetTrade object\n        brain (Brain): Brain of bot\n        exchange (Exchange): Manage bot trading\n        strategy (Strategy): Strategy of bot\n    \"\"\"\n    self.lettrade = lettrade\n    self.brain = brain\n    self.exchange = exchange\n    self.strategy = strategy\n</code></pre>"},{"location":"reference/exchange/backtest/exchange/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> exchange","text":""},{"location":"reference/exchange/backtest/exchange/#lettrade.exchange.backtest.exchange","title":"exchange","text":""},{"location":"reference/exchange/backtest/feeder/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> feeder","text":""},{"location":"reference/exchange/backtest/feeder/#lettrade.exchange.backtest.feeder","title":"feeder","text":""},{"location":"reference/exchange/backtest/feeder/#lettrade.exchange.backtest.feeder.BackTestDataFeeder","title":"BackTestDataFeeder","text":"<p>               Bases: <code>DataFeeder</code></p>"},{"location":"reference/exchange/backtest/feeder/#lettrade.exchange.backtest.feeder.BackTestDataFeeder.is_continous","title":"is_continous  <code>property</code>","text":"<pre><code>is_continous\n</code></pre> <p>Flag check is realtime continous datafeeder</p>"},{"location":"reference/exchange/backtest/trade/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> trade","text":""},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade","title":"trade","text":""},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestExecute","title":"BackTestExecute","text":"<pre><code>BackTestExecute(\n    id: str,\n    exchange: Exchange,\n    data: DataFeed,\n    size: float,\n    price: float,\n    at: float,\n    order_id: str = None,\n    order: Order = None,\n    trade_id: str = None,\n    trade: Trade = None,\n)\n</code></pre> <p>               Bases: <code>Execute</code></p> <p>Execute for backtesting</p> Source code in <code>lettrade/exchange/execute.py</code> <pre><code>def __init__(\n    self,\n    id: str,\n    exchange: \"Exchange\",\n    data: \"DataFeed\",\n    size: float,\n    price: float,\n    at: float,\n    order_id: str = None,\n    order: \"Order\" = None,\n    trade_id: str = None,\n    trade: \"Trade\" = None,\n):\n    super().__init__(\n        id=id,\n        exchange=exchange,\n        data=data,\n        size=size,\n    )\n    self.order_id = order_id\n    self.order: \"Order\" = order\n    self.trade_id = trade_id\n    self.trade: \"Trade\" = trade\n    self.price = price\n    self.at = at\n</code></pre>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestOrder","title":"BackTestOrder","text":"<pre><code>BackTestOrder(\n    id: str,\n    exchange: Exchange,\n    data: DataFeed,\n    size: float,\n    state: OrderState = OrderState.Pending,\n    type: OrderType = OrderType.Market,\n    limit_price: Optional[float] = None,\n    stop_price: Optional[float] = None,\n    sl_price: Optional[float] = None,\n    tp_price: Optional[float] = None,\n    trade: Optional[Trade] = None,\n    tag: object = None,\n    open_at: int = None,\n    open_price: int = None,\n)\n</code></pre> <p>               Bases: <code>Order</code></p> <p>Order for backtesting</p> Source code in <code>lettrade/exchange/order.py</code> <pre><code>def __init__(\n    self,\n    id: str,\n    exchange: \"Exchange\",\n    data: \"DataFeed\",\n    size: float,\n    state: OrderState = OrderState.Pending,\n    type: OrderType = OrderType.Market,\n    limit_price: Optional[float] = None,\n    stop_price: Optional[float] = None,\n    sl_price: Optional[float] = None,\n    tp_price: Optional[float] = None,\n    trade: Optional[\"Trade\"] = None,\n    tag: object = None,\n    open_at: int = None,\n    open_price: int = None,\n):\n    super().__init__(\n        id=id,\n        exchange=exchange,\n        data=data,\n        size=size,\n    )\n\n    self.type: OrderType = type\n    self.state: OrderState = state\n    self.limit_price: Optional[float] = limit_price\n    self.stop_price: Optional[float] = stop_price\n    self.sl_price: Optional[float] = sl_price\n    self.tp_price: Optional[float] = tp_price\n    self.trade: Optional[\"Trade\"] = trade\n    self.tag: object = tag\n\n    self.open_at: int = open_at\n    self.open_price: int = open_price\n    self.entry_at: int = None\n    self.entry_price: int = None\n</code></pre>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestOrder.is_long","title":"is_long  <code>property</code>","text":"<pre><code>is_long\n</code></pre> <p>True if the order is long (order size is positive).</p>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestOrder.is_short","title":"is_short  <code>property</code>","text":"<pre><code>is_short\n</code></pre> <p>True if the order is short (order size is negative).</p>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestOrder.build_execute","title":"build_execute","text":"<pre><code>build_execute(\n    price: float, at: object, size: Optional[float] = None\n) -&gt; BackTestExecute\n</code></pre> <p>Method help to build Execute object from Order object</p> <p>Parameters:</p> <ul> <li> <code>price</code>               (<code>float</code>)           \u2013            <p>Executed price</p> </li> <li> <code>at</code>               (<code>object</code>)           \u2013            <p>Executed bar</p> </li> <li> <code>size</code>               (<code>Optional[float]</code>, default:                   <code>None</code> )           \u2013            <p>Executed size. Defaults to None.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>BackTestExecute</code> (              <code>BackTestExecute</code> )          \u2013            <p>Execute object</p> </li> </ul> Source code in <code>lettrade/exchange/backtest/trade.py</code> <pre><code>def build_execute(\n    self,\n    price: float,\n    at: object,\n    size: Optional[float] = None,\n) -&gt; BackTestExecute:\n    \"\"\"Method help to build Execute object from Order object\n\n    Args:\n        price (float): Executed price\n        at (object): Executed bar\n        size (Optional[float], optional): Executed size. Defaults to None.\n\n    Returns:\n        BackTestExecute: Execute object\n    \"\"\"\n    return BackTestExecute(\n        id=self.id,\n        size=size or self.size,\n        exchange=self.exchange,\n        data=self.data,\n        price=price,\n        at=at,\n        order=self,\n    )\n</code></pre>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestOrder.build_trade","title":"build_trade","text":"<pre><code>build_trade(\n    size: float = None, state: TradeState = TradeState.Open\n) -&gt; BackTestTrade\n</code></pre> <p>Build Trade object from Order object</p> <p>Parameters:</p> <ul> <li> <code>size</code>               (<code>float</code>, default:                   <code>None</code> )           \u2013            <p>Size of Trade object. Defaults to None.</p> </li> <li> <code>state</code>               (<code>TradeState</code>, default:                   <code>Open</code> )           \u2013            <p>State of Trade object. Defaults to TradeState.Open.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>BackTestTrade</code> (              <code>BackTestTrade</code> )          \u2013            <p>Trade object</p> </li> </ul> Source code in <code>lettrade/exchange/backtest/trade.py</code> <pre><code>def build_trade(\n    self,\n    size: float = None,\n    state: TradeState = TradeState.Open,\n) -&gt; \"BackTestTrade\":\n    \"\"\"Build Trade object from Order object\n\n    Args:\n        size (float, optional): Size of Trade object. Defaults to None.\n        state (TradeState, optional): State of Trade object. Defaults to TradeState.Open.\n\n    Returns:\n        BackTestTrade: Trade object\n    \"\"\"\n    trade = BackTestTrade(\n        id=self.id,\n        size=size or self.size,\n        exchange=self.exchange,\n        data=self.data,\n        state=state,\n        parent=self,\n    )\n    self.trade = trade\n    return trade\n</code></pre>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestOrder.cancel","title":"cancel","text":"<pre><code>cancel()\n</code></pre> <p>Cancel the Order and notify Exchange</p> Source code in <code>lettrade/exchange/backtest/trade.py</code> <pre><code>def cancel(self):\n    \"\"\"Cancel the Order and notify Exchange\"\"\"\n    if self.state is not OrderState.Placed:\n        return\n\n    self.state = OrderState.Canceled\n    if self.trade:\n        if self is self.trade.sl_order:\n            self.trade.sl_order = None\n        elif self is self.trade.tp_order:\n            self.trade.tp_order = None\n\n    self.exchange.on_order(self)\n</code></pre>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestOrder.execute","title":"execute","text":"<pre><code>execute(price: float, at: object) -&gt; BackTestExecute\n</code></pre> <p>Execute order and notify for Exchange</p> <p>Parameters:</p> <ul> <li> <code>price</code>               (<code>float</code>)           \u2013            <p>Executed price</p> </li> <li> <code>at</code>               (<code>object</code>)           \u2013            <p>Executed bar</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>BackTestExecute</code> (              <code>BackTestExecute</code> )          \u2013            <p>Execute object</p> </li> </ul> Source code in <code>lettrade/exchange/backtest/trade.py</code> <pre><code>def execute(self, price: float, at: object) -&gt; BackTestExecute:\n    \"\"\"Execute order and notify for Exchange\n\n    Args:\n        price (float): Executed price\n        at (object): Executed bar\n\n    Raises:\n        RuntimeError: _description_\n\n    Returns:\n        BackTestExecute: Execute object\n    \"\"\"\n    if self.state != OrderState.Placed:\n        raise RuntimeError(f\"Execute a {self.state} order\")\n\n    # Order\n    super().execute(price=price, at=at)\n\n    # Execute\n    execute: BackTestExecute = self.build_execute(price=price, at=at)\n    execute.execute()\n\n    # Trade hit SL/TP\n    if self.trade:\n        self.trade.exit(price=price, at=at, caller=self)\n    else:\n        # Trade: Place and create new trade\n        trade = self.build_trade()\n        if self.sl_price:\n            trade._new_sl_order()\n        if self.tp_price:\n            trade._new_tp_order()\n        trade.entry(price=price, at=at)\n\n    return execute\n</code></pre>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestTrade","title":"BackTestTrade","text":"<pre><code>BackTestTrade(\n    id: str,\n    exchange: Exchange,\n    data: DataFeed,\n    size: float,\n    parent: Order,\n    tag: object = \"\",\n    state: TradeState = TradeState.Open,\n    entry_price: Optional[float] = None,\n    entry_at: Optional[int] = None,\n    sl_order: Optional[Order] = None,\n    tp_order: Optional[Order] = None,\n)\n</code></pre> <p>               Bases: <code>Trade</code></p> <p>Trade for backtesting</p> Source code in <code>lettrade/exchange/trade.py</code> <pre><code>def __init__(\n    self,\n    id: str,\n    exchange: \"Exchange\",\n    data: \"DataFeed\",\n    size: float,\n    parent: \"Order\",\n    tag: object = \"\",\n    state: TradeState = TradeState.Open,\n    entry_price: Optional[float] = None,\n    entry_at: Optional[int] = None,\n    sl_order: Optional[Order] = None,\n    tp_order: Optional[Order] = None,\n):\n    super().__init__(\n        id=id,\n        exchange=exchange,\n        data=data,\n        size=size,\n    )\n    self._account = self.exchange._account\n\n    self.state = state\n    self.tag: object = tag\n    self.parent: \"Order\" = parent\n\n    self.entry_price: Optional[float] = entry_price\n    self.entry_at: Optional[int] = entry_at\n    self.exit_price: Optional[float] = None\n    self.exit_at: Optional[int] = None\n    self.exit_pl: Optional[float] = None\n    self.exit_fee: Optional[float] = None\n    self.sl_order: Optional[Order] = sl_order\n    self.tp_order: Optional[Order] = tp_order\n</code></pre>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestTrade.fee","title":"fee  <code>property</code>","text":"<pre><code>fee: float\n</code></pre> <p>Fee/Estimate Fee for trade</p> <p>Returns:</p> <ul> <li> <code>float</code> (              <code>float</code> )          \u2013            <p>Fee</p> </li> </ul>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestTrade.is_exited","title":"is_exited  <code>property</code>","text":"<pre><code>is_exited: bool\n</code></pre> <p>Flag to check Trade state.</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True if the trade exited</p> </li> </ul>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestTrade.is_long","title":"is_long  <code>property</code>","text":"<pre><code>is_long: bool\n</code></pre> <p>Flag to check Trade is long side.</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True if the trade is long (trade size is positive).</p> </li> </ul>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestTrade.is_short","title":"is_short  <code>property</code>","text":"<pre><code>is_short: bool\n</code></pre> <p>Flag to check Trade is short side.</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True if the trade is short (trade size is negative).</p> </li> </ul>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestTrade.pl","title":"pl  <code>property</code>","text":"<pre><code>pl: float\n</code></pre> <p>Estimate Profit or Loss of Trade</p> <p>Returns:</p> <ul> <li> <code>float</code> (              <code>float</code> )          \u2013            <p>PnL</p> </li> </ul>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestTrade.exit","title":"exit","text":"<pre><code>exit(price: float, at: object, caller=None)\n</code></pre> <p>Exit trade</p> <p>Parameters:</p> <ul> <li> <code>price</code>               (<code>float</code>)           \u2013            <p>Exit price</p> </li> <li> <code>at</code>               (<code>object</code>)           \u2013            <p>Exit bar</p> </li> <li> <code>caller</code>               (<code>_type_</code>, default:                   <code>None</code> )           \u2013            <p>Skip caller to prevent infinite recursion loop. Defaults to None.</p> </li> </ul> Source code in <code>lettrade/exchange/backtest/trade.py</code> <pre><code>def exit(self, price: float, at: object, caller=None):\n    \"\"\"Exit trade\n\n    Args:\n        price (float): Exit price\n        at (object): Exit bar\n        caller (_type_, optional): Skip caller to prevent infinite recursion loop. Defaults to None.\n    \"\"\"\n    if self.state != TradeState.Open:\n        return\n\n    # State\n    super().exit(price=price, at=at, pl=self.pl, fee=0)\n\n    # Caller is trade close by tp/sl order\n    if caller is None or (self.sl_order and self.sl_order is not caller):\n        self.sl_order.cancel()\n    if caller is None or (self.tp_order and self.tp_order is not caller):\n        self.tp_order.cancel()\n</code></pre>"},{"location":"reference/exchange/backtest/data/","title":"Index","text":""},{"location":"reference/exchange/backtest/data/#lettrade.exchange.backtest.data","title":"data","text":""},{"location":"reference/exchange/backtest/data/data/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> data","text":""},{"location":"reference/exchange/backtest/data/data/#lettrade.exchange.backtest.data.data","title":"data","text":""},{"location":"reference/exchange/backtest/data/yfinance/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> yfinance","text":""},{"location":"reference/exchange/backtest/data/yfinance/#lettrade.exchange.backtest.data.yfinance","title":"yfinance","text":""},{"location":"reference/exchange/ccxt/","title":"Index","text":""},{"location":"reference/exchange/ccxt/#lettrade.exchange.ccxt","title":"ccxt","text":""},{"location":"reference/exchange/ccxt/ccxt/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> ccxt","text":""},{"location":"reference/exchange/ccxt/ccxt/#lettrade.exchange.ccxt.ccxt","title":"ccxt","text":"<p>Wip</p> <p>CCXT Exchange implement</p>"},{"location":"reference/exchange/metatrader/","title":"Index","text":""},{"location":"reference/exchange/metatrader/#lettrade.exchange.metatrader","title":"metatrader","text":""},{"location":"reference/exchange/metatrader/account/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> account","text":""},{"location":"reference/exchange/metatrader/account/#lettrade.exchange.metatrader.account","title":"account","text":""},{"location":"reference/exchange/metatrader/api/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> api","text":""},{"location":"reference/exchange/metatrader/api/#lettrade.exchange.metatrader.api","title":"api","text":""},{"location":"reference/exchange/metatrader/data/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> data","text":""},{"location":"reference/exchange/metatrader/data/#lettrade.exchange.metatrader.data","title":"data","text":""},{"location":"reference/exchange/metatrader/exchange/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> exchange","text":""},{"location":"reference/exchange/metatrader/exchange/#lettrade.exchange.metatrader.exchange","title":"exchange","text":""},{"location":"reference/exchange/metatrader/feeder/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> feeder","text":""},{"location":"reference/exchange/metatrader/feeder/#lettrade.exchange.metatrader.feeder","title":"feeder","text":""},{"location":"reference/exchange/metatrader/feeder/#lettrade.exchange.metatrader.feeder.MetaTraderDataFeeder","title":"MetaTraderDataFeeder","text":"<pre><code>MetaTraderDataFeeder(api: MetaTraderAPI, tick: bool = 5)\n</code></pre> <p>               Bases: <code>DataFeeder</code></p> <pre><code>tick == 0: wait until new bar change value\ntick &gt; 0: sleep tick time (in seconds) then update\n</code></pre> Source code in <code>lettrade/exchange/metatrader/feeder.py</code> <pre><code>def __init__(self, api: MetaTraderAPI, tick: bool = 5) -&gt; None:\n    \"\"\"\n    tick:\n        tick &lt; 0: no tick, just get completed bar\n        tick == 0: wait until new bar change value\n        tick &gt; 0: sleep tick time (in seconds) then update\n    \"\"\"\n    super().__init__()\n    self._api = api\n    self._tick = tick\n</code></pre>"},{"location":"reference/exchange/metatrader/feeder/#lettrade.exchange.metatrader.feeder.MetaTraderDataFeeder.is_continous","title":"is_continous  <code>property</code>","text":"<pre><code>is_continous\n</code></pre> <p>Flag check is realtime continous datafeeder</p>"},{"location":"reference/exchange/metatrader/metatrader/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> metatrader","text":""},{"location":"reference/exchange/metatrader/metatrader/#lettrade.exchange.metatrader.metatrader","title":"metatrader","text":""},{"location":"reference/exchange/metatrader/trade/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> trade","text":""},{"location":"reference/exchange/metatrader/trade/#lettrade.exchange.metatrader.trade","title":"trade","text":""},{"location":"reference/exchange/metatrader/trade/#lettrade.exchange.metatrader.trade.MetaTraderExecute","title":"MetaTraderExecute","text":"<pre><code>MetaTraderExecute(\n    id: str,\n    exchange: MetaTraderExchange,\n    data: DataFeed,\n    size: float,\n    price: float,\n    at: float,\n    order_id: Optional[str] = None,\n    order: Optional[Order] = None,\n    trade_id: Optional[str] = None,\n    trade: Optional[Trade] = None,\n    tag: Optional[str] = \"\",\n    raw: Optional[object] = None,\n)\n</code></pre> <p>               Bases: <code>Execute</code></p> <p>Execute for MetaTrader</p> Source code in <code>lettrade/exchange/metatrader/trade.py</code> <pre><code>def __init__(\n    self,\n    id: str,\n    exchange: \"MetaTraderExchange\",\n    data: \"DataFeed\",\n    size: float,\n    price: float,\n    at: float,\n    order_id: Optional[str] = None,\n    order: Optional[\"Order\"] = None,\n    trade_id: Optional[str] = None,\n    trade: Optional[\"Trade\"] = None,\n    tag: Optional[str] = \"\",\n    raw: Optional[object] = None,\n):\n    super().__init__(\n        id=id,\n        exchange=exchange,\n        data=data,\n        size=size,\n        price=price,\n        at=at,\n        order_id=order_id,\n        order=order,\n        trade_id=trade_id,\n        trade=trade,\n    )\n    self.tag: str = tag\n    self.raw: object = raw\n    self._api: MetaTraderAPI = exchange._api\n</code></pre>"},{"location":"reference/exchange/metatrader/trade/#lettrade.exchange.metatrader.trade.MetaTraderExecute.from_raw","title":"from_raw  <code>classmethod</code>","text":"<pre><code>from_raw(\n    raw, exchange: MetaTraderExchange\n) -&gt; MetaTraderExecute\n</code></pre> <p>Building new MetaTraderExecute from metatrader api deal object</p> <pre><code>Raw deal: TradeDeal(ticket=33889131, order=41290404, time=1715837856, time_msc=1715837856798, type=0, entry=0, magic=0, position_id=41290404, reason=0, volume=0.01, price=0.85795, commission=0.0, swap=0.0, profit=0.0, fee=0.0, symbol='EURGBP', comment='', external_id='')\n</code></pre> Source code in <code>lettrade/exchange/metatrader/trade.py</code> <pre><code>@classmethod\ndef from_raw(cls, raw, exchange: \"MetaTraderExchange\") -&gt; \"MetaTraderExecute\":\n    \"\"\"\n    Building new MetaTraderExecute from metatrader api deal object\n\n        Raw deal: TradeDeal(ticket=33889131, order=41290404, time=1715837856, time_msc=1715837856798, type=0, entry=0, magic=0, position_id=41290404, reason=0, volume=0.01, price=0.85795, commission=0.0, swap=0.0, profit=0.0, fee=0.0, symbol='EURGBP', comment='', external_id='')\n    \"\"\"\n    return MetaTraderExecute(\n        exchange=exchange,\n        id=raw.ticket,\n        # TODO: Fix by get data from symbol\n        data=exchange.data,\n        # TODO: size and type from raw.type\n        size=raw.volume,\n        price=raw.price,\n        # TODO: set bar time\n        at=None,\n        order_id=raw.order,\n        trade_id=raw.position_id,\n        tag=raw.comment,\n        raw=raw,\n    )\n</code></pre>"},{"location":"reference/exchange/metatrader/trade/#lettrade.exchange.metatrader.trade.MetaTraderExecute.merge","title":"merge","text":"<pre><code>merge(other: Execute)\n</code></pre> <p>Merge to keep object handler but not overwrite for Strategy using when Strategy want to store object and object will be automatic update directly</p> Source code in <code>lettrade/exchange/execute.py</code> <pre><code>def merge(self, other: \"Execute\"):\n    \"\"\"\n    Merge to keep object handler but not overwrite for Strategy using when Strategy want to store object and object will be automatic update directly\n    \"\"\"\n    if other is self:\n        return\n\n    if self.id != other.id:\n        raise RuntimeError(f\"Merge difference id {self.id} != {other.id} execute\")\n\n    self.price = other.price\n    self.size = other.size\n\n    if other.at:\n        self.at = other.at\n    if other.order_id:\n        self.order_id = other.order_id\n    if other.order:\n        self.order = other.order\n    if other.trade_id:\n        self.trade_id = other.trade_id\n    if other.trade:\n        self.trade = other.trade\n</code></pre>"},{"location":"reference/indicator/","title":"Index","text":""},{"location":"reference/indicator/#lettrade.indicator","title":"indicator","text":""},{"location":"reference/indicator/function/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> function","text":""},{"location":"reference/indicator/function/#lettrade.indicator.function","title":"function","text":""},{"location":"reference/indicator/function/#lettrade.indicator.function.above","title":"above","text":"<pre><code>above(series1: Series, series2: Series) -&gt; Series\n</code></pre> <p>Check a Series is above another Series</p> <p>Parameters:</p> <ul> <li> <code>series1</code>               (<code>Series</code>)           \u2013            <p>first Series</p> </li> <li> <code>series2</code>               (<code>Series</code>)           \u2013            <p>second Series</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Series</code>           \u2013            <p>pd.Series: True series1 is above series2 else False</p> </li> </ul> Source code in <code>lettrade/indicator/function.py</code> <pre><code>def above(series1: pd.Series, series2: pd.Series) -&gt; pd.Series:\n    \"\"\"Check a Series is above another Series\n\n    Args:\n        series1 (pd.Series): first Series\n        series2 (pd.Series): second Series\n\n    Returns:\n        pd.Series: True series1 is above series2 else False\n    \"\"\"\n    diffed = diff(series1, series2)\n    return diffed.apply(lambda v: True if v &gt; 0 else False).astype(bool)\n</code></pre>"},{"location":"reference/indicator/function/#lettrade.indicator.function.below","title":"below","text":"<pre><code>below(series1: Series, series2: Series) -&gt; Series\n</code></pre> <p>Check a Series is below another Series</p> <p>Parameters:</p> <ul> <li> <code>series1</code>               (<code>Series</code>)           \u2013            <p>first Series</p> </li> <li> <code>series2</code>               (<code>Series</code>)           \u2013            <p>second Series</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Series</code>           \u2013            <p>pd.Series: True series1 is below series2 else False</p> </li> </ul> Source code in <code>lettrade/indicator/function.py</code> <pre><code>def below(series1: pd.Series, series2: pd.Series) -&gt; pd.Series:\n    \"\"\"Check a Series is below another Series\n\n    Args:\n        series1 (pd.Series): first Series\n        series2 (pd.Series): second Series\n\n    Returns:\n        pd.Series: True series1 is below series2 else False\n    \"\"\"\n    diffed = diff(series1, series2)\n    return diffed.apply(lambda v: True if v &lt; 0 else False).astype(bool)\n</code></pre>"},{"location":"reference/indicator/function/#lettrade.indicator.function.crossover","title":"crossover","text":"<pre><code>crossover(series1: Series, series2: Series) -&gt; Series\n</code></pre> <p>Check if a Series cross over another Series</p> <p>Parameters:</p> <ul> <li> <code>series1</code>               (<code>Series</code>)           \u2013            <p>first Series</p> </li> <li> <code>series2</code>               (<code>Series</code>)           \u2013            <p>second Series</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Series</code>           \u2013            <p>pd.Series: True if series1 cross over series2 else False</p> </li> </ul> Source code in <code>lettrade/indicator/function.py</code> <pre><code>def crossover(series1: pd.Series, series2: pd.Series) -&gt; pd.Series:\n    \"\"\"Check if a Series cross over another Series\n\n    Args:\n        series1 (pd.Series): first Series\n        series2 (pd.Series): second Series\n\n    Returns:\n        pd.Series: True if series1 cross over series2 else False\n    \"\"\"\n    below1 = below(series1, series2).shift(1)\n    above0 = above(series1, series2)\n    return below1 &amp; above0\n</code></pre>"},{"location":"reference/indicator/function/#lettrade.indicator.function.crossunder","title":"crossunder","text":"<pre><code>crossunder(series1: Series, series2: Series) -&gt; Series\n</code></pre> <p>Check if a Series cross under another Series</p> <p>Parameters:</p> <ul> <li> <code>series1</code>               (<code>Series</code>)           \u2013            <p>first Series</p> </li> <li> <code>series2</code>               (<code>Series</code>)           \u2013            <p>second Series</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Series</code>           \u2013            <p>pd.Series: True if series1 cross under series2 else False</p> </li> </ul> Source code in <code>lettrade/indicator/function.py</code> <pre><code>def crossunder(series1: pd.Series, series2: pd.Series) -&gt; pd.Series:\n    \"\"\"Check if a Series cross under another Series\n\n    Args:\n        series1 (pd.Series): first Series\n        series2 (pd.Series): second Series\n\n    Returns:\n        pd.Series: True if series1 cross under series2 else False\n    \"\"\"\n    above1 = above(series1, series2).shift(1)\n    below0 = below(series1, series2)\n    return below0 &amp; above1\n</code></pre>"},{"location":"reference/indicator/function/#lettrade.indicator.function.diff","title":"diff","text":"<pre><code>diff(series1: Series, series2: Series) -&gt; Series\n</code></pre> <p>Difference between 2 series</p> <p>Parameters:</p> <ul> <li> <code>series1</code>               (<code>Series</code>)           \u2013            <p>description</p> </li> <li> <code>series2</code>               (<code>Series</code>)           \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Series</code>           \u2013            <p>pd.Series: Diff of 2 series</p> </li> </ul> Source code in <code>lettrade/indicator/function.py</code> <pre><code>def diff(series1: pd.Series, series2: pd.Series) -&gt; pd.Series:\n    \"\"\"Difference between 2 series\n\n    Args:\n        series1 (pd.Series): _description_\n        series2 (pd.Series): _description_\n\n    Returns:\n        pd.Series: Diff of 2 series\n    \"\"\"\n    return series1 - series2\n</code></pre>"},{"location":"reference/indicator/indicator/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> indicator","text":""},{"location":"reference/indicator/indicator/#lettrade.indicator.indicator","title":"indicator","text":""},{"location":"reference/plot/","title":"Index","text":""},{"location":"reference/plot/#lettrade.plot","title":"plot","text":""},{"location":"reference/plot/plot/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> plot","text":""},{"location":"reference/plot/plot/#lettrade.plot.plot","title":"plot","text":""},{"location":"reference/plot/plot/#lettrade.plot.plot.Plotter","title":"Plotter","text":"<pre><code>Plotter(\n    feeder: DataFeeder,\n    exchange: Exchange,\n    account: Account,\n    strategy: Strategy,\n)\n</code></pre> <p>Class help to plot <code>lettrade</code></p> Source code in <code>lettrade/plot/plot.py</code> <pre><code>def __init__(\n    self,\n    feeder: DataFeeder,\n    exchange: Exchange,\n    account: Account,\n    strategy: Strategy,\n) -&gt; None:\n    self.feeder: DataFeeder = feeder\n    self.exchange: Exchange = exchange\n    self.account: Account = account\n    self.strategy: Strategy = strategy\n\n    self.datas: list[DataFeed] = self.feeder.datas\n    self.data: DataFeed = self.feeder.data\n</code></pre>"},{"location":"reference/plot/plot/#lettrade.plot.plot.Plotter.load","title":"load","text":"<pre><code>load()\n</code></pre> <p>Load plot config from <code>Strategy.plot()</code> and setup candlestick/equity</p> Source code in <code>lettrade/plot/plot.py</code> <pre><code>def load(self):\n    \"\"\"Load plot config from `Strategy.plot()` and setup candlestick/equity\"\"\"\n    df = self.data\n\n    # Strategy plot\n    config: dict = self.strategy.plot(df)\n\n    # Params\n    params = dict(\n        rows=max(config.get(\"rows\", 2), 2),\n        shared_xaxes=True,\n        vertical_spacing=0.03,\n        row_width=[0.2, 0.7],\n    )\n    if \"params\" in config:\n        params.update(**config[\"params\"])\n\n    # Init\n    self.figure = make_subplots(**params)\n\n    # Plot candles\n    self.figure.add_trace(\n        go.Candlestick(\n            x=df.index,\n            open=df[\"open\"],\n            high=df[\"high\"],\n            low=df[\"low\"],\n            close=df[\"close\"],\n            name=\"Price\",\n            hoverinfo=\"x+y\",\n        ),\n        row=1,\n        col=1,\n    )\n\n    if \"scatters\" in config:\n        for s in config[\"scatters\"]:\n            # s.setdefault(\"row\", 1)\n            if \"row\" not in s:\n                s[\"row\"] = 1\n            if \"col\" not in s:\n                s[\"col\"] = 1\n            self.figure.add_scatter(**s)\n\n    # Layout\n    layout_params = dict(\n        title=dict(\n            text=str(self.strategy),\n            font=dict(size=24),\n            x=0.5,\n            xref=\"paper\",\n        ),\n        # hovermode=\"x unified\",\n    )\n    if \"layout\" in config:\n        layout_params.update(config[\"layout\"])\n    self.figure.update_layout(**layout_params)\n</code></pre>"},{"location":"reference/plot/plot/#lettrade.plot.plot.Plotter.plot","title":"plot","text":"<pre><code>plot(**kwargs)\n</code></pre> <p>Plot <code>equity</code>, <code>orders</code>, and <code>trades</code> then show</p> Source code in <code>lettrade/plot/plot.py</code> <pre><code>def plot(self, **kwargs):\n    \"\"\"Plot `equity`, `orders`, and `trades` then show\"\"\"\n    if self.figure is None:\n        self.load()\n\n    self._plot_equity()\n    self._plot_orders()\n    self._plot_trades()\n\n    params = dict(layout_xaxis_rangeslider_visible=False)\n    params.update(**kwargs)\n    self.figure.update(**params)\n\n    if __debug__:\n        if self._docs_plot(**kwargs):\n            return\n\n    self.figure.show()\n</code></pre>"},{"location":"reference/plot/plot/#lettrade.plot.plot.Plotter.stop","title":"stop","text":"<pre><code>stop()\n</code></pre> <p>stop plotter</p> Source code in <code>lettrade/plot/plot.py</code> <pre><code>def stop(self):\n    \"\"\"stop plotter\"\"\"\n</code></pre>"},{"location":"reference/stats/","title":"Index","text":""},{"location":"reference/stats/#lettrade.stats","title":"stats","text":""},{"location":"reference/stats/stats/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> stats","text":""},{"location":"reference/stats/stats/#lettrade.stats.stats","title":"stats","text":""},{"location":"reference/stats/stats/#lettrade.stats.stats.Statistic","title":"Statistic","text":"<pre><code>Statistic(\n    feeder: DataFeeder,\n    exchange: Exchange,\n    strategy: Strategy,\n)\n</code></pre> <p>Compute strategy result</p> Source code in <code>lettrade/stats/stats.py</code> <pre><code>def __init__(\n    self,\n    feeder: DataFeeder,\n    exchange: Exchange,\n    strategy: Strategy,\n) -&gt; None:\n    self.feeder: DataFeeder = feeder\n    self.exchange: Exchange = exchange\n    self.strategy: Strategy = strategy\n    self.account: Account = strategy.account\n\n    self.result = pd.Series(dtype=object)\n</code></pre>"},{"location":"reference/stats/stats/#lettrade.stats.stats.Statistic.compute","title":"compute","text":"<pre><code>compute()\n</code></pre> <p>Calculate strategy report</p> Source code in <code>lettrade/stats/stats.py</code> <pre><code>def compute(self):\n    \"\"\"\n    Calculate strategy report\n    \"\"\"\n    data: pd.DataFrame = self.feeder.data\n\n    self.result.loc[\"# Strategy\"] = self.strategy.__class__\n    self.result.loc[\"Start\"] = data.datetime.iloc[0]\n    self.result.loc[\"End\"] = data.datetime.iloc[-1]\n    self.result.loc[\"Duration\"] = self.result.End - self.result.Start\n\n    # Equity\n    equities = list(self.account._equities.values())\n    self.result.loc[\"Start Balance [$]\"] = round(equities[0], 2)\n    self.result.loc[\"Equity [$]\"] = round(equities[-1], 2)\n\n    pl = equities[-1] - equities[0]\n    self.result.loc[\"PL [$]\"] = round(pl, 2)\n    self.result.loc[\"PL [%]\"] = round(pl / equities[0] * 100, 2)\n\n    # TODO\n    self.result.loc[\"Buy &amp; Hold PL [%]\"] = 2.0\n    self.result.loc[\"Max. Drawdown [%]\"] = -33.08\n    self.result.loc[\"Avg. Drawdown [%]\"] = -5.58\n    self.result.loc[\"Max. Drawdown Duration\"] = \"688 days 00:00:00\"\n    self.result.loc[\"Avg. Drawdown Duration\"] = \"41 days 00:00:00\"\n\n    # Separator\n    self.result.loc[\"\"] = \"\"\n\n    # Trades\n    trades = list(self.exchange.history_trades.values()) + list(\n        self.exchange.trades.values()\n    )\n    self.result.loc[\"# Trades\"] = len(trades)\n    self.result.loc[\"Best Trade [%]\"] = max(t.pl for t in trades)\n    self.result.loc[\"Worst Trade [%]\"] = min(t.pl for t in trades)\n\n    # TODO\n    self.result.loc[\"Profit Factor\"] = 2.13\n    self.result.loc[\"SQN\"] = 1.78\n\n    return self.result\n</code></pre>"},{"location":"reference/stats/stats/#lettrade.stats.stats.Statistic.show","title":"show","text":"<pre><code>show()\n</code></pre> <p>Show statistic report</p> Source code in <code>lettrade/stats/stats.py</code> <pre><code>def show(self):\n    \"\"\"\n    Show statistic report\n    \"\"\"\n    if \"Start\" not in self.result:\n        logger.warning(\"call compute() before show()\")\n        self.compute()\n\n    # Show result inside docs session\n    if __debug__:\n        show = self._docs_show()\n        if show:\n            print(show)\n            return show\n\n    logger.info(\n        \"\\n============= Statistic result =============\\n%s\\n\",\n        self.result.to_string(),\n    )\n</code></pre>"},{"location":"reference/strategy/","title":"Index","text":""},{"location":"reference/strategy/#lettrade.strategy","title":"strategy","text":""},{"location":"reference/strategy/strategy/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> strategy","text":""},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy","title":"strategy","text":""},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy","title":"Strategy","text":"<pre><code>Strategy(\n    feeder: DataFeeder,\n    exchange: Exchange,\n    account: Account,\n    commander: Commander,\n    is_optimize: Optional[bool] = False,\n)\n</code></pre> <p>               Bases: <code>ABC</code></p> <p>Base class to implement a strategy</p> <p>Parameters:</p> <ul> <li> <code>feeder</code>               (<code>DataFeeder</code>)           \u2013            <p>DataFeeder for strategy</p> </li> <li> <code>exchange</code>               (<code>Exchange</code>)           \u2013            <p>Trading exchange</p> </li> <li> <code>account</code>               (<code>Account</code>)           \u2013            <p>Account manager</p> </li> <li> <code>commander</code>               (<code>Commander</code>)           \u2013            <p>Event/Command manager</p> </li> <li> <code>is_optimize</code>               (<code>Optional[bool]</code>, default:                   <code>False</code> )           \u2013            <p>flag validate optimize condiction. Defaults to False.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>Validate valid is_optimize flag</p> </li> </ul> Source code in <code>lettrade/strategy/strategy.py</code> <pre><code>def __init__(\n    self,\n    feeder: DataFeeder,\n    exchange: Exchange,\n    account: Account,\n    commander: Commander,\n    is_optimize: Optional[bool] = False,\n):\n    \"\"\"_summary_\n\n    Args:\n        feeder (DataFeeder): DataFeeder for strategy\n        exchange (Exchange): Trading exchange\n        account (Account): Account manager\n        commander (Commander): Event/Command manager\n        is_optimize (Optional[bool], optional): flag validate optimize condiction. Defaults to False.\n\n    Raises:\n        RuntimeError: Validate valid is_optimize flag\n    \"\"\"\n    self.__feeder: DataFeeder = feeder\n    self.__exchange: Exchange = exchange\n    self.__account: Account = account\n    self.__commander: Commander = commander\n\n    self.__datas: list[DataFeed] = self.__feeder.datas\n    self.__data: DataFeed = self.__feeder.data\n\n    if is_optimize and self.is_live:\n        raise RuntimeError(\"Optimize a live datafeeder\")\n    self.__is_optimize: bool = is_optimize\n</code></pre>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.account","title":"account  <code>property</code>","text":"<pre><code>account: Account\n</code></pre> <p>Getter of <code>Account</code></p> <p>Returns:</p> <ul> <li> <code>Account</code> (              <code>Account</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.commander","title":"commander  <code>property</code>","text":"<pre><code>commander: Commander\n</code></pre> <p>Getter of <code>Commander</code></p> <p>Returns:</p> <ul> <li> <code>Commander</code> (              <code>Commander</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.data","title":"data  <code>property</code>","text":"<pre><code>data: DataFeed\n</code></pre> <p>Getter of main DataFeed</p> <p>Returns:</p> <ul> <li> <code>DataFeed</code> (              <code>DataFeed</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.datas","title":"datas  <code>property</code>","text":"<pre><code>datas: list[DataFeed]\n</code></pre> <p>Getter of all DataFeed</p> <p>Returns:</p> <ul> <li> <code>list[DataFeed]</code>           \u2013            <p>list[DataFeed]: description</p> </li> </ul>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.exchange","title":"exchange  <code>property</code>","text":"<pre><code>exchange: Exchange\n</code></pre> <p>Getter of <code>Exchange</code></p> <p>Returns:</p> <ul> <li> <code>Exchange</code> (              <code>Exchange</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.feeder","title":"feeder  <code>property</code>","text":"<pre><code>feeder: DataFeeder\n</code></pre> <p>Getter of <code>DataFeeder</code></p> <p>Returns:</p> <ul> <li> <code>DataFeeder</code> (              <code>DataFeeder</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.history_orders","title":"history_orders  <code>property</code>","text":"<pre><code>history_orders: dict[str, Order]\n</code></pre> <p>Getter of history <code>Order</code> dict</p> <p>Returns:</p> <ul> <li> <code>dict[str, Order]</code>           \u2013            <p>dict[str, Order]: description</p> </li> </ul>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.history_trades","title":"history_trades  <code>property</code>","text":"<pre><code>history_trades: dict[str, Trade]\n</code></pre> <p>Getter of history <code>Trade</code> dict</p> <p>Returns:</p> <ul> <li> <code>dict[str, Trade]</code>           \u2013            <p>dict[str, Trade]: description</p> </li> </ul>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.is_backtest","title":"is_backtest  <code>property</code>","text":"<pre><code>is_backtest: bool\n</code></pre> <p>Flag to check strategy is running in backtest DataFeeder</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.is_live","title":"is_live  <code>property</code>","text":"<pre><code>is_live: bool\n</code></pre> <p>Flag to check strategy is running in live DataFeeder</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.is_optimize","title":"is_optimize  <code>property</code>","text":"<pre><code>is_optimize: bool\n</code></pre> <p>Flag to check strategy is running in optimize session</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.now","title":"now  <code>property</code>","text":"<pre><code>now: datetime\n</code></pre> <p>Getter of current datetime</p> <p>Returns:</p> <ul> <li> <code>datetime</code> (              <code>datetime</code> )          \u2013            <p>current datetime of bar</p> </li> </ul>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.orders","title":"orders  <code>property</code>","text":"<pre><code>orders: dict[str, Order]\n</code></pre> <p>Getter of <code>Order</code> dict</p> <p>Returns:</p> <ul> <li> <code>dict[str, Order]</code>           \u2013            <p>dict[str, Order]: description</p> </li> </ul>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.positions","title":"positions  <code>property</code>","text":"<pre><code>positions: dict[str, Position]\n</code></pre> <p>Getter of <code>Position</code> dict</p>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.trades","title":"trades  <code>property</code>","text":"<pre><code>trades: dict[str, Trade]\n</code></pre> <p>Getter of <code>Trade</code> dict</p> <p>Returns:</p> <ul> <li> <code>dict[str, Trade]</code>           \u2013            <p>dict[str, Trade]: description</p> </li> </ul>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.buy","title":"buy","text":"<pre><code>buy(\n    size: Optional[float] = None,\n    limit: Optional[float] = None,\n    stop: Optional[float] = None,\n    sl: Optional[float] = None,\n    tp: Optional[float] = None,\n    tag: Optional[object] = None,\n    **kwargs\n) -&gt; OrderResult\n</code></pre> <p>Place a new long order.</p> <p>Parameters:</p> <ul> <li> <code>size</code>               (<code>Optional[float]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>limit</code>               (<code>Optional[float]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>stop</code>               (<code>Optional[float]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>sl</code>               (<code>Optional[float]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>tp</code>               (<code>Optional[float]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>tag</code>               (<code>Optional[object]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>**kwargs</code>               (<code>Optional[dict]</code>, default:                   <code>{}</code> )           \u2013            <p>Extra-parameters send to <code>Exchange.new_order</code></p> </li> </ul> <p>Returns:</p> <ul> <li> <code>OrderResult</code> (              <code>OrderResult</code> )          \u2013            <p>order result information</p> </li> </ul> Source code in <code>lettrade/strategy/strategy.py</code> <pre><code>def buy(\n    self,\n    size: Optional[float] = None,\n    limit: Optional[float] = None,\n    stop: Optional[float] = None,\n    sl: Optional[float] = None,\n    tp: Optional[float] = None,\n    tag: Optional[object] = None,\n    **kwargs,\n) -&gt; OrderResult:\n    \"\"\"Place a new long order.\n\n    Args:\n        size (Optional[float], optional): _description_. Defaults to None.\n        limit (Optional[float], optional): _description_. Defaults to None.\n        stop (Optional[float], optional): _description_. Defaults to None.\n        sl (Optional[float], optional): _description_. Defaults to None.\n        tp (Optional[float], optional): _description_. Defaults to None.\n        tag (Optional[object], optional): _description_. Defaults to None.\n        **kwargs (Optional[dict], optional): Extra-parameters send to `Exchange.new_order`\n\n    Returns:\n        OrderResult: order result information\n    \"\"\"\n    params = dict(\n        size=abs(size),\n        limit=limit,\n        stop=stop,\n        sl=sl,\n        tp=tp,\n        tag=tag,\n        **kwargs,\n    )\n    params[\"size\"] = abs(self.__account.risk(**params))\n\n    return self.__exchange.new_order(**params)\n</code></pre>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.end","title":"end","text":"<pre><code>end(df: DataFeed)\n</code></pre> <p>Call when strategy run completed</p> <p>Parameters:</p> <ul> <li> <code>df</code>               (<code>DataFeed</code>)           \u2013            <p>main data of strategy</p> </li> </ul> Source code in <code>lettrade/strategy/strategy.py</code> <pre><code>def end(self, df: DataFeed):\n    \"\"\"Call when strategy run completed\n\n    Args:\n        df (DataFeed): main data of strategy\n    \"\"\"\n</code></pre>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.indicators","title":"indicators","text":"<pre><code>indicators(df: DataFeed)\n</code></pre> <p>All indicator and signal should implement here to cacheable. Because of <code>lettrade</code> will cache/pre-load all <code>DataFeed</code></p> <p>Parameters:</p> <ul> <li> <code>df</code>               (<code>DataFeed</code>)           \u2013            <p>main data of strategy</p> </li> </ul> Source code in <code>lettrade/strategy/strategy.py</code> <pre><code>def indicators(self, df: DataFeed):\n    \"\"\"All indicator and signal should implement here to cacheable.\n    Because of `lettrade` will cache/pre-load all `DataFeed`\n\n    Args:\n        df (DataFeed): main data of strategy\n    \"\"\"\n</code></pre>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.init","title":"init","text":"<pre><code>init()\n</code></pre> <p>Init strategy variables</p> Source code in <code>lettrade/strategy/strategy.py</code> <pre><code>def init(self):\n    \"\"\"Init strategy variables\"\"\"\n</code></pre>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.notify","title":"notify","text":"<pre><code>notify(msg: str, **kwargs)\n</code></pre> <p>Notify message to commander</p> <p>Parameters:</p> <ul> <li> <code>msg</code>               (<code>str</code>)           \u2013            <p>message string</p> </li> </ul> Source code in <code>lettrade/strategy/strategy.py</code> <pre><code>def notify(self, msg: str, **kwargs):\n    \"\"\"Notify message to commander\n\n    Args:\n        msg (str): message string\n    \"\"\"\n    return self.commander.send_message(msg=msg, **kwargs)\n</code></pre>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.on_execute","title":"on_execute","text":"<pre><code>on_execute(execute: Execute)\n</code></pre> <p>Listen for <code>Execute</code> event</p> <p>Parameters:</p> <ul> <li> <code>execute</code>               (<code>Execute</code>)           \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/strategy/strategy.py</code> <pre><code>def on_execute(self, execute: Execute):\n    \"\"\"Listen for `Execute` event\n\n    Args:\n        execute (Execute): _description_\n    \"\"\"\n</code></pre>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.on_notify","title":"on_notify","text":"<pre><code>on_notify(*args, **kwargs)\n</code></pre> <p>Listen for <code>notify</code> event</p> <p>Returns:</p> <ul> <li> <code>_type_</code>          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/strategy/strategy.py</code> <pre><code>def on_notify(self, *args, **kwargs):\n    \"\"\"Listen for `notify` event\n\n    Returns:\n        _type_: _description_\n    \"\"\"\n</code></pre>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.on_order","title":"on_order","text":"<pre><code>on_order(order: Order)\n</code></pre> <p>Listen for <code>Order</code> event</p> <p>Parameters:</p> <ul> <li> <code>order</code>               (<code>Order</code>)           \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/strategy/strategy.py</code> <pre><code>def on_order(self, order: Order):\n    \"\"\"Listen for `Order` event\n\n    Args:\n        order (Order): _description_\n    \"\"\"\n</code></pre>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.on_position","title":"on_position","text":"<pre><code>on_position(position: Position)\n</code></pre> <p>Listen for <code>Position</code> event</p> <p>Parameters:</p> <ul> <li> <code>position</code>               (<code>Position</code>)           \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/strategy/strategy.py</code> <pre><code>def on_position(self, position: Position):\n    \"\"\"Listen for `Position` event\n\n    Args:\n        position (Position): _description_\n    \"\"\"\n</code></pre>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.on_trade","title":"on_trade","text":"<pre><code>on_trade(trade: Trade)\n</code></pre> <p>Listen for <code>Trade</code> event</p> <p>Parameters:</p> <ul> <li> <code>trade</code>               (<code>Trade</code>)           \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/strategy/strategy.py</code> <pre><code>def on_trade(self, trade: Trade):\n    \"\"\"Listen for `Trade` event\n\n    Args:\n        trade (Trade): _description_\n    \"\"\"\n</code></pre>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.on_transaction","title":"on_transaction","text":"<pre><code>on_transaction(trans: Execute | Order | Trade)\n</code></pre> <p>Listen for transaction events</p> <p>Parameters:</p> <ul> <li> <code>trans</code>               (<code>Execute | Order | Trade</code>)           \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/strategy/strategy.py</code> <pre><code>def on_transaction(self, trans: Execute | Order | Trade):\n    \"\"\"Listen for transaction events\n\n    Args:\n        trans (Execute | Order | Trade): _description_\n    \"\"\"\n</code></pre>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.plot","title":"plot","text":"<pre><code>plot(df: DataFeed) -&gt; dict\n</code></pre> <p>Custom config of plot</p> <p>Parameters:</p> <ul> <li> <code>df</code>               (<code>DataFeed</code>)           \u2013            <p>plot DataFeed</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict</code> (              <code>dict</code> )          \u2013            <p>config</p> </li> </ul> Source code in <code>lettrade/strategy/strategy.py</code> <pre><code>def plot(self, df: DataFeed) -&gt; dict:\n    \"\"\"Custom config of plot\n\n    Args:\n        df (DataFeed): plot DataFeed\n\n    Returns:\n        dict: config\n    \"\"\"\n    return dict()\n</code></pre>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.sell","title":"sell","text":"<pre><code>sell(\n    size: Optional[float] = None,\n    limit: Optional[float] = None,\n    stop: Optional[float] = None,\n    sl: Optional[float] = None,\n    tp: Optional[float] = None,\n    tag: Optional[object] = None,\n    **kwargs\n) -&gt; OrderResult\n</code></pre> <p>Place a new short order.</p> <p>Parameters:</p> <ul> <li> <code>size</code>               (<code>Optional[float]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>limit</code>               (<code>Optional[float]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>stop</code>               (<code>Optional[float]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>sl</code>               (<code>Optional[float]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>tp</code>               (<code>Optional[float]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>tag</code>               (<code>Optional[object]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>**kwargs</code>               (<code>Optional[dict]</code>, default:                   <code>{}</code> )           \u2013            <p>Extra-parameters send to <code>Exchange.new_order</code></p> </li> </ul> <p>Returns:</p> <ul> <li> <code>OrderResult</code> (              <code>OrderResult</code> )          \u2013            <p>order result information</p> </li> </ul> Source code in <code>lettrade/strategy/strategy.py</code> <pre><code>def sell(\n    self,\n    size: Optional[float] = None,\n    limit: Optional[float] = None,\n    stop: Optional[float] = None,\n    sl: Optional[float] = None,\n    tp: Optional[float] = None,\n    tag: Optional[object] = None,\n    **kwargs,\n) -&gt; OrderResult:\n    \"\"\"Place a new short order.\n\n    Args:\n        size (Optional[float], optional): _description_. Defaults to None.\n        limit (Optional[float], optional): _description_. Defaults to None.\n        stop (Optional[float], optional): _description_. Defaults to None.\n        sl (Optional[float], optional): _description_. Defaults to None.\n        tp (Optional[float], optional): _description_. Defaults to None.\n        tag (Optional[object], optional): _description_. Defaults to None.\n        **kwargs (Optional[dict], optional): Extra-parameters send to `Exchange.new_order`\n\n    Returns:\n        OrderResult: order result information\n    \"\"\"\n    params = dict(\n        size=-abs(size),\n        limit=limit,\n        stop=stop,\n        sl=sl,\n        tp=tp,\n        tag=tag,\n        **kwargs,\n    )\n    params[\"size\"] = -abs(self.__account.risk(**params))\n\n    return self.__exchange.new_order(**params)\n</code></pre>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.start","title":"start","text":"<pre><code>start(df: DataFeed)\n</code></pre> <p>call after <code>init()</code> and before first <code>next()</code> is called</p> <p>Parameters:</p> <ul> <li> <code>df</code>               (<code>DataFeed</code>)           \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>_type_</code>          \u2013            <p><code>None</code></p> </li> </ul> Source code in <code>lettrade/strategy/strategy.py</code> <pre><code>def start(self, df: DataFeed):\n    \"\"\"call after `init()` and before first `next()` is called\n\n    Args:\n        df (DataFeed): _description_\n\n    Returns:\n        _type_: `None`\n    \"\"\"\n</code></pre>"},{"location":"reference/utils/","title":"Index","text":""},{"location":"reference/utils/#lettrade.utils","title":"utils","text":""},{"location":"reference/utils/docs/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> docs","text":""},{"location":"reference/utils/docs/#lettrade.utils.docs","title":"docs","text":""}]}