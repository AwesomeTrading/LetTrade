{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"LetTrade","text":"<p>A lightweight trading framework compatible with Stock, Forex, Crypto... markets</p> <p>Inspired by <code>freqtrade</code>, <code>backtrader</code>, <code>backtesting.py</code>... </p> <p>Let make algo trading simple :)</p>"},{"location":"#installation","title":"Installation","text":"<p>Stable version <pre><code>pip install lettrade\n</code></pre></p> <p>Developing version <pre><code>pip install git+https://git@github.com/AwesomeTrading/lettrade.git@main\n</code></pre></p>"},{"location":"#example","title":"Example","text":"<p>All sample are in <code>example/</code> directory </p> <p><pre><code>import talib.abstract as ta\n\nfrom lettrade import DataFeed, LetTrade, Strategy, let_backtest\nfrom lettrade.indicator import crossover, crossunder\n\n\nclass SmaCross(Strategy):\n    ema1_period = 9\n    ema2_period = 21\n\n    def indicators(self, df: DataFeed):\n        df[\"ema1\"] = ta.EMA(df, timeperiod=self.ema1_period)\n        df[\"ema2\"] = ta.EMA(df, timeperiod=self.ema2_period)\n\n        df[\"crossover\"] = crossover(df.ema1, df.ema2)\n        df[\"crossunder\"] = crossunder(df.ema1, df.ema2)\n\n    def next(self, df: DataFeed):\n        if df.crossover[-1]:\n            self.buy(0.1)\n        elif df.crossunder[-1]:\n            self.sell(0.1)\n\nlt = let_backtest(\n    strategy=SmaCross,\n    datas=\"docs/data/EURUSD_5m_0_1000.csv\",\n)\n\nlt.run()\n#lt.plot()\n\nprint(lt.stats.result.to_string())\n</code></pre> <p>Start                     2024-05-13 21:15:00+00:00 End                       2024-05-17 08:30:00+00:00 Duration                            3 days 11:15:00 Start Balance [$]                             10000 Equity [$]                                  10000.0 PL [$]                                          0.0 PL [%]                                          0.0 Buy &amp; Hold PL [%]                               2.0 Max. Drawdown [%]                            -33.08 Avg. Drawdown [%]                             -5.58 Max. Drawdown Duration            688 days 00:00:00 Avg. Drawdown Duration             41 days 00:00:00</p> </p>"},{"location":"#exec-1--trades-34","title":"Trades                                         34","text":"<p>Best Trade [%]                               0.0007 Worst Trade [%]                           -0.000732 Profit Factor                                  2.13 SQN                                            1.78</p>"},{"location":"#live-trading","title":"Live Trading","text":""},{"location":"#official","title":"Official","text":"<ul> <li><code>MetaTrader</code>: Support MetaTrader 5 Terminal trading</li> <li><code>CCXT</code>: Support most of cryptocurrency exchange from CCXT library</li> </ul>"},{"location":"#development","title":"Development","text":"<p>Set up conda environment <pre><code>conda create -y -n LetTrade python=3.10\nconda activate LetTrade\nconda install -c conda-forge ta-lib\npip install -r requirements-dev.txt\n</code></pre></p>"},{"location":"api/","title":"API reference","text":"<p>Note</p> <p>The main entry point to the API is through Events that are received by plugins. These events' descriptions link back to this page.</p>"},{"location":"api/#lettrade","title":"lettrade","text":""},{"location":"api/#lettrade.LetTrade","title":"LetTrade","text":"<pre><code>LetTrade(\n    strategy: Type[Strategy],\n    datas: DataFeed | list[DataFeed] | str | list[str],\n    feeder: DataFeeder,\n    exchange: Exchange,\n    account: Account,\n    commander: Optional[Commander] = None,\n    plot: Optional[Type[Plotter]] = None,\n    *args,\n    **kwargs\n)\n</code></pre> <p>Help to load and connect module</p> Source code in <code>lettrade/lettrade.py</code> <pre><code>def __init__(\n    self,\n    strategy: Type[Strategy],\n    datas: DataFeed | list[DataFeed] | str | list[str],\n    feeder: DataFeeder,\n    exchange: Exchange,\n    account: Account,\n    commander: Optional[Commander] = None,\n    plot: Optional[Type[\"Plotter\"]] = None,\n    *args,\n    **kwargs,\n) -&gt; None:\n    # DataFeeder\n    if not feeder:\n        raise RuntimeError(\"Feeder is invalid\")\n    self.feeder = feeder\n\n    # DataFeeds\n    self.datas: list[DataFeed] = self._init_datafeeds(datas)\n    self.data: DataFeed = self.datas[0]\n    self.feeder.init(self.datas)\n\n    # Account\n    if account is None:\n        raise RuntimeError(\"Account is invalid\")\n    self.account = account\n\n    # Exchange\n    if exchange is None:\n        raise RuntimeError(\"Exchange is invalid\")\n    self.exchange = exchange\n\n    # Strategy\n    self.strategy = strategy(\n        feeder=self.feeder,\n        exchange=self.exchange,\n        account=self.account,\n        commander=commander,\n        # params=params,\n    )\n\n    # Brain\n    self.brain = Brain(\n        strategy=self.strategy,\n        exchange=self.exchange,\n        feeder=self.feeder,\n        commander=commander,\n        *args,\n        **kwargs,\n    )\n\n    self.exchange.init(\n        brain=self.brain,\n        feeder=self.feeder,\n        account=self.account,\n        commander=commander,\n    )\n\n    # Commander\n    if commander:\n        self.commander = commander\n        self.commander.init(\n            lettrade=self,\n            brain=self.brain,\n            exchange=self.exchange,\n            strategy=self.strategy,\n        )\n\n    # Plot class\n    if plot:\n        self._plot_cls = plot\n</code></pre>"},{"location":"api/#lettrade.LetTrade.stats","title":"stats  <code>property</code>","text":"<pre><code>stats: Statistic\n</code></pre> <p>Get Statistic object</p>"},{"location":"api/#lettrade.LetTrade.plot","title":"plot","text":"<pre><code>plot(*args, **kwargs)\n</code></pre> <p>Plot strategy result</p> Source code in <code>lettrade/lettrade.py</code> <pre><code>def plot(self, *args, **kwargs):\n    \"\"\"Plot strategy result\"\"\"\n    if self.plotter is None:\n        if self._plot_cls is None:\n            raise RuntimeError(\"Plotter class is None\")\n\n        self.plotter = self._plot_cls(\n            feeder=self.feeder,\n            exchange=self.exchange,\n            account=self.account,\n            strategy=self.strategy,\n        )\n\n    self.plotter.plot(*args, **kwargs)\n</code></pre>"},{"location":"api/#lettrade.LetTrade.run","title":"run","text":"<pre><code>run(*args, **kwargs)\n</code></pre> <p>Run strategy</p> Source code in <code>lettrade/lettrade.py</code> <pre><code>def run(self, *args, **kwargs):\n    \"\"\"Run strategy\"\"\"\n    if self.commander:\n        self.commander.start()\n\n    self.brain.run(*args, **kwargs)\n\n    if self.commander:\n        self.commander.stop()\n\n    # Only show stats when backtest data\n    if not self.feeder.is_continous:\n        self.stats.compute()\n        self.stats.show()\n</code></pre>"},{"location":"api/#lettrade.LetTrade.stop","title":"stop","text":"<pre><code>stop()\n</code></pre> <p>Stop strategy</p> Source code in <code>lettrade/lettrade.py</code> <pre><code>def stop(self):\n    \"\"\"Stop strategy\"\"\"\n    self.brain.stop()\n    if self.plotter is not None:\n        self.plotter.stop()\n</code></pre>"},{"location":"api/#lettrade.let_backtest","title":"let_backtest","text":"<pre><code>let_backtest(\n    strategy: Type[Strategy],\n    datas: Optional[\n        DataFeed | list[DataFeed] | str | list[str]\n    ],\n    feeder: Optional[DataFeeder] = None,\n    exchange: Optional[Exchange] = None,\n    commander: Optional[Commander] = None,\n    plot: Optional[Type[Plotter]] = None,\n    cash: Optional[float] = 10000.0,\n    account: Optional[Account] = None,\n    **kwargs\n) -&gt; LetTrade\n</code></pre> <p>Complete <code>lettrade</code> backtest depenencies</p> <p>Parameters:</p> <ul> <li> <code>strategy</code>               (<code>Type[Strategy]</code>)           \u2013            <p>The Strategy implement class.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>LetTrade</code>           \u2013            <p>The LetTrade backtest object.</p> </li> </ul> Source code in <code>lettrade/lettrade.py</code> <pre><code>def let_backtest(\n    strategy: Type[Strategy],\n    datas: Optional[DataFeed | list[DataFeed] | str | list[str]],\n    feeder: Optional[DataFeeder] = None,\n    exchange: Optional[Exchange] = None,\n    commander: Optional[Commander] = None,\n    plot: Optional[Type[\"Plotter\"]] = None,\n    cash: Optional[float] = 10_000.0,\n    account: Optional[Account] = None,\n    **kwargs,\n) -&gt; \"LetTrade\":\n    \"\"\"\n    Complete `lettrade` backtest depenencies\n\n    Arguments:\n        strategy: The Strategy implement class.\n\n    Returns:\n        The LetTrade backtest object.\n    \"\"\"\n    from lettrade.exchange.backtest import (\n        BackTestAccount,\n        BackTestCommander,\n        BackTestDataFeed,\n        BackTestDataFeeder,\n        BackTestExchange,\n        CSVBackTestDataFeed,\n    )\n    from lettrade.plot import Plotter\n\n    # Data\n    feeds = []\n    # Support single and multiple data\n    if not isinstance(datas, list):\n        datas = [datas]\n    for data in datas:\n        if isinstance(data, str):\n            feeds.append(CSVBackTestDataFeed(data))\n            continue\n\n        if isinstance(data, pd.DataFrame) and not isinstance(data, DataFeed):\n            feeds.append(BackTestDataFeed(data))\n            continue\n\n        if not isinstance(data, DataFeed):\n            raise RuntimeError(f\"Data {data} type is invalid\")\n\n    # DataFeeder\n    if not feeder:\n        feeder = BackTestDataFeeder()\n\n    # Account\n    if account is None:\n        account = BackTestAccount()\n\n    # Exchange\n    if exchange is None:\n        exchange = BackTestExchange()\n\n    # Commander\n    if commander is None:\n        commander = BackTestCommander()\n\n    # Plot\n    if plot is None:\n        plot = Plotter\n\n    return LetTrade(\n        strategy=strategy,\n        datas=feeds,\n        feeder=feeder,\n        exchange=exchange,\n        commander=commander,\n        plot=plot,\n        cash=cash,\n        account=account,\n        **kwargs,\n    )\n</code></pre>"},{"location":"api/#strategy.strategy","title":"strategy.strategy","text":""},{"location":"api/#strategy.strategy.Strategy","title":"Strategy","text":"<pre><code>Strategy(\n    feeder: DataFeeder,\n    exchange: Exchange,\n    account: Account,\n    commander: Commander,\n    is_optimize: bool = False,\n)\n</code></pre> <p>               Bases: <code>ABC</code></p> Source code in <code>lettrade/strategy/strategy.py</code> <pre><code>def __init__(\n    self,\n    feeder: DataFeeder,\n    exchange: Exchange,\n    account: Account,\n    commander: Commander,\n    is_optimize: bool = False,\n):\n    self.__feeder: DataFeeder = feeder\n    self.__exchange: Exchange = exchange\n    self.__account: Account = account\n    self.__commander: Commander = commander\n\n    self.__datas: list[DataFeed] = self.__feeder.datas\n    self.__data: DataFeed = self.__feeder.data\n\n    if is_optimize and self.is_live:\n        raise RuntimeError(\"Optimize a live datafeeder\")\n    self.__is_optimize: bool = is_optimize\n</code></pre>"},{"location":"api/#strategy.strategy.Strategy.buy","title":"buy","text":"<pre><code>buy(\n    size: Optional[float] = None,\n    limit: Optional[float] = None,\n    stop: Optional[float] = None,\n    sl: Optional[float] = None,\n    tp: Optional[float] = None,\n    tag: object = None,\n    **kwargs\n) -&gt; OrderResult\n</code></pre> <p>Place a new long order. For explanation of parameters, see <code>Order</code> and its properties.</p> Source code in <code>lettrade/strategy/strategy.py</code> <pre><code>def buy(\n    self,\n    size: Optional[float] = None,\n    limit: Optional[float] = None,\n    stop: Optional[float] = None,\n    sl: Optional[float] = None,\n    tp: Optional[float] = None,\n    tag: object = None,\n    **kwargs,\n) -&gt; OrderResult:\n    \"\"\"\n    Place a new long order. For explanation of parameters, see `Order` and its properties.\n    \"\"\"\n    params = dict(\n        limit=limit,\n        stop=stop,\n        sl=sl,\n        tp=tp,\n        tag=tag,\n        **kwargs,\n    )\n    params[\"size\"] = self.__account.risk(size=abs(size), **params)\n\n    return self.__exchange.new_order(**params)\n</code></pre>"},{"location":"api/#strategy.strategy.Strategy.indicators","title":"indicators","text":"<pre><code>indicators()\n</code></pre> <p>All indicator and signal should implement here to cacheable Because of lettrade will cache/pre-load DataFeeds</p> Source code in <code>lettrade/strategy/strategy.py</code> <pre><code>def indicators(self):\n    \"\"\"\n    All indicator and signal should implement here to cacheable\n    Because of lettrade will cache/pre-load DataFeeds\n    \"\"\"\n</code></pre>"},{"location":"api/#strategy.strategy.Strategy.sell","title":"sell","text":"<pre><code>sell(\n    size: Optional[float] = None,\n    limit: Optional[float] = None,\n    stop: Optional[float] = None,\n    sl: Optional[float] = None,\n    tp: Optional[float] = None,\n    tag: object = None,\n    **kwargs\n) -&gt; OrderResult\n</code></pre> <p>Place a new short order. For explanation of parameters, see <code>Order</code> and its properties.</p> Source code in <code>lettrade/strategy/strategy.py</code> <pre><code>def sell(\n    self,\n    size: Optional[float] = None,\n    limit: Optional[float] = None,\n    stop: Optional[float] = None,\n    sl: Optional[float] = None,\n    tp: Optional[float] = None,\n    tag: object = None,\n    **kwargs,\n) -&gt; OrderResult:\n    \"\"\"\n    Place a new short order. For explanation of parameters, see `Order` and its properties.\n    \"\"\"\n    params = dict(\n        limit=limit,\n        stop=stop,\n        sl=sl,\n        tp=tp,\n        tag=tag,\n        **kwargs,\n    )\n    params[\"size\"] = self.__account.risk(size=-abs(size), **params)\n\n    return self.__exchange.new_order(**params)\n</code></pre>"},{"location":"api/#strategy.strategy.Strategy.start","title":"start","text":"<pre><code>start(df: DataFeed)\n</code></pre> <p>start function will called before first next() is called</p> Source code in <code>lettrade/strategy/strategy.py</code> <pre><code>def start(self, df: DataFeed):\n    \"start function will called before first next() is called\"\n</code></pre>"},{"location":"api/#indicator.indicator","title":"indicator.indicator","text":""},{"location":"api/#brain.brain","title":"brain.brain","text":""},{"location":"api/#brain.brain.Brain","title":"Brain","text":"<pre><code>Brain(\n    strategy: Strategy,\n    exchange: Exchange,\n    feeder: DataFeeder,\n    commander: Commander,\n    *args,\n    **kwargs\n)\n</code></pre> <p>Brain of <code>lettrade</code></p> Source code in <code>lettrade/brain/brain.py</code> <pre><code>def __init__(\n    self,\n    strategy: Strategy,\n    exchange: Exchange,\n    feeder: DataFeeder,\n    commander: \"Commander\",\n    *args,\n    **kwargs,\n) -&gt; None:\n    self.strategy: Strategy = strategy\n    self.exchange: Exchange = exchange\n    self.feeder: DataFeeder = feeder\n    self.datas: list[DataFeed] = self.feeder.datas\n    self.data: DataFeed = self.feeder.data\n\n    self.commander: \"Commander\" = commander\n</code></pre>"},{"location":"api/#exchange.exchange","title":"exchange.exchange","text":""},{"location":"api/#exchange.exchange.Exchange","title":"Exchange","text":"<pre><code>Exchange()\n</code></pre> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def __init__(self):\n    self.executes: dict[str, Execute] = dict()\n    self.orders: dict[str, Order] = dict()\n    self.history_orders: dict[str, Order] = dict()\n    self.trades: dict[str, Trade] = dict()\n    self.history_trades: dict[str, Trade] = dict()\n    self.positions: dict[str, Position] = dict()\n\n    self.datas: list[DataFeed] = self.feeder.datas\n    self.data: DataFeed = self.feeder.data\n\n    self._state = ExchangeState.Init\n</code></pre>"},{"location":"api/#exchange.exchange.Exchange.next","title":"next","text":"<pre><code>next()\n</code></pre> <p>Call when new data feeded</p> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def next(self):\n    \"Call when new data feeded\"\n    self._account._snapshot_equity()\n</code></pre>"},{"location":"api/#exchange.exchange.Exchange.on_execute","title":"on_execute","text":"<pre><code>on_execute(\n    execute: Execute, broadcast=True, *args, **kwargs\n)\n</code></pre> <p>Receive Execute event from exchange then store and emit for Brain</p> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def on_execute(self, execute: Execute, broadcast=True, *args, **kwargs):\n    \"\"\"\n    Receive Execute event from exchange then store and emit for Brain\n    \"\"\"\n    if not isinstance(execute, Execute):\n        raise RuntimeError(f\"{execute} is not instance of type Execute\")\n\n    if execute.id in self.executes:\n        # Merge to keep Execute handler for strategy using\n        # when strategy want to store Execute object\n        # and object will be automatic update directly\n        self.executes[execute.id].merge(execute)\n        execute = self.executes[execute.id]\n    else:\n        self.executes[execute.id] = execute\n\n    if self._state != ExchangeState.Run:\n        return\n\n    if broadcast:\n        self._brain.on_execute(execute)\n</code></pre>"},{"location":"api/#exchange.exchange.Exchange.on_order","title":"on_order","text":"<pre><code>on_order(order: Order, broadcast=True, *args, **kwargs)\n</code></pre> <p>Receive Order event from exchange then store and emit for Brain</p> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def on_order(self, order: Order, broadcast=True, *args, **kwargs):\n    \"\"\"\n    Receive Order event from exchange then store and emit for Brain\n    \"\"\"\n    if not isinstance(order, Order):\n        raise RuntimeError(f\"{order} is not instance of type Order\")\n\n    if order.state in [OrderState.Executed, OrderState.Canceled]:\n        self.history_orders[order.id] = order\n        if order.id in self.orders:\n            del self.orders[order.id]\n    else:\n        if order.id in self.history_orders:\n            raise RuntimeError(f\"Order {order.id} closed\")\n\n        if order.id in self.orders:\n            # Merge to keep Order handler for strategy using\n            # when strategy want to store Order object\n            # and object will be automatic update directly\n            self.orders[order.id].merge(order)\n            order = self.orders[order.id]\n        else:\n            self.orders[order.id] = order\n\n    if self._state != ExchangeState.Run:\n        return\n\n    if broadcast:\n        self._brain.on_order(order)\n</code></pre>"},{"location":"api/#exchange.exchange.Exchange.on_position","title":"on_position","text":"<pre><code>on_position(\n    position: Position, broadcast=True, *args, **kwargs\n)\n</code></pre> <p>Receive Position event from exchange then store and emit for Brain</p> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def on_position(self, position: Position, broadcast=True, *args, **kwargs):\n    \"\"\"\n    Receive Position event from exchange then store and emit for Brain\n    \"\"\"\n    if not isinstance(position, Position):\n        raise RuntimeError(f\"{position} is not instance of type Position\")\n\n    if position.id in self.positions:\n        # Merge to keep Position handler for strategy using\n        # when strategy want to store Position object\n        # and object will be automatic update directly\n        self.positions[position.id].merge(position)\n    else:\n        self.positions[position.id] = position\n\n    if self._state != ExchangeState.Run:\n        return\n\n    if broadcast:\n        self._brain.on_position(position)\n</code></pre>"},{"location":"api/#exchange.exchange.Exchange.on_trade","title":"on_trade","text":"<pre><code>on_trade(trade: Trade, broadcast=True, *args, **kwargs)\n</code></pre> <p>Receive Trade event from exchange then store and emit for Brain</p> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def on_trade(self, trade: Trade, broadcast=True, *args, **kwargs):\n    \"\"\"\n    Receive Trade event from exchange then store and emit for Brain\n    \"\"\"\n    if not isinstance(trade, Trade):\n        raise RuntimeError(f\"{trade} is not instance of type Trade\")\n\n    if trade.state == TradeState.Exit:\n        self.history_trades[trade.id] = trade\n        if trade.id in self.trades:\n            del self.trades[trade.id]\n\n        self._account._on_trade_exit(trade)\n    else:\n        if trade.id in self.history_trades:\n            raise RuntimeError(f\"Order {trade.id} closed\")\n        if trade.id in self.trades:\n            # Merge to keep Trade handler for strategy using\n            # when strategy want to store Trade object\n            # and object will be automatic update directly\n            self.trades[trade.id].merge(trade)\n            trade = self.trades[trade.id]\n        else:\n            self.trades[trade.id] = trade\n\n    if self._state != ExchangeState.Run:\n        return\n\n    if broadcast:\n        self._brain.on_trade(trade)\n</code></pre>"},{"location":"api/#account.account","title":"account.account","text":""},{"location":"api/#commander.commander","title":"commander.commander","text":""},{"location":"api/#plot.plot","title":"plot.plot","text":""},{"location":"api/#plot.plot.Plotter","title":"Plotter","text":"<pre><code>Plotter(\n    feeder: DataFeeder,\n    exchange: Exchange,\n    account: Account,\n    strategy: Strategy,\n)\n</code></pre> Source code in <code>lettrade/plot/plot.py</code> <pre><code>def __init__(\n    self,\n    feeder: DataFeeder,\n    exchange: Exchange,\n    account: Account,\n    strategy: Strategy,\n) -&gt; None:\n    self.feeder: DataFeeder = feeder\n    self.exchange: Exchange = exchange\n    self.account: Account = account\n    self.strategy: Strategy = strategy\n\n    self.datas: list[DataFeed] = self.feeder.datas\n    self.data: DataFeed = self.feeder.data\n</code></pre>"},{"location":"api/#plot.plot.Plotter.stop","title":"stop","text":"<pre><code>stop()\n</code></pre> <p>stop plotter</p> Source code in <code>lettrade/plot/plot.py</code> <pre><code>def stop(self):\n    \"\"\"stop plotter\"\"\"\n</code></pre>"},{"location":"api/#stats.stats","title":"stats.stats","text":""},{"location":"dev/","title":"Development","text":"<p>Guide for developer to install <code>lettrade</code></p>"},{"location":"dev/#environment","title":"Environment","text":"<p>Set up conda environment <pre><code>conda create -y -n LetTrade python=3.10\nconda activate LetTrade\nconda install -c conda-forge ta-lib\npip install -r requirements-dev.txt\n</code></pre></p>"},{"location":"dev/#document","title":"Document","text":"<p>Building <code>lettrade</code> document guide</p>"},{"location":"dev/#dependencies","title":"Dependencies","text":"<p>Install <code>lettrade</code> as module <pre><code>pip install .\n</code></pre></p> <p>Install python document requirements <pre><code>pip install -r docs/requirements-docs.txt\n</code></pre></p>"},{"location":"dev/#view-document","title":"View document","text":"<p>Start mkdocs local server <pre><code>mkdocs serve\n</code></pre></p>"},{"location":"install/","title":"LetTrade install","text":"<p>Guide to quick install <code>lettrade</code></p>"},{"location":"install/#installation","title":"Installation","text":"<p>Stable version <pre><code>pip install lettrade\n</code></pre></p> <p>Developing version <pre><code>pip install git+https://git@github.com/AwesomeTrading/lettrade.git@main\n</code></pre></p>"},{"location":"install/metatrader/","title":"MetaTrader 5 Install","text":""},{"location":"install/metatrader/#wine","title":"Wine","text":"<p>Ubuntu <pre><code>wget https://download.mql5.com/cdn/web/metaquotes.software.corp/mt5/mt5ubuntu.sh ; chmod +x mt5ubuntu.sh ; ./mt5ubuntu.sh\n</code></pre></p>"},{"location":"install/metatrader/#python","title":"Python","text":"<pre><code>wget https://www.python.org/ftp/python/3.10.9/python-3.10.9.exe\n\n# same WINEPREFIX with metatrader\nWINEPREFIX=$HOME/.mt5 wine python-3.10.9.exe\n</code></pre>"},{"location":"install/metatrader/#python-requirements","title":"Python requirements","text":"<pre><code>cd $HOME/.mt5/dosdevices/c:/users/$USER/AppData/Local/Programs/Python/Python310-32/\nWINEPREFIX=$HOME/.mt5 wine python.exe -m pip install --upgrade pip\nWINEPREFIX=$HOME/.mt5 wine python.exe -m pip install MetaTrader5\nWINEPREFIX=$HOME/.mt5 wine python.exe -m pip install https://github.com/AwesomeTrading/mt5linux/archive/master.zip\n</code></pre>"},{"location":"install/metatrader/#start-server","title":"Start Server","text":"<pre><code>WINEPREFIX=$HOME/.mt5 python -m mt5linux \"$HOME/.mt5/dosdevices/c:/users/$USER/AppData/Local/Programs/Python/Python310-32/python.exe\"\n</code></pre>"},{"location":"install/metatrader/#metatrader-terminal","title":"MetaTrader Terminal","text":"<p>Load broker information before start by steps:</p> <p><code>File</code> -&gt; <code>Open an Account</code> -&gt; Search your broker (ex: <code>Tickmill</code>, <code>Roboforex</code>...) -&gt; <code>Enter</code> to load -&gt; <code>Cancel</code> (Done)</p> <p>Enable Automatic Algo Trading</p> <p><code>Tools</code> -&gt; <code>Options</code> -&gt; <code>Expert Advisors</code> -&gt; <code>Allow Auto Trading</code> -&gt; uncheck <code>Disable automated trading when switching accounts</code> and <code>Disable automated trading when switching profiles</code></p>"}]}