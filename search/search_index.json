{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"LetTrade","text":"<p>A lightweight trading framework compatible with Stock, Forex, Crypto... markets</p> <p>Inspired by <code>freqtrade</code>, <code>backtrader</code>, <code>backtesting.py</code>...</p> <p>Let make algo trading simple :)</p> <p>Find more at Documentation</p>"},{"location":"#installation","title":"Installation","text":"<p>Stable version</p> <pre><code>pip install lettrade\n</code></pre> <p>Developing version</p> <pre><code>pip install git+https://git@github.com/AwesomeTrading/lettrade.git@main\n</code></pre>"},{"location":"#example","title":"Example","text":"<pre><code>import talib.abstract as ta\n\nfrom lettrade import DataFeed, LetTrade, Strategy, let_backtest\nfrom lettrade.indicator import crossover, crossunder\n\n\nclass SmaCross(Strategy):\n    ema1_period = 9\n    ema2_period = 21\n\n    def indicators(self, df: DataFeed):\n        df[\"ema1\"] = ta.EMA(df, timeperiod=self.ema1_period)\n        df[\"ema2\"] = ta.EMA(df, timeperiod=self.ema2_period)\n\n        df[\"crossover\"] = crossover(df.ema1, df.ema2)\n        df[\"crossunder\"] = crossunder(df.ema1, df.ema2)\n\n    def next(self, df: DataFeed):\n        if df.crossover[-1]:\n            self.buy(0.1)\n        elif df.crossunder[-1]:\n            self.sell(0.1)\n\nlt = let_backtest(\n    strategy=SmaCross,\n    datas=\"example/data/data/EURUSD_5m_0_1000.csv\",\n)\n\nlt.run()\nlt.plot()\n</code></pre> <pre><code># Strategy                       &lt;class 'SmaCross'&gt;\nStart                     2024-05-13 21:15:00+00:00\nEnd                       2024-05-17 08:30:00+00:00\nDuration                            3 days 11:15:00\nStart Balance [$]                             10000\nEquity [$]                                  10000.0\nPL [$]                                          0.0\nPL [%]                                          0.0\nBuy &amp; Hold PL [%]                               2.0\nMax. Drawdown [%]                            -33.08\nAvg. Drawdown [%]                             -5.58\nMax. Drawdown Duration            688 days 00:00:00\nAvg. Drawdown Duration             41 days 00:00:00\n\n# Trades                                         34\nBest Trade [%]                               0.0007\nWorst Trade [%]                           -0.000732\nProfit Factor                                  2.13\nSQN                                            1.78\n</code></pre>"},{"location":"#start-a-strategy","title":"Start a strategy","text":"<p>All example in <code>example/</code> directory</p>"},{"location":"#download-data","title":"Download data","text":"<pre><code>python -m example.data.yfinance\n</code></pre>"},{"location":"#backtest-strategy","title":"Backtest strategy","text":"<pre><code>python -m example.strategy.backtest_sma_cross\n</code></pre> <pre><code>\n</code></pre>"},{"location":"#live-trading","title":"Live Trading","text":""},{"location":"#official","title":"Official","text":"<ul> <li><code>MetaTrader</code>: Support MetaTrader 5 Terminal trading</li> <li><code>CCXT</code>: Support most of cryptocurrency exchange from CCXT library</li> </ul>"},{"location":"#development","title":"Development","text":"<p>Set up conda environment</p> <pre><code>conda create -y -n LetTrade python=3.10\nconda activate LetTrade\nconda install -c conda-forge ta-lib\npip install -r requirements-dev.txt\n</code></pre>"},{"location":"dev/","title":"Development","text":"<p>Guide for developer to install <code>lettrade</code></p>"},{"location":"dev/#environment","title":"Environment","text":"<p>Set up conda environment</p> <pre><code>conda create -y -n LetTrade python=3.10\nconda activate LetTrade\nconda install -c conda-forge ta-lib\npip install -r requirements-dev.txt\n</code></pre>"},{"location":"dev/#document","title":"Document","text":"<p>Building <code>lettrade</code> document guide</p>"},{"location":"dev/#dependencies","title":"Dependencies","text":"<p>Install <code>lettrade</code> as module</p> <pre><code>pip install .\n</code></pre> <p>Install python document requirements</p> <pre><code>pip install -r docs/requirements-docs.txt\n</code></pre>"},{"location":"dev/#view-document","title":"View document","text":"<p>Start mkdocs local server</p> <pre><code>mkdocs serve\n</code></pre>"},{"location":"talib/","title":"TA Library","text":""},{"location":"talib/#ta-lib","title":"TA-Lib","text":"<p>Home | Indicators</p>"},{"location":"talib/#build-from-source","title":"Build from source","text":"<p>Download ta-lib from github ta-lib-0.4.0-src.tar.gz</p> <pre><code>tar zxvf ta-lib-0.4.0-src.tar.gz\ncd ta-lib\n./configure --prefix=/usr\nmake\nsudo make install\n</code></pre> <p>Full install tutorial from TA-Lib</p>"},{"location":"talib/#conda-forge","title":"Conda-Forge","text":"<pre><code>conda install -c conda-forge ta-lib\n</code></pre>"},{"location":"talib/#python-library","title":"Python library","text":"<pre><code>pip install TA-Lib\n</code></pre>"},{"location":"talib/#tulip-indicators","title":"Tulip Indicators","text":"<p>Home | Indicators</p>"},{"location":"talib/#python-library_1","title":"Python library","text":"<pre><code>pip install Cython numpy\npip install tulipy\n</code></pre>"},{"location":"talib/#build-c-library-from-source-option","title":"Build C library from source [option]","text":"<pre><code>git clone https://github.com/TulipCharts/tulipindicators\ncd tulipindicators\nmake\n</code></pre> <p>Example</p> Unordered ListOrdered List <pre><code>* Sed sagittis eleifend rutrum\n* Donec vitae suscipit est\n* Nulla tempor lobortis orci\n</code></pre> <pre><code>1. Sed sagittis eleifend rutrum\n2. Donec vitae suscipit est\n3. Nulla tempor lobortis orci\n</code></pre>"},{"location":"talib/#pandas-ta","title":"Pandas-TA","text":"<p>Home | Indicators</p> <pre><code>pip install pandas_ta\n</code></pre>"},{"location":"install/","title":"LetTrade install","text":"<p>Guide to quick install <code>lettrade</code></p>"},{"location":"install/#installation","title":"Installation","text":"<p>Stable version</p> <pre><code>pip install lettrade\n</code></pre> <p>Developing version</p> <pre><code>pip install git+https://git@github.com/AwesomeTrading/lettrade.git@main\n</code></pre>"},{"location":"install/metatrader/","title":"MetaTrader 5 Install","text":""},{"location":"install/metatrader/#wine","title":"Wine","text":"<p>Ubuntu</p> <pre><code>wget https://download.mql5.com/cdn/web/metaquotes.software.corp/mt5/mt5ubuntu.sh ; chmod +x mt5ubuntu.sh ; ./mt5ubuntu.sh\n</code></pre>"},{"location":"install/metatrader/#python","title":"Python","text":"<pre><code>wget https://www.python.org/ftp/python/3.10.9/python-3.10.9.exe\n\n# same WINEPREFIX with metatrader\nWINEPREFIX=$HOME/.mt5 wine python-3.10.9.exe\n</code></pre>"},{"location":"install/metatrader/#python-requirements","title":"Python requirements","text":"<pre><code>cd $HOME/.mt5/dosdevices/c:/users/$USER/AppData/Local/Programs/Python/Python310-32/\nWINEPREFIX=$HOME/.mt5 wine python.exe -m pip install --upgrade pip\nWINEPREFIX=$HOME/.mt5 wine python.exe -m pip install MetaTrader5\nWINEPREFIX=$HOME/.mt5 wine python.exe -m pip install https://github.com/AwesomeTrading/mt5linux/archive/master.zip\n</code></pre>"},{"location":"install/metatrader/#start-server","title":"Start Server","text":"<pre><code>WINEPREFIX=$HOME/.mt5 python -m mt5linux \"$HOME/.mt5/dosdevices/c:/users/$USER/AppData/Local/Programs/Python/Python310-32/python.exe\"\n</code></pre>"},{"location":"install/metatrader/#metatrader-terminal","title":"MetaTrader Terminal","text":"<p>Load broker information before start by steps:</p> <p><code>File</code> -&gt; <code>Open an Account</code> -&gt; Search your broker (ex: <code>Tickmill</code>, <code>Roboforex</code>...) -&gt; <code>Enter</code> to load -&gt; <code>Cancel</code> (Done)</p> <p>Enable Automatic Algo Trading</p> <p><code>Tools</code> -&gt; <code>Options</code> -&gt; <code>Expert Advisors</code> -&gt; <code>Allow Auto Trading</code> -&gt; uncheck <code>Disable automated trading when switching accounts</code> and <code>Disable automated trading when switching profiles</code></p>"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li> account<ul> <li> account</li> </ul> </li> <li> brain<ul> <li> brain</li> </ul> </li> <li> commander<ul> <li> commander</li> <li> telegram</li> </ul> </li> <li> data<ul> <li> csv</li> <li> data</li> <li> exporter<ul> <li> csv</li> </ul> </li> <li> feeder</li> <li> pickle</li> <li> replay</li> </ul> </li> <li> exchange<ul> <li> backtest<ul> <li> account</li> <li> commander</li> <li> data<ul> <li> data</li> <li> yfinance</li> </ul> </li> <li> exchange</li> <li> feeder</li> <li> trade</li> </ul> </li> <li> base</li> <li> exchange</li> <li> execute</li> <li> metatrader<ul> <li> account</li> <li> api</li> <li> data</li> <li> exchange</li> <li> feeder</li> <li> metatrader</li> <li> trade</li> </ul> </li> <li> order</li> <li> position</li> <li> trade</li> </ul> </li> <li> indicator<ul> <li> function</li> <li> indicator</li> </ul> </li> <li> lettrade</li> <li> plot<ul> <li> plot</li> </ul> </li> <li> stats<ul> <li> stats</li> </ul> </li> <li> strategy<ul> <li> strategy</li> </ul> </li> <li> utils<ul> <li> docs</li> </ul> </li> </ul>"},{"location":"reference/lettrade/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> lettrade","text":""},{"location":"reference/lettrade/#lettrade.lettrade","title":"lettrade","text":""},{"location":"reference/lettrade/#lettrade.lettrade.LetTrade","title":"LetTrade","text":"<pre><code>LetTrade(\n    strategy: Type[Strategy],\n    datas: DataFeed | list[DataFeed] | str | list[str],\n    feeder: DataFeeder,\n    exchange: Exchange,\n    account: Account,\n    commander: Optional[Commander] = None,\n    plot: Optional[Type[Plotter]] = None,\n    *args,\n    **kwargs\n)\n</code></pre> <p>Help to load and connect module</p>"},{"location":"reference/lettrade/#lettrade.lettrade.LetTrade.stats","title":"stats  <code>property</code>","text":"<pre><code>stats: Statistic\n</code></pre> <p>Get Statistic object</p>"},{"location":"reference/lettrade/#lettrade.lettrade.LetTrade.plot","title":"plot","text":"<pre><code>plot(*args, **kwargs)\n</code></pre> <p>Plot strategy result</p>"},{"location":"reference/lettrade/#lettrade.lettrade.LetTrade.run","title":"run","text":"<pre><code>run(*args, **kwargs)\n</code></pre> <p>Run strategy</p>"},{"location":"reference/lettrade/#lettrade.lettrade.LetTrade.stop","title":"stop","text":"<pre><code>stop()\n</code></pre> <p>Stop strategy</p>"},{"location":"reference/lettrade/#lettrade.lettrade.let_backtest","title":"let_backtest","text":"<pre><code>let_backtest(\n    strategy: Type[Strategy],\n    datas: Optional[\n        DataFeed | list[DataFeed] | str | list[str]\n    ],\n    feeder: Optional[DataFeeder] = None,\n    exchange: Optional[Exchange] = None,\n    commander: Optional[Commander] = None,\n    plot: Optional[Type[Plotter]] = None,\n    cash: Optional[float] = 10000.0,\n    account: Optional[Account] = None,\n    **kwargs\n) -&gt; LetTrade\n</code></pre> <p>Complete <code>lettrade</code> backtest depenencies</p> <p>Parameters:</p> <ul> <li> <code>strategy</code>               (<code>Type[Strategy]</code>)           \u2013            <p>The Strategy implement class</p> </li> <li> <code>datas</code>               (<code>Optional[DataFeed | list[DataFeed] | str | list[str]]</code>)           \u2013            <p>description</p> </li> <li> <code>feeder</code>               (<code>Optional[DataFeeder]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>exchange</code>               (<code>Optional[Exchange]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>commander</code>               (<code>Optional[Commander]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>plot</code>               (<code>Optional[Type[Plotter]]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>cash</code>               (<code>Optional[float]</code>, default:                   <code>10000.0</code> )           \u2013            <p>description. Defaults to 10_000.0.</p> </li> <li> <code>account</code>               (<code>Optional[Account]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>The validate parameter error</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>LetTrade</code> (              <code>LetTrade</code> )          \u2013            <p>The LetTrade backtest object</p> </li> </ul>"},{"location":"reference/account/","title":"Index","text":""},{"location":"reference/account/#lettrade.account","title":"account","text":""},{"location":"reference/account/account/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> account","text":""},{"location":"reference/account/account/#lettrade.account.account","title":"account","text":""},{"location":"reference/account/account/#lettrade.account.account.Account","title":"Account","text":"<pre><code>Account(\n    *,\n    risk=0.02,\n    cash=10000,\n    commission=0.0,\n    margin=None,\n    leverage=1.0\n)\n</code></pre> <p>Manage account balance, leverage, commission. Risk calculate and control</p>"},{"location":"reference/account/account/#lettrade.account.account.Account.pl","title":"pl","text":"<pre><code>pl(size, entry_price: float, exit_price=None)\n</code></pre> <p>Estimate temporary profit and loss</p>"},{"location":"reference/account/account/#lettrade.account.account.Account.risk","title":"risk","text":"<pre><code>risk(size, **kwargs)\n</code></pre> <p>Risk calculation</p>"},{"location":"reference/brain/","title":"Index","text":""},{"location":"reference/brain/#lettrade.brain","title":"brain","text":""},{"location":"reference/brain/brain/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> brain","text":""},{"location":"reference/brain/brain/#lettrade.brain.brain","title":"brain","text":""},{"location":"reference/brain/brain/#lettrade.brain.brain.Brain","title":"Brain","text":"<pre><code>Brain(\n    strategy: Strategy,\n    exchange: Exchange,\n    feeder: DataFeeder,\n    commander: Commander,\n    *args,\n    **kwargs\n)\n</code></pre> <p>Brain of <code>lettrade</code></p>"},{"location":"reference/commander/","title":"Index","text":""},{"location":"reference/commander/#lettrade.commander","title":"commander","text":""},{"location":"reference/commander/commander/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> commander","text":""},{"location":"reference/commander/commander/#lettrade.commander.commander","title":"commander","text":""},{"location":"reference/commander/commander/#lettrade.commander.commander.Commander","title":"Commander","text":"<pre><code>Commander()\n</code></pre> <p>               Bases: <code>ABC</code></p> <p>Abstract class for strategy commander. Help to manage and report strategy real-time</p>"},{"location":"reference/commander/commander/#lettrade.commander.commander.Commander.init","title":"init","text":"<pre><code>init(\n    lettrade: LetTrade,\n    brain: Brain,\n    exchange: Exchange,\n    strategy: Strategy,\n)\n</code></pre> <p>Init commander dependencies</p> <p>Parameters:</p> <ul> <li> <code>lettrade</code>               (<code>LetTrade</code>)           \u2013            <p>LetTrade object</p> </li> <li> <code>brain</code>               (<code>Brain</code>)           \u2013            <p>Brain of bot</p> </li> <li> <code>exchange</code>               (<code>Exchange</code>)           \u2013            <p>Manage bot trading</p> </li> <li> <code>strategy</code>               (<code>Strategy</code>)           \u2013            <p>Strategy of bot</p> </li> </ul>"},{"location":"reference/commander/telegram/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> telegram","text":""},{"location":"reference/commander/telegram/#lettrade.commander.telegram","title":"telegram","text":""},{"location":"reference/commander/telegram/#lettrade.commander.telegram.TelegramCommander","title":"TelegramCommander","text":"<pre><code>TelegramCommander(token, chat_id, *args, **kwargs)\n</code></pre> <p>               Bases: <code>Commander</code></p>"},{"location":"reference/commander/telegram/#lettrade.commander.telegram.TelegramCommander.cleanup","title":"cleanup","text":"<pre><code>cleanup() -&gt; None\n</code></pre> <p>Stops all running telegram threads. :return: None</p>"},{"location":"reference/commander/telegram/#lettrade.commander.telegram.TelegramCommander.init","title":"init","text":"<pre><code>init(\n    lettrade: LetTrade,\n    brain: Brain,\n    exchange: Exchange,\n    strategy: Strategy,\n)\n</code></pre> <p>Init commander dependencies</p> <p>Parameters:</p> <ul> <li> <code>lettrade</code>               (<code>LetTrade</code>)           \u2013            <p>LetTrade object</p> </li> <li> <code>brain</code>               (<code>Brain</code>)           \u2013            <p>Brain of bot</p> </li> <li> <code>exchange</code>               (<code>Exchange</code>)           \u2013            <p>Manage bot trading</p> </li> <li> <code>strategy</code>               (<code>Strategy</code>)           \u2013            <p>Strategy of bot</p> </li> </ul>"},{"location":"reference/commander/telegram/#lettrade.commander.telegram.authorized_only","title":"authorized_only","text":"<pre><code>authorized_only(\n    command_handler: Callable[\n        ..., Coroutine[Any, Any, None]\n    ]\n)\n</code></pre> <p>Decorator to check if the message comes from the correct chat_id :param command_handler: Telegram CommandHandler :return: decorated function</p>"},{"location":"reference/data/","title":"Index","text":""},{"location":"reference/data/#lettrade.data","title":"data","text":""},{"location":"reference/data/csv/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> csv","text":""},{"location":"reference/data/csv/#lettrade.data.csv","title":"csv","text":""},{"location":"reference/data/csv/#lettrade.data.csv.CSVDataFeed","title":"CSVDataFeed","text":"<pre><code>CSVDataFeed(\n    path: str,\n    delimiter: str = \",\",\n    index_col: int = 0,\n    header: int = 0,\n    *args: list,\n    **kwargs: dict\n)\n</code></pre> <p>               Bases: <code>DataFeed</code></p> <p>Implement help to load DataFeed from csv file</p> <p>Parameters:</p> <ul> <li> <code>path</code>               (<code>str</code>)           \u2013            <p>Path of csv file</p> </li> <li> <code>delimiter</code>               (<code>str</code>, default:                   <code>','</code> )           \u2013            <p>description. Defaults to \",\".</p> </li> <li> <code>index_col</code>               (<code>int</code>, default:                   <code>0</code> )           \u2013            <p>description. Defaults to 0.</p> </li> <li> <code>header</code>               (<code>int</code>, default:                   <code>0</code> )           \u2013            <p>description. Defaults to 0.</p> </li> <li> <code>*args</code>               (<code>list</code>, default:                   <code>()</code> )           \u2013            <p>DataFeed list parameters</p> </li> <li> <code>**kwargs</code>               (<code>dict</code>, default:                   <code>{}</code> )           \u2013            <p>DataFeed dict parameters</p> </li> </ul>"},{"location":"reference/data/data/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> data","text":""},{"location":"reference/data/data/#lettrade.data.data","title":"data","text":""},{"location":"reference/data/data/#lettrade.data.data.DataFeed","title":"DataFeed","text":"<pre><code>DataFeed(\n    name: str, meta: Optional[dict] = None, *args, **kwargs\n)\n</code></pre> <p>               Bases: <code>DataFrame</code></p> <p>Data for Strategy. A implement of pandas.DataFrame</p> <p>Parameters:</p> <ul> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>Name of DataFeed</p> </li> <li> <code>meta</code>               (<code>Optional[dict]</code>, default:                   <code>None</code> )           \u2013            <p>metadata of DataFeed. Defaults to None.</p> </li> <li> <code>*args</code>               (<code>list</code>, default:                   <code>()</code> )           \u2013            <p><code>pandas.DataFrame</code> list parameters</p> </li> <li> <code>**kwargs</code>               (<code>dict</code>, default:                   <code>{}</code> )           \u2013            <p><code>pandas.DataFrame</code> dict parameters</p> </li> </ul>"},{"location":"reference/data/feeder/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> feeder","text":""},{"location":"reference/data/feeder/#lettrade.data.feeder","title":"feeder","text":""},{"location":"reference/data/feeder/#lettrade.data.feeder.DataFeeder","title":"DataFeeder","text":""},{"location":"reference/data/feeder/#lettrade.data.feeder.DataFeeder.is_continous","title":"is_continous  <code>property</code>","text":"<pre><code>is_continous\n</code></pre> <p>Flag check is realtime continous datafeeder</p>"},{"location":"reference/data/pickle/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> pickle","text":""},{"location":"reference/data/pickle/#lettrade.data.pickle","title":"pickle","text":""},{"location":"reference/data/replay/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> replay","text":""},{"location":"reference/data/replay/#lettrade.data.replay","title":"replay","text":""},{"location":"reference/data/exporter/","title":"Index","text":""},{"location":"reference/data/exporter/#lettrade.data.exporter","title":"exporter","text":""},{"location":"reference/data/exporter/csv/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> csv","text":""},{"location":"reference/data/exporter/csv/#lettrade.data.exporter.csv","title":"csv","text":""},{"location":"reference/exchange/","title":"Index","text":""},{"location":"reference/exchange/#lettrade.exchange","title":"exchange","text":""},{"location":"reference/exchange/base/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> base","text":""},{"location":"reference/exchange/base/#lettrade.exchange.base","title":"base","text":""},{"location":"reference/exchange/exchange/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> exchange","text":""},{"location":"reference/exchange/exchange/#lettrade.exchange.exchange","title":"exchange","text":""},{"location":"reference/exchange/exchange/#lettrade.exchange.exchange.Exchange","title":"Exchange","text":"<pre><code>Exchange()\n</code></pre>"},{"location":"reference/exchange/exchange/#lettrade.exchange.exchange.Exchange.next","title":"next","text":"<pre><code>next()\n</code></pre> <p>Call when new data feeded</p>"},{"location":"reference/exchange/exchange/#lettrade.exchange.exchange.Exchange.on_execute","title":"on_execute","text":"<pre><code>on_execute(execute: Execute, broadcast=True, **kwargs)\n</code></pre> <p>Receive Execute event from exchange then store and emit for Brain</p>"},{"location":"reference/exchange/exchange/#lettrade.exchange.exchange.Exchange.on_order","title":"on_order","text":"<pre><code>on_order(order: Order, broadcast=True, **kwargs)\n</code></pre> <p>Receive Order event from exchange then store and emit for Brain</p>"},{"location":"reference/exchange/exchange/#lettrade.exchange.exchange.Exchange.on_position","title":"on_position","text":"<pre><code>on_position(\n    position: Position, broadcast=True, *args, **kwargs\n)\n</code></pre> <p>Receive Position event from exchange then store and emit for Brain</p>"},{"location":"reference/exchange/exchange/#lettrade.exchange.exchange.Exchange.on_trade","title":"on_trade","text":"<pre><code>on_trade(trade: Trade, broadcast=True, *args, **kwargs)\n</code></pre> <p>Receive Trade event from exchange then store and emit for Brain</p>"},{"location":"reference/exchange/execute/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> execute","text":""},{"location":"reference/exchange/execute/#lettrade.exchange.execute","title":"execute","text":""},{"location":"reference/exchange/execute/#lettrade.exchange.execute.Execute","title":"Execute","text":"<pre><code>Execute(\n    id: str,\n    exchange: Exchange,\n    data: DataFeed,\n    size: float,\n    price: float,\n    at: float,\n    order_id: str = None,\n    order: Order = None,\n    trade_id: str = None,\n    trade: Trade = None,\n)\n</code></pre> <p>               Bases: <code>BaseTransaction</code></p> <p>Place new orders through <code>Strategy.buy()</code> and <code>Strategy.sell()</code>. Query existing orders through <code>Strategy.orders</code>.</p> <p>When an order is executed or filled, it results in a <code>Trade</code>.</p> <p>If you wish to modify aspects of a placed but not yet filled order, cancel it and place a new one instead.</p> <p>All placed orders are Good 'Til Canceled.</p>"},{"location":"reference/exchange/execute/#lettrade.exchange.execute.Execute.merge","title":"merge","text":"<pre><code>merge(other: Execute)\n</code></pre> <p>Merge to keep object handler but not overwrite for Strategy using when Strategy want to store object and object will be automatic update directly</p>"},{"location":"reference/exchange/order/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> order","text":""},{"location":"reference/exchange/order/#lettrade.exchange.order","title":"order","text":""},{"location":"reference/exchange/order/#lettrade.exchange.order.Order","title":"Order","text":"<pre><code>Order(\n    id: str,\n    exchange: Exchange,\n    data: DataFeed,\n    size: float,\n    state: OrderState = OrderState.Pending,\n    type: OrderType = OrderType.Market,\n    limit_price: Optional[float] = None,\n    stop_price: Optional[float] = None,\n    sl_price: Optional[float] = None,\n    tp_price: Optional[float] = None,\n    trade: Optional[Trade] = None,\n    tag: object = None,\n    open_at: int = None,\n    open_price: int = None,\n)\n</code></pre> <p>               Bases: <code>BaseTransaction</code></p>"},{"location":"reference/exchange/order/#lettrade.exchange.order.Order.is_long","title":"is_long  <code>property</code>","text":"<pre><code>is_long\n</code></pre> <p>True if the order is long (order size is positive).</p>"},{"location":"reference/exchange/order/#lettrade.exchange.order.Order.is_short","title":"is_short  <code>property</code>","text":"<pre><code>is_short\n</code></pre> <p>True if the order is short (order size is negative).</p>"},{"location":"reference/exchange/position/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> position","text":""},{"location":"reference/exchange/position/#lettrade.exchange.position","title":"position","text":""},{"location":"reference/exchange/position/#lettrade.exchange.position.Position","title":"Position","text":"<pre><code>Position(exchange: Exchange)\n</code></pre>"},{"location":"reference/exchange/position/#lettrade.exchange.position.Position.is_long","title":"is_long  <code>property</code>","text":"<pre><code>is_long: bool\n</code></pre> <p>True if the position is long (position size is positive).</p>"},{"location":"reference/exchange/position/#lettrade.exchange.position.Position.is_short","title":"is_short  <code>property</code>","text":"<pre><code>is_short: bool\n</code></pre> <p>True if the position is short (position size is negative).</p>"},{"location":"reference/exchange/position/#lettrade.exchange.position.Position.pl","title":"pl  <code>property</code>","text":"<pre><code>pl: float\n</code></pre> <p>Profit (positive) or loss (negative) of the current position in cash units.</p>"},{"location":"reference/exchange/position/#lettrade.exchange.position.Position.pl_pct","title":"pl_pct  <code>property</code>","text":"<pre><code>pl_pct: float\n</code></pre> <p>Profit (positive) or loss (negative) of the current position in percent.</p>"},{"location":"reference/exchange/position/#lettrade.exchange.position.Position.size","title":"size  <code>property</code>","text":"<pre><code>size: float\n</code></pre> <p>Position size in units of asset. Negative if position is short.</p>"},{"location":"reference/exchange/position/#lettrade.exchange.position.Position.close","title":"close","text":"<pre><code>close(portion: float = 1.0)\n</code></pre> <p>Close portion of position by closing <code>portion</code> of each active trade. See <code>Trade.close</code>.</p>"},{"location":"reference/exchange/trade/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> trade","text":""},{"location":"reference/exchange/trade/#lettrade.exchange.trade","title":"trade","text":""},{"location":"reference/exchange/trade/#lettrade.exchange.trade.Trade","title":"Trade","text":"<pre><code>Trade(\n    id: str,\n    exchange: Exchange,\n    data: DataFeed,\n    size: float,\n    parent: Order,\n    tag: object = \"\",\n    state: TradeState = TradeState.Open,\n    entry_price: Optional[float] = None,\n    entry_at: Optional[int] = None,\n    sl_order: Optional[Order] = None,\n    tp_order: Optional[Order] = None,\n)\n</code></pre> <p>               Bases: <code>BaseTransaction</code></p> <p>When an <code>Order</code> is filled, it results in an active <code>Trade</code>. Find active trades in <code>Strategy.trades</code> and closed, settled trades in <code>Strategy.closed_trades</code>.</p>"},{"location":"reference/exchange/trade/#lettrade.exchange.trade.Trade.is_exited","title":"is_exited  <code>property</code>","text":"<pre><code>is_exited\n</code></pre> <p>True if the trade is exited</p>"},{"location":"reference/exchange/trade/#lettrade.exchange.trade.Trade.is_long","title":"is_long  <code>property</code>","text":"<pre><code>is_long\n</code></pre> <p>True if the trade is long (trade size is positive).</p>"},{"location":"reference/exchange/trade/#lettrade.exchange.trade.Trade.is_short","title":"is_short  <code>property</code>","text":"<pre><code>is_short\n</code></pre> <p>True if the trade is short (trade size is negative).</p>"},{"location":"reference/exchange/backtest/","title":"Index","text":""},{"location":"reference/exchange/backtest/#lettrade.exchange.backtest","title":"backtest","text":""},{"location":"reference/exchange/backtest/account/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> account","text":""},{"location":"reference/exchange/backtest/account/#lettrade.exchange.backtest.account","title":"account","text":""},{"location":"reference/exchange/backtest/commander/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> commander","text":""},{"location":"reference/exchange/backtest/commander/#lettrade.exchange.backtest.commander","title":"commander","text":""},{"location":"reference/exchange/backtest/commander/#lettrade.exchange.backtest.commander.BackTestCommander","title":"BackTestCommander","text":"<pre><code>BackTestCommander()\n</code></pre> <p>               Bases: <code>Commander</code></p> <p>BackTest Commander to debug commander notify</p>"},{"location":"reference/exchange/backtest/commander/#lettrade.exchange.backtest.commander.BackTestCommander.init","title":"init","text":"<pre><code>init(\n    lettrade: LetTrade,\n    brain: Brain,\n    exchange: Exchange,\n    strategy: Strategy,\n)\n</code></pre> <p>Init commander dependencies</p> <p>Parameters:</p> <ul> <li> <code>lettrade</code>               (<code>LetTrade</code>)           \u2013            <p>LetTrade object</p> </li> <li> <code>brain</code>               (<code>Brain</code>)           \u2013            <p>Brain of bot</p> </li> <li> <code>exchange</code>               (<code>Exchange</code>)           \u2013            <p>Manage bot trading</p> </li> <li> <code>strategy</code>               (<code>Strategy</code>)           \u2013            <p>Strategy of bot</p> </li> </ul>"},{"location":"reference/exchange/backtest/exchange/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> exchange","text":""},{"location":"reference/exchange/backtest/exchange/#lettrade.exchange.backtest.exchange","title":"exchange","text":""},{"location":"reference/exchange/backtest/feeder/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> feeder","text":""},{"location":"reference/exchange/backtest/feeder/#lettrade.exchange.backtest.feeder","title":"feeder","text":""},{"location":"reference/exchange/backtest/feeder/#lettrade.exchange.backtest.feeder.BackTestDataFeeder","title":"BackTestDataFeeder","text":"<p>               Bases: <code>DataFeeder</code></p>"},{"location":"reference/exchange/backtest/feeder/#lettrade.exchange.backtest.feeder.BackTestDataFeeder.is_continous","title":"is_continous  <code>property</code>","text":"<pre><code>is_continous\n</code></pre> <p>Flag check is realtime continous datafeeder</p>"},{"location":"reference/exchange/backtest/trade/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> trade","text":""},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade","title":"trade","text":""},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestExecute","title":"BackTestExecute","text":"<pre><code>BackTestExecute(\n    id: str,\n    exchange: Exchange,\n    data: DataFeed,\n    size: float,\n    price: float,\n    at: float,\n    order_id: str = None,\n    order: Order = None,\n    trade_id: str = None,\n    trade: Trade = None,\n)\n</code></pre> <p>               Bases: <code>Execute</code></p> <p>Execute for BackTest</p>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestOrder","title":"BackTestOrder","text":"<pre><code>BackTestOrder(\n    id: str,\n    exchange: Exchange,\n    data: DataFeed,\n    size: float,\n    state: OrderState = OrderState.Pending,\n    type: OrderType = OrderType.Market,\n    limit_price: Optional[float] = None,\n    stop_price: Optional[float] = None,\n    sl_price: Optional[float] = None,\n    tp_price: Optional[float] = None,\n    trade: Optional[Trade] = None,\n    tag: object = None,\n    open_at: int = None,\n    open_price: int = None,\n)\n</code></pre> <p>               Bases: <code>Order</code></p>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestOrder.is_long","title":"is_long  <code>property</code>","text":"<pre><code>is_long\n</code></pre> <p>True if the order is long (order size is positive).</p>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestOrder.is_short","title":"is_short  <code>property</code>","text":"<pre><code>is_short\n</code></pre> <p>True if the order is short (order size is negative).</p>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestOrder.cancel","title":"cancel","text":"<pre><code>cancel()\n</code></pre> <p>Cancel the order.</p>"},{"location":"reference/exchange/backtest/data/","title":"Index","text":""},{"location":"reference/exchange/backtest/data/#lettrade.exchange.backtest.data","title":"data","text":""},{"location":"reference/exchange/backtest/data/data/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> data","text":""},{"location":"reference/exchange/backtest/data/data/#lettrade.exchange.backtest.data.data","title":"data","text":""},{"location":"reference/exchange/backtest/data/yfinance/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> yfinance","text":""},{"location":"reference/exchange/backtest/data/yfinance/#lettrade.exchange.backtest.data.yfinance","title":"yfinance","text":""},{"location":"reference/exchange/metatrader/","title":"Index","text":""},{"location":"reference/exchange/metatrader/#lettrade.exchange.metatrader","title":"metatrader","text":""},{"location":"reference/exchange/metatrader/account/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> account","text":""},{"location":"reference/exchange/metatrader/account/#lettrade.exchange.metatrader.account","title":"account","text":""},{"location":"reference/exchange/metatrader/api/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> api","text":""},{"location":"reference/exchange/metatrader/api/#lettrade.exchange.metatrader.api","title":"api","text":""},{"location":"reference/exchange/metatrader/data/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> data","text":""},{"location":"reference/exchange/metatrader/data/#lettrade.exchange.metatrader.data","title":"data","text":""},{"location":"reference/exchange/metatrader/exchange/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> exchange","text":""},{"location":"reference/exchange/metatrader/exchange/#lettrade.exchange.metatrader.exchange","title":"exchange","text":""},{"location":"reference/exchange/metatrader/feeder/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> feeder","text":""},{"location":"reference/exchange/metatrader/feeder/#lettrade.exchange.metatrader.feeder","title":"feeder","text":""},{"location":"reference/exchange/metatrader/feeder/#lettrade.exchange.metatrader.feeder.MetaTraderDataFeeder","title":"MetaTraderDataFeeder","text":"<pre><code>MetaTraderDataFeeder(api: MetaTraderAPI, tick: bool = 5)\n</code></pre> <p>               Bases: <code>DataFeeder</code></p> <pre><code>tick == 0: wait until new bar change value\ntick &gt; 0: sleep tick time (in seconds) then update\n</code></pre>"},{"location":"reference/exchange/metatrader/feeder/#lettrade.exchange.metatrader.feeder.MetaTraderDataFeeder.is_continous","title":"is_continous  <code>property</code>","text":"<pre><code>is_continous\n</code></pre> <p>Flag check is realtime continous datafeeder</p>"},{"location":"reference/exchange/metatrader/metatrader/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> metatrader","text":""},{"location":"reference/exchange/metatrader/metatrader/#lettrade.exchange.metatrader.metatrader","title":"metatrader","text":""},{"location":"reference/exchange/metatrader/trade/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> trade","text":""},{"location":"reference/exchange/metatrader/trade/#lettrade.exchange.metatrader.trade","title":"trade","text":""},{"location":"reference/exchange/metatrader/trade/#lettrade.exchange.metatrader.trade.MetaTraderExecute","title":"MetaTraderExecute","text":"<pre><code>MetaTraderExecute(\n    id: str,\n    exchange: MetaTraderExchange,\n    data: DataFeed,\n    size: float,\n    price: float,\n    at: float,\n    order_id: Optional[str] = None,\n    order: Optional[Order] = None,\n    trade_id: Optional[str] = None,\n    trade: Optional[Trade] = None,\n    tag: Optional[str] = \"\",\n    raw: Optional[object] = None,\n)\n</code></pre> <p>               Bases: <code>Execute</code></p> <p>Execute for MetaTrader</p>"},{"location":"reference/exchange/metatrader/trade/#lettrade.exchange.metatrader.trade.MetaTraderExecute.from_raw","title":"from_raw  <code>classmethod</code>","text":"<pre><code>from_raw(\n    raw, exchange: MetaTraderExchange\n) -&gt; MetaTraderExecute\n</code></pre> <p>Building new MetaTraderExecute from metatrader api deal object</p> <pre><code>Raw deal: TradeDeal(ticket=33889131, order=41290404, time=1715837856, time_msc=1715837856798, type=0, entry=0, magic=0, position_id=41290404, reason=0, volume=0.01, price=0.85795, commission=0.0, swap=0.0, profit=0.0, fee=0.0, symbol='EURGBP', comment='', external_id='')\n</code></pre>"},{"location":"reference/exchange/metatrader/trade/#lettrade.exchange.metatrader.trade.MetaTraderExecute.merge","title":"merge","text":"<pre><code>merge(other: Execute)\n</code></pre> <p>Merge to keep object handler but not overwrite for Strategy using when Strategy want to store object and object will be automatic update directly</p>"},{"location":"reference/indicator/","title":"Index","text":""},{"location":"reference/indicator/#lettrade.indicator","title":"indicator","text":""},{"location":"reference/indicator/function/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> function","text":""},{"location":"reference/indicator/function/#lettrade.indicator.function","title":"function","text":""},{"location":"reference/indicator/indicator/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> indicator","text":""},{"location":"reference/indicator/indicator/#lettrade.indicator.indicator","title":"indicator","text":""},{"location":"reference/plot/","title":"Index","text":""},{"location":"reference/plot/#lettrade.plot","title":"plot","text":""},{"location":"reference/plot/plot/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> plot","text":""},{"location":"reference/plot/plot/#lettrade.plot.plot","title":"plot","text":""},{"location":"reference/plot/plot/#lettrade.plot.plot.Plotter","title":"Plotter","text":"<pre><code>Plotter(\n    feeder: DataFeeder,\n    exchange: Exchange,\n    account: Account,\n    strategy: Strategy,\n)\n</code></pre> <p>Class help to plot <code>lettrade</code></p>"},{"location":"reference/plot/plot/#lettrade.plot.plot.Plotter.load","title":"load","text":"<pre><code>load()\n</code></pre> <p>Load plot config from <code>Strategy.plot()</code> and setup candlestick/equity</p>"},{"location":"reference/plot/plot/#lettrade.plot.plot.Plotter.plot","title":"plot","text":"<pre><code>plot(**kwargs)\n</code></pre> <p>Plot <code>equity</code>, <code>orders</code>, and <code>trades</code> then show</p>"},{"location":"reference/plot/plot/#lettrade.plot.plot.Plotter.stop","title":"stop","text":"<pre><code>stop()\n</code></pre> <p>stop plotter</p>"},{"location":"reference/stats/","title":"Index","text":""},{"location":"reference/stats/#lettrade.stats","title":"stats","text":""},{"location":"reference/stats/stats/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> stats","text":""},{"location":"reference/stats/stats/#lettrade.stats.stats","title":"stats","text":""},{"location":"reference/stats/stats/#lettrade.stats.stats.Statistic","title":"Statistic","text":"<pre><code>Statistic(\n    feeder: DataFeeder,\n    exchange: Exchange,\n    strategy: Strategy,\n)\n</code></pre> <p>Compute strategy result</p>"},{"location":"reference/stats/stats/#lettrade.stats.stats.Statistic.compute","title":"compute","text":"<pre><code>compute()\n</code></pre> <p>Calculate strategy report</p>"},{"location":"reference/stats/stats/#lettrade.stats.stats.Statistic.show","title":"show","text":"<pre><code>show()\n</code></pre> <p>Show statistic report</p>"},{"location":"reference/strategy/","title":"Index","text":""},{"location":"reference/strategy/#lettrade.strategy","title":"strategy","text":""},{"location":"reference/strategy/strategy/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> strategy","text":""},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy","title":"strategy","text":""},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy","title":"Strategy","text":"<pre><code>Strategy(\n    feeder: DataFeeder,\n    exchange: Exchange,\n    account: Account,\n    commander: Commander,\n    is_optimize: bool = False,\n)\n</code></pre> <p>               Bases: <code>ABC</code></p> <p>Base class to implement a strategy</p> <p>Parameters:</p> <ul> <li> <code>feeder</code>               (<code>DataFeeder</code>)           \u2013            <p>The DataFeeder class.</p> </li> <li> <code>exchange</code>               (<code>Exchange</code>)           \u2013            <p>The Exchange class.</p> </li> <li> <code>account</code>               (<code>Account</code>)           \u2013            <p>The Account class.</p> </li> <li> <code>commander</code>               (<code>Commander</code>)           \u2013            <p>The Commander class.</p> </li> <li> <code>is_optimize</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Flag is running inside an optimize process</p> </li> </ul>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.buy","title":"buy","text":"<pre><code>buy(\n    size: Optional[float] = None,\n    limit: Optional[float] = None,\n    stop: Optional[float] = None,\n    sl: Optional[float] = None,\n    tp: Optional[float] = None,\n    tag: object = None,\n    **kwargs\n) -&gt; OrderResult\n</code></pre> <p>Place a new long order. For explanation of parameters, see <code>Order</code> and its properties.</p>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.indicators","title":"indicators","text":"<pre><code>indicators()\n</code></pre> <p>All indicator and signal should implement here to cacheable. Because of lettrade will cache/pre-load DataFeeds</p>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.sell","title":"sell","text":"<pre><code>sell(\n    size: Optional[float] = None,\n    limit: Optional[float] = None,\n    stop: Optional[float] = None,\n    sl: Optional[float] = None,\n    tp: Optional[float] = None,\n    tag: object = None,\n    **kwargs\n) -&gt; OrderResult\n</code></pre> <p>Place a new short order. For explanation of parameters, see <code>Order</code> and its properties.</p>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.start","title":"start","text":"<pre><code>start(df: DataFeed)\n</code></pre> <p>start function will called before first next() is called</p>"},{"location":"reference/utils/","title":"Index","text":""},{"location":"reference/utils/#lettrade.utils","title":"utils","text":""},{"location":"reference/utils/docs/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> docs","text":""},{"location":"reference/utils/docs/#lettrade.utils.docs","title":"docs","text":""}]}