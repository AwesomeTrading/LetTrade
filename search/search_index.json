{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"LetTrade","text":"<p>A lightweight trading framework compatible with Stock, Forex, Crypto... markets</p> <p>Find more at Documentation</p>"},{"location":"#installation","title":"Installation","text":"<p>[!WARNING] LetTrade is under heavy construction, features and functions may be changed.</p> <p>Using Developing version to get latest update.</p> <p>Stable version</p> <pre><code>pip install lettrade[all]\n</code></pre> <p>Developing version</p> <pre><code>pip install 'lettrade[all] @ git+https://git@github.com/AwesomeTrading/LetTrade.git@main'\n</code></pre>"},{"location":"#example","title":"Example","text":"<pre><code>import talib.abstract as ta\n\nfrom lettrade import indicator as i\nfrom lettrade.all import DataFeed, ForexBackTestAccount, Strategy, let_backtest\n\n\nclass SmaCross(Strategy):\n    ema1_window = 9\n    ema2_window = 21\n\n    def indicators(self, df: DataFeed):\n        df[\"ema1\"] = ta.EMA(df, timeperiod=self.ema1_window)\n        df.i.ema(name=\"ema2\", window=self.ema2_window, inplace=True, plot=True)\n\n        df[\"crossover\"] = i.crossover(df.ema1, df.ema2)\n        df.i.crossunder(\"ema1\", \"ema2\", inplace=True, plot=True)\n\n    def next(self, df: DataFeed):\n        if df.l.crossover[-1]:\n            self.positions_exit()\n            self.buy(size=0.1)\n        elif df.l.crossunder[-1]:\n            self.positions_exit()\n            self.sell(size=0.1)\n\n    def plot(self, config: dict, df: DataFeed) -&gt; dict:\n        from lettrade.plot.plotly import PlotColor, plot_line, plot_mark, plot_merge\n\n        plot_ema1 = plot_line(df[\"ema1\"], dataframe=df, color=\"green\")\n        plot_crossover = plot_mark(\n            df[\"close\"],\n            filter=df[\"crossover\"] &gt;= 100,\n            dataframe=df,\n            name=\"crossover\",\n            color=PlotColor.BLUE,\n        )\n        return plot_merge(config, plot_ema1, plot_crossover)\n\n\nif __name__ == \"__main__\":\n    lt = let_backtest(\n        strategy=SmaCross,\n        datas=\"example/data/data/EURUSD_5m-0_1000.csv\",\n        account=ForexBackTestAccount,\n    )\n\n    lt.run()\n    lt.plot()\n</code></pre> <pre><code># Strategy                &lt;class '__main__.SmaCross'&gt;\nStart                       2024-05-13 21:15:00+00:00\nEnd                         2024-05-17 08:30:00+00:00\nDuration                              3 days 11:15:00\nStart Balance                                  1000.0\nEquity [$]                                    1003.16\nEquity Peak [$]                               1013.54\nPL [$]                                           3.16\nPL [%]                                           0.32\nBuy &amp; Hold PL [%]                                0.63\nMax. Drawdown [%]                               -4.98\nAvg. Drawdown [%]                                -1.5\nMax. Drawdown Duration                1 days 16:15:00\nAvg. Drawdown Duration                0 days 12:30:00\n\n# Positions                                        34\nWin Rate [%]                                     0.38\nFee [$]                                         -1.34\nBest Trade [%]                                  29.36\nWorst Trade [%]                                -18.14\nSQN                                              0.07\nKelly Criterion                               0.01392\nProfit Factor                                1.037781\n</code></pre>"},{"location":"#start-a-strategy","title":"Start a strategy","text":"<p>More examples can be found in <code>example/</code></p>"},{"location":"#download-data","title":"Download data","text":"<pre><code>python -m example.data.yfinance\n</code></pre>"},{"location":"#backtest-strategy","title":"Backtest strategy","text":"<pre><code>python -m example.strategy.backtest_sma_cross\n</code></pre>"},{"location":"#live-trading","title":"Live Trading","text":""},{"location":"#official","title":"Official","text":"<ul> <li><code>MetaTrader</code>: Support MetaTrader 5 Terminal trading</li> <li><code>CCXT</code>: [WIP] Support most of cryptocurrency exchange from CCXT library</li> </ul>"},{"location":"#development","title":"Development","text":"<p>Set up conda environment</p> <pre><code>conda create -y -n LetTrade python=3.12\nconda activate LetTrade\npip install -r requirements-dev.txt\n</code></pre>"},{"location":"dev/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p>"},{"location":"dev/#development","title":"Development","text":"<p>Guide for developer to install <code>lettrade</code></p>"},{"location":"dev/#environment-setup","title":"Environment setup","text":"<p>Set up conda environment</p> <pre><code>conda create -y -n LetTrade python=3.12\nconda activate LetTrade\npip install -r requirements-dev.txt\n</code></pre>"},{"location":"dev/#document","title":"Document","text":"<p>Building <code>lettrade</code> document guide</p>"},{"location":"dev/#dependencies","title":"Dependencies","text":"<p>Install <code>lettrade</code> as module</p> <pre><code>pip install .\n</code></pre> <p>Install python document requirements</p> <pre><code>pip install -r docs/requirements-docs.txt\n</code></pre>"},{"location":"dev/#view-document","title":"View document","text":"<p>Start mkdocs local server</p> <pre><code>mkdocs serve\n</code></pre>"},{"location":"docker/","title":"Docker","text":""},{"location":"docker/#build","title":"Build","text":"<p>Build new <code>lettrade/lettrade:stable</code> runtime image</p> <pre><code>docker compose build\n</code></pre>"},{"location":"docker/#start","title":"Start","text":"<p>Start docker from <code>lettrade/lettrade:stable</code> runtime image</p> <pre><code>docker compose up\n</code></pre>"},{"location":"indicator/1.talib/","title":"TA-Lib","text":"<p>Home | Indicators</p>"},{"location":"indicator/1.talib/#installation","title":"Installation","text":""},{"location":"indicator/1.talib/#build-from-source","title":"Build from source","text":"<p>Download ta-lib from github ta-lib-0.4.0-src.tar.gz</p> <pre><code>tar zxvf ta-lib-0.4.0-src.tar.gz\ncd ta-lib\n./configure --prefix=/usr\nmake\nsudo make install\n</code></pre> <p>Full install tutorial from TA-Lib</p>"},{"location":"indicator/1.talib/#conda-forge","title":"Conda-Forge","text":"<pre><code>conda install -c conda-forge ta-lib\n</code></pre>"},{"location":"indicator/1.talib/#python-library","title":"Python library","text":"<pre><code>pip install TA-Lib\n</code></pre>"},{"location":"indicator/1.talib/#example","title":"Example","text":"<pre><code>import talib.abstract as ta\n\nfrom lettrade import DataFeed, Strategy\nfrom lettrade import indicator as i\nfrom lettrade.exchange.backtest import ForexBackTestAccount, let_backtest\n\n\nclass SmaCross(Strategy):\n    ema1_window = 9\n    ema2_window = 21\n\n    def indicators(self, df: DataFeed):\n        df[\"ema1\"] = ta.EMA(df, timeperiod=self.ema1_window)\n        df[\"ema2\"] = ta.EMA(df, timeperiod=self.ema2_window)\n\n        df[\"signal_ema_crossover\"] = i.crossover(df.ema1, df.ema2)\n        df[\"signal_ema_crossunder\"] = i.crossunder(df.ema1, df.ema2)\n\n    def next(self, df: DataFeed):\n        if len(self.orders) &gt; 0 or len(self.positions) &gt; 0:\n            return\n\n        if df.l.signal_ema_crossover[-1]:\n            price = df.l.close[-1]\n            self.buy(size=0.1, sl=price - 0.01, tp=price + 0.01)\n        elif df.l.signal_ema_crossunder[-1]:\n            price = df.l.close[-1]\n            self.sell(size=0.1, sl=price + 0.01, tp=price - 0.01)\n\n    def plot(self, config: dict, df: DataFeed):\n        from lettrade.plot.plotly import PlotColor, plot_line, plot_merge\n\n        plot_ema1 = plot_line(df[\"ema1\"], color=PlotColor.AMBER)\n        plot_ema2 = plot_line(df[\"ema2\"], color=PlotColor.CYAN)\n        return plot_merge(config, plot_ema1, plot_ema2)\n\n\nif __name__ == \"__main__\":\n    lt = let_backtest(\n        strategy=SmaCross,\n        datas=\"example/data/data/EURUSD_5m-0_1000.csv\",\n        account=ForexBackTestAccount,\n    )\n\n    lt.run()\n    lt.plot()\n</code></pre>"},{"location":"indicator/2.freqtrade_technical/","title":"Freqtrade Technical","text":"<p>Home</p>"},{"location":"indicator/2.freqtrade_technical/#installation","title":"Installation","text":"<pre><code>pip install technical\n</code></pre>"},{"location":"indicator/2.freqtrade_technical/#examples","title":"Examples","text":"<pre><code>from technical.indicators import ema\n\nfrom lettrade import DataFeed, Strategy\nfrom lettrade import indicator as i\nfrom lettrade.exchange.backtest import ForexBackTestAccount, let_backtest\n\n\nclass SmaCross(Strategy):\n    ema1_window = 9\n    ema2_window = 21\n\n    def indicators(self, df: DataFeed):\n        df[\"ema1\"] = ema(df, period=self.ema1_window)\n        df[\"ema2\"] = ema(df, period=self.ema2_window)\n\n        df[\"signal_ema_crossover\"] = i.crossover(df.ema1, df.ema2)\n        df[\"signal_ema_crossunder\"] = i.crossunder(df.ema1, df.ema2)\n\n    def next(self, df: DataFeed):\n        if len(self.orders) &gt; 0 or len(self.positions) &gt; 0:\n            return\n\n        if df.l.signal_ema_crossover[-1]:\n            price = df.l.close[-1]\n            self.buy(size=0.1, sl=price - 0.01, tp=price + 0.01)\n        elif df.l.signal_ema_crossunder[-1]:\n            price = df.l.close[-1]\n            self.sell(size=0.1, sl=price + 0.01, tp=price - 0.01)\n\n    def plot(self, config: dict, df: DataFeed):\n        from lettrade.plot.plotly import PlotColor, plot_line, plot_merge\n\n        plot_ema1 = plot_line(df[\"ema1\"], color=PlotColor.AMBER)\n        plot_ema2 = plot_line(df[\"ema2\"], color=PlotColor.CYAN)\n        return plot_merge(config, plot_ema1, plot_ema2)\n\n\nif __name__ == \"__main__\":\n    lt = let_backtest(\n        strategy=SmaCross,\n        datas=\"example/data/data/EURUSD_5m-0_1000.csv\",\n        account=ForexBackTestAccount,\n    )\n\n    lt.run()\n    lt.plot()\n</code></pre>"},{"location":"indicator/3.pandas_ta/","title":"Pandas-TA","text":"<p>Home | Indicators</p>"},{"location":"indicator/3.pandas_ta/#installation","title":"Installation","text":"<pre><code>pip install pandas_ta\n</code></pre>"},{"location":"indicator/3.pandas_ta/#examples","title":"Examples","text":"<pre><code>import pandas_ta as ta\n\nfrom lettrade import DataFeed, Strategy\nfrom lettrade import indicator as i\nfrom lettrade.exchange.backtest import ForexBackTestAccount, let_backtest\n\n\nclass SmaCross(Strategy):\n    ema1_window = 9\n    ema2_window = 21\n\n    def indicators(self, df: DataFeed):\n        df[\"ema1\"] = ta.ema(df.close, length=self.ema1_window)\n        df[\"ema2\"] = ta.ema(df.close, length=self.ema2_window)\n\n        df[\"signal_ema_crossover\"] = i.crossover(df.ema1, df.ema2)\n        df[\"signal_ema_crossunder\"] = i.crossunder(df.ema1, df.ema2)\n\n    def next(self, df: DataFeed):\n        if len(self.orders) &gt; 0 or len(self.positions) &gt; 0:\n            return\n\n        if df.l.signal_ema_crossover[-1]:\n            price = df.l.close[-1]\n            self.buy(size=0.1, sl=price - 0.01, tp=price + 0.01)\n        elif df.l.signal_ema_crossunder[-1]:\n            price = df.l.close[-1]\n            self.sell(size=0.1, sl=price + 0.01, tp=price - 0.01)\n\n    def plot(self, config: dict, df: DataFeed):\n        from lettrade.plot.plotly import PlotColor, plot_line, plot_merge\n\n        plot_ema1 = plot_line(df[\"ema1\"], color=PlotColor.AMBER)\n        plot_ema2 = plot_line(df[\"ema2\"], color=PlotColor.CYAN)\n        return plot_merge(config, plot_ema1, plot_ema2)\n\n\nif __name__ == \"__main__\":\n    lt = let_backtest(\n        strategy=SmaCross,\n        datas=\"example/data/data/EURUSD_5m-0_1000.csv\",\n        account=ForexBackTestAccount,\n    )\n\n    lt.run()\n    lt.plot()\n</code></pre>"},{"location":"indicator/9.bukosabino_ta/","title":"Bukosabino Technical Analysis","text":"<p>Home | Indicators</p>"},{"location":"indicator/9.bukosabino_ta/#installation","title":"Installation","text":"<pre><code>pip install --upgrade ta\n</code></pre>"},{"location":"indicator/9.bukosabino_ta/#examples","title":"Examples","text":"<pre><code>from ta.trend import EMAIndicator\n\nfrom lettrade import DataFeed, Strategy\nfrom lettrade import indicator as i\nfrom lettrade.exchange.backtest import ForexBackTestAccount, let_backtest\n\n\nclass SmaCross(Strategy):\n    ema1_window = 9\n    ema2_window = 21\n\n    def indicators(self, df: DataFeed):\n        df[\"ema1\"] = EMAIndicator(df.close, window=self.ema1_window).ema_indicator()\n        df[\"ema2\"] = EMAIndicator(df.close, window=self.ema2_window).ema_indicator()\n\n        df[\"signal_ema_crossover\"] = i.crossover(df.ema1, df.ema2)\n        df[\"signal_ema_crossunder\"] = i.crossunder(df.ema1, df.ema2)\n\n    def next(self, df: DataFeed):\n        if len(self.orders) &gt; 0 or len(self.positions) &gt; 0:\n            return\n\n        if df.l.signal_ema_crossover[-1]:\n            price = df.l.close[-1]\n            self.buy(size=0.1, sl=price - 0.01, tp=price + 0.01)\n        elif df.l.signal_ema_crossunder[-1]:\n            price = df.l.close[-1]\n            self.sell(size=0.1, sl=price + 0.01, tp=price - 0.01)\n\n    def plot(self, config: dict, df: DataFeed):\n        from lettrade.plot.plotly import PlotColor, plot_line, plot_merge\n\n        plot_ema1 = plot_line(df[\"ema1\"], color=PlotColor.AMBER)\n        plot_ema2 = plot_line(df[\"ema2\"], color=PlotColor.CYAN)\n        return plot_merge(plot_ema1, plot_ema2)\n\n\nif __name__ == \"__main__\":\n    lt = let_backtest(\n        strategy=SmaCross,\n        datas=\"example/data/data/EURUSD_5m-0_1000.csv\",\n        account=ForexBackTestAccount,\n    )\n\n    lt.run()\n    lt.plot()\n</code></pre>"},{"location":"indicator/lettrade/","title":"LetTrade indicators","text":""},{"location":"indicator/lettrade/#installation","title":"Installation","text":"<p>LetTrade indicator requires TA-Lib</p>"},{"location":"indicator/lettrade/#example","title":"Example","text":"<pre><code>from lettrade import DataFeed, Strategy\nfrom lettrade.exchange.backtest import ForexBackTestAccount, let_backtest\n\n\nclass SmaCross(Strategy):\n    ema1_window = 9\n    ema2_window = 21\n\n    def indicators(self, df: DataFeed):\n        df[\"ema1\"] = df.i.ema(window=self.ema1_window)\n        df[\"ema2\"] = df.i.ema(window=self.ema2_window)\n\n        df[\"signal_ema_crossover\"] = df.i.crossover(df.ema1, df.ema2)\n        df[\"signal_ema_crossunder\"] = df.i.crossunder(df.ema1, df.ema2)\n\n    def next(self, df: DataFeed):\n        if len(self.orders) &gt; 0 or len(self.positions) &gt; 0:\n            return\n\n        if df.l.signal_ema_crossover[-1]:\n            price = df.l.close[-1]\n            self.buy(size=0.1, sl=price - 0.01, tp=price + 0.01)\n        elif df.l.signal_ema_crossunder[-1]:\n            price = df.l.close[-1]\n            self.sell(size=0.1, sl=price + 0.01, tp=price - 0.01)\n\n    def plot(self, config: dict, df: DataFeed):\n        from lettrade.plot.plotly import PlotColor, plot_line, plot_merge\n\n        plot_ema1 = plot_line(df[\"ema1\"], color=PlotColor.AMBER)\n        plot_ema2 = plot_line(df[\"ema2\"], color=PlotColor.CYAN)\n        return plot_merge(config, plot_ema1, plot_ema2)\n\n\nif __name__ == \"__main__\":\n    lt = let_backtest(\n        strategy=SmaCross,\n        datas=\"example/data/data/EURUSD_5m-0_1000.csv\",\n        account=ForexBackTestAccount,\n    )\n\n    lt.run()\n    lt.plot()\n</code></pre>"},{"location":"indicator/vendor/1.qtpylib/","title":"QTPyLib","text":"<p>Home | Indicator | FreqTrade</p>"},{"location":"indicator/vendor/1.qtpylib/#example-1","title":"Example 1","text":"<p>Call QTPyLib indicator</p> <pre><code>from lettrade import DataFeed, Strategy\nfrom lettrade import indicator as i\nfrom lettrade.exchange.backtest import ForexBackTestAccount, let_backtest\nfrom lettrade.indicator.vendor.qtpylib import ema\n\n\nclass SmaCross(Strategy):\n    ema1_window = 9\n    ema2_window = 21\n\n    def indicators(self, df: DataFeed):\n        # QTPyLib function call\n        df[\"ema1\"] = ema(df.close, window=self.ema1_window)\n        df[\"ema2\"] = ema(df.close, window=self.ema2_window)\n\n        df[\"signal_ema_crossover\"] = i.crossover(df.ema1, df.ema2)\n        df[\"signal_ema_crossunder\"] = i.crossunder(df.ema1, df.ema2)\n\n    def next(self, df: DataFeed):\n        if len(self.orders) &gt; 0 or len(self.positions) &gt; 0:\n            return\n\n        if df.l.signal_ema_crossover[-1]:\n            price = df.l.close[-1]\n            self.buy(size=0.1, sl=price - 0.01, tp=price + 0.01)\n        elif df.l.signal_ema_crossunder[-1]:\n            price = df.l.close[-1]\n            self.sell(size=0.1, sl=price + 0.01, tp=price - 0.01)\n\n    def plot(self, config: dict, df: DataFeed):\n        from lettrade.plot.plotly import PlotColor, plot_line, plot_merge\n\n        plot_ema1 = plot_line(df[\"ema1\"], color=PlotColor.AMBER)\n        plot_ema2 = plot_line(df[\"ema2\"], color=PlotColor.CYAN)\n        return plot_merge(config, plot_ema1, plot_ema2)\n\n\nif __name__ == \"__main__\":\n    lt = let_backtest(\n        strategy=SmaCross,\n        datas=\"example/data/data/EURUSD_5m-0_1000.csv\",\n        account=ForexBackTestAccount,\n    )\n\n    lt.run()\n    lt.plot()\n</code></pre>"},{"location":"indicator/vendor/1.qtpylib/#example-2","title":"Example 2","text":"<p>Inject QTPyLib to Pandas.DataFrame</p> <pre><code>from lettrade import DataFeed, Strategy\nfrom lettrade import indicator as i\nfrom lettrade.exchange.backtest import ForexBackTestAccount, let_backtest\nfrom lettrade.indicator.vendor.qtpylib import inject_indicators\n\n# Inject QTPyLib\ninject_indicators()\n\n\nclass SmaCross(Strategy):\n    ema1_window = 9\n    ema2_window = 21\n\n    def indicators(self, df: DataFeed):\n        # QTPyLib injected function call\n        df[\"ema1\"] = df.close.ema(window=self.ema1_window)\n        df[\"ema2\"] = df.close.ema(window=self.ema2_window)\n\n        df[\"signal_ema_crossover\"] = i.crossover(df.ema1, df.ema2)\n        df[\"signal_ema_crossunder\"] = i.crossunder(df.ema1, df.ema2)\n\n    def next(self, df: DataFeed):\n        if len(self.orders) &gt; 0 or len(self.positions) &gt; 0:\n            return\n\n        if df.l.signal_ema_crossover[-1]:\n            price = df.l.close[-1]\n            self.buy(size=0.1, sl=price - 0.01, tp=price + 0.01)\n        elif df.l.signal_ema_crossunder[-1]:\n            price = df.l.close[-1]\n            self.sell(size=0.1, sl=price + 0.01, tp=price - 0.01)\n\n    def plot(self, config: dict, df: DataFeed):\n        from lettrade.plot.plotly import PlotColor, plot_line, plot_merge\n\n        plot_ema1 = plot_line(df[\"ema1\"], color=PlotColor.AMBER)\n        plot_ema2 = plot_line(df[\"ema2\"], color=PlotColor.CYAN)\n        return plot_merge(config, plot_ema1, plot_ema2)\n\n\nif __name__ == \"__main__\":\n    lt = let_backtest(\n        strategy=SmaCross,\n        datas=\"example/data/data/EURUSD_5m-0_1000.csv\",\n        account=ForexBackTestAccount,\n    )\n\n    lt.run()\n    lt.plot()\n</code></pre>"},{"location":"install/","title":"LetTrade install","text":"<p>Guide to quick install <code>lettrade</code></p>"},{"location":"install/#installation","title":"Installation","text":"<p>Stable version</p> <pre><code>pip install lettrade[all]\n</code></pre> <p>Developing version</p> <pre><code>pip install 'lettrade[all] @ git+https://git@github.com/AwesomeTrading/LetTrade.git@main'\n</code></pre>"},{"location":"install/metatrader/","title":"MetaTrader 5 Install","text":"<p><code>MetaTrader 5</code> is exchange server of module MetaTrader</p>"},{"location":"install/metatrader/#ubuntu","title":"Ubuntu","text":""},{"location":"install/metatrader/#wine","title":"Wine","text":"<pre><code>wget https://download.mql5.com/cdn/web/metaquotes.software.corp/mt5/mt5ubuntu.sh ; chmod +x mt5ubuntu.sh ; ./mt5ubuntu.sh\n</code></pre>"},{"location":"install/metatrader/#python","title":"Python","text":"<pre><code>wget https://www.python.org/ftp/python/3.10.11/python-3.10.11.exe\n\nexport WINEPREFIX=$HOME/.mt5\nwine python-3.10.11.exe\n</code></pre>"},{"location":"install/metatrader/#python-requirements","title":"Python requirements","text":"<pre><code>export WINEPREFIX=$HOME/.mt5\n\ncd $HOME/.mt5/dosdevices/c:/users/$USER/AppData/Local/Programs/Python/Python310-32/\n\nwine python.exe -m pip install --upgrade pip\nwine python.exe -m pip install MetaTrader5\nwine python.exe -m pip install https://github.com/AwesomeTrading/mt5linux/archive/master.zip\n</code></pre>"},{"location":"install/metatrader/#start-server","title":"Start Server","text":"<pre><code>export WINEPREFIX=$HOME/.mt5\n\npython -m mt5linux \"$HOME/.mt5/dosdevices/c:/users/$USER/AppData/Local/Programs/Python/Python310-32/python.exe\"\n</code></pre>"},{"location":"install/metatrader/#metatrader-terminal","title":"MetaTrader Terminal","text":""},{"location":"install/metatrader/#load-broker-information","title":"Load broker information","text":"<p>Load broker information before start by steps:</p> <ul> <li><code>File</code> menu</li> <li><code>Open an Account</code> action</li> <li>Search your broker (ex: <code>Tickmill</code>, <code>Roboforex</code>...)</li> <li><code>Enter</code> to load</li> <li><code>Cancel</code> (Done)</li> </ul>"},{"location":"install/metatrader/#enable-automatic-algo-trading","title":"Enable Automatic Algo Trading","text":"<ul> <li><code>Tools</code> menu</li> <li><code>Options</code> menu</li> <li><code>Expert Advisors</code> tab</li> <li><code>Allow Auto Trading</code> checkbox</li> <li>Uncheck <code>Disable automated trading when switching accounts</code> and <code>Disable automated trading when switching profiles</code></li> </ul>"},{"location":"live/ccxt/","title":"CCXT exchange","text":""},{"location":"live/ccxt/#installation","title":"Installation","text":"<pre><code>pip install lettrade[exchange-ccxt]\n</code></pre>"},{"location":"live/ccxt/#default-config","title":"Default config","text":"<p>Example <code>.env</code> file</p> <pre><code>CCXT_EXCHANGE=binance\nCCXT_VERBOSE=false\nCCXT_TYPE=spot\nCCXT_KEY=___YOUR_KEY___\nCCXT_SECRET=___YOUR_SECRET___\n</code></pre> <pre><code>from lettrade.exchange.ccxt import let_ccxt\n\nlt = let_ccxt(\n    strategy=SmaCross,\n    datas=[(\"BTC/USD\", \"1m\", \"BTCUSD_1m\")],\n    ccxt_exchange=os.getenv(\"CCXT_EXCHANGE\"),\n    ccxt_type=os.getenv(\"CCXT_TYPE\"),\n    ccxt_key=os.getenv(\"CCXT_KEY\"),\n    ccxt_secret=os.getenv(\"CCXT_SECRET\"),\n    ccxt_verbose=os.getenv(\"CCXT_VERBOSE\", \"\").lower() in [\"true\", \"1\"],\n)\n</code></pre>"},{"location":"live/ccxt/#example","title":"Example","text":"<pre><code>import logging\nimport os\n\nimport pandas as pd\nfrom dotenv import load_dotenv\n\nimport example.logger\nfrom lettrade import DataFeed, Strategy\nfrom lettrade.exchange.ccxt import let_ccxt\n\nload_dotenv()\n\nlogger = logging.getLogger(__name__)\n\n\nclass SmaCross(Strategy):\n    ema1_window = 9\n    ema2_window = 21\n    _now: pd.Timestamp\n\n    def indicators(self, df: DataFeed):\n        df[\"ema1\"] = df.i.ema(window=self.ema1_window)\n        df[\"ema2\"] = df.i.ema(window=self.ema2_window)\n\n        df[\"signal_ema_crossover\"] = df.i.crossover(df.ema1, df.ema2)\n        df[\"signal_ema_crossunder\"] = df.i.crossunder(df.ema1, df.ema2)\n\n    def start(self, df: DataFeed):\n        if self.is_live:\n            self._now = df.now\n\n    def next(self, df: DataFeed):\n        if self.is_live:\n            # Filter start of new bar\n            if self._now == df.now:\n                return\n\n            self._now = df.now\n            logger.info(\"New bar: %s\", self._now)\n\n        if len(self.orders) &gt; 0 or len(self.positions) &gt; 0:\n            return\n\n        if df.l.signal_ema_crossover[-1]:\n            price = self.data.l.close[-1]\n            self.buy(size=0.1, sl=price - 1000, tp=price + 1000)\n        elif df.l.signal_ema_crossunder[-1]:\n            price = self.data.l.close[-1]\n            self.sell(size=0.1, sl=price + 1000, tp=price - 1000)\n\n    def stop(self, df: DataFeed):\n        print(df)\n        print(self.orders)\n\n    def plot(self, config: dict, df: DataFeed):\n        return dict(\n            scatters=[\n                dict(\n                    x=df.index,\n                    y=df[\"ema1\"],\n                    line=dict(color=\"blue\", width=1),\n                    name=\"ema1\",\n                ),\n                dict(\n                    x=df.index,\n                    y=df[\"ema2\"],\n                    line=dict(color=\"green\", width=1),\n                    name=\"ema2\",\n                ),\n            ]\n        )\n\n\nif __name__ == \"__main__\":\n    lt = let_ccxt(\n        strategy=SmaCross,\n        datas=[(\"BTC/USD\", \"1m\", \"BTCUSD_1m\")],\n        ccxt_exchange=os.getenv(\"CCXT_EXCHANGE\"),\n        ccxt_type=os.getenv(\"CCXT_TYPE\"),\n        ccxt_key=os.getenv(\"CCXT_KEY\"),\n        ccxt_secret=os.getenv(\"CCXT_SECRET\"),\n        ccxt_verbose=os.getenv(\"CCXT_VERBOSE\", \"\").lower() in [\"true\", \"1\"],\n    )\n\n    lt.run()\n    # lt.plot()\n</code></pre>"},{"location":"live/metatrader/","title":"MetaTrader exchange","text":""},{"location":"live/metatrader/#installation","title":"Installation","text":"<pre><code>pip install lettrade[exchange-metatrader]\n</code></pre>"},{"location":"live/metatrader/#default-config","title":"Default config","text":"<p>Example <code>.env</code> file</p> <pre><code>MT5_LOGIN=123123123\nMT5_PASSWORD=qweqweqwe\nMT5_SERVER=RoboForex-Demo\nMT5_WINE=WINEPREFIX=$HOME/.mt5 python -m mt5linux \"$HOME/.mt5/dosdevices/c:/users/$USER/AppData/Local/Programs/Python/Python310-32/python.exe\"\n</code></pre> <pre><code>from lettrade.exchange.metatrader import let_metatrader\n\n\nlt = let_metatrader(\n    strategy=SmaCross,\n    datas=[(\"EURUSD\", \"1m\")],\n    mt5_login=int(os.environ[\"MT5_LOGIN\"]),\n    mt5_password=os.environ[\"MT5_PASSWORD\"],\n    mt5_server=os.environ[\"MT5_SERVER\"],\n    mt5_wine=os.getenv(\"MT5_WINE\", None),\n)\n</code></pre>"},{"location":"live/metatrader/#example","title":"Example","text":"<pre><code>import os\n\nimport talib.abstract as ta\nfrom dotenv import load_dotenv\n\nimport example.logger\nfrom lettrade import DataFeed, Strategy\nfrom lettrade.exchange.metatrader import let_metatrader\n\nload_dotenv()\n\n\nclass SmaCross(Strategy):\n    ema1_window = 9\n    ema2_window = 21\n\n    def indicators(self, df: DataFeed):\n        df[\"ema1\"] = ta.EMA(df, timeperiod=self.ema1_window)\n        df[\"ema2\"] = ta.EMA(df, timeperiod=self.ema2_window)\n\n        df[\"signal_ema_crossover\"] = df.i.crossover(df.ema1, df.ema2)\n        df[\"signal_ema_crossunder\"] = df.i.crossunder(df.ema1, df.ema2)\n        return df\n\n    def next(self, df: DataFeed):\n        if len(self.orders) &gt; 0 or len(self.positions) &gt; 0:\n            return\n\n        if df.l.signal_ema_crossover[-1]:\n            price = self.data.l.close[-1]\n            self.buy(size=0.1, sl=price - 0.01, tp=price + 0.01)\n        elif df.l.signal_ema_crossunder[-1]:\n            price = self.data.l.close[-1]\n            self.sell(size=0.1, sl=price + 0.01, tp=price - 0.01)\n\n    # def on_transaction(self, transaction):\n    #     print(\"Transaction\", transaction)\n\n    def stop(self, df: DataFeed):\n        print(df)\n        print(self.orders)\n\n    def plot(self, config: dict, df: DataFeed):\n        return dict(\n            items=[\n                dict(\n                    type=\"scatter\",\n                    x=df.index,\n                    y=df[\"ema1\"],\n                    line=dict(color=\"blue\", width=1),\n                    name=\"ema1\",\n                ),\n                dict(\n                    type=\"scatter\",\n                    x=df.index,\n                    y=df[\"ema2\"],\n                    line=dict(color=\"green\", width=1),\n                    name=\"ema2\",\n                ),\n            ]\n        )\n\n\nif __name__ == \"__main__\":\n    lt = let_metatrader(\n        strategy=SmaCross,\n        datas=[(\"EURUSD\", \"1m\")],\n        # datas=[[(\"EURUSD\", \"1m\")], [(\"GBPUSD\", \"1m\")]],\n        mt5_login=int(os.environ[\"MT5_LOGIN\"]),\n        mt5_password=os.environ[\"MT5_PASSWORD\"],\n        mt5_server=os.environ[\"MT5_SERVER\"],\n        mt5_wine=os.getenv(\"MT5_WINE\", None),\n    )\n\n    lt.run()\n    # lt.plot()\n</code></pre>"},{"location":"live/metatrader/feeder/","title":"Interactive with MetaTraderDataFeeder","text":"In\u00a0[1]: Copied! <pre>from dotenv import load_dotenv\nimport os\nfrom lettrade.exchange.metatrader import MetaTraderDataFeeder\n\nload_dotenv()\n\nfeeder = MetaTraderDataFeeder.instance(\n    api_kwargs=dict(\n        login=int(os.environ[\"MT5_LOGIN\"]),\n        password=os.environ[\"MT5_PASSWORD\"],\n        server=os.environ[\"MT5_SERVER\"],\n        # wine=os.getenv(\"MT5_WINE\", None),\n    )\n)\n</pre> from dotenv import load_dotenv import os from lettrade.exchange.metatrader import MetaTraderDataFeeder  load_dotenv()  feeder = MetaTraderDataFeeder.instance(     api_kwargs=dict(         login=int(os.environ[\"MT5_LOGIN\"]),         password=os.environ[\"MT5_PASSWORD\"],         server=os.environ[\"MT5_SERVER\"],         # wine=os.getenv(\"MT5_WINE\", None),     ) ) In\u00a0[2]: Copied! <pre>data = feeder.data_new(symbol=\"EURUSD\", timeframe=\"1h\")\ndata\n</pre> data = feeder.data_new(symbol=\"EURUSD\", timeframe=\"1h\") data Out[2]: open high low close volume datetime In\u00a0[3]: Copied! <pre>data.bars_load(since=0, to=1000)\ndata\n</pre> data.bars_load(since=0, to=1000) data Out[3]: open high low close volume datetime 2024-04-10 16:00:00+00:00 1.07808 1.07813 1.07496 1.0751 8742 2024-04-10 17:00:00+00:00 1.07511 1.07671 1.07457 1.07534 6100 2024-04-10 18:00:00+00:00 1.07534 1.07548 1.07335 1.07368 3773 2024-04-10 19:00:00+00:00 1.07368 1.07375 1.07288 1.0736 2439 2024-04-10 20:00:00+00:00 1.07362 1.07544 1.07292 1.07504 5373 ... ... ... ... ... ... 2024-06-07 03:00:00+00:00 1.08918 1.08925 1.08869 1.08896 1113 2024-06-07 04:00:00+00:00 1.08896 1.08959 1.08872 1.08958 1487 2024-06-07 05:00:00+00:00 1.08958 1.08979 1.08945 1.0897 858 2024-06-07 06:00:00+00:00 1.0897 1.08979 1.08937 1.08946 782 2024-06-07 07:00:00+00:00 1.08946 1.08969 1.08936 1.08961 427 <p>1000 rows \u00d7 5 columns</p> In\u00a0[4]: Copied! <pre>import plotly.io as pio\n\npio.renderers.default = \"notebook\"\npio.templates.default = \"plotly_dark\"\n</pre> import plotly.io as pio  pio.renderers.default = \"notebook\" pio.templates.default = \"plotly_dark\" In\u00a0[5]: Copied! <pre>import plotly.graph_objects as go\n\nfig = go.Figure(\n    data=[\n        go.Candlestick(\n            x=data.index,\n            open=data.open,\n            high=data.high,\n            low=data.low,\n            close=data.close,\n        )\n    ]\n)\n\nfig.show()\n</pre> import plotly.graph_objects as go  fig = go.Figure(     data=[         go.Candlestick(             x=data.index,             open=data.open,             high=data.high,             low=data.low,             close=data.close,         )     ] )  fig.show() In\u00a0[6]: Copied! <pre>markets = feeder.markets(\"*EUR*\")\n</pre> markets = feeder.markets(\"*EUR*\") In\u00a0[7]: Copied! <pre>for s in markets:\n    print(s._asdict())\n</pre> for s in markets:     print(s._asdict()) <pre>{'custom': False, 'chart_mode': 0, 'select': False, 'visible': False, 'session_deals': 0, 'session_buy_orders': 0, 'session_sell_orders': 0, 'volume': 0, 'volumehigh': 0, 'volumelow': 0, 'time': 0, 'digits': 3, 'spread': 0, 'spread_float': True, 'ticks_bookdepth': 0, 'trade_calc_mode': 2, 'trade_mode': 4, 'start_time': 0, 'expiration_time': 0, 'trade_stops_level': 0, 'trade_freeze_level': 0, 'trade_exemode': 2, 'swap_mode': 5, 'swap_rollover3days': 5, 'margin_hedged_use_leg': False, 'expiration_mode': 15, 'filling_mode': 2, 'order_mode': 127, 'order_gtc_mode': 0, 'option_mode': 0, 'option_right': 0, 'bid': 0.0, 'bidhigh': 0.0, 'bidlow': 0.0, 'ask': 0.0, 'askhigh': 0.0, 'asklow': 0.0, 'last': 0.0, 'lasthigh': 0.0, 'lastlow': 0.0, 'volume_real': 0.0, 'volumehigh_real': 0.0, 'volumelow_real': 0.0, 'option_strike': 0.0, 'point': 0.001, 'trade_tick_value': 0.001, 'trade_tick_value_profit': 0.001, 'trade_tick_value_loss': 0.001, 'trade_tick_size': 0.001, 'trade_contract_size': 1.0, 'trade_accrued_interest': 0.0, 'trade_face_value': 0.0, 'trade_liquidity_rate': 0.0, 'volume_min': 1.0, 'volume_max': 10000.0, 'volume_step': 1.0, 'volume_limit': 0.0, 'swap_long': -1.18, 'swap_short': -4.07, 'margin_initial': 0.0, 'margin_maintenance': 0.0, 'session_volume': 0.0, 'session_turnover': 0.0, 'session_interest': 0.0, 'session_buy_orders_volume': 0.0, 'session_sell_orders_volume': 0.0, 'session_open': 0.0, 'session_close': 0.0, 'session_aw': 0.0, 'session_price_settlement': 0.0, 'session_price_limit_min': 0.0, 'session_price_limit_max': 0.0, 'margin_hedged': 0.0, 'price_change': 0.0, 'price_volatility': 0.0, 'price_theoretical': 0.0, 'price_greeks_delta': 0.0, 'price_greeks_theta': 0.0, 'price_greeks_gamma': 0.0, 'price_greeks_vega': 0.0, 'price_greeks_rho': 0.0, 'price_greeks_omega': 0.0, 'price_sensitivity': 0.0, 'basis': '', 'category': '', 'currency_base': 'EUR', 'currency_profit': 'EUR', 'currency_margin': 'EUR', 'bank': '', 'description': 'Euro Bobl Cash - FGBM', 'exchange': '', 'formula': '', 'isin': '', 'name': '#EURBOBL', 'page': '', 'path': 'Treasuries\\\\#EURBOBL'}\n{'custom': False, 'chart_mode': 0, 'select': False, 'visible': False, 'session_deals': 0, 'session_buy_orders': 0, 'session_sell_orders': 0, 'volume': 0, 'volumehigh': 0, 'volumelow': 0, 'time': 0, 'digits': 3, 'spread': 0, 'spread_float': True, 'ticks_bookdepth': 0, 'trade_calc_mode': 2, 'trade_mode': 4, 'start_time': 0, 'expiration_time': 0, 'trade_stops_level': 0, 'trade_freeze_level': 0, 'trade_exemode': 2, 'swap_mode': 5, 'swap_rollover3days': 5, 'margin_hedged_use_leg': False, 'expiration_mode': 15, 'filling_mode': 2, 'order_mode': 127, 'order_gtc_mode': 0, 'option_mode': 0, 'option_right': 0, 'bid': 0.0, 'bidhigh': 0.0, 'bidlow': 0.0, 'ask': 0.0, 'askhigh': 0.0, 'asklow': 0.0, 'last': 0.0, 'lasthigh': 0.0, 'lastlow': 0.0, 'volume_real': 0.0, 'volumehigh_real': 0.0, 'volumelow_real': 0.0, 'option_strike': 0.0, 'point': 0.001, 'trade_tick_value': 0.001, 'trade_tick_value_profit': 0.001, 'trade_tick_value_loss': 0.001, 'trade_tick_size': 0.001, 'trade_contract_size': 1.0, 'trade_accrued_interest': 0.0, 'trade_face_value': 0.0, 'trade_liquidity_rate': 0.0, 'volume_min': 1.0, 'volume_max': 10000.0, 'volume_step': 1.0, 'volume_limit': 0.0, 'swap_long': -4.53, 'swap_short': -0.72, 'margin_initial': 0.0, 'margin_maintenance': 0.0, 'session_volume': 0.0, 'session_turnover': 0.0, 'session_interest': 0.0, 'session_buy_orders_volume': 0.0, 'session_sell_orders_volume': 0.0, 'session_open': 0.0, 'session_close': 0.0, 'session_aw': 0.0, 'session_price_settlement': 0.0, 'session_price_limit_min': 0.0, 'session_price_limit_max': 0.0, 'margin_hedged': 0.0, 'price_change': 0.0, 'price_volatility': 0.0, 'price_theoretical': 0.0, 'price_greeks_delta': 0.0, 'price_greeks_theta': 0.0, 'price_greeks_gamma': 0.0, 'price_greeks_vega': 0.0, 'price_greeks_rho': 0.0, 'price_greeks_omega': 0.0, 'price_sensitivity': 0.0, 'basis': '', 'category': '', 'currency_base': 'EUR', 'currency_profit': 'EUR', 'currency_margin': 'EUR', 'bank': '', 'description': 'Euro Bund Cash - FGBL', 'exchange': '', 'formula': '', 'isin': '', 'name': '#EURBUND', 'page': '', 'path': 'Treasuries\\\\#EURBUND'}\n{'custom': False, 'chart_mode': 0, 'select': False, 'visible': False, 'session_deals': 0, 'session_buy_orders': 0, 'session_sell_orders': 0, 'volume': 0, 'volumehigh': 0, 'volumelow': 0, 'time': 0, 'digits': 3, 'spread': 0, 'spread_float': True, 'ticks_bookdepth': 0, 'trade_calc_mode': 2, 'trade_mode': 4, 'start_time': 0, 'expiration_time': 0, 'trade_stops_level': 0, 'trade_freeze_level': 0, 'trade_exemode': 2, 'swap_mode': 5, 'swap_rollover3days': 5, 'margin_hedged_use_leg': False, 'expiration_mode': 15, 'filling_mode': 2, 'order_mode': 127, 'order_gtc_mode': 0, 'option_mode': 0, 'option_right': 0, 'bid': 0.0, 'bidhigh': 0.0, 'bidlow': 0.0, 'ask': 0.0, 'askhigh': 0.0, 'asklow': 0.0, 'last': 0.0, 'lasthigh': 0.0, 'lastlow': 0.0, 'volume_real': 0.0, 'volumehigh_real': 0.0, 'volumelow_real': 0.0, 'option_strike': 0.0, 'point': 0.001, 'trade_tick_value': 0.001, 'trade_tick_value_profit': 0.001, 'trade_tick_value_loss': 0.001, 'trade_tick_size': 0.001, 'trade_contract_size': 1.0, 'trade_accrued_interest': 0.0, 'trade_face_value': 0.0, 'trade_liquidity_rate': 0.0, 'volume_min': 1.0, 'volume_max': 10000.0, 'volume_step': 1.0, 'volume_limit': 0.0, 'swap_long': -7.59, 'swap_short': 2.12, 'margin_initial': 0.0, 'margin_maintenance': 0.0, 'session_volume': 0.0, 'session_turnover': 0.0, 'session_interest': 0.0, 'session_buy_orders_volume': 0.0, 'session_sell_orders_volume': 0.0, 'session_open': 0.0, 'session_close': 0.0, 'session_aw': 0.0, 'session_price_settlement': 0.0, 'session_price_limit_min': 0.0, 'session_price_limit_max': 0.0, 'margin_hedged': 0.0, 'price_change': 0.0, 'price_volatility': 0.0, 'price_theoretical': 0.0, 'price_greeks_delta': 0.0, 'price_greeks_theta': 0.0, 'price_greeks_gamma': 0.0, 'price_greeks_vega': 0.0, 'price_greeks_rho': 0.0, 'price_greeks_omega': 0.0, 'price_sensitivity': 0.0, 'basis': '', 'category': '', 'currency_base': 'EUR', 'currency_profit': 'EUR', 'currency_margin': 'EUR', 'bank': '', 'description': 'Euro Buxl Cash - FGBX', 'exchange': '', 'formula': '', 'isin': '', 'name': '#EURBUXL', 'page': '', 'path': 'Treasuries\\\\#EURBUXL'}\n{'custom': False, 'chart_mode': 0, 'select': False, 'visible': False, 'session_deals': 0, 'session_buy_orders': 0, 'session_sell_orders': 0, 'volume': 0, 'volumehigh': 0, 'volumelow': 0, 'time': 0, 'digits': 3, 'spread': 0, 'spread_float': True, 'ticks_bookdepth': 0, 'trade_calc_mode': 2, 'trade_mode': 4, 'start_time': 0, 'expiration_time': 0, 'trade_stops_level': 0, 'trade_freeze_level': 0, 'trade_exemode': 2, 'swap_mode': 5, 'swap_rollover3days': 5, 'margin_hedged_use_leg': False, 'expiration_mode': 15, 'filling_mode': 2, 'order_mode': 127, 'order_gtc_mode': 0, 'option_mode': 0, 'option_right': 0, 'bid': 0.0, 'bidhigh': 0.0, 'bidlow': 0.0, 'ask': 0.0, 'askhigh': 0.0, 'asklow': 0.0, 'last': 0.0, 'lasthigh': 0.0, 'lastlow': 0.0, 'volume_real': 0.0, 'volumehigh_real': 0.0, 'volumelow_real': 0.0, 'option_strike': 0.0, 'point': 0.001, 'trade_tick_value': 0.001, 'trade_tick_value_profit': 0.001, 'trade_tick_value_loss': 0.001, 'trade_tick_size': 0.001, 'trade_contract_size': 1.0, 'trade_accrued_interest': 0.0, 'trade_face_value': 0.0, 'trade_liquidity_rate': 0.0, 'volume_min': 1.0, 'volume_max': 10000.0, 'volume_step': 1.0, 'volume_limit': 0.0, 'swap_long': -3.68, 'swap_short': -1.5699999999999998, 'margin_initial': 0.0, 'margin_maintenance': 0.0, 'session_volume': 0.0, 'session_turnover': 0.0, 'session_interest': 0.0, 'session_buy_orders_volume': 0.0, 'session_sell_orders_volume': 0.0, 'session_open': 0.0, 'session_close': 0.0, 'session_aw': 0.0, 'session_price_settlement': 0.0, 'session_price_limit_min': 0.0, 'session_price_limit_max': 0.0, 'margin_hedged': 0.0, 'price_change': 0.0, 'price_volatility': 0.0, 'price_theoretical': 0.0, 'price_greeks_delta': 0.0, 'price_greeks_theta': 0.0, 'price_greeks_gamma': 0.0, 'price_greeks_vega': 0.0, 'price_greeks_rho': 0.0, 'price_greeks_omega': 0.0, 'price_sensitivity': 0.0, 'basis': '', 'category': '', 'currency_base': 'EUR', 'currency_profit': 'EUR', 'currency_margin': 'EUR', 'bank': '', 'description': 'Euro Schatz Cash - FGBS', 'exchange': '', 'formula': '', 'isin': '', 'name': '#EURSCHA', 'page': '', 'path': 'Treasuries\\\\#EURSCHA'}\n{'custom': False, 'chart_mode': 0, 'select': True, 'visible': True, 'session_deals': 0, 'session_buy_orders': 0, 'session_sell_orders': 0, 'volume': 0, 'volumehigh': 0, 'volumelow': 0, 'time': 1717745820, 'digits': 5, 'spread': 16, 'spread_float': True, 'ticks_bookdepth': 0, 'trade_calc_mode': 0, 'trade_mode': 4, 'start_time': 0, 'expiration_time': 0, 'trade_stops_level': 0, 'trade_freeze_level': 0, 'trade_exemode': 2, 'swap_mode': 1, 'swap_rollover3days': 3, 'margin_hedged_use_leg': False, 'expiration_mode': 15, 'filling_mode': 2, 'order_mode': 127, 'order_gtc_mode': 0, 'option_mode': 0, 'option_right': 0, 'bid': 1.0895299999999999, 'bidhigh': 1.08971, 'bidlow': 1.08861, 'ask': 1.08969, 'askhigh': 1.08987, 'asklow': 1.08877, 'last': 0.0, 'lasthigh': 0.0, 'lastlow': 0.0, 'volume_real': 0.0, 'volumehigh_real': 0.0, 'volumelow_real': 0.0, 'option_strike': 0.0, 'point': 1e-05, 'trade_tick_value': 1.0, 'trade_tick_value_profit': 1.0, 'trade_tick_value_loss': 1.0, 'trade_tick_size': 1e-05, 'trade_contract_size': 100000.0, 'trade_accrued_interest': 0.0, 'trade_face_value': 0.0, 'trade_liquidity_rate': 0.0, 'volume_min': 0.01, 'volume_max': 100.0, 'volume_step': 0.01, 'volume_limit': 0.0, 'swap_long': -5.64, 'swap_short': 2.79, 'margin_initial': 0.0, 'margin_maintenance': 0.0, 'session_volume': 0.0, 'session_turnover': 0.0, 'session_interest': 0.0, 'session_buy_orders_volume': 0.0, 'session_sell_orders_volume': 0.0, 'session_open': 1.0887, 'session_close': 1.08878, 'session_aw': 0.0, 'session_price_settlement': 0.0, 'session_price_limit_min': 0.0, 'session_price_limit_max': 0.0, 'margin_hedged': 0.0, 'price_change': 0.0762, 'price_volatility': 0.0, 'price_theoretical': 0.0, 'price_greeks_delta': 0.0, 'price_greeks_theta': 0.0, 'price_greeks_gamma': 0.0, 'price_greeks_vega': 0.0, 'price_greeks_rho': 0.0, 'price_greeks_omega': 0.0, 'price_sensitivity': 0.0, 'basis': '', 'category': '', 'currency_base': 'EUR', 'currency_profit': 'USD', 'currency_margin': 'EUR', 'bank': 'Tickmill', 'description': 'Euro vs US Dollar', 'exchange': '', 'formula': '', 'isin': '', 'name': 'EURUSD', 'page': '', 'path': 'Forex\\\\EURUSD'}\n{'custom': False, 'chart_mode': 0, 'select': False, 'visible': False, 'session_deals': 0, 'session_buy_orders': 0, 'session_sell_orders': 0, 'volume': 0, 'volumehigh': 0, 'volumelow': 0, 'time': 0, 'digits': 5, 'spread': 0, 'spread_float': True, 'ticks_bookdepth': 0, 'trade_calc_mode': 0, 'trade_mode': 4, 'start_time': 0, 'expiration_time': 0, 'trade_stops_level': 0, 'trade_freeze_level': 0, 'trade_exemode': 2, 'swap_mode': 1, 'swap_rollover3days': 3, 'margin_hedged_use_leg': False, 'expiration_mode': 15, 'filling_mode': 2, 'order_mode': 127, 'order_gtc_mode': 0, 'option_mode': 0, 'option_right': 0, 'bid': 0.0, 'bidhigh': 0.0, 'bidlow': 0.0, 'ask': 0.0, 'askhigh': 0.0, 'asklow': 0.0, 'last': 0.0, 'lasthigh': 0.0, 'lastlow': 0.0, 'volume_real': 0.0, 'volumehigh_real': 0.0, 'volumelow_real': 0.0, 'option_strike': 0.0, 'point': 1e-05, 'trade_tick_value': 0.66758, 'trade_tick_value_profit': 0.66758, 'trade_tick_value_loss': 0.6677700000000001, 'trade_tick_size': 1e-05, 'trade_contract_size': 100000.0, 'trade_accrued_interest': 0.0, 'trade_face_value': 0.0, 'trade_liquidity_rate': 0.0, 'volume_min': 0.01, 'volume_max': 100.0, 'volume_step': 0.01, 'volume_limit': 0.0, 'swap_long': -4.83, 'swap_short': -1.79, 'margin_initial': 0.0, 'margin_maintenance': 0.0, 'session_volume': 0.0, 'session_turnover': 0.0, 'session_interest': 0.0, 'session_buy_orders_volume': 0.0, 'session_sell_orders_volume': 0.0, 'session_open': 0.0, 'session_close': 0.0, 'session_aw': 0.0, 'session_price_settlement': 0.0, 'session_price_limit_min': 0.0, 'session_price_limit_max': 0.0, 'margin_hedged': 0.0, 'price_change': 0.0, 'price_volatility': 0.0, 'price_theoretical': 0.0, 'price_greeks_delta': 0.0, 'price_greeks_theta': 0.0, 'price_greeks_gamma': 0.0, 'price_greeks_vega': 0.0, 'price_greeks_rho': 0.0, 'price_greeks_omega': 0.0, 'price_sensitivity': 0.0, 'basis': '', 'category': '', 'currency_base': 'EUR', 'currency_profit': 'AUD', 'currency_margin': 'EUR', 'bank': '', 'description': 'Euro vs Australian Dollar', 'exchange': '', 'formula': '', 'isin': '', 'name': 'EURAUD', 'page': '', 'path': 'Forex\\\\EURAUD'}\n{'custom': False, 'chart_mode': 0, 'select': False, 'visible': False, 'session_deals': 0, 'session_buy_orders': 0, 'session_sell_orders': 0, 'volume': 0, 'volumehigh': 0, 'volumelow': 0, 'time': 0, 'digits': 5, 'spread': 0, 'spread_float': True, 'ticks_bookdepth': 0, 'trade_calc_mode': 0, 'trade_mode': 4, 'start_time': 0, 'expiration_time': 0, 'trade_stops_level': 0, 'trade_freeze_level': 0, 'trade_exemode': 2, 'swap_mode': 1, 'swap_rollover3days': 3, 'margin_hedged_use_leg': False, 'expiration_mode': 15, 'filling_mode': 2, 'order_mode': 127, 'order_gtc_mode': 0, 'option_mode': 0, 'option_right': 0, 'bid': 0.0, 'bidhigh': 0.0, 'bidlow': 0.0, 'ask': 0.0, 'askhigh': 0.0, 'asklow': 0.0, 'last': 0.0, 'lasthigh': 0.0, 'lastlow': 0.0, 'volume_real': 0.0, 'volumehigh_real': 0.0, 'volumelow_real': 0.0, 'option_strike': 0.0, 'point': 1e-05, 'trade_tick_value': 0.7317215945676988, 'trade_tick_value_profit': 0.7317215945676988, 'trade_tick_value_loss': 0.7318179822314596, 'trade_tick_size': 1e-05, 'trade_contract_size': 100000.0, 'trade_accrued_interest': 0.0, 'trade_face_value': 0.0, 'trade_liquidity_rate': 0.0, 'volume_min': 0.01, 'volume_max': 100.0, 'volume_step': 0.01, 'volume_limit': 0.0, 'swap_long': -5.67, 'swap_short': -0.11, 'margin_initial': 0.0, 'margin_maintenance': 0.0, 'session_volume': 0.0, 'session_turnover': 0.0, 'session_interest': 0.0, 'session_buy_orders_volume': 0.0, 'session_sell_orders_volume': 0.0, 'session_open': 0.0, 'session_close': 0.0, 'session_aw': 0.0, 'session_price_settlement': 0.0, 'session_price_limit_min': 0.0, 'session_price_limit_max': 0.0, 'margin_hedged': 0.0, 'price_change': 0.0, 'price_volatility': 0.0, 'price_theoretical': 0.0, 'price_greeks_delta': 0.0, 'price_greeks_theta': 0.0, 'price_greeks_gamma': 0.0, 'price_greeks_vega': 0.0, 'price_greeks_rho': 0.0, 'price_greeks_omega': 0.0, 'price_sensitivity': 0.0, 'basis': '', 'category': '', 'currency_base': 'EUR', 'currency_profit': 'CAD', 'currency_margin': 'EUR', 'bank': '', 'description': 'Euro vs Canadian Dollar', 'exchange': '', 'formula': '', 'isin': '', 'name': 'EURCAD', 'page': '', 'path': 'Forex\\\\EURCAD'}\n{'custom': False, 'chart_mode': 0, 'select': False, 'visible': False, 'session_deals': 0, 'session_buy_orders': 0, 'session_sell_orders': 0, 'volume': 0, 'volumehigh': 0, 'volumelow': 0, 'time': 0, 'digits': 5, 'spread': 0, 'spread_float': True, 'ticks_bookdepth': 0, 'trade_calc_mode': 0, 'trade_mode': 4, 'start_time': 0, 'expiration_time': 0, 'trade_stops_level': 0, 'trade_freeze_level': 0, 'trade_exemode': 2, 'swap_mode': 1, 'swap_rollover3days': 3, 'margin_hedged_use_leg': False, 'expiration_mode': 15, 'filling_mode': 2, 'order_mode': 127, 'order_gtc_mode': 0, 'option_mode': 0, 'option_right': 0, 'bid': 0.0, 'bidhigh': 0.0, 'bidlow': 0.0, 'ask': 0.0, 'askhigh': 0.0, 'asklow': 0.0, 'last': 0.0, 'lasthigh': 0.0, 'lastlow': 0.0, 'volume_real': 0.0, 'volumehigh_real': 0.0, 'volumelow_real': 0.0, 'option_strike': 0.0, 'point': 1e-05, 'trade_tick_value': 1.1238227956215865, 'trade_tick_value_profit': 1.1238227956215865, 'trade_tick_value_loss': 1.1240880835422264, 'trade_tick_size': 1e-05, 'trade_contract_size': 100000.0, 'trade_accrued_interest': 0.0, 'trade_face_value': 0.0, 'trade_liquidity_rate': 0.0, 'volume_min': 0.01, 'volume_max': 100.0, 'volume_step': 0.01, 'volume_limit': 0.0, 'swap_long': 4.9399999999999995, 'swap_short': -9.24, 'margin_initial': 0.0, 'margin_maintenance': 0.0, 'session_volume': 0.0, 'session_turnover': 0.0, 'session_interest': 0.0, 'session_buy_orders_volume': 0.0, 'session_sell_orders_volume': 0.0, 'session_open': 0.0, 'session_close': 0.0, 'session_aw': 0.0, 'session_price_settlement': 0.0, 'session_price_limit_min': 0.0, 'session_price_limit_max': 0.0, 'margin_hedged': 0.0, 'price_change': 0.0, 'price_volatility': 0.0, 'price_theoretical': 0.0, 'price_greeks_delta': 0.0, 'price_greeks_theta': 0.0, 'price_greeks_gamma': 0.0, 'price_greeks_vega': 0.0, 'price_greeks_rho': 0.0, 'price_greeks_omega': 0.0, 'price_sensitivity': 0.0, 'basis': '', 'category': '', 'currency_base': 'EUR', 'currency_profit': 'CHF', 'currency_margin': 'EUR', 'bank': '', 'description': 'Euro vs Swiss Franc', 'exchange': '', 'formula': '', 'isin': '', 'name': 'EURCHF', 'page': '', 'path': 'Forex\\\\EURCHF'}\n{'custom': False, 'chart_mode': 0, 'select': False, 'visible': False, 'session_deals': 0, 'session_buy_orders': 0, 'session_sell_orders': 0, 'volume': 0, 'volumehigh': 0, 'volumelow': 0, 'time': 0, 'digits': 3, 'spread': 0, 'spread_float': True, 'ticks_bookdepth': 0, 'trade_calc_mode': 0, 'trade_mode': 4, 'start_time': 0, 'expiration_time': 0, 'trade_stops_level': 0, 'trade_freeze_level': 0, 'trade_exemode': 2, 'swap_mode': 1, 'swap_rollover3days': 3, 'margin_hedged_use_leg': False, 'expiration_mode': 15, 'filling_mode': 2, 'order_mode': 127, 'order_gtc_mode': 0, 'option_mode': 0, 'option_right': 0, 'bid': 0.0, 'bidhigh': 0.0, 'bidlow': 0.0, 'ask': 0.0, 'askhigh': 0.0, 'asklow': 0.0, 'last': 0.0, 'lasthigh': 0.0, 'lastlow': 0.0, 'volume_real': 0.0, 'volumehigh_real': 0.0, 'volumelow_real': 0.0, 'option_strike': 0.0, 'point': 0.001, 'trade_tick_value': 0.0, 'trade_tick_value_profit': 0.0, 'trade_tick_value_loss': 0.0, 'trade_tick_size': 0.001, 'trade_contract_size': 100000.0, 'trade_accrued_interest': 0.0, 'trade_face_value': 0.0, 'trade_liquidity_rate': 0.0, 'volume_min': 0.01, 'volume_max': 100.0, 'volume_step': 0.01, 'volume_limit': 0.0, 'swap_long': -1.16, 'swap_short': 0.52, 'margin_initial': 0.0, 'margin_maintenance': 0.0, 'session_volume': 0.0, 'session_turnover': 0.0, 'session_interest': 0.0, 'session_buy_orders_volume': 0.0, 'session_sell_orders_volume': 0.0, 'session_open': 0.0, 'session_close': 0.0, 'session_aw': 0.0, 'session_price_settlement': 0.0, 'session_price_limit_min': 0.0, 'session_price_limit_max': 0.0, 'margin_hedged': 0.0, 'price_change': 0.0, 'price_volatility': 0.0, 'price_theoretical': 0.0, 'price_greeks_delta': 0.0, 'price_greeks_theta': 0.0, 'price_greeks_gamma': 0.0, 'price_greeks_vega': 0.0, 'price_greeks_rho': 0.0, 'price_greeks_omega': 0.0, 'price_sensitivity': 0.0, 'basis': '', 'category': '', 'currency_base': 'EUR', 'currency_profit': 'CZK', 'currency_margin': 'EUR', 'bank': '', 'description': 'Euro vs Czech Koruna', 'exchange': '', 'formula': '', 'isin': '', 'name': 'EURCZK', 'page': '', 'path': 'Forex\\\\EURCZK'}\n{'custom': False, 'chart_mode': 0, 'select': False, 'visible': False, 'session_deals': 0, 'session_buy_orders': 0, 'session_sell_orders': 0, 'volume': 0, 'volumehigh': 0, 'volumelow': 0, 'time': 0, 'digits': 5, 'spread': 0, 'spread_float': True, 'ticks_bookdepth': 0, 'trade_calc_mode': 0, 'trade_mode': 4, 'start_time': 0, 'expiration_time': 0, 'trade_stops_level': 0, 'trade_freeze_level': 0, 'trade_exemode': 2, 'swap_mode': 1, 'swap_rollover3days': 3, 'margin_hedged_use_leg': False, 'expiration_mode': 15, 'filling_mode': 2, 'order_mode': 127, 'order_gtc_mode': 0, 'option_mode': 0, 'option_right': 0, 'bid': 0.0, 'bidhigh': 0.0, 'bidlow': 0.0, 'ask': 0.0, 'askhigh': 0.0, 'asklow': 0.0, 'last': 0.0, 'lasthigh': 0.0, 'lastlow': 0.0, 'volume_real': 0.0, 'volumehigh_real': 0.0, 'volumelow_real': 0.0, 'option_strike': 0.0, 'point': 1e-05, 'trade_tick_value': 0.0, 'trade_tick_value_profit': 0.0, 'trade_tick_value_loss': 0.0, 'trade_tick_size': 1e-05, 'trade_contract_size': 100000.0, 'trade_accrued_interest': 0.0, 'trade_face_value': 0.0, 'trade_liquidity_rate': 0.0, 'volume_min': 0.01, 'volume_max': 100.0, 'volume_step': 0.01, 'volume_limit': 0.0, 'swap_long': 2.91, 'swap_short': -22.86, 'margin_initial': 0.0, 'margin_maintenance': 0.0, 'session_volume': 0.0, 'session_turnover': 0.0, 'session_interest': 0.0, 'session_buy_orders_volume': 0.0, 'session_sell_orders_volume': 0.0, 'session_open': 0.0, 'session_close': 0.0, 'session_aw': 0.0, 'session_price_settlement': 0.0, 'session_price_limit_min': 0.0, 'session_price_limit_max': 0.0, 'margin_hedged': 0.0, 'price_change': 0.0, 'price_volatility': 0.0, 'price_theoretical': 0.0, 'price_greeks_delta': 0.0, 'price_greeks_theta': 0.0, 'price_greeks_gamma': 0.0, 'price_greeks_vega': 0.0, 'price_greeks_rho': 0.0, 'price_greeks_omega': 0.0, 'price_sensitivity': 0.0, 'basis': '', 'category': '', 'currency_base': 'EUR', 'currency_profit': 'DKK', 'currency_margin': 'EUR', 'bank': '', 'description': 'Euro vs Danish Krone', 'exchange': '', 'formula': '', 'isin': '', 'name': 'EURDKK', 'page': '', 'path': 'Forex\\\\EURDKK'}\n{'custom': False, 'chart_mode': 0, 'select': True, 'visible': True, 'session_deals': 0, 'session_buy_orders': 0, 'session_sell_orders': 0, 'volume': 0, 'volumehigh': 0, 'volumelow': 0, 'time': 1717745822, 'digits': 5, 'spread': 16, 'spread_float': True, 'ticks_bookdepth': 0, 'trade_calc_mode': 0, 'trade_mode': 4, 'start_time': 0, 'expiration_time': 0, 'trade_stops_level': 0, 'trade_freeze_level': 0, 'trade_exemode': 2, 'swap_mode': 1, 'swap_rollover3days': 3, 'margin_hedged_use_leg': False, 'expiration_mode': 15, 'filling_mode': 2, 'order_mode': 127, 'order_gtc_mode': 0, 'option_mode': 0, 'option_right': 0, 'bid': 0.85178, 'bidhigh': 0.85197, 'bidlow': 0.85026, 'ask': 0.85194, 'askhigh': 0.85236, 'asklow': 0.85139, 'last': 0.0, 'lasthigh': 0.0, 'lastlow': 0.0, 'volume_real': 0.0, 'volumehigh_real': 0.0, 'volumelow_real': 0.0, 'option_strike': 0.0, 'point': 1e-05, 'trade_tick_value': 1.27898, 'trade_tick_value_profit': 1.27898, 'trade_tick_value_loss': 1.2791400000000002, 'trade_tick_size': 1e-05, 'trade_contract_size': 100000.0, 'trade_accrued_interest': 0.0, 'trade_face_value': 0.0, 'trade_liquidity_rate': 0.0, 'volume_min': 0.01, 'volume_max': 100.0, 'volume_step': 0.01, 'volume_limit': 0.0, 'swap_long': -3.7800000000000002, 'swap_short': 1.62, 'margin_initial': 0.0, 'margin_maintenance': 0.0, 'session_volume': 0.0, 'session_turnover': 0.0, 'session_interest': 0.0, 'session_buy_orders_volume': 0.0, 'session_sell_orders_volume': 0.0, 'session_open': 0.85105, 'session_close': 0.85117, 'session_aw': 0.0, 'session_price_settlement': 0.0, 'session_price_limit_min': 0.0, 'session_price_limit_max': 0.0, 'margin_hedged': 0.0, 'price_change': 0.0811, 'price_volatility': 0.0, 'price_theoretical': 0.0, 'price_greeks_delta': 0.0, 'price_greeks_theta': 0.0, 'price_greeks_gamma': 0.0, 'price_greeks_vega': 0.0, 'price_greeks_rho': 0.0, 'price_greeks_omega': 0.0, 'price_sensitivity': 0.0, 'basis': '', 'category': '', 'currency_base': 'EUR', 'currency_profit': 'GBP', 'currency_margin': 'EUR', 'bank': 'Tickmill', 'description': 'Euro vs Great Britain Pound ', 'exchange': '', 'formula': '', 'isin': '', 'name': 'EURGBP', 'page': '', 'path': 'Forex\\\\EURGBP'}\n{'custom': False, 'chart_mode': 0, 'select': False, 'visible': False, 'session_deals': 0, 'session_buy_orders': 0, 'session_sell_orders': 0, 'volume': 0, 'volumehigh': 0, 'volumelow': 0, 'time': 0, 'digits': 5, 'spread': 0, 'spread_float': True, 'ticks_bookdepth': 0, 'trade_calc_mode': 0, 'trade_mode': 4, 'start_time': 0, 'expiration_time': 0, 'trade_stops_level': 0, 'trade_freeze_level': 0, 'trade_exemode': 2, 'swap_mode': 1, 'swap_rollover3days': 3, 'margin_hedged_use_leg': False, 'expiration_mode': 15, 'filling_mode': 2, 'order_mode': 127, 'order_gtc_mode': 0, 'option_mode': 0, 'option_right': 0, 'bid': 0.0, 'bidhigh': 0.0, 'bidlow': 0.0, 'ask': 0.0, 'askhigh': 0.0, 'asklow': 0.0, 'last': 0.0, 'lasthigh': 0.0, 'lastlow': 0.0, 'volume_real': 0.0, 'volumehigh_real': 0.0, 'volumelow_real': 0.0, 'option_strike': 0.0, 'point': 1e-05, 'trade_tick_value': 0.0, 'trade_tick_value_profit': 0.0, 'trade_tick_value_loss': 0.0, 'trade_tick_size': 1e-05, 'trade_contract_size': 100000.0, 'trade_accrued_interest': 0.0, 'trade_face_value': 0.0, 'trade_liquidity_rate': 0.0, 'volume_min': 0.01, 'volume_max': 100.0, 'volume_step': 0.01, 'volume_limit': 0.0, 'swap_long': -18.27, 'swap_short': -17.01, 'margin_initial': 0.0, 'margin_maintenance': 0.0, 'session_volume': 0.0, 'session_turnover': 0.0, 'session_interest': 0.0, 'session_buy_orders_volume': 0.0, 'session_sell_orders_volume': 0.0, 'session_open': 0.0, 'session_close': 0.0, 'session_aw': 0.0, 'session_price_settlement': 0.0, 'session_price_limit_min': 0.0, 'session_price_limit_max': 0.0, 'margin_hedged': 0.0, 'price_change': 0.0, 'price_volatility': 0.0, 'price_theoretical': 0.0, 'price_greeks_delta': 0.0, 'price_greeks_theta': 0.0, 'price_greeks_gamma': 0.0, 'price_greeks_vega': 0.0, 'price_greeks_rho': 0.0, 'price_greeks_omega': 0.0, 'price_sensitivity': 0.0, 'basis': '', 'category': '', 'currency_base': 'EUR', 'currency_profit': 'HKD', 'currency_margin': 'EUR', 'bank': '', 'description': 'Euro vs Hong Kong Dollar', 'exchange': '', 'formula': '', 'isin': '', 'name': 'EURHKD', 'page': '', 'path': 'Forex\\\\EURHKD'}\n{'custom': False, 'chart_mode': 0, 'select': False, 'visible': False, 'session_deals': 0, 'session_buy_orders': 0, 'session_sell_orders': 0, 'volume': 0, 'volumehigh': 0, 'volumelow': 0, 'time': 0, 'digits': 3, 'spread': 0, 'spread_float': True, 'ticks_bookdepth': 0, 'trade_calc_mode': 0, 'trade_mode': 4, 'start_time': 0, 'expiration_time': 0, 'trade_stops_level': 0, 'trade_freeze_level': 0, 'trade_exemode': 2, 'swap_mode': 1, 'swap_rollover3days': 3, 'margin_hedged_use_leg': False, 'expiration_mode': 15, 'filling_mode': 2, 'order_mode': 127, 'order_gtc_mode': 0, 'option_mode': 0, 'option_right': 0, 'bid': 0.0, 'bidhigh': 0.0, 'bidlow': 0.0, 'ask': 0.0, 'askhigh': 0.0, 'asklow': 0.0, 'last': 0.0, 'lasthigh': 0.0, 'lastlow': 0.0, 'volume_real': 0.0, 'volumehigh_real': 0.0, 'volumelow_real': 0.0, 'option_strike': 0.0, 'point': 0.001, 'trade_tick_value': 0.0, 'trade_tick_value_profit': 0.0, 'trade_tick_value_loss': 0.0, 'trade_tick_size': 0.001, 'trade_contract_size': 100000.0, 'trade_accrued_interest': 0.0, 'trade_face_value': 0.0, 'trade_liquidity_rate': 0.0, 'volume_min': 0.01, 'volume_max': 100.0, 'volume_step': 0.01, 'volume_limit': 0.0, 'swap_long': -39.76, 'swap_short': 27.71, 'margin_initial': 0.0, 'margin_maintenance': 0.0, 'session_volume': 0.0, 'session_turnover': 0.0, 'session_interest': 0.0, 'session_buy_orders_volume': 0.0, 'session_sell_orders_volume': 0.0, 'session_open': 0.0, 'session_close': 0.0, 'session_aw': 0.0, 'session_price_settlement': 0.0, 'session_price_limit_min': 0.0, 'session_price_limit_max': 0.0, 'margin_hedged': 0.0, 'price_change': 0.0, 'price_volatility': 0.0, 'price_theoretical': 0.0, 'price_greeks_delta': 0.0, 'price_greeks_theta': 0.0, 'price_greeks_gamma': 0.0, 'price_greeks_vega': 0.0, 'price_greeks_rho': 0.0, 'price_greeks_omega': 0.0, 'price_sensitivity': 0.0, 'basis': '', 'category': '', 'currency_base': 'EUR', 'currency_profit': 'HUF', 'currency_margin': 'EUR', 'bank': '', 'description': 'Euro vs Hungarian Forint', 'exchange': '', 'formula': '', 'isin': '', 'name': 'EURHUF', 'page': '', 'path': 'Forex\\\\EURHUF'}\n{'custom': False, 'chart_mode': 0, 'select': False, 'visible': False, 'session_deals': 0, 'session_buy_orders': 0, 'session_sell_orders': 0, 'volume': 0, 'volumehigh': 0, 'volumelow': 0, 'time': 0, 'digits': 3, 'spread': 0, 'spread_float': True, 'ticks_bookdepth': 0, 'trade_calc_mode': 0, 'trade_mode': 4, 'start_time': 0, 'expiration_time': 0, 'trade_stops_level': 0, 'trade_freeze_level': 0, 'trade_exemode': 2, 'swap_mode': 1, 'swap_rollover3days': 3, 'margin_hedged_use_leg': False, 'expiration_mode': 15, 'filling_mode': 2, 'order_mode': 127, 'order_gtc_mode': 0, 'option_mode': 0, 'option_right': 0, 'bid': 0.0, 'bidhigh': 0.0, 'bidlow': 0.0, 'ask': 0.0, 'askhigh': 0.0, 'asklow': 0.0, 'last': 0.0, 'lasthigh': 0.0, 'lastlow': 0.0, 'volume_real': 0.0, 'volumehigh_real': 0.0, 'volumelow_real': 0.0, 'option_strike': 0.0, 'point': 0.001, 'trade_tick_value': 0.6428098504181479, 'trade_tick_value_profit': 0.6428098504181479, 'trade_tick_value_loss': 0.6428842358356531, 'trade_tick_size': 0.001, 'trade_contract_size': 100000.0, 'trade_accrued_interest': 0.0, 'trade_face_value': 0.0, 'trade_liquidity_rate': 0.0, 'volume_min': 0.01, 'volume_max': 100.0, 'volume_step': 0.01, 'volume_limit': 0.0, 'swap_long': 8.71, 'swap_short': -23.1, 'margin_initial': 0.0, 'margin_maintenance': 0.0, 'session_volume': 0.0, 'session_turnover': 0.0, 'session_interest': 0.0, 'session_buy_orders_volume': 0.0, 'session_sell_orders_volume': 0.0, 'session_open': 0.0, 'session_close': 0.0, 'session_aw': 0.0, 'session_price_settlement': 0.0, 'session_price_limit_min': 0.0, 'session_price_limit_max': 0.0, 'margin_hedged': 0.0, 'price_change': 0.0, 'price_volatility': 0.0, 'price_theoretical': 0.0, 'price_greeks_delta': 0.0, 'price_greeks_theta': 0.0, 'price_greeks_gamma': 0.0, 'price_greeks_vega': 0.0, 'price_greeks_rho': 0.0, 'price_greeks_omega': 0.0, 'price_sensitivity': 0.0, 'basis': '', 'category': '', 'currency_base': 'EUR', 'currency_profit': 'JPY', 'currency_margin': 'EUR', 'bank': '', 'description': 'Euro vs Japanese Yen', 'exchange': '', 'formula': '', 'isin': '', 'name': 'EURJPY', 'page': '', 'path': 'Forex\\\\EURJPY'}\n{'custom': False, 'chart_mode': 0, 'select': False, 'visible': False, 'session_deals': 0, 'session_buy_orders': 0, 'session_sell_orders': 0, 'volume': 0, 'volumehigh': 0, 'volumelow': 0, 'time': 0, 'digits': 5, 'spread': 0, 'spread_float': True, 'ticks_bookdepth': 0, 'trade_calc_mode': 0, 'trade_mode': 4, 'start_time': 0, 'expiration_time': 0, 'trade_stops_level': 0, 'trade_freeze_level': 0, 'trade_exemode': 2, 'swap_mode': 1, 'swap_rollover3days': 3, 'margin_hedged_use_leg': False, 'expiration_mode': 15, 'filling_mode': 2, 'order_mode': 127, 'order_gtc_mode': 0, 'option_mode': 0, 'option_right': 0, 'bid': 0.0, 'bidhigh': 0.0, 'bidlow': 0.0, 'ask': 0.0, 'askhigh': 0.0, 'asklow': 0.0, 'last': 0.0, 'lasthigh': 0.0, 'lastlow': 0.0, 'volume_real': 0.0, 'volumehigh_real': 0.0, 'volumelow_real': 0.0, 'option_strike': 0.0, 'point': 1e-05, 'trade_tick_value': 0.0, 'trade_tick_value_profit': 0.0, 'trade_tick_value_loss': 0.0, 'trade_tick_size': 1e-05, 'trade_contract_size': 100000.0, 'trade_accrued_interest': 0.0, 'trade_face_value': 0.0, 'trade_liquidity_rate': 0.0, 'volume_min': 0.01, 'volume_max': 100.0, 'volume_step': 0.01, 'volume_limit': 0.0, 'swap_long': -457.24, 'swap_short': 307.77, 'margin_initial': 0.0, 'margin_maintenance': 0.0, 'session_volume': 0.0, 'session_turnover': 0.0, 'session_interest': 0.0, 'session_buy_orders_volume': 0.0, 'session_sell_orders_volume': 0.0, 'session_open': 0.0, 'session_close': 0.0, 'session_aw': 0.0, 'session_price_settlement': 0.0, 'session_price_limit_min': 0.0, 'session_price_limit_max': 0.0, 'margin_hedged': 0.0, 'price_change': 0.0, 'price_volatility': 0.0, 'price_theoretical': 0.0, 'price_greeks_delta': 0.0, 'price_greeks_theta': 0.0, 'price_greeks_gamma': 0.0, 'price_greeks_vega': 0.0, 'price_greeks_rho': 0.0, 'price_greeks_omega': 0.0, 'price_sensitivity': 0.0, 'basis': '', 'category': '', 'currency_base': 'EUR', 'currency_profit': 'MXN', 'currency_margin': 'EUR', 'bank': '', 'description': 'Euro vs Mexican Pesos', 'exchange': '', 'formula': '', 'isin': '', 'name': 'EURMXN', 'page': '', 'path': 'Forex\\\\EURMXN'}\n{'custom': False, 'chart_mode': 0, 'select': False, 'visible': False, 'session_deals': 0, 'session_buy_orders': 0, 'session_sell_orders': 0, 'volume': 0, 'volumehigh': 0, 'volumelow': 0, 'time': 0, 'digits': 5, 'spread': 0, 'spread_float': True, 'ticks_bookdepth': 0, 'trade_calc_mode': 0, 'trade_mode': 4, 'start_time': 0, 'expiration_time': 0, 'trade_stops_level': 0, 'trade_freeze_level': 0, 'trade_exemode': 2, 'swap_mode': 1, 'swap_rollover3days': 3, 'margin_hedged_use_leg': False, 'expiration_mode': 15, 'filling_mode': 2, 'order_mode': 127, 'order_gtc_mode': 0, 'option_mode': 0, 'option_right': 0, 'bid': 0.0, 'bidhigh': 0.0, 'bidlow': 0.0, 'ask': 0.0, 'askhigh': 0.0, 'asklow': 0.0, 'last': 0.0, 'lasthigh': 0.0, 'lastlow': 0.0, 'volume_real': 0.0, 'volumehigh_real': 0.0, 'volumelow_real': 0.0, 'option_strike': 0.0, 'point': 1e-05, 'trade_tick_value': 0.0, 'trade_tick_value_profit': 0.0, 'trade_tick_value_loss': 0.0, 'trade_tick_size': 1e-05, 'trade_contract_size': 100000.0, 'trade_accrued_interest': 0.0, 'trade_face_value': 0.0, 'trade_liquidity_rate': 0.0, 'volume_min': 0.01, 'volume_max': 100.0, 'volume_step': 0.01, 'volume_limit': 0.0, 'swap_long': -30.52, 'swap_short': 3.33, 'margin_initial': 0.0, 'margin_maintenance': 0.0, 'session_volume': 0.0, 'session_turnover': 0.0, 'session_interest': 0.0, 'session_buy_orders_volume': 0.0, 'session_sell_orders_volume': 0.0, 'session_open': 0.0, 'session_close': 0.0, 'session_aw': 0.0, 'session_price_settlement': 0.0, 'session_price_limit_min': 0.0, 'session_price_limit_max': 0.0, 'margin_hedged': 0.0, 'price_change': 0.0, 'price_volatility': 0.0, 'price_theoretical': 0.0, 'price_greeks_delta': 0.0, 'price_greeks_theta': 0.0, 'price_greeks_gamma': 0.0, 'price_greeks_vega': 0.0, 'price_greeks_rho': 0.0, 'price_greeks_omega': 0.0, 'price_sensitivity': 0.0, 'basis': '', 'category': '', 'currency_base': 'EUR', 'currency_profit': 'NOK', 'currency_margin': 'EUR', 'bank': '', 'description': 'Euro vs Norwegian Kroner', 'exchange': '', 'formula': '', 'isin': '', 'name': 'EURNOK', 'page': '', 'path': 'Forex\\\\EURNOK'}\n{'custom': False, 'chart_mode': 0, 'select': False, 'visible': False, 'session_deals': 0, 'session_buy_orders': 0, 'session_sell_orders': 0, 'volume': 0, 'volumehigh': 0, 'volumelow': 0, 'time': 0, 'digits': 5, 'spread': 0, 'spread_float': True, 'ticks_bookdepth': 0, 'trade_calc_mode': 0, 'trade_mode': 4, 'start_time': 0, 'expiration_time': 0, 'trade_stops_level': 0, 'trade_freeze_level': 0, 'trade_exemode': 2, 'swap_mode': 1, 'swap_rollover3days': 3, 'margin_hedged_use_leg': False, 'expiration_mode': 15, 'filling_mode': 2, 'order_mode': 127, 'order_gtc_mode': 0, 'option_mode': 0, 'option_right': 0, 'bid': 0.0, 'bidhigh': 0.0, 'bidlow': 0.0, 'ask': 0.0, 'askhigh': 0.0, 'asklow': 0.0, 'last': 0.0, 'lasthigh': 0.0, 'lastlow': 0.0, 'volume_real': 0.0, 'volumehigh_real': 0.0, 'volumelow_real': 0.0, 'option_strike': 0.0, 'point': 1e-05, 'trade_tick_value': 0.62005, 'trade_tick_value_profit': 0.62005, 'trade_tick_value_loss': 0.62023, 'trade_tick_size': 1e-05, 'trade_contract_size': 100000.0, 'trade_accrued_interest': 0.0, 'trade_face_value': 0.0, 'trade_liquidity_rate': 0.0, 'volume_min': 0.01, 'volume_max': 100.0, 'volume_step': 0.01, 'volume_limit': 0.0, 'swap_long': -8.58, 'swap_short': 4.05, 'margin_initial': 0.0, 'margin_maintenance': 0.0, 'session_volume': 0.0, 'session_turnover': 0.0, 'session_interest': 0.0, 'session_buy_orders_volume': 0.0, 'session_sell_orders_volume': 0.0, 'session_open': 0.0, 'session_close': 0.0, 'session_aw': 0.0, 'session_price_settlement': 0.0, 'session_price_limit_min': 0.0, 'session_price_limit_max': 0.0, 'margin_hedged': 0.0, 'price_change': 0.0, 'price_volatility': 0.0, 'price_theoretical': 0.0, 'price_greeks_delta': 0.0, 'price_greeks_theta': 0.0, 'price_greeks_gamma': 0.0, 'price_greeks_vega': 0.0, 'price_greeks_rho': 0.0, 'price_greeks_omega': 0.0, 'price_sensitivity': 0.0, 'basis': '', 'category': '', 'currency_base': 'EUR', 'currency_profit': 'NZD', 'currency_margin': 'EUR', 'bank': '', 'description': 'Euro vs New Zealand Dollar', 'exchange': '', 'formula': '', 'isin': '', 'name': 'EURNZD', 'page': '', 'path': 'Forex\\\\EURNZD'}\n{'custom': False, 'chart_mode': 0, 'select': False, 'visible': False, 'session_deals': 0, 'session_buy_orders': 0, 'session_sell_orders': 0, 'volume': 0, 'volumehigh': 0, 'volumelow': 0, 'time': 0, 'digits': 5, 'spread': 0, 'spread_float': True, 'ticks_bookdepth': 0, 'trade_calc_mode': 0, 'trade_mode': 4, 'start_time': 0, 'expiration_time': 0, 'trade_stops_level': 0, 'trade_freeze_level': 0, 'trade_exemode': 2, 'swap_mode': 1, 'swap_rollover3days': 3, 'margin_hedged_use_leg': False, 'expiration_mode': 15, 'filling_mode': 2, 'order_mode': 127, 'order_gtc_mode': 0, 'option_mode': 0, 'option_right': 0, 'bid': 0.0, 'bidhigh': 0.0, 'bidlow': 0.0, 'ask': 0.0, 'askhigh': 0.0, 'asklow': 0.0, 'last': 0.0, 'lasthigh': 0.0, 'lastlow': 0.0, 'volume_real': 0.0, 'volumehigh_real': 0.0, 'volumelow_real': 0.0, 'option_strike': 0.0, 'point': 1e-05, 'trade_tick_value': 0.0, 'trade_tick_value_profit': 0.0, 'trade_tick_value_loss': 0.0, 'trade_tick_size': 1e-05, 'trade_contract_size': 100000.0, 'trade_accrued_interest': 0.0, 'trade_face_value': 0.0, 'trade_liquidity_rate': 0.0, 'volume_min': 0.01, 'volume_max': 100.0, 'volume_step': 0.01, 'volume_limit': 0.0, 'swap_long': -25.69, 'swap_short': 14.16, 'margin_initial': 0.0, 'margin_maintenance': 0.0, 'session_volume': 0.0, 'session_turnover': 0.0, 'session_interest': 0.0, 'session_buy_orders_volume': 0.0, 'session_sell_orders_volume': 0.0, 'session_open': 0.0, 'session_close': 0.0, 'session_aw': 0.0, 'session_price_settlement': 0.0, 'session_price_limit_min': 0.0, 'session_price_limit_max': 0.0, 'margin_hedged': 0.0, 'price_change': 0.0, 'price_volatility': 0.0, 'price_theoretical': 0.0, 'price_greeks_delta': 0.0, 'price_greeks_theta': 0.0, 'price_greeks_gamma': 0.0, 'price_greeks_vega': 0.0, 'price_greeks_rho': 0.0, 'price_greeks_omega': 0.0, 'price_sensitivity': 0.0, 'basis': '', 'category': '', 'currency_base': 'EUR', 'currency_profit': 'PLN', 'currency_margin': 'EUR', 'bank': '', 'description': 'Euro vs Polish Zloty', 'exchange': '', 'formula': '', 'isin': '', 'name': 'EURPLN', 'page': '', 'path': 'Forex\\\\EURPLN'}\n{'custom': False, 'chart_mode': 0, 'select': False, 'visible': False, 'session_deals': 0, 'session_buy_orders': 0, 'session_sell_orders': 0, 'volume': 0, 'volumehigh': 0, 'volumelow': 0, 'time': 0, 'digits': 5, 'spread': 0, 'spread_float': True, 'ticks_bookdepth': 0, 'trade_calc_mode': 0, 'trade_mode': 4, 'start_time': 0, 'expiration_time': 0, 'trade_stops_level': 0, 'trade_freeze_level': 0, 'trade_exemode': 2, 'swap_mode': 1, 'swap_rollover3days': 3, 'margin_hedged_use_leg': False, 'expiration_mode': 15, 'filling_mode': 2, 'order_mode': 127, 'order_gtc_mode': 0, 'option_mode': 0, 'option_right': 0, 'bid': 0.0, 'bidhigh': 0.0, 'bidlow': 0.0, 'ask': 0.0, 'askhigh': 0.0, 'asklow': 0.0, 'last': 0.0, 'lasthigh': 0.0, 'lastlow': 0.0, 'volume_real': 0.0, 'volumehigh_real': 0.0, 'volumelow_real': 0.0, 'option_strike': 0.0, 'point': 1e-05, 'trade_tick_value': 0.0, 'trade_tick_value_profit': 0.0, 'trade_tick_value_loss': 0.0, 'trade_tick_size': 1e-05, 'trade_contract_size': 100000.0, 'trade_accrued_interest': 0.0, 'trade_face_value': 0.0, 'trade_liquidity_rate': 0.0, 'volume_min': 0.01, 'volume_max': 100.0, 'volume_step': 0.01, 'volume_limit': 0.0, 'swap_long': -3.4699999999999998, 'swap_short': -22.89, 'margin_initial': 0.0, 'margin_maintenance': 0.0, 'session_volume': 0.0, 'session_turnover': 0.0, 'session_interest': 0.0, 'session_buy_orders_volume': 0.0, 'session_sell_orders_volume': 0.0, 'session_open': 0.0, 'session_close': 0.0, 'session_aw': 0.0, 'session_price_settlement': 0.0, 'session_price_limit_min': 0.0, 'session_price_limit_max': 0.0, 'margin_hedged': 0.0, 'price_change': 0.0, 'price_volatility': 0.0, 'price_theoretical': 0.0, 'price_greeks_delta': 0.0, 'price_greeks_theta': 0.0, 'price_greeks_gamma': 0.0, 'price_greeks_vega': 0.0, 'price_greeks_rho': 0.0, 'price_greeks_omega': 0.0, 'price_sensitivity': 0.0, 'basis': '', 'category': '', 'currency_base': 'EUR', 'currency_profit': 'SEK', 'currency_margin': 'EUR', 'bank': '', 'description': 'Euro vs Swedish Kroner', 'exchange': '', 'formula': '', 'isin': '', 'name': 'EURSEK', 'page': '', 'path': 'Forex\\\\EURSEK'}\n{'custom': False, 'chart_mode': 0, 'select': False, 'visible': False, 'session_deals': 0, 'session_buy_orders': 0, 'session_sell_orders': 0, 'volume': 0, 'volumehigh': 0, 'volumelow': 0, 'time': 0, 'digits': 5, 'spread': 0, 'spread_float': True, 'ticks_bookdepth': 0, 'trade_calc_mode': 0, 'trade_mode': 4, 'start_time': 0, 'expiration_time': 0, 'trade_stops_level': 0, 'trade_freeze_level': 0, 'trade_exemode': 2, 'swap_mode': 1, 'swap_rollover3days': 3, 'margin_hedged_use_leg': False, 'expiration_mode': 15, 'filling_mode': 2, 'order_mode': 127, 'order_gtc_mode': 0, 'option_mode': 0, 'option_right': 0, 'bid': 0.0, 'bidhigh': 0.0, 'bidlow': 0.0, 'ask': 0.0, 'askhigh': 0.0, 'asklow': 0.0, 'last': 0.0, 'lasthigh': 0.0, 'lastlow': 0.0, 'volume_real': 0.0, 'volumehigh_real': 0.0, 'volumelow_real': 0.0, 'option_strike': 0.0, 'point': 1e-05, 'trade_tick_value': 0.0, 'trade_tick_value_profit': 0.0, 'trade_tick_value_loss': 0.0, 'trade_tick_size': 1e-05, 'trade_contract_size': 100000.0, 'trade_accrued_interest': 0.0, 'trade_face_value': 0.0, 'trade_liquidity_rate': 0.0, 'volume_min': 0.01, 'volume_max': 100.0, 'volume_step': 0.01, 'volume_limit': 0.0, 'swap_long': -0.81, 'swap_short': -2.63, 'margin_initial': 0.0, 'margin_maintenance': 0.0, 'session_volume': 0.0, 'session_turnover': 0.0, 'session_interest': 0.0, 'session_buy_orders_volume': 0.0, 'session_sell_orders_volume': 0.0, 'session_open': 0.0, 'session_close': 0.0, 'session_aw': 0.0, 'session_price_settlement': 0.0, 'session_price_limit_min': 0.0, 'session_price_limit_max': 0.0, 'margin_hedged': 0.0, 'price_change': 0.0, 'price_volatility': 0.0, 'price_theoretical': 0.0, 'price_greeks_delta': 0.0, 'price_greeks_theta': 0.0, 'price_greeks_gamma': 0.0, 'price_greeks_vega': 0.0, 'price_greeks_rho': 0.0, 'price_greeks_omega': 0.0, 'price_sensitivity': 0.0, 'basis': '', 'category': '', 'currency_base': 'EUR', 'currency_profit': 'SGD', 'currency_margin': 'EUR', 'bank': '', 'description': 'Euro vs Singapore Dollar', 'exchange': '', 'formula': '', 'isin': '', 'name': 'EURSGD', 'page': '', 'path': 'Forex\\\\EURSGD'}\n{'custom': False, 'chart_mode': 0, 'select': False, 'visible': False, 'session_deals': 0, 'session_buy_orders': 0, 'session_sell_orders': 0, 'volume': 0, 'volumehigh': 0, 'volumelow': 0, 'time': 0, 'digits': 5, 'spread': 0, 'spread_float': True, 'ticks_bookdepth': 0, 'trade_calc_mode': 0, 'trade_mode': 3, 'start_time': 0, 'expiration_time': 0, 'trade_stops_level': 0, 'trade_freeze_level': 0, 'trade_exemode': 2, 'swap_mode': 1, 'swap_rollover3days': 3, 'margin_hedged_use_leg': False, 'expiration_mode': 15, 'filling_mode': 2, 'order_mode': 127, 'order_gtc_mode': 0, 'option_mode': 0, 'option_right': 0, 'bid': 0.0, 'bidhigh': 0.0, 'bidlow': 0.0, 'ask': 0.0, 'askhigh': 0.0, 'asklow': 0.0, 'last': 0.0, 'lasthigh': 0.0, 'lastlow': 0.0, 'volume_real': 0.0, 'volumehigh_real': 0.0, 'volumelow_real': 0.0, 'option_strike': 0.0, 'point': 1e-05, 'trade_tick_value': 0.0, 'trade_tick_value_profit': 0.0, 'trade_tick_value_loss': 0.0, 'trade_tick_size': 1e-05, 'trade_contract_size': 100000.0, 'trade_accrued_interest': 0.0, 'trade_face_value': 0.0, 'trade_liquidity_rate': 0.0, 'volume_min': 0.01, 'volume_max': 100.0, 'volume_step': 0.01, 'volume_limit': 0.0, 'swap_long': -4647.43, 'swap_short': 2448.19, 'margin_initial': 0.0, 'margin_maintenance': 0.0, 'session_volume': 0.0, 'session_turnover': 0.0, 'session_interest': 0.0, 'session_buy_orders_volume': 0.0, 'session_sell_orders_volume': 0.0, 'session_open': 0.0, 'session_close': 0.0, 'session_aw': 0.0, 'session_price_settlement': 0.0, 'session_price_limit_min': 0.0, 'session_price_limit_max': 0.0, 'margin_hedged': 0.0, 'price_change': 0.0, 'price_volatility': 0.0, 'price_theoretical': 0.0, 'price_greeks_delta': 0.0, 'price_greeks_theta': 0.0, 'price_greeks_gamma': 0.0, 'price_greeks_vega': 0.0, 'price_greeks_rho': 0.0, 'price_greeks_omega': 0.0, 'price_sensitivity': 0.0, 'basis': '', 'category': '', 'currency_base': 'EUR', 'currency_profit': 'TRY', 'currency_margin': 'EUR', 'bank': '', 'description': 'Euro vs Turkish Lira', 'exchange': '', 'formula': '', 'isin': '', 'name': 'EURTRY', 'page': '', 'path': 'Forex\\\\EURTRY'}\n{'custom': False, 'chart_mode': 0, 'select': False, 'visible': False, 'session_deals': 0, 'session_buy_orders': 0, 'session_sell_orders': 0, 'volume': 0, 'volumehigh': 0, 'volumelow': 0, 'time': 0, 'digits': 5, 'spread': 0, 'spread_float': True, 'ticks_bookdepth': 0, 'trade_calc_mode': 0, 'trade_mode': 4, 'start_time': 0, 'expiration_time': 0, 'trade_stops_level': 0, 'trade_freeze_level': 0, 'trade_exemode': 2, 'swap_mode': 1, 'swap_rollover3days': 3, 'margin_hedged_use_leg': False, 'expiration_mode': 15, 'filling_mode': 2, 'order_mode': 127, 'order_gtc_mode': 0, 'option_mode': 0, 'option_right': 0, 'bid': 0.0, 'bidhigh': 0.0, 'bidlow': 0.0, 'ask': 0.0, 'askhigh': 0.0, 'asklow': 0.0, 'last': 0.0, 'lasthigh': 0.0, 'lastlow': 0.0, 'volume_real': 0.0, 'volumehigh_real': 0.0, 'volumelow_real': 0.0, 'option_strike': 0.0, 'point': 1e-05, 'trade_tick_value': 0.0, 'trade_tick_value_profit': 0.0, 'trade_tick_value_loss': 0.0, 'trade_tick_size': 1e-05, 'trade_contract_size': 100000.0, 'trade_accrued_interest': 0.0, 'trade_face_value': 0.0, 'trade_liquidity_rate': 0.0, 'volume_min': 0.01, 'volume_max': 100.0, 'volume_step': 0.01, 'volume_limit': 0.0, 'swap_long': -298.06, 'swap_short': 161.72, 'margin_initial': 0.0, 'margin_maintenance': 0.0, 'session_volume': 0.0, 'session_turnover': 0.0, 'session_interest': 0.0, 'session_buy_orders_volume': 0.0, 'session_sell_orders_volume': 0.0, 'session_open': 0.0, 'session_close': 0.0, 'session_aw': 0.0, 'session_price_settlement': 0.0, 'session_price_limit_min': 0.0, 'session_price_limit_max': 0.0, 'margin_hedged': 0.0, 'price_change': 0.0, 'price_volatility': 0.0, 'price_theoretical': 0.0, 'price_greeks_delta': 0.0, 'price_greeks_theta': 0.0, 'price_greeks_gamma': 0.0, 'price_greeks_vega': 0.0, 'price_greeks_rho': 0.0, 'price_greeks_omega': 0.0, 'price_sensitivity': 0.0, 'basis': '', 'category': '', 'currency_base': 'EUR', 'currency_profit': 'ZAR', 'currency_margin': 'EUR', 'bank': '', 'description': 'Euro vs South African Rand', 'exchange': '', 'formula': '', 'isin': '', 'name': 'EURZAR', 'page': '', 'path': 'Forex\\\\EURZAR'}\n{'custom': False, 'chart_mode': 0, 'select': False, 'visible': False, 'session_deals': 0, 'session_buy_orders': 0, 'session_sell_orders': 0, 'volume': 0, 'volumehigh': 0, 'volumelow': 0, 'time': 0, 'digits': 2, 'spread': 0, 'spread_float': True, 'ticks_bookdepth': 0, 'trade_calc_mode': 0, 'trade_mode': 4, 'start_time': 0, 'expiration_time': 0, 'trade_stops_level': 0, 'trade_freeze_level': 0, 'trade_exemode': 2, 'swap_mode': 1, 'swap_rollover3days': 3, 'margin_hedged_use_leg': False, 'expiration_mode': 15, 'filling_mode': 2, 'order_mode': 127, 'order_gtc_mode': 0, 'option_mode': 0, 'option_right': 0, 'bid': 0.0, 'bidhigh': 0.0, 'bidlow': 0.0, 'ask': 0.0, 'askhigh': 0.0, 'asklow': 0.0, 'last': 0.0, 'lasthigh': 0.0, 'lastlow': 0.0, 'volume_real': 0.0, 'volumehigh_real': 0.0, 'volumelow_real': 0.0, 'option_strike': 0.0, 'point': 0.01, 'trade_tick_value': 1.0895299999999999, 'trade_tick_value_profit': 1.0895299999999999, 'trade_tick_value_loss': 1.08969, 'trade_tick_size': 0.01, 'trade_contract_size': 100.0, 'trade_accrued_interest': 0.0, 'trade_face_value': 0.0, 'trade_liquidity_rate': 0.0, 'volume_min': 0.01, 'volume_max': 100.0, 'volume_step': 0.01, 'volume_limit': 0.0, 'swap_long': -33.68, 'swap_short': 15.68, 'margin_initial': 0.0, 'margin_maintenance': 0.0, 'session_volume': 0.0, 'session_turnover': 0.0, 'session_interest': 0.0, 'session_buy_orders_volume': 0.0, 'session_sell_orders_volume': 0.0, 'session_open': 0.0, 'session_close': 0.0, 'session_aw': 0.0, 'session_price_settlement': 0.0, 'session_price_limit_min': 0.0, 'session_price_limit_max': 0.0, 'margin_hedged': 0.0, 'price_change': 0.0, 'price_volatility': 0.0, 'price_theoretical': 0.0, 'price_greeks_delta': 0.0, 'price_greeks_theta': 0.0, 'price_greeks_gamma': 0.0, 'price_greeks_vega': 0.0, 'price_greeks_rho': 0.0, 'price_greeks_omega': 0.0, 'price_sensitivity': 0.0, 'basis': '', 'category': '', 'currency_base': 'XAU', 'currency_profit': 'EUR', 'currency_margin': 'XAU', 'bank': '', 'description': 'Gold vs. Euro', 'exchange': '', 'formula': '', 'isin': '', 'name': 'XAUEUR', 'page': '', 'path': 'Forex\\\\XAUEUR'}\n</pre>"},{"location":"live/metatrader/feeder/#interactive-with-metatraderdatafeeder","title":"Interactive with MetaTraderDataFeeder\u00b6","text":""},{"location":"live/metatrader/feeder/#metatraderdatafeeder-init","title":"MetaTraderDataFeeder init\u00b6","text":""},{"location":"live/metatrader/feeder/#build-a-datafeed","title":"Build a DataFeed\u00b6","text":""},{"location":"live/metatrader/feeder/#load-datafeed-data","title":"Load DataFeed data\u00b6","text":""},{"location":"live/metatrader/feeder/#plot","title":"Plot\u00b6","text":""},{"location":"live/metatrader/feeder/#init-plotly-environment","title":"Init Plotly environment\u00b6","text":""},{"location":"live/metatrader/feeder/#show","title":"Show\u00b6","text":""},{"location":"live/metatrader/feeder/#load-markets","title":"Load markets\u00b6","text":""},{"location":"live/metatrader/trade/","title":"MetaTrader Trade","text":"In\u00a0[1]: Copied! <pre>from lettrade.exchange.metatrader import MetaTraderAPI\nfrom dotenv import load_dotenv\nimport os\n\nload_dotenv()\n\napi = MetaTraderAPI(\n    login=int(os.environ[\"MT5_LOGIN\"]),\n    password=os.environ[\"MT5_PASSWORD\"],\n    server=os.environ[\"MT5_SERVER\"],\n    # wine=os.getenv(\"MT5_WINE\", None),\n)\n</pre> from lettrade.exchange.metatrader import MetaTraderAPI from dotenv import load_dotenv import os  load_dotenv()  api = MetaTraderAPI(     login=int(os.environ[\"MT5_LOGIN\"]),     password=os.environ[\"MT5_PASSWORD\"],     server=os.environ[\"MT5_SERVER\"],     # wine=os.getenv(\"MT5_WINE\", None), ) In\u00a0[\u00a0]: Copied! <pre>from lettrade.exchange.metatrader import MetaTraderDataFeed\n\ndata = MetaTraderDataFeed(symbol=\"USDCAD\", timeframe=\"5m\", api=api)\ndata.bars_load(since=0, to=10)\ndata\n</pre> from lettrade.exchange.metatrader import MetaTraderDataFeed  data = MetaTraderDataFeed(symbol=\"USDCAD\", timeframe=\"5m\", api=api) data.bars_load(since=0, to=10) data In\u00a0[\u00a0]: Copied! <pre>info = data.symbol_info()\ninfo._asdict()\n</pre> info = data.symbol_info() info._asdict() In\u00a0[\u00a0]: Copied! <pre>from lettrade.exchange.metatrader import MetaTraderOrder, OrderType\nfrom unittest.mock import MagicMock\n\norder = MetaTraderOrder(\n    id=\"\",\n    data=data,\n    exchange=MagicMock(),\n    type=OrderType.Market,\n    size=0.1,\n    api=api,\n)\norder.place()\n</pre> from lettrade.exchange.metatrader import MetaTraderOrder, OrderType from unittest.mock import MagicMock  order = MetaTraderOrder(     id=\"\",     data=data,     exchange=MagicMock(),     type=OrderType.Market,     size=0.1,     api=api, ) order.place() In\u00a0[2]: Copied! <pre>order = api.orders_history_get(id=44222563)\norder\n</pre> order = api.orders_history_get(id=44222563) order <pre>TradeOrder(ticket=44222563, time_setup=1718898785, time_setup_msc=1718898785172, time_done=1718898785, time_done_msc=1718898785172, time_expiration=0, type=0, type_time=0, type_filling=1, state=4, magic=88888888, position_id=44222563, position_by_id=0, reason=3, volume_initial=0.01, volume_current=0.0, price_open=0.0, sl=0.0, tp=0.0, price_current=1.37025, price_stoplimit=0.0, symbol='USDCAD', comment='', external_id='')\n</pre> Out[2]: <pre>[Box({'ticket': 44222563, 'time_setup': 1718898785, 'time_setup_msc': 1718898785172, 'time_done': 1718898785, 'time_done_msc': 1718898785172, 'time_expiration': 0, 'type': 0, 'type_time': 0, 'type_filling': 1, 'state': 4, 'magic': 88888888, 'position_id': 44222563, 'position_by_id': 0, 'reason': 3, 'volume_initial': 0.01, 'volume_current': 0.0, 'price_open': 0.0, 'sl': 0.0, 'tp': 0.0, 'price_current': 1.37025, 'price_stoplimit': 0.0, 'symbol': 'USDCAD', 'comment': '', 'external_id': '', 'fees': 0.0})]</pre> In\u00a0[\u00a0]: Copied! <pre>from lettrade.exchange.metatrader import MetaTraderPosition\n\napi.positions_get(id=\"44209922\")\n</pre> from lettrade.exchange.metatrader import MetaTraderPosition  api.positions_get(id=\"44209922\") In\u00a0[\u00a0]: Copied! <pre>result = api.do_position_update(id=44209922, sl=1.370)\nresult\n</pre> result = api.do_position_update(id=44209922, sl=1.370) result In\u00a0[\u00a0]: Copied! <pre>tick = api.tick_get(symbol=\"USDCAD\")\nprice = tick.ask if True else tick.bid\n\nresult = api.do_position_close(\n    id=44209922, symbol=\"USDCAD\", price=price, size=0.1, type=1\n)\nresult\n</pre> tick = api.tick_get(symbol=\"USDCAD\") price = tick.ask if True else tick.bid  result = api.do_position_close(     id=44209922, symbol=\"USDCAD\", price=price, size=0.1, type=1 ) result In\u00a0[3]: Copied! <pre>result = api.executions_get(id=36461502)\n# result = api.executions_get(position_id=44222563)\nresult\n</pre> result = api.executions_get(id=36461502) # result = api.executions_get(position_id=44222563) result Out[3]: <pre>[Box({'ticket': 36461502, 'order': 44185981, 'time': 1718871570, 'time_msc': 1718871570304, 'type': 1, 'entry': 1, 'magic': 88888888, 'position_id': 44176376, 'reason': 5, 'volume': 0.01, 'price': 1.37144, 'commission': 0.0, 'swap': 0.0, 'profit': 0.06, 'fee': 0.0, 'symbol': 'USDCAD', 'comment': '[tp 1.37144]', 'external_id': '', 'fees': 0.0})]</pre>"},{"location":"live/metatrader/trade/#metatrader-trade","title":"MetaTrader Trade\u00b6","text":""},{"location":"live/metatrader/trade/#init-api","title":"Init API\u00b6","text":""},{"location":"live/metatrader/trade/#init-datafeed","title":"Init DataFeed\u00b6","text":""},{"location":"live/metatrader/trade/#place-new-order","title":"Place new order\u00b6","text":""},{"location":"live/metatrader/trade/#get-order-by-id","title":"Get order by id\u00b6","text":""},{"location":"live/metatrader/trade/#position","title":"Position\u00b6","text":""},{"location":"live/metatrader/trade/#get-position-by-id","title":"Get position by id\u00b6","text":""},{"location":"live/metatrader/trade/#update-position","title":"Update position\u00b6","text":""},{"location":"live/metatrader/trade/#close-position","title":"Close position\u00b6","text":""},{"location":"live/metatrader/trade/#execution","title":"Execution\u00b6","text":""},{"location":"optimize/0.lettrade/","title":"Optimize with LetTrade Grid Search","text":"In\u00a0[1]: Copied! <pre>from lettrade import DataFeed, Strategy\nfrom lettrade.exchange.backtest import ForexBackTestAccount, let_backtest\n\n\nclass SmaCross(Strategy):\n    ema1_window = 9\n    ema2_window = 21\n\n    def indicators(self, df: DataFeed):\n        df[\"ema1\"] = df.i.ema(window=self.ema1_window)\n        df[\"ema2\"] = df.i.ema(window=self.ema2_window)\n\n        df[\"signal_ema_crossover\"] = df.i.crossover(df.ema1, df.ema2)\n        df[\"signal_ema_crossunder\"] = df.i.crossunder(df.ema1, df.ema2)\n\n    def next(self, df: DataFeed):\n        if len(self.orders) &gt; 0 or len(self.positions) &gt; 0:\n            return\n\n        if df.l.signal_ema_crossover[-1]:\n            price = df.l.close[-1]\n            self.buy(size=0.1, sl=price - 0.001, tp=price + 0.001)\n        elif df.l.signal_ema_crossunder[-1]:\n            price = df.l.close[-1]\n            self.sell(size=0.1, sl=price + 0.001, tp=price - 0.001)\n\n\nlt = let_backtest(\n    strategy=SmaCross,\n    datas=\"example/data/data/EURUSD_5m-0_10000.csv\",\n    account=ForexBackTestAccount,\n    # plotter=None,\n)\n</pre> from lettrade import DataFeed, Strategy from lettrade.exchange.backtest import ForexBackTestAccount, let_backtest   class SmaCross(Strategy):     ema1_window = 9     ema2_window = 21      def indicators(self, df: DataFeed):         df[\"ema1\"] = df.i.ema(window=self.ema1_window)         df[\"ema2\"] = df.i.ema(window=self.ema2_window)          df[\"signal_ema_crossover\"] = df.i.crossover(df.ema1, df.ema2)         df[\"signal_ema_crossunder\"] = df.i.crossunder(df.ema1, df.ema2)      def next(self, df: DataFeed):         if len(self.orders) &gt; 0 or len(self.positions) &gt; 0:             return          if df.l.signal_ema_crossover[-1]:             price = df.l.close[-1]             self.buy(size=0.1, sl=price - 0.001, tp=price + 0.001)         elif df.l.signal_ema_crossunder[-1]:             price = df.l.close[-1]             self.sell(size=0.1, sl=price + 0.001, tp=price - 0.001)   lt = let_backtest(     strategy=SmaCross,     datas=\"example/data/data/EURUSD_5m-0_10000.csv\",     account=ForexBackTestAccount,     # plotter=None, ) In\u00a0[2]: Copied! <pre>lt.optimize(ema1_window=[5, 6, 7, 8, 9, 10], ema2_window=range(10, 50, 1))\n</pre> lt.optimize(ema1_window=[5, 6, 7, 8, 9, 10], ema2_window=range(10, 50, 1)) <pre>  Optimizing \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 100% [240/240] 0:00:00 0:00:05m 0:00:0500:04\n</pre> <p>Rerun Optimize will reuse optimize result cached</p> In\u00a0[3]: Copied! <pre>lt.optimize(ema1_window=range(5, 25), ema2_window=range(10, 50, 1))\n</pre> lt.optimize(ema1_window=range(5, 25), ema2_window=range(10, 50, 1)) <pre>  Optimizing \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 100% [800/800] 0:00:00 0:00:10m 0:00:1000:10\n</pre> In\u00a0[4]: Copied! <pre>lt.plotter.heatmap(x=\"ema1_window\", y=\"ema2_window\", z=\"equity\")\n</pre> lt.plotter.heatmap(x=\"ema1_window\", y=\"ema2_window\", z=\"equity\") In\u00a0[5]: Copied! <pre>lt.plotter.contour(x=\"ema1_window\", y=\"ema2_window\", z=\"equity\")\n</pre> lt.plotter.contour(x=\"ema1_window\", y=\"ema2_window\", z=\"equity\") In\u00a0[6]: Copied! <pre>lt.optimize_cache()\n</pre> lt.optimize_cache() In\u00a0[7]: Copied! <pre>lt.plotter.heatmap()\n</pre> lt.plotter.heatmap() In\u00a0[8]: Copied! <pre>lt.plotter.contour()\n</pre> lt.plotter.contour()"},{"location":"optimize/0.lettrade/#optimize-with-lettrade-grid-search","title":"Optimize with LetTrade Grid Search\u00b6","text":""},{"location":"optimize/0.lettrade/#grid-search","title":"Grid Search\u00b6","text":""},{"location":"optimize/0.lettrade/#sample-strategy","title":"Sample Strategy\u00b6","text":""},{"location":"optimize/0.lettrade/#optimize","title":"Optimize\u00b6","text":"<p><code>LetTrade</code> will auto cache optimize result</p>"},{"location":"optimize/0.lettrade/#plot","title":"Plot\u00b6","text":""},{"location":"optimize/0.lettrade/#optimize-from-cache","title":"Optimize from cache\u00b6","text":"<p>Load optimize result from cache</p>"},{"location":"optimize/0.lettrade/#plot","title":"Plot\u00b6","text":""},{"location":"optimize/1.optuna/","title":"Optimize with Optuna","text":"In\u00a0[\u00a0]: Copied! <pre>!pip install optuna\n</pre> !pip install optuna In\u00a0[1]: Copied! <pre># import talib.abstract as ta\n\nfrom lettrade import DataFeed, Strategy, indicator as i\nfrom lettrade.exchange.backtest import ForexBackTestAccount, let_backtest\nfrom lettrade.indicator.vendor.qtpylib import inject_indicators\n\ninject_indicators()\n\n\nclass SmaCross(Strategy):\n    ema1_window = 9\n    ema2_window = 21\n\n    def indicators(self, df: DataFeed):\n        # df[\"ema1\"] = ta.EMA(df, timeperiod=self.ema1_window)\n        # df[\"ema2\"] = ta.EMA(df, timeperiod=self.ema2_window)\n        df[\"ema1\"] = df.close.ema(window=self.ema1_window)\n        df[\"ema2\"] = df.close.ema(window=self.ema2_window)\n\n        df[\"signal_ema_crossover\"] = i.crossover(df.ema1, df.ema2)\n        df[\"signal_ema_crossunder\"] = i.crossunder(df.ema1, df.ema2)\n\n    def next(self, df: DataFeed):\n        if len(self.orders) &gt; 0 or len(self.positions) &gt; 0:\n            return\n\n        if df.l.signal_ema_crossover[-1]:\n            price = df.l.close[-1]\n            self.buy(size=0.1, sl=price - 0.001, tp=price + 0.001)\n        elif df.l.signal_ema_crossunder[-1]:\n            price = df.l.close[-1]\n            self.sell(size=0.1, sl=price + 0.001, tp=price - 0.001)\n\n\nlt = let_backtest(\n    strategy=SmaCross,\n    datas=\"example/data/data/EURUSD_5m-0_10000.csv\",\n    account=ForexBackTestAccount,\n    # plotter=None,\n)\n</pre> # import talib.abstract as ta  from lettrade import DataFeed, Strategy, indicator as i from lettrade.exchange.backtest import ForexBackTestAccount, let_backtest from lettrade.indicator.vendor.qtpylib import inject_indicators  inject_indicators()   class SmaCross(Strategy):     ema1_window = 9     ema2_window = 21      def indicators(self, df: DataFeed):         # df[\"ema1\"] = ta.EMA(df, timeperiod=self.ema1_window)         # df[\"ema2\"] = ta.EMA(df, timeperiod=self.ema2_window)         df[\"ema1\"] = df.close.ema(window=self.ema1_window)         df[\"ema2\"] = df.close.ema(window=self.ema2_window)          df[\"signal_ema_crossover\"] = i.crossover(df.ema1, df.ema2)         df[\"signal_ema_crossunder\"] = i.crossunder(df.ema1, df.ema2)      def next(self, df: DataFeed):         if len(self.orders) &gt; 0 or len(self.positions) &gt; 0:             return          if df.l.signal_ema_crossover[-1]:             price = df.l.close[-1]             self.buy(size=0.1, sl=price - 0.001, tp=price + 0.001)         elif df.l.signal_ema_crossunder[-1]:             price = df.l.close[-1]             self.sell(size=0.1, sl=price + 0.001, tp=price - 0.001)   lt = let_backtest(     strategy=SmaCross,     datas=\"example/data/data/EURUSD_5m-0_10000.csv\",     account=ForexBackTestAccount,     # plotter=None, ) In\u00a0[2]: Copied! <pre>import optuna\n\nlettrade_model = lt.optimize_model()\n\n\ndef train_model(trial):\n    params = {\n        \"ema1_window\": trial.suggest_int(\"ema1_window\", 5, 25, step=1),\n        \"ema2_window\": trial.suggest_int(\"ema2_window\", 10, 50, step=1),\n    }\n\n    # Model\n    result = lettrade_model(params)\n\n    # Score\n    return result[\"equity\"]\n\n\nstudy = optuna.create_study(\n    study_name=\"example-study\",\n    direction=\"maximize\",\n    # storage='sqlite:///example.db',\n    load_if_exists=True,\n)\n\nstudy.optimize(train_model, n_trials=1_000)\n</pre> import optuna  lettrade_model = lt.optimize_model()   def train_model(trial):     params = {         \"ema1_window\": trial.suggest_int(\"ema1_window\", 5, 25, step=1),         \"ema2_window\": trial.suggest_int(\"ema2_window\", 10, 50, step=1),     }      # Model     result = lettrade_model(params)      # Score     return result[\"equity\"]   study = optuna.create_study(     study_name=\"example-study\",     direction=\"maximize\",     # storage='sqlite:///example.db',     load_if_exists=True, )  study.optimize(train_model, n_trials=1_000) <pre>[I 2024-07-02 16:43:59,663] A new study created in memory with name: example-study\n[I 2024-07-02 16:43:59,961] Trial 0 finished with value: 9945.98 and parameters: {'ema1_window': 7, 'ema2_window': 34}. Best is trial 0 with value: 9945.98.\n[I 2024-07-02 16:44:00,168] Trial 1 finished with value: 9978.7 and parameters: {'ema1_window': 14, 'ema2_window': 44}. Best is trial 1 with value: 9978.7.\n[I 2024-07-02 16:44:00,377] Trial 2 finished with value: 9961.2 and parameters: {'ema1_window': 16, 'ema2_window': 39}. Best is trial 1 with value: 9978.7.\n[I 2024-07-02 16:44:00,607] Trial 3 finished with value: 10033.02 and parameters: {'ema1_window': 16, 'ema2_window': 11}. Best is trial 3 with value: 10033.02.\n[I 2024-07-02 16:44:00,808] Trial 4 finished with value: 9998.88 and parameters: {'ema1_window': 13, 'ema2_window': 47}. Best is trial 3 with value: 10033.02.\n[I 2024-07-02 16:44:01,001] Trial 5 finished with value: 9907.68 and parameters: {'ema1_window': 15, 'ema2_window': 48}. Best is trial 3 with value: 10033.02.\n[I 2024-07-02 16:44:01,237] Trial 6 finished with value: 9976.22 and parameters: {'ema1_window': 6, 'ema2_window': 26}. Best is trial 3 with value: 10033.02.\n[I 2024-07-02 16:44:01,467] Trial 7 finished with value: 9986.2 and parameters: {'ema1_window': 9, 'ema2_window': 22}. Best is trial 3 with value: 10033.02.\n[I 2024-07-02 16:44:01,676] Trial 8 finished with value: 9914.42 and parameters: {'ema1_window': 23, 'ema2_window': 19}. Best is trial 3 with value: 10033.02.\n[I 2024-07-02 16:44:01,911] Trial 9 finished with value: 9804.6 and parameters: {'ema1_window': 7, 'ema2_window': 21}. Best is trial 3 with value: 10033.02.\n[I 2024-07-02 16:44:02,149] Trial 10 finished with value: 10001.7 and parameters: {'ema1_window': 21, 'ema2_window': 10}. Best is trial 3 with value: 10033.02.\n[I 2024-07-02 16:44:02,383] Trial 11 finished with value: 10110.18 and parameters: {'ema1_window': 23, 'ema2_window': 10}. Best is trial 11 with value: 10110.18.\n[I 2024-07-02 16:44:02,629] Trial 12 finished with value: 10000.68 and parameters: {'ema1_window': 19, 'ema2_window': 10}. Best is trial 11 with value: 10110.18.\n[I 2024-07-02 16:44:02,896] Trial 13 finished with value: 10014.94 and parameters: {'ema1_window': 25, 'ema2_window': 15}. Best is trial 11 with value: 10110.18.\n[I 2024-07-02 16:44:03,131] Trial 14 finished with value: 10162.62 and parameters: {'ema1_window': 18, 'ema2_window': 16}. Best is trial 14 with value: 10162.62.\n[I 2024-07-02 16:44:03,347] Trial 15 finished with value: 9907.0 and parameters: {'ema1_window': 19, 'ema2_window': 29}. Best is trial 14 with value: 10162.62.\n[I 2024-07-02 16:44:03,565] Trial 16 finished with value: 9985.34 and parameters: {'ema1_window': 25, 'ema2_window': 16}. Best is trial 14 with value: 10162.62.\n[I 2024-07-02 16:44:03,802] Trial 17 finished with value: 10142.82 and parameters: {'ema1_window': 20, 'ema2_window': 15}. Best is trial 14 with value: 10162.62.\n[I 2024-07-02 16:44:04,034] Trial 18 finished with value: 9834.78 and parameters: {'ema1_window': 11, 'ema2_window': 26}. Best is trial 14 with value: 10162.62.\n[I 2024-07-02 16:44:04,269] Trial 19 finished with value: 10162.82 and parameters: {'ema1_window': 19, 'ema2_window': 16}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:04,483] Trial 20 finished with value: 9936.44 and parameters: {'ema1_window': 17, 'ema2_window': 34}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:04,489] Trial 21 finished with value: 10162.82 and parameters: {'ema1_window': 19, 'ema2_window': 16}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:04,701] Trial 22 finished with value: 9994.6 and parameters: {'ema1_window': 18, 'ema2_window': 23}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:04,924] Trial 23 finished with value: 10005.18 and parameters: {'ema1_window': 22, 'ema2_window': 18}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:05,159] Trial 24 finished with value: 10160.48 and parameters: {'ema1_window': 18, 'ema2_window': 15}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:05,396] Trial 25 finished with value: 9805.5 and parameters: {'ema1_window': 12, 'ema2_window': 24}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:05,662] Trial 26 finished with value: 10065.02 and parameters: {'ema1_window': 21, 'ema2_window': 18}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:05,902] Trial 27 finished with value: 10022.02 and parameters: {'ema1_window': 17, 'ema2_window': 13}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:06,013] Trial 28 finished with value: 10000.0 and parameters: {'ema1_window': 19, 'ema2_window': 19}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:06,224] Trial 29 finished with value: 9948.18 and parameters: {'ema1_window': 21, 'ema2_window': 31}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:06,467] Trial 30 finished with value: 10002.86 and parameters: {'ema1_window': 15, 'ema2_window': 13}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:06,474] Trial 31 finished with value: 10160.48 and parameters: {'ema1_window': 18, 'ema2_window': 15}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:06,695] Trial 32 finished with value: 9894.68 and parameters: {'ema1_window': 17, 'ema2_window': 20}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:06,934] Trial 33 finished with value: 10120.88 and parameters: {'ema1_window': 20, 'ema2_window': 13}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:07,143] Trial 34 finished with value: 9971.44 and parameters: {'ema1_window': 14, 'ema2_window': 42}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:07,376] Trial 35 finished with value: 9807.88 and parameters: {'ema1_window': 16, 'ema2_window': 17}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:07,612] Trial 36 finished with value: 10020.16 and parameters: {'ema1_window': 18, 'ema2_window': 13}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:07,819] Trial 37 finished with value: 9966.88 and parameters: {'ema1_window': 15, 'ema2_window': 38}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:08,029] Trial 38 finished with value: 9936.64 and parameters: {'ema1_window': 23, 'ema2_window': 26}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:08,251] Trial 39 finished with value: 9904.44 and parameters: {'ema1_window': 14, 'ema2_window': 24}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:08,465] Trial 40 finished with value: 9994.5 and parameters: {'ema1_window': 20, 'ema2_window': 21}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:08,473] Trial 41 finished with value: 10160.48 and parameters: {'ema1_window': 18, 'ema2_window': 15}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:08,762] Trial 42 finished with value: 10012.72 and parameters: {'ema1_window': 16, 'ema2_window': 12}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:08,769] Trial 43 finished with value: 10162.62 and parameters: {'ema1_window': 18, 'ema2_window': 16}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:08,994] Trial 44 finished with value: 10094.6 and parameters: {'ema1_window': 19, 'ema2_window': 18}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:09,211] Trial 45 finished with value: 9954.2 and parameters: {'ema1_window': 22, 'ema2_window': 21}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:09,446] Trial 46 finished with value: 10110.94 and parameters: {'ema1_window': 17, 'ema2_window': 15}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:09,670] Trial 47 finished with value: 10074.88 and parameters: {'ema1_window': 20, 'ema2_window': 17}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:09,678] Trial 48 finished with value: 10033.02 and parameters: {'ema1_window': 16, 'ema2_window': 11}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:09,892] Trial 49 finished with value: 9975.7 and parameters: {'ema1_window': 22, 'ema2_window': 19}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:10,114] Trial 50 finished with value: 9995.14 and parameters: {'ema1_window': 13, 'ema2_window': 28}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:10,121] Trial 51 finished with value: 10162.62 and parameters: {'ema1_window': 18, 'ema2_window': 16}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:10,128] Trial 52 finished with value: 10162.82 and parameters: {'ema1_window': 19, 'ema2_window': 16}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:10,346] Trial 53 finished with value: 10016.0 and parameters: {'ema1_window': 21, 'ema2_window': 22}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:10,582] Trial 54 finished with value: 10124.06 and parameters: {'ema1_window': 19, 'ema2_window': 17}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:10,820] Trial 55 finished with value: 10142.46 and parameters: {'ema1_window': 24, 'ema2_window': 11}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:11,059] Trial 56 finished with value: 10142.64 and parameters: {'ema1_window': 20, 'ema2_window': 14}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:11,066] Trial 57 finished with value: 9894.68 and parameters: {'ema1_window': 17, 'ema2_window': 20}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:11,277] Trial 58 finished with value: 9961.66 and parameters: {'ema1_window': 9, 'ema2_window': 49}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:11,285] Trial 59 finished with value: 10162.82 and parameters: {'ema1_window': 19, 'ema2_window': 16}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:11,515] Trial 60 finished with value: 10016.0 and parameters: {'ema1_window': 19, 'ema2_window': 24}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:11,811] Trial 61 finished with value: 10162.32 and parameters: {'ema1_window': 18, 'ema2_window': 17}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:12,038] Trial 62 finished with value: 10133.72 and parameters: {'ema1_window': 20, 'ema2_window': 16}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:12,274] Trial 63 finished with value: 10000.1 and parameters: {'ema1_window': 19, 'ema2_window': 12}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:12,502] Trial 64 finished with value: 9845.26 and parameters: {'ema1_window': 17, 'ema2_window': 19}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:12,736] Trial 65 finished with value: 10143.02 and parameters: {'ema1_window': 21, 'ema2_window': 14}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:12,744] Trial 66 finished with value: 10162.62 and parameters: {'ema1_window': 18, 'ema2_window': 16}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:12,993] Trial 67 finished with value: 10113.68 and parameters: {'ema1_window': 15, 'ema2_window': 10}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:13,235] Trial 68 finished with value: 10011.86 and parameters: {'ema1_window': 16, 'ema2_window': 14}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:13,243] Trial 69 finished with value: 9936.44 and parameters: {'ema1_window': 17, 'ema2_window': 34}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:13,442] Trial 70 finished with value: 9964.56 and parameters: {'ema1_window': 22, 'ema2_window': 45}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:13,451] Trial 71 finished with value: 10162.62 and parameters: {'ema1_window': 18, 'ema2_window': 16}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:13,458] Trial 72 finished with value: 10094.6 and parameters: {'ema1_window': 19, 'ema2_window': 18}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:13,465] Trial 73 finished with value: 10162.62 and parameters: {'ema1_window': 18, 'ema2_window': 16}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:13,472] Trial 74 finished with value: 10000.1 and parameters: {'ema1_window': 19, 'ema2_window': 12}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:13,688] Trial 75 finished with value: 9975.7 and parameters: {'ema1_window': 21, 'ema2_window': 20}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:13,696] Trial 76 finished with value: 10142.64 and parameters: {'ema1_window': 20, 'ema2_window': 14}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:13,809] Trial 77 finished with value: 10000.0 and parameters: {'ema1_window': 18, 'ema2_window': 18}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:14,045] Trial 78 finished with value: 10160.48 and parameters: {'ema1_window': 17, 'ema2_window': 16}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:14,269] Trial 79 finished with value: 9964.68 and parameters: {'ema1_window': 19, 'ema2_window': 21}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:14,503] Trial 80 finished with value: 9904.82 and parameters: {'ema1_window': 16, 'ema2_window': 23}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:14,511] Trial 81 finished with value: 10162.62 and parameters: {'ema1_window': 18, 'ema2_window': 16}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:14,518] Trial 82 finished with value: 10124.06 and parameters: {'ema1_window': 19, 'ema2_window': 17}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:14,525] Trial 83 finished with value: 10120.88 and parameters: {'ema1_window': 20, 'ema2_window': 13}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:14,532] Trial 84 finished with value: 10160.48 and parameters: {'ema1_window': 18, 'ema2_window': 15}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:14,539] Trial 85 finished with value: 9845.26 and parameters: {'ema1_window': 17, 'ema2_window': 19}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:14,546] Trial 86 finished with value: 10162.62 and parameters: {'ema1_window': 18, 'ema2_window': 16}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:14,553] Trial 87 finished with value: 10143.02 and parameters: {'ema1_window': 21, 'ema2_window': 14}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:14,867] Trial 88 finished with value: 10003.2 and parameters: {'ema1_window': 5, 'ema2_window': 12}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:15,094] Trial 89 finished with value: 10074.9 and parameters: {'ema1_window': 20, 'ema2_window': 18}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:15,334] Trial 90 finished with value: 9857.34 and parameters: {'ema1_window': 15, 'ema2_window': 17}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:15,343] Trial 91 finished with value: 10162.62 and parameters: {'ema1_window': 18, 'ema2_window': 16}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:15,351] Trial 92 finished with value: 10160.48 and parameters: {'ema1_window': 18, 'ema2_window': 15}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:15,358] Trial 93 finished with value: 9894.68 and parameters: {'ema1_window': 17, 'ema2_window': 20}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:15,365] Trial 94 finished with value: 10020.16 and parameters: {'ema1_window': 18, 'ema2_window': 13}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:15,373] Trial 95 finished with value: 10094.6 and parameters: {'ema1_window': 19, 'ema2_window': 18}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:15,380] Trial 96 finished with value: 10162.82 and parameters: {'ema1_window': 19, 'ema2_window': 16}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:15,621] Trial 97 finished with value: 9961.8 and parameters: {'ema1_window': 20, 'ema2_window': 11}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:15,861] Trial 98 finished with value: 10160.68 and parameters: {'ema1_window': 19, 'ema2_window': 14}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:15,869] Trial 99 finished with value: 9807.88 and parameters: {'ema1_window': 16, 'ema2_window': 17}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:16,080] Trial 100 finished with value: 9938.72 and parameters: {'ema1_window': 20, 'ema2_window': 39}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:16,089] Trial 101 finished with value: 10110.94 and parameters: {'ema1_window': 17, 'ema2_window': 15}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:16,314] Trial 102 finished with value: 9894.8 and parameters: {'ema1_window': 18, 'ema2_window': 19}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:16,322] Trial 103 finished with value: 10162.82 and parameters: {'ema1_window': 19, 'ema2_window': 16}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:16,329] Trial 104 finished with value: 10162.82 and parameters: {'ema1_window': 19, 'ema2_window': 16}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:16,564] Trial 105 finished with value: 10162.72 and parameters: {'ema1_window': 19, 'ema2_window': 15}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:16,801] Trial 106 finished with value: 10110.74 and parameters: {'ema1_window': 19, 'ema2_window': 13}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:16,809] Trial 107 finished with value: 9948.18 and parameters: {'ema1_window': 21, 'ema2_window': 31}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:16,817] Trial 108 finished with value: 10142.64 and parameters: {'ema1_window': 20, 'ema2_window': 14}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:16,824] Trial 109 finished with value: 10124.06 and parameters: {'ema1_window': 19, 'ema2_window': 17}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:16,832] Trial 110 finished with value: 10016.0 and parameters: {'ema1_window': 21, 'ema2_window': 22}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:16,839] Trial 111 finished with value: 10142.82 and parameters: {'ema1_window': 20, 'ema2_window': 15}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:16,846] Trial 112 finished with value: 10094.6 and parameters: {'ema1_window': 19, 'ema2_window': 18}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:16,854] Trial 113 finished with value: 10162.82 and parameters: {'ema1_window': 19, 'ema2_window': 16}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:16,861] Trial 114 finished with value: 10162.72 and parameters: {'ema1_window': 19, 'ema2_window': 15}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:16,869] Trial 115 finished with value: 10074.88 and parameters: {'ema1_window': 20, 'ema2_window': 17}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:16,876] Trial 116 finished with value: 10000.0 and parameters: {'ema1_window': 19, 'ema2_window': 19}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:16,884] Trial 117 finished with value: 10000.1 and parameters: {'ema1_window': 19, 'ema2_window': 12}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:17,112] Trial 118 finished with value: 10075.0 and parameters: {'ema1_window': 22, 'ema2_window': 15}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:17,120] Trial 119 finished with value: 10142.64 and parameters: {'ema1_window': 20, 'ema2_window': 14}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:17,353] Trial 120 finished with value: 9944.52 and parameters: {'ema1_window': 19, 'ema2_window': 20}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:17,362] Trial 121 finished with value: 10160.48 and parameters: {'ema1_window': 18, 'ema2_window': 15}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:17,370] Trial 122 finished with value: 10162.82 and parameters: {'ema1_window': 19, 'ema2_window': 16}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:17,601] Trial 123 finished with value: 10084.94 and parameters: {'ema1_window': 21, 'ema2_window': 17}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:17,610] Trial 124 finished with value: 10162.82 and parameters: {'ema1_window': 19, 'ema2_window': 16}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:17,617] Trial 125 finished with value: 10120.88 and parameters: {'ema1_window': 20, 'ema2_window': 13}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:17,625] Trial 126 finished with value: 10162.82 and parameters: {'ema1_window': 19, 'ema2_window': 16}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:17,633] Trial 127 finished with value: 10000.0 and parameters: {'ema1_window': 19, 'ema2_window': 19}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:17,640] Trial 128 finished with value: 10094.6 and parameters: {'ema1_window': 19, 'ema2_window': 18}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:17,648] Trial 129 finished with value: 10133.72 and parameters: {'ema1_window': 20, 'ema2_window': 16}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:17,931] Trial 130 finished with value: 10054.78 and parameters: {'ema1_window': 24, 'ema2_window': 15}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:17,940] Trial 131 finished with value: 10124.06 and parameters: {'ema1_window': 19, 'ema2_window': 17}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:17,948] Trial 132 finished with value: 10160.68 and parameters: {'ema1_window': 19, 'ema2_window': 14}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:17,955] Trial 133 finished with value: 10162.62 and parameters: {'ema1_window': 18, 'ema2_window': 16}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:17,963] Trial 134 finished with value: 10074.9 and parameters: {'ema1_window': 20, 'ema2_window': 18}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:17,971] Trial 135 finished with value: 10133.72 and parameters: {'ema1_window': 20, 'ema2_window': 16}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:18,206] Trial 136 finished with value: 10152.6 and parameters: {'ema1_window': 21, 'ema2_window': 13}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:18,215] Trial 137 finished with value: 10162.72 and parameters: {'ema1_window': 19, 'ema2_window': 15}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:18,223] Trial 138 finished with value: 10162.72 and parameters: {'ema1_window': 19, 'ema2_window': 15}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:18,464] Trial 139 finished with value: 10110.84 and parameters: {'ema1_window': 18, 'ema2_window': 14}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:18,731] Trial 140 finished with value: 9945.7 and parameters: {'ema1_window': 8, 'ema2_window': 11}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:18,740] Trial 141 finished with value: 10162.72 and parameters: {'ema1_window': 19, 'ema2_window': 15}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:18,749] Trial 142 finished with value: 10124.06 and parameters: {'ema1_window': 19, 'ema2_window': 17}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:18,757] Trial 143 finished with value: 10162.82 and parameters: {'ema1_window': 19, 'ema2_window': 16}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:18,765] Trial 144 finished with value: 10133.72 and parameters: {'ema1_window': 20, 'ema2_window': 16}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:18,773] Trial 145 finished with value: 10124.06 and parameters: {'ema1_window': 19, 'ema2_window': 17}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:18,781] Trial 146 finished with value: 10020.16 and parameters: {'ema1_window': 18, 'ema2_window': 13}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:19,030] Trial 147 finished with value: 9933.1 and parameters: {'ema1_window': 12, 'ema2_window': 14}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:19,039] Trial 148 finished with value: 10074.9 and parameters: {'ema1_window': 20, 'ema2_window': 18}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:19,047] Trial 149 finished with value: 10160.48 and parameters: {'ema1_window': 17, 'ema2_window': 16}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:19,055] Trial 150 finished with value: 10160.48 and parameters: {'ema1_window': 18, 'ema2_window': 15}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:19,063] Trial 151 finished with value: 10162.82 and parameters: {'ema1_window': 19, 'ema2_window': 16}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:19,071] Trial 152 finished with value: 10124.06 and parameters: {'ema1_window': 19, 'ema2_window': 17}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:19,078] Trial 153 finished with value: 10162.72 and parameters: {'ema1_window': 19, 'ema2_window': 15}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:19,086] Trial 154 finished with value: 10162.82 and parameters: {'ema1_window': 19, 'ema2_window': 16}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:19,094] Trial 155 finished with value: 10074.9 and parameters: {'ema1_window': 20, 'ema2_window': 18}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:19,102] Trial 156 finished with value: 10162.62 and parameters: {'ema1_window': 18, 'ema2_window': 16}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:19,335] Trial 157 finished with value: 9924.06 and parameters: {'ema1_window': 20, 'ema2_window': 42}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:19,344] Trial 158 finished with value: 10160.68 and parameters: {'ema1_window': 19, 'ema2_window': 14}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:19,352] Trial 159 finished with value: 9894.8 and parameters: {'ema1_window': 18, 'ema2_window': 19}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:19,360] Trial 160 finished with value: 10162.82 and parameters: {'ema1_window': 19, 'ema2_window': 16}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:19,368] Trial 161 finished with value: 10124.06 and parameters: {'ema1_window': 19, 'ema2_window': 17}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:19,376] Trial 162 finished with value: 10162.82 and parameters: {'ema1_window': 19, 'ema2_window': 16}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:19,384] Trial 163 finished with value: 10133.72 and parameters: {'ema1_window': 20, 'ema2_window': 16}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:19,392] Trial 164 finished with value: 10000.0 and parameters: {'ema1_window': 18, 'ema2_window': 18}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:19,400] Trial 165 finished with value: 10162.82 and parameters: {'ema1_window': 19, 'ema2_window': 16}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:19,408] Trial 166 finished with value: 10074.88 and parameters: {'ema1_window': 20, 'ema2_window': 17}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:19,416] Trial 167 finished with value: 10162.62 and parameters: {'ema1_window': 18, 'ema2_window': 16}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:19,424] Trial 168 finished with value: 10124.06 and parameters: {'ema1_window': 19, 'ema2_window': 17}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:19,432] Trial 169 finished with value: 10160.48 and parameters: {'ema1_window': 17, 'ema2_window': 16}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:19,440] Trial 170 finished with value: 10094.6 and parameters: {'ema1_window': 19, 'ema2_window': 18}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:19,448] Trial 171 finished with value: 10160.68 and parameters: {'ema1_window': 19, 'ema2_window': 14}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:19,662] Trial 172 finished with value: 9920.08 and parameters: {'ema1_window': 19, 'ema2_window': 36}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:19,671] Trial 173 finished with value: 10133.72 and parameters: {'ema1_window': 20, 'ema2_window': 16}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:19,680] Trial 174 finished with value: 10160.48 and parameters: {'ema1_window': 18, 'ema2_window': 15}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:19,688] Trial 175 finished with value: 10162.72 and parameters: {'ema1_window': 19, 'ema2_window': 15}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:19,696] Trial 176 finished with value: 10133.72 and parameters: {'ema1_window': 20, 'ema2_window': 16}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:19,704] Trial 177 finished with value: 10162.32 and parameters: {'ema1_window': 18, 'ema2_window': 17}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:19,713] Trial 178 finished with value: 10160.68 and parameters: {'ema1_window': 19, 'ema2_window': 14}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:19,721] Trial 179 finished with value: 10124.06 and parameters: {'ema1_window': 19, 'ema2_window': 17}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:19,729] Trial 180 finished with value: 10074.9 and parameters: {'ema1_window': 20, 'ema2_window': 18}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:19,737] Trial 181 finished with value: 10162.72 and parameters: {'ema1_window': 19, 'ema2_window': 15}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:19,746] Trial 182 finished with value: 10162.72 and parameters: {'ema1_window': 19, 'ema2_window': 15}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:19,754] Trial 183 finished with value: 10020.16 and parameters: {'ema1_window': 18, 'ema2_window': 13}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:19,762] Trial 184 finished with value: 10162.82 and parameters: {'ema1_window': 19, 'ema2_window': 16}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:19,985] Trial 185 finished with value: 9936.22 and parameters: {'ema1_window': 20, 'ema2_window': 26}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:19,994] Trial 186 finished with value: 10162.62 and parameters: {'ema1_window': 18, 'ema2_window': 16}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:20,002] Trial 187 finished with value: 10162.82 and parameters: {'ema1_window': 19, 'ema2_window': 16}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:20,010] Trial 188 finished with value: 10084.94 and parameters: {'ema1_window': 21, 'ema2_window': 17}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:20,019] Trial 189 finished with value: 10162.82 and parameters: {'ema1_window': 19, 'ema2_window': 16}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:20,250] Trial 190 finished with value: 10025.12 and parameters: {'ema1_window': 20, 'ema2_window': 19}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:20,260] Trial 191 finished with value: 10162.82 and parameters: {'ema1_window': 19, 'ema2_window': 16}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:20,269] Trial 192 finished with value: 10124.06 and parameters: {'ema1_window': 19, 'ema2_window': 17}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:20,278] Trial 193 finished with value: 10162.82 and parameters: {'ema1_window': 19, 'ema2_window': 16}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:20,287] Trial 194 finished with value: 10000.0 and parameters: {'ema1_window': 18, 'ema2_window': 18}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:20,295] Trial 195 finished with value: 10162.82 and parameters: {'ema1_window': 19, 'ema2_window': 16}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:20,304] Trial 196 finished with value: 10160.68 and parameters: {'ema1_window': 19, 'ema2_window': 14}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:20,313] Trial 197 finished with value: 10074.88 and parameters: {'ema1_window': 20, 'ema2_window': 17}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:20,322] Trial 198 finished with value: 10160.48 and parameters: {'ema1_window': 18, 'ema2_window': 15}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:20,331] Trial 199 finished with value: 10142.82 and parameters: {'ema1_window': 20, 'ema2_window': 15}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:20,340] Trial 200 finished with value: 10162.82 and parameters: {'ema1_window': 19, 'ema2_window': 16}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:20,349] Trial 201 finished with value: 10162.82 and parameters: {'ema1_window': 19, 'ema2_window': 16}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:20,358] Trial 202 finished with value: 10124.06 and parameters: {'ema1_window': 19, 'ema2_window': 17}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:20,367] Trial 203 finished with value: 10162.82 and parameters: {'ema1_window': 19, 'ema2_window': 16}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:20,376] Trial 204 finished with value: 10000.0 and parameters: {'ema1_window': 18, 'ema2_window': 18}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:20,385] Trial 205 finished with value: 10160.68 and parameters: {'ema1_window': 19, 'ema2_window': 14}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:20,394] Trial 206 finished with value: 10160.48 and parameters: {'ema1_window': 18, 'ema2_window': 15}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:20,403] Trial 207 finished with value: 10074.88 and parameters: {'ema1_window': 20, 'ema2_window': 17}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:20,413] Trial 208 finished with value: 10124.06 and parameters: {'ema1_window': 19, 'ema2_window': 17}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:20,681] Trial 209 finished with value: 9852.9 and parameters: {'ema1_window': 10, 'ema2_window': 16}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:20,691] Trial 210 finished with value: 10160.48 and parameters: {'ema1_window': 18, 'ema2_window': 15}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:20,701] Trial 211 finished with value: 10162.82 and parameters: {'ema1_window': 19, 'ema2_window': 16}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:20,710] Trial 212 finished with value: 10162.82 and parameters: {'ema1_window': 19, 'ema2_window': 16}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:20,719] Trial 213 finished with value: 10162.82 and parameters: {'ema1_window': 19, 'ema2_window': 16}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:20,728] Trial 214 finished with value: 10142.64 and parameters: {'ema1_window': 20, 'ema2_window': 14}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:20,736] Trial 215 finished with value: 10162.72 and parameters: {'ema1_window': 19, 'ema2_window': 15}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:20,746] Trial 216 finished with value: 10124.06 and parameters: {'ema1_window': 19, 'ema2_window': 17}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:20,755] Trial 217 finished with value: 10133.72 and parameters: {'ema1_window': 20, 'ema2_window': 16}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:20,764] Trial 218 finished with value: 10094.6 and parameters: {'ema1_window': 19, 'ema2_window': 18}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:20,773] Trial 219 finished with value: 10162.32 and parameters: {'ema1_window': 18, 'ema2_window': 17}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:20,782] Trial 220 finished with value: 10142.82 and parameters: {'ema1_window': 20, 'ema2_window': 15}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:20,791] Trial 221 finished with value: 10162.82 and parameters: {'ema1_window': 19, 'ema2_window': 16}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:20,800] Trial 222 finished with value: 10162.82 and parameters: {'ema1_window': 19, 'ema2_window': 16}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:20,810] Trial 223 finished with value: 10162.82 and parameters: {'ema1_window': 19, 'ema2_window': 16}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:20,819] Trial 224 finished with value: 10162.72 and parameters: {'ema1_window': 19, 'ema2_window': 15}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:20,827] Trial 225 finished with value: 10162.32 and parameters: {'ema1_window': 18, 'ema2_window': 17}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:20,836] Trial 226 finished with value: 10160.68 and parameters: {'ema1_window': 19, 'ema2_window': 14}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:20,845] Trial 227 finished with value: 10000.0 and parameters: {'ema1_window': 18, 'ema2_window': 18}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:20,854] Trial 228 finished with value: 10074.88 and parameters: {'ema1_window': 20, 'ema2_window': 17}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:20,863] Trial 229 finished with value: 10162.82 and parameters: {'ema1_window': 19, 'ema2_window': 16}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:20,872] Trial 230 finished with value: 10162.82 and parameters: {'ema1_window': 19, 'ema2_window': 16}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:20,881] Trial 231 finished with value: 10162.82 and parameters: {'ema1_window': 19, 'ema2_window': 16}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:20,890] Trial 232 finished with value: 10162.72 and parameters: {'ema1_window': 19, 'ema2_window': 15}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:20,899] Trial 233 finished with value: 10162.82 and parameters: {'ema1_window': 19, 'ema2_window': 16}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:20,908] Trial 234 finished with value: 10074.88 and parameters: {'ema1_window': 20, 'ema2_window': 17}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:21,128] Trial 235 finished with value: 9966.68 and parameters: {'ema1_window': 18, 'ema2_window': 33}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:21,138] Trial 236 finished with value: 10162.72 and parameters: {'ema1_window': 19, 'ema2_window': 15}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:21,147] Trial 237 finished with value: 10133.72 and parameters: {'ema1_window': 20, 'ema2_window': 16}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:21,156] Trial 238 finished with value: 10160.48 and parameters: {'ema1_window': 18, 'ema2_window': 15}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:21,165] Trial 239 finished with value: 10094.6 and parameters: {'ema1_window': 19, 'ema2_window': 18}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:21,174] Trial 240 finished with value: 10124.06 and parameters: {'ema1_window': 19, 'ema2_window': 17}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:21,183] Trial 241 finished with value: 10162.82 and parameters: {'ema1_window': 19, 'ema2_window': 16}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:21,192] Trial 242 finished with value: 10162.82 and parameters: {'ema1_window': 19, 'ema2_window': 16}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:21,201] Trial 243 finished with value: 10162.72 and parameters: {'ema1_window': 19, 'ema2_window': 15}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:21,210] Trial 244 finished with value: 10124.06 and parameters: {'ema1_window': 19, 'ema2_window': 17}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:21,220] Trial 245 finished with value: 10142.64 and parameters: {'ema1_window': 20, 'ema2_window': 14}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:21,229] Trial 246 finished with value: 10162.82 and parameters: {'ema1_window': 19, 'ema2_window': 16}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:21,238] Trial 247 finished with value: 10162.32 and parameters: {'ema1_window': 18, 'ema2_window': 17}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:21,248] Trial 248 finished with value: 10142.82 and parameters: {'ema1_window': 20, 'ema2_window': 15}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:21,258] Trial 249 finished with value: 10162.62 and parameters: {'ema1_window': 18, 'ema2_window': 16}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:21,268] Trial 250 finished with value: 10094.6 and parameters: {'ema1_window': 19, 'ema2_window': 18}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:21,277] Trial 251 finished with value: 10162.72 and parameters: {'ema1_window': 19, 'ema2_window': 15}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:21,501] Trial 252 finished with value: 9976.74 and parameters: {'ema1_window': 20, 'ema2_window': 28}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:21,511] Trial 253 finished with value: 10124.06 and parameters: {'ema1_window': 19, 'ema2_window': 17}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:21,521] Trial 254 finished with value: 10160.68 and parameters: {'ema1_window': 19, 'ema2_window': 14}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:21,530] Trial 255 finished with value: 10162.62 and parameters: {'ema1_window': 18, 'ema2_window': 16}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:21,539] Trial 256 finished with value: 10142.82 and parameters: {'ema1_window': 20, 'ema2_window': 15}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:21,549] Trial 257 finished with value: 10162.32 and parameters: {'ema1_window': 18, 'ema2_window': 17}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:21,558] Trial 258 finished with value: 10162.82 and parameters: {'ema1_window': 19, 'ema2_window': 16}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:21,567] Trial 259 finished with value: 10160.68 and parameters: {'ema1_window': 19, 'ema2_window': 14}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:21,576] Trial 260 finished with value: 10074.88 and parameters: {'ema1_window': 20, 'ema2_window': 17}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:21,841] Trial 261 finished with value: 9935.0 and parameters: {'ema1_window': 19, 'ema2_window': 47}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:21,852] Trial 262 finished with value: 10000.0 and parameters: {'ema1_window': 18, 'ema2_window': 18}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:21,862] Trial 263 finished with value: 10162.82 and parameters: {'ema1_window': 19, 'ema2_window': 16}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:21,872] Trial 264 finished with value: 10162.72 and parameters: {'ema1_window': 19, 'ema2_window': 15}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:21,883] Trial 265 finished with value: 10133.72 and parameters: {'ema1_window': 20, 'ema2_window': 16}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:21,894] Trial 266 finished with value: 10162.62 and parameters: {'ema1_window': 18, 'ema2_window': 16}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:21,905] Trial 267 finished with value: 10000.0 and parameters: {'ema1_window': 19, 'ema2_window': 19}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:21,915] Trial 268 finished with value: 10142.82 and parameters: {'ema1_window': 20, 'ema2_window': 15}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:21,931] Trial 269 finished with value: 10124.06 and parameters: {'ema1_window': 19, 'ema2_window': 17}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:21,943] Trial 270 finished with value: 10110.84 and parameters: {'ema1_window': 18, 'ema2_window': 14}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:21,954] Trial 271 finished with value: 10124.06 and parameters: {'ema1_window': 19, 'ema2_window': 17}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:21,963] Trial 272 finished with value: 10142.82 and parameters: {'ema1_window': 20, 'ema2_window': 15}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:21,973] Trial 273 finished with value: 10094.6 and parameters: {'ema1_window': 19, 'ema2_window': 18}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:21,983] Trial 274 finished with value: 10162.62 and parameters: {'ema1_window': 18, 'ema2_window': 16}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:21,992] Trial 275 finished with value: 10124.06 and parameters: {'ema1_window': 19, 'ema2_window': 17}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:22,002] Trial 276 finished with value: 10120.88 and parameters: {'ema1_window': 20, 'ema2_window': 13}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:22,012] Trial 277 finished with value: 10162.72 and parameters: {'ema1_window': 19, 'ema2_window': 15}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:22,022] Trial 278 finished with value: 10162.62 and parameters: {'ema1_window': 18, 'ema2_window': 16}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:22,032] Trial 279 finished with value: 10124.06 and parameters: {'ema1_window': 19, 'ema2_window': 17}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:22,273] Trial 280 finished with value: 10085.04 and parameters: {'ema1_window': 24, 'ema2_window': 14}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:22,284] Trial 281 finished with value: 10133.72 and parameters: {'ema1_window': 20, 'ema2_window': 16}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:22,294] Trial 282 finished with value: 10162.72 and parameters: {'ema1_window': 19, 'ema2_window': 15}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:22,303] Trial 283 finished with value: 10094.6 and parameters: {'ema1_window': 19, 'ema2_window': 18}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:22,560] Trial 284 finished with value: 9986.14 and parameters: {'ema1_window': 13, 'ema2_window': 16}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:22,572] Trial 285 finished with value: 10160.48 and parameters: {'ema1_window': 18, 'ema2_window': 15}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:22,694] Trial 286 finished with value: 10000.0 and parameters: {'ema1_window': 17, 'ema2_window': 17}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:22,705] Trial 287 finished with value: 10074.9 and parameters: {'ema1_window': 20, 'ema2_window': 18}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:22,715] Trial 288 finished with value: 10162.82 and parameters: {'ema1_window': 19, 'ema2_window': 16}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:22,725] Trial 289 finished with value: 10110.84 and parameters: {'ema1_window': 18, 'ema2_window': 14}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:22,734] Trial 290 finished with value: 10124.06 and parameters: {'ema1_window': 19, 'ema2_window': 17}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:22,744] Trial 291 finished with value: 10142.82 and parameters: {'ema1_window': 20, 'ema2_window': 15}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:22,981] Trial 292 finished with value: 10064.82 and parameters: {'ema1_window': 23, 'ema2_window': 16}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:22,992] Trial 293 finished with value: 10124.06 and parameters: {'ema1_window': 19, 'ema2_window': 17}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:23,002] Trial 294 finished with value: 10160.48 and parameters: {'ema1_window': 18, 'ema2_window': 15}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:23,012] Trial 295 finished with value: 10162.82 and parameters: {'ema1_window': 19, 'ema2_window': 16}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:23,238] Trial 296 finished with value: 9935.92 and parameters: {'ema1_window': 20, 'ema2_window': 25}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:23,465] Trial 297 finished with value: 9974.12 and parameters: {'ema1_window': 25, 'ema2_window': 19}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:23,476] Trial 298 finished with value: 10162.82 and parameters: {'ema1_window': 19, 'ema2_window': 16}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:23,486] Trial 299 finished with value: 10065.02 and parameters: {'ema1_window': 21, 'ema2_window': 18}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:23,760] Trial 300 finished with value: 9944.7 and parameters: {'ema1_window': 6, 'ema2_window': 15}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:23,770] Trial 301 finished with value: 10110.74 and parameters: {'ema1_window': 19, 'ema2_window': 13}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:23,780] Trial 302 finished with value: 10110.84 and parameters: {'ema1_window': 18, 'ema2_window': 14}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:23,790] Trial 303 finished with value: 10124.06 and parameters: {'ema1_window': 19, 'ema2_window': 17}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:23,800] Trial 304 finished with value: 10133.72 and parameters: {'ema1_window': 20, 'ema2_window': 16}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:23,810] Trial 305 finished with value: 10162.72 and parameters: {'ema1_window': 19, 'ema2_window': 15}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:24,059] Trial 306 finished with value: 9975.46 and parameters: {'ema1_window': 14, 'ema2_window': 16}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:24,069] Trial 307 finished with value: 10124.06 and parameters: {'ema1_window': 19, 'ema2_window': 17}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:24,079] Trial 308 finished with value: 10160.48 and parameters: {'ema1_window': 18, 'ema2_window': 15}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:24,089] Trial 309 finished with value: 10074.9 and parameters: {'ema1_window': 20, 'ema2_window': 18}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:24,099] Trial 310 finished with value: 10162.62 and parameters: {'ema1_window': 18, 'ema2_window': 16}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:24,109] Trial 311 finished with value: 10160.68 and parameters: {'ema1_window': 19, 'ema2_window': 14}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:24,119] Trial 312 finished with value: 9920.08 and parameters: {'ema1_window': 19, 'ema2_window': 36}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:24,128] Trial 313 finished with value: 10074.88 and parameters: {'ema1_window': 20, 'ema2_window': 17}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:24,138] Trial 314 finished with value: 10124.06 and parameters: {'ema1_window': 19, 'ema2_window': 17}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:24,368] Trial 315 finished with value: 9926.7 and parameters: {'ema1_window': 18, 'ema2_window': 30}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:24,379] Trial 316 finished with value: 10162.72 and parameters: {'ema1_window': 19, 'ema2_window': 15}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:24,389] Trial 317 finished with value: 9894.8 and parameters: {'ema1_window': 18, 'ema2_window': 19}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:24,399] Trial 318 finished with value: 10133.72 and parameters: {'ema1_window': 20, 'ema2_window': 16}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:24,409] Trial 319 finished with value: 10162.82 and parameters: {'ema1_window': 19, 'ema2_window': 16}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:24,649] Trial 320 finished with value: 9806.52 and parameters: {'ema1_window': 17, 'ema2_window': 18}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:24,860] Trial 321 finished with value: 9942.72 and parameters: {'ema1_window': 19, 'ema2_window': 41}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:24,872] Trial 322 finished with value: 10142.64 and parameters: {'ema1_window': 20, 'ema2_window': 14}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:24,882] Trial 323 finished with value: 10162.72 and parameters: {'ema1_window': 19, 'ema2_window': 15}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:24,892] Trial 324 finished with value: 10162.32 and parameters: {'ema1_window': 18, 'ema2_window': 17}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:24,902] Trial 325 finished with value: 10110.74 and parameters: {'ema1_window': 19, 'ema2_window': 13}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:24,912] Trial 326 finished with value: 10133.72 and parameters: {'ema1_window': 20, 'ema2_window': 16}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:24,922] Trial 327 finished with value: 10162.32 and parameters: {'ema1_window': 18, 'ema2_window': 17}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:24,932] Trial 328 finished with value: 10160.68 and parameters: {'ema1_window': 19, 'ema2_window': 14}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:24,942] Trial 329 finished with value: 10142.82 and parameters: {'ema1_window': 20, 'ema2_window': 15}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:25,174] Trial 330 finished with value: 10074.98 and parameters: {'ema1_window': 21, 'ema2_window': 16}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:25,186] Trial 331 finished with value: 10094.6 and parameters: {'ema1_window': 19, 'ema2_window': 18}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:25,196] Trial 332 finished with value: 10162.72 and parameters: {'ema1_window': 19, 'ema2_window': 15}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:25,206] Trial 333 finished with value: 10162.32 and parameters: {'ema1_window': 18, 'ema2_window': 17}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:25,216] Trial 334 finished with value: 10162.82 and parameters: {'ema1_window': 19, 'ema2_window': 16}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:25,226] Trial 335 finished with value: 10142.82 and parameters: {'ema1_window': 20, 'ema2_window': 15}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:25,236] Trial 336 finished with value: 10124.06 and parameters: {'ema1_window': 19, 'ema2_window': 17}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:25,533] Trial 337 finished with value: 9974.12 and parameters: {'ema1_window': 12, 'ema2_window': 16}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:25,543] Trial 338 finished with value: 9894.8 and parameters: {'ema1_window': 18, 'ema2_window': 19}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:25,554] Trial 339 finished with value: 10074.9 and parameters: {'ema1_window': 20, 'ema2_window': 18}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:25,564] Trial 340 finished with value: 10162.72 and parameters: {'ema1_window': 19, 'ema2_window': 15}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:25,766] Trial 341 finished with value: 9934.2 and parameters: {'ema1_window': 18, 'ema2_window': 50}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:25,777] Trial 342 finished with value: 10110.74 and parameters: {'ema1_window': 19, 'ema2_window': 13}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:25,788] Trial 343 finished with value: 10110.84 and parameters: {'ema1_window': 18, 'ema2_window': 14}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:25,799] Trial 344 finished with value: 10124.06 and parameters: {'ema1_window': 19, 'ema2_window': 17}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:25,809] Trial 345 finished with value: 10133.72 and parameters: {'ema1_window': 20, 'ema2_window': 16}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:25,820] Trial 346 finished with value: 10162.82 and parameters: {'ema1_window': 19, 'ema2_window': 16}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:25,830] Trial 347 finished with value: 10124.06 and parameters: {'ema1_window': 19, 'ema2_window': 17}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:25,840] Trial 348 finished with value: 10142.82 and parameters: {'ema1_window': 20, 'ema2_window': 15}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:25,851] Trial 349 finished with value: 10160.68 and parameters: {'ema1_window': 19, 'ema2_window': 14}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:25,861] Trial 350 finished with value: 10162.32 and parameters: {'ema1_window': 18, 'ema2_window': 17}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:25,872] Trial 351 finished with value: 10094.6 and parameters: {'ema1_window': 19, 'ema2_window': 18}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:25,988] Trial 352 finished with value: 10000.0 and parameters: {'ema1_window': 20, 'ema2_window': 20}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:25,999] Trial 353 finished with value: 10162.82 and parameters: {'ema1_window': 19, 'ema2_window': 16}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:26,009] Trial 354 finished with value: 10162.72 and parameters: {'ema1_window': 19, 'ema2_window': 15}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:26,020] Trial 355 finished with value: 10162.62 and parameters: {'ema1_window': 18, 'ema2_window': 16}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:26,031] Trial 356 finished with value: 10162.62 and parameters: {'ema1_window': 18, 'ema2_window': 16}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:26,041] Trial 357 finished with value: 10160.68 and parameters: {'ema1_window': 19, 'ema2_window': 14}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:26,052] Trial 358 finished with value: 10000.0 and parameters: {'ema1_window': 17, 'ema2_window': 17}. Best is trial 19 with value: 10162.82.\n[I 2024-07-02 16:44:26,291] Trial 359 finished with value: 10163.2 and parameters: {'ema1_window': 21, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:26,550] Trial 360 finished with value: 9819.04 and parameters: {'ema1_window': 11, 'ema2_window': 12}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:26,561] Trial 361 finished with value: 10163.2 and parameters: {'ema1_window': 21, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:26,797] Trial 362 finished with value: 10153.36 and parameters: {'ema1_window': 22, 'ema2_window': 14}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:26,809] Trial 363 finished with value: 10163.2 and parameters: {'ema1_window': 21, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:26,820] Trial 364 finished with value: 10075.0 and parameters: {'ema1_window': 22, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:26,831] Trial 365 finished with value: 10152.6 and parameters: {'ema1_window': 21, 'ema2_window': 13}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:26,842] Trial 366 finished with value: 10143.02 and parameters: {'ema1_window': 21, 'ema2_window': 14}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:27,061] Trial 367 finished with value: 9886.96 and parameters: {'ema1_window': 20, 'ema2_window': 27}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:27,287] Trial 368 finished with value: 9975.92 and parameters: {'ema1_window': 21, 'ema2_window': 23}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:27,300] Trial 369 finished with value: 10075.0 and parameters: {'ema1_window': 22, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:27,311] Trial 370 finished with value: 10163.2 and parameters: {'ema1_window': 21, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:27,322] Trial 371 finished with value: 10153.36 and parameters: {'ema1_window': 22, 'ema2_window': 14}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:27,333] Trial 372 finished with value: 10163.2 and parameters: {'ema1_window': 21, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:27,344] Trial 373 finished with value: 10152.6 and parameters: {'ema1_window': 21, 'ema2_window': 13}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:27,356] Trial 374 finished with value: 10075.0 and parameters: {'ema1_window': 22, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:27,367] Trial 375 finished with value: 10143.02 and parameters: {'ema1_window': 21, 'ema2_window': 14}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:27,597] Trial 376 finished with value: 10085.04 and parameters: {'ema1_window': 23, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:27,610] Trial 377 finished with value: 10163.2 and parameters: {'ema1_window': 21, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:27,622] Trial 378 finished with value: 10143.02 and parameters: {'ema1_window': 21, 'ema2_window': 14}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:27,863] Trial 379 finished with value: 10091.24 and parameters: {'ema1_window': 21, 'ema2_window': 12}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:27,876] Trial 380 finished with value: 10091.24 and parameters: {'ema1_window': 21, 'ema2_window': 12}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:27,887] Trial 381 finished with value: 10163.2 and parameters: {'ema1_window': 21, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:28,127] Trial 382 finished with value: 10142.84 and parameters: {'ema1_window': 22, 'ema2_window': 13}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:28,139] Trial 383 finished with value: 10075.0 and parameters: {'ema1_window': 22, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:28,151] Trial 384 finished with value: 10143.02 and parameters: {'ema1_window': 21, 'ema2_window': 14}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:28,162] Trial 385 finished with value: 10143.02 and parameters: {'ema1_window': 21, 'ema2_window': 14}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:28,173] Trial 386 finished with value: 10163.2 and parameters: {'ema1_window': 21, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:28,185] Trial 387 finished with value: 10163.2 and parameters: {'ema1_window': 21, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:28,426] Trial 388 finished with value: 10030.54 and parameters: {'ema1_window': 22, 'ema2_window': 10}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:28,439] Trial 389 finished with value: 10152.6 and parameters: {'ema1_window': 21, 'ema2_window': 13}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:28,451] Trial 390 finished with value: 10163.2 and parameters: {'ema1_window': 21, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:28,463] Trial 391 finished with value: 10143.02 and parameters: {'ema1_window': 21, 'ema2_window': 14}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:28,476] Trial 392 finished with value: 10152.6 and parameters: {'ema1_window': 21, 'ema2_window': 13}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:28,489] Trial 393 finished with value: 10163.2 and parameters: {'ema1_window': 21, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:28,501] Trial 394 finished with value: 10075.0 and parameters: {'ema1_window': 22, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:28,513] Trial 395 finished with value: 10143.02 and parameters: {'ema1_window': 21, 'ema2_window': 14}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:28,524] Trial 396 finished with value: 10152.6 and parameters: {'ema1_window': 21, 'ema2_window': 13}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:28,536] Trial 397 finished with value: 10075.0 and parameters: {'ema1_window': 22, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:28,548] Trial 398 finished with value: 10163.2 and parameters: {'ema1_window': 21, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:28,760] Trial 399 finished with value: 9928.24 and parameters: {'ema1_window': 21, 'ema2_window': 32}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:28,773] Trial 400 finished with value: 10143.02 and parameters: {'ema1_window': 21, 'ema2_window': 14}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:28,785] Trial 401 finished with value: 10152.6 and parameters: {'ema1_window': 21, 'ema2_window': 13}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:28,797] Trial 402 finished with value: 10075.0 and parameters: {'ema1_window': 22, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:28,808] Trial 403 finished with value: 10163.2 and parameters: {'ema1_window': 21, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:28,820] Trial 404 finished with value: 10152.6 and parameters: {'ema1_window': 21, 'ema2_window': 13}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:28,832] Trial 405 finished with value: 10143.02 and parameters: {'ema1_window': 21, 'ema2_window': 14}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:28,844] Trial 406 finished with value: 10075.0 and parameters: {'ema1_window': 22, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:28,855] Trial 407 finished with value: 10091.24 and parameters: {'ema1_window': 21, 'ema2_window': 12}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:28,867] Trial 408 finished with value: 10085.04 and parameters: {'ema1_window': 23, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:28,879] Trial 409 finished with value: 10143.02 and parameters: {'ema1_window': 21, 'ema2_window': 14}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:28,891] Trial 410 finished with value: 10163.2 and parameters: {'ema1_window': 21, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:28,902] Trial 411 finished with value: 10153.36 and parameters: {'ema1_window': 22, 'ema2_window': 14}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:28,914] Trial 412 finished with value: 10163.2 and parameters: {'ema1_window': 21, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:28,926] Trial 413 finished with value: 10143.02 and parameters: {'ema1_window': 21, 'ema2_window': 14}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:28,939] Trial 414 finished with value: 10075.0 and parameters: {'ema1_window': 22, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:28,951] Trial 415 finished with value: 10163.2 and parameters: {'ema1_window': 21, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:28,962] Trial 416 finished with value: 10152.6 and parameters: {'ema1_window': 21, 'ema2_window': 13}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:28,974] Trial 417 finished with value: 10143.02 and parameters: {'ema1_window': 21, 'ema2_window': 14}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:29,274] Trial 418 finished with value: 10162.48 and parameters: {'ema1_window': 22, 'ema2_window': 12}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:29,286] Trial 419 finished with value: 10163.2 and parameters: {'ema1_window': 21, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:29,299] Trial 420 finished with value: 10143.02 and parameters: {'ema1_window': 21, 'ema2_window': 14}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:29,313] Trial 421 finished with value: 10152.6 and parameters: {'ema1_window': 21, 'ema2_window': 13}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:29,559] Trial 422 finished with value: 10090.94 and parameters: {'ema1_window': 22, 'ema2_window': 11}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:29,572] Trial 423 finished with value: 10163.2 and parameters: {'ema1_window': 21, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:29,585] Trial 424 finished with value: 10163.2 and parameters: {'ema1_window': 21, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:29,597] Trial 425 finished with value: 10163.2 and parameters: {'ema1_window': 21, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:29,609] Trial 426 finished with value: 10143.02 and parameters: {'ema1_window': 21, 'ema2_window': 14}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:29,621] Trial 427 finished with value: 10152.6 and parameters: {'ema1_window': 21, 'ema2_window': 13}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:29,633] Trial 428 finished with value: 10163.2 and parameters: {'ema1_window': 21, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:29,645] Trial 429 finished with value: 10075.0 and parameters: {'ema1_window': 22, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:29,657] Trial 430 finished with value: 10143.02 and parameters: {'ema1_window': 21, 'ema2_window': 14}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:29,669] Trial 431 finished with value: 10163.2 and parameters: {'ema1_window': 21, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:29,683] Trial 432 finished with value: 10152.6 and parameters: {'ema1_window': 21, 'ema2_window': 13}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:29,695] Trial 433 finished with value: 10163.2 and parameters: {'ema1_window': 21, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:29,707] Trial 434 finished with value: 10153.36 and parameters: {'ema1_window': 22, 'ema2_window': 14}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:29,720] Trial 435 finished with value: 10163.2 and parameters: {'ema1_window': 21, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:29,732] Trial 436 finished with value: 10091.24 and parameters: {'ema1_window': 21, 'ema2_window': 12}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:29,744] Trial 437 finished with value: 10143.02 and parameters: {'ema1_window': 21, 'ema2_window': 14}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:29,756] Trial 438 finished with value: 10075.0 and parameters: {'ema1_window': 22, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:29,769] Trial 439 finished with value: 10152.6 and parameters: {'ema1_window': 21, 'ema2_window': 13}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:29,781] Trial 440 finished with value: 10163.2 and parameters: {'ema1_window': 21, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:29,793] Trial 441 finished with value: 10163.2 and parameters: {'ema1_window': 21, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:29,805] Trial 442 finished with value: 10153.36 and parameters: {'ema1_window': 22, 'ema2_window': 14}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:29,818] Trial 443 finished with value: 10152.6 and parameters: {'ema1_window': 21, 'ema2_window': 13}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:29,830] Trial 444 finished with value: 10163.2 and parameters: {'ema1_window': 21, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:29,841] Trial 445 finished with value: 10163.2 and parameters: {'ema1_window': 21, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:29,855] Trial 446 finished with value: 10153.36 and parameters: {'ema1_window': 22, 'ema2_window': 14}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:29,869] Trial 447 finished with value: 10163.2 and parameters: {'ema1_window': 21, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:29,882] Trial 448 finished with value: 10143.02 and parameters: {'ema1_window': 21, 'ema2_window': 14}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:29,894] Trial 449 finished with value: 10075.0 and parameters: {'ema1_window': 22, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:29,906] Trial 450 finished with value: 10163.2 and parameters: {'ema1_window': 21, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:30,140] Trial 451 finished with value: 10095.32 and parameters: {'ema1_window': 23, 'ema2_window': 14}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:30,153] Trial 452 finished with value: 10163.2 and parameters: {'ema1_window': 21, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:30,165] Trial 453 finished with value: 10152.6 and parameters: {'ema1_window': 21, 'ema2_window': 13}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:30,177] Trial 454 finished with value: 10153.36 and parameters: {'ema1_window': 22, 'ema2_window': 14}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:30,189] Trial 455 finished with value: 10091.24 and parameters: {'ema1_window': 21, 'ema2_window': 12}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:30,201] Trial 456 finished with value: 10163.2 and parameters: {'ema1_window': 21, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:30,213] Trial 457 finished with value: 10142.84 and parameters: {'ema1_window': 22, 'ema2_window': 13}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:30,224] Trial 458 finished with value: 10143.02 and parameters: {'ema1_window': 21, 'ema2_window': 14}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:30,430] Trial 459 finished with value: 10023.76 and parameters: {'ema1_window': 22, 'ema2_window': 46}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:30,443] Trial 460 finished with value: 10163.2 and parameters: {'ema1_window': 21, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:30,455] Trial 461 finished with value: 10163.2 and parameters: {'ema1_window': 21, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:30,660] Trial 462 finished with value: 9938.82 and parameters: {'ema1_window': 22, 'ema2_window': 37}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:30,673] Trial 463 finished with value: 10143.02 and parameters: {'ema1_window': 21, 'ema2_window': 14}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:30,685] Trial 464 finished with value: 10163.2 and parameters: {'ema1_window': 21, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:30,697] Trial 465 finished with value: 10142.84 and parameters: {'ema1_window': 22, 'ema2_window': 13}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:30,709] Trial 466 finished with value: 10143.02 and parameters: {'ema1_window': 21, 'ema2_window': 14}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:30,720] Trial 467 finished with value: 10163.2 and parameters: {'ema1_window': 21, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:30,732] Trial 468 finished with value: 10075.0 and parameters: {'ema1_window': 22, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:30,743] Trial 469 finished with value: 10152.6 and parameters: {'ema1_window': 21, 'ema2_window': 13}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:30,755] Trial 470 finished with value: 10143.02 and parameters: {'ema1_window': 21, 'ema2_window': 14}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:30,767] Trial 471 finished with value: 10163.2 and parameters: {'ema1_window': 21, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:30,780] Trial 472 finished with value: 10162.48 and parameters: {'ema1_window': 22, 'ema2_window': 12}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:30,792] Trial 473 finished with value: 10143.02 and parameters: {'ema1_window': 21, 'ema2_window': 14}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:30,804] Trial 474 finished with value: 10085.04 and parameters: {'ema1_window': 23, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:30,817] Trial 475 finished with value: 10143.02 and parameters: {'ema1_window': 21, 'ema2_window': 14}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:31,024] Trial 476 finished with value: 9964.26 and parameters: {'ema1_window': 22, 'ema2_window': 44}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:31,038] Trial 477 finished with value: 10163.2 and parameters: {'ema1_window': 21, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:31,050] Trial 478 finished with value: 10152.6 and parameters: {'ema1_window': 21, 'ema2_window': 13}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:31,283] Trial 479 finished with value: 10085.04 and parameters: {'ema1_window': 22, 'ema2_window': 16}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:31,297] Trial 480 finished with value: 10163.2 and parameters: {'ema1_window': 21, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:31,309] Trial 481 finished with value: 10163.2 and parameters: {'ema1_window': 21, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:31,321] Trial 482 finished with value: 10153.36 and parameters: {'ema1_window': 22, 'ema2_window': 14}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:31,333] Trial 483 finished with value: 10143.02 and parameters: {'ema1_window': 21, 'ema2_window': 14}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:31,345] Trial 484 finished with value: 10074.98 and parameters: {'ema1_window': 21, 'ema2_window': 16}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:31,357] Trial 485 finished with value: 10075.0 and parameters: {'ema1_window': 22, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:31,566] Trial 486 finished with value: 9924.46 and parameters: {'ema1_window': 21, 'ema2_window': 39}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:31,580] Trial 487 finished with value: 10152.6 and parameters: {'ema1_window': 21, 'ema2_window': 13}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:31,593] Trial 488 finished with value: 10085.04 and parameters: {'ema1_window': 22, 'ema2_window': 16}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:31,606] Trial 489 finished with value: 10142.64 and parameters: {'ema1_window': 20, 'ema2_window': 14}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:31,619] Trial 490 finished with value: 10163.2 and parameters: {'ema1_window': 21, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:31,632] Trial 491 finished with value: 10091.24 and parameters: {'ema1_window': 21, 'ema2_window': 12}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:31,646] Trial 492 finished with value: 10085.04 and parameters: {'ema1_window': 22, 'ema2_window': 16}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:31,658] Trial 493 finished with value: 10142.64 and parameters: {'ema1_window': 20, 'ema2_window': 14}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:31,881] Trial 494 finished with value: 9976.76 and parameters: {'ema1_window': 21, 'ema2_window': 29}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:31,896] Trial 495 finished with value: 10075.0 and parameters: {'ema1_window': 22, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:31,909] Trial 496 finished with value: 10133.72 and parameters: {'ema1_window': 20, 'ema2_window': 16}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:32,137] Trial 497 finished with value: 9870.42 and parameters: {'ema1_window': 21, 'ema2_window': 35}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:32,151] Trial 498 finished with value: 10152.6 and parameters: {'ema1_window': 21, 'ema2_window': 13}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:32,164] Trial 499 finished with value: 10163.2 and parameters: {'ema1_window': 21, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:32,177] Trial 500 finished with value: 10142.64 and parameters: {'ema1_window': 20, 'ema2_window': 14}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:32,189] Trial 501 finished with value: 10085.04 and parameters: {'ema1_window': 22, 'ema2_window': 16}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:32,202] Trial 502 finished with value: 10163.2 and parameters: {'ema1_window': 21, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:32,214] Trial 503 finished with value: 10152.6 and parameters: {'ema1_window': 21, 'ema2_window': 13}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:32,227] Trial 504 finished with value: 10153.36 and parameters: {'ema1_window': 22, 'ema2_window': 14}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:32,461] Trial 505 finished with value: 10045.48 and parameters: {'ema1_window': 20, 'ema2_window': 22}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:32,475] Trial 506 finished with value: 10163.2 and parameters: {'ema1_window': 21, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:32,488] Trial 507 finished with value: 10074.98 and parameters: {'ema1_window': 21, 'ema2_window': 16}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:32,500] Trial 508 finished with value: 10085.04 and parameters: {'ema1_window': 22, 'ema2_window': 16}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:32,513] Trial 509 finished with value: 9961.8 and parameters: {'ema1_window': 20, 'ema2_window': 11}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:32,526] Trial 510 finished with value: 10143.02 and parameters: {'ema1_window': 21, 'ema2_window': 14}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:32,538] Trial 511 finished with value: 10163.2 and parameters: {'ema1_window': 21, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:32,761] Trial 512 finished with value: 9926.5 and parameters: {'ema1_window': 23, 'ema2_window': 25}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:32,775] Trial 513 finished with value: 10142.82 and parameters: {'ema1_window': 20, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:32,788] Trial 514 finished with value: 10153.36 and parameters: {'ema1_window': 22, 'ema2_window': 14}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:32,800] Trial 515 finished with value: 10074.98 and parameters: {'ema1_window': 21, 'ema2_window': 16}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:33,095] Trial 516 finished with value: 9833.88 and parameters: {'ema1_window': 9, 'ema2_window': 13}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:33,110] Trial 517 finished with value: 10074.98 and parameters: {'ema1_window': 21, 'ema2_window': 16}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:33,123] Trial 518 finished with value: 10163.2 and parameters: {'ema1_window': 21, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:33,135] Trial 519 finished with value: 10142.64 and parameters: {'ema1_window': 20, 'ema2_window': 14}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:33,148] Trial 520 finished with value: 10075.0 and parameters: {'ema1_window': 22, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:33,161] Trial 521 finished with value: 10074.98 and parameters: {'ema1_window': 21, 'ema2_window': 16}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:33,498] Trial 522 finished with value: 9874.14 and parameters: {'ema1_window': 7, 'ema2_window': 14}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:33,512] Trial 523 finished with value: 10120.88 and parameters: {'ema1_window': 20, 'ema2_window': 13}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:33,525] Trial 524 finished with value: 10162.48 and parameters: {'ema1_window': 22, 'ema2_window': 12}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:33,537] Trial 525 finished with value: 10163.2 and parameters: {'ema1_window': 21, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:33,550] Trial 526 finished with value: 10143.02 and parameters: {'ema1_window': 21, 'ema2_window': 14}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:33,563] Trial 527 finished with value: 10085.04 and parameters: {'ema1_window': 22, 'ema2_window': 16}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:33,576] Trial 528 finished with value: 10142.82 and parameters: {'ema1_window': 20, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:33,589] Trial 529 finished with value: 10074.98 and parameters: {'ema1_window': 21, 'ema2_window': 16}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:33,602] Trial 530 finished with value: 10143.02 and parameters: {'ema1_window': 21, 'ema2_window': 14}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:33,865] Trial 531 finished with value: 10064.92 and parameters: {'ema1_window': 22, 'ema2_window': 17}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:33,879] Trial 532 finished with value: 10163.2 and parameters: {'ema1_window': 21, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:33,892] Trial 533 finished with value: 10120.88 and parameters: {'ema1_window': 20, 'ema2_window': 13}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:33,905] Trial 534 finished with value: 10074.98 and parameters: {'ema1_window': 21, 'ema2_window': 16}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:34,191] Trial 535 finished with value: 9935.76 and parameters: {'ema1_window': 5, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:34,205] Trial 536 finished with value: 10153.36 and parameters: {'ema1_window': 22, 'ema2_window': 14}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:34,220] Trial 537 finished with value: 10142.82 and parameters: {'ema1_window': 20, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:34,236] Trial 538 finished with value: 10084.94 and parameters: {'ema1_window': 21, 'ema2_window': 17}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:34,251] Trial 539 finished with value: 10143.02 and parameters: {'ema1_window': 21, 'ema2_window': 14}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:34,264] Trial 540 finished with value: 10064.82 and parameters: {'ema1_window': 23, 'ema2_window': 16}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:34,277] Trial 541 finished with value: 10142.82 and parameters: {'ema1_window': 20, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:34,290] Trial 542 finished with value: 10152.6 and parameters: {'ema1_window': 21, 'ema2_window': 13}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:34,303] Trial 543 finished with value: 10085.04 and parameters: {'ema1_window': 22, 'ema2_window': 16}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:34,316] Trial 544 finished with value: 10163.2 and parameters: {'ema1_window': 21, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:34,328] Trial 545 finished with value: 10142.64 and parameters: {'ema1_window': 20, 'ema2_window': 14}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:34,540] Trial 546 finished with value: 9923.96 and parameters: {'ema1_window': 22, 'ema2_window': 41}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:34,554] Trial 547 finished with value: 10143.02 and parameters: {'ema1_window': 21, 'ema2_window': 14}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:34,567] Trial 548 finished with value: 10163.2 and parameters: {'ema1_window': 21, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:34,580] Trial 549 finished with value: 10120.88 and parameters: {'ema1_window': 20, 'ema2_window': 13}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:34,594] Trial 550 finished with value: 10074.98 and parameters: {'ema1_window': 21, 'ema2_window': 16}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:34,607] Trial 551 finished with value: 10064.92 and parameters: {'ema1_window': 22, 'ema2_window': 17}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:34,620] Trial 552 finished with value: 10091.24 and parameters: {'ema1_window': 21, 'ema2_window': 12}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:34,633] Trial 553 finished with value: 10142.82 and parameters: {'ema1_window': 20, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:34,647] Trial 554 finished with value: 10085.04 and parameters: {'ema1_window': 22, 'ema2_window': 16}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:34,660] Trial 555 finished with value: 10143.02 and parameters: {'ema1_window': 21, 'ema2_window': 14}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:34,781] Trial 556 finished with value: 10000.0 and parameters: {'ema1_window': 15, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:34,796] Trial 557 finished with value: 10084.94 and parameters: {'ema1_window': 21, 'ema2_window': 17}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:34,811] Trial 558 finished with value: 10074.98 and parameters: {'ema1_window': 21, 'ema2_window': 16}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:34,826] Trial 559 finished with value: 10142.64 and parameters: {'ema1_window': 20, 'ema2_window': 14}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:35,090] Trial 560 finished with value: 10052.74 and parameters: {'ema1_window': 14, 'ema2_window': 13}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:35,106] Trial 561 finished with value: 10075.0 and parameters: {'ema1_window': 22, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:35,120] Trial 562 finished with value: 10074.98 and parameters: {'ema1_window': 21, 'ema2_window': 16}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:35,133] Trial 563 finished with value: 10142.64 and parameters: {'ema1_window': 20, 'ema2_window': 14}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:35,147] Trial 564 finished with value: 10074.98 and parameters: {'ema1_window': 21, 'ema2_window': 16}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:35,160] Trial 565 finished with value: 10064.92 and parameters: {'ema1_window': 22, 'ema2_window': 17}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:35,174] Trial 566 finished with value: 10163.2 and parameters: {'ema1_window': 21, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:35,188] Trial 567 finished with value: 10120.88 and parameters: {'ema1_window': 20, 'ema2_window': 13}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:35,201] Trial 568 finished with value: 10085.04 and parameters: {'ema1_window': 23, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:35,215] Trial 569 finished with value: 10143.02 and parameters: {'ema1_window': 21, 'ema2_window': 14}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:35,228] Trial 570 finished with value: 10085.04 and parameters: {'ema1_window': 22, 'ema2_window': 16}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:35,242] Trial 571 finished with value: 10163.2 and parameters: {'ema1_window': 21, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:35,255] Trial 572 finished with value: 10142.64 and parameters: {'ema1_window': 20, 'ema2_window': 14}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:35,268] Trial 573 finished with value: 10075.0 and parameters: {'ema1_window': 22, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:35,390] Trial 574 finished with value: 10000.0 and parameters: {'ema1_window': 21, 'ema2_window': 21}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:35,405] Trial 575 finished with value: 10084.94 and parameters: {'ema1_window': 21, 'ema2_window': 17}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:35,419] Trial 576 finished with value: 10143.02 and parameters: {'ema1_window': 21, 'ema2_window': 14}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:35,433] Trial 577 finished with value: 10133.72 and parameters: {'ema1_window': 20, 'ema2_window': 16}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:35,659] Trial 578 finished with value: 9948.26 and parameters: {'ema1_window': 20, 'ema2_window': 33}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:35,674] Trial 579 finished with value: 10142.84 and parameters: {'ema1_window': 22, 'ema2_window': 13}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:35,688] Trial 580 finished with value: 10091.24 and parameters: {'ema1_window': 21, 'ema2_window': 12}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:35,702] Trial 581 finished with value: 10163.2 and parameters: {'ema1_window': 21, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:35,715] Trial 582 finished with value: 10085.04 and parameters: {'ema1_window': 22, 'ema2_window': 16}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:35,729] Trial 583 finished with value: 10163.2 and parameters: {'ema1_window': 21, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:35,742] Trial 584 finished with value: 10143.02 and parameters: {'ema1_window': 21, 'ema2_window': 14}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:35,756] Trial 585 finished with value: 10142.64 and parameters: {'ema1_window': 20, 'ema2_window': 14}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:35,769] Trial 586 finished with value: 10064.92 and parameters: {'ema1_window': 22, 'ema2_window': 17}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:35,784] Trial 587 finished with value: 10074.98 and parameters: {'ema1_window': 21, 'ema2_window': 16}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:35,797] Trial 588 finished with value: 10152.6 and parameters: {'ema1_window': 21, 'ema2_window': 13}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:35,811] Trial 589 finished with value: 10142.82 and parameters: {'ema1_window': 20, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:36,020] Trial 590 finished with value: 10032.88 and parameters: {'ema1_window': 22, 'ema2_window': 48}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:36,034] Trial 591 finished with value: 10143.02 and parameters: {'ema1_window': 21, 'ema2_window': 14}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:36,048] Trial 592 finished with value: 10133.72 and parameters: {'ema1_window': 20, 'ema2_window': 16}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:36,061] Trial 593 finished with value: 10163.2 and parameters: {'ema1_window': 21, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:36,075] Trial 594 finished with value: 10142.84 and parameters: {'ema1_window': 22, 'ema2_window': 13}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:36,088] Trial 595 finished with value: 10163.2 and parameters: {'ema1_window': 21, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:36,102] Trial 596 finished with value: 10074.88 and parameters: {'ema1_window': 20, 'ema2_window': 17}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:36,354] Trial 597 finished with value: 10090.6 and parameters: {'ema1_window': 21, 'ema2_window': 11}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:36,368] Trial 598 finished with value: 10064.82 and parameters: {'ema1_window': 23, 'ema2_window': 16}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:36,382] Trial 599 finished with value: 10075.0 and parameters: {'ema1_window': 22, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:36,395] Trial 600 finished with value: 10143.02 and parameters: {'ema1_window': 21, 'ema2_window': 14}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:36,408] Trial 601 finished with value: 10074.98 and parameters: {'ema1_window': 21, 'ema2_window': 16}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:36,421] Trial 602 finished with value: 10074.88 and parameters: {'ema1_window': 20, 'ema2_window': 17}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:36,435] Trial 603 finished with value: 10153.36 and parameters: {'ema1_window': 22, 'ema2_window': 14}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:36,448] Trial 604 finished with value: 10091.24 and parameters: {'ema1_window': 21, 'ema2_window': 12}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:36,462] Trial 605 finished with value: 10163.2 and parameters: {'ema1_window': 21, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:36,481] Trial 606 finished with value: 10142.64 and parameters: {'ema1_window': 20, 'ema2_window': 14}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:36,748] Trial 607 finished with value: 9818.84 and parameters: {'ema1_window': 8, 'ema2_window': 16}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:36,763] Trial 608 finished with value: 10142.84 and parameters: {'ema1_window': 22, 'ema2_window': 13}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:36,777] Trial 609 finished with value: 10163.2 and parameters: {'ema1_window': 21, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:36,791] Trial 610 finished with value: 10074.88 and parameters: {'ema1_window': 20, 'ema2_window': 17}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:37,041] Trial 611 finished with value: 10049.8 and parameters: {'ema1_window': 16, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:37,056] Trial 612 finished with value: 10143.02 and parameters: {'ema1_window': 21, 'ema2_window': 14}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:37,070] Trial 613 finished with value: 10085.04 and parameters: {'ema1_window': 22, 'ema2_window': 16}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:37,084] Trial 614 finished with value: 10152.6 and parameters: {'ema1_window': 21, 'ema2_window': 13}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:37,321] Trial 615 finished with value: 10074.58 and parameters: {'ema1_window': 25, 'ema2_window': 14}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:37,337] Trial 616 finished with value: 10163.2 and parameters: {'ema1_window': 21, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:37,351] Trial 617 finished with value: 10133.72 and parameters: {'ema1_window': 20, 'ema2_window': 16}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:37,365] Trial 618 finished with value: 10153.36 and parameters: {'ema1_window': 22, 'ema2_window': 14}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:37,378] Trial 619 finished with value: 10163.2 and parameters: {'ema1_window': 21, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:37,634] Trial 620 finished with value: 9913.02 and parameters: {'ema1_window': 10, 'ema2_window': 17}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:37,649] Trial 621 finished with value: 10142.82 and parameters: {'ema1_window': 20, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:37,663] Trial 622 finished with value: 10074.98 and parameters: {'ema1_window': 21, 'ema2_window': 16}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:37,677] Trial 623 finished with value: 10152.6 and parameters: {'ema1_window': 21, 'ema2_window': 13}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:37,691] Trial 624 finished with value: 10075.0 and parameters: {'ema1_window': 22, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:37,705] Trial 625 finished with value: 10142.64 and parameters: {'ema1_window': 20, 'ema2_window': 14}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:37,991] Trial 626 finished with value: 9936.12 and parameters: {'ema1_window': 22, 'ema2_window': 23}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:38,007] Trial 627 finished with value: 10074.98 and parameters: {'ema1_window': 21, 'ema2_window': 16}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:38,021] Trial 628 finished with value: 10074.98 and parameters: {'ema1_window': 21, 'ema2_window': 16}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:38,035] Trial 629 finished with value: 10142.82 and parameters: {'ema1_window': 20, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:38,263] Trial 630 finished with value: 9985.34 and parameters: {'ema1_window': 24, 'ema2_window': 17}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:38,277] Trial 631 finished with value: 10153.36 and parameters: {'ema1_window': 22, 'ema2_window': 14}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:38,290] Trial 632 finished with value: 10001.7 and parameters: {'ema1_window': 21, 'ema2_window': 10}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:38,303] Trial 633 finished with value: 10163.2 and parameters: {'ema1_window': 21, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:38,318] Trial 634 finished with value: 10091.24 and parameters: {'ema1_window': 21, 'ema2_window': 12}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:38,332] Trial 635 finished with value: 10142.84 and parameters: {'ema1_window': 22, 'ema2_window': 13}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:38,347] Trial 636 finished with value: 10133.72 and parameters: {'ema1_window': 20, 'ema2_window': 16}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:38,360] Trial 637 finished with value: 10084.94 and parameters: {'ema1_window': 21, 'ema2_window': 17}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:38,374] Trial 638 finished with value: 9948.18 and parameters: {'ema1_window': 21, 'ema2_window': 31}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:38,388] Trial 639 finished with value: 10142.82 and parameters: {'ema1_window': 20, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:38,402] Trial 640 finished with value: 10065.02 and parameters: {'ema1_window': 21, 'ema2_window': 18}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:38,415] Trial 641 finished with value: 10153.36 and parameters: {'ema1_window': 22, 'ema2_window': 14}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:38,429] Trial 642 finished with value: 10163.2 and parameters: {'ema1_window': 21, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:38,442] Trial 643 finished with value: 10095.32 and parameters: {'ema1_window': 23, 'ema2_window': 14}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:38,456] Trial 644 finished with value: 10074.98 and parameters: {'ema1_window': 21, 'ema2_window': 16}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:38,470] Trial 645 finished with value: 10120.88 and parameters: {'ema1_window': 20, 'ema2_window': 13}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:38,483] Trial 646 finished with value: 10085.04 and parameters: {'ema1_window': 22, 'ema2_window': 16}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:38,497] Trial 647 finished with value: 10084.94 and parameters: {'ema1_window': 21, 'ema2_window': 17}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:38,510] Trial 648 finished with value: 10163.2 and parameters: {'ema1_window': 21, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:38,723] Trial 649 finished with value: 9945.14 and parameters: {'ema1_window': 20, 'ema2_window': 44}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:38,738] Trial 650 finished with value: 10143.02 and parameters: {'ema1_window': 21, 'ema2_window': 14}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:38,752] Trial 651 finished with value: 10075.0 and parameters: {'ema1_window': 22, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:38,767] Trial 652 finished with value: 10120.88 and parameters: {'ema1_window': 20, 'ema2_window': 13}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:38,782] Trial 653 finished with value: 9986.14 and parameters: {'ema1_window': 13, 'ema2_window': 16}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:39,004] Trial 654 finished with value: 9936.64 and parameters: {'ema1_window': 22, 'ema2_window': 27}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:39,018] Trial 655 finished with value: 10143.02 and parameters: {'ema1_window': 21, 'ema2_window': 14}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:39,033] Trial 656 finished with value: 10163.2 and parameters: {'ema1_window': 21, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:39,046] Trial 657 finished with value: 10084.94 and parameters: {'ema1_window': 21, 'ema2_window': 17}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:39,061] Trial 658 finished with value: 10142.64 and parameters: {'ema1_window': 20, 'ema2_window': 14}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:39,074] Trial 659 finished with value: 10075.0 and parameters: {'ema1_window': 22, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:39,088] Trial 660 finished with value: 10065.02 and parameters: {'ema1_window': 21, 'ema2_window': 18}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:39,102] Trial 661 finished with value: 10133.72 and parameters: {'ema1_window': 20, 'ema2_window': 16}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:39,116] Trial 662 finished with value: 10163.2 and parameters: {'ema1_window': 21, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:39,130] Trial 663 finished with value: 10085.04 and parameters: {'ema1_window': 22, 'ema2_window': 16}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:39,144] Trial 664 finished with value: 10143.02 and parameters: {'ema1_window': 21, 'ema2_window': 14}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:39,158] Trial 665 finished with value: 10120.88 and parameters: {'ema1_window': 20, 'ema2_window': 13}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:39,172] Trial 666 finished with value: 10074.98 and parameters: {'ema1_window': 21, 'ema2_window': 16}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:39,186] Trial 667 finished with value: 10153.36 and parameters: {'ema1_window': 22, 'ema2_window': 14}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:39,201] Trial 668 finished with value: 10091.24 and parameters: {'ema1_window': 21, 'ema2_window': 12}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:39,451] Trial 669 finished with value: 10122.48 and parameters: {'ema1_window': 23, 'ema2_window': 11}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:39,466] Trial 670 finished with value: 10142.82 and parameters: {'ema1_window': 20, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:39,480] Trial 671 finished with value: 10085.04 and parameters: {'ema1_window': 22, 'ema2_window': 16}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:39,494] Trial 672 finished with value: 10084.94 and parameters: {'ema1_window': 21, 'ema2_window': 17}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:39,508] Trial 673 finished with value: 10143.02 and parameters: {'ema1_window': 21, 'ema2_window': 14}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:39,522] Trial 674 finished with value: 10163.2 and parameters: {'ema1_window': 21, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:39,536] Trial 675 finished with value: 10120.88 and parameters: {'ema1_window': 20, 'ema2_window': 13}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:39,551] Trial 676 finished with value: 10075.0 and parameters: {'ema1_window': 22, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:39,565] Trial 677 finished with value: 10074.98 and parameters: {'ema1_window': 21, 'ema2_window': 16}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:39,579] Trial 678 finished with value: 10142.64 and parameters: {'ema1_window': 20, 'ema2_window': 14}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:39,593] Trial 679 finished with value: 10084.94 and parameters: {'ema1_window': 21, 'ema2_window': 17}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:39,607] Trial 680 finished with value: 10075.0 and parameters: {'ema1_window': 22, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:39,621] Trial 681 finished with value: 10163.2 and parameters: {'ema1_window': 21, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:39,635] Trial 682 finished with value: 10120.88 and parameters: {'ema1_window': 20, 'ema2_window': 13}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:39,650] Trial 683 finished with value: 10074.98 and parameters: {'ema1_window': 21, 'ema2_window': 16}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:39,664] Trial 684 finished with value: 10153.36 and parameters: {'ema1_window': 22, 'ema2_window': 14}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:39,678] Trial 685 finished with value: 10163.2 and parameters: {'ema1_window': 21, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:39,692] Trial 686 finished with value: 10133.72 and parameters: {'ema1_window': 20, 'ema2_window': 16}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:39,709] Trial 687 finished with value: 10084.94 and parameters: {'ema1_window': 21, 'ema2_window': 17}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:39,724] Trial 688 finished with value: 10153.36 and parameters: {'ema1_window': 22, 'ema2_window': 14}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:39,739] Trial 689 finished with value: 10163.2 and parameters: {'ema1_window': 21, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:39,754] Trial 690 finished with value: 10152.6 and parameters: {'ema1_window': 21, 'ema2_window': 13}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:39,769] Trial 691 finished with value: 10142.82 and parameters: {'ema1_window': 20, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:39,789] Trial 692 finished with value: 10005.18 and parameters: {'ema1_window': 22, 'ema2_window': 18}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:40,023] Trial 693 finished with value: 9926.06 and parameters: {'ema1_window': 21, 'ema2_window': 25}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:40,045] Trial 694 finished with value: 10074.98 and parameters: {'ema1_window': 21, 'ema2_window': 16}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:40,062] Trial 695 finished with value: 10142.64 and parameters: {'ema1_window': 20, 'ema2_window': 14}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:40,078] Trial 696 finished with value: 10085.04 and parameters: {'ema1_window': 22, 'ema2_window': 16}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:40,094] Trial 697 finished with value: 10091.24 and parameters: {'ema1_window': 21, 'ema2_window': 12}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:40,314] Trial 698 finished with value: 9896.22 and parameters: {'ema1_window': 12, 'ema2_window': 42}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:40,330] Trial 699 finished with value: 10074.88 and parameters: {'ema1_window': 20, 'ema2_window': 17}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:40,347] Trial 700 finished with value: 10143.02 and parameters: {'ema1_window': 21, 'ema2_window': 14}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:40,363] Trial 701 finished with value: 10075.0 and parameters: {'ema1_window': 22, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:40,379] Trial 702 finished with value: 10163.2 and parameters: {'ema1_window': 21, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:40,396] Trial 703 finished with value: 10142.64 and parameters: {'ema1_window': 20, 'ema2_window': 14}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:40,414] Trial 704 finished with value: 10074.98 and parameters: {'ema1_window': 21, 'ema2_window': 16}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:40,430] Trial 705 finished with value: 10075.0 and parameters: {'ema1_window': 22, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:40,445] Trial 706 finished with value: 10143.02 and parameters: {'ema1_window': 21, 'ema2_window': 14}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:40,460] Trial 707 finished with value: 10152.6 and parameters: {'ema1_window': 21, 'ema2_window': 13}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:40,479] Trial 708 finished with value: 10133.72 and parameters: {'ema1_window': 20, 'ema2_window': 16}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:40,494] Trial 709 finished with value: 10163.2 and parameters: {'ema1_window': 21, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:40,721] Trial 710 finished with value: 9923.68 and parameters: {'ema1_window': 22, 'ema2_window': 38}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:40,974] Trial 711 finished with value: 10015.24 and parameters: {'ema1_window': 23, 'ema2_window': 17}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:40,991] Trial 712 finished with value: 10133.72 and parameters: {'ema1_window': 20, 'ema2_window': 16}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:41,007] Trial 713 finished with value: 10152.6 and parameters: {'ema1_window': 21, 'ema2_window': 13}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:41,022] Trial 714 finished with value: 10143.02 and parameters: {'ema1_window': 21, 'ema2_window': 14}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:41,037] Trial 715 finished with value: 10075.0 and parameters: {'ema1_window': 22, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:41,053] Trial 716 finished with value: 10074.98 and parameters: {'ema1_window': 21, 'ema2_window': 16}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:41,068] Trial 717 finished with value: 10074.88 and parameters: {'ema1_window': 20, 'ema2_window': 17}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:41,083] Trial 718 finished with value: 10075.0 and parameters: {'ema1_window': 22, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:41,100] Trial 719 finished with value: 10143.02 and parameters: {'ema1_window': 21, 'ema2_window': 14}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:41,118] Trial 720 finished with value: 10012.72 and parameters: {'ema1_window': 16, 'ema2_window': 12}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:41,134] Trial 721 finished with value: 10142.82 and parameters: {'ema1_window': 20, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:41,150] Trial 722 finished with value: 10074.98 and parameters: {'ema1_window': 21, 'ema2_window': 16}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:41,165] Trial 723 finished with value: 10143.02 and parameters: {'ema1_window': 21, 'ema2_window': 14}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:41,180] Trial 724 finished with value: 10064.92 and parameters: {'ema1_window': 22, 'ema2_window': 17}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:41,449] Trial 725 finished with value: 9824.86 and parameters: {'ema1_window': 8, 'ema2_window': 13}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:41,705] Trial 726 finished with value: 9986.14 and parameters: {'ema1_window': 11, 'ema2_window': 18}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:41,722] Trial 727 finished with value: 10163.2 and parameters: {'ema1_window': 21, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:41,738] Trial 728 finished with value: 10133.72 and parameters: {'ema1_window': 20, 'ema2_window': 16}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:41,753] Trial 729 finished with value: 10143.02 and parameters: {'ema1_window': 21, 'ema2_window': 14}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:41,768] Trial 730 finished with value: 10075.0 and parameters: {'ema1_window': 22, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:41,783] Trial 731 finished with value: 10143.02 and parameters: {'ema1_window': 21, 'ema2_window': 14}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:41,798] Trial 732 finished with value: 10133.72 and parameters: {'ema1_window': 20, 'ema2_window': 16}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:42,036] Trial 733 finished with value: 10123.8 and parameters: {'ema1_window': 24, 'ema2_window': 13}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:42,053] Trial 734 finished with value: 10163.2 and parameters: {'ema1_window': 21, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:42,071] Trial 735 finished with value: 10064.92 and parameters: {'ema1_window': 22, 'ema2_window': 17}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:42,088] Trial 736 finished with value: 10074.98 and parameters: {'ema1_window': 21, 'ema2_window': 16}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:42,105] Trial 737 finished with value: 10142.82 and parameters: {'ema1_window': 20, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:42,121] Trial 738 finished with value: 10153.36 and parameters: {'ema1_window': 22, 'ema2_window': 14}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:42,137] Trial 739 finished with value: 10163.2 and parameters: {'ema1_window': 21, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:42,153] Trial 740 finished with value: 10074.98 and parameters: {'ema1_window': 21, 'ema2_window': 16}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:42,441] Trial 741 finished with value: 9975.92 and parameters: {'ema1_window': 20, 'ema2_window': 24}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:42,457] Trial 742 finished with value: 10152.6 and parameters: {'ema1_window': 21, 'ema2_window': 13}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:42,473] Trial 743 finished with value: 10153.36 and parameters: {'ema1_window': 22, 'ema2_window': 14}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:42,702] Trial 744 finished with value: 10005.28 and parameters: {'ema1_window': 21, 'ema2_window': 19}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:42,719] Trial 745 finished with value: 10015.24 and parameters: {'ema1_window': 23, 'ema2_window': 17}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:42,943] Trial 746 finished with value: 9936.62 and parameters: {'ema1_window': 20, 'ema2_window': 29}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:43,063] Trial 747 finished with value: 10000.0 and parameters: {'ema1_window': 14, 'ema2_window': 14}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:43,080] Trial 748 finished with value: 9944.7 and parameters: {'ema1_window': 6, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:43,096] Trial 749 finished with value: 10085.04 and parameters: {'ema1_window': 22, 'ema2_window': 16}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:43,112] Trial 750 finished with value: 10163.2 and parameters: {'ema1_window': 21, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:43,131] Trial 751 finished with value: 10152.6 and parameters: {'ema1_window': 21, 'ema2_window': 13}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:43,149] Trial 752 finished with value: 10142.64 and parameters: {'ema1_window': 20, 'ema2_window': 14}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:43,363] Trial 753 finished with value: 9900.36 and parameters: {'ema1_window': 22, 'ema2_window': 35}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:43,381] Trial 754 finished with value: 10074.88 and parameters: {'ema1_window': 20, 'ema2_window': 17}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:43,397] Trial 755 finished with value: 10163.2 and parameters: {'ema1_window': 21, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:43,413] Trial 756 finished with value: 10074.98 and parameters: {'ema1_window': 21, 'ema2_window': 16}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:43,429] Trial 757 finished with value: 10074.98 and parameters: {'ema1_window': 21, 'ema2_window': 16}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:43,445] Trial 758 finished with value: 10005.18 and parameters: {'ema1_window': 22, 'ema2_window': 18}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:43,462] Trial 759 finished with value: 10143.02 and parameters: {'ema1_window': 21, 'ema2_window': 14}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:43,479] Trial 760 finished with value: 10142.82 and parameters: {'ema1_window': 20, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:43,495] Trial 761 finished with value: 10091.24 and parameters: {'ema1_window': 21, 'ema2_window': 12}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:43,512] Trial 762 finished with value: 9954.2 and parameters: {'ema1_window': 22, 'ema2_window': 21}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:43,528] Trial 763 finished with value: 10142.64 and parameters: {'ema1_window': 20, 'ema2_window': 14}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:43,545] Trial 764 finished with value: 10074.98 and parameters: {'ema1_window': 21, 'ema2_window': 16}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:43,561] Trial 765 finished with value: 10152.6 and parameters: {'ema1_window': 21, 'ema2_window': 13}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:43,581] Trial 766 finished with value: 10075.0 and parameters: {'ema1_window': 22, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:43,600] Trial 767 finished with value: 10163.2 and parameters: {'ema1_window': 21, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:43,617] Trial 768 finished with value: 10142.64 and parameters: {'ema1_window': 20, 'ema2_window': 14}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:43,636] Trial 769 finished with value: 10084.94 and parameters: {'ema1_window': 21, 'ema2_window': 17}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:43,662] Trial 770 finished with value: 10085.04 and parameters: {'ema1_window': 22, 'ema2_window': 16}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:43,681] Trial 771 finished with value: 10163.2 and parameters: {'ema1_window': 21, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:43,701] Trial 772 finished with value: 10142.64 and parameters: {'ema1_window': 20, 'ema2_window': 14}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:43,719] Trial 773 finished with value: 10074.98 and parameters: {'ema1_window': 21, 'ema2_window': 16}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:43,737] Trial 774 finished with value: 10075.0 and parameters: {'ema1_window': 22, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:43,755] Trial 775 finished with value: 10152.6 and parameters: {'ema1_window': 21, 'ema2_window': 13}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:43,772] Trial 776 finished with value: 10074.9 and parameters: {'ema1_window': 20, 'ema2_window': 18}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:43,790] Trial 777 finished with value: 10084.94 and parameters: {'ema1_window': 21, 'ema2_window': 17}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:43,806] Trial 778 finished with value: 10153.36 and parameters: {'ema1_window': 22, 'ema2_window': 14}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:43,823] Trial 779 finished with value: 10163.2 and parameters: {'ema1_window': 21, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:44,070] Trial 780 finished with value: 10152.78 and parameters: {'ema1_window': 23, 'ema2_window': 12}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:44,088] Trial 781 finished with value: 10074.98 and parameters: {'ema1_window': 21, 'ema2_window': 16}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:44,106] Trial 782 finished with value: 10133.72 and parameters: {'ema1_window': 20, 'ema2_window': 16}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:44,124] Trial 783 finished with value: 10142.84 and parameters: {'ema1_window': 22, 'ema2_window': 13}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:44,141] Trial 784 finished with value: 10016.0 and parameters: {'ema1_window': 21, 'ema2_window': 22}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:44,158] Trial 785 finished with value: 10163.2 and parameters: {'ema1_window': 21, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:44,174] Trial 786 finished with value: 10142.64 and parameters: {'ema1_window': 20, 'ema2_window': 14}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:44,190] Trial 787 finished with value: 10085.04 and parameters: {'ema1_window': 22, 'ema2_window': 16}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:44,207] Trial 788 finished with value: 10143.02 and parameters: {'ema1_window': 21, 'ema2_window': 14}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:44,223] Trial 789 finished with value: 10074.88 and parameters: {'ema1_window': 20, 'ema2_window': 17}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:44,453] Trial 790 finished with value: 9996.0 and parameters: {'ema1_window': 15, 'ema2_window': 30}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:44,471] Trial 791 finished with value: 10163.2 and parameters: {'ema1_window': 21, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:44,488] Trial 792 finished with value: 10075.0 and parameters: {'ema1_window': 22, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:44,505] Trial 793 finished with value: 10084.94 and parameters: {'ema1_window': 21, 'ema2_window': 17}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:44,521] Trial 794 finished with value: 10120.88 and parameters: {'ema1_window': 20, 'ema2_window': 13}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:44,540] Trial 795 finished with value: 10143.02 and parameters: {'ema1_window': 21, 'ema2_window': 14}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:44,748] Trial 796 finished with value: 10002.6 and parameters: {'ema1_window': 22, 'ema2_window': 50}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:44,766] Trial 797 finished with value: 10074.98 and parameters: {'ema1_window': 21, 'ema2_window': 16}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:44,783] Trial 798 finished with value: 10142.82 and parameters: {'ema1_window': 20, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:44,801] Trial 799 finished with value: 10095.32 and parameters: {'ema1_window': 23, 'ema2_window': 14}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:44,819] Trial 800 finished with value: 10074.98 and parameters: {'ema1_window': 21, 'ema2_window': 16}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:44,836] Trial 801 finished with value: 10163.2 and parameters: {'ema1_window': 21, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:44,854] Trial 802 finished with value: 10153.36 and parameters: {'ema1_window': 22, 'ema2_window': 14}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:45,105] Trial 803 finished with value: 10110.66 and parameters: {'ema1_window': 20, 'ema2_window': 12}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:45,124] Trial 804 finished with value: 10084.94 and parameters: {'ema1_window': 21, 'ema2_window': 17}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:45,141] Trial 805 finished with value: 9936.64 and parameters: {'ema1_window': 22, 'ema2_window': 27}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:45,158] Trial 806 finished with value: 10074.98 and parameters: {'ema1_window': 21, 'ema2_window': 16}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:45,176] Trial 807 finished with value: 10142.82 and parameters: {'ema1_window': 20, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:45,193] Trial 808 finished with value: 10152.6 and parameters: {'ema1_window': 21, 'ema2_window': 13}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:45,213] Trial 809 finished with value: 10075.0 and parameters: {'ema1_window': 22, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:45,233] Trial 810 finished with value: 10074.98 and parameters: {'ema1_window': 21, 'ema2_window': 16}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:45,251] Trial 811 finished with value: 10074.9 and parameters: {'ema1_window': 20, 'ema2_window': 18}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:45,270] Trial 812 finished with value: 10143.02 and parameters: {'ema1_window': 21, 'ema2_window': 14}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:45,289] Trial 813 finished with value: 10085.04 and parameters: {'ema1_window': 22, 'ema2_window': 16}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:45,308] Trial 814 finished with value: 10163.2 and parameters: {'ema1_window': 21, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:45,325] Trial 815 finished with value: 10143.02 and parameters: {'ema1_window': 21, 'ema2_window': 14}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:45,343] Trial 816 finished with value: 10120.88 and parameters: {'ema1_window': 20, 'ema2_window': 13}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:45,360] Trial 817 finished with value: 10014.94 and parameters: {'ema1_window': 25, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:45,377] Trial 818 finished with value: 10085.04 and parameters: {'ema1_window': 22, 'ema2_window': 16}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:45,395] Trial 819 finished with value: 10143.02 and parameters: {'ema1_window': 21, 'ema2_window': 14}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:45,412] Trial 820 finished with value: 10163.2 and parameters: {'ema1_window': 21, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:45,429] Trial 821 finished with value: 10074.88 and parameters: {'ema1_window': 20, 'ema2_window': 17}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:45,448] Trial 822 finished with value: 10075.0 and parameters: {'ema1_window': 22, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:45,468] Trial 823 finished with value: 10074.98 and parameters: {'ema1_window': 21, 'ema2_window': 16}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:45,486] Trial 824 finished with value: 10142.64 and parameters: {'ema1_window': 20, 'ema2_window': 14}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:45,504] Trial 825 finished with value: 10084.94 and parameters: {'ema1_window': 21, 'ema2_window': 17}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:45,523] Trial 826 finished with value: 10153.36 and parameters: {'ema1_window': 22, 'ema2_window': 14}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:45,541] Trial 827 finished with value: 9975.7 and parameters: {'ema1_window': 21, 'ema2_window': 20}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:45,558] Trial 828 finished with value: 10090.6 and parameters: {'ema1_window': 21, 'ema2_window': 11}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:45,576] Trial 829 finished with value: 10120.88 and parameters: {'ema1_window': 20, 'ema2_window': 13}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:45,593] Trial 830 finished with value: 10163.2 and parameters: {'ema1_window': 21, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:45,611] Trial 831 finished with value: 10085.04 and parameters: {'ema1_window': 22, 'ema2_window': 16}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:45,628] Trial 832 finished with value: 10152.6 and parameters: {'ema1_window': 21, 'ema2_window': 13}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:45,646] Trial 833 finished with value: 10142.82 and parameters: {'ema1_window': 20, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:45,664] Trial 834 finished with value: 10143.02 and parameters: {'ema1_window': 21, 'ema2_window': 14}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:45,682] Trial 835 finished with value: 10005.18 and parameters: {'ema1_window': 22, 'ema2_window': 18}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:45,700] Trial 836 finished with value: 10133.72 and parameters: {'ema1_window': 20, 'ema2_window': 16}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:45,719] Trial 837 finished with value: 10163.2 and parameters: {'ema1_window': 21, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:45,740] Trial 838 finished with value: 10143.02 and parameters: {'ema1_window': 21, 'ema2_window': 14}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:45,759] Trial 839 finished with value: 10162.48 and parameters: {'ema1_window': 22, 'ema2_window': 12}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:45,776] Trial 840 finished with value: 10074.88 and parameters: {'ema1_window': 20, 'ema2_window': 17}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:45,794] Trial 841 finished with value: 10074.98 and parameters: {'ema1_window': 21, 'ema2_window': 16}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:45,812] Trial 842 finished with value: 10163.2 and parameters: {'ema1_window': 21, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:45,830] Trial 843 finished with value: 10153.36 and parameters: {'ema1_window': 22, 'ema2_window': 14}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:45,854] Trial 844 finished with value: 10064.82 and parameters: {'ema1_window': 23, 'ema2_window': 16}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:46,085] Trial 845 finished with value: 9918.78 and parameters: {'ema1_window': 21, 'ema2_window': 33}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:46,103] Trial 846 finished with value: 10074.88 and parameters: {'ema1_window': 20, 'ema2_window': 17}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:46,121] Trial 847 finished with value: 10163.2 and parameters: {'ema1_window': 21, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:46,139] Trial 848 finished with value: 10075.0 and parameters: {'ema1_window': 22, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:46,156] Trial 849 finished with value: 10152.6 and parameters: {'ema1_window': 21, 'ema2_window': 13}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:46,174] Trial 850 finished with value: 10142.64 and parameters: {'ema1_window': 20, 'ema2_window': 14}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:46,191] Trial 851 finished with value: 10074.98 and parameters: {'ema1_window': 21, 'ema2_window': 16}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:46,215] Trial 852 finished with value: 10163.2 and parameters: {'ema1_window': 21, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:46,233] Trial 853 finished with value: 10142.84 and parameters: {'ema1_window': 22, 'ema2_window': 13}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:46,251] Trial 854 finished with value: 10133.72 and parameters: {'ema1_window': 20, 'ema2_window': 16}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:46,269] Trial 855 finished with value: 10143.02 and parameters: {'ema1_window': 21, 'ema2_window': 14}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:46,287] Trial 856 finished with value: 10023.76 and parameters: {'ema1_window': 22, 'ema2_window': 46}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:46,305] Trial 857 finished with value: 10163.2 and parameters: {'ema1_window': 21, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:46,323] Trial 858 finished with value: 10143.02 and parameters: {'ema1_window': 21, 'ema2_window': 14}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:46,341] Trial 859 finished with value: 10074.88 and parameters: {'ema1_window': 20, 'ema2_window': 17}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:46,360] Trial 860 finished with value: 10085.04 and parameters: {'ema1_window': 22, 'ema2_window': 16}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:46,378] Trial 861 finished with value: 10163.2 and parameters: {'ema1_window': 21, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:46,396] Trial 862 finished with value: 10123.8 and parameters: {'ema1_window': 24, 'ema2_window': 13}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:46,414] Trial 863 finished with value: 10025.12 and parameters: {'ema1_window': 20, 'ema2_window': 19}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:46,433] Trial 864 finished with value: 10143.02 and parameters: {'ema1_window': 21, 'ema2_window': 14}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:46,451] Trial 865 finished with value: 10163.2 and parameters: {'ema1_window': 21, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:46,474] Trial 866 finished with value: 9807.88 and parameters: {'ema1_window': 16, 'ema2_window': 17}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:46,691] Trial 867 finished with value: 9917.52 and parameters: {'ema1_window': 22, 'ema2_window': 39}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:46,710] Trial 868 finished with value: 10133.72 and parameters: {'ema1_window': 20, 'ema2_window': 16}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:46,728] Trial 869 finished with value: 10163.2 and parameters: {'ema1_window': 21, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:46,746] Trial 870 finished with value: 10065.02 and parameters: {'ema1_window': 21, 'ema2_window': 18}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:46,763] Trial 871 finished with value: 10085.04 and parameters: {'ema1_window': 22, 'ema2_window': 16}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:46,780] Trial 872 finished with value: 10142.64 and parameters: {'ema1_window': 20, 'ema2_window': 14}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:46,798] Trial 873 finished with value: 10163.2 and parameters: {'ema1_window': 21, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:46,816] Trial 874 finished with value: 10152.6 and parameters: {'ema1_window': 21, 'ema2_window': 13}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:46,834] Trial 875 finished with value: 10153.36 and parameters: {'ema1_window': 22, 'ema2_window': 14}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:46,851] Trial 876 finished with value: 10091.24 and parameters: {'ema1_window': 21, 'ema2_window': 12}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:46,869] Trial 877 finished with value: 10074.88 and parameters: {'ema1_window': 20, 'ema2_window': 17}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:46,886] Trial 878 finished with value: 10085.04 and parameters: {'ema1_window': 22, 'ema2_window': 16}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:46,910] Trial 879 finished with value: 10142.82 and parameters: {'ema1_window': 20, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:46,928] Trial 880 finished with value: 10074.98 and parameters: {'ema1_window': 21, 'ema2_window': 16}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:46,946] Trial 881 finished with value: 10143.02 and parameters: {'ema1_window': 21, 'ema2_window': 14}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:46,964] Trial 882 finished with value: 10090.6 and parameters: {'ema1_window': 21, 'ema2_window': 11}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:46,982] Trial 883 finished with value: 10075.0 and parameters: {'ema1_window': 22, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:47,000] Trial 884 finished with value: 10133.72 and parameters: {'ema1_window': 20, 'ema2_window': 16}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:47,018] Trial 885 finished with value: 10152.6 and parameters: {'ema1_window': 21, 'ema2_window': 13}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:47,036] Trial 886 finished with value: 9923.96 and parameters: {'ema1_window': 22, 'ema2_window': 41}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:47,054] Trial 887 finished with value: 10143.02 and parameters: {'ema1_window': 21, 'ema2_window': 14}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:47,071] Trial 888 finished with value: 10163.2 and parameters: {'ema1_window': 21, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:47,334] Trial 889 finished with value: 9862.88 and parameters: {'ema1_window': 9, 'ema2_window': 17}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:47,354] Trial 890 finished with value: 10085.04 and parameters: {'ema1_window': 23, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:47,373] Trial 891 finished with value: 10133.72 and parameters: {'ema1_window': 20, 'ema2_window': 16}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:47,393] Trial 892 finished with value: 10143.02 and parameters: {'ema1_window': 21, 'ema2_window': 14}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:47,411] Trial 893 finished with value: 10085.04 and parameters: {'ema1_window': 22, 'ema2_window': 16}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:47,638] Trial 894 finished with value: 9968.18 and parameters: {'ema1_window': 20, 'ema2_window': 32}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:47,658] Trial 895 finished with value: 10163.2 and parameters: {'ema1_window': 21, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:47,676] Trial 896 finished with value: 10152.6 and parameters: {'ema1_window': 21, 'ema2_window': 13}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:47,694] Trial 897 finished with value: 10153.36 and parameters: {'ema1_window': 22, 'ema2_window': 14}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:47,712] Trial 898 finished with value: 10074.88 and parameters: {'ema1_window': 20, 'ema2_window': 17}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:47,730] Trial 899 finished with value: 10163.2 and parameters: {'ema1_window': 21, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:47,748] Trial 900 finished with value: 10142.84 and parameters: {'ema1_window': 22, 'ema2_window': 13}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:47,765] Trial 901 finished with value: 10163.2 and parameters: {'ema1_window': 21, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:47,783] Trial 902 finished with value: 10142.64 and parameters: {'ema1_window': 20, 'ema2_window': 14}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:47,801] Trial 903 finished with value: 10074.98 and parameters: {'ema1_window': 21, 'ema2_window': 16}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:47,818] Trial 904 finished with value: 10085.04 and parameters: {'ema1_window': 22, 'ema2_window': 16}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:47,838] Trial 905 finished with value: 10065.02 and parameters: {'ema1_window': 21, 'ema2_window': 18}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:47,857] Trial 906 finished with value: 10142.64 and parameters: {'ema1_window': 20, 'ema2_window': 14}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:47,875] Trial 907 finished with value: 10163.2 and parameters: {'ema1_window': 21, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:47,892] Trial 908 finished with value: 10091.24 and parameters: {'ema1_window': 21, 'ema2_window': 12}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:47,910] Trial 909 finished with value: 10085.04 and parameters: {'ema1_window': 22, 'ema2_window': 16}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:47,928] Trial 910 finished with value: 10142.64 and parameters: {'ema1_window': 20, 'ema2_window': 14}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:47,945] Trial 911 finished with value: 10084.94 and parameters: {'ema1_window': 21, 'ema2_window': 17}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:48,178] Trial 912 finished with value: 9926.26 and parameters: {'ema1_window': 22, 'ema2_window': 24}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:48,198] Trial 913 finished with value: 10163.2 and parameters: {'ema1_window': 21, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:48,216] Trial 914 finished with value: 10142.82 and parameters: {'ema1_window': 20, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:48,234] Trial 915 finished with value: 10152.6 and parameters: {'ema1_window': 21, 'ema2_window': 13}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:48,252] Trial 916 finished with value: 10084.94 and parameters: {'ema1_window': 21, 'ema2_window': 17}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:48,269] Trial 917 finished with value: 10142.64 and parameters: {'ema1_window': 20, 'ema2_window': 14}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:48,287] Trial 918 finished with value: 10005.18 and parameters: {'ema1_window': 22, 'ema2_window': 18}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:48,308] Trial 919 finished with value: 10074.98 and parameters: {'ema1_window': 21, 'ema2_window': 16}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:48,327] Trial 920 finished with value: 10163.2 and parameters: {'ema1_window': 21, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:48,345] Trial 921 finished with value: 10142.84 and parameters: {'ema1_window': 22, 'ema2_window': 13}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:48,363] Trial 922 finished with value: 10074.98 and parameters: {'ema1_window': 21, 'ema2_window': 16}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:48,381] Trial 923 finished with value: 10142.64 and parameters: {'ema1_window': 20, 'ema2_window': 14}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:48,398] Trial 924 finished with value: 10085.04 and parameters: {'ema1_window': 23, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:48,423] Trial 925 finished with value: 10064.92 and parameters: {'ema1_window': 22, 'ema2_window': 17}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:48,442] Trial 926 finished with value: 10143.02 and parameters: {'ema1_window': 21, 'ema2_window': 14}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:48,463] Trial 927 finished with value: 10163.2 and parameters: {'ema1_window': 21, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:48,483] Trial 928 finished with value: 10133.72 and parameters: {'ema1_window': 20, 'ema2_window': 16}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:48,504] Trial 929 finished with value: 10074.98 and parameters: {'ema1_window': 21, 'ema2_window': 16}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:48,523] Trial 930 finished with value: 10120.88 and parameters: {'ema1_window': 20, 'ema2_window': 13}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:48,848] Trial 931 finished with value: 9913.08 and parameters: {'ema1_window': 11, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:48,867] Trial 932 finished with value: 10153.36 and parameters: {'ema1_window': 22, 'ema2_window': 14}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:49,126] Trial 933 finished with value: 9872.68 and parameters: {'ema1_window': 10, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:49,146] Trial 934 finished with value: 10091.24 and parameters: {'ema1_window': 21, 'ema2_window': 12}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:49,372] Trial 935 finished with value: 9946.7 and parameters: {'ema1_window': 22, 'ema2_window': 26}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:49,392] Trial 936 finished with value: 10084.94 and parameters: {'ema1_window': 21, 'ema2_window': 17}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:49,671] Trial 937 finished with value: 9935.36 and parameters: {'ema1_window': 6, 'ema2_window': 14}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:49,691] Trial 938 finished with value: 10074.98 and parameters: {'ema1_window': 21, 'ema2_window': 16}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:49,709] Trial 939 finished with value: 10142.82 and parameters: {'ema1_window': 20, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:49,728] Trial 940 finished with value: 10153.36 and parameters: {'ema1_window': 22, 'ema2_window': 14}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:49,747] Trial 941 finished with value: 10074.98 and parameters: {'ema1_window': 21, 'ema2_window': 16}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:49,765] Trial 942 finished with value: 10005.28 and parameters: {'ema1_window': 21, 'ema2_window': 19}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:49,783] Trial 943 finished with value: 10142.82 and parameters: {'ema1_window': 20, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:49,803] Trial 944 finished with value: 10074.98 and parameters: {'ema1_window': 21, 'ema2_window': 16}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:49,823] Trial 945 finished with value: 10152.6 and parameters: {'ema1_window': 21, 'ema2_window': 13}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:49,843] Trial 946 finished with value: 10075.0 and parameters: {'ema1_window': 22, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:49,861] Trial 947 finished with value: 10074.88 and parameters: {'ema1_window': 20, 'ema2_window': 17}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:49,880] Trial 948 finished with value: 10143.02 and parameters: {'ema1_window': 21, 'ema2_window': 14}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:49,898] Trial 949 finished with value: 10075.0 and parameters: {'ema1_window': 22, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:49,918] Trial 950 finished with value: 10143.02 and parameters: {'ema1_window': 21, 'ema2_window': 14}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:49,936] Trial 951 finished with value: 10074.98 and parameters: {'ema1_window': 21, 'ema2_window': 16}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:49,955] Trial 952 finished with value: 10142.82 and parameters: {'ema1_window': 20, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:49,975] Trial 953 finished with value: 10152.6 and parameters: {'ema1_window': 21, 'ema2_window': 13}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:49,995] Trial 954 finished with value: 10015.24 and parameters: {'ema1_window': 23, 'ema2_window': 17}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:50,017] Trial 955 finished with value: 10085.04 and parameters: {'ema1_window': 22, 'ema2_window': 16}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:50,038] Trial 956 finished with value: 10142.64 and parameters: {'ema1_window': 20, 'ema2_window': 14}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:50,272] Trial 957 finished with value: 9936.54 and parameters: {'ema1_window': 21, 'ema2_window': 28}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:50,293] Trial 958 finished with value: 10163.2 and parameters: {'ema1_window': 21, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:50,312] Trial 959 finished with value: 10153.36 and parameters: {'ema1_window': 22, 'ema2_window': 14}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:50,331] Trial 960 finished with value: 10133.72 and parameters: {'ema1_window': 20, 'ema2_window': 16}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:50,349] Trial 961 finished with value: 10065.02 and parameters: {'ema1_window': 21, 'ema2_window': 18}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:50,474] Trial 962 finished with value: 10000.0 and parameters: {'ema1_window': 12, 'ema2_window': 12}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:50,493] Trial 963 finished with value: 10075.0 and parameters: {'ema1_window': 22, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:50,511] Trial 964 finished with value: 10163.2 and parameters: {'ema1_window': 21, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:50,529] Trial 965 finished with value: 10002.86 and parameters: {'ema1_window': 15, 'ema2_window': 13}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:50,548] Trial 966 finished with value: 10074.88 and parameters: {'ema1_window': 20, 'ema2_window': 17}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:50,566] Trial 967 finished with value: 10074.98 and parameters: {'ema1_window': 21, 'ema2_window': 16}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:50,584] Trial 968 finished with value: 10143.02 and parameters: {'ema1_window': 21, 'ema2_window': 14}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:50,609] Trial 969 finished with value: 10153.36 and parameters: {'ema1_window': 22, 'ema2_window': 14}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:50,629] Trial 970 finished with value: 10163.2 and parameters: {'ema1_window': 21, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:50,648] Trial 971 finished with value: 10133.72 and parameters: {'ema1_window': 20, 'ema2_window': 16}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:50,667] Trial 972 finished with value: 9954.2 and parameters: {'ema1_window': 22, 'ema2_window': 21}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:50,929] Trial 973 finished with value: 9984.06 and parameters: {'ema1_window': 13, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:50,949] Trial 974 finished with value: 10120.88 and parameters: {'ema1_window': 20, 'ema2_window': 13}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:50,968] Trial 975 finished with value: 10001.7 and parameters: {'ema1_window': 21, 'ema2_window': 10}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:50,986] Trial 976 finished with value: 10143.02 and parameters: {'ema1_window': 21, 'ema2_window': 14}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:51,004] Trial 977 finished with value: 10074.98 and parameters: {'ema1_window': 21, 'ema2_window': 16}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:51,023] Trial 978 finished with value: 10064.92 and parameters: {'ema1_window': 22, 'ema2_window': 17}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:51,041] Trial 979 finished with value: 10142.82 and parameters: {'ema1_window': 20, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:51,061] Trial 980 finished with value: 10143.02 and parameters: {'ema1_window': 21, 'ema2_window': 14}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:51,084] Trial 981 finished with value: 10014.94 and parameters: {'ema1_window': 25, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:51,105] Trial 982 finished with value: 10120.88 and parameters: {'ema1_window': 20, 'ema2_window': 13}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:51,125] Trial 983 finished with value: 10085.04 and parameters: {'ema1_window': 22, 'ema2_window': 16}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:51,406] Trial 984 finished with value: 9874.74 and parameters: {'ema1_window': 5, 'ema2_window': 18}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:51,426] Trial 985 finished with value: 10074.98 and parameters: {'ema1_window': 21, 'ema2_window': 16}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:51,446] Trial 986 finished with value: 10143.02 and parameters: {'ema1_window': 21, 'ema2_window': 14}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:51,464] Trial 987 finished with value: 10163.2 and parameters: {'ema1_window': 21, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:51,483] Trial 988 finished with value: 10074.88 and parameters: {'ema1_window': 20, 'ema2_window': 17}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:51,703] Trial 989 finished with value: 9994.12 and parameters: {'ema1_window': 23, 'ema2_window': 43}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:51,724] Trial 990 finished with value: 10142.84 and parameters: {'ema1_window': 22, 'ema2_window': 13}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:51,743] Trial 991 finished with value: 10091.24 and parameters: {'ema1_window': 21, 'ema2_window': 12}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:51,762] Trial 992 finished with value: 10163.2 and parameters: {'ema1_window': 21, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:51,787] Trial 993 finished with value: 10085.04 and parameters: {'ema1_window': 22, 'ema2_window': 16}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:52,010] Trial 994 finished with value: 9890.02 and parameters: {'ema1_window': 21, 'ema2_window': 36}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:52,030] Trial 995 finished with value: 10153.36 and parameters: {'ema1_window': 22, 'ema2_window': 14}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:52,049] Trial 996 finished with value: 10142.82 and parameters: {'ema1_window': 20, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:52,068] Trial 997 finished with value: 10074.98 and parameters: {'ema1_window': 21, 'ema2_window': 16}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:52,087] Trial 998 finished with value: 10143.02 and parameters: {'ema1_window': 21, 'ema2_window': 14}. Best is trial 359 with value: 10163.2.\n[I 2024-07-02 16:44:52,112] Trial 999 finished with value: 10142.82 and parameters: {'ema1_window': 20, 'ema2_window': 15}. Best is trial 359 with value: 10163.2.\n</pre> In\u00a0[3]: Copied! <pre>study.best_params\n</pre> study.best_params Out[3]: <pre>{'ema1_window': 21, 'ema2_window': 15}</pre> In\u00a0[4]: Copied! <pre>lt.plotter.heatmap(x=\"ema1_window\", y=\"ema2_window\", z=\"equity\")\n</pre> lt.plotter.heatmap(x=\"ema1_window\", y=\"ema2_window\", z=\"equity\") In\u00a0[5]: Copied! <pre>lt.plotter.contour(x=\"ema1_window\", y=\"ema2_window\", z=\"equity\")\n</pre> lt.plotter.contour(x=\"ema1_window\", y=\"ema2_window\", z=\"equity\") In\u00a0[6]: Copied! <pre>fig = optuna.visualization.plot_optimization_history(study)\nfig.show()\n</pre> fig = optuna.visualization.plot_optimization_history(study) fig.show() In\u00a0[7]: Copied! <pre>fig = optuna.visualization.plot_contour(study, params=[\"ema1_window\", \"ema2_window\"])\nfig.show()\n</pre> fig = optuna.visualization.plot_contour(study, params=[\"ema1_window\", \"ema2_window\"]) fig.show() In\u00a0[8]: Copied! <pre>import plotly.io as pio\n\npio.renderers.default = \"notebook\"\npio.templates.default = \"plotly_dark\"\n</pre> import plotly.io as pio  pio.renderers.default = \"notebook\" pio.templates.default = \"plotly_dark\" In\u00a0[9]: Copied! <pre>study.trials\n</pre> study.trials Out[9]: <pre>[FrozenTrial(number=0, state=1, values=[9945.98], datetime_start=datetime.datetime(2024, 7, 2, 16, 43, 59, 665325), datetime_complete=datetime.datetime(2024, 7, 2, 16, 43, 59, 960959), params={'ema1_window': 7, 'ema2_window': 34}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=0, value=None),\n FrozenTrial(number=1, state=1, values=[9978.7], datetime_start=datetime.datetime(2024, 7, 2, 16, 43, 59, 961623), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 0, 168706), params={'ema1_window': 14, 'ema2_window': 44}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=1, value=None),\n FrozenTrial(number=2, state=1, values=[9961.2], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 0, 169422), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 0, 376917), params={'ema1_window': 16, 'ema2_window': 39}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=2, value=None),\n FrozenTrial(number=3, state=1, values=[10033.02], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 0, 377598), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 0, 607221), params={'ema1_window': 16, 'ema2_window': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=3, value=None),\n FrozenTrial(number=4, state=1, values=[9998.88], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 0, 608388), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 0, 808225), params={'ema1_window': 13, 'ema2_window': 47}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=4, value=None),\n FrozenTrial(number=5, state=1, values=[9907.68], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 0, 808979), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 1, 1697), params={'ema1_window': 15, 'ema2_window': 48}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=5, value=None),\n FrozenTrial(number=6, state=1, values=[9976.22], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 1, 2353), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 1, 237371), params={'ema1_window': 6, 'ema2_window': 26}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=6, value=None),\n FrozenTrial(number=7, state=1, values=[9986.2], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 1, 238340), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 1, 467244), params={'ema1_window': 9, 'ema2_window': 22}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=7, value=None),\n FrozenTrial(number=8, state=1, values=[9914.42], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 1, 468231), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 1, 676059), params={'ema1_window': 23, 'ema2_window': 19}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=8, value=None),\n FrozenTrial(number=9, state=1, values=[9804.6], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 1, 677190), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 1, 911415), params={'ema1_window': 7, 'ema2_window': 21}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=9, value=None),\n FrozenTrial(number=10, state=1, values=[10001.7], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 1, 912368), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 2, 149299), params={'ema1_window': 21, 'ema2_window': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=10, value=None),\n FrozenTrial(number=11, state=1, values=[10110.18], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 2, 150264), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 2, 383530), params={'ema1_window': 23, 'ema2_window': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=11, value=None),\n FrozenTrial(number=12, state=1, values=[10000.68], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 2, 384471), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 2, 629032), params={'ema1_window': 19, 'ema2_window': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=12, value=None),\n FrozenTrial(number=13, state=1, values=[10014.94], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 2, 629926), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 2, 895950), params={'ema1_window': 25, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=13, value=None),\n FrozenTrial(number=14, state=1, values=[10162.62], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 2, 896614), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 3, 131309), params={'ema1_window': 18, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=14, value=None),\n FrozenTrial(number=15, state=1, values=[9907.0], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 3, 131829), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 3, 347197), params={'ema1_window': 19, 'ema2_window': 29}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=15, value=None),\n FrozenTrial(number=16, state=1, values=[9985.34], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 3, 347865), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 3, 565447), params={'ema1_window': 25, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=16, value=None),\n FrozenTrial(number=17, state=1, values=[10142.82], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 3, 566112), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 3, 802234), params={'ema1_window': 20, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=17, value=None),\n FrozenTrial(number=18, state=1, values=[9834.78], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 3, 802937), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 4, 34771), params={'ema1_window': 11, 'ema2_window': 26}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=18, value=None),\n FrozenTrial(number=19, state=1, values=[10162.82], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 4, 35286), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 4, 269608), params={'ema1_window': 19, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=19, value=None),\n FrozenTrial(number=20, state=1, values=[9936.44], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 4, 270270), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 4, 483177), params={'ema1_window': 17, 'ema2_window': 34}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=20, value=None),\n FrozenTrial(number=21, state=1, values=[10162.82], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 4, 483972), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 4, 489740), params={'ema1_window': 19, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=21, value=None),\n FrozenTrial(number=22, state=1, values=[9994.6], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 4, 490163), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 4, 701723), params={'ema1_window': 18, 'ema2_window': 23}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=22, value=None),\n FrozenTrial(number=23, state=1, values=[10005.18], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 4, 702403), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 4, 924109), params={'ema1_window': 22, 'ema2_window': 18}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=23, value=None),\n FrozenTrial(number=24, state=1, values=[10160.48], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 4, 924769), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 5, 159202), params={'ema1_window': 18, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=24, value=None),\n FrozenTrial(number=25, state=1, values=[9805.5], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 5, 159828), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 5, 395999), params={'ema1_window': 12, 'ema2_window': 24}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=25, value=None),\n FrozenTrial(number=26, state=1, values=[10065.02], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 5, 397008), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 5, 662830), params={'ema1_window': 21, 'ema2_window': 18}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=26, value=None),\n FrozenTrial(number=27, state=1, values=[10022.02], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 5, 663480), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 5, 902141), params={'ema1_window': 17, 'ema2_window': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=27, value=None),\n FrozenTrial(number=28, state=1, values=[10000.0], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 5, 902798), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 6, 13409), params={'ema1_window': 19, 'ema2_window': 19}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=28, value=None),\n FrozenTrial(number=29, state=1, values=[9948.18], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 6, 14403), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 6, 224121), params={'ema1_window': 21, 'ema2_window': 31}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=29, value=None),\n FrozenTrial(number=30, state=1, values=[10002.86], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 6, 224775), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 6, 467063), params={'ema1_window': 15, 'ema2_window': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=30, value=None),\n FrozenTrial(number=31, state=1, values=[10160.48], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 6, 467658), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 6, 474144), params={'ema1_window': 18, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=31, value=None),\n FrozenTrial(number=32, state=1, values=[9894.68], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 6, 474830), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 6, 695283), params={'ema1_window': 17, 'ema2_window': 20}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=32, value=None),\n FrozenTrial(number=33, state=1, values=[10120.88], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 6, 695989), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 6, 934548), params={'ema1_window': 20, 'ema2_window': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=33, value=None),\n FrozenTrial(number=34, state=1, values=[9971.44], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 6, 935258), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 7, 143656), params={'ema1_window': 14, 'ema2_window': 42}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=34, value=None),\n FrozenTrial(number=35, state=1, values=[9807.88], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 7, 144287), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 7, 376047), params={'ema1_window': 16, 'ema2_window': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=35, value=None),\n FrozenTrial(number=36, state=1, values=[10020.16], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 7, 376757), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 7, 612775), params={'ema1_window': 18, 'ema2_window': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=36, value=None),\n FrozenTrial(number=37, state=1, values=[9966.88], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 7, 613417), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 7, 819171), params={'ema1_window': 15, 'ema2_window': 38}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=37, value=None),\n FrozenTrial(number=38, state=1, values=[9936.64], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 7, 820131), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 8, 29383), params={'ema1_window': 23, 'ema2_window': 26}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=38, value=None),\n FrozenTrial(number=39, state=1, values=[9904.44], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 8, 30508), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 8, 250939), params={'ema1_window': 14, 'ema2_window': 24}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=39, value=None),\n FrozenTrial(number=40, state=1, values=[9994.5], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 8, 251583), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 8, 465906), params={'ema1_window': 20, 'ema2_window': 21}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=40, value=None),\n FrozenTrial(number=41, state=1, values=[10160.48], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 8, 466859), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 8, 472922), params={'ema1_window': 18, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=41, value=None),\n FrozenTrial(number=42, state=1, values=[10012.72], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 8, 473607), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 8, 762242), params={'ema1_window': 16, 'ema2_window': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=42, value=None),\n FrozenTrial(number=43, state=1, values=[10162.62], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 8, 762893), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 8, 769603), params={'ema1_window': 18, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=43, value=None),\n FrozenTrial(number=44, state=1, values=[10094.6], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 8, 770276), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 8, 994445), params={'ema1_window': 19, 'ema2_window': 18}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=44, value=None),\n FrozenTrial(number=45, state=1, values=[9954.2], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 8, 995196), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 9, 211011), params={'ema1_window': 22, 'ema2_window': 21}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=45, value=None),\n FrozenTrial(number=46, state=1, values=[10110.94], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 9, 211621), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 9, 446874), params={'ema1_window': 17, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=46, value=None),\n FrozenTrial(number=47, state=1, values=[10074.88], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 9, 447729), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 9, 670468), params={'ema1_window': 20, 'ema2_window': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=47, value=None),\n FrozenTrial(number=48, state=1, values=[10033.02], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 9, 671194), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 9, 678136), params={'ema1_window': 16, 'ema2_window': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=48, value=None),\n FrozenTrial(number=49, state=1, values=[9975.7], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 9, 678844), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 9, 892369), params={'ema1_window': 22, 'ema2_window': 19}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=49, value=None),\n FrozenTrial(number=50, state=1, values=[9995.14], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 9, 893297), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 10, 114219), params={'ema1_window': 13, 'ema2_window': 28}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=50, value=None),\n FrozenTrial(number=51, state=1, values=[10162.62], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 10, 115198), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 10, 121802), params={'ema1_window': 18, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=51, value=None),\n FrozenTrial(number=52, state=1, values=[10162.82], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 10, 122305), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 10, 128458), params={'ema1_window': 19, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=52, value=None),\n FrozenTrial(number=53, state=1, values=[10016.0], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 10, 128998), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 10, 346620), params={'ema1_window': 21, 'ema2_window': 22}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=53, value=None),\n FrozenTrial(number=54, state=1, values=[10124.06], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 10, 347314), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 10, 582553), params={'ema1_window': 19, 'ema2_window': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=54, value=None),\n FrozenTrial(number=55, state=1, values=[10142.46], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 10, 583370), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 10, 820666), params={'ema1_window': 24, 'ema2_window': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=55, value=None),\n FrozenTrial(number=56, state=1, values=[10142.64], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 10, 821391), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 11, 59139), params={'ema1_window': 20, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=56, value=None),\n FrozenTrial(number=57, state=1, values=[9894.68], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 11, 59847), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 11, 66498), params={'ema1_window': 17, 'ema2_window': 20}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=57, value=None),\n FrozenTrial(number=58, state=1, values=[9961.66], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 11, 67066), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 11, 277534), params={'ema1_window': 9, 'ema2_window': 49}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=58, value=None),\n FrozenTrial(number=59, state=1, values=[10162.82], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 11, 278124), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 11, 284970), params={'ema1_window': 19, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=59, value=None),\n FrozenTrial(number=60, state=1, values=[10016.0], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 11, 285455), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 11, 515326), params={'ema1_window': 19, 'ema2_window': 24}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=60, value=None),\n FrozenTrial(number=61, state=1, values=[10162.32], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 11, 516047), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 11, 811531), params={'ema1_window': 18, 'ema2_window': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=61, value=None),\n FrozenTrial(number=62, state=1, values=[10133.72], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 11, 812192), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 12, 38125), params={'ema1_window': 20, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=62, value=None),\n FrozenTrial(number=63, state=1, values=[10000.1], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 12, 38667), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 12, 274409), params={'ema1_window': 19, 'ema2_window': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=63, value=None),\n FrozenTrial(number=64, state=1, values=[9845.26], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 12, 275406), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 12, 502671), params={'ema1_window': 17, 'ema2_window': 19}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=64, value=None),\n FrozenTrial(number=65, state=1, values=[10143.02], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 12, 503340), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 12, 736468), params={'ema1_window': 21, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=65, value=None),\n FrozenTrial(number=66, state=1, values=[10162.62], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 12, 737142), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 12, 744415), params={'ema1_window': 18, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=66, value=None),\n FrozenTrial(number=67, state=1, values=[10113.68], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 12, 745182), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 12, 993449), params={'ema1_window': 15, 'ema2_window': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=67, value=None),\n FrozenTrial(number=68, state=1, values=[10011.86], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 12, 994368), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 13, 235185), params={'ema1_window': 16, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=68, value=None),\n FrozenTrial(number=69, state=1, values=[9936.44], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 13, 235831), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 13, 242943), params={'ema1_window': 17, 'ema2_window': 34}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=69, value=None),\n FrozenTrial(number=70, state=1, values=[9964.56], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 13, 243380), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 13, 442269), params={'ema1_window': 22, 'ema2_window': 45}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=70, value=None),\n FrozenTrial(number=71, state=1, values=[10162.62], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 13, 443293), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 13, 450913), params={'ema1_window': 18, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=71, value=None),\n FrozenTrial(number=72, state=1, values=[10094.6], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 13, 451634), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 13, 458342), params={'ema1_window': 19, 'ema2_window': 18}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=72, value=None),\n FrozenTrial(number=73, state=1, values=[10162.62], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 13, 459058), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 13, 465496), params={'ema1_window': 18, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=73, value=None),\n FrozenTrial(number=74, state=1, values=[10000.1], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 13, 466121), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 13, 472507), params={'ema1_window': 19, 'ema2_window': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=74, value=None),\n FrozenTrial(number=75, state=1, values=[9975.7], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 13, 472972), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 13, 688693), params={'ema1_window': 21, 'ema2_window': 20}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=75, value=None),\n FrozenTrial(number=76, state=1, values=[10142.64], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 13, 689615), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 13, 696453), params={'ema1_window': 20, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=76, value=None),\n FrozenTrial(number=77, state=1, values=[10000.0], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 13, 697083), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 13, 809654), params={'ema1_window': 18, 'ema2_window': 18}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=77, value=None),\n FrozenTrial(number=78, state=1, values=[10160.48], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 13, 810613), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 14, 45749), params={'ema1_window': 17, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=78, value=None),\n FrozenTrial(number=79, state=1, values=[9964.68], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 14, 46342), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 14, 269467), params={'ema1_window': 19, 'ema2_window': 21}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=79, value=None),\n FrozenTrial(number=80, state=1, values=[9904.82], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 14, 270620), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 14, 503656), params={'ema1_window': 16, 'ema2_window': 23}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=80, value=None),\n FrozenTrial(number=81, state=1, values=[10162.62], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 14, 504640), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 14, 511477), params={'ema1_window': 18, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=81, value=None),\n FrozenTrial(number=82, state=1, values=[10124.06], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 14, 512088), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 14, 518451), params={'ema1_window': 19, 'ema2_window': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=82, value=None),\n FrozenTrial(number=83, state=1, values=[10120.88], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 14, 519074), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 14, 525517), params={'ema1_window': 20, 'ema2_window': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=83, value=None),\n FrozenTrial(number=84, state=1, values=[10160.48], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 14, 526160), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 14, 532569), params={'ema1_window': 18, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=84, value=None),\n FrozenTrial(number=85, state=1, values=[9845.26], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 14, 533167), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 14, 539675), params={'ema1_window': 17, 'ema2_window': 19}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=85, value=None),\n FrozenTrial(number=86, state=1, values=[10162.62], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 14, 540307), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 14, 546722), params={'ema1_window': 18, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=86, value=None),\n FrozenTrial(number=87, state=1, values=[10143.02], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 14, 547378), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 14, 553824), params={'ema1_window': 21, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=87, value=None),\n FrozenTrial(number=88, state=1, values=[10003.2], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 14, 554258), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 14, 867832), params={'ema1_window': 5, 'ema2_window': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=88, value=None),\n FrozenTrial(number=89, state=1, values=[10074.9], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 14, 868476), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 15, 94076), params={'ema1_window': 20, 'ema2_window': 18}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=89, value=None),\n FrozenTrial(number=90, state=1, values=[9857.34], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 15, 94624), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 15, 334797), params={'ema1_window': 15, 'ema2_window': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=90, value=None),\n FrozenTrial(number=91, state=1, values=[10162.62], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 15, 335748), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 15, 343164), params={'ema1_window': 18, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=91, value=None),\n FrozenTrial(number=92, state=1, values=[10160.48], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 15, 343860), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 15, 351233), params={'ema1_window': 18, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=92, value=None),\n FrozenTrial(number=93, state=1, values=[9894.68], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 15, 351972), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 15, 358595), params={'ema1_window': 17, 'ema2_window': 20}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=93, value=None),\n FrozenTrial(number=94, state=1, values=[10020.16], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 15, 359221), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 15, 365871), params={'ema1_window': 18, 'ema2_window': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=94, value=None),\n FrozenTrial(number=95, state=1, values=[10094.6], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 15, 366675), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 15, 373275), params={'ema1_window': 19, 'ema2_window': 18}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=95, value=None),\n FrozenTrial(number=96, state=1, values=[10162.82], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 15, 373912), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 15, 380569), params={'ema1_window': 19, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=96, value=None),\n FrozenTrial(number=97, state=1, values=[9961.8], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 15, 381134), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 15, 621554), params={'ema1_window': 20, 'ema2_window': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=97, value=None),\n FrozenTrial(number=98, state=1, values=[10160.68], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 15, 622210), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 15, 861176), params={'ema1_window': 19, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=98, value=None),\n FrozenTrial(number=99, state=1, values=[9807.88], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 15, 861821), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 15, 869711), params={'ema1_window': 16, 'ema2_window': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=99, value=None),\n FrozenTrial(number=100, state=1, values=[9938.72], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 15, 870560), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 16, 80384), params={'ema1_window': 20, 'ema2_window': 39}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=100, value=None),\n FrozenTrial(number=101, state=1, values=[10110.94], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 16, 81593), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 16, 89590), params={'ema1_window': 17, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=101, value=None),\n FrozenTrial(number=102, state=1, values=[9894.8], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 16, 90306), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 16, 314306), params={'ema1_window': 18, 'ema2_window': 19}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=102, value=None),\n FrozenTrial(number=103, state=1, values=[10162.82], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 16, 315152), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 16, 322435), params={'ema1_window': 19, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=103, value=None),\n FrozenTrial(number=104, state=1, values=[10162.82], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 16, 323150), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 16, 329873), params={'ema1_window': 19, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=104, value=None),\n FrozenTrial(number=105, state=1, values=[10162.72], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 16, 330655), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 16, 563918), params={'ema1_window': 19, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=105, value=None),\n FrozenTrial(number=106, state=1, values=[10110.74], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 16, 564943), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 16, 801401), params={'ema1_window': 19, 'ema2_window': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=106, value=None),\n FrozenTrial(number=107, state=1, values=[9948.18], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 16, 802266), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 16, 809882), params={'ema1_window': 21, 'ema2_window': 31}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=107, value=None),\n FrozenTrial(number=108, state=1, values=[10142.64], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 16, 810458), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 16, 817268), params={'ema1_window': 20, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=108, value=None),\n FrozenTrial(number=109, state=1, values=[10124.06], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 16, 817854), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 16, 824670), params={'ema1_window': 19, 'ema2_window': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=109, value=None),\n FrozenTrial(number=110, state=1, values=[10016.0], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 16, 825241), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 16, 832108), params={'ema1_window': 21, 'ema2_window': 22}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=110, value=None),\n FrozenTrial(number=111, state=1, values=[10142.82], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 16, 832649), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 16, 839464), params={'ema1_window': 20, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=111, value=None),\n FrozenTrial(number=112, state=1, values=[10094.6], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 16, 840047), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 16, 846830), params={'ema1_window': 19, 'ema2_window': 18}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=112, value=None),\n FrozenTrial(number=113, state=1, values=[10162.82], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 16, 847423), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 16, 854185), params={'ema1_window': 19, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=113, value=None),\n FrozenTrial(number=114, state=1, values=[10162.72], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 16, 854748), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 16, 861632), params={'ema1_window': 19, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=114, value=None),\n FrozenTrial(number=115, state=1, values=[10074.88], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 16, 862363), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 16, 869386), params={'ema1_window': 20, 'ema2_window': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=115, value=None),\n FrozenTrial(number=116, state=1, values=[10000.0], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 16, 870034), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 16, 876869), params={'ema1_window': 19, 'ema2_window': 19}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=116, value=None),\n FrozenTrial(number=117, state=1, values=[10000.1], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 16, 877417), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 16, 884357), params={'ema1_window': 19, 'ema2_window': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=117, value=None),\n FrozenTrial(number=118, state=1, values=[10075.0], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 16, 885003), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 17, 112282), params={'ema1_window': 22, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=118, value=None),\n FrozenTrial(number=119, state=1, values=[10142.64], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 17, 113263), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 17, 120666), params={'ema1_window': 20, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=119, value=None),\n FrozenTrial(number=120, state=1, values=[9944.52], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 17, 121324), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 17, 353263), params={'ema1_window': 19, 'ema2_window': 20}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=120, value=None),\n FrozenTrial(number=121, state=1, values=[10160.48], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 17, 353981), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 17, 362379), params={'ema1_window': 18, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=121, value=None),\n FrozenTrial(number=122, state=1, values=[10162.82], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 17, 363064), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 17, 370486), params={'ema1_window': 19, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=122, value=None),\n FrozenTrial(number=123, state=1, values=[10084.94], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 17, 371014), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 17, 601245), params={'ema1_window': 21, 'ema2_window': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=123, value=None),\n FrozenTrial(number=124, state=1, values=[10162.82], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 17, 601949), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 17, 609942), params={'ema1_window': 19, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=124, value=None),\n FrozenTrial(number=125, state=1, values=[10120.88], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 17, 610502), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 17, 617753), params={'ema1_window': 20, 'ema2_window': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=125, value=None),\n FrozenTrial(number=126, state=1, values=[10162.82], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 17, 618274), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 17, 625470), params={'ema1_window': 19, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=126, value=None),\n FrozenTrial(number=127, state=1, values=[10000.0], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 17, 625962), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 17, 632945), params={'ema1_window': 19, 'ema2_window': 19}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=127, value=None),\n FrozenTrial(number=128, state=1, values=[10094.6], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 17, 633380), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 17, 640460), params={'ema1_window': 19, 'ema2_window': 18}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=128, value=None),\n FrozenTrial(number=129, state=1, values=[10133.72], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 17, 640917), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 17, 648038), params={'ema1_window': 20, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=129, value=None),\n FrozenTrial(number=130, state=1, values=[10054.78], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 17, 648509), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 17, 931445), params={'ema1_window': 24, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=130, value=None),\n FrozenTrial(number=131, state=1, values=[10124.06], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 17, 932157), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 17, 940063), params={'ema1_window': 19, 'ema2_window': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=131, value=None),\n FrozenTrial(number=132, state=1, values=[10160.68], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 17, 940586), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 17, 947945), params={'ema1_window': 19, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=132, value=None),\n FrozenTrial(number=133, state=1, values=[10162.62], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 17, 948465), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 17, 955573), params={'ema1_window': 18, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=133, value=None),\n FrozenTrial(number=134, state=1, values=[10074.9], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 17, 956045), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 17, 963310), params={'ema1_window': 20, 'ema2_window': 18}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=134, value=None),\n FrozenTrial(number=135, state=1, values=[10133.72], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 17, 963818), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 17, 970947), params={'ema1_window': 20, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=135, value=None),\n FrozenTrial(number=136, state=1, values=[10152.6], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 17, 971413), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 18, 206633), params={'ema1_window': 21, 'ema2_window': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=136, value=None),\n FrozenTrial(number=137, state=1, values=[10162.72], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 18, 207367), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 18, 215386), params={'ema1_window': 19, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=137, value=None),\n FrozenTrial(number=138, state=1, values=[10162.72], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 18, 215790), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 18, 223288), params={'ema1_window': 19, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=138, value=None),\n FrozenTrial(number=139, state=1, values=[10110.84], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 18, 223672), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 18, 464132), params={'ema1_window': 18, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=139, value=None),\n FrozenTrial(number=140, state=1, values=[9945.7], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 18, 464808), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 18, 731186), params={'ema1_window': 8, 'ema2_window': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=140, value=None),\n FrozenTrial(number=141, state=1, values=[10162.72], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 18, 731793), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 18, 740733), params={'ema1_window': 19, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=141, value=None),\n FrozenTrial(number=142, state=1, values=[10124.06], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 18, 741311), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 18, 749086), params={'ema1_window': 19, 'ema2_window': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=142, value=None),\n FrozenTrial(number=143, state=1, values=[10162.82], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 18, 749614), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 18, 757230), params={'ema1_window': 19, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=143, value=None),\n FrozenTrial(number=144, state=1, values=[10133.72], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 18, 757747), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 18, 765271), params={'ema1_window': 20, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=144, value=None),\n FrozenTrial(number=145, state=1, values=[10124.06], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 18, 765769), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 18, 773126), params={'ema1_window': 19, 'ema2_window': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=145, value=None),\n FrozenTrial(number=146, state=1, values=[10020.16], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 18, 773647), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 18, 781141), params={'ema1_window': 18, 'ema2_window': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=146, value=None),\n FrozenTrial(number=147, state=1, values=[9933.1], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 18, 781658), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 19, 30611), params={'ema1_window': 12, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=147, value=None),\n FrozenTrial(number=148, state=1, values=[10074.9], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 19, 31333), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 19, 39699), params={'ema1_window': 20, 'ema2_window': 18}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=148, value=None),\n FrozenTrial(number=149, state=1, values=[10160.48], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 19, 40333), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 19, 47790), params={'ema1_window': 17, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=149, value=None),\n FrozenTrial(number=150, state=1, values=[10160.48], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 19, 48248), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 19, 55604), params={'ema1_window': 18, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=150, value=None),\n FrozenTrial(number=151, state=1, values=[10162.82], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 19, 56083), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 19, 63330), params={'ema1_window': 19, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=151, value=None),\n FrozenTrial(number=152, state=1, values=[10124.06], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 19, 63797), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 19, 71068), params={'ema1_window': 19, 'ema2_window': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=152, value=None),\n FrozenTrial(number=153, state=1, values=[10162.72], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 19, 71470), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 19, 78798), params={'ema1_window': 19, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=153, value=None),\n FrozenTrial(number=154, state=1, values=[10162.82], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 19, 79202), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 19, 86568), params={'ema1_window': 19, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=154, value=None),\n FrozenTrial(number=155, state=1, values=[10074.9], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 19, 87014), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 19, 94461), params={'ema1_window': 20, 'ema2_window': 18}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=155, value=None),\n FrozenTrial(number=156, state=1, values=[10162.62], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 19, 94904), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 19, 102877), params={'ema1_window': 18, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=156, value=None),\n FrozenTrial(number=157, state=1, values=[9924.06], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 19, 103221), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 19, 335616), params={'ema1_window': 20, 'ema2_window': 42}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=157, value=None),\n FrozenTrial(number=158, state=1, values=[10160.68], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 19, 336410), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 19, 344400), params={'ema1_window': 19, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=158, value=None),\n FrozenTrial(number=159, state=1, values=[9894.8], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 19, 344987), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 19, 352434), params={'ema1_window': 18, 'ema2_window': 19}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=159, value=None),\n FrozenTrial(number=160, state=1, values=[10162.82], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 19, 352803), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 19, 360548), params={'ema1_window': 19, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=160, value=None),\n FrozenTrial(number=161, state=1, values=[10124.06], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 19, 360935), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 19, 368582), params={'ema1_window': 19, 'ema2_window': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=161, value=None),\n FrozenTrial(number=162, state=1, values=[10162.82], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 19, 369077), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 19, 376602), params={'ema1_window': 19, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=162, value=None),\n FrozenTrial(number=163, state=1, values=[10133.72], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 19, 377102), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 19, 384570), params={'ema1_window': 20, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=163, value=None),\n FrozenTrial(number=164, state=1, values=[10000.0], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 19, 385020), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 19, 392501), params={'ema1_window': 18, 'ema2_window': 18}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=164, value=None),\n FrozenTrial(number=165, state=1, values=[10162.82], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 19, 392973), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 19, 400476), params={'ema1_window': 19, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=165, value=None),\n FrozenTrial(number=166, state=1, values=[10074.88], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 19, 400921), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 19, 408585), params={'ema1_window': 20, 'ema2_window': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=166, value=None),\n FrozenTrial(number=167, state=1, values=[10162.62], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 19, 409075), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 19, 416680), params={'ema1_window': 18, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=167, value=None),\n FrozenTrial(number=168, state=1, values=[10124.06], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 19, 417026), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 19, 424606), params={'ema1_window': 19, 'ema2_window': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=168, value=None),\n FrozenTrial(number=169, state=1, values=[10160.48], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 19, 425147), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 19, 432666), params={'ema1_window': 17, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=169, value=None),\n FrozenTrial(number=170, state=1, values=[10094.6], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 19, 433207), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 19, 440603), params={'ema1_window': 19, 'ema2_window': 18}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=170, value=None),\n FrozenTrial(number=171, state=1, values=[10160.68], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 19, 441054), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 19, 448631), params={'ema1_window': 19, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=171, value=None),\n FrozenTrial(number=172, state=1, values=[9920.08], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 19, 449246), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 19, 661953), params={'ema1_window': 19, 'ema2_window': 36}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=172, value=None),\n FrozenTrial(number=173, state=1, values=[10133.72], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 19, 662667), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 19, 671243), params={'ema1_window': 20, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=173, value=None),\n FrozenTrial(number=174, state=1, values=[10160.48], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 19, 671763), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 19, 680010), params={'ema1_window': 18, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=174, value=None),\n FrozenTrial(number=175, state=1, values=[10162.72], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 19, 680551), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 19, 688137), params={'ema1_window': 19, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=175, value=None),\n FrozenTrial(number=176, state=1, values=[10133.72], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 19, 688624), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 19, 696406), params={'ema1_window': 20, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=176, value=None),\n FrozenTrial(number=177, state=1, values=[10162.32], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 19, 696780), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 19, 704638), params={'ema1_window': 18, 'ema2_window': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=177, value=None),\n FrozenTrial(number=178, state=1, values=[10160.68], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 19, 705161), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 19, 712947), params={'ema1_window': 19, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=178, value=None),\n FrozenTrial(number=179, state=1, values=[10124.06], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 19, 713461), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 19, 721234), params={'ema1_window': 19, 'ema2_window': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=179, value=None),\n FrozenTrial(number=180, state=1, values=[10074.9], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 19, 721755), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 19, 729542), params={'ema1_window': 20, 'ema2_window': 18}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=180, value=None),\n FrozenTrial(number=181, state=1, values=[10162.72], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 19, 730016), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 19, 737730), params={'ema1_window': 19, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=181, value=None),\n FrozenTrial(number=182, state=1, values=[10162.72], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 19, 738271), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 19, 746057), params={'ema1_window': 19, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=182, value=None),\n FrozenTrial(number=183, state=1, values=[10020.16], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 19, 746579), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 19, 754348), params={'ema1_window': 18, 'ema2_window': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=183, value=None),\n FrozenTrial(number=184, state=1, values=[10162.82], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 19, 754884), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 19, 762719), params={'ema1_window': 19, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=184, value=None),\n FrozenTrial(number=185, state=1, values=[9936.22], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 19, 763179), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 19, 984957), params={'ema1_window': 20, 'ema2_window': 26}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=185, value=None),\n FrozenTrial(number=186, state=1, values=[10162.62], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 19, 985741), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 19, 993981), params={'ema1_window': 18, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=186, value=None),\n FrozenTrial(number=187, state=1, values=[10162.82], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 19, 994479), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 20, 2423), params={'ema1_window': 19, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=187, value=None),\n FrozenTrial(number=188, state=1, values=[10084.94], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 20, 2919), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 20, 10849), params={'ema1_window': 21, 'ema2_window': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=188, value=None),\n FrozenTrial(number=189, state=1, values=[10162.82], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 20, 11333), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 20, 19229), params={'ema1_window': 19, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=189, value=None),\n FrozenTrial(number=190, state=1, values=[10025.12], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 20, 19735), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 20, 250826), params={'ema1_window': 20, 'ema2_window': 19}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=190, value=None),\n FrozenTrial(number=191, state=1, values=[10162.82], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 20, 251578), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 20, 260770), params={'ema1_window': 19, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=191, value=None),\n FrozenTrial(number=192, state=1, values=[10124.06], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 20, 261354), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 20, 269709), params={'ema1_window': 19, 'ema2_window': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=192, value=None),\n FrozenTrial(number=193, state=1, values=[10162.82], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 20, 270230), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 20, 278504), params={'ema1_window': 19, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=193, value=None),\n FrozenTrial(number=194, state=1, values=[10000.0], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 20, 279056), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 20, 287029), params={'ema1_window': 18, 'ema2_window': 18}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=194, value=None),\n FrozenTrial(number=195, state=1, values=[10162.82], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 20, 287398), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 20, 295722), params={'ema1_window': 19, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=195, value=None),\n FrozenTrial(number=196, state=1, values=[10160.68], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 20, 296238), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 20, 304276), params={'ema1_window': 19, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=196, value=None),\n FrozenTrial(number=197, state=1, values=[10074.88], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 20, 304698), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 20, 313144), params={'ema1_window': 20, 'ema2_window': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=197, value=None),\n FrozenTrial(number=198, state=1, values=[10160.48], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 20, 313736), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 20, 322080), params={'ema1_window': 18, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=198, value=None),\n FrozenTrial(number=199, state=1, values=[10142.82], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 20, 322740), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 20, 331193), params={'ema1_window': 20, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=199, value=None),\n FrozenTrial(number=200, state=1, values=[10162.82], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 20, 332080), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 20, 340269), params={'ema1_window': 19, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=200, value=None),\n FrozenTrial(number=201, state=1, values=[10162.82], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 20, 340905), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 20, 349393), params={'ema1_window': 19, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=201, value=None),\n FrozenTrial(number=202, state=1, values=[10124.06], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 20, 349998), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 20, 358341), params={'ema1_window': 19, 'ema2_window': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=202, value=None),\n FrozenTrial(number=203, state=1, values=[10162.82], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 20, 358935), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 20, 367219), params={'ema1_window': 19, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=203, value=None),\n FrozenTrial(number=204, state=1, values=[10000.0], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 20, 367767), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 20, 376300), params={'ema1_window': 18, 'ema2_window': 18}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=204, value=None),\n FrozenTrial(number=205, state=1, values=[10160.68], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 20, 376861), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 20, 385257), params={'ema1_window': 19, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=205, value=None),\n FrozenTrial(number=206, state=1, values=[10160.48], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 20, 385798), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 20, 394326), params={'ema1_window': 18, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=206, value=None),\n FrozenTrial(number=207, state=1, values=[10074.88], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 20, 394950), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 20, 403726), params={'ema1_window': 20, 'ema2_window': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=207, value=None),\n FrozenTrial(number=208, state=1, values=[10124.06], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 20, 404366), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 20, 413760), params={'ema1_window': 19, 'ema2_window': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=208, value=None),\n FrozenTrial(number=209, state=1, values=[9852.9], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 20, 414456), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 20, 681444), params={'ema1_window': 10, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=209, value=None),\n FrozenTrial(number=210, state=1, values=[10160.48], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 20, 682268), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 20, 691649), params={'ema1_window': 18, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=210, value=None),\n FrozenTrial(number=211, state=1, values=[10162.82], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 20, 692265), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 20, 700915), params={'ema1_window': 19, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=211, value=None),\n FrozenTrial(number=212, state=1, values=[10162.82], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 20, 701478), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 20, 710146), params={'ema1_window': 19, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=212, value=None),\n FrozenTrial(number=213, state=1, values=[10162.82], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 20, 710719), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 20, 719035), params={'ema1_window': 19, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=213, value=None),\n FrozenTrial(number=214, state=1, values=[10142.64], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 20, 719566), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 20, 727991), params={'ema1_window': 20, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=214, value=None),\n FrozenTrial(number=215, state=1, values=[10162.72], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 20, 728573), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 20, 736891), params={'ema1_window': 19, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=215, value=None),\n FrozenTrial(number=216, state=1, values=[10124.06], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 20, 737471), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 20, 746445), params={'ema1_window': 19, 'ema2_window': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=216, value=None),\n FrozenTrial(number=217, state=1, values=[10133.72], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 20, 746984), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 20, 755409), params={'ema1_window': 20, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=217, value=None),\n FrozenTrial(number=218, state=1, values=[10094.6], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 20, 756115), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 20, 764389), params={'ema1_window': 19, 'ema2_window': 18}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=218, value=None),\n FrozenTrial(number=219, state=1, values=[10162.32], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 20, 765152), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 20, 773546), params={'ema1_window': 18, 'ema2_window': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=219, value=None),\n FrozenTrial(number=220, state=1, values=[10142.82], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 20, 774142), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 20, 782595), params={'ema1_window': 20, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=220, value=None),\n FrozenTrial(number=221, state=1, values=[10162.82], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 20, 783112), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 20, 791678), params={'ema1_window': 19, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=221, value=None),\n FrozenTrial(number=222, state=1, values=[10162.82], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 20, 792266), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 20, 800611), params={'ema1_window': 19, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=222, value=None),\n FrozenTrial(number=223, state=1, values=[10162.82], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 20, 801179), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 20, 810060), params={'ema1_window': 19, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=223, value=None),\n FrozenTrial(number=224, state=1, values=[10162.72], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 20, 810691), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 20, 818929), params={'ema1_window': 19, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=224, value=None),\n FrozenTrial(number=225, state=1, values=[10162.32], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 20, 819407), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 20, 827775), params={'ema1_window': 18, 'ema2_window': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=225, value=None),\n FrozenTrial(number=226, state=1, values=[10160.68], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 20, 828320), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 20, 836613), params={'ema1_window': 19, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=226, value=None),\n FrozenTrial(number=227, state=1, values=[10000.0], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 20, 837095), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 20, 845360), params={'ema1_window': 18, 'ema2_window': 18}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=227, value=None),\n FrozenTrial(number=228, state=1, values=[10074.88], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 20, 845856), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 20, 854135), params={'ema1_window': 20, 'ema2_window': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=228, value=None),\n FrozenTrial(number=229, state=1, values=[10162.82], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 20, 854661), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 20, 863000), params={'ema1_window': 19, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=229, value=None),\n FrozenTrial(number=230, state=1, values=[10162.82], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 20, 863459), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 20, 872429), params={'ema1_window': 19, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=230, value=None),\n FrozenTrial(number=231, state=1, values=[10162.82], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 20, 872926), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 20, 881228), params={'ema1_window': 19, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=231, value=None),\n FrozenTrial(number=232, state=1, values=[10162.72], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 20, 881738), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 20, 890033), params={'ema1_window': 19, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=232, value=None),\n FrozenTrial(number=233, state=1, values=[10162.82], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 20, 890669), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 20, 899256), params={'ema1_window': 19, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=233, value=None),\n FrozenTrial(number=234, state=1, values=[10074.88], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 20, 899772), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 20, 908300), params={'ema1_window': 20, 'ema2_window': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=234, value=None),\n FrozenTrial(number=235, state=1, values=[9966.68], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 20, 908798), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 21, 128243), params={'ema1_window': 18, 'ema2_window': 33}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=235, value=None),\n FrozenTrial(number=236, state=1, values=[10162.72], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 21, 128787), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 21, 138377), params={'ema1_window': 19, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=236, value=None),\n FrozenTrial(number=237, state=1, values=[10133.72], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 21, 138932), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 21, 147597), params={'ema1_window': 20, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=237, value=None),\n FrozenTrial(number=238, state=1, values=[10160.48], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 21, 148144), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 21, 156619), params={'ema1_window': 18, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=238, value=None),\n FrozenTrial(number=239, state=1, values=[10094.6], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 21, 157123), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 21, 165784), params={'ema1_window': 19, 'ema2_window': 18}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=239, value=None),\n FrozenTrial(number=240, state=1, values=[10124.06], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 21, 166299), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 21, 174625), params={'ema1_window': 19, 'ema2_window': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=240, value=None),\n FrozenTrial(number=241, state=1, values=[10162.82], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 21, 175156), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 21, 183513), params={'ema1_window': 19, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=241, value=None),\n FrozenTrial(number=242, state=1, values=[10162.82], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 21, 184030), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 21, 192694), params={'ema1_window': 19, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=242, value=None),\n FrozenTrial(number=243, state=1, values=[10162.72], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 21, 193294), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 21, 201792), params={'ema1_window': 19, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=243, value=None),\n FrozenTrial(number=244, state=1, values=[10124.06], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 21, 202355), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 21, 210906), params={'ema1_window': 19, 'ema2_window': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=244, value=None),\n FrozenTrial(number=245, state=1, values=[10142.64], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 21, 211467), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 21, 220070), params={'ema1_window': 20, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=245, value=None),\n FrozenTrial(number=246, state=1, values=[10162.82], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 21, 220598), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 21, 229454), params={'ema1_window': 19, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=246, value=None),\n FrozenTrial(number=247, state=1, values=[10162.32], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 21, 230091), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 21, 238874), params={'ema1_window': 18, 'ema2_window': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=247, value=None),\n FrozenTrial(number=248, state=1, values=[10142.82], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 21, 239441), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 21, 248684), params={'ema1_window': 20, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=248, value=None),\n FrozenTrial(number=249, state=1, values=[10162.62], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 21, 249355), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 21, 258328), params={'ema1_window': 18, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=249, value=None),\n FrozenTrial(number=250, state=1, values=[10094.6], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 21, 259142), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 21, 268123), params={'ema1_window': 19, 'ema2_window': 18}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=250, value=None),\n FrozenTrial(number=251, state=1, values=[10162.72], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 21, 268708), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 21, 277625), params={'ema1_window': 19, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=251, value=None),\n FrozenTrial(number=252, state=1, values=[9976.74], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 21, 278222), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 21, 500972), params={'ema1_window': 20, 'ema2_window': 28}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=252, value=None),\n FrozenTrial(number=253, state=1, values=[10124.06], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 21, 501769), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 21, 511633), params={'ema1_window': 19, 'ema2_window': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=253, value=None),\n FrozenTrial(number=254, state=1, values=[10160.68], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 21, 512169), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 21, 521154), params={'ema1_window': 19, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=254, value=None),\n FrozenTrial(number=255, state=1, values=[10162.62], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 21, 521676), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 21, 530198), params={'ema1_window': 18, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=255, value=None),\n FrozenTrial(number=256, state=1, values=[10142.82], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 21, 530681), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 21, 539423), params={'ema1_window': 20, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=256, value=None),\n FrozenTrial(number=257, state=1, values=[10162.32], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 21, 540004), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 21, 548988), params={'ema1_window': 18, 'ema2_window': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=257, value=None),\n FrozenTrial(number=258, state=1, values=[10162.82], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 21, 549540), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 21, 558208), params={'ema1_window': 19, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=258, value=None),\n FrozenTrial(number=259, state=1, values=[10160.68], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 21, 558727), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 21, 567343), params={'ema1_window': 19, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=259, value=None),\n FrozenTrial(number=260, state=1, values=[10074.88], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 21, 567757), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 21, 576410), params={'ema1_window': 20, 'ema2_window': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=260, value=None),\n FrozenTrial(number=261, state=1, values=[9935.0], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 21, 576792), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 21, 841436), params={'ema1_window': 19, 'ema2_window': 47}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=261, value=None),\n FrozenTrial(number=262, state=1, values=[10000.0], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 21, 842332), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 21, 852430), params={'ema1_window': 18, 'ema2_window': 18}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=262, value=None),\n FrozenTrial(number=263, state=1, values=[10162.82], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 21, 853133), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 21, 862509), params={'ema1_window': 19, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=263, value=None),\n FrozenTrial(number=264, state=1, values=[10162.72], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 21, 863075), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 21, 872349), params={'ema1_window': 19, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=264, value=None),\n FrozenTrial(number=265, state=1, values=[10133.72], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 21, 873171), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 21, 883102), params={'ema1_window': 20, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=265, value=None),\n FrozenTrial(number=266, state=1, values=[10162.62], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 21, 883956), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 21, 894321), params={'ema1_window': 18, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=266, value=None),\n FrozenTrial(number=267, state=1, values=[10000.0], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 21, 894800), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 21, 905367), params={'ema1_window': 19, 'ema2_window': 19}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=267, value=None),\n FrozenTrial(number=268, state=1, values=[10142.82], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 21, 906114), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 21, 915861), params={'ema1_window': 20, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=268, value=None),\n FrozenTrial(number=269, state=1, values=[10124.06], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 21, 916651), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 21, 931349), params={'ema1_window': 19, 'ema2_window': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=269, value=None),\n FrozenTrial(number=270, state=1, values=[10110.84], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 21, 932471), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 21, 943582), params={'ema1_window': 18, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=270, value=None),\n FrozenTrial(number=271, state=1, values=[10124.06], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 21, 944515), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 21, 953990), params={'ema1_window': 19, 'ema2_window': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=271, value=None),\n FrozenTrial(number=272, state=1, values=[10142.82], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 21, 954631), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 21, 963877), params={'ema1_window': 20, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=272, value=None),\n FrozenTrial(number=273, state=1, values=[10094.6], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 21, 964602), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 21, 973794), params={'ema1_window': 19, 'ema2_window': 18}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=273, value=None),\n FrozenTrial(number=274, state=1, values=[10162.62], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 21, 974379), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 21, 983281), params={'ema1_window': 18, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=274, value=None),\n FrozenTrial(number=275, state=1, values=[10124.06], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 21, 983911), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 21, 992873), params={'ema1_window': 19, 'ema2_window': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=275, value=None),\n FrozenTrial(number=276, state=1, values=[10120.88], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 21, 993340), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 22, 2712), params={'ema1_window': 20, 'ema2_window': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=276, value=None),\n FrozenTrial(number=277, state=1, values=[10162.72], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 22, 3255), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 22, 12382), params={'ema1_window': 19, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=277, value=None),\n FrozenTrial(number=278, state=1, values=[10162.62], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 22, 12951), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 22, 22622), params={'ema1_window': 18, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=278, value=None),\n FrozenTrial(number=279, state=1, values=[10124.06], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 22, 23290), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 22, 32848), params={'ema1_window': 19, 'ema2_window': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=279, value=None),\n FrozenTrial(number=280, state=1, values=[10085.04], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 22, 33465), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 22, 273008), params={'ema1_window': 24, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=280, value=None),\n FrozenTrial(number=281, state=1, values=[10133.72], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 22, 273778), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 22, 284202), params={'ema1_window': 20, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=281, value=None),\n FrozenTrial(number=282, state=1, values=[10162.72], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 22, 284717), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 22, 294184), params={'ema1_window': 19, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=282, value=None),\n FrozenTrial(number=283, state=1, values=[10094.6], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 22, 294683), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 22, 303789), params={'ema1_window': 19, 'ema2_window': 18}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=283, value=None),\n FrozenTrial(number=284, state=1, values=[9986.14], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 22, 304404), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 22, 559921), params={'ema1_window': 13, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=284, value=None),\n FrozenTrial(number=285, state=1, values=[10160.48], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 22, 560755), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 22, 572031), params={'ema1_window': 18, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=285, value=None),\n FrozenTrial(number=286, state=1, values=[10000.0], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 22, 572678), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 22, 694321), params={'ema1_window': 17, 'ema2_window': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=286, value=None),\n FrozenTrial(number=287, state=1, values=[10074.9], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 22, 695112), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 22, 705312), params={'ema1_window': 20, 'ema2_window': 18}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=287, value=None),\n FrozenTrial(number=288, state=1, values=[10162.82], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 22, 705979), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 22, 715455), params={'ema1_window': 19, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=288, value=None),\n FrozenTrial(number=289, state=1, values=[10110.84], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 22, 715971), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 22, 724964), params={'ema1_window': 18, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=289, value=None),\n FrozenTrial(number=290, state=1, values=[10124.06], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 22, 725532), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 22, 734670), params={'ema1_window': 19, 'ema2_window': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=290, value=None),\n FrozenTrial(number=291, state=1, values=[10142.82], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 22, 735185), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 22, 744397), params={'ema1_window': 20, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=291, value=None),\n FrozenTrial(number=292, state=1, values=[10064.82], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 22, 744969), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 22, 981099), params={'ema1_window': 23, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=292, value=None),\n FrozenTrial(number=293, state=1, values=[10124.06], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 22, 981838), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 22, 992150), params={'ema1_window': 19, 'ema2_window': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=293, value=None),\n FrozenTrial(number=294, state=1, values=[10160.48], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 22, 992726), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 23, 2507), params={'ema1_window': 18, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=294, value=None),\n FrozenTrial(number=295, state=1, values=[10162.82], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 23, 3078), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 23, 12115), params={'ema1_window': 19, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=295, value=None),\n FrozenTrial(number=296, state=1, values=[9935.92], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 23, 12688), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 23, 238210), params={'ema1_window': 20, 'ema2_window': 25}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=296, value=None),\n FrozenTrial(number=297, state=1, values=[9974.12], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 23, 238922), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 23, 465279), params={'ema1_window': 25, 'ema2_window': 19}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=297, value=None),\n FrozenTrial(number=298, state=1, values=[10162.82], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 23, 466050), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 23, 476429), params={'ema1_window': 19, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=298, value=None),\n FrozenTrial(number=299, state=1, values=[10065.02], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 23, 477100), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 23, 486850), params={'ema1_window': 21, 'ema2_window': 18}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=299, value=None),\n FrozenTrial(number=300, state=1, values=[9944.7], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 23, 487411), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 23, 760068), params={'ema1_window': 6, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=300, value=None),\n FrozenTrial(number=301, state=1, values=[10110.74], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 23, 760728), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 23, 770613), params={'ema1_window': 19, 'ema2_window': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=301, value=None),\n FrozenTrial(number=302, state=1, values=[10110.84], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 23, 771101), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 23, 780443), params={'ema1_window': 18, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=302, value=None),\n FrozenTrial(number=303, state=1, values=[10124.06], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 23, 780982), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 23, 790725), params={'ema1_window': 19, 'ema2_window': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=303, value=None),\n FrozenTrial(number=304, state=1, values=[10133.72], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 23, 791174), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 23, 800369), params={'ema1_window': 20, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=304, value=None),\n FrozenTrial(number=305, state=1, values=[10162.72], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 23, 800825), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 23, 809984), params={'ema1_window': 19, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=305, value=None),\n FrozenTrial(number=306, state=1, values=[9975.46], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 23, 810476), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 24, 59322), params={'ema1_window': 14, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=306, value=None),\n FrozenTrial(number=307, state=1, values=[10124.06], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 24, 60054), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 24, 69565), params={'ema1_window': 19, 'ema2_window': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=307, value=None),\n FrozenTrial(number=308, state=1, values=[10160.48], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 24, 70101), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 24, 79306), params={'ema1_window': 18, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=308, value=None),\n FrozenTrial(number=309, state=1, values=[10074.9], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 24, 79847), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 24, 89290), params={'ema1_window': 20, 'ema2_window': 18}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=309, value=None),\n FrozenTrial(number=310, state=1, values=[10162.62], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 24, 89773), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 24, 99496), params={'ema1_window': 18, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=310, value=None),\n FrozenTrial(number=311, state=1, values=[10160.68], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 24, 99992), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 24, 109276), params={'ema1_window': 19, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=311, value=None),\n FrozenTrial(number=312, state=1, values=[9920.08], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 24, 109822), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 24, 119129), params={'ema1_window': 19, 'ema2_window': 36}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=312, value=None),\n FrozenTrial(number=313, state=1, values=[10074.88], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 24, 119499), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 24, 128863), params={'ema1_window': 20, 'ema2_window': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=313, value=None),\n FrozenTrial(number=314, state=1, values=[10124.06], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 24, 129383), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 24, 138662), params={'ema1_window': 19, 'ema2_window': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=314, value=None),\n FrozenTrial(number=315, state=1, values=[9926.7], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 24, 140493), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 24, 368482), params={'ema1_window': 18, 'ema2_window': 30}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=315, value=None),\n FrozenTrial(number=316, state=1, values=[10162.72], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 24, 369181), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 24, 379345), params={'ema1_window': 19, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=316, value=None),\n FrozenTrial(number=317, state=1, values=[9894.8], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 24, 379922), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 24, 389256), params={'ema1_window': 18, 'ema2_window': 19}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=317, value=None),\n FrozenTrial(number=318, state=1, values=[10133.72], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 24, 389796), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 24, 399172), params={'ema1_window': 20, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=318, value=None),\n FrozenTrial(number=319, state=1, values=[10162.82], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 24, 399715), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 24, 409007), params={'ema1_window': 19, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=319, value=None),\n FrozenTrial(number=320, state=1, values=[9806.52], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 24, 409544), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 24, 649229), params={'ema1_window': 17, 'ema2_window': 18}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=320, value=None),\n FrozenTrial(number=321, state=1, values=[9942.72], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 24, 650035), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 24, 860783), params={'ema1_window': 19, 'ema2_window': 41}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=321, value=None),\n FrozenTrial(number=322, state=1, values=[10142.64], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 24, 861544), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 24, 872182), params={'ema1_window': 20, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=322, value=None),\n FrozenTrial(number=323, state=1, values=[10162.72], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 24, 872753), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 24, 882505), params={'ema1_window': 19, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=323, value=None),\n FrozenTrial(number=324, state=1, values=[10162.32], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 24, 883082), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 24, 892815), params={'ema1_window': 18, 'ema2_window': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=324, value=None),\n FrozenTrial(number=325, state=1, values=[10110.74], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 24, 893352), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 24, 902855), params={'ema1_window': 19, 'ema2_window': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=325, value=None),\n FrozenTrial(number=326, state=1, values=[10133.72], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 24, 903373), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 24, 912850), params={'ema1_window': 20, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=326, value=None),\n FrozenTrial(number=327, state=1, values=[10162.32], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 24, 913386), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 24, 922806), params={'ema1_window': 18, 'ema2_window': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=327, value=None),\n FrozenTrial(number=328, state=1, values=[10160.68], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 24, 923307), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 24, 932909), params={'ema1_window': 19, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=328, value=None),\n FrozenTrial(number=329, state=1, values=[10142.82], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 24, 933497), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 24, 942673), params={'ema1_window': 20, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=329, value=None),\n FrozenTrial(number=330, state=1, values=[10074.98], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 24, 943194), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 25, 174777), params={'ema1_window': 21, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=330, value=None),\n FrozenTrial(number=331, state=1, values=[10094.6], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 25, 175744), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 25, 186007), params={'ema1_window': 19, 'ema2_window': 18}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=331, value=None),\n FrozenTrial(number=332, state=1, values=[10162.72], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 25, 186697), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 25, 195976), params={'ema1_window': 19, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=332, value=None),\n FrozenTrial(number=333, state=1, values=[10162.32], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 25, 196704), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 25, 205960), params={'ema1_window': 18, 'ema2_window': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=333, value=None),\n FrozenTrial(number=334, state=1, values=[10162.82], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 25, 206781), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 25, 216042), params={'ema1_window': 19, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=334, value=None),\n FrozenTrial(number=335, state=1, values=[10142.82], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 25, 216477), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 25, 226148), params={'ema1_window': 20, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=335, value=None),\n FrozenTrial(number=336, state=1, values=[10124.06], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 25, 226810), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 25, 236289), params={'ema1_window': 19, 'ema2_window': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=336, value=None),\n FrozenTrial(number=337, state=1, values=[9974.12], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 25, 237025), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 25, 532933), params={'ema1_window': 12, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=337, value=None),\n FrozenTrial(number=338, state=1, values=[9894.8], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 25, 533906), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 25, 543789), params={'ema1_window': 18, 'ema2_window': 19}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=338, value=None),\n FrozenTrial(number=339, state=1, values=[10074.9], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 25, 544535), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 25, 554136), params={'ema1_window': 20, 'ema2_window': 18}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=339, value=None),\n FrozenTrial(number=340, state=1, values=[10162.72], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 25, 554816), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 25, 564662), params={'ema1_window': 19, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=340, value=None),\n FrozenTrial(number=341, state=1, values=[9934.2], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 25, 565250), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 25, 766095), params={'ema1_window': 18, 'ema2_window': 50}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=341, value=None),\n FrozenTrial(number=342, state=1, values=[10110.74], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 25, 767081), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 25, 777392), params={'ema1_window': 19, 'ema2_window': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=342, value=None),\n FrozenTrial(number=343, state=1, values=[10110.84], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 25, 777983), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 25, 788178), params={'ema1_window': 18, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=343, value=None),\n FrozenTrial(number=344, state=1, values=[10124.06], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 25, 788968), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 25, 798916), params={'ema1_window': 19, 'ema2_window': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=344, value=None),\n FrozenTrial(number=345, state=1, values=[10133.72], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 25, 799671), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 25, 809414), params={'ema1_window': 20, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=345, value=None),\n FrozenTrial(number=346, state=1, values=[10162.82], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 25, 810148), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 25, 820032), params={'ema1_window': 19, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=346, value=None),\n FrozenTrial(number=347, state=1, values=[10124.06], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 25, 820733), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 25, 830589), params={'ema1_window': 19, 'ema2_window': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=347, value=None),\n FrozenTrial(number=348, state=1, values=[10142.82], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 25, 831271), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 25, 840886), params={'ema1_window': 20, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=348, value=None),\n FrozenTrial(number=349, state=1, values=[10160.68], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 25, 841605), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 25, 851363), params={'ema1_window': 19, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=349, value=None),\n FrozenTrial(number=350, state=1, values=[10162.32], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 25, 852049), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 25, 861697), params={'ema1_window': 18, 'ema2_window': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=350, value=None),\n FrozenTrial(number=351, state=1, values=[10094.6], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 25, 862421), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 25, 872332), params={'ema1_window': 19, 'ema2_window': 18}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=351, value=None),\n FrozenTrial(number=352, state=1, values=[10000.0], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 25, 873066), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 25, 988255), params={'ema1_window': 20, 'ema2_window': 20}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=352, value=None),\n FrozenTrial(number=353, state=1, values=[10162.82], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 25, 989160), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 25, 999360), params={'ema1_window': 19, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=353, value=None),\n FrozenTrial(number=354, state=1, values=[10162.72], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 26, 13), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 26, 9750), params={'ema1_window': 19, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=354, value=None),\n FrozenTrial(number=355, state=1, values=[10162.62], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 26, 10492), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 26, 19938), params={'ema1_window': 18, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=355, value=None),\n FrozenTrial(number=356, state=1, values=[10162.62], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 26, 20641), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 26, 30924), params={'ema1_window': 18, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=356, value=None),\n FrozenTrial(number=357, state=1, values=[10160.68], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 26, 31733), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 26, 41479), params={'ema1_window': 19, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=357, value=None),\n FrozenTrial(number=358, state=1, values=[10000.0], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 26, 42631), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 26, 52770), params={'ema1_window': 17, 'ema2_window': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=358, value=None),\n FrozenTrial(number=359, state=1, values=[10163.2], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 26, 53869), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 26, 291390), params={'ema1_window': 21, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=359, value=None),\n FrozenTrial(number=360, state=1, values=[9819.04], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 26, 292314), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 26, 550092), params={'ema1_window': 11, 'ema2_window': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=360, value=None),\n FrozenTrial(number=361, state=1, values=[10163.2], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 26, 550959), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 26, 561739), params={'ema1_window': 21, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=361, value=None),\n FrozenTrial(number=362, state=1, values=[10153.36], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 26, 562497), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 26, 797054), params={'ema1_window': 22, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=362, value=None),\n FrozenTrial(number=363, state=1, values=[10163.2], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 26, 798192), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 26, 809195), params={'ema1_window': 21, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=363, value=None),\n FrozenTrial(number=364, state=1, values=[10075.0], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 26, 809912), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 26, 820293), params={'ema1_window': 22, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=364, value=None),\n FrozenTrial(number=365, state=1, values=[10152.6], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 26, 821072), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 26, 831447), params={'ema1_window': 21, 'ema2_window': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=365, value=None),\n FrozenTrial(number=366, state=1, values=[10143.02], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 26, 831976), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 26, 842291), params={'ema1_window': 21, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=366, value=None),\n FrozenTrial(number=367, state=1, values=[9886.96], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 26, 843108), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 27, 61497), params={'ema1_window': 20, 'ema2_window': 27}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=367, value=None),\n FrozenTrial(number=368, state=1, values=[9975.92], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 27, 62292), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 27, 287665), params={'ema1_window': 21, 'ema2_window': 23}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=368, value=None),\n FrozenTrial(number=369, state=1, values=[10075.0], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 27, 288732), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 27, 299969), params={'ema1_window': 22, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=369, value=None),\n FrozenTrial(number=370, state=1, values=[10163.2], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 27, 300471), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 27, 311323), params={'ema1_window': 21, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=370, value=None),\n FrozenTrial(number=371, state=1, values=[10153.36], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 27, 312295), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 27, 322615), params={'ema1_window': 22, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=371, value=None),\n FrozenTrial(number=372, state=1, values=[10163.2], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 27, 323331), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 27, 333652), params={'ema1_window': 21, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=372, value=None),\n FrozenTrial(number=373, state=1, values=[10152.6], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 27, 334350), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 27, 344695), params={'ema1_window': 21, 'ema2_window': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=373, value=None),\n FrozenTrial(number=374, state=1, values=[10075.0], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 27, 345579), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 27, 356116), params={'ema1_window': 22, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=374, value=None),\n FrozenTrial(number=375, state=1, values=[10143.02], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 27, 356927), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 27, 367518), params={'ema1_window': 21, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=375, value=None),\n FrozenTrial(number=376, state=1, values=[10085.04], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 27, 368097), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 27, 597642), params={'ema1_window': 23, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=376, value=None),\n FrozenTrial(number=377, state=1, values=[10163.2], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 27, 598712), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 27, 610065), params={'ema1_window': 21, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=377, value=None),\n FrozenTrial(number=378, state=1, values=[10143.02], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 27, 610683), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 27, 622009), params={'ema1_window': 21, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=378, value=None),\n FrozenTrial(number=379, state=1, values=[10091.24], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 27, 622793), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 27, 863291), params={'ema1_window': 21, 'ema2_window': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=379, value=None),\n FrozenTrial(number=380, state=1, values=[10091.24], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 27, 864556), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 27, 875963), params={'ema1_window': 21, 'ema2_window': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=380, value=None),\n FrozenTrial(number=381, state=1, values=[10163.2], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 27, 876673), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 27, 887440), params={'ema1_window': 21, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=381, value=None),\n FrozenTrial(number=382, state=1, values=[10142.84], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 27, 888155), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 28, 127042), params={'ema1_window': 22, 'ema2_window': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=382, value=None),\n FrozenTrial(number=383, state=1, values=[10075.0], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 28, 128059), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 28, 139514), params={'ema1_window': 22, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=383, value=None),\n FrozenTrial(number=384, state=1, values=[10143.02], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 28, 140026), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 28, 150992), params={'ema1_window': 21, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=384, value=None),\n FrozenTrial(number=385, state=1, values=[10143.02], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 28, 151668), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 28, 162315), params={'ema1_window': 21, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=385, value=None),\n FrozenTrial(number=386, state=1, values=[10163.2], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 28, 162909), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 28, 173503), params={'ema1_window': 21, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=386, value=None),\n FrozenTrial(number=387, state=1, values=[10163.2], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 28, 174243), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 28, 184945), params={'ema1_window': 21, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=387, value=None),\n FrozenTrial(number=388, state=1, values=[10030.54], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 28, 185556), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 28, 426794), params={'ema1_window': 22, 'ema2_window': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=388, value=None),\n FrozenTrial(number=389, state=1, values=[10152.6], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 28, 427453), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 28, 439422), params={'ema1_window': 21, 'ema2_window': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=389, value=None),\n FrozenTrial(number=390, state=1, values=[10163.2], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 28, 440311), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 28, 451248), params={'ema1_window': 21, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=390, value=None),\n FrozenTrial(number=391, state=1, values=[10143.02], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 28, 451838), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 28, 463674), params={'ema1_window': 21, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=391, value=None),\n FrozenTrial(number=392, state=1, values=[10152.6], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 28, 464488), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 28, 476596), params={'ema1_window': 21, 'ema2_window': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=392, value=None),\n FrozenTrial(number=393, state=1, values=[10163.2], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 28, 477666), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 28, 489219), params={'ema1_window': 21, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=393, value=None),\n FrozenTrial(number=394, state=1, values=[10075.0], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 28, 490183), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 28, 501369), params={'ema1_window': 22, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=394, value=None),\n FrozenTrial(number=395, state=1, values=[10143.02], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 28, 502210), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 28, 513219), params={'ema1_window': 21, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=395, value=None),\n FrozenTrial(number=396, state=1, values=[10152.6], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 28, 513963), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 28, 524552), params={'ema1_window': 21, 'ema2_window': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=396, value=None),\n FrozenTrial(number=397, state=1, values=[10075.0], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 28, 525364), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 28, 536120), params={'ema1_window': 22, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=397, value=None),\n FrozenTrial(number=398, state=1, values=[10163.2], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 28, 537437), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 28, 548465), params={'ema1_window': 21, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=398, value=None),\n FrozenTrial(number=399, state=1, values=[9928.24], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 28, 549136), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 28, 760242), params={'ema1_window': 21, 'ema2_window': 32}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=399, value=None),\n FrozenTrial(number=400, state=1, values=[10143.02], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 28, 761355), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 28, 773152), params={'ema1_window': 21, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=400, value=None),\n FrozenTrial(number=401, state=1, values=[10152.6], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 28, 773804), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 28, 785228), params={'ema1_window': 21, 'ema2_window': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=401, value=None),\n FrozenTrial(number=402, state=1, values=[10075.0], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 28, 786095), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 28, 797067), params={'ema1_window': 22, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=402, value=None),\n FrozenTrial(number=403, state=1, values=[10163.2], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 28, 797572), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 28, 808670), params={'ema1_window': 21, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=403, value=None),\n FrozenTrial(number=404, state=1, values=[10152.6], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 28, 809222), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 28, 820404), params={'ema1_window': 21, 'ema2_window': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=404, value=None),\n FrozenTrial(number=405, state=1, values=[10143.02], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 28, 821233), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 28, 832269), params={'ema1_window': 21, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=405, value=None),\n FrozenTrial(number=406, state=1, values=[10075.0], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 28, 832813), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 28, 843958), params={'ema1_window': 22, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=406, value=None),\n FrozenTrial(number=407, state=1, values=[10091.24], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 28, 844712), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 28, 855531), params={'ema1_window': 21, 'ema2_window': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=407, value=None),\n FrozenTrial(number=408, state=1, values=[10085.04], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 28, 856426), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 28, 867451), params={'ema1_window': 23, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=408, value=None),\n FrozenTrial(number=409, state=1, values=[10143.02], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 28, 867974), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 28, 879486), params={'ema1_window': 21, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=409, value=None),\n FrozenTrial(number=410, state=1, values=[10163.2], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 28, 880140), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 28, 891026), params={'ema1_window': 21, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=410, value=None),\n FrozenTrial(number=411, state=1, values=[10153.36], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 28, 891793), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 28, 902713), params={'ema1_window': 22, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=411, value=None),\n FrozenTrial(number=412, state=1, values=[10163.2], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 28, 903502), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 28, 914432), params={'ema1_window': 21, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=412, value=None),\n FrozenTrial(number=413, state=1, values=[10143.02], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 28, 915101), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 28, 926087), params={'ema1_window': 21, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=413, value=None),\n FrozenTrial(number=414, state=1, values=[10075.0], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 28, 927427), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 28, 939196), params={'ema1_window': 22, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=414, value=None),\n FrozenTrial(number=415, state=1, values=[10163.2], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 28, 939881), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 28, 950978), params={'ema1_window': 21, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=415, value=None),\n FrozenTrial(number=416, state=1, values=[10152.6], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 28, 951557), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 28, 962449), params={'ema1_window': 21, 'ema2_window': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=416, value=None),\n FrozenTrial(number=417, state=1, values=[10143.02], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 28, 963167), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 28, 974319), params={'ema1_window': 21, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=417, value=None),\n FrozenTrial(number=418, state=1, values=[10162.48], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 28, 975026), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 29, 274121), params={'ema1_window': 22, 'ema2_window': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=418, value=None),\n FrozenTrial(number=419, state=1, values=[10163.2], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 29, 275150), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 29, 286717), params={'ema1_window': 21, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=419, value=None),\n FrozenTrial(number=420, state=1, values=[10143.02], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 29, 287472), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 29, 299331), params={'ema1_window': 21, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=420, value=None),\n FrozenTrial(number=421, state=1, values=[10152.6], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 29, 300304), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 29, 313190), params={'ema1_window': 21, 'ema2_window': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=421, value=None),\n FrozenTrial(number=422, state=1, values=[10090.94], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 29, 314154), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 29, 559465), params={'ema1_window': 22, 'ema2_window': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=422, value=None),\n FrozenTrial(number=423, state=1, values=[10163.2], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 29, 560509), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 29, 572406), params={'ema1_window': 21, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=423, value=None),\n FrozenTrial(number=424, state=1, values=[10163.2], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 29, 573211), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 29, 584909), params={'ema1_window': 21, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=424, value=None),\n FrozenTrial(number=425, state=1, values=[10163.2], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 29, 585560), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 29, 597004), params={'ema1_window': 21, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=425, value=None),\n FrozenTrial(number=426, state=1, values=[10143.02], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 29, 597649), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 29, 609057), params={'ema1_window': 21, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=426, value=None),\n FrozenTrial(number=427, state=1, values=[10152.6], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 29, 609689), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 29, 620985), params={'ema1_window': 21, 'ema2_window': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=427, value=None),\n FrozenTrial(number=428, state=1, values=[10163.2], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 29, 621421), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 29, 633116), params={'ema1_window': 21, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=428, value=None),\n FrozenTrial(number=429, state=1, values=[10075.0], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 29, 633774), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 29, 645116), params={'ema1_window': 22, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=429, value=None),\n FrozenTrial(number=430, state=1, values=[10143.02], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 29, 645778), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 29, 657133), params={'ema1_window': 21, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=430, value=None),\n FrozenTrial(number=431, state=1, values=[10163.2], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 29, 657787), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 29, 669437), params={'ema1_window': 21, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=431, value=None),\n FrozenTrial(number=432, state=1, values=[10152.6], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 29, 670751), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 29, 683470), params={'ema1_window': 21, 'ema2_window': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=432, value=None),\n FrozenTrial(number=433, state=1, values=[10163.2], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 29, 684137), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 29, 695719), params={'ema1_window': 21, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=433, value=None),\n FrozenTrial(number=434, state=1, values=[10153.36], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 29, 696330), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 29, 707887), params={'ema1_window': 22, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=434, value=None),\n FrozenTrial(number=435, state=1, values=[10163.2], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 29, 708728), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 29, 720509), params={'ema1_window': 21, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=435, value=None),\n FrozenTrial(number=436, state=1, values=[10091.24], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 29, 721184), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 29, 732460), params={'ema1_window': 21, 'ema2_window': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=436, value=None),\n FrozenTrial(number=437, state=1, values=[10143.02], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 29, 732967), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 29, 744629), params={'ema1_window': 21, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=437, value=None),\n FrozenTrial(number=438, state=1, values=[10075.0], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 29, 745343), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 29, 756694), params={'ema1_window': 22, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=438, value=None),\n FrozenTrial(number=439, state=1, values=[10152.6], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 29, 757367), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 29, 769034), params={'ema1_window': 21, 'ema2_window': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=439, value=None),\n FrozenTrial(number=440, state=1, values=[10163.2], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 29, 769709), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 29, 781655), params={'ema1_window': 21, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=440, value=None),\n FrozenTrial(number=441, state=1, values=[10163.2], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 29, 782283), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 29, 793670), params={'ema1_window': 21, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=441, value=None),\n FrozenTrial(number=442, state=1, values=[10153.36], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 29, 794228), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 29, 805895), params={'ema1_window': 22, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=442, value=None),\n FrozenTrial(number=443, state=1, values=[10152.6], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 29, 806743), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 29, 818073), params={'ema1_window': 21, 'ema2_window': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=443, value=None),\n FrozenTrial(number=444, state=1, values=[10163.2], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 29, 818683), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 29, 830027), params={'ema1_window': 21, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=444, value=None),\n FrozenTrial(number=445, state=1, values=[10163.2], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 29, 830671), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 29, 841825), params={'ema1_window': 21, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=445, value=None),\n FrozenTrial(number=446, state=1, values=[10153.36], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 29, 842479), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 29, 855002), params={'ema1_window': 22, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=446, value=None),\n FrozenTrial(number=447, state=1, values=[10163.2], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 29, 856855), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 29, 869463), params={'ema1_window': 21, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=447, value=None),\n FrozenTrial(number=448, state=1, values=[10143.02], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 29, 870368), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 29, 882150), params={'ema1_window': 21, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=448, value=None),\n FrozenTrial(number=449, state=1, values=[10075.0], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 29, 882877), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 29, 894344), params={'ema1_window': 22, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=449, value=None),\n FrozenTrial(number=450, state=1, values=[10163.2], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 29, 895150), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 29, 906479), params={'ema1_window': 21, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=450, value=None),\n FrozenTrial(number=451, state=1, values=[10095.32], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 29, 907203), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 30, 140205), params={'ema1_window': 23, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=451, value=None),\n FrozenTrial(number=452, state=1, values=[10163.2], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 30, 140764), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 30, 152958), params={'ema1_window': 21, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=452, value=None),\n FrozenTrial(number=453, state=1, values=[10152.6], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 30, 153547), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 30, 165043), params={'ema1_window': 21, 'ema2_window': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=453, value=None),\n FrozenTrial(number=454, state=1, values=[10153.36], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 30, 165641), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 30, 177169), params={'ema1_window': 22, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=454, value=None),\n FrozenTrial(number=455, state=1, values=[10091.24], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 30, 177773), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 30, 189199), params={'ema1_window': 21, 'ema2_window': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=455, value=None),\n FrozenTrial(number=456, state=1, values=[10163.2], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 30, 189810), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 30, 201172), params={'ema1_window': 21, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=456, value=None),\n FrozenTrial(number=457, state=1, values=[10142.84], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 30, 201742), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 30, 213069), params={'ema1_window': 22, 'ema2_window': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=457, value=None),\n FrozenTrial(number=458, state=1, values=[10143.02], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 30, 213656), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 30, 224891), params={'ema1_window': 21, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=458, value=None),\n FrozenTrial(number=459, state=1, values=[10023.76], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 30, 225483), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 30, 430126), params={'ema1_window': 22, 'ema2_window': 46}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=459, value=None),\n FrozenTrial(number=460, state=1, values=[10163.2], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 30, 430715), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 30, 443217), params={'ema1_window': 21, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=460, value=None),\n FrozenTrial(number=461, state=1, values=[10163.2], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 30, 443780), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 30, 455189), params={'ema1_window': 21, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=461, value=None),\n FrozenTrial(number=462, state=1, values=[9938.82], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 30, 455693), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 30, 660305), params={'ema1_window': 22, 'ema2_window': 37}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=462, value=None),\n FrozenTrial(number=463, state=1, values=[10143.02], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 30, 661127), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 30, 673581), params={'ema1_window': 21, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=463, value=None),\n FrozenTrial(number=464, state=1, values=[10163.2], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 30, 674206), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 30, 685867), params={'ema1_window': 21, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=464, value=None),\n FrozenTrial(number=465, state=1, values=[10142.84], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 30, 686462), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 30, 697568), params={'ema1_window': 22, 'ema2_window': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=465, value=None),\n FrozenTrial(number=466, state=1, values=[10143.02], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 30, 698159), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 30, 709303), params={'ema1_window': 21, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=466, value=None),\n FrozenTrial(number=467, state=1, values=[10163.2], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 30, 709902), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 30, 720811), params={'ema1_window': 21, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=467, value=None),\n FrozenTrial(number=468, state=1, values=[10075.0], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 30, 721308), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 30, 732387), params={'ema1_window': 22, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=468, value=None),\n FrozenTrial(number=469, state=1, values=[10152.6], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 30, 732972), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 30, 743850), params={'ema1_window': 21, 'ema2_window': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=469, value=None),\n FrozenTrial(number=470, state=1, values=[10143.02], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 30, 744399), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 30, 755386), params={'ema1_window': 21, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=470, value=None),\n FrozenTrial(number=471, state=1, values=[10163.2], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 30, 755922), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 30, 767585), params={'ema1_window': 21, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=471, value=None),\n FrozenTrial(number=472, state=1, values=[10162.48], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 30, 768475), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 30, 780292), params={'ema1_window': 22, 'ema2_window': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=472, value=None),\n FrozenTrial(number=473, state=1, values=[10143.02], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 30, 781010), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 30, 792600), params={'ema1_window': 21, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=473, value=None),\n FrozenTrial(number=474, state=1, values=[10085.04], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 30, 793350), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 30, 804568), params={'ema1_window': 23, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=474, value=None),\n FrozenTrial(number=475, state=1, values=[10143.02], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 30, 805591), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 30, 817261), params={'ema1_window': 21, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=475, value=None),\n FrozenTrial(number=476, state=1, values=[9964.26], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 30, 817819), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 31, 24809), params={'ema1_window': 22, 'ema2_window': 44}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=476, value=None),\n FrozenTrial(number=477, state=1, values=[10163.2], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 31, 25601), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 31, 38082), params={'ema1_window': 21, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=477, value=None),\n FrozenTrial(number=478, state=1, values=[10152.6], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 31, 38620), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 31, 50370), params={'ema1_window': 21, 'ema2_window': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=478, value=None),\n FrozenTrial(number=479, state=1, values=[10085.04], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 31, 50966), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 31, 283896), params={'ema1_window': 22, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=479, value=None),\n FrozenTrial(number=480, state=1, values=[10163.2], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 31, 284849), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 31, 297240), params={'ema1_window': 21, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=480, value=None),\n FrozenTrial(number=481, state=1, values=[10163.2], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 31, 297889), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 31, 309475), params={'ema1_window': 21, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=481, value=None),\n FrozenTrial(number=482, state=1, values=[10153.36], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 31, 310094), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 31, 321624), params={'ema1_window': 22, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=482, value=None),\n FrozenTrial(number=483, state=1, values=[10143.02], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 31, 322188), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 31, 333661), params={'ema1_window': 21, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=483, value=None),\n FrozenTrial(number=484, state=1, values=[10074.98], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 31, 334299), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 31, 345551), params={'ema1_window': 21, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=484, value=None),\n FrozenTrial(number=485, state=1, values=[10075.0], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 31, 346077), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 31, 357227), params={'ema1_window': 22, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=485, value=None),\n FrozenTrial(number=486, state=1, values=[9924.46], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 31, 357730), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 31, 566505), params={'ema1_window': 21, 'ema2_window': 39}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=486, value=None),\n FrozenTrial(number=487, state=1, values=[10152.6], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 31, 567388), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 31, 580169), params={'ema1_window': 21, 'ema2_window': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=487, value=None),\n FrozenTrial(number=488, state=1, values=[10085.04], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 31, 580712), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 31, 593542), params={'ema1_window': 22, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=488, value=None),\n FrozenTrial(number=489, state=1, values=[10142.64], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 31, 594208), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 31, 606414), params={'ema1_window': 20, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=489, value=None),\n FrozenTrial(number=490, state=1, values=[10163.2], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 31, 606842), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 31, 619747), params={'ema1_window': 21, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=490, value=None),\n FrozenTrial(number=491, state=1, values=[10091.24], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 31, 620349), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 31, 632636), params={'ema1_window': 21, 'ema2_window': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=491, value=None),\n FrozenTrial(number=492, state=1, values=[10085.04], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 31, 633293), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 31, 646162), params={'ema1_window': 22, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=492, value=None),\n FrozenTrial(number=493, state=1, values=[10142.64], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 31, 646821), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 31, 658817), params={'ema1_window': 20, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=493, value=None),\n FrozenTrial(number=494, state=1, values=[9976.76], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 31, 659527), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 31, 881225), params={'ema1_window': 21, 'ema2_window': 29}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=494, value=None),\n FrozenTrial(number=495, state=1, values=[10075.0], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 31, 881961), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 31, 895967), params={'ema1_window': 22, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=495, value=None),\n FrozenTrial(number=496, state=1, values=[10133.72], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 31, 896599), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 31, 909656), params={'ema1_window': 20, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=496, value=None),\n FrozenTrial(number=497, state=1, values=[9870.42], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 31, 910445), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 32, 137492), params={'ema1_window': 21, 'ema2_window': 35}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=497, value=None),\n FrozenTrial(number=498, state=1, values=[10152.6], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 32, 138548), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 32, 151489), params={'ema1_window': 21, 'ema2_window': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=498, value=None),\n FrozenTrial(number=499, state=1, values=[10163.2], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 32, 152128), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 32, 164239), params={'ema1_window': 21, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=499, value=None),\n FrozenTrial(number=500, state=1, values=[10142.64], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 32, 164940), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 32, 176962), params={'ema1_window': 20, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=500, value=None),\n FrozenTrial(number=501, state=1, values=[10085.04], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 32, 177566), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 32, 189726), params={'ema1_window': 22, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=501, value=None),\n FrozenTrial(number=502, state=1, values=[10163.2], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 32, 190454), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 32, 202363), params={'ema1_window': 21, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=502, value=None),\n FrozenTrial(number=503, state=1, values=[10152.6], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 32, 202841), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 32, 214862), params={'ema1_window': 21, 'ema2_window': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=503, value=None),\n FrozenTrial(number=504, state=1, values=[10153.36], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 32, 215639), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 32, 227438), params={'ema1_window': 22, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=504, value=None),\n FrozenTrial(number=505, state=1, values=[10045.48], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 32, 227958), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 32, 460903), params={'ema1_window': 20, 'ema2_window': 22}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=505, value=None),\n FrozenTrial(number=506, state=1, values=[10163.2], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 32, 461541), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 32, 475118), params={'ema1_window': 21, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=506, value=None),\n FrozenTrial(number=507, state=1, values=[10074.98], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 32, 475803), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 32, 488156), params={'ema1_window': 21, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=507, value=None),\n FrozenTrial(number=508, state=1, values=[10085.04], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 32, 488618), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 32, 500862), params={'ema1_window': 22, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=508, value=None),\n FrozenTrial(number=509, state=1, values=[9961.8], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 32, 501466), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 32, 513433), params={'ema1_window': 20, 'ema2_window': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=509, value=None),\n FrozenTrial(number=510, state=1, values=[10143.02], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 32, 513854), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 32, 526095), params={'ema1_window': 21, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=510, value=None),\n FrozenTrial(number=511, state=1, values=[10163.2], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 32, 526729), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 32, 538663), params={'ema1_window': 21, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=511, value=None),\n FrozenTrial(number=512, state=1, values=[9926.5], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 32, 539027), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 32, 761188), params={'ema1_window': 23, 'ema2_window': 25}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=512, value=None),\n FrozenTrial(number=513, state=1, values=[10142.82], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 32, 762168), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 32, 775115), params={'ema1_window': 20, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=513, value=None),\n FrozenTrial(number=514, state=1, values=[10153.36], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 32, 775539), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 32, 788136), params={'ema1_window': 22, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=514, value=None),\n FrozenTrial(number=515, state=1, values=[10074.98], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 32, 788891), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 32, 800649), params={'ema1_window': 21, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=515, value=None),\n FrozenTrial(number=516, state=1, values=[9833.88], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 32, 801238), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 33, 95715), params={'ema1_window': 9, 'ema2_window': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=516, value=None),\n FrozenTrial(number=517, state=1, values=[10074.98], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 33, 96320), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 33, 110101), params={'ema1_window': 21, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=517, value=None),\n FrozenTrial(number=518, state=1, values=[10163.2], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 33, 110709), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 33, 122928), params={'ema1_window': 21, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=518, value=None),\n FrozenTrial(number=519, state=1, values=[10142.64], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 33, 123545), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 33, 135807), params={'ema1_window': 20, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=519, value=None),\n FrozenTrial(number=520, state=1, values=[10075.0], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 33, 136218), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 33, 148735), params={'ema1_window': 22, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=520, value=None),\n FrozenTrial(number=521, state=1, values=[10074.98], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 33, 149402), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 33, 161495), params={'ema1_window': 21, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=521, value=None),\n FrozenTrial(number=522, state=1, values=[9874.14], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 33, 162071), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 33, 498758), params={'ema1_window': 7, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=522, value=None),\n FrozenTrial(number=523, state=1, values=[10120.88], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 33, 499377), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 33, 512643), params={'ema1_window': 20, 'ema2_window': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=523, value=None),\n FrozenTrial(number=524, state=1, values=[10162.48], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 33, 513315), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 33, 525259), params={'ema1_window': 22, 'ema2_window': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=524, value=None),\n FrozenTrial(number=525, state=1, values=[10163.2], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 33, 525701), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 33, 537741), params={'ema1_window': 21, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=525, value=None),\n FrozenTrial(number=526, state=1, values=[10143.02], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 33, 538313), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 33, 550429), params={'ema1_window': 21, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=526, value=None),\n FrozenTrial(number=527, state=1, values=[10085.04], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 33, 551057), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 33, 563239), params={'ema1_window': 22, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=527, value=None),\n FrozenTrial(number=528, state=1, values=[10142.82], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 33, 563695), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 33, 576151), params={'ema1_window': 20, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=528, value=None),\n FrozenTrial(number=529, state=1, values=[10074.98], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 33, 576871), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 33, 589076), params={'ema1_window': 21, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=529, value=None),\n FrozenTrial(number=530, state=1, values=[10143.02], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 33, 589695), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 33, 601967), params={'ema1_window': 21, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=530, value=None),\n FrozenTrial(number=531, state=1, values=[10064.92], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 33, 602532), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 33, 865330), params={'ema1_window': 22, 'ema2_window': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=531, value=None),\n FrozenTrial(number=532, state=1, values=[10163.2], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 33, 866225), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 33, 879580), params={'ema1_window': 21, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=532, value=None),\n FrozenTrial(number=533, state=1, values=[10120.88], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 33, 880282), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 33, 892616), params={'ema1_window': 20, 'ema2_window': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=533, value=None),\n FrozenTrial(number=534, state=1, values=[10074.98], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 33, 893167), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 33, 905482), params={'ema1_window': 21, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=534, value=None),\n FrozenTrial(number=535, state=1, values=[9935.76], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 33, 906100), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 34, 190976), params={'ema1_window': 5, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=535, value=None),\n FrozenTrial(number=536, state=1, values=[10153.36], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 34, 191634), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 34, 205850), params={'ema1_window': 22, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=536, value=None),\n FrozenTrial(number=537, state=1, values=[10142.82], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 34, 206317), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 34, 219982), params={'ema1_window': 20, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=537, value=None),\n FrozenTrial(number=538, state=1, values=[10084.94], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 34, 220811), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 34, 236743), params={'ema1_window': 21, 'ema2_window': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=538, value=None),\n FrozenTrial(number=539, state=1, values=[10143.02], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 34, 237587), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 34, 250994), params={'ema1_window': 21, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=539, value=None),\n FrozenTrial(number=540, state=1, values=[10064.82], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 34, 251652), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 34, 264350), params={'ema1_window': 23, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=540, value=None),\n FrozenTrial(number=541, state=1, values=[10142.82], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 34, 265033), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 34, 277456), params={'ema1_window': 20, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=541, value=None),\n FrozenTrial(number=542, state=1, values=[10152.6], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 34, 277880), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 34, 290266), params={'ema1_window': 21, 'ema2_window': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=542, value=None),\n FrozenTrial(number=543, state=1, values=[10085.04], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 34, 290858), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 34, 303034), params={'ema1_window': 22, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=543, value=None),\n FrozenTrial(number=544, state=1, values=[10163.2], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 34, 303599), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 34, 315976), params={'ema1_window': 21, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=544, value=None),\n FrozenTrial(number=545, state=1, values=[10142.64], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 34, 316500), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 34, 328894), params={'ema1_window': 20, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=545, value=None),\n FrozenTrial(number=546, state=1, values=[9923.96], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 34, 329404), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 34, 540183), params={'ema1_window': 22, 'ema2_window': 41}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=546, value=None),\n FrozenTrial(number=547, state=1, values=[10143.02], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 34, 541052), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 34, 554392), params={'ema1_window': 21, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=547, value=None),\n FrozenTrial(number=548, state=1, values=[10163.2], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 34, 554927), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 34, 567516), params={'ema1_window': 21, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=548, value=None),\n FrozenTrial(number=549, state=1, values=[10120.88], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 34, 568113), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 34, 580821), params={'ema1_window': 20, 'ema2_window': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=549, value=None),\n FrozenTrial(number=550, state=1, values=[10074.98], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 34, 581376), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 34, 594314), params={'ema1_window': 21, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=550, value=None),\n FrozenTrial(number=551, state=1, values=[10064.92], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 34, 594722), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 34, 607473), params={'ema1_window': 22, 'ema2_window': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=551, value=None),\n FrozenTrial(number=552, state=1, values=[10091.24], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 34, 607983), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 34, 620774), params={'ema1_window': 21, 'ema2_window': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=552, value=None),\n FrozenTrial(number=553, state=1, values=[10142.82], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 34, 621295), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 34, 633854), params={'ema1_window': 20, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=553, value=None),\n FrozenTrial(number=554, state=1, values=[10085.04], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 34, 634433), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 34, 647183), params={'ema1_window': 22, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=554, value=None),\n FrozenTrial(number=555, state=1, values=[10143.02], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 34, 647756), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 34, 660718), params={'ema1_window': 21, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=555, value=None),\n FrozenTrial(number=556, state=1, values=[10000.0], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 34, 661219), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 34, 781822), params={'ema1_window': 15, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=556, value=None),\n FrozenTrial(number=557, state=1, values=[10084.94], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 34, 782618), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 34, 796080), params={'ema1_window': 21, 'ema2_window': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=557, value=None),\n FrozenTrial(number=558, state=1, values=[10074.98], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 34, 796643), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 34, 811401), params={'ema1_window': 21, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=558, value=None),\n FrozenTrial(number=559, state=1, values=[10142.64], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 34, 812134), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 34, 826052), params={'ema1_window': 20, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=559, value=None),\n FrozenTrial(number=560, state=1, values=[10052.74], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 34, 826678), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 35, 90830), params={'ema1_window': 14, 'ema2_window': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=560, value=None),\n FrozenTrial(number=561, state=1, values=[10075.0], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 35, 91740), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 35, 106046), params={'ema1_window': 22, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=561, value=None),\n FrozenTrial(number=562, state=1, values=[10074.98], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 35, 106662), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 35, 120195), params={'ema1_window': 21, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=562, value=None),\n FrozenTrial(number=563, state=1, values=[10142.64], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 35, 120750), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 35, 133709), params={'ema1_window': 20, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=563, value=None),\n FrozenTrial(number=564, state=1, values=[10074.98], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 35, 134334), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 35, 147155), params={'ema1_window': 21, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=564, value=None),\n FrozenTrial(number=565, state=1, values=[10064.92], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 35, 147735), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 35, 160887), params={'ema1_window': 22, 'ema2_window': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=565, value=None),\n FrozenTrial(number=566, state=1, values=[10163.2], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 35, 161477), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 35, 174612), params={'ema1_window': 21, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=566, value=None),\n FrozenTrial(number=567, state=1, values=[10120.88], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 35, 175234), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 35, 188139), params={'ema1_window': 20, 'ema2_window': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=567, value=None),\n FrozenTrial(number=568, state=1, values=[10085.04], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 35, 188713), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 35, 201725), params={'ema1_window': 23, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=568, value=None),\n FrozenTrial(number=569, state=1, values=[10143.02], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 35, 202281), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 35, 215030), params={'ema1_window': 21, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=569, value=None),\n FrozenTrial(number=570, state=1, values=[10085.04], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 35, 215591), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 35, 228584), params={'ema1_window': 22, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=570, value=None),\n FrozenTrial(number=571, state=1, values=[10163.2], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 35, 229137), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 35, 242025), params={'ema1_window': 21, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=571, value=None),\n FrozenTrial(number=572, state=1, values=[10142.64], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 35, 242543), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 35, 255338), params={'ema1_window': 20, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=572, value=None),\n FrozenTrial(number=573, state=1, values=[10075.0], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 35, 255960), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 35, 268651), params={'ema1_window': 22, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=573, value=None),\n FrozenTrial(number=574, state=1, values=[10000.0], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 35, 269210), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 35, 390711), params={'ema1_window': 21, 'ema2_window': 21}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=574, value=None),\n FrozenTrial(number=575, state=1, values=[10084.94], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 35, 391415), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 35, 405748), params={'ema1_window': 21, 'ema2_window': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=575, value=None),\n FrozenTrial(number=576, state=1, values=[10143.02], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 35, 406346), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 35, 419701), params={'ema1_window': 21, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=576, value=None),\n FrozenTrial(number=577, state=1, values=[10133.72], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 35, 420285), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 35, 433306), params={'ema1_window': 20, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=577, value=None),\n FrozenTrial(number=578, state=1, values=[9948.26], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 35, 433861), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 35, 659536), params={'ema1_window': 20, 'ema2_window': 33}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=578, value=None),\n FrozenTrial(number=579, state=1, values=[10142.84], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 35, 660167), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 35, 674720), params={'ema1_window': 22, 'ema2_window': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=579, value=None),\n FrozenTrial(number=580, state=1, values=[10091.24], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 35, 675298), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 35, 688590), params={'ema1_window': 21, 'ema2_window': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=580, value=None),\n FrozenTrial(number=581, state=1, values=[10163.2], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 35, 689155), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 35, 702001), params={'ema1_window': 21, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=581, value=None),\n FrozenTrial(number=582, state=1, values=[10085.04], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 35, 702506), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 35, 715626), params={'ema1_window': 22, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=582, value=None),\n FrozenTrial(number=583, state=1, values=[10163.2], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 35, 716047), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 35, 729411), params={'ema1_window': 21, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=583, value=None),\n FrozenTrial(number=584, state=1, values=[10143.02], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 35, 729941), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 35, 742787), params={'ema1_window': 21, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=584, value=None),\n FrozenTrial(number=585, state=1, values=[10142.64], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 35, 743349), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 35, 756203), params={'ema1_window': 20, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=585, value=None),\n FrozenTrial(number=586, state=1, values=[10064.92], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 35, 756726), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 35, 769674), params={'ema1_window': 22, 'ema2_window': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=586, value=None),\n FrozenTrial(number=587, state=1, values=[10074.98], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 35, 770412), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 35, 784009), params={'ema1_window': 21, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=587, value=None),\n FrozenTrial(number=588, state=1, values=[10152.6], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 35, 784555), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 35, 797516), params={'ema1_window': 21, 'ema2_window': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=588, value=None),\n FrozenTrial(number=589, state=1, values=[10142.82], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 35, 798047), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 35, 811486), params={'ema1_window': 20, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=589, value=None),\n FrozenTrial(number=590, state=1, values=[10032.88], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 35, 811898), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 36, 20479), params={'ema1_window': 22, 'ema2_window': 48}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=590, value=None),\n FrozenTrial(number=591, state=1, values=[10143.02], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 36, 21195), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 36, 34856), params={'ema1_window': 21, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=591, value=None),\n FrozenTrial(number=592, state=1, values=[10133.72], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 36, 35494), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 36, 48278), params={'ema1_window': 20, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=592, value=None),\n FrozenTrial(number=593, state=1, values=[10163.2], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 36, 48821), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 36, 61698), params={'ema1_window': 21, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=593, value=None),\n FrozenTrial(number=594, state=1, values=[10142.84], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 36, 62256), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 36, 74976), params={'ema1_window': 22, 'ema2_window': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=594, value=None),\n FrozenTrial(number=595, state=1, values=[10163.2], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 36, 75377), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 36, 88618), params={'ema1_window': 21, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=595, value=None),\n FrozenTrial(number=596, state=1, values=[10074.88], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 36, 89177), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 36, 102007), params={'ema1_window': 20, 'ema2_window': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=596, value=None),\n FrozenTrial(number=597, state=1, values=[10090.6], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 36, 102581), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 36, 353967), params={'ema1_window': 21, 'ema2_window': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=597, value=None),\n FrozenTrial(number=598, state=1, values=[10064.82], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 36, 354595), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 36, 368777), params={'ema1_window': 23, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=598, value=None),\n FrozenTrial(number=599, state=1, values=[10075.0], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 36, 369382), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 36, 382213), params={'ema1_window': 22, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=599, value=None),\n FrozenTrial(number=600, state=1, values=[10143.02], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 36, 382762), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 36, 395388), params={'ema1_window': 21, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=600, value=None),\n FrozenTrial(number=601, state=1, values=[10074.98], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 36, 395967), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 36, 408718), params={'ema1_window': 21, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=601, value=None),\n FrozenTrial(number=602, state=1, values=[10074.88], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 36, 409233), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 36, 421859), params={'ema1_window': 20, 'ema2_window': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=602, value=None),\n FrozenTrial(number=603, state=1, values=[10153.36], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 36, 422414), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 36, 435351), params={'ema1_window': 22, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=603, value=None),\n FrozenTrial(number=604, state=1, values=[10091.24], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 36, 435877), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 36, 448706), params={'ema1_window': 21, 'ema2_window': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=604, value=None),\n FrozenTrial(number=605, state=1, values=[10163.2], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 36, 449242), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 36, 462031), params={'ema1_window': 21, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=605, value=None),\n FrozenTrial(number=606, state=1, values=[10142.64], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 36, 462606), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 36, 481265), params={'ema1_window': 20, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=606, value=None),\n FrozenTrial(number=607, state=1, values=[9818.84], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 36, 482099), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 36, 748373), params={'ema1_window': 8, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=607, value=None),\n FrozenTrial(number=608, state=1, values=[10142.84], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 36, 749176), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 36, 763889), params={'ema1_window': 22, 'ema2_window': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=608, value=None),\n FrozenTrial(number=609, state=1, values=[10163.2], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 36, 764458), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 36, 777863), params={'ema1_window': 21, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=609, value=None),\n FrozenTrial(number=610, state=1, values=[10074.88], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 36, 778359), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 36, 791677), params={'ema1_window': 20, 'ema2_window': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=610, value=None),\n FrozenTrial(number=611, state=1, values=[10049.8], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 36, 792199), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 37, 41534), params={'ema1_window': 16, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=611, value=None),\n FrozenTrial(number=612, state=1, values=[10143.02], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 37, 42241), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 37, 56557), params={'ema1_window': 21, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=612, value=None),\n FrozenTrial(number=613, state=1, values=[10085.04], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 37, 57066), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 37, 70321), params={'ema1_window': 22, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=613, value=None),\n FrozenTrial(number=614, state=1, values=[10152.6], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 37, 70866), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 37, 84198), params={'ema1_window': 21, 'ema2_window': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=614, value=None),\n FrozenTrial(number=615, state=1, values=[10074.58], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 37, 84566), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 37, 321689), params={'ema1_window': 25, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=615, value=None),\n FrozenTrial(number=616, state=1, values=[10163.2], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 37, 322364), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 37, 337139), params={'ema1_window': 21, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=616, value=None),\n FrozenTrial(number=617, state=1, values=[10133.72], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 37, 337708), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 37, 351120), params={'ema1_window': 20, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=617, value=None),\n FrozenTrial(number=618, state=1, values=[10153.36], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 37, 351669), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 37, 365017), params={'ema1_window': 22, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=618, value=None),\n FrozenTrial(number=619, state=1, values=[10163.2], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 37, 365419), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 37, 378800), params={'ema1_window': 21, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=619, value=None),\n FrozenTrial(number=620, state=1, values=[9913.02], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 37, 379311), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 37, 634824), params={'ema1_window': 10, 'ema2_window': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=620, value=None),\n FrozenTrial(number=621, state=1, values=[10142.82], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 37, 635464), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 37, 649568), params={'ema1_window': 20, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=621, value=None),\n FrozenTrial(number=622, state=1, values=[10074.98], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 37, 650100), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 37, 663720), params={'ema1_window': 21, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=622, value=None),\n FrozenTrial(number=623, state=1, values=[10152.6], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 37, 664257), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 37, 677559), params={'ema1_window': 21, 'ema2_window': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=623, value=None),\n FrozenTrial(number=624, state=1, values=[10075.0], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 37, 678090), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 37, 691497), params={'ema1_window': 22, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=624, value=None),\n FrozenTrial(number=625, state=1, values=[10142.64], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 37, 691889), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 37, 705618), params={'ema1_window': 20, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=625, value=None),\n FrozenTrial(number=626, state=1, values=[9936.12], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 37, 706071), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 37, 991749), params={'ema1_window': 22, 'ema2_window': 23}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=626, value=None),\n FrozenTrial(number=627, state=1, values=[10074.98], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 37, 992499), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 38, 7050), params={'ema1_window': 21, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=627, value=None),\n FrozenTrial(number=628, state=1, values=[10074.98], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 38, 7604), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 38, 21203), params={'ema1_window': 21, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=628, value=None),\n FrozenTrial(number=629, state=1, values=[10142.82], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 38, 21696), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 38, 35000), params={'ema1_window': 20, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=629, value=None),\n FrozenTrial(number=630, state=1, values=[9985.34], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 38, 35482), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 38, 262957), params={'ema1_window': 24, 'ema2_window': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=630, value=None),\n FrozenTrial(number=631, state=1, values=[10153.36], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 38, 263674), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 38, 277262), params={'ema1_window': 22, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=631, value=None),\n FrozenTrial(number=632, state=1, values=[10001.7], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 38, 277814), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 38, 290715), params={'ema1_window': 21, 'ema2_window': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=632, value=None),\n FrozenTrial(number=633, state=1, values=[10163.2], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 38, 291225), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 38, 303918), params={'ema1_window': 21, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=633, value=None),\n FrozenTrial(number=634, state=1, values=[10091.24], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 38, 304328), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 38, 318419), params={'ema1_window': 21, 'ema2_window': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=634, value=None),\n FrozenTrial(number=635, state=1, values=[10142.84], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 38, 318980), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 38, 332801), params={'ema1_window': 22, 'ema2_window': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=635, value=None),\n FrozenTrial(number=636, state=1, values=[10133.72], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 38, 333484), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 38, 346969), params={'ema1_window': 20, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=636, value=None),\n FrozenTrial(number=637, state=1, values=[10084.94], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 38, 347513), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 38, 360780), params={'ema1_window': 21, 'ema2_window': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=637, value=None),\n FrozenTrial(number=638, state=1, values=[9948.18], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 38, 361146), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 38, 374511), params={'ema1_window': 21, 'ema2_window': 31}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=638, value=None),\n FrozenTrial(number=639, state=1, values=[10142.82], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 38, 375279), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 38, 388411), params={'ema1_window': 20, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=639, value=None),\n FrozenTrial(number=640, state=1, values=[10065.02], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 38, 388965), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 38, 401971), params={'ema1_window': 21, 'ema2_window': 18}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=640, value=None),\n FrozenTrial(number=641, state=1, values=[10153.36], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 38, 402449), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 38, 415648), params={'ema1_window': 22, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=641, value=None),\n FrozenTrial(number=642, state=1, values=[10163.2], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 38, 416119), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 38, 429193), params={'ema1_window': 21, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=642, value=None),\n FrozenTrial(number=643, state=1, values=[10095.32], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 38, 429667), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 38, 442865), params={'ema1_window': 23, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=643, value=None),\n FrozenTrial(number=644, state=1, values=[10074.98], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 38, 443342), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 38, 456409), params={'ema1_window': 21, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=644, value=None),\n FrozenTrial(number=645, state=1, values=[10120.88], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 38, 456935), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 38, 470204), params={'ema1_window': 20, 'ema2_window': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=645, value=None),\n FrozenTrial(number=646, state=1, values=[10085.04], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 38, 470712), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 38, 483659), params={'ema1_window': 22, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=646, value=None),\n FrozenTrial(number=647, state=1, values=[10084.94], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 38, 484139), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 38, 497345), params={'ema1_window': 21, 'ema2_window': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=647, value=None),\n FrozenTrial(number=648, state=1, values=[10163.2], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 38, 497837), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 38, 510859), params={'ema1_window': 21, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=648, value=None),\n FrozenTrial(number=649, state=1, values=[9945.14], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 38, 511290), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 38, 723752), params={'ema1_window': 20, 'ema2_window': 44}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=649, value=None),\n FrozenTrial(number=650, state=1, values=[10143.02], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 38, 724244), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 38, 738303), params={'ema1_window': 21, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=650, value=None),\n FrozenTrial(number=651, state=1, values=[10075.0], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 38, 738846), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 38, 752227), params={'ema1_window': 22, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=651, value=None),\n FrozenTrial(number=652, state=1, values=[10120.88], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 38, 752708), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 38, 767106), params={'ema1_window': 20, 'ema2_window': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=652, value=None),\n FrozenTrial(number=653, state=1, values=[9986.14], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 38, 767780), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 38, 782040), params={'ema1_window': 13, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=653, value=None),\n FrozenTrial(number=654, state=1, values=[9936.64], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 38, 782612), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 39, 4279), params={'ema1_window': 22, 'ema2_window': 27}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=654, value=None),\n FrozenTrial(number=655, state=1, values=[10143.02], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 39, 4999), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 39, 18890), params={'ema1_window': 21, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=655, value=None),\n FrozenTrial(number=656, state=1, values=[10163.2], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 39, 19447), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 39, 32964), params={'ema1_window': 21, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=656, value=None),\n FrozenTrial(number=657, state=1, values=[10084.94], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 39, 33385), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 39, 46909), params={'ema1_window': 21, 'ema2_window': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=657, value=None),\n FrozenTrial(number=658, state=1, values=[10142.64], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 39, 47438), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 39, 60931), params={'ema1_window': 20, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=658, value=None),\n FrozenTrial(number=659, state=1, values=[10075.0], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 39, 61471), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 39, 74688), params={'ema1_window': 22, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=659, value=None),\n FrozenTrial(number=660, state=1, values=[10065.02], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 39, 75222), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 39, 88688), params={'ema1_window': 21, 'ema2_window': 18}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=660, value=None),\n FrozenTrial(number=661, state=1, values=[10133.72], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 39, 89248), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 39, 102645), params={'ema1_window': 20, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=661, value=None),\n FrozenTrial(number=662, state=1, values=[10163.2], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 39, 103149), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 39, 116437), params={'ema1_window': 21, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=662, value=None),\n FrozenTrial(number=663, state=1, values=[10085.04], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 39, 116806), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 39, 130081), params={'ema1_window': 22, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=663, value=None),\n FrozenTrial(number=664, state=1, values=[10143.02], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 39, 130480), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 39, 144392), params={'ema1_window': 21, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=664, value=None),\n FrozenTrial(number=665, state=1, values=[10120.88], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 39, 144931), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 39, 158456), params={'ema1_window': 20, 'ema2_window': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=665, value=None),\n FrozenTrial(number=666, state=1, values=[10074.98], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 39, 158967), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 39, 172534), params={'ema1_window': 21, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=666, value=None),\n FrozenTrial(number=667, state=1, values=[10153.36], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 39, 173264), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 39, 186894), params={'ema1_window': 22, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=667, value=None),\n FrozenTrial(number=668, state=1, values=[10091.24], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 39, 187305), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 39, 201080), params={'ema1_window': 21, 'ema2_window': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=668, value=None),\n FrozenTrial(number=669, state=1, values=[10122.48], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 39, 201540), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 39, 451070), params={'ema1_window': 23, 'ema2_window': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=669, value=None),\n FrozenTrial(number=670, state=1, values=[10142.82], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 39, 451736), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 39, 466721), params={'ema1_window': 20, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=670, value=None),\n FrozenTrial(number=671, state=1, values=[10085.04], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 39, 467156), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 39, 480726), params={'ema1_window': 22, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=671, value=None),\n FrozenTrial(number=672, state=1, values=[10084.94], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 39, 481124), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 39, 494630), params={'ema1_window': 21, 'ema2_window': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=672, value=None),\n FrozenTrial(number=673, state=1, values=[10143.02], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 39, 495131), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 39, 508477), params={'ema1_window': 21, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=673, value=None),\n FrozenTrial(number=674, state=1, values=[10163.2], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 39, 508937), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 39, 522365), params={'ema1_window': 21, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=674, value=None),\n FrozenTrial(number=675, state=1, values=[10120.88], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 39, 522853), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 39, 536490), params={'ema1_window': 20, 'ema2_window': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=675, value=None),\n FrozenTrial(number=676, state=1, values=[10075.0], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 39, 536969), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 39, 551031), params={'ema1_window': 22, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=676, value=None),\n FrozenTrial(number=677, state=1, values=[10074.98], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 39, 551554), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 39, 565101), params={'ema1_window': 21, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=677, value=None),\n FrozenTrial(number=678, state=1, values=[10142.64], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 39, 565555), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 39, 579355), params={'ema1_window': 20, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=678, value=None),\n FrozenTrial(number=679, state=1, values=[10084.94], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 39, 579839), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 39, 593410), params={'ema1_window': 21, 'ema2_window': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=679, value=None),\n FrozenTrial(number=680, state=1, values=[10075.0], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 39, 593906), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 39, 607428), params={'ema1_window': 22, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=680, value=None),\n FrozenTrial(number=681, state=1, values=[10163.2], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 39, 607893), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 39, 621555), params={'ema1_window': 21, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=681, value=None),\n FrozenTrial(number=682, state=1, values=[10120.88], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 39, 622069), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 39, 635712), params={'ema1_window': 20, 'ema2_window': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=682, value=None),\n FrozenTrial(number=683, state=1, values=[10074.98], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 39, 636517), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 39, 650013), params={'ema1_window': 21, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=683, value=None),\n FrozenTrial(number=684, state=1, values=[10153.36], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 39, 650548), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 39, 664462), params={'ema1_window': 22, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=684, value=None),\n FrozenTrial(number=685, state=1, values=[10163.2], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 39, 664850), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 39, 678671), params={'ema1_window': 21, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=685, value=None),\n FrozenTrial(number=686, state=1, values=[10133.72], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 39, 679169), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 39, 692879), params={'ema1_window': 20, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=686, value=None),\n FrozenTrial(number=687, state=1, values=[10084.94], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 39, 693349), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 39, 709101), params={'ema1_window': 21, 'ema2_window': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=687, value=None),\n FrozenTrial(number=688, state=1, values=[10153.36], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 39, 709842), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 39, 724807), params={'ema1_window': 22, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=688, value=None),\n FrozenTrial(number=689, state=1, values=[10163.2], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 39, 725433), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 39, 739884), params={'ema1_window': 21, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=689, value=None),\n FrozenTrial(number=690, state=1, values=[10152.6], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 39, 740458), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 39, 754692), params={'ema1_window': 21, 'ema2_window': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=690, value=None),\n FrozenTrial(number=691, state=1, values=[10142.82], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 39, 755270), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 39, 769288), params={'ema1_window': 20, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=691, value=None),\n FrozenTrial(number=692, state=1, values=[10005.18], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 39, 769864), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 39, 789660), params={'ema1_window': 22, 'ema2_window': 18}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=692, value=None),\n FrozenTrial(number=693, state=1, values=[9926.06], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 39, 790948), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 40, 23676), params={'ema1_window': 21, 'ema2_window': 25}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=693, value=None),\n FrozenTrial(number=694, state=1, values=[10074.98], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 40, 24928), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 40, 45841), params={'ema1_window': 21, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=694, value=None),\n FrozenTrial(number=695, state=1, values=[10142.64], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 40, 46774), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 40, 62437), params={'ema1_window': 20, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=695, value=None),\n FrozenTrial(number=696, state=1, values=[10085.04], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 40, 63190), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 40, 78328), params={'ema1_window': 22, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=696, value=None),\n FrozenTrial(number=697, state=1, values=[10091.24], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 40, 79180), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 40, 94538), params={'ema1_window': 21, 'ema2_window': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=697, value=None),\n FrozenTrial(number=698, state=1, values=[9896.22], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 40, 95364), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 40, 314158), params={'ema1_window': 12, 'ema2_window': 42}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=698, value=None),\n FrozenTrial(number=699, state=1, values=[10074.88], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 40, 315280), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 40, 330829), params={'ema1_window': 20, 'ema2_window': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=699, value=None),\n FrozenTrial(number=700, state=1, values=[10143.02], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 40, 331632), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 40, 347214), params={'ema1_window': 21, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=700, value=None),\n FrozenTrial(number=701, state=1, values=[10075.0], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 40, 348036), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 40, 363308), params={'ema1_window': 22, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=701, value=None),\n FrozenTrial(number=702, state=1, values=[10163.2], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 40, 364070), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 40, 379008), params={'ema1_window': 21, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=702, value=None),\n FrozenTrial(number=703, state=1, values=[10142.64], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 40, 379695), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 40, 396063), params={'ema1_window': 20, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=703, value=None),\n FrozenTrial(number=704, state=1, values=[10074.98], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 40, 397039), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 40, 414310), params={'ema1_window': 21, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=704, value=None),\n FrozenTrial(number=705, state=1, values=[10075.0], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 40, 415180), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 40, 429954), params={'ema1_window': 22, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=705, value=None),\n FrozenTrial(number=706, state=1, values=[10143.02], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 40, 430764), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 40, 445511), params={'ema1_window': 21, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=706, value=None),\n FrozenTrial(number=707, state=1, values=[10152.6], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 40, 446309), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 40, 460820), params={'ema1_window': 21, 'ema2_window': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=707, value=None),\n FrozenTrial(number=708, state=1, values=[10133.72], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 40, 461539), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 40, 479409), params={'ema1_window': 20, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=708, value=None),\n FrozenTrial(number=709, state=1, values=[10163.2], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 40, 480149), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 40, 494678), params={'ema1_window': 21, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=709, value=None),\n FrozenTrial(number=710, state=1, values=[9923.68], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 40, 495353), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 40, 721541), params={'ema1_window': 22, 'ema2_window': 38}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=710, value=None),\n FrozenTrial(number=711, state=1, values=[10015.24], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 40, 722418), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 40, 974761), params={'ema1_window': 23, 'ema2_window': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=711, value=None),\n FrozenTrial(number=712, state=1, values=[10133.72], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 40, 975548), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 40, 991497), params={'ema1_window': 20, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=712, value=None),\n FrozenTrial(number=713, state=1, values=[10152.6], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 40, 992304), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 41, 7185), params={'ema1_window': 21, 'ema2_window': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=713, value=None),\n FrozenTrial(number=714, state=1, values=[10143.02], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 41, 7830), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 41, 22210), params={'ema1_window': 21, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=714, value=None),\n FrozenTrial(number=715, state=1, values=[10075.0], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 41, 22987), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 41, 37629), params={'ema1_window': 22, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=715, value=None),\n FrozenTrial(number=716, state=1, values=[10074.98], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 41, 38415), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 41, 53142), params={'ema1_window': 21, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=716, value=None),\n FrozenTrial(number=717, state=1, values=[10074.88], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 41, 53987), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 41, 68405), params={'ema1_window': 20, 'ema2_window': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=717, value=None),\n FrozenTrial(number=718, state=1, values=[10075.0], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 41, 69073), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 41, 83888), params={'ema1_window': 22, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=718, value=None),\n FrozenTrial(number=719, state=1, values=[10143.02], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 41, 84645), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 41, 100877), params={'ema1_window': 21, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=719, value=None),\n FrozenTrial(number=720, state=1, values=[10012.72], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 41, 101924), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 41, 118095), params={'ema1_window': 16, 'ema2_window': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=720, value=None),\n FrozenTrial(number=721, state=1, values=[10142.82], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 41, 118896), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 41, 134265), params={'ema1_window': 20, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=721, value=None),\n FrozenTrial(number=722, state=1, values=[10074.98], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 41, 135115), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 41, 149966), params={'ema1_window': 21, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=722, value=None),\n FrozenTrial(number=723, state=1, values=[10143.02], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 41, 150645), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 41, 165255), params={'ema1_window': 21, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=723, value=None),\n FrozenTrial(number=724, state=1, values=[10064.92], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 41, 165915), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 41, 180599), params={'ema1_window': 22, 'ema2_window': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=724, value=None),\n FrozenTrial(number=725, state=1, values=[9824.86], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 41, 181234), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 41, 449844), params={'ema1_window': 8, 'ema2_window': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=725, value=None),\n FrozenTrial(number=726, state=1, values=[9986.14], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 41, 450794), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 41, 705769), params={'ema1_window': 11, 'ema2_window': 18}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=726, value=None),\n FrozenTrial(number=727, state=1, values=[10163.2], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 41, 706747), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 41, 722272), params={'ema1_window': 21, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=727, value=None),\n FrozenTrial(number=728, state=1, values=[10133.72], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 41, 723008), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 41, 737983), params={'ema1_window': 20, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=728, value=None),\n FrozenTrial(number=729, state=1, values=[10143.02], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 41, 738662), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 41, 753373), params={'ema1_window': 21, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=729, value=None),\n FrozenTrial(number=730, state=1, values=[10075.0], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 41, 754075), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 41, 768638), params={'ema1_window': 22, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=730, value=None),\n FrozenTrial(number=731, state=1, values=[10143.02], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 41, 769314), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 41, 783785), params={'ema1_window': 21, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=731, value=None),\n FrozenTrial(number=732, state=1, values=[10133.72], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 41, 784367), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 41, 798603), params={'ema1_window': 20, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=732, value=None),\n FrozenTrial(number=733, state=1, values=[10123.8], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 41, 799127), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 42, 36835), params={'ema1_window': 24, 'ema2_window': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=733, value=None),\n FrozenTrial(number=734, state=1, values=[10163.2], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 42, 37707), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 42, 53506), params={'ema1_window': 21, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=734, value=None),\n FrozenTrial(number=735, state=1, values=[10064.92], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 42, 54286), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 42, 71029), params={'ema1_window': 22, 'ema2_window': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=735, value=None),\n FrozenTrial(number=736, state=1, values=[10074.98], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 42, 71969), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 42, 88822), params={'ema1_window': 21, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=736, value=None),\n FrozenTrial(number=737, state=1, values=[10142.82], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 42, 89690), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 42, 105341), params={'ema1_window': 20, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=737, value=None),\n FrozenTrial(number=738, state=1, values=[10153.36], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 42, 106068), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 42, 121604), params={'ema1_window': 22, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=738, value=None),\n FrozenTrial(number=739, state=1, values=[10163.2], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 42, 122152), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 42, 137682), params={'ema1_window': 21, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=739, value=None),\n FrozenTrial(number=740, state=1, values=[10074.98], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 42, 138488), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 42, 153629), params={'ema1_window': 21, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=740, value=None),\n FrozenTrial(number=741, state=1, values=[9975.92], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 42, 154395), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 42, 441239), params={'ema1_window': 20, 'ema2_window': 24}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=741, value=None),\n FrozenTrial(number=742, state=1, values=[10152.6], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 42, 442519), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 42, 457715), params={'ema1_window': 21, 'ema2_window': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=742, value=None),\n FrozenTrial(number=743, state=1, values=[10153.36], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 42, 458451), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 42, 472974), params={'ema1_window': 22, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=743, value=None),\n FrozenTrial(number=744, state=1, values=[10005.28], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 42, 473735), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 42, 702145), params={'ema1_window': 21, 'ema2_window': 19}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=744, value=None),\n FrozenTrial(number=745, state=1, values=[10015.24], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 42, 703221), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 42, 719207), params={'ema1_window': 23, 'ema2_window': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=745, value=None),\n FrozenTrial(number=746, state=1, values=[9936.62], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 42, 720085), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 42, 942980), params={'ema1_window': 20, 'ema2_window': 29}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=746, value=None),\n FrozenTrial(number=747, state=1, values=[10000.0], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 42, 944198), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 43, 63617), params={'ema1_window': 14, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=747, value=None),\n FrozenTrial(number=748, state=1, values=[9944.7], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 43, 64722), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 43, 80531), params={'ema1_window': 6, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=748, value=None),\n FrozenTrial(number=749, state=1, values=[10085.04], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 43, 81334), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 43, 96181), params={'ema1_window': 22, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=749, value=None),\n FrozenTrial(number=750, state=1, values=[10163.2], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 43, 97129), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 43, 112278), params={'ema1_window': 21, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=750, value=None),\n FrozenTrial(number=751, state=1, values=[10152.6], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 43, 113347), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 43, 131301), params={'ema1_window': 21, 'ema2_window': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=751, value=None),\n FrozenTrial(number=752, state=1, values=[10142.64], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 43, 132440), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 43, 149807), params={'ema1_window': 20, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=752, value=None),\n FrozenTrial(number=753, state=1, values=[9900.36], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 43, 150592), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 43, 363676), params={'ema1_window': 22, 'ema2_window': 35}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=753, value=None),\n FrozenTrial(number=754, state=1, values=[10074.88], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 43, 364761), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 43, 381057), params={'ema1_window': 20, 'ema2_window': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=754, value=None),\n FrozenTrial(number=755, state=1, values=[10163.2], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 43, 381843), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 43, 397532), params={'ema1_window': 21, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=755, value=None),\n FrozenTrial(number=756, state=1, values=[10074.98], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 43, 398283), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 43, 413403), params={'ema1_window': 21, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=756, value=None),\n FrozenTrial(number=757, state=1, values=[10074.98], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 43, 414182), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 43, 429207), params={'ema1_window': 21, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=757, value=None),\n FrozenTrial(number=758, state=1, values=[10005.18], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 43, 430000), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 43, 445558), params={'ema1_window': 22, 'ema2_window': 18}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=758, value=None),\n FrozenTrial(number=759, state=1, values=[10143.02], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 43, 446546), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 43, 462057), params={'ema1_window': 21, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=759, value=None),\n FrozenTrial(number=760, state=1, values=[10142.82], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 43, 463259), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 43, 478991), params={'ema1_window': 20, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=760, value=None),\n FrozenTrial(number=761, state=1, values=[10091.24], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 43, 479776), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 43, 495028), params={'ema1_window': 21, 'ema2_window': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=761, value=None),\n FrozenTrial(number=762, state=1, values=[9954.2], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 43, 495864), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 43, 512159), params={'ema1_window': 22, 'ema2_window': 21}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=762, value=None),\n FrozenTrial(number=763, state=1, values=[10142.64], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 43, 513020), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 43, 528574), params={'ema1_window': 20, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=763, value=None),\n FrozenTrial(number=764, state=1, values=[10074.98], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 43, 529388), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 43, 545082), params={'ema1_window': 21, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=764, value=None),\n FrozenTrial(number=765, state=1, values=[10152.6], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 43, 545839), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 43, 561488), params={'ema1_window': 21, 'ema2_window': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=765, value=None),\n FrozenTrial(number=766, state=1, values=[10075.0], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 43, 562363), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 43, 581330), params={'ema1_window': 22, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=766, value=None),\n FrozenTrial(number=767, state=1, values=[10163.2], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 43, 582335), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 43, 600017), params={'ema1_window': 21, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=767, value=None),\n FrozenTrial(number=768, state=1, values=[10142.64], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 43, 600733), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 43, 617451), params={'ema1_window': 20, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=768, value=None),\n FrozenTrial(number=769, state=1, values=[10084.94], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 43, 618103), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 43, 635968), params={'ema1_window': 21, 'ema2_window': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=769, value=None),\n FrozenTrial(number=770, state=1, values=[10085.04], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 43, 638293), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 43, 662300), params={'ema1_window': 22, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=770, value=None),\n FrozenTrial(number=771, state=1, values=[10163.2], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 43, 663279), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 43, 681370), params={'ema1_window': 21, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=771, value=None),\n FrozenTrial(number=772, state=1, values=[10142.64], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 43, 682355), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 43, 701467), params={'ema1_window': 20, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=772, value=None),\n FrozenTrial(number=773, state=1, values=[10074.98], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 43, 702415), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 43, 719684), params={'ema1_window': 21, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=773, value=None),\n FrozenTrial(number=774, state=1, values=[10075.0], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 43, 720684), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 43, 737637), params={'ema1_window': 22, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=774, value=None),\n FrozenTrial(number=775, state=1, values=[10152.6], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 43, 738838), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 43, 755724), params={'ema1_window': 21, 'ema2_window': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=775, value=None),\n FrozenTrial(number=776, state=1, values=[10074.9], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 43, 756494), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 43, 772810), params={'ema1_window': 20, 'ema2_window': 18}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=776, value=None),\n FrozenTrial(number=777, state=1, values=[10084.94], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 43, 773575), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 43, 790072), params={'ema1_window': 21, 'ema2_window': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=777, value=None),\n FrozenTrial(number=778, state=1, values=[10153.36], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 43, 790858), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 43, 806678), params={'ema1_window': 22, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=778, value=None),\n FrozenTrial(number=779, state=1, values=[10163.2], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 43, 807380), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 43, 823289), params={'ema1_window': 21, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=779, value=None),\n FrozenTrial(number=780, state=1, values=[10152.78], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 43, 824086), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 44, 70722), params={'ema1_window': 23, 'ema2_window': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=780, value=None),\n FrozenTrial(number=781, state=1, values=[10074.98], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 44, 71854), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 44, 88881), params={'ema1_window': 21, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=781, value=None),\n FrozenTrial(number=782, state=1, values=[10133.72], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 44, 89857), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 44, 106847), params={'ema1_window': 20, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=782, value=None),\n FrozenTrial(number=783, state=1, values=[10142.84], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 44, 107627), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 44, 124179), params={'ema1_window': 22, 'ema2_window': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=783, value=None),\n FrozenTrial(number=784, state=1, values=[10016.0], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 44, 124970), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 44, 141274), params={'ema1_window': 21, 'ema2_window': 22}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=784, value=None),\n FrozenTrial(number=785, state=1, values=[10163.2], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 44, 141964), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 44, 158011), params={'ema1_window': 21, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=785, value=None),\n FrozenTrial(number=786, state=1, values=[10142.64], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 44, 158700), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 44, 174089), params={'ema1_window': 20, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=786, value=None),\n FrozenTrial(number=787, state=1, values=[10085.04], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 44, 174726), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 44, 190382), params={'ema1_window': 22, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=787, value=None),\n FrozenTrial(number=788, state=1, values=[10143.02], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 44, 191056), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 44, 206920), params={'ema1_window': 21, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=788, value=None),\n FrozenTrial(number=789, state=1, values=[10074.88], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 44, 207502), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 44, 223746), params={'ema1_window': 20, 'ema2_window': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=789, value=None),\n FrozenTrial(number=790, state=1, values=[9996.0], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 44, 224567), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 44, 453603), params={'ema1_window': 15, 'ema2_window': 30}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=790, value=None),\n FrozenTrial(number=791, state=1, values=[10163.2], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 44, 454659), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 44, 471337), params={'ema1_window': 21, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=791, value=None),\n FrozenTrial(number=792, state=1, values=[10075.0], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 44, 472151), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 44, 488355), params={'ema1_window': 22, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=792, value=None),\n FrozenTrial(number=793, state=1, values=[10084.94], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 44, 489072), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 44, 505030), params={'ema1_window': 21, 'ema2_window': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=793, value=None),\n FrozenTrial(number=794, state=1, values=[10120.88], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 44, 505486), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 44, 521847), params={'ema1_window': 20, 'ema2_window': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=794, value=None),\n FrozenTrial(number=795, state=1, values=[10143.02], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 44, 522558), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 44, 540464), params={'ema1_window': 21, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=795, value=None),\n FrozenTrial(number=796, state=1, values=[10002.6], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 44, 541594), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 44, 748049), params={'ema1_window': 22, 'ema2_window': 50}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=796, value=None),\n FrozenTrial(number=797, state=1, values=[10074.98], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 44, 748879), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 44, 766501), params={'ema1_window': 21, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=797, value=None),\n FrozenTrial(number=798, state=1, values=[10142.82], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 44, 767348), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 44, 783799), params={'ema1_window': 20, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=798, value=None),\n FrozenTrial(number=799, state=1, values=[10095.32], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 44, 784486), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 44, 801423), params={'ema1_window': 23, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=799, value=None),\n FrozenTrial(number=800, state=1, values=[10074.98], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 44, 802017), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 44, 819241), params={'ema1_window': 21, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=800, value=None),\n FrozenTrial(number=801, state=1, values=[10163.2], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 44, 819985), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 44, 836804), params={'ema1_window': 21, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=801, value=None),\n FrozenTrial(number=802, state=1, values=[10153.36], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 44, 837601), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 44, 854218), params={'ema1_window': 22, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=802, value=None),\n FrozenTrial(number=803, state=1, values=[10110.66], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 44, 855102), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 45, 105453), params={'ema1_window': 20, 'ema2_window': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=803, value=None),\n FrozenTrial(number=804, state=1, values=[10084.94], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 45, 106313), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 45, 124061), params={'ema1_window': 21, 'ema2_window': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=804, value=None),\n FrozenTrial(number=805, state=1, values=[9936.64], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 45, 124841), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 45, 141475), params={'ema1_window': 22, 'ema2_window': 27}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=805, value=None),\n FrozenTrial(number=806, state=1, values=[10074.98], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 45, 142279), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 45, 158869), params={'ema1_window': 21, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=806, value=None),\n FrozenTrial(number=807, state=1, values=[10142.82], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 45, 159836), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 45, 175926), params={'ema1_window': 20, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=807, value=None),\n FrozenTrial(number=808, state=1, values=[10152.6], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 45, 176792), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 45, 193475), params={'ema1_window': 21, 'ema2_window': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=808, value=None),\n FrozenTrial(number=809, state=1, values=[10075.0], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 45, 194266), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 45, 213250), params={'ema1_window': 22, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=809, value=None),\n FrozenTrial(number=810, state=1, values=[10074.98], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 45, 214336), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 45, 233185), params={'ema1_window': 21, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=810, value=None),\n FrozenTrial(number=811, state=1, values=[10074.9], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 45, 234172), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 45, 251615), params={'ema1_window': 20, 'ema2_window': 18}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=811, value=None),\n FrozenTrial(number=812, state=1, values=[10143.02], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 45, 252376), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 45, 270367), params={'ema1_window': 21, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=812, value=None),\n FrozenTrial(number=813, state=1, values=[10085.04], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 45, 271418), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 45, 289730), params={'ema1_window': 22, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=813, value=None),\n FrozenTrial(number=814, state=1, values=[10163.2], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 45, 290677), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 45, 308329), params={'ema1_window': 21, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=814, value=None),\n FrozenTrial(number=815, state=1, values=[10143.02], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 45, 309211), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 45, 325641), params={'ema1_window': 21, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=815, value=None),\n FrozenTrial(number=816, state=1, values=[10120.88], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 45, 326536), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 45, 343052), params={'ema1_window': 20, 'ema2_window': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=816, value=None),\n FrozenTrial(number=817, state=1, values=[10014.94], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 45, 343684), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 45, 360576), params={'ema1_window': 25, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=817, value=None),\n FrozenTrial(number=818, state=1, values=[10085.04], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 45, 361216), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 45, 377780), params={'ema1_window': 22, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=818, value=None),\n FrozenTrial(number=819, state=1, values=[10143.02], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 45, 378688), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 45, 394950), params={'ema1_window': 21, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=819, value=None),\n FrozenTrial(number=820, state=1, values=[10163.2], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 45, 395895), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 45, 412424), params={'ema1_window': 21, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=820, value=None),\n FrozenTrial(number=821, state=1, values=[10074.88], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 45, 413201), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 45, 429864), params={'ema1_window': 20, 'ema2_window': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=821, value=None),\n FrozenTrial(number=822, state=1, values=[10075.0], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 45, 430621), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 45, 447948), params={'ema1_window': 22, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=822, value=None),\n FrozenTrial(number=823, state=1, values=[10074.98], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 45, 449129), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 45, 467930), params={'ema1_window': 21, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=823, value=None),\n FrozenTrial(number=824, state=1, values=[10142.64], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 45, 468791), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 45, 486756), params={'ema1_window': 20, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=824, value=None),\n FrozenTrial(number=825, state=1, values=[10084.94], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 45, 487549), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 45, 504893), params={'ema1_window': 21, 'ema2_window': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=825, value=None),\n FrozenTrial(number=826, state=1, values=[10153.36], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 45, 505805), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 45, 523190), params={'ema1_window': 22, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=826, value=None),\n FrozenTrial(number=827, state=1, values=[9975.7], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 45, 524063), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 45, 540989), params={'ema1_window': 21, 'ema2_window': 20}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=827, value=None),\n FrozenTrial(number=828, state=1, values=[10090.6], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 45, 541506), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 45, 558767), params={'ema1_window': 21, 'ema2_window': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=828, value=None),\n FrozenTrial(number=829, state=1, values=[10120.88], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 45, 559515), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 45, 576274), params={'ema1_window': 20, 'ema2_window': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=829, value=None),\n FrozenTrial(number=830, state=1, values=[10163.2], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 45, 577223), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 45, 593818), params={'ema1_window': 21, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=830, value=None),\n FrozenTrial(number=831, state=1, values=[10085.04], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 45, 594552), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 45, 611414), params={'ema1_window': 22, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=831, value=None),\n FrozenTrial(number=832, state=1, values=[10152.6], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 45, 612186), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 45, 628774), params={'ema1_window': 21, 'ema2_window': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=832, value=None),\n FrozenTrial(number=833, state=1, values=[10142.82], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 45, 629491), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 45, 646169), params={'ema1_window': 20, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=833, value=None),\n FrozenTrial(number=834, state=1, values=[10143.02], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 45, 647359), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 45, 664682), params={'ema1_window': 21, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=834, value=None),\n FrozenTrial(number=835, state=1, values=[10005.18], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 45, 665348), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 45, 682489), params={'ema1_window': 22, 'ema2_window': 18}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=835, value=None),\n FrozenTrial(number=836, state=1, values=[10133.72], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 45, 683318), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 45, 700292), params={'ema1_window': 20, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=836, value=None),\n FrozenTrial(number=837, state=1, values=[10163.2], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 45, 701160), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 45, 719514), params={'ema1_window': 21, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=837, value=None),\n FrozenTrial(number=838, state=1, values=[10143.02], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 45, 720743), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 45, 740327), params={'ema1_window': 21, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=838, value=None),\n FrozenTrial(number=839, state=1, values=[10162.48], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 45, 741167), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 45, 758984), params={'ema1_window': 22, 'ema2_window': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=839, value=None),\n FrozenTrial(number=840, state=1, values=[10074.88], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 45, 759822), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 45, 776337), params={'ema1_window': 20, 'ema2_window': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=840, value=None),\n FrozenTrial(number=841, state=1, values=[10074.98], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 45, 777335), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 45, 794740), params={'ema1_window': 21, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=841, value=None),\n FrozenTrial(number=842, state=1, values=[10163.2], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 45, 795595), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 45, 812607), params={'ema1_window': 21, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=842, value=None),\n FrozenTrial(number=843, state=1, values=[10153.36], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 45, 813457), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 45, 830489), params={'ema1_window': 22, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=843, value=None),\n FrozenTrial(number=844, state=1, values=[10064.82], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 45, 831392), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 45, 854472), params={'ema1_window': 23, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=844, value=None),\n FrozenTrial(number=845, state=1, values=[9918.78], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 45, 856668), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 46, 85133), params={'ema1_window': 21, 'ema2_window': 33}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=845, value=None),\n FrozenTrial(number=846, state=1, values=[10074.88], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 46, 85992), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 46, 103903), params={'ema1_window': 20, 'ema2_window': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=846, value=None),\n FrozenTrial(number=847, state=1, values=[10163.2], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 46, 104515), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 46, 121768), params={'ema1_window': 21, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=847, value=None),\n FrozenTrial(number=848, state=1, values=[10075.0], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 46, 122418), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 46, 139613), params={'ema1_window': 22, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=848, value=None),\n FrozenTrial(number=849, state=1, values=[10152.6], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 46, 140262), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 46, 156881), params={'ema1_window': 21, 'ema2_window': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=849, value=None),\n FrozenTrial(number=850, state=1, values=[10142.64], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 46, 157463), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 46, 174094), params={'ema1_window': 20, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=850, value=None),\n FrozenTrial(number=851, state=1, values=[10074.98], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 46, 174691), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 46, 191106), params={'ema1_window': 21, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=851, value=None),\n FrozenTrial(number=852, state=1, values=[10163.2], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 46, 191716), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 46, 215335), params={'ema1_window': 21, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=852, value=None),\n FrozenTrial(number=853, state=1, values=[10142.84], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 46, 216131), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 46, 233876), params={'ema1_window': 22, 'ema2_window': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=853, value=None),\n FrozenTrial(number=854, state=1, values=[10133.72], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 46, 234537), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 46, 251754), params={'ema1_window': 20, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=854, value=None),\n FrozenTrial(number=855, state=1, values=[10143.02], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 46, 252678), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 46, 269677), params={'ema1_window': 21, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=855, value=None),\n FrozenTrial(number=856, state=1, values=[10023.76], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 46, 270152), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 46, 287529), params={'ema1_window': 22, 'ema2_window': 46}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=856, value=None),\n FrozenTrial(number=857, state=1, values=[10163.2], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 46, 288147), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 46, 305382), params={'ema1_window': 21, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=857, value=None),\n FrozenTrial(number=858, state=1, values=[10143.02], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 46, 306080), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 46, 323419), params={'ema1_window': 21, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=858, value=None),\n FrozenTrial(number=859, state=1, values=[10074.88], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 46, 324049), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 46, 341626), params={'ema1_window': 20, 'ema2_window': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=859, value=None),\n FrozenTrial(number=860, state=1, values=[10085.04], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 46, 342325), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 46, 359946), params={'ema1_window': 22, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=860, value=None),\n FrozenTrial(number=861, state=1, values=[10163.2], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 46, 360652), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 46, 377934), params={'ema1_window': 21, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=861, value=None),\n FrozenTrial(number=862, state=1, values=[10123.8], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 46, 378602), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 46, 396322), params={'ema1_window': 24, 'ema2_window': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=862, value=None),\n FrozenTrial(number=863, state=1, values=[10025.12], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 46, 397022), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 46, 414902), params={'ema1_window': 20, 'ema2_window': 19}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=863, value=None),\n FrozenTrial(number=864, state=1, values=[10143.02], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 46, 415565), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 46, 433278), params={'ema1_window': 21, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=864, value=None),\n FrozenTrial(number=865, state=1, values=[10163.2], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 46, 433951), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 46, 451421), params={'ema1_window': 21, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=865, value=None),\n FrozenTrial(number=866, state=1, values=[9807.88], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 46, 452135), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 46, 474837), params={'ema1_window': 16, 'ema2_window': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=866, value=None),\n FrozenTrial(number=867, state=1, values=[9917.52], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 46, 475588), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 46, 691195), params={'ema1_window': 22, 'ema2_window': 39}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=867, value=None),\n FrozenTrial(number=868, state=1, values=[10133.72], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 46, 692098), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 46, 710300), params={'ema1_window': 20, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=868, value=None),\n FrozenTrial(number=869, state=1, values=[10163.2], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 46, 711004), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 46, 728372), params={'ema1_window': 21, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=869, value=None),\n FrozenTrial(number=870, state=1, values=[10065.02], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 46, 729095), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 46, 745974), params={'ema1_window': 21, 'ema2_window': 18}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=870, value=None),\n FrozenTrial(number=871, state=1, values=[10085.04], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 46, 746595), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 46, 763481), params={'ema1_window': 22, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=871, value=None),\n FrozenTrial(number=872, state=1, values=[10142.64], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 46, 764082), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 46, 780875), params={'ema1_window': 20, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=872, value=None),\n FrozenTrial(number=873, state=1, values=[10163.2], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 46, 781501), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 46, 798401), params={'ema1_window': 21, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=873, value=None),\n FrozenTrial(number=874, state=1, values=[10152.6], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 46, 799153), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 46, 816864), params={'ema1_window': 21, 'ema2_window': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=874, value=None),\n FrozenTrial(number=875, state=1, values=[10153.36], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 46, 817455), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 46, 834418), params={'ema1_window': 22, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=875, value=None),\n FrozenTrial(number=876, state=1, values=[10091.24], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 46, 835067), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 46, 851890), params={'ema1_window': 21, 'ema2_window': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=876, value=None),\n FrozenTrial(number=877, state=1, values=[10074.88], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 46, 852490), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 46, 869430), params={'ema1_window': 20, 'ema2_window': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=877, value=None),\n FrozenTrial(number=878, state=1, values=[10085.04], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 46, 870027), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 46, 886763), params={'ema1_window': 22, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=878, value=None),\n FrozenTrial(number=879, state=1, values=[10142.82], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 46, 887361), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 46, 910183), params={'ema1_window': 20, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=879, value=None),\n FrozenTrial(number=880, state=1, values=[10074.98], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 46, 910971), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 46, 928777), params={'ema1_window': 21, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=880, value=None),\n FrozenTrial(number=881, state=1, values=[10143.02], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 46, 929600), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 46, 946584), params={'ema1_window': 21, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=881, value=None),\n FrozenTrial(number=882, state=1, values=[10090.6], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 46, 947400), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 46, 964659), params={'ema1_window': 21, 'ema2_window': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=882, value=None),\n FrozenTrial(number=883, state=1, values=[10075.0], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 46, 965274), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 46, 982261), params={'ema1_window': 22, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=883, value=None),\n FrozenTrial(number=884, state=1, values=[10133.72], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 46, 982776), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 47, 270), params={'ema1_window': 20, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=884, value=None),\n FrozenTrial(number=885, state=1, values=[10152.6], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 47, 836), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 47, 18204), params={'ema1_window': 21, 'ema2_window': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=885, value=None),\n FrozenTrial(number=886, state=1, values=[9923.96], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 47, 18920), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 47, 36253), params={'ema1_window': 22, 'ema2_window': 41}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=886, value=None),\n FrozenTrial(number=887, state=1, values=[10143.02], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 47, 36927), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 47, 54189), params={'ema1_window': 21, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=887, value=None),\n FrozenTrial(number=888, state=1, values=[10163.2], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 47, 54661), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 47, 71736), params={'ema1_window': 21, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=888, value=None),\n FrozenTrial(number=889, state=1, values=[9862.88], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 47, 72348), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 47, 334533), params={'ema1_window': 9, 'ema2_window': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=889, value=None),\n FrozenTrial(number=890, state=1, values=[10085.04], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 47, 335439), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 47, 354285), params={'ema1_window': 23, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=890, value=None),\n FrozenTrial(number=891, state=1, values=[10133.72], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 47, 354965), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 47, 373296), params={'ema1_window': 20, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=891, value=None),\n FrozenTrial(number=892, state=1, values=[10143.02], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 47, 374296), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 47, 393301), params={'ema1_window': 21, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=892, value=None),\n FrozenTrial(number=893, state=1, values=[10085.04], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 47, 394151), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 47, 411586), params={'ema1_window': 22, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=893, value=None),\n FrozenTrial(number=894, state=1, values=[9968.18], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 47, 412261), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 47, 638566), params={'ema1_window': 20, 'ema2_window': 32}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=894, value=None),\n FrozenTrial(number=895, state=1, values=[10163.2], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 47, 639270), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 47, 657988), params={'ema1_window': 21, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=895, value=None),\n FrozenTrial(number=896, state=1, values=[10152.6], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 47, 658636), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 47, 676365), params={'ema1_window': 21, 'ema2_window': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=896, value=None),\n FrozenTrial(number=897, state=1, values=[10153.36], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 47, 676985), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 47, 694255), params={'ema1_window': 22, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=897, value=None),\n FrozenTrial(number=898, state=1, values=[10074.88], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 47, 694903), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 47, 712328), params={'ema1_window': 20, 'ema2_window': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=898, value=None),\n FrozenTrial(number=899, state=1, values=[10163.2], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 47, 712996), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 47, 730364), params={'ema1_window': 21, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=899, value=None),\n FrozenTrial(number=900, state=1, values=[10142.84], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 47, 730983), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 47, 748335), params={'ema1_window': 22, 'ema2_window': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=900, value=None),\n FrozenTrial(number=901, state=1, values=[10163.2], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 47, 748904), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 47, 765844), params={'ema1_window': 21, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=901, value=None),\n FrozenTrial(number=902, state=1, values=[10142.64], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 47, 766409), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 47, 783272), params={'ema1_window': 20, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=902, value=None),\n FrozenTrial(number=903, state=1, values=[10074.98], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 47, 783861), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 47, 800967), params={'ema1_window': 21, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=903, value=None),\n FrozenTrial(number=904, state=1, values=[10085.04], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 47, 801587), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 47, 818604), params={'ema1_window': 22, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=904, value=None),\n FrozenTrial(number=905, state=1, values=[10065.02], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 47, 819508), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 47, 838554), params={'ema1_window': 21, 'ema2_window': 18}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=905, value=None),\n FrozenTrial(number=906, state=1, values=[10142.64], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 47, 839261), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 47, 857160), params={'ema1_window': 20, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=906, value=None),\n FrozenTrial(number=907, state=1, values=[10163.2], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 47, 857757), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 47, 874941), params={'ema1_window': 21, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=907, value=None),\n FrozenTrial(number=908, state=1, values=[10091.24], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 47, 875555), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 47, 892696), params={'ema1_window': 21, 'ema2_window': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=908, value=None),\n FrozenTrial(number=909, state=1, values=[10085.04], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 47, 893297), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 47, 910791), params={'ema1_window': 22, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=909, value=None),\n FrozenTrial(number=910, state=1, values=[10142.64], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 47, 911426), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 47, 928259), params={'ema1_window': 20, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=910, value=None),\n FrozenTrial(number=911, state=1, values=[10084.94], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 47, 928835), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 47, 945860), params={'ema1_window': 21, 'ema2_window': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=911, value=None),\n FrozenTrial(number=912, state=1, values=[9926.26], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 47, 946459), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 48, 178125), params={'ema1_window': 22, 'ema2_window': 24}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=912, value=None),\n FrozenTrial(number=913, state=1, values=[10163.2], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 48, 179179), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 48, 197985), params={'ema1_window': 21, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=913, value=None),\n FrozenTrial(number=914, state=1, values=[10142.82], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 48, 198608), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 48, 216419), params={'ema1_window': 20, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=914, value=None),\n FrozenTrial(number=915, state=1, values=[10152.6], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 48, 216867), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 48, 234569), params={'ema1_window': 21, 'ema2_window': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=915, value=None),\n FrozenTrial(number=916, state=1, values=[10084.94], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 48, 235177), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 48, 252079), params={'ema1_window': 21, 'ema2_window': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=916, value=None),\n FrozenTrial(number=917, state=1, values=[10142.64], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 48, 252624), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 48, 269799), params={'ema1_window': 20, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=917, value=None),\n FrozenTrial(number=918, state=1, values=[10005.18], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 48, 270373), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 48, 287577), params={'ema1_window': 22, 'ema2_window': 18}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=918, value=None),\n FrozenTrial(number=919, state=1, values=[10074.98], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 48, 288153), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 48, 308494), params={'ema1_window': 21, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=919, value=None),\n FrozenTrial(number=920, state=1, values=[10163.2], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 48, 309269), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 48, 326983), params={'ema1_window': 21, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=920, value=None),\n FrozenTrial(number=921, state=1, values=[10142.84], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 48, 327587), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 48, 345193), params={'ema1_window': 22, 'ema2_window': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=921, value=None),\n FrozenTrial(number=922, state=1, values=[10074.98], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 48, 345796), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 48, 363143), params={'ema1_window': 21, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=922, value=None),\n FrozenTrial(number=923, state=1, values=[10142.64], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 48, 363755), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 48, 381125), params={'ema1_window': 20, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=923, value=None),\n FrozenTrial(number=924, state=1, values=[10085.04], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 48, 381751), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 48, 398871), params={'ema1_window': 23, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=924, value=None),\n FrozenTrial(number=925, state=1, values=[10064.92], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 48, 399581), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 48, 423060), params={'ema1_window': 22, 'ema2_window': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=925, value=None),\n FrozenTrial(number=926, state=1, values=[10143.02], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 48, 423863), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 48, 442778), params={'ema1_window': 21, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=926, value=None),\n FrozenTrial(number=927, state=1, values=[10163.2], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 48, 443497), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 48, 463065), params={'ema1_window': 21, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=927, value=None),\n FrozenTrial(number=928, state=1, values=[10133.72], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 48, 463794), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 48, 483598), params={'ema1_window': 20, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=928, value=None),\n FrozenTrial(number=929, state=1, values=[10074.98], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 48, 484873), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 48, 504500), params={'ema1_window': 21, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=929, value=None),\n FrozenTrial(number=930, state=1, values=[10120.88], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 48, 505250), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 48, 523263), params={'ema1_window': 20, 'ema2_window': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=930, value=None),\n FrozenTrial(number=931, state=1, values=[9913.08], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 48, 523858), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 48, 847970), params={'ema1_window': 11, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=931, value=None),\n FrozenTrial(number=932, state=1, values=[10153.36], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 48, 848701), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 48, 867089), params={'ema1_window': 22, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=932, value=None),\n FrozenTrial(number=933, state=1, values=[9872.68], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 48, 867724), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 49, 126855), params={'ema1_window': 10, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=933, value=None),\n FrozenTrial(number=934, state=1, values=[10091.24], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 49, 127546), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 49, 146016), params={'ema1_window': 21, 'ema2_window': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=934, value=None),\n FrozenTrial(number=935, state=1, values=[9946.7], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 49, 146626), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 49, 372212), params={'ema1_window': 22, 'ema2_window': 26}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=935, value=None),\n FrozenTrial(number=936, state=1, values=[10084.94], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 49, 372952), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 49, 392085), params={'ema1_window': 21, 'ema2_window': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=936, value=None),\n FrozenTrial(number=937, state=1, values=[9935.36], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 49, 392791), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 49, 671770), params={'ema1_window': 6, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=937, value=None),\n FrozenTrial(number=938, state=1, values=[10074.98], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 49, 672707), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 49, 691390), params={'ema1_window': 21, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=938, value=None),\n FrozenTrial(number=939, state=1, values=[10142.82], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 49, 691882), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 49, 709696), params={'ema1_window': 20, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=939, value=None),\n FrozenTrial(number=940, state=1, values=[10153.36], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 49, 710430), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 49, 728658), params={'ema1_window': 22, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=940, value=None),\n FrozenTrial(number=941, state=1, values=[10074.98], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 49, 729289), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 49, 747164), params={'ema1_window': 21, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=941, value=None),\n FrozenTrial(number=942, state=1, values=[10005.28], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 49, 747826), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 49, 765373), params={'ema1_window': 21, 'ema2_window': 19}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=942, value=None),\n FrozenTrial(number=943, state=1, values=[10142.82], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 49, 765972), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 49, 783227), params={'ema1_window': 20, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=943, value=None),\n FrozenTrial(number=944, state=1, values=[10074.98], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 49, 783865), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 49, 803075), params={'ema1_window': 21, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=944, value=None),\n FrozenTrial(number=945, state=1, values=[10152.6], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 49, 804065), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 49, 823549), params={'ema1_window': 21, 'ema2_window': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=945, value=None),\n FrozenTrial(number=946, state=1, values=[10075.0], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 49, 824275), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 49, 843033), params={'ema1_window': 22, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=946, value=None),\n FrozenTrial(number=947, state=1, values=[10074.88], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 49, 843701), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 49, 861583), params={'ema1_window': 20, 'ema2_window': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=947, value=None),\n FrozenTrial(number=948, state=1, values=[10143.02], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 49, 862197), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 49, 880249), params={'ema1_window': 21, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=948, value=None),\n FrozenTrial(number=949, state=1, values=[10075.0], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 49, 880862), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 49, 898872), params={'ema1_window': 22, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=949, value=None),\n FrozenTrial(number=950, state=1, values=[10143.02], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 49, 899594), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 49, 918282), params={'ema1_window': 21, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=950, value=None),\n FrozenTrial(number=951, state=1, values=[10074.98], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 49, 918942), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 49, 936806), params={'ema1_window': 21, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=951, value=None),\n FrozenTrial(number=952, state=1, values=[10142.82], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 49, 937420), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 49, 955584), params={'ema1_window': 20, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=952, value=None),\n FrozenTrial(number=953, state=1, values=[10152.6], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 49, 956217), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 49, 975212), params={'ema1_window': 21, 'ema2_window': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=953, value=None),\n FrozenTrial(number=954, state=1, values=[10015.24], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 49, 976039), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 49, 995499), params={'ema1_window': 23, 'ema2_window': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=954, value=None),\n FrozenTrial(number=955, state=1, values=[10085.04], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 49, 996376), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 50, 17358), params={'ema1_window': 22, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=955, value=None),\n FrozenTrial(number=956, state=1, values=[10142.64], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 50, 18265), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 50, 38067), params={'ema1_window': 20, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=956, value=None),\n FrozenTrial(number=957, state=1, values=[9936.54], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 50, 38952), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 50, 272510), params={'ema1_window': 21, 'ema2_window': 28}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=957, value=None),\n FrozenTrial(number=958, state=1, values=[10163.2], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 50, 273386), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 50, 293028), params={'ema1_window': 21, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=958, value=None),\n FrozenTrial(number=959, state=1, values=[10153.36], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 50, 293653), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 50, 312333), params={'ema1_window': 22, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=959, value=None),\n FrozenTrial(number=960, state=1, values=[10133.72], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 50, 312941), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 50, 330939), params={'ema1_window': 20, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=960, value=None),\n FrozenTrial(number=961, state=1, values=[10065.02], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 50, 331500), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 50, 349258), params={'ema1_window': 21, 'ema2_window': 18}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=961, value=None),\n FrozenTrial(number=962, state=1, values=[10000.0], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 50, 349711), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 50, 474485), params={'ema1_window': 12, 'ema2_window': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=962, value=None),\n FrozenTrial(number=963, state=1, values=[10075.0], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 50, 475020), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 50, 493296), params={'ema1_window': 22, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=963, value=None),\n FrozenTrial(number=964, state=1, values=[10163.2], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 50, 493986), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 50, 511537), params={'ema1_window': 21, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=964, value=None),\n FrozenTrial(number=965, state=1, values=[10002.86], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 50, 512140), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 50, 529794), params={'ema1_window': 15, 'ema2_window': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=965, value=None),\n FrozenTrial(number=966, state=1, values=[10074.88], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 50, 530374), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 50, 548192), params={'ema1_window': 20, 'ema2_window': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=966, value=None),\n FrozenTrial(number=967, state=1, values=[10074.98], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 50, 548785), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 50, 566321), params={'ema1_window': 21, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=967, value=None),\n FrozenTrial(number=968, state=1, values=[10143.02], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 50, 566894), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 50, 584455), params={'ema1_window': 21, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=968, value=None),\n FrozenTrial(number=969, state=1, values=[10153.36], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 50, 585014), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 50, 609134), params={'ema1_window': 22, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=969, value=None),\n FrozenTrial(number=970, state=1, values=[10163.2], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 50, 610085), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 50, 629114), params={'ema1_window': 21, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=970, value=None),\n FrozenTrial(number=971, state=1, values=[10133.72], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 50, 629744), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 50, 648483), params={'ema1_window': 20, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=971, value=None),\n FrozenTrial(number=972, state=1, values=[9954.2], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 50, 649189), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 50, 667387), params={'ema1_window': 22, 'ema2_window': 21}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=972, value=None),\n FrozenTrial(number=973, state=1, values=[9984.06], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 50, 668073), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 50, 929204), params={'ema1_window': 13, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=973, value=None),\n FrozenTrial(number=974, state=1, values=[10120.88], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 50, 930190), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 50, 949608), params={'ema1_window': 20, 'ema2_window': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=974, value=None),\n FrozenTrial(number=975, state=1, values=[10001.7], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 50, 950248), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 50, 967903), params={'ema1_window': 21, 'ema2_window': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=975, value=None),\n FrozenTrial(number=976, state=1, values=[10143.02], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 50, 968478), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 50, 986194), params={'ema1_window': 21, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=976, value=None),\n FrozenTrial(number=977, state=1, values=[10074.98], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 50, 986784), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 51, 4482), params={'ema1_window': 21, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=977, value=None),\n FrozenTrial(number=978, state=1, values=[10064.92], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 51, 5098), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 51, 23197), params={'ema1_window': 22, 'ema2_window': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=978, value=None),\n FrozenTrial(number=979, state=1, values=[10142.82], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 51, 23812), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 51, 41461), params={'ema1_window': 20, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=979, value=None),\n FrozenTrial(number=980, state=1, values=[10143.02], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 51, 42029), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 51, 60904), params={'ema1_window': 21, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=980, value=None),\n FrozenTrial(number=981, state=1, values=[10014.94], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 51, 62005), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 51, 84752), params={'ema1_window': 25, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=981, value=None),\n FrozenTrial(number=982, state=1, values=[10120.88], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 51, 85454), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 51, 105337), params={'ema1_window': 20, 'ema2_window': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=982, value=None),\n FrozenTrial(number=983, state=1, values=[10085.04], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 51, 106103), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 51, 124985), params={'ema1_window': 22, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=983, value=None),\n FrozenTrial(number=984, state=1, values=[9874.74], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 51, 125450), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 51, 406003), params={'ema1_window': 5, 'ema2_window': 18}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=984, value=None),\n FrozenTrial(number=985, state=1, values=[10074.98], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 51, 406909), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 51, 426799), params={'ema1_window': 21, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=985, value=None),\n FrozenTrial(number=986, state=1, values=[10143.02], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 51, 427446), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 51, 446050), params={'ema1_window': 21, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=986, value=None),\n FrozenTrial(number=987, state=1, values=[10163.2], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 51, 446691), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 51, 464905), params={'ema1_window': 21, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=987, value=None),\n FrozenTrial(number=988, state=1, values=[10074.88], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 51, 465547), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 51, 483616), params={'ema1_window': 20, 'ema2_window': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=988, value=None),\n FrozenTrial(number=989, state=1, values=[9994.12], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 51, 484094), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 51, 703123), params={'ema1_window': 23, 'ema2_window': 43}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=989, value=None),\n FrozenTrial(number=990, state=1, values=[10142.84], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 51, 704147), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 51, 724164), params={'ema1_window': 22, 'ema2_window': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=990, value=None),\n FrozenTrial(number=991, state=1, values=[10091.24], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 51, 724829), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 51, 743401), params={'ema1_window': 21, 'ema2_window': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=991, value=None),\n FrozenTrial(number=992, state=1, values=[10163.2], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 51, 744029), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 51, 762234), params={'ema1_window': 21, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=992, value=None),\n FrozenTrial(number=993, state=1, values=[10085.04], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 51, 762834), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 51, 787486), params={'ema1_window': 22, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=993, value=None),\n FrozenTrial(number=994, state=1, values=[9890.02], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 51, 788502), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 52, 9933), params={'ema1_window': 21, 'ema2_window': 36}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=994, value=None),\n FrozenTrial(number=995, state=1, values=[10153.36], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 52, 10960), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 52, 30669), params={'ema1_window': 22, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=995, value=None),\n FrozenTrial(number=996, state=1, values=[10142.82], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 52, 31268), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 52, 49734), params={'ema1_window': 20, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=996, value=None),\n FrozenTrial(number=997, state=1, values=[10074.98], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 52, 50312), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 52, 68555), params={'ema1_window': 21, 'ema2_window': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=997, value=None),\n FrozenTrial(number=998, state=1, values=[10143.02], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 52, 69153), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 52, 87151), params={'ema1_window': 21, 'ema2_window': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=998, value=None),\n FrozenTrial(number=999, state=1, values=[10142.82], datetime_start=datetime.datetime(2024, 7, 2, 16, 44, 52, 87723), datetime_complete=datetime.datetime(2024, 7, 2, 16, 44, 52, 112579), params={'ema1_window': 20, 'ema2_window': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_window': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_window': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=999, value=None)]</pre> In\u00a0[10]: Copied! <pre>import pandas as pd\n\ndf = pd.DataFrame(columns=[\"ema1_window\", \"ema2_window\", \"score\"])\nfor trial in study.trials:\n    df.loc[trial.number] = [\n        trial.params[\"ema1_window\"],\n        trial.params[\"ema2_window\"],\n        trial.values[0],\n    ]\n\n\ndf\n</pre> import pandas as pd  df = pd.DataFrame(columns=[\"ema1_window\", \"ema2_window\", \"score\"]) for trial in study.trials:     df.loc[trial.number] = [         trial.params[\"ema1_window\"],         trial.params[\"ema2_window\"],         trial.values[0],     ]   df Out[10]: ema1_window ema2_window score 0 7.0 34.0 9945.98 1 14.0 44.0 9978.70 2 16.0 39.0 9961.20 3 16.0 11.0 10033.02 4 13.0 47.0 9998.88 ... ... ... ... 995 22.0 14.0 10153.36 996 20.0 15.0 10142.82 997 21.0 16.0 10074.98 998 21.0 14.0 10143.02 999 20.0 15.0 10142.82 <p>1000 rows \u00d7 3 columns</p> In\u00a0[11]: Copied! <pre>from plotly import express as px\n\nfig = px.scatter(df, x=df.index, y=\"score\")\nfig.show()\n</pre> from plotly import express as px  fig = px.scatter(df, x=df.index, y=\"score\") fig.show() In\u00a0[12]: Copied! <pre>import plotly.express as px\n\n\nfig = px.density_contour(\n    df,\n    x=\"ema1_window\",\n    y=\"ema2_window\",\n    z=\"score\",\n    histfunc=\"max\",\n)\nfig.update_traces(contours_coloring=\"fill\", contours_showlabels=True)\nfig.show()\n</pre> import plotly.express as px   fig = px.density_contour(     df,     x=\"ema1_window\",     y=\"ema2_window\",     z=\"score\",     histfunc=\"max\", ) fig.update_traces(contours_coloring=\"fill\", contours_showlabels=True) fig.show() In\u00a0[13]: Copied! <pre>import plotly.express as px\n\nfig = px.density_heatmap(\n    df,\n    x=\"ema1_window\",\n    y=\"ema2_window\",\n    z=\"score\",\n    nbinsx=20,\n    nbinsy=40,\n    histfunc=\"max\",\n    color_continuous_scale=\"Viridis\",\n)\nfig.show()\n</pre> import plotly.express as px  fig = px.density_heatmap(     df,     x=\"ema1_window\",     y=\"ema2_window\",     z=\"score\",     nbinsx=20,     nbinsy=40,     histfunc=\"max\",     color_continuous_scale=\"Viridis\", ) fig.show()"},{"location":"optimize/1.optuna/#optimize-with-optuna","title":"Optimize with Optuna\u00b6","text":"<p>Home | Document</p>"},{"location":"optimize/1.optuna/#installation","title":"Installation\u00b6","text":""},{"location":"optimize/1.optuna/#sample-strategy","title":"Sample Strategy\u00b6","text":""},{"location":"optimize/1.optuna/#optimize","title":"Optimize\u00b6","text":""},{"location":"optimize/1.optuna/#plot","title":"Plot\u00b6","text":""},{"location":"optimize/1.optuna/#plot-by-optuna","title":"Plot by Optuna\u00b6","text":"<p>API</p>"},{"location":"optimize/1.optuna/#plot-plotly","title":"Plot plotly\u00b6","text":"<p>Tutorial</p>"},{"location":"optimize/1.optuna/#init-plotly-environment","title":"Init Plotly environment\u00b6","text":""},{"location":"optimize/1.optuna/#type-1","title":"Type 1\u00b6","text":""},{"location":"optimize/1.optuna/#type-2","title":"Type 2\u00b6","text":""},{"location":"optimize/1.optuna/#type-3","title":"Type 3\u00b6","text":""},{"location":"optimize/2.hyperopt/","title":"Optimize with Hyperopt","text":"In\u00a0[\u00a0]: Copied! <pre>!pip install hyperopt\n</pre> !pip install hyperopt In\u00a0[1]: Copied! <pre># import talib.abstract as ta\n\nfrom lettrade import DataFeed, Strategy, indicator as i\nfrom lettrade.exchange.backtest import ForexBackTestAccount, let_backtest\nfrom lettrade.indicator.vendor.qtpylib import inject_indicators\n\ninject_indicators()\n\n\nclass SmaCross(Strategy):\n    ema1_window = 9\n    ema2_window = 21\n\n    def indicators(self, df: DataFeed):\n        # df[\"ema1\"] = ta.EMA(df, timeperiod=self.ema1_window)\n        # df[\"ema2\"] = ta.EMA(df, timeperiod=self.ema2_window)\n        df[\"ema1\"] = df.close.ema(window=self.ema1_window)\n        df[\"ema2\"] = df.close.ema(window=self.ema2_window)\n\n        df[\"signal_ema_crossover\"] = i.crossover(df.ema1, df.ema2)\n        df[\"signal_ema_crossunder\"] = i.crossunder(df.ema1, df.ema2)\n\n    def next(self, df: DataFeed):\n        if len(self.orders) &gt; 0 or len(self.positions) &gt; 0:\n            return\n\n        if df.l.signal_ema_crossover[-1]:\n            price = df.l.close[-1]\n            self.buy(size=0.1, sl=price - 0.001, tp=price + 0.001)\n        elif df.l.signal_ema_crossunder[-1]:\n            price = df.l.close[-1]\n            self.sell(size=0.1, sl=price + 0.001, tp=price - 0.001)\n\n\nlt = let_backtest(\n    strategy=SmaCross,\n    datas=\"example/data/data/EURUSD_5m-0_10000.csv\",\n    account=ForexBackTestAccount,\n    # plotter=None,\n)\n</pre> # import talib.abstract as ta  from lettrade import DataFeed, Strategy, indicator as i from lettrade.exchange.backtest import ForexBackTestAccount, let_backtest from lettrade.indicator.vendor.qtpylib import inject_indicators  inject_indicators()   class SmaCross(Strategy):     ema1_window = 9     ema2_window = 21      def indicators(self, df: DataFeed):         # df[\"ema1\"] = ta.EMA(df, timeperiod=self.ema1_window)         # df[\"ema2\"] = ta.EMA(df, timeperiod=self.ema2_window)         df[\"ema1\"] = df.close.ema(window=self.ema1_window)         df[\"ema2\"] = df.close.ema(window=self.ema2_window)          df[\"signal_ema_crossover\"] = i.crossover(df.ema1, df.ema2)         df[\"signal_ema_crossunder\"] = i.crossunder(df.ema1, df.ema2)      def next(self, df: DataFeed):         if len(self.orders) &gt; 0 or len(self.positions) &gt; 0:             return          if df.l.signal_ema_crossover[-1]:             price = df.l.close[-1]             self.buy(size=0.1, sl=price - 0.001, tp=price + 0.001)         elif df.l.signal_ema_crossunder[-1]:             price = df.l.close[-1]             self.sell(size=0.1, sl=price + 0.001, tp=price - 0.001)   lt = let_backtest(     strategy=SmaCross,     datas=\"example/data/data/EURUSD_5m-0_10000.csv\",     account=ForexBackTestAccount,     # plotter=None, ) In\u00a0[2]: Copied! <pre># define a search space\nfrom hyperopt import fmin, tpe, space_eval, Trials\nfrom hyperopt import hp\n\n\nlettrade_model = lt.optimize_model()\n\n\ndef train_model(params):\n    # Model\n    result = lettrade_model(params)\n\n    # Score\n    return -result[\"equity\"]\n\n\n# Hyperopt\nsearch_space = {\n    \"ema1_window\": hp.uniformint(\"ema1_window\", 5, 25, q=1),\n    \"ema2_window\": hp.uniformint(\"ema2_window\", 5, 50, q=1),\n}\n\ntrials = Trials()\nbest_params = fmin(\n    train_model,\n    search_space,\n    algo=tpe.suggest,\n    max_evals=1_000,\n    trials=trials,\n)\n</pre> # define a search space from hyperopt import fmin, tpe, space_eval, Trials from hyperopt import hp   lettrade_model = lt.optimize_model()   def train_model(params):     # Model     result = lettrade_model(params)      # Score     return -result[\"equity\"]   # Hyperopt search_space = {     \"ema1_window\": hp.uniformint(\"ema1_window\", 5, 25, q=1),     \"ema2_window\": hp.uniformint(\"ema2_window\", 5, 50, q=1), }  trials = Trials() best_params = fmin(     train_model,     search_space,     algo=tpe.suggest,     max_evals=1_000,     trials=trials, ) <pre>100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1000/1000 [01:17&lt;00:00, 12.97trial/s, best loss: -10187.82]\n</pre> In\u00a0[3]: Copied! <pre>hyperparams = space_eval(search_space, best_params)\n\nprint(best_params)\nprint(hyperparams)\n</pre> hyperparams = space_eval(search_space, best_params)  print(best_params) print(hyperparams) <pre>{'ema1_window': 17.0, 'ema2_window': 8.0}\n{'ema1_window': 17, 'ema2_window': 8}\n</pre> In\u00a0[4]: Copied! <pre>lt.plotter.heatmap(x=\"ema1_window\", y=\"ema2_window\", z=\"equity\")\n</pre> lt.plotter.heatmap(x=\"ema1_window\", y=\"ema2_window\", z=\"equity\") In\u00a0[5]: Copied! <pre>lt.plotter.contour(x=\"ema1_window\", y=\"ema2_window\", z=\"equity\")\n</pre> lt.plotter.contour(x=\"ema1_window\", y=\"ema2_window\", z=\"equity\") In\u00a0[6]: Copied! <pre>import plotly.io as pio\n\npio.renderers.default = \"notebook\"\npio.templates.default = \"plotly_dark\"\n</pre> import plotly.io as pio  pio.renderers.default = \"notebook\" pio.templates.default = \"plotly_dark\" In\u00a0[7]: Copied! <pre>import pandas as pd\nimport numpy as np\n\n\ndef unpack(x):\n    if x:\n        return x[0]\n    return np.nan\n\n\n# We'll first turn each trial into a series and then stack those series together as a dataframe.\ndf = pd.DataFrame([pd.Series(t[\"misc\"][\"vals\"]).apply(unpack) for t in trials])\n# Then we'll add other relevant bits of information to the correct rows and perform a couple of\n# mappings for convenience\ndf[\"loss\"] = [t[\"result\"][\"loss\"] for t in trials]\ndf[\"trial_number\"] = df.index\n\n\ndf[\"win\"] = -df[\"loss\"]\ndf\n</pre> import pandas as pd import numpy as np   def unpack(x):     if x:         return x[0]     return np.nan   # We'll first turn each trial into a series and then stack those series together as a dataframe. df = pd.DataFrame([pd.Series(t[\"misc\"][\"vals\"]).apply(unpack) for t in trials]) # Then we'll add other relevant bits of information to the correct rows and perform a couple of # mappings for convenience df[\"loss\"] = [t[\"result\"][\"loss\"] for t in trials] df[\"trial_number\"] = df.index   df[\"win\"] = -df[\"loss\"] df Out[7]: ema1_window ema2_window loss trial_number win 0 19.0 10.0 -10000.68 0 10000.68 1 10.0 7.0 -10062.72 1 10062.72 2 18.0 40.0 -9899.16 2 9899.16 3 9.0 8.0 -10052.78 3 10052.78 4 12.0 27.0 -9954.98 4 9954.98 ... ... ... ... ... ... 995 15.0 15.0 -10000.00 995 10000.00 996 16.0 5.0 -10029.46 996 10029.46 997 18.0 13.0 -10020.16 997 10020.16 998 20.0 9.0 -9970.36 998 9970.36 999 13.0 8.0 -10140.46 999 10140.46 <p>1000 rows \u00d7 5 columns</p> In\u00a0[8]: Copied! <pre>from plotly import express as px\n\nfig = px.scatter(df, x=\"trial_number\", y=\"win\")\nfig.show()\n</pre> from plotly import express as px  fig = px.scatter(df, x=\"trial_number\", y=\"win\") fig.show() In\u00a0[9]: Copied! <pre>import plotly.express as px\n\n\nfig = px.density_contour(\n    df,\n    x=\"ema1_window\",\n    y=\"ema2_window\",\n    z=\"win\",\n    histfunc=\"max\",\n)\nfig.update_traces(contours_coloring=\"fill\", contours_showlabels=True)\nfig.show()\n</pre> import plotly.express as px   fig = px.density_contour(     df,     x=\"ema1_window\",     y=\"ema2_window\",     z=\"win\",     histfunc=\"max\", ) fig.update_traces(contours_coloring=\"fill\", contours_showlabels=True) fig.show() In\u00a0[10]: Copied! <pre>import plotly.express as px\n\nfig = px.density_heatmap(\n    df,\n    x=\"ema1_window\",\n    y=\"ema2_window\",\n    z=\"win\",\n    nbinsx=20,\n    nbinsy=40,\n    histfunc=\"max\",\n    color_continuous_scale=\"Viridis\",\n)\nfig.show()\n</pre> import plotly.express as px  fig = px.density_heatmap(     df,     x=\"ema1_window\",     y=\"ema2_window\",     z=\"win\",     nbinsx=20,     nbinsy=40,     histfunc=\"max\",     color_continuous_scale=\"Viridis\", ) fig.show()"},{"location":"optimize/2.hyperopt/#optimize-with-hyperopt","title":"Optimize with Hyperopt\u00b6","text":"<p>Home | Document</p>"},{"location":"optimize/2.hyperopt/#installation","title":"Installation\u00b6","text":""},{"location":"optimize/2.hyperopt/#sample-strategy","title":"Sample Strategy\u00b6","text":""},{"location":"optimize/2.hyperopt/#optimize","title":"Optimize\u00b6","text":""},{"location":"optimize/2.hyperopt/#plot","title":"Plot\u00b6","text":""},{"location":"optimize/2.hyperopt/#plot-plotly","title":"Plot plotly\u00b6","text":"<p>Tutorial</p>"},{"location":"optimize/2.hyperopt/#init-plotly-environment","title":"Init Plotly environment\u00b6","text":""},{"location":"optimize/2.hyperopt/#type-1","title":"Type 1\u00b6","text":""},{"location":"optimize/2.hyperopt/#type-2","title":"Type 2\u00b6","text":""},{"location":"optimize/2.hyperopt/#type-3","title":"Type 3\u00b6","text":""},{"location":"optimize/3.ray/","title":"Optimize with RAY","text":"In\u00a0[\u00a0]: Copied! <pre>!pip install \"ray[tune,client]\"\n!pip install optuna\n</pre> !pip install \"ray[tune,client]\" !pip install optuna In\u00a0[1]: Copied! <pre>import talib.abstract as ta\n\nfrom lettrade import DataFeed, Strategy, indicator as i\nfrom lettrade.exchange.backtest import ForexBackTestAccount, let_backtest\n\n# from lettrade.indicator.vendor.qtpylib import inject_indicators\n\n# inject_indicators()\n\n\nclass SmaCross(Strategy):\n    ema1_window = 9\n    ema2_window = 21\n\n    def indicators(self, df: DataFeed):\n        df[\"ema1\"] = ta.EMA(df, timeperiod=self.ema1_window)\n        df[\"ema2\"] = ta.EMA(df, timeperiod=self.ema2_window)\n        # df[\"ema1\"] = df.close.ema(window=self.ema1_window)\n        # df[\"ema2\"] = df.close.ema(window=self.ema2_window)\n\n        df[\"signal_ema_crossover\"] = i.crossover(df.ema1, df.ema2)\n        df[\"signal_ema_crossunder\"] = i.crossunder(df.ema1, df.ema2)\n\n    def next(self, df: DataFeed):\n        if len(self.orders) &gt; 0 or len(self.positions) &gt; 0:\n            return\n\n        if df.l.signal_ema_crossover[-1]:\n            price = df.l.close[-1]\n            self.buy(size=0.1, sl=price - 0.001, tp=price + 0.001)\n        elif df.l.signal_ema_crossunder[-1]:\n            price = df.l.close[-1]\n            self.sell(size=0.1, sl=price + 0.001, tp=price - 0.001)\n\n\nlt = let_backtest(\n    strategy=SmaCross,\n    datas=\"example/data/data/EURUSD_5m-0_10000.csv\",\n    account=ForexBackTestAccount,\n    # plotter=None,\n)\n</pre> import talib.abstract as ta  from lettrade import DataFeed, Strategy, indicator as i from lettrade.exchange.backtest import ForexBackTestAccount, let_backtest  # from lettrade.indicator.vendor.qtpylib import inject_indicators  # inject_indicators()   class SmaCross(Strategy):     ema1_window = 9     ema2_window = 21      def indicators(self, df: DataFeed):         df[\"ema1\"] = ta.EMA(df, timeperiod=self.ema1_window)         df[\"ema2\"] = ta.EMA(df, timeperiod=self.ema2_window)         # df[\"ema1\"] = df.close.ema(window=self.ema1_window)         # df[\"ema2\"] = df.close.ema(window=self.ema2_window)          df[\"signal_ema_crossover\"] = i.crossover(df.ema1, df.ema2)         df[\"signal_ema_crossunder\"] = i.crossunder(df.ema1, df.ema2)      def next(self, df: DataFeed):         if len(self.orders) &gt; 0 or len(self.positions) &gt; 0:             return          if df.l.signal_ema_crossover[-1]:             price = df.l.close[-1]             self.buy(size=0.1, sl=price - 0.001, tp=price + 0.001)         elif df.l.signal_ema_crossunder[-1]:             price = df.l.close[-1]             self.sell(size=0.1, sl=price + 0.001, tp=price - 0.001)   lt = let_backtest(     strategy=SmaCross,     datas=\"example/data/data/EURUSD_5m-0_10000.csv\",     account=ForexBackTestAccount,     # plotter=None, ) In\u00a0[2]: Copied! <pre>from ray import tune, train\nfrom ray.tune.search.optuna import OptunaSearch\nfrom lettrade.exchange.backtest.extra.ray import LetOptimizeRay\nimport logging\n\nlogging.getLogger(\"ray.tune.tune\").setLevel(logging.WARNING)\n\nletray = LetOptimizeRay()\nlettrade_model = lt.optimize_model(dumper=letray.dumps)\n\n\ndef train_model(config, data):\n    params = {\n        \"ema1_window\": config[\"ema1_window\"],\n        \"ema2_window\": config[\"ema2_window\"],\n    }\n\n    # Model\n    result = lettrade_model(params, optimizer_kwargs=data)\n\n    # Score\n    return {\"score\": result[\"equity\"]}\n\n\nsearch_space = {\n    \"ema1_window\": tune.qrandint(5, 25, q=1),\n    \"ema2_window\": tune.qrandint(10, 50, q=1),\n}\n\nalgo = OptunaSearch()\n# algo = tune.search.ConcurrencyLimiter(algo, max_concurrent=4)\n\ntuner = tune.Tuner(\n    tune.with_parameters(train_model, data=letray.data),\n    tune_config=tune.TuneConfig(\n        metric=\"score\",\n        mode=\"max\",\n        search_alg=algo,\n        num_samples=100,\n    ),\n    # run_config=train.RunConfig(verbose=0),\n    param_space=search_space,\n)\nresults = tuner.fit()\n\nlt.optimize_done()\n</pre> from ray import tune, train from ray.tune.search.optuna import OptunaSearch from lettrade.exchange.backtest.extra.ray import LetOptimizeRay import logging  logging.getLogger(\"ray.tune.tune\").setLevel(logging.WARNING)  letray = LetOptimizeRay() lettrade_model = lt.optimize_model(dumper=letray.dumps)   def train_model(config, data):     params = {         \"ema1_window\": config[\"ema1_window\"],         \"ema2_window\": config[\"ema2_window\"],     }      # Model     result = lettrade_model(params, optimizer_kwargs=data)      # Score     return {\"score\": result[\"equity\"]}   search_space = {     \"ema1_window\": tune.qrandint(5, 25, q=1),     \"ema2_window\": tune.qrandint(10, 50, q=1), }  algo = OptunaSearch() # algo = tune.search.ConcurrencyLimiter(algo, max_concurrent=4)  tuner = tune.Tuner(     tune.with_parameters(train_model, data=letray.data),     tune_config=tune.TuneConfig(         metric=\"score\",         mode=\"max\",         search_alg=algo,         num_samples=100,     ),     # run_config=train.RunConfig(verbose=0),     param_space=search_space, ) results = tuner.fit()  lt.optimize_done() Tune Status Current time:2024-07-02 16:48:55 Running for: 00:01:25.86         Memory:      14.0/62.7 GiB       System Info       Using FIFO scheduling algorithm.Logical resource usage: 1.0/32 CPUs, 0/1 GPUs (0.0/1.0 accelerator_type:G)      Trial Status Trial name          status    loc                 ema1_window  ema2_window  iter  total time (s)   score train_model_55743415TERMINATED192.168.1.84:79825           11           24     1        0.637616 9826.06 train_model_4c51f7e1TERMINATED192.168.1.84:79961           12           34     1        0.448534 9906.02 train_model_643f1ae7TERMINATED192.168.1.84:80036           18           29     1        0.440765 9916.62 train_model_79c1bb7fTERMINATED192.168.1.84:80104            8           50     1        0.434781 9941.58 train_model_9fe0bd0dTERMINATED192.168.1.84:80174           24           37     1        0.424471 9927.86 train_model_58b3f40fTERMINATED192.168.1.84:80244           13           47     1        0.443487 9998.88 train_model_7ea648dfTERMINATED192.168.1.84:80345           11           13     1        0.510855 9829.46 train_model_5660b7e7TERMINATED192.168.1.84:80415            9           22     1        0.467541 9986.2  train_model_4286e034TERMINATED192.168.1.84:80483           17           12     1        0.48831510000.5  train_model_e16bc466TERMINATED192.168.1.84:80550           21           46     1        0.416199 9964.46 train_model_0c5db4a5TERMINATED192.168.1.84:80617           16           15     1        0.49298510049.8  train_model_3a53678dTERMINATED192.168.1.84:80686            5           10     1        0.532405 9893.26 train_model_31416d2bTERMINATED192.168.1.84:80760           16           10     1        0.51757 10134.1  train_model_29259c76TERMINATED192.168.1.84:80827           16           17     1        0.467902 9807.88 train_model_6fac2189TERMINATED192.168.1.84:80894           16           18     1        0.466099 9806.22 train_model_d2972224TERMINATED192.168.1.84:80961           20           18     1        0.45332210074.9  train_model_6289ad36TERMINATED192.168.1.84:81028           20           18     1        0.18454810074.9  train_model_0e3e9129TERMINATED192.168.1.84:81096           20           24     1        0.443469 9975.92 train_model_d04890cfTERMINATED192.168.1.84:81166           25           25     1        0.34289810000    train_model_7dc71744TERMINATED192.168.1.84:81238           25           29     1        0.428242 9879.18 train_model_6a188b37TERMINATED192.168.1.84:81306           22           10     1        0.46727110030.5  train_model_7a1a961eTERMINATED192.168.1.84:81373           22           20     1        0.459388 9924.48 train_model_acfe6c01TERMINATED192.168.1.84:81439           19           19     1        0.31374 10000    train_model_99e14f2bTERMINATED192.168.1.84:81506           19           15     1        0.46892810162.7  train_model_d5a10ee2TERMINATED192.168.1.84:81579           14           15     1        0.495306 9986.24 train_model_9cf15d0cTERMINATED192.168.1.84:81649           14           15     1        0.181672 9986.24 train_model_26302de9TERMINATED192.168.1.84:81716           18           14     1        0.46426110110.8  train_model_51b2cb9aTERMINATED192.168.1.84:81782           18           10     1        0.46263110042.6  train_model_d578e3a0TERMINATED192.168.1.84:81848           18           12     1        0.47511710001.6  train_model_1b7fd95bTERMINATED192.168.1.84:81914           23           13     1        0.45864110163.5  train_model_da8f0737TERMINATED192.168.1.84:81984           15           22     1        0.458092 9894.4  train_model_e483dcddTERMINATED192.168.1.84:82053           23           26     1        0.460874 9936.64 train_model_8d9aac2dTERMINATED192.168.1.84:82120           23           14     1        0.46056 10095.3  train_model_2dff0490TERMINATED192.168.1.84:82186           22           13     1        0.45504910142.8  train_model_39f0a065TERMINATED192.168.1.84:82256           17           34     1        0.449305 9936.44 train_model_e3321428TERMINATED192.168.1.84:82322           22           12     1        0.48271310162.5  train_model_433af6ccTERMINATED192.168.1.84:82408           21           21     1        0.32103810000    train_model_93f5670bTERMINATED192.168.1.84:82474           23           21     1        0.469419 9994.12 train_model_f93b93e6TERMINATED192.168.1.84:82541           24           16     1        0.44787210015    train_model_2fc63866TERMINATED192.168.1.84:82610           24           41     1        0.415852 9994.72 train_model_678a9370TERMINATED192.168.1.84:82677           22           33     1        0.431021 9870.52 train_model_b78df0b4TERMINATED192.168.1.84:82743           22           33     1        0.191001 9870.52 train_model_d6adc81fTERMINATED192.168.1.84:82814           21           12     1        0.45418 10091.2  train_model_aa60956dTERMINATED192.168.1.84:82895           19           12     1        0.47154910000.1  train_model_b4339ad6TERMINATED192.168.1.84:82980           19           12     1        0.18448110000.1  train_model_6a7920d0TERMINATED192.168.1.84:83049           12           10     1        0.48544210131.9  train_model_21f78e6cTERMINATED192.168.1.84:83115           11           10     1        0.50005710170.2  train_model_7937dc11TERMINATED192.168.1.84:83185           21           16     1        0.45416510075    train_model_41233166TERMINATED192.168.1.84:83252           10           16     1        0.521218 9852.9  train_model_867dad6cTERMINATED192.168.1.84:83342            6           13     1        0.500573 9966.14 train_model_cbae05c1TERMINATED192.168.1.84:83409            8           13     1        0.511827 9824.86 train_model_6e71478bTERMINATED192.168.1.84:83479            7           38     1        0.441959 9876    train_model_be758d20TERMINATED192.168.1.84:83546           12           10     1        0.18404510131.9  train_model_fd51b354TERMINATED192.168.1.84:83614           13           11     1        0.48470410156.7  train_model_fbbdf067TERMINATED192.168.1.84:83681           17           11     1        0.47128910052.5  train_model_74094543TERMINATED192.168.1.84:83747           10           17     1        0.471173 9913.02 train_model_81d62ed4TERMINATED192.168.1.84:83816           11           14     1        0.476621 9822.72 train_model_6cb6abfdTERMINATED192.168.1.84:83886           13           14     1        0.473898 9933.94 train_model_789b4b58TERMINATED192.168.1.84:83953           13           19     1        0.462258 9857.54 train_model_6540cab7TERMINATED192.168.1.84:84022           25           19     1        0.472173 9974.12 train_model_91a343edTERMINATED192.168.1.84:84089           10           11     1        0.493807 9795.02 train_model_55a7bdd3TERMINATED192.168.1.84:84155           20           11     1        0.493866 9961.8  train_model_f7bfd256TERMINATED192.168.1.84:84222           15           11     1        0.47273910074.1  train_model_cb0c2e52TERMINATED192.168.1.84:84289           14           13     1        0.48331710052.7  train_model_4f727d0dTERMINATED192.168.1.84:84355           23           14     1        0.18043910095.3  train_model_96f3c396TERMINATED192.168.1.84:84422           23           17     1        0.50942510015.2  train_model_e9a57ca8TERMINATED192.168.1.84:84492           16           17     1        0.183345 9807.88 train_model_a06fe6a9TERMINATED192.168.1.84:84559           16           15     1        0.17935710049.8  train_model_2ef37cd2TERMINATED192.168.1.84:84626           12           49     1        0.443771 9989.02 train_model_97af22b6TERMINATED192.168.1.84:84695           21           49     1        0.42180310022.3  train_model_1cdc6b7cTERMINATED192.168.1.84:84762           24           10     1        0.49239310112.5  train_model_4e751e1aTERMINATED192.168.1.84:84831           13           27     1        0.457857 9934.96 train_model_2f81a7afTERMINATED192.168.1.84:84900           11           10     1        0.17998410170.2  train_model_f740bcc8TERMINATED192.168.1.84:84969           11           10     1        0.17701110170.2  train_model_7e0b27b8TERMINATED192.168.1.84:85036           11           12     1        0.478946 9819.04 train_model_05bfbb43TERMINATED192.168.1.84:85103            9           12     1        0.483698 9824.98 train_model_377b1237TERMINATED192.168.1.84:85169            9           13     1        0.479618 9833.88 train_model_2ddba0adTERMINATED192.168.1.84:85236            9           13     1        0.193368 9833.88 train_model_8b5688ceTERMINATED192.168.1.84:85307           11           15     1        0.483146 9913.08 train_model_8662ed62TERMINATED192.168.1.84:85374           11           15     1        0.180817 9913.08 train_model_229edeecTERMINATED192.168.1.84:85440           10           11     1        0.181036 9795.02 train_model_3fd1231bTERMINATED192.168.1.84:85507           12           11     1        0.49728810146.8  train_model_d7cb19dfTERMINATED192.168.1.84:85575           12           10     1        0.17881410131.9  train_model_26381ca4TERMINATED192.168.1.84:85657           12           10     1        0.18574510131.9  train_model_cb0ed8d3TERMINATED192.168.1.84:85726           13           11     1        0.18615610156.7  train_model_3782bd9cTERMINATED192.168.1.84:85793           13           12     1        0.48054310143.6  train_model_b245379fTERMINATED192.168.1.84:85864           14           11     1        0.48856610163.7  train_model_cffd7a8fTERMINATED192.168.1.84:85930           15           14     1        0.48335410000.8  train_model_41299cffTERMINATED192.168.1.84:86002           14           43     1        0.421424 9961.9  train_model_b186e904TERMINATED192.168.1.84:86070           13           11     1        0.18095210156.7  train_model_e241eb6aTERMINATED192.168.1.84:86136           14           11     1        0.18462810163.7  train_model_83419dd1TERMINATED192.168.1.84:86206           14           13     1        0.17424110052.7  train_model_598aa0e6TERMINATED192.168.1.84:86279           14           12     1        0.47724310053.9  train_model_173cf259TERMINATED192.168.1.84:86346           14           12     1        0.17935410053.9  train_model_019501daTERMINATED192.168.1.84:86419           15           10     1        0.47493610113.7  train_model_b2f55edeTERMINATED192.168.1.84:86486           15           10     1        0.18031510113.7  train_model_b99278b0TERMINATED192.168.1.84:86552           15           16     1        0.480505 9938    train_model_22470f5eTERMINATED192.168.1.84:86623           13           16     1        0.463556 9986.14 train_model_57561380TERMINATED192.168.1.84:86689           13           14     1        0.187564 9933.94 train_model_15ad88b7TERMINATED192.168.1.84:86757           11           14     1        0.172573 9822.72 In\u00a0[3]: Copied! <pre>lt.plotter.heatmap(x=\"ema1_window\", y=\"ema2_window\", z=\"equity\")\n</pre> lt.plotter.heatmap(x=\"ema1_window\", y=\"ema2_window\", z=\"equity\") In\u00a0[4]: Copied! <pre>lt.plotter.contour(x=\"ema1_window\", y=\"ema2_window\", z=\"equity\")\n</pre> lt.plotter.contour(x=\"ema1_window\", y=\"ema2_window\", z=\"equity\") In\u00a0[5]: Copied! <pre>import plotly.io as pio\n\npio.renderers.default = \"notebook\"\npio.templates.default = \"plotly_dark\"\n</pre> import plotly.io as pio  pio.renderers.default = \"notebook\" pio.templates.default = \"plotly_dark\" In\u00a0[6]: Copied! <pre>df = results.get_dataframe()\ndf\n</pre> df = results.get_dataframe() df Out[6]: score timestamp checkpoint_dir_name done training_iteration trial_id date time_this_iter_s time_total_s pid hostname node_ip time_since_restore iterations_since_restore config/ema1_window config/ema2_window logdir 0 9826.06 1719913651 None False 1 55743415 2024-07-02_16-47-31 0.637616 0.637616 79825 pc 192.168.1.84 0.637616 1 11 24 55743415 1 9906.02 1719913652 None False 1 4c51f7e1 2024-07-02_16-47-32 0.448534 0.448534 79961 pc 192.168.1.84 0.448534 1 12 34 4c51f7e1 2 9916.62 1719913653 None False 1 643f1ae7 2024-07-02_16-47-33 0.440765 0.440765 80036 pc 192.168.1.84 0.440765 1 18 29 643f1ae7 3 9941.58 1719913653 None False 1 79c1bb7f 2024-07-02_16-47-33 0.434781 0.434781 80104 pc 192.168.1.84 0.434781 1 8 50 79c1bb7f 4 9927.86 1719913654 None False 1 9fe0bd0d 2024-07-02_16-47-34 0.424471 0.424471 80174 pc 192.168.1.84 0.424471 1 24 37 9fe0bd0d ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... 95 10113.68 1719913732 None False 1 b2f55ede 2024-07-02_16-48-52 0.180315 0.180315 86486 pc 192.168.1.84 0.180315 1 15 10 b2f55ede 96 9938.00 1719913733 None False 1 b99278b0 2024-07-02_16-48-53 0.480505 0.480505 86552 pc 192.168.1.84 0.480505 1 15 16 b99278b0 97 9986.14 1719913734 None False 1 22470f5e 2024-07-02_16-48-54 0.463556 0.463556 86623 pc 192.168.1.84 0.463556 1 13 16 22470f5e 98 9933.94 1719913735 None False 1 57561380 2024-07-02_16-48-55 0.187564 0.187564 86689 pc 192.168.1.84 0.187564 1 13 14 57561380 99 9822.72 1719913735 None False 1 15ad88b7 2024-07-02_16-48-55 0.172573 0.172573 86757 pc 192.168.1.84 0.172573 1 11 14 15ad88b7 <p>100 rows \u00d7 17 columns</p> In\u00a0[7]: Copied! <pre>import pandas as pd\n\ndf.rename(\n    columns={\n        \"config/ema1_window\": \"ema1_window\",\n        \"config/ema2_window\": \"ema2_window\",\n    },\n    inplace=True,\n)\ndf\n</pre> import pandas as pd  df.rename(     columns={         \"config/ema1_window\": \"ema1_window\",         \"config/ema2_window\": \"ema2_window\",     },     inplace=True, ) df Out[7]: score timestamp checkpoint_dir_name done training_iteration trial_id date time_this_iter_s time_total_s pid hostname node_ip time_since_restore iterations_since_restore ema1_window ema2_window logdir 0 9826.06 1719913651 None False 1 55743415 2024-07-02_16-47-31 0.637616 0.637616 79825 pc 192.168.1.84 0.637616 1 11 24 55743415 1 9906.02 1719913652 None False 1 4c51f7e1 2024-07-02_16-47-32 0.448534 0.448534 79961 pc 192.168.1.84 0.448534 1 12 34 4c51f7e1 2 9916.62 1719913653 None False 1 643f1ae7 2024-07-02_16-47-33 0.440765 0.440765 80036 pc 192.168.1.84 0.440765 1 18 29 643f1ae7 3 9941.58 1719913653 None False 1 79c1bb7f 2024-07-02_16-47-33 0.434781 0.434781 80104 pc 192.168.1.84 0.434781 1 8 50 79c1bb7f 4 9927.86 1719913654 None False 1 9fe0bd0d 2024-07-02_16-47-34 0.424471 0.424471 80174 pc 192.168.1.84 0.424471 1 24 37 9fe0bd0d ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... 95 10113.68 1719913732 None False 1 b2f55ede 2024-07-02_16-48-52 0.180315 0.180315 86486 pc 192.168.1.84 0.180315 1 15 10 b2f55ede 96 9938.00 1719913733 None False 1 b99278b0 2024-07-02_16-48-53 0.480505 0.480505 86552 pc 192.168.1.84 0.480505 1 15 16 b99278b0 97 9986.14 1719913734 None False 1 22470f5e 2024-07-02_16-48-54 0.463556 0.463556 86623 pc 192.168.1.84 0.463556 1 13 16 22470f5e 98 9933.94 1719913735 None False 1 57561380 2024-07-02_16-48-55 0.187564 0.187564 86689 pc 192.168.1.84 0.187564 1 13 14 57561380 99 9822.72 1719913735 None False 1 15ad88b7 2024-07-02_16-48-55 0.172573 0.172573 86757 pc 192.168.1.84 0.172573 1 11 14 15ad88b7 <p>100 rows \u00d7 17 columns</p> In\u00a0[8]: Copied! <pre>from plotly import express as px\n\nfig = px.scatter(df, x=df.index, y=\"score\")\nfig.show()\n</pre> from plotly import express as px  fig = px.scatter(df, x=df.index, y=\"score\") fig.show() In\u00a0[9]: Copied! <pre>import plotly.express as px\n\n\nfig = px.density_contour(\n    df,\n    x=\"ema1_window\",\n    y=\"ema2_window\",\n    z=\"score\",\n    histfunc=\"max\",\n)\nfig.update_traces(contours_coloring=\"fill\", contours_showlabels=True)\nfig.show()\n</pre> import plotly.express as px   fig = px.density_contour(     df,     x=\"ema1_window\",     y=\"ema2_window\",     z=\"score\",     histfunc=\"max\", ) fig.update_traces(contours_coloring=\"fill\", contours_showlabels=True) fig.show() In\u00a0[10]: Copied! <pre>import plotly.express as px\n\nfig = px.density_heatmap(\n    df,\n    x=\"ema1_window\",\n    y=\"ema2_window\",\n    z=\"score\",\n    nbinsx=20,\n    nbinsy=40,\n    histfunc=\"max\",\n    color_continuous_scale=\"Viridis\",\n)\nfig.show()\n</pre> import plotly.express as px  fig = px.density_heatmap(     df,     x=\"ema1_window\",     y=\"ema2_window\",     z=\"score\",     nbinsx=20,     nbinsy=40,     histfunc=\"max\",     color_continuous_scale=\"Viridis\", ) fig.show()"},{"location":"optimize/3.ray/#optimize-with-ray","title":"Optimize with RAY\u00b6","text":"<p>Home | Document | Github</p>"},{"location":"optimize/3.ray/#installation","title":"Installation\u00b6","text":"<p>At time of this tutorial, RAY support python &lt;= 3.11, read more at Installation</p>"},{"location":"optimize/3.ray/#sample-strategy","title":"Sample Strategy\u00b6","text":""},{"location":"optimize/3.ray/#optimize","title":"Optimize\u00b6","text":""},{"location":"optimize/3.ray/#plot","title":"Plot\u00b6","text":""},{"location":"optimize/3.ray/#plot-plotly","title":"Plot plotly\u00b6","text":"<p>Tutorial</p>"},{"location":"optimize/3.ray/#init-plotly-environment","title":"Init Plotly environment\u00b6","text":""},{"location":"optimize/3.ray/#type-1","title":"Type 1\u00b6","text":""},{"location":"optimize/3.ray/#type-2","title":"Type 2\u00b6","text":""},{"location":"optimize/3.ray/#type-3","title":"Type 3\u00b6","text":""},{"location":"optimize/7.bayesopt/","title":"Optimize with BayesOpt","text":"In\u00a0[\u00a0]: Copied! <pre>!pip install bayesian-optimization\n</pre> !pip install bayesian-optimization In\u00a0[1]: Copied! <pre># import talib.abstract as ta\n\nfrom lettrade import DataFeed, Strategy, indicator as i\nfrom lettrade.exchange.backtest import ForexBackTestAccount, let_backtest\nfrom lettrade.indicator.vendor.qtpylib import inject_indicators\n\ninject_indicators()\n\n\nclass SmaCross(Strategy):\n    ema1_window = 9\n    ema2_window = 21\n\n    def indicators(self, df: DataFeed):\n        # df[\"ema1\"] = ta.EMA(df, timeperiod=self.ema1_window)\n        # df[\"ema2\"] = ta.EMA(df, timeperiod=self.ema2_window)\n        df[\"ema1\"] = df.close.ema(window=self.ema1_window)\n        df[\"ema2\"] = df.close.ema(window=self.ema2_window)\n\n        df[\"signal_ema_crossover\"] = i.crossover(df.ema1, df.ema2)\n        df[\"signal_ema_crossunder\"] = i.crossunder(df.ema1, df.ema2)\n\n    def next(self, df: DataFeed):\n        if len(self.orders) &gt; 0 or len(self.positions) &gt; 0:\n            return\n\n        if df.l.signal_ema_crossover[-1]:\n            price = df.l.close[-1]\n            self.buy(size=0.1, sl=price - 0.001, tp=price + 0.001)\n        elif df.l.signal_ema_crossunder[-1]:\n            price = df.l.close[-1]\n            self.sell(size=0.1, sl=price + 0.001, tp=price - 0.001)\n\n\nlt = let_backtest(\n    strategy=SmaCross,\n    datas=\"example/data/data/EURUSD_5m-0_10000.csv\",\n    account=ForexBackTestAccount,\n    # plotter=None,\n)\n</pre> # import talib.abstract as ta  from lettrade import DataFeed, Strategy, indicator as i from lettrade.exchange.backtest import ForexBackTestAccount, let_backtest from lettrade.indicator.vendor.qtpylib import inject_indicators  inject_indicators()   class SmaCross(Strategy):     ema1_window = 9     ema2_window = 21      def indicators(self, df: DataFeed):         # df[\"ema1\"] = ta.EMA(df, timeperiod=self.ema1_window)         # df[\"ema2\"] = ta.EMA(df, timeperiod=self.ema2_window)         df[\"ema1\"] = df.close.ema(window=self.ema1_window)         df[\"ema2\"] = df.close.ema(window=self.ema2_window)          df[\"signal_ema_crossover\"] = i.crossover(df.ema1, df.ema2)         df[\"signal_ema_crossunder\"] = i.crossunder(df.ema1, df.ema2)      def next(self, df: DataFeed):         if len(self.orders) &gt; 0 or len(self.positions) &gt; 0:             return          if df.l.signal_ema_crossover[-1]:             price = df.l.close[-1]             self.buy(size=0.1, sl=price - 0.001, tp=price + 0.001)         elif df.l.signal_ema_crossunder[-1]:             price = df.l.close[-1]             self.sell(size=0.1, sl=price + 0.001, tp=price - 0.001)   lt = let_backtest(     strategy=SmaCross,     datas=\"example/data/data/EURUSD_5m-0_10000.csv\",     account=ForexBackTestAccount,     # plotter=None, ) In\u00a0[2]: Copied! <pre>from bayes_opt import BayesianOptimization\n\nlettrade_model = lt.optimize_model()\n\n\ndef train_model(**params):\n    params = {\n        \"ema1_window\": int(params[\"ema1_window\"]),\n        \"ema2_window\": int(params[\"ema2_window\"]),\n    }\n    # Model\n    result = lettrade_model(params)\n\n    # Score\n    return result[\"equity\"]\n\n\npbounds = {\"ema1_window\": (5, 25), \"ema2_window\": (10, 50)}\n\noptimizer = BayesianOptimization(\n    f=train_model,\n    pbounds=pbounds,\n    random_state=1,\n)\n\noptimizer.maximize(\n    init_points=2,\n    n_iter=200,\n)\n</pre> from bayes_opt import BayesianOptimization  lettrade_model = lt.optimize_model()   def train_model(**params):     params = {         \"ema1_window\": int(params[\"ema1_window\"]),         \"ema2_window\": int(params[\"ema2_window\"]),     }     # Model     result = lettrade_model(params)      # Score     return result[\"equity\"]   pbounds = {\"ema1_window\": (5, 25), \"ema2_window\": (10, 50)}  optimizer = BayesianOptimization(     f=train_model,     pbounds=pbounds,     random_state=1, )  optimizer.maximize(     init_points=2,     n_iter=200, ) <pre>|   iter    |  target   | ema1_w... | ema2_w... |\n-------------------------------------------------\n| 1         | 9.917e+03 | 13.34     | 38.81     |\n| 2         | 9.868e+03 | 5.002     | 22.09     |\n| 3         | 9.916e+03 | 13.3      | 39.0      |\n| 4         | 9.949e+03 | 20.15     | 34.13     |\n| 5         | 9.967e+03 | 25.0      | 26.44     |\n| 6         | 1e+04     | 25.0      | 13.15     |\n| 7         | 1.004e+04 | 18.64     | 10.0      |\n| 8         | 1.013e+04 | 12.01     | 10.03     |\n| 9         | 9.983e+03 | 6.235     | 10.0      |\n| 10        | 1e+04     | 13.69     | 13.61     |\n| 11        | 1.018e+04 | 14.33     | 10.0      |\n| 12        | 1e+04     | 25.0      | 50.0      |\n| 13        | 9.901e+03 | 5.0       | 50.0      |\n| 14        | 1.011e+04 | 15.78     | 10.1      |\n| 15        | 9.925e+03 | 17.32     | 50.0      |\n| 16        | 9.985e+03 | 25.0      | 42.48     |\n| 17        | 1.015e+04 | 13.69     | 10.84     |\n| 18        | 9.865e+03 | 5.0       | 34.04     |\n| 19        | 1.003e+04 | 20.96     | 19.6      |\n| 20        | 9.955e+03 | 16.25     | 24.79     |\n| 21        | 9.954e+03 | 24.96     | 19.59     |\n| 22        | 1.015e+04 | 13.31     | 10.13     |\n| 23        | 9.895e+03 | 9.931     | 11.94     |\n| 24        | 1.016e+04 | 19.26     | 14.34     |\n| 25        | 1.016e+04 | 18.31     | 16.36     |\n| 26        | 1.014e+04 | 20.69     | 15.96     |\n| 27        | 9.806e+03 | 16.24     | 18.66     |\n| 28        | 1.005e+04 | 17.23     | 14.24     |\n| 29        | 1.009e+04 | 21.23     | 12.96     |\n| 30        | 9.907e+03 | 5.0       | 42.3      |\n| 31        | 1.016e+04 | 19.26     | 15.78     |\n| 32        | 9.995e+03 | 12.4      | 30.25     |\n| 33        | 9.909e+03 | 19.23     | 42.99     |\n| 34        | 9.914e+03 | 24.94     | 36.65     |\n| 35        | 9.868e+03 | 11.44     | 46.76     |\n| 36        | 1.003e+04 | 22.93     | 10.0      |\n| 37        | 9.866e+03 | 9.878     | 26.32     |\n| 38        | 9.897e+03 | 19.49     | 28.76     |\n| 39        | 1.012e+04 | 19.53     | 17.49     |\n| 40        | 1.009e+04 | 23.06     | 15.94     |\n| 41        | 9.936e+03 | 5.0       | 15.73     |\n| 42        | 9.977e+03 | 14.91     | 33.4      |\n| 43        | 1.001e+04 | 24.98     | 46.12     |\n| 44        | 9.881e+03 | 25.0      | 31.18     |\n| 45        | 1e+04     | 19.39     | 12.65     |\n| 46        | 1.014e+04 | 21.42     | 14.65     |\n| 47        | 9.965e+03 | 10.51     | 33.99     |\n| 48        | 9.984e+03 | 21.67     | 48.07     |\n| 49        | 1.014e+04 | 20.15     | 14.62     |\n| 50        | 9.976e+03 | 21.58     | 23.64     |\n| 51        | 9.836e+03 | 5.0       | 28.46     |\n| 52        | 1.016e+04 | 18.5      | 15.23     |\n| 53        | 9.911e+03 | 18.6      | 38.04     |\n| 54        | 9.883e+03 | 9.621     | 18.93     |\n| 55        | 1.014e+04 | 22.76     | 13.63     |\n| 56        | 9.945e+03 | 8.623     | 38.71     |\n| 57        | 1.016e+04 | 14.99     | 11.6      |\n| 58        | 1.018e+04 | 14.65     | 10.65     |\n| 59        | 9.966e+03 | 15.23     | 29.0      |\n| 60        | 1.008e+04 | 21.67     | 17.3      |\n| 61        | 1.016e+04 | 14.47     | 11.02     |\n| 62        | 1.007e+04 | 15.97     | 11.83     |\n| 63        | 1.012e+04 | 24.97     | 23.21     |\n| 64        | 1.003e+04 | 23.76     | 22.16     |\n| 65        | 9.973e+03 | 15.12     | 44.06     |\n| 66        | 9.966e+03 | 9.791     | 42.62     |\n| 67        | 9.918e+03 | 9.419     | 50.0      |\n| 68        | 1.012e+04 | 25.0      | 10.0      |\n| 69        | 1.015e+04 | 23.23     | 12.06     |\n| 70        | 1.014e+04 | 24.41     | 11.25     |\n| 71        | 9.856e+03 | 5.374     | 46.14     |\n| 72        | 9.926e+03 | 5.0       | 38.36     |\n| 73        | 1e+04     | 24.28     | 24.27     |\n| 74        | 9.934e+03 | 22.49     | 40.17     |\n| 75        | 9.964e+03 | 22.47     | 44.84     |\n| 76        | 1.016e+04 | 19.17     | 16.67     |\n| 77        | 1.016e+04 | 19.19     | 14.94     |\n| 78        | 1.018e+04 | 14.81     | 10.12     |\n| 79        | 1.015e+04 | 25.0      | 22.11     |\n| 80        | 9.967e+03 | 13.68     | 49.86     |\n| 81        | 9.806e+03 | 12.62     | 22.98     |\n| 82        | 9.965e+03 | 18.92     | 22.54     |\n| 83        | 1.016e+04 | 18.71     | 16.05     |\n| 84        | 9.985e+03 | 17.73     | 46.57     |\n| 85        | 1.011e+04 | 17.65     | 15.86     |\n| 86        | 1e+04     | 5.0       | 12.38     |\n| 87        | 1.016e+04 | 18.48     | 17.14     |\n| 88        | 1.011e+04 | 15.09     | 10.82     |\n| 89        | 1.005e+04 | 15.0      | 12.66     |\n| 90        | 9.906e+03 | 8.988     | 30.96     |\n| 91        | 9.913e+03 | 11.58     | 15.76     |\n| 92        | 1.002e+04 | 25.0      | 16.26     |\n| 93        | 9.957e+03 | 17.55     | 32.0      |\n| 94        | 9.967e+03 | 15.59     | 36.06     |\n| 95        | 9.97e+03  | 16.1      | 41.05     |\n| 96        | 9.994e+03 | 20.59     | 50.0      |\n| 97        | 1.009e+04 | 22.07     | 11.7      |\n| 98        | 9.896e+03 | 12.69     | 42.6      |\n| 99        | 1.015e+04 | 22.56     | 14.74     |\n| 100       | 9.996e+03 | 19.65     | 25.56     |\n| 101       | 9.875e+03 | 5.056     | 18.74     |\n| 102       | 1.016e+04 | 21.75     | 15.65     |\n| 103       | 9.936e+03 | 11.08     | 36.56     |\n| 104       | 9.928e+03 | 15.1      | 47.03     |\n| 105       | 9.937e+03 | 22.47     | 27.76     |\n| 106       | 1.015e+04 | 12.15     | 11.33     |\n| 107       | 1e+04     | 12.87     | 12.14     |\n| 108       | 1.017e+04 | 11.56     | 10.86     |\n| 109       | 1e+04     | 10.74     | 10.01     |\n| 110       | 1.013e+04 | 12.21     | 10.64     |\n| 111       | 9.935e+03 | 13.48     | 27.04     |\n| 112       | 9.9e+03   | 23.03     | 34.18     |\n| 113       | 1e+04     | 19.11     | 19.18     |\n| 114       | 1.002e+04 | 8.382     | 22.81     |\n| 115       | 9.886e+03 | 6.562     | 24.92     |\n| 116       | 9.825e+03 | 7.853     | 15.11     |\n| 117       | 1e+04     | 22.88     | 49.91     |\n| 118       | 9.995e+03 | 25.0      | 39.75     |\n| 119       | 1e+04     | 11.48     | 11.48     |\n| 120       | 1.01e+04  | 23.88     | 14.56     |\n| 121       | 1.001e+04 | 20.62     | 10.0      |\n| 122       | 1.012e+04 | 23.5      | 11.04     |\n| 123       | 1.007e+04 | 17.05     | 10.03     |\n| 124       | 1e+04     | 15.01     | 15.67     |\n| 125       | 1.016e+04 | 22.51     | 12.73     |\n| 126       | 9.885e+03 | 8.067     | 35.43     |\n| 127       | 1e+04     | 12.62     | 32.63     |\n| 128       | 9.906e+03 | 8.381     | 44.9      |\n| 129       | 1.015e+04 | 23.46     | 12.91     |\n| 130       | 1.004e+04 | 24.94     | 47.97     |\n| 131       | 1.001e+04 | 22.79     | 18.66     |\n| 132       | 9.925e+03 | 20.04     | 46.19     |\n| 133       | 9.948e+03 | 21.31     | 31.29     |\n| 134       | 1.002e+04 | 18.45     | 13.93     |\n| 135       | 1.013e+04 | 20.43     | 16.91     |\n| 136       | 9.919e+03 | 21.52     | 37.3      |\n| 137       | 9.987e+03 | 12.79     | 19.04     |\n| 138       | 9.876e+03 | 7.708     | 41.31     |\n| 139       | 1.001e+04 | 17.17     | 27.0      |\n| 140       | 9.996e+03 | 13.15     | 35.0      |\n| 141       | 1.012e+04 | 25.0      | 10.88     |\n| 142       | 9.936e+03 | 17.67     | 34.78     |\n| 143       | 1.011e+04 | 24.29     | 10.34     |\n| 144       | 9.976e+03 | 14.56     | 31.19     |\n| 145       | 1.012e+04 | 20.1      | 13.82     |\n| 146       | 1.004e+04 | 25.0      | 21.26     |\n| 147       | 9.904e+03 | 16.2      | 22.08     |\n| 148       | 1.015e+04 | 21.91     | 13.84     |\n| 149       | 1.016e+04 | 24.05     | 12.11     |\n| 150       | 1e+04     | 21.41     | 21.37     |\n| 151       | 9.993e+03 | 23.54     | 47.39     |\n| 152       | 9.906e+03 | 7.181     | 12.03     |\n| 153       | 1.007e+04 | 21.42     | 16.27     |\n| 154       | 1.007e+04 | 20.82     | 18.08     |\n| 155       | 1.016e+04 | 19.94     | 16.25     |\n| 156       | 1.008e+04 | 22.03     | 15.09     |\n| 157       | 1.014e+04 | 20.67     | 15.36     |\n| 158       | 1.01e+04  | 23.05     | 14.53     |\n| 159       | 1.016e+04 | 17.44     | 16.96     |\n| 160       | 1e+04     | 16.59     | 16.37     |\n| 161       | 1e+04     | 17.85     | 17.68     |\n| 162       | 1.014e+04 | 21.02     | 14.0      |\n| 163       | 9.826e+03 | 5.958     | 31.33     |\n| 164       | 9.863e+03 | 7.755     | 20.98     |\n| 165       | 1.005e+04 | 17.71     | 11.35     |\n| 166       | 1.007e+04 | 25.0      | 14.83     |\n| 167       | 9.926e+03 | 7.685     | 48.04     |\n| 168       | 9.946e+03 | 10.83     | 40.3      |\n| 169       | 9.975e+03 | 22.34     | 42.59     |\n| 170       | 9.929e+03 | 19.65     | 40.36     |\n| 171       | 9.967e+03 | 15.87     | 38.54     |\n| 172       | 1.016e+04 | 14.38     | 11.84     |\n| 173       | 9.845e+03 | 10.82     | 28.92     |\n| 174       | 9.973e+03 | 24.89     | 44.26     |\n| 175       | 9.919e+03 | 25.0      | 28.61     |\n| 176       | 1.002e+04 | 23.05     | 17.24     |\n| 177       | 9.956e+03 | 9.801     | 23.78     |\n| 178       | 9.898e+03 | 17.17     | 44.44     |\n| 179       | 9.934e+03 | 19.25     | 48.53     |\n| 180       | 1.016e+04 | 17.82     | 16.76     |\n| 181       | 9.986e+03 | 13.54     | 16.94     |\n| 182       | 9.926e+03 | 21.92     | 25.56     |\n| 183       | 1.018e+04 | 14.04     | 10.42     |\n| 184       | 9.95e+03  | 11.69     | 50.0      |\n| 185       | 9.956e+03 | 17.13     | 29.51     |\n| 186       | 1.014e+04 | 24.79     | 11.81     |\n| 187       | 1.003e+04 | 18.21     | 24.85     |\n| 188       | 1.004e+04 | 24.59     | 22.62     |\n| 189       | 9.954e+03 | 22.9      | 21.09     |\n| 190       | 9.954e+03 | 7.6       | 28.03     |\n| 191       | 9.945e+03 | 19.62     | 20.75     |\n| 192       | 1.016e+04 | 19.84     | 15.49     |\n| 193       | 9.962e+03 | 20.57     | 11.62     |\n| 194       | 1.003e+04 | 11.15     | 20.7      |\n| 195       | 9.975e+03 | 11.17     | 31.96     |\n| 196       | 1e+04     | 15.72     | 14.23     |\n| 197       | 1.008e+04 | 9.859     | 21.83     |\n| 198       | 1.015e+04 | 22.35     | 14.24     |\n| 199       | 9.981e+03 | 13.34     | 45.09     |\n| 200       | 1.014e+04 | 22.14     | 13.12     |\n| 201       | 9.847e+03 | 13.78     | 20.61     |\n| 202       | 9.916e+03 | 8.272     | 10.01     |\n=================================================\n</pre> In\u00a0[3]: Copied! <pre>optimizer.max\n</pre> optimizer.max Out[3]: <pre>{'target': 10176.96,\n 'params': {'ema1_window': 14.332034902880366, 'ema2_window': 10.0}}</pre> In\u00a0[4]: Copied! <pre>lt.plotter.heatmap(x=\"ema1_window\", y=\"ema2_window\", z=\"equity\")\n</pre> lt.plotter.heatmap(x=\"ema1_window\", y=\"ema2_window\", z=\"equity\") In\u00a0[5]: Copied! <pre>lt.plotter.contour(x=\"ema1_window\", y=\"ema2_window\", z=\"equity\")\n</pre> lt.plotter.contour(x=\"ema1_window\", y=\"ema2_window\", z=\"equity\") In\u00a0[6]: Copied! <pre>import plotly.io as pio\n\npio.renderers.default = \"notebook\"\npio.templates.default = \"plotly_dark\"\n</pre> import plotly.io as pio  pio.renderers.default = \"notebook\" pio.templates.default = \"plotly_dark\" In\u00a0[7]: Copied! <pre>optimizer.res\n</pre> optimizer.res Out[7]: <pre>[{'target': 9917.18,\n  'params': {'ema1_window': 13.34044009405148,\n   'ema2_window': 38.81297973768632}},\n {'target': 9868.46,\n  'params': {'ema1_window': 5.002287496346898,\n   'ema2_window': 22.09330290527359}},\n {'target': 9916.34,\n  'params': {'ema1_window': 13.3001407276959,\n   'ema2_window': 39.00039537269421}},\n {'target': 9949.32,\n  'params': {'ema1_window': 20.150617901155936,\n   'ema2_window': 34.129567895477145}},\n {'target': 9966.86,\n  'params': {'ema1_window': 25.0, 'ema2_window': 26.43865565208876}},\n {'target': 10004.82,\n  'params': {'ema1_window': 25.0, 'ema2_window': 13.152876659642798}},\n {'target': 10042.6,\n  'params': {'ema1_window': 18.637708287319818, 'ema2_window': 10.0}},\n {'target': 10131.88,\n  'params': {'ema1_window': 12.008472233635572,\n   'ema2_window': 10.0274533068913}},\n {'target': 9983.02,\n  'params': {'ema1_window': 6.2345994038838395, 'ema2_window': 10.0}},\n {'target': 10000.0,\n  'params': {'ema1_window': 13.688189977287218,\n   'ema2_window': 13.60562993820364}},\n {'target': 10176.96,\n  'params': {'ema1_window': 14.332034902880366, 'ema2_window': 10.0}},\n {'target': 10002.76, 'params': {'ema1_window': 25.0, 'ema2_window': 50.0}},\n {'target': 9900.52, 'params': {'ema1_window': 5.0, 'ema2_window': 50.0}},\n {'target': 10113.68,\n  'params': {'ema1_window': 15.77634291874924,\n   'ema2_window': 10.095666359342271}},\n {'target': 9925.06,\n  'params': {'ema1_window': 17.317919291899347, 'ema2_window': 50.0}},\n {'target': 9984.86,\n  'params': {'ema1_window': 25.0, 'ema2_window': 42.478422889764204}},\n {'target': 10146.74,\n  'params': {'ema1_window': 13.686433812325918,\n   'ema2_window': 10.841210837456936}},\n {'target': 9864.66,\n  'params': {'ema1_window': 5.0, 'ema2_window': 34.03725595237402}},\n {'target': 10025.12,\n  'params': {'ema1_window': 20.96386324637636,\n   'ema2_window': 19.600444342364295}},\n {'target': 9954.84,\n  'params': {'ema1_window': 16.245235934093564,\n   'ema2_window': 24.785210642918983}},\n {'target': 9954.2,\n  'params': {'ema1_window': 24.96002025326071,\n   'ema2_window': 19.59334093052412}},\n {'target': 10146.74,\n  'params': {'ema1_window': 13.306169655394562,\n   'ema2_window': 10.13232677990274}},\n {'target': 9894.52,\n  'params': {'ema1_window': 9.930676380039309,\n   'ema2_window': 11.938672363287571}},\n {'target': 10160.68,\n  'params': {'ema1_window': 19.257596012820454,\n   'ema2_window': 14.336820273737521}},\n {'target': 10162.62,\n  'params': {'ema1_window': 18.307901480002904,\n   'ema2_window': 16.36450151429704}},\n {'target': 10142.82,\n  'params': {'ema1_window': 20.6937850140083,\n   'ema2_window': 15.95972188704653}},\n {'target': 9806.22,\n  'params': {'ema1_window': 16.238539833310536,\n   'ema2_window': 18.658641629078}},\n {'target': 10050.0,\n  'params': {'ema1_window': 17.231153783951616,\n   'ema2_window': 14.238758133764623}},\n {'target': 10091.24,\n  'params': {'ema1_window': 21.22834513283038,\n   'ema2_window': 12.964148435614263}},\n {'target': 9906.82,\n  'params': {'ema1_window': 5.0, 'ema2_window': 42.304883853435676}},\n {'target': 10162.72,\n  'params': {'ema1_window': 19.262294554696986,\n   'ema2_window': 15.780118424220234}},\n {'target': 9995.02,\n  'params': {'ema1_window': 12.395960332116548,\n   'ema2_window': 30.248121994893673}},\n {'target': 9908.56,\n  'params': {'ema1_window': 19.225913938565377,\n   'ema2_window': 42.98755074072035}},\n {'target': 9913.82,\n  'params': {'ema1_window': 24.944026515368797,\n   'ema2_window': 36.64519955481913}},\n {'target': 9867.9,\n  'params': {'ema1_window': 11.442254688637123,\n   'ema2_window': 46.76195501211062}},\n {'target': 10030.54,\n  'params': {'ema1_window': 22.928098068871368, 'ema2_window': 10.0}},\n {'target': 9866.08,\n  'params': {'ema1_window': 9.878419429314752,\n   'ema2_window': 26.320564289347878}},\n {'target': 9897.02,\n  'params': {'ema1_window': 19.492865397009265,\n   'ema2_window': 28.75987475220795}},\n {'target': 10124.06,\n  'params': {'ema1_window': 19.532335468288842,\n   'ema2_window': 17.49493247161354}},\n {'target': 10085.04,\n  'params': {'ema1_window': 23.063182660225763,\n   'ema2_window': 15.938772698972624}},\n {'target': 9935.76,\n  'params': {'ema1_window': 5.0, 'ema2_window': 15.728802193252715}},\n {'target': 9976.7,\n  'params': {'ema1_window': 14.909082612749145,\n   'ema2_window': 33.40188604275903}},\n {'target': 10013.08,\n  'params': {'ema1_window': 24.984096964565204,\n   'ema2_window': 46.11802107464013}},\n {'target': 9880.66,\n  'params': {'ema1_window': 25.0, 'ema2_window': 31.178649842555295}},\n {'target': 10000.1,\n  'params': {'ema1_window': 19.391080660671506,\n   'ema2_window': 12.649221456717385}},\n {'target': 10143.02,\n  'params': {'ema1_window': 21.420131668893983,\n   'ema2_window': 14.649350463285922}},\n {'target': 9964.88,\n  'params': {'ema1_window': 10.50519883407079,\n   'ema2_window': 33.98893049013029}},\n {'target': 9984.46,\n  'params': {'ema1_window': 21.674339073379237,\n   'ema2_window': 48.07203781042372}},\n {'target': 10142.64,\n  'params': {'ema1_window': 20.14614269340214,\n   'ema2_window': 14.617067488379512}},\n {'target': 9975.92,\n  'params': {'ema1_window': 21.57507731172532,\n   'ema2_window': 23.637459713454206}},\n {'target': 9836.22,\n  'params': {'ema1_window': 5.0, 'ema2_window': 28.456410853213544}},\n {'target': 10160.48,\n  'params': {'ema1_window': 18.49819821832407,\n   'ema2_window': 15.234496755885365}},\n {'target': 9910.62,\n  'params': {'ema1_window': 18.598006632905136,\n   'ema2_window': 38.04122117373202}},\n {'target': 9882.88,\n  'params': {'ema1_window': 9.620636583839627,\n   'ema2_window': 18.933804347073075}},\n {'target': 10142.84,\n  'params': {'ema1_window': 22.759496968091774,\n   'ema2_window': 13.628847277155005}},\n {'target': 9945.24,\n  'params': {'ema1_window': 8.623102940506728,\n   'ema2_window': 38.714930622197635}},\n {'target': 10163.72,\n  'params': {'ema1_window': 14.988141861509218,\n   'ema2_window': 11.59966279731066}},\n {'target': 10176.96,\n  'params': {'ema1_window': 14.645298405378643,\n   'ema2_window': 10.646806301958707}},\n {'target': 9965.74,\n  'params': {'ema1_window': 15.231917270545463,\n   'ema2_window': 29.00038344422895}},\n {'target': 10084.94,\n  'params': {'ema1_window': 21.668816006025974,\n   'ema2_window': 17.300512278033903}},\n {'target': 10163.72,\n  'params': {'ema1_window': 14.46721774435375,\n   'ema2_window': 11.020364940810152}},\n {'target': 10074.08,\n  'params': {'ema1_window': 15.968127850114344,\n   'ema2_window': 11.826876284200406}},\n {'target': 10123.36,\n  'params': {'ema1_window': 24.971246584072638,\n   'ema2_window': 23.207997239929302}},\n {'target': 10033.92,\n  'params': {'ema1_window': 23.757013571630818,\n   'ema2_window': 22.161133346918263}},\n {'target': 9972.82,\n  'params': {'ema1_window': 15.115823220934384,\n   'ema2_window': 44.06336102646235}},\n {'target': 9965.92,\n  'params': {'ema1_window': 9.79057400085918,\n   'ema2_window': 42.61625859774694}},\n {'target': 9917.86,\n  'params': {'ema1_window': 9.4191564704299, 'ema2_window': 50.0}},\n {'target': 10121.98, 'params': {'ema1_window': 25.0, 'ema2_window': 10.0}},\n {'target': 10152.78,\n  'params': {'ema1_window': 23.225932541999956,\n   'ema2_window': 12.064409824582443}},\n {'target': 10142.46,\n  'params': {'ema1_window': 24.41226871765222,\n   'ema2_window': 11.249964373429021}},\n {'target': 9856.32,\n  'params': {'ema1_window': 5.373588779722748,\n   'ema2_window': 46.136978123117295}},\n {'target': 9925.76,\n  'params': {'ema1_window': 5.0, 'ema2_window': 38.36322373105064}},\n {'target': 10000.0,\n  'params': {'ema1_window': 24.28136451026694,\n   'ema2_window': 24.268457127471244}},\n {'target': 9933.6,\n  'params': {'ema1_window': 22.49054791172255,\n   'ema2_window': 40.17018554527488}},\n {'target': 9964.26,\n  'params': {'ema1_window': 22.466898657207544,\n   'ema2_window': 44.83899428570267}},\n {'target': 10162.82,\n  'params': {'ema1_window': 19.173041979233634,\n   'ema2_window': 16.66599884624037}},\n {'target': 10160.68,\n  'params': {'ema1_window': 19.19237891455921,\n   'ema2_window': 14.940342407749608}},\n {'target': 10176.96,\n  'params': {'ema1_window': 14.808620614033067,\n   'ema2_window': 10.123486023947521}},\n {'target': 10153.32,\n  'params': {'ema1_window': 25.0, 'ema2_window': 22.105760217823264}},\n {'target': 9967.12,\n  'params': {'ema1_window': 13.676183553511972,\n   'ema2_window': 49.864380813174115}},\n {'target': 9805.88,\n  'params': {'ema1_window': 12.616532847720554,\n   'ema2_window': 22.975345230068353}},\n {'target': 9964.78,\n  'params': {'ema1_window': 18.91801152551102,\n   'ema2_window': 22.540685353750145}},\n {'target': 10162.62,\n  'params': {'ema1_window': 18.71050860435547,\n   'ema2_window': 16.05058439408016}},\n {'target': 9984.58,\n  'params': {'ema1_window': 17.72683371272307,\n   'ema2_window': 46.56621520355506}},\n {'target': 10110.94,\n  'params': {'ema1_window': 17.646298250730613,\n   'ema2_window': 15.857495516393584}},\n {'target': 10003.2,\n  'params': {'ema1_window': 5.0, 'ema2_window': 12.376665611134667}},\n {'target': 10162.32,\n  'params': {'ema1_window': 18.476655346194807,\n   'ema2_window': 17.14124548377033}},\n {'target': 10113.68,\n  'params': {'ema1_window': 15.085739582665049,\n   'ema2_window': 10.82456379473597}},\n {'target': 10053.9,\n  'params': {'ema1_window': 14.998114191524257,\n   'ema2_window': 12.664791954060785}},\n {'target': 9906.46,\n  'params': {'ema1_window': 8.987760304092504,\n   'ema2_window': 30.956140126733573}},\n {'target': 9913.08,\n  'params': {'ema1_window': 11.57660225943067,\n   'ema2_window': 15.755672799388297}},\n {'target': 10015.04,\n  'params': {'ema1_window': 24.995295140600895,\n   'ema2_window': 16.259208179123736}},\n {'target': 9956.54,\n  'params': {'ema1_window': 17.549766992461247,\n   'ema2_window': 32.001796392030975}},\n {'target': 9966.56,\n  'params': {'ema1_window': 15.590959623848025,\n   'ema2_window': 36.058344920309096}},\n {'target': 9969.92,\n  'params': {'ema1_window': 16.10162931349772,\n   'ema2_window': 41.04670651166125}},\n {'target': 9993.78,\n  'params': {'ema1_window': 20.591647303820906, 'ema2_window': 50.0}},\n {'target': 10090.94,\n  'params': {'ema1_window': 22.066133392411235,\n   'ema2_window': 11.69975716905784}},\n {'target': 9896.22,\n  'params': {'ema1_window': 12.693754607544918,\n   'ema2_window': 42.60404060142393}},\n {'target': 10153.36,\n  'params': {'ema1_window': 22.560026013665762,\n   'ema2_window': 14.73536236377905}},\n {'target': 9995.92,\n  'params': {'ema1_window': 19.64679772469404,\n   'ema2_window': 25.561230225120184}},\n {'target': 9874.74,\n  'params': {'ema1_window': 5.055552329636068,\n   'ema2_window': 18.73606679458244}},\n {'target': 10163.2,\n  'params': {'ema1_window': 21.746988739141354,\n   'ema2_window': 15.647689650192236}},\n {'target': 9935.88,\n  'params': {'ema1_window': 11.077494547402955,\n   'ema2_window': 36.56183350410814}},\n {'target': 9927.6,\n  'params': {'ema1_window': 15.09940089380413,\n   'ema2_window': 47.030376800148176}},\n {'target': 9936.64,\n  'params': {'ema1_window': 22.46564365281448,\n   'ema2_window': 27.760254353948728}},\n {'target': 10146.84,\n  'params': {'ema1_window': 12.151315491048344,\n   'ema2_window': 11.334438409974581}},\n {'target': 10000.0,\n  'params': {'ema1_window': 12.865881795198812,\n   'ema2_window': 12.13593391945699}},\n {'target': 10170.22,\n  'params': {'ema1_window': 11.564129697724322,\n   'ema2_window': 10.863584955901523}},\n {'target': 10000.0,\n  'params': {'ema1_window': 10.739100491517917,\n   'ema2_window': 10.005918491689503}},\n {'target': 10131.88,\n  'params': {'ema1_window': 12.214533830671225,\n   'ema2_window': 10.640870446917624}},\n {'target': 9934.96,\n  'params': {'ema1_window': 13.479425387006085,\n   'ema2_window': 27.035213011389697}},\n {'target': 9900.16,\n  'params': {'ema1_window': 23.031325516096935,\n   'ema2_window': 34.18360027539021}},\n {'target': 10000.0,\n  'params': {'ema1_window': 19.108118818979168,\n   'ema2_window': 19.180639556374558}},\n {'target': 10016.46,\n  'params': {'ema1_window': 8.381955911425255,\n   'ema2_window': 22.812632553767624}},\n {'target': 9886.16,\n  'params': {'ema1_window': 6.562318160028098,\n   'ema2_window': 24.924024716376927}},\n {'target': 9824.76,\n  'params': {'ema1_window': 7.853201776240833,\n   'ema2_window': 15.10916780735726}},\n {'target': 10002.92,\n  'params': {'ema1_window': 22.877434079869474,\n   'ema2_window': 49.91282008766895}},\n {'target': 9994.82,\n  'params': {'ema1_window': 25.0, 'ema2_window': 39.7469857057223}},\n {'target': 10000.0,\n  'params': {'ema1_window': 11.477524688732867,\n   'ema2_window': 11.478772921300045}},\n {'target': 10095.32,\n  'params': {'ema1_window': 23.879342830908403,\n   'ema2_window': 14.559147767104239}},\n {'target': 10011.28,\n  'params': {'ema1_window': 20.62086127108661, 'ema2_window': 10.0}},\n {'target': 10122.48,\n  'params': {'ema1_window': 23.495780639879918,\n   'ema2_window': 11.042160244030224}},\n {'target': 10073.82,\n  'params': {'ema1_window': 17.049737010871347,\n   'ema2_window': 10.03048566813634}},\n {'target': 10000.0,\n  'params': {'ema1_window': 15.014017055275563,\n   'ema2_window': 15.671408805813396}},\n {'target': 10162.48,\n  'params': {'ema1_window': 22.513793336954176,\n   'ema2_window': 12.731072080110923}},\n {'target': 9885.1,\n  'params': {'ema1_window': 8.06734799249617,\n   'ema2_window': 35.42669211082986}},\n {'target': 10004.92,\n  'params': {'ema1_window': 12.616397468739098,\n   'ema2_window': 32.626037881365995}},\n {'target': 9905.82,\n  'params': {'ema1_window': 8.381086549947845,\n   'ema2_window': 44.90467174675231}},\n {'target': 10152.78,\n  'params': {'ema1_window': 23.458565052425953,\n   'ema2_window': 12.907419754199232}},\n {'target': 10043.0,\n  'params': {'ema1_window': 24.944494341675462,\n   'ema2_window': 47.970109061095876}},\n {'target': 10005.18,\n  'params': {'ema1_window': 22.792558138511076,\n   'ema2_window': 18.660709395709926}},\n {'target': 9924.86,\n  'params': {'ema1_window': 20.0411695269928, 'ema2_window': 46.193605004484}},\n {'target': 9948.18,\n  'params': {'ema1_window': 21.313736637789567,\n   'ema2_window': 31.287197013016954}},\n {'target': 10020.16,\n  'params': {'ema1_window': 18.447713769487436,\n   'ema2_window': 13.931697637793246}},\n {'target': 10133.72,\n  'params': {'ema1_window': 20.428363490560344,\n   'ema2_window': 16.912356762897357}},\n {'target': 9918.74,\n  'params': {'ema1_window': 21.518686446442743,\n   'ema2_window': 37.296966526736455}},\n {'target': 9987.3,\n  'params': {'ema1_window': 12.785561164975114,\n   'ema2_window': 19.035077955112577}},\n {'target': 9876.32,\n  'params': {'ema1_window': 7.707850854078622,\n   'ema2_window': 41.31341630123843}},\n {'target': 10005.96,\n  'params': {'ema1_window': 17.16605087223638,\n   'ema2_window': 27.002647284444702}},\n {'target': 9996.32,\n  'params': {'ema1_window': 13.145261765561335,\n   'ema2_window': 35.004792655287446}},\n {'target': 10121.98,\n  'params': {'ema1_window': 25.0, 'ema2_window': 10.883255888172936}},\n {'target': 9936.44,\n  'params': {'ema1_window': 17.674073890554574,\n   'ema2_window': 34.775616186158636}},\n {'target': 10112.54,\n  'params': {'ema1_window': 24.28531365749124,\n   'ema2_window': 10.339585045282519}},\n {'target': 9975.6,\n  'params': {'ema1_window': 14.562216462421793,\n   'ema2_window': 31.193056332067876}},\n {'target': 10120.88,\n  'params': {'ema1_window': 20.103438505856953,\n   'ema2_window': 13.821923499682708}},\n {'target': 10044.06,\n  'params': {'ema1_window': 25.0, 'ema2_window': 21.26086084623064}},\n {'target': 9904.44,\n  'params': {'ema1_window': 16.20426902331689,\n   'ema2_window': 22.081158478578164}},\n {'target': 10152.6,\n  'params': {'ema1_window': 21.905689354316415,\n   'ema2_window': 13.837368043482545}},\n {'target': 10163.5,\n  'params': {'ema1_window': 24.04676673958337,\n   'ema2_window': 12.110652555449983}},\n {'target': 10000.0,\n  'params': {'ema1_window': 21.41091684061125,\n   'ema2_window': 21.370591496387785}},\n {'target': 9992.98,\n  'params': {'ema1_window': 23.53790470715531,\n   'ema2_window': 47.38748463150178}},\n {'target': 9905.74,\n  'params': {'ema1_window': 7.181278705156884,\n   'ema2_window': 12.03053584842895}},\n {'target': 10074.98,\n  'params': {'ema1_window': 21.41547457495814,\n   'ema2_window': 16.269303553458396}},\n {'target': 10074.9,\n  'params': {'ema1_window': 20.820694051207944,\n   'ema2_window': 18.07893575108031}},\n {'target': 10162.82,\n  'params': {'ema1_window': 19.936235439485387,\n   'ema2_window': 16.252569929453557}},\n {'target': 10075.0,\n  'params': {'ema1_window': 22.025466999740438,\n   'ema2_window': 15.093316513013413}},\n {'target': 10142.82,\n  'params': {'ema1_window': 20.666069152755835,\n   'ema2_window': 15.360105359283498}},\n {'target': 10095.32,\n  'params': {'ema1_window': 23.052513477770834,\n   'ema2_window': 14.531012092743524}},\n {'target': 10160.48,\n  'params': {'ema1_window': 17.439404071474442,\n   'ema2_window': 16.959569623759876}},\n {'target': 10000.0,\n  'params': {'ema1_window': 16.59401500721872,\n   'ema2_window': 16.374195114478383}},\n {'target': 10000.0,\n  'params': {'ema1_window': 17.847588919981874,\n   'ema2_window': 17.68315470367896}},\n {'target': 10143.02,\n  'params': {'ema1_window': 21.017197914552796,\n   'ema2_window': 14.00079425528888}},\n {'target': 9825.78,\n  'params': {'ema1_window': 5.957924915666442,\n   'ema2_window': 31.33342636121423}},\n {'target': 9862.88,\n  'params': {'ema1_window': 7.755217306024138,\n   'ema2_window': 20.980317706044115}},\n {'target': 10052.52,\n  'params': {'ema1_window': 17.708615296216706,\n   'ema2_window': 11.348956130574233}},\n {'target': 10074.58,\n  'params': {'ema1_window': 25.0, 'ema2_window': 14.825706038147459}},\n {'target': 9926.22,\n  'params': {'ema1_window': 7.68523950303905,\n   'ema2_window': 48.04398035623746}},\n {'target': 9946.26,\n  'params': {'ema1_window': 10.83434312601231,\n   'ema2_window': 40.29607043657573}},\n {'target': 9974.7,\n  'params': {'ema1_window': 22.3408622767175,\n   'ema2_window': 42.59155464964322}},\n {'target': 9928.6,\n  'params': {'ema1_window': 19.649621997541328,\n   'ema2_window': 40.3607328460689}},\n {'target': 9966.88,\n  'params': {'ema1_window': 15.869514541935894,\n   'ema2_window': 38.54452320180021}},\n {'target': 10163.72,\n  'params': {'ema1_window': 14.382492988265266,\n   'ema2_window': 11.84270826652789}},\n {'target': 9845.1,\n  'params': {'ema1_window': 10.820042502365395,\n   'ema2_window': 28.92154679847306}},\n {'target': 9973.42,\n  'params': {'ema1_window': 24.89344332127321,\n   'ema2_window': 44.258633935505344}},\n {'target': 9918.88,\n  'params': {'ema1_window': 25.0, 'ema2_window': 28.60707748081732}},\n {'target': 10015.24,\n  'params': {'ema1_window': 23.0541182708466,\n   'ema2_window': 17.23989202343017}},\n {'target': 9956.0,\n  'params': {'ema1_window': 9.800793823399644,\n   'ema2_window': 23.77826992176809}},\n {'target': 9897.54,\n  'params': {'ema1_window': 17.173642517883867,\n   'ema2_window': 44.43625081407885}},\n {'target': 9934.4,\n  'params': {'ema1_window': 19.247081907175364,\n   'ema2_window': 48.53112245996386}},\n {'target': 10160.48,\n  'params': {'ema1_window': 17.81714905026366,\n   'ema2_window': 16.760775241128123}},\n {'target': 9986.14,\n  'params': {'ema1_window': 13.54016538661564,\n   'ema2_window': 16.936246097023723}},\n {'target': 9926.06,\n  'params': {'ema1_window': 21.924576141259067,\n   'ema2_window': 25.558173416768977}},\n {'target': 10176.96,\n  'params': {'ema1_window': 14.0376116748325,\n   'ema2_window': 10.41653182744042}},\n {'target': 9950.32,\n  'params': {'ema1_window': 11.69320071851341, 'ema2_window': 50.0}},\n {'target': 9956.42,\n  'params': {'ema1_window': 17.134773260831604,\n   'ema2_window': 29.506723706626566}},\n {'target': 10142.46,\n  'params': {'ema1_window': 24.789052383864295,\n   'ema2_window': 11.807343382822166}},\n {'target': 10025.48,\n  'params': {'ema1_window': 18.2075190647766,\n   'ema2_window': 24.84979100412843}},\n {'target': 10043.86,\n  'params': {'ema1_window': 24.59374751738575,\n   'ema2_window': 22.61732605982764}},\n {'target': 9954.2,\n  'params': {'ema1_window': 22.90466016535968,\n   'ema2_window': 21.089662486387567}},\n {'target': 9954.28,\n  'params': {'ema1_window': 7.599982797103866,\n   'ema2_window': 28.033468876609216}},\n {'target': 9944.52,\n  'params': {'ema1_window': 19.623506718374625,\n   'ema2_window': 20.746791512844425}},\n {'target': 10162.72,\n  'params': {'ema1_window': 19.844219648242643,\n   'ema2_window': 15.490333845330087}},\n {'target': 9961.8,\n  'params': {'ema1_window': 20.57407701244893,\n   'ema2_window': 11.624893966640188}},\n {'target': 10025.6,\n  'params': {'ema1_window': 11.147425829959692,\n   'ema2_window': 20.69949614573705}},\n {'target': 9975.02,\n  'params': {'ema1_window': 11.168275894521537,\n   'ema2_window': 31.955252967340723}},\n {'target': 10000.84,\n  'params': {'ema1_window': 15.719895580950126,\n   'ema2_window': 14.225909451711933}},\n {'target': 10076.3,\n  'params': {'ema1_window': 9.858992232680606,\n   'ema2_window': 21.83053504293911}},\n {'target': 10153.36,\n  'params': {'ema1_window': 22.347939593308155,\n   'ema2_window': 14.23841538367607}},\n {'target': 9980.68,\n  'params': {'ema1_window': 13.339265212594777,\n   'ema2_window': 45.092188022835145}},\n {'target': 10142.84,\n  'params': {'ema1_window': 22.142233227244898,\n   'ema2_window': 13.124475206864986}},\n {'target': 9847.48,\n  'params': {'ema1_window': 13.78248342957268,\n   'ema2_window': 20.612574367925806}},\n {'target': 9915.82,\n  'params': {'ema1_window': 8.271972586257633,\n   'ema2_window': 10.01356944516527}}]</pre> In\u00a0[8]: Copied! <pre>import pandas as pd\n\ndf = pd.DataFrame(columns=[\"ema1_window\", \"ema2_window\", \"score\"])\nfor i, trial in enumerate(optimizer.res):\n    df.loc[i] = [\n        int(trial[\"params\"][\"ema1_window\"]),\n        int(trial[\"params\"][\"ema2_window\"]),\n        trial[\"target\"],\n    ]\n\ndf\n</pre> import pandas as pd  df = pd.DataFrame(columns=[\"ema1_window\", \"ema2_window\", \"score\"]) for i, trial in enumerate(optimizer.res):     df.loc[i] = [         int(trial[\"params\"][\"ema1_window\"]),         int(trial[\"params\"][\"ema2_window\"]),         trial[\"target\"],     ]  df Out[8]: ema1_window ema2_window score 0 13.0 38.0 9917.18 1 5.0 22.0 9868.46 2 13.0 39.0 9916.34 3 20.0 34.0 9949.32 4 25.0 26.0 9966.86 ... ... ... ... 197 22.0 14.0 10153.36 198 13.0 45.0 9980.68 199 22.0 13.0 10142.84 200 13.0 20.0 9847.48 201 8.0 10.0 9915.82 <p>202 rows \u00d7 3 columns</p> In\u00a0[9]: Copied! <pre>from plotly import express as px\n\nfig = px.scatter(df, x=df.index, y=\"score\")\nfig.show()\n</pre> from plotly import express as px  fig = px.scatter(df, x=df.index, y=\"score\") fig.show() In\u00a0[10]: Copied! <pre>import plotly.express as px\n\n\nfig = px.density_contour(\n    df,\n    x=\"ema1_window\",\n    y=\"ema2_window\",\n    z=\"score\",\n    histfunc=\"max\",\n)\nfig.update_traces(contours_coloring=\"fill\", contours_showlabels=True)\nfig.show()\n</pre> import plotly.express as px   fig = px.density_contour(     df,     x=\"ema1_window\",     y=\"ema2_window\",     z=\"score\",     histfunc=\"max\", ) fig.update_traces(contours_coloring=\"fill\", contours_showlabels=True) fig.show() In\u00a0[11]: Copied! <pre>import plotly.express as px\n\nfig = px.density_heatmap(\n    df,\n    x=\"ema1_window\",\n    y=\"ema2_window\",\n    z=\"score\",\n    nbinsx=20,\n    nbinsy=40,\n    histfunc=\"max\",\n    color_continuous_scale=\"Viridis\",\n)\nfig.show()\n</pre> import plotly.express as px  fig = px.density_heatmap(     df,     x=\"ema1_window\",     y=\"ema2_window\",     z=\"score\",     nbinsx=20,     nbinsy=40,     histfunc=\"max\",     color_continuous_scale=\"Viridis\", ) fig.show()"},{"location":"optimize/7.bayesopt/#optimize-with-bayesopt","title":"Optimize with BayesOpt\u00b6","text":"<p>Home | Document</p>"},{"location":"optimize/7.bayesopt/#installation","title":"Installation\u00b6","text":""},{"location":"optimize/7.bayesopt/#sample-strategy","title":"Sample Strategy\u00b6","text":""},{"location":"optimize/7.bayesopt/#optimize","title":"Optimize\u00b6","text":""},{"location":"optimize/7.bayesopt/#plot","title":"Plot\u00b6","text":""},{"location":"optimize/7.bayesopt/#plot-plotly","title":"Plot plotly\u00b6","text":""},{"location":"optimize/7.bayesopt/#init-plotly-environment","title":"Init Plotly environment\u00b6","text":""},{"location":"optimize/7.bayesopt/#type-1","title":"Type 1\u00b6","text":""},{"location":"optimize/7.bayesopt/#type-2","title":"Type 2\u00b6","text":""},{"location":"optimize/7.bayesopt/#type-3","title":"Type 3\u00b6","text":""},{"location":"optimize/8.blackbox/","title":"Optimize with blackbox","text":"In\u00a0[\u00a0]: Copied! <pre>!pip install git+https://github.com/paulknysh/blackbox.git@master\n</pre> !pip install git+https://github.com/paulknysh/blackbox.git@master In\u00a0[1]: Copied! <pre>import talib.abstract as ta\n\nfrom lettrade import DataFeed, Strategy, indicator as i\nfrom lettrade.exchange.backtest import ForexBackTestAccount, let_backtest\n\n\nclass SmaCross(Strategy):\n    ema1_window = 9\n    ema2_window = 21\n\n    def indicators(self, df: DataFeed):\n        df[\"ema1\"] = ta.EMA(df, timeperiod=self.ema1_window)\n        df[\"ema2\"] = ta.EMA(df, timeperiod=self.ema2_window)\n\n        df[\"signal_ema_crossover\"] = i.crossover(df.ema1, df.ema2)\n        df[\"signal_ema_crossunder\"] = i.crossunder(df.ema1, df.ema2)\n\n    def next(self, df: DataFeed):\n        if len(self.orders) &gt; 0 or len(self.positions) &gt; 0:\n            return\n\n        if df.l.signal_ema_crossover[-1]:\n            price = self.data.l.close[-1]\n            self.buy(size=0.1, sl=price - 0.001, tp=price + 0.001)\n        elif df.l.signal_ema_crossunder[-1]:\n            price = self.data.l.close[-1]\n            self.sell(size=0.1, sl=price + 0.001, tp=price - 0.001)\n\n\nlt = let_backtest(\n    strategy=SmaCross,\n    datas=\"example/data/data/EURUSD_5m-0_10000.csv\",\n    account=ForexBackTestAccount,\n)\n</pre> import talib.abstract as ta  from lettrade import DataFeed, Strategy, indicator as i from lettrade.exchange.backtest import ForexBackTestAccount, let_backtest   class SmaCross(Strategy):     ema1_window = 9     ema2_window = 21      def indicators(self, df: DataFeed):         df[\"ema1\"] = ta.EMA(df, timeperiod=self.ema1_window)         df[\"ema2\"] = ta.EMA(df, timeperiod=self.ema2_window)          df[\"signal_ema_crossover\"] = i.crossover(df.ema1, df.ema2)         df[\"signal_ema_crossunder\"] = i.crossunder(df.ema1, df.ema2)      def next(self, df: DataFeed):         if len(self.orders) &gt; 0 or len(self.positions) &gt; 0:             return          if df.l.signal_ema_crossover[-1]:             price = self.data.l.close[-1]             self.buy(size=0.1, sl=price - 0.001, tp=price + 0.001)         elif df.l.signal_ema_crossunder[-1]:             price = self.data.l.close[-1]             self.sell(size=0.1, sl=price + 0.001, tp=price - 0.001)   lt = let_backtest(     strategy=SmaCross,     datas=\"example/data/data/EURUSD_5m-0_10000.csv\",     account=ForexBackTestAccount, ) In\u00a0[2]: Copied! <pre>import blackbox as bb\n\n\ndef params_parser(args):\n    return {\"ema1_window\": int(args[0]), \"ema2_window\": int(args[1])}\n\n\ndef result_parser(result):\n    return result[\"equity\"]\n\n\nresult = bb.minimize(\n    f=lt.optimize_model(\n        params_parser=params_parser,\n        result_parser=result_parser,\n    ),\n    domain=[[5, 25, 1], [10, 50, 1]],  # ranges of each parameter\n    budget=300,  # total number of function calls available\n    batch=12,  # number of calls that will be evaluated in parallel\n)\n\nlt.optimize_done()\n</pre> import blackbox as bb   def params_parser(args):     return {\"ema1_window\": int(args[0]), \"ema2_window\": int(args[1])}   def result_parser(result):     return result[\"equity\"]   result = bb.minimize(     f=lt.optimize_model(         params_parser=params_parser,         result_parser=result_parser,     ),     domain=[[5, 25, 1], [10, 50, 1]],  # ranges of each parameter     budget=300,  # total number of function calls available     batch=12,  # number of calls that will be evaluated in parallel )  lt.optimize_done() <pre>INFO     evaluating batch 1/25 (samples 1..12/300) 07-02 16:52:35\nINFO     evaluating batch 2/25 (samples 13..24/300) 07-02 16:52:36\nINFO     evaluating batch 3/25 (samples 25..36/300) 07-02 16:52:36\nINFO     evaluating batch 4/25 (samples 37..48/300) 07-02 16:52:37\nINFO     evaluating batch 5/25 (samples 49..60/300) 07-02 16:52:37\nINFO     evaluating batch 6/25 (samples 61..72/300) 07-02 16:52:37\nINFO     evaluating batch 7/25 (samples 73..84/300) 07-02 16:52:38\nINFO     evaluating batch 8/25 (samples 85..96/300) 07-02 16:52:38\nINFO     evaluating batch 9/25 (samples 97..108/300) 07-02 16:52:39\nINFO     evaluating batch 10/25 (samples 109..120/300) 07-02 16:52:39\nINFO     evaluating batch 11/25 (samples 121..132/300) 07-02 16:52:40\nINFO     evaluating batch 12/25 (samples 133..144/300) 07-02 16:52:40\nINFO     evaluating batch 13/25 (samples 145..156/300) 07-02 16:52:41\nINFO     evaluating batch 14/25 (samples 157..168/300) 07-02 16:52:41\nINFO     evaluating batch 15/25 (samples 169..180/300) 07-02 16:52:44\nINFO     evaluating batch 16/25 (samples 181..192/300) 07-02 16:52:46\nINFO     evaluating batch 17/25 (samples 193..204/300) 07-02 16:52:48\nINFO     evaluating batch 18/25 (samples 205..216/300) 07-02 16:52:50\nINFO     evaluating batch 19/25 (samples 217..228/300) 07-02 16:52:52\nINFO     evaluating batch 20/25 (samples 229..240/300) 07-02 16:52:54\nINFO     evaluating batch 21/25 (samples 241..252/300) 07-02 16:52:57\nINFO     evaluating batch 22/25 (samples 253..264/300) 07-02 16:53:00\nINFO     evaluating batch 23/25 (samples 265..276/300) 07-02 16:53:03\nINFO     evaluating batch 24/25 (samples 277..288/300) 07-02 16:53:06\nINFO     evaluating batch 25/25 (samples 289..300/300) 07-02 16:53:09\nINFO     DONE 07-02 16:53:13\n</pre> In\u00a0[3]: Copied! <pre>lt.plotter.heatmap(x=\"ema1_window\", y=\"ema2_window\")\n</pre> lt.plotter.heatmap(x=\"ema1_window\", y=\"ema2_window\") In\u00a0[4]: Copied! <pre>lt.plotter.contour(x=\"ema1_window\", y=\"ema2_window\")\n</pre> lt.plotter.contour(x=\"ema1_window\", y=\"ema2_window\") In\u00a0[5]: Copied! <pre>import plotly.io as pio\n\npio.renderers.default = \"notebook\"\npio.templates.default = \"plotly_dark\"\n</pre> import plotly.io as pio  pio.renderers.default = \"notebook\" pio.templates.default = \"plotly_dark\" In\u00a0[6]: Copied! <pre>import pandas as pd\n\ndf = pd.DataFrame(\n    {\n        \"ema1_window\": [r[0] for r in result[\"all_xs\"]],\n        \"ema2_window\": [r[1] for r in result[\"all_xs\"]],\n        \"equity\": result[\"all_fs\"],\n    }\n)\n\ndf.columns = [\"x\", \"y\", \"z\"]\ndf.x = df.x.astype(int)\ndf.y = df.y.astype(int)\n\ndf\n</pre> import pandas as pd  df = pd.DataFrame(     {         \"ema1_window\": [r[0] for r in result[\"all_xs\"]],         \"ema2_window\": [r[1] for r in result[\"all_xs\"]],         \"equity\": result[\"all_fs\"],     } )  df.columns = [\"x\", \"y\", \"z\"] df.x = df.x.astype(int) df.y = df.y.astype(int)  df Out[6]: x y z 0 10 12 9833.68 1 5 35 9874.68 2 20 18 10074.90 3 15 41 9981.80 4 10 23 9857.78 ... ... ... ... 295 10 28 9845.10 296 21 34 9890.22 297 6 39 9905.94 298 10 14 9809.16 299 16 32 9927.24 <p>300 rows \u00d7 3 columns</p> In\u00a0[7]: Copied! <pre>import plotly.express as px\n\nfig = px.density_contour(\n    df,\n    x=\"x\",\n    y=\"y\",\n    z=\"z\",\n    histfunc=\"max\",\n)\nfig.update_traces(contours_coloring=\"fill\", contours_showlabels=True)\nfig.show()\n</pre> import plotly.express as px  fig = px.density_contour(     df,     x=\"x\",     y=\"y\",     z=\"z\",     histfunc=\"max\", ) fig.update_traces(contours_coloring=\"fill\", contours_showlabels=True) fig.show() In\u00a0[8]: Copied! <pre>import plotly.express as px\n\nfig = px.density_heatmap(\n    df,\n    x=\"x\",\n    y=\"y\",\n    z=\"z\",\n    nbinsx=20,\n    nbinsy=40,\n    histfunc=\"max\",\n    color_continuous_scale=\"Viridis\",\n)\nfig.show()\n</pre> import plotly.express as px  fig = px.density_heatmap(     df,     x=\"x\",     y=\"y\",     z=\"z\",     nbinsx=20,     nbinsy=40,     histfunc=\"max\",     color_continuous_scale=\"Viridis\", ) fig.show() In\u00a0[9]: Copied! <pre>import plotly.graph_objects as go\n\nfig = go.Figure(\n    go.Histogram2d(\n        x=df.x,\n        y=df.y,\n        z=df.z,\n        nbinsx=20,\n        nbinsy=40,\n        histfunc=\"max\",\n    )\n)\n\nfig.show()\n</pre> import plotly.graph_objects as go  fig = go.Figure(     go.Histogram2d(         x=df.x,         y=df.y,         z=df.z,         nbinsx=20,         nbinsy=40,         histfunc=\"max\",     ) )  fig.show()"},{"location":"optimize/8.blackbox/#optimize-with-blackbox","title":"Optimize with blackbox\u00b6","text":"<p>Home</p> <p>Install latest blackbox optimize from PyPi</p>"},{"location":"optimize/8.blackbox/#sample-strategy","title":"Sample strategy\u00b6","text":""},{"location":"optimize/8.blackbox/#run-optimize","title":"Run optimize\u00b6","text":""},{"location":"optimize/8.blackbox/#plot","title":"Plot\u00b6","text":""},{"location":"optimize/8.blackbox/#plot-plotly","title":"Plot Plotly\u00b6","text":""},{"location":"optimize/8.blackbox/#init-plotly-environment","title":"Init Plotly environment\u00b6","text":""},{"location":"optimize/8.blackbox/#clean-data","title":"Clean data\u00b6","text":""},{"location":"optimize/8.blackbox/#type-1","title":"Type 1\u00b6","text":""},{"location":"optimize/8.blackbox/#type-2","title":"Type 2\u00b6","text":""},{"location":"optimize/8.blackbox/#type-3","title":"Type 3\u00b6","text":""},{"location":"optimize/8.blackbox/#source","title":"Source\u00b6","text":"<pre>--8&lt;-- \"example/optimize/blackbox.py\"\n</pre>"},{"location":"optimize/9.hyperactive/","title":"Optimize with Hyperactive","text":"In\u00a0[\u00a0]: Copied! <pre>!pip install hyperactive\n# Re-install pandas 2.2\n!pip install --upgrade pandas\n</pre> !pip install hyperactive # Re-install pandas 2.2 !pip install --upgrade pandas In\u00a0[6]: Copied! <pre># import talib.abstract as ta\n\nfrom lettrade import DataFeed, Strategy, indicator as i\nfrom lettrade.exchange.backtest import ForexBackTestAccount, let_backtest\nfrom lettrade.indicator.vendor.qtpylib import inject_indicators\n\ninject_indicators()\n\n\nclass SmaCross(Strategy):\n    ema1_window = 9\n    ema2_window = 21\n\n    def indicators(self, df: DataFeed):\n        # df[\"ema1\"] = ta.EMA(df, timeperiod=self.ema1_window)\n        # df[\"ema2\"] = ta.EMA(df, timeperiod=self.ema2_window)\n        df[\"ema1\"] = df.close.ema(window=self.ema1_window)\n        df[\"ema2\"] = df.close.ema(window=self.ema2_window)\n\n        df[\"signal_ema_crossover\"] = i.crossover(df.ema1, df.ema2)\n        df[\"signal_ema_crossunder\"] = i.crossunder(df.ema1, df.ema2)\n\n    def next(self, df: DataFeed):\n        if len(self.orders) &gt; 0 or len(self.positions) &gt; 0:\n            return\n\n        if df.l.signal_ema_crossover[-1]:\n            price = df.l.close[-1]\n            self.buy(size=0.1, sl=price - 0.001, tp=price + 0.001)\n        elif df.l.signal_ema_crossunder[-1]:\n            price = df.l.close[-1]\n            self.sell(size=0.1, sl=price + 0.001, tp=price - 0.001)\n\n\nlt = let_backtest(\n    strategy=SmaCross,\n    datas=\"example/data/data/EURUSD_5m-0_10000.csv\",\n    account=ForexBackTestAccount,\n    # plotter=None,\n)\n</pre> # import talib.abstract as ta  from lettrade import DataFeed, Strategy, indicator as i from lettrade.exchange.backtest import ForexBackTestAccount, let_backtest from lettrade.indicator.vendor.qtpylib import inject_indicators  inject_indicators()   class SmaCross(Strategy):     ema1_window = 9     ema2_window = 21      def indicators(self, df: DataFeed):         # df[\"ema1\"] = ta.EMA(df, timeperiod=self.ema1_window)         # df[\"ema2\"] = ta.EMA(df, timeperiod=self.ema2_window)         df[\"ema1\"] = df.close.ema(window=self.ema1_window)         df[\"ema2\"] = df.close.ema(window=self.ema2_window)          df[\"signal_ema_crossover\"] = i.crossover(df.ema1, df.ema2)         df[\"signal_ema_crossunder\"] = i.crossunder(df.ema1, df.ema2)      def next(self, df: DataFeed):         if len(self.orders) &gt; 0 or len(self.positions) &gt; 0:             return          if df.l.signal_ema_crossover[-1]:             price = df.l.close[-1]             self.buy(size=0.1, sl=price - 0.001, tp=price + 0.001)         elif df.l.signal_ema_crossunder[-1]:             price = df.l.close[-1]             self.sell(size=0.1, sl=price + 0.001, tp=price - 0.001)   lt = let_backtest(     strategy=SmaCross,     datas=\"example/data/data/EURUSD_5m-0_10000.csv\",     account=ForexBackTestAccount,     # plotter=None, ) In\u00a0[7]: Copied! <pre>from hyperactive import Hyperactive\nfrom hyperactive.optimizers import HillClimbingOptimizer\n\n\n# define the model in a function\ndef params_parser(args):\n    return {\n        \"ema1_window\": args[\"ema1_window\"],\n        \"ema2_window\": args[\"ema2_window\"],\n    }\n\n\ndef result_parser(result):\n    return result[\"equity\"]\n\n\nmodel = lt.optimize_model(\n    params_parser=params_parser,\n    result_parser=result_parser,\n)\n\n# search space determines the ranges of parameters you want the optimizer to search through\nsearch_space = {\n    \"ema1_window\": list(range(5, 25, 1)),\n    \"ema2_window\": list(range(10, 50)),\n}\n\noptimizer = HillClimbingOptimizer(epsilon=0.1, distribution=\"laplace\", n_neighbours=4)\n\n# start the optimization run\nhyper = Hyperactive()\nhyper.add_search(model, search_space, optimizer=optimizer, n_iter=1000)\nhyper.run()\n</pre> from hyperactive import Hyperactive from hyperactive.optimizers import HillClimbingOptimizer   # define the model in a function def params_parser(args):     return {         \"ema1_window\": args[\"ema1_window\"],         \"ema2_window\": args[\"ema2_window\"],     }   def result_parser(result):     return result[\"equity\"]   model = lt.optimize_model(     params_parser=params_parser,     result_parser=result_parser, )  # search space determines the ranges of parameters you want the optimizer to search through search_space = {     \"ema1_window\": list(range(5, 25, 1)),     \"ema2_window\": list(range(10, 50)), }  optimizer = HillClimbingOptimizer(epsilon=0.1, distribution=\"laplace\", n_neighbours=4)  # start the optimization run hyper = Hyperactive() hyper.add_search(model, search_space, optimizer=optimizer, n_iter=1000) hyper.run() <pre>[0] _optimize_model (Hill Climbing): 100%|\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500| 1000/1000 [00:46&lt;00:00, 21.30it/s, best_iter=0, best_pos=[9 0], best_score=10176.96]</pre> <pre>\n\nResults: '_optimize_model'  \n   Best score: 10176.96  \n   Best parameter set:\n      'ema1_window' : 14.0  \n      'ema2_window' : 10.0  \n   Best iteration: 0  \n \n   Random seed: 1466797877  \n \n   Evaluation time   : 45.75040030479431 sec    [99.78 %]\n   Optimization time : 0.10297703742980957 sec    [0.22 %]\n   Iteration time    : 45.85337734222412 sec    [21.81 iter/sec]\n \n</pre> <pre>\n</pre> In\u00a0[8]: Copied! <pre>df = hyper.search_data(model)\ndf\n</pre> df = hyper.search_data(model) df Out[8]: ema1_window ema2_window score 0 21 38 9938.72 1 9 47 9988.94 2 11 23 9845.88 3 11 36 9935.88 4 17 23 9954.64 ... ... ... ... 995 11 10 10170.22 996 13 13 10000.00 997 12 14 9933.10 998 14 16 9975.46 999 7 39 9875.98 <p>1000 rows \u00d7 3 columns</p> In\u00a0[9]: Copied! <pre>lt.plotter.heatmap()\n</pre> lt.plotter.heatmap() In\u00a0[10]: Copied! <pre>lt.plotter.contour(x=\"ema1_window\", y=\"ema2_window\", z=\"equity\")\n</pre> lt.plotter.contour(x=\"ema1_window\", y=\"ema2_window\", z=\"equity\") In\u00a0[11]: Copied! <pre>import plotly.io as pio\n\npio.renderers.default = \"notebook\"\npio.templates.default = \"plotly_dark\"\n</pre> import plotly.io as pio  pio.renderers.default = \"notebook\" pio.templates.default = \"plotly_dark\" In\u00a0[12]: Copied! <pre>import plotly.express as px\n\nfig = px.density_heatmap(\n    df,\n    x=\"ema1_window\",\n    y=\"ema2_window\",\n    z=\"score\",\n    nbinsx=20,\n    nbinsy=40,\n    histfunc=\"max\",\n    color_continuous_scale=\"Viridis\",\n)\nfig.show()\n</pre> import plotly.express as px  fig = px.density_heatmap(     df,     x=\"ema1_window\",     y=\"ema2_window\",     z=\"score\",     nbinsx=20,     nbinsy=40,     histfunc=\"max\",     color_continuous_scale=\"Viridis\", ) fig.show() In\u00a0[13]: Copied! <pre>import plotly.express as px\n\nfig = px.density_contour(\n    df,\n    x=\"ema1_window\",\n    y=\"ema2_window\",\n    z=\"score\",\n    histfunc=\"max\",\n)\nfig.update_traces(contours_coloring=\"fill\", contours_showlabels=True)\nfig.show()\n</pre> import plotly.express as px  fig = px.density_contour(     df,     x=\"ema1_window\",     y=\"ema2_window\",     z=\"score\",     histfunc=\"max\", ) fig.update_traces(contours_coloring=\"fill\", contours_showlabels=True) fig.show()"},{"location":"optimize/9.hyperactive/#optimize-with-hyperactive","title":"Optimize with Hyperactive\u00b6","text":"<p>Home</p>"},{"location":"optimize/9.hyperactive/#install","title":"Install\u00b6","text":""},{"location":"optimize/9.hyperactive/#sample-strategy","title":"Sample strategy\u00b6","text":""},{"location":"optimize/9.hyperactive/#example","title":"Example\u00b6","text":""},{"location":"optimize/9.hyperactive/#plot","title":"Plot\u00b6","text":""},{"location":"optimize/9.hyperactive/#plot-plotly","title":"Plot plotly\u00b6","text":""},{"location":"optimize/9.hyperactive/#init-plotly-environment","title":"Init Plotly environment\u00b6","text":""},{"location":"optimize/9.hyperactive/#type-1","title":"Type 1\u00b6","text":""},{"location":"optimize/9.hyperactive/#type-2","title":"Type 2\u00b6","text":""},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li> account<ul> <li> account</li> <li> error</li> </ul> </li> <li> all</li> <li> base<ul> <li> error</li> <li> flag</li> </ul> </li> <li> bot</li> <li> brain<ul> <li> brain</li> </ul> </li> <li> calendar<ul> <li> calendar</li> </ul> </li> <li> commander<ul> <li> commander</li> <li> telegram</li> </ul> </li> <li> data<ul> <li> data</li> <li> error</li> <li> extra<ul> <li> csv</li> </ul> </li> <li> feeder</li> <li> resample</li> <li> timeframe</li> <li> wrapper</li> </ul> </li> <li> exchange<ul> <li> backtest<ul> <li> account</li> <li> backtest</li> <li> commander</li> <li> data</li> <li> exchange</li> <li> extra<ul> <li> ray<ul> <li> ray</li> </ul> </li> <li> yfinance<ul> <li> yfinance</li> </ul> </li> </ul> </li> <li> feeder</li> <li> plot</li> <li> plotly<ul> <li> optimize</li> </ul> </li> <li> stats</li> <li> trade</li> </ul> </li> <li> base</li> <li> ccxt<ul> <li> api</li> <li> ccxt</li> <li> trade</li> </ul> </li> <li> error</li> <li> exchange</li> <li> execution</li> <li> live<ul> <li> account</li> <li> api</li> <li> data</li> <li> error</li> <li> exchange</li> <li> feeder</li> <li> live</li> <li> trade</li> </ul> </li> <li> metatrader<ul> <li> api</li> <li> metatrader</li> <li> trade</li> </ul> </li> <li> order</li> <li> position</li> </ul> </li> <li> indicator<ul> <li> candlestick<ul> <li> candlestick</li> <li> talib</li> </ul> </li> <li> dataframe</li> <li> momentum<ul> <li> rsi</li> </ul> </li> <li> plot</li> <li> series</li> <li> trend<ul> <li> ichimoku</li> <li> ma</li> <li> parabolic_sar</li> </ul> </li> <li> utils</li> <li> vendor<ul> <li> qtpylib<ul> <li> inject</li> <li> qtpylib</li> </ul> </li> </ul> </li> <li> volatility<ul> <li> atr</li> <li> bollinger_bands</li> <li> keltner_channel</li> </ul> </li> </ul> </li> <li> lettrade</li> <li> plot<ul> <li> bot</li> <li> color</li> <li> helper</li> <li> plot</li> <li> plotly<ul> <li> indicator</li> <li> plotly</li> </ul> </li> </ul> </li> <li> stats<ul> <li> stats</li> </ul> </li> <li> strategy<ul> <li> strategy</li> </ul> </li> <li> utils<ul> <li> docs</li> <li> notebook</li> </ul> </li> </ul>"},{"location":"reference/all/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> all","text":""},{"location":"reference/all/#lettrade.all","title":"all","text":"<p>Import everything in one. Import some unnecessary but convenient for everyone</p>"},{"location":"reference/bot/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> bot","text":""},{"location":"reference/bot/#lettrade.bot","title":"bot","text":""},{"location":"reference/bot/#lettrade.bot.LetTradeBot","title":"LetTradeBot","text":"<pre><code>LetTradeBot(\n    datas: DataFeed | list[DataFeed] | list[str] | str,\n    strategy: type[Strategy],\n    feeder: type[DataFeeder],\n    exchange: type[Exchange],\n    account: type[Account],\n    commander: type[Commander] | None = None,\n    plotter: type[Plotter] | None = None,\n    stats: type[BotStatistic] | None = None,\n    name: str | None = None,\n    **kwargs\n)\n</code></pre> <p>Bot object helps to manage actions of bot</p> <p>Parameters:</p> <ul> <li> <code>datas</code>               (<code>DataFeed | list[DataFeed] | list[str] | str</code>)           \u2013            <p>description</p> </li> <li> <code>strategy</code>               (<code>type[Strategy]</code>)           \u2013            <p>description</p> </li> <li> <code>feeder</code>               (<code>type[DataFeeder]</code>)           \u2013            <p>description</p> </li> <li> <code>exchange</code>               (<code>type[Exchange]</code>)           \u2013            <p>description</p> </li> <li> <code>account</code>               (<code>type[Account]</code>)           \u2013            <p>description</p> </li> <li> <code>commander</code>               (<code>type[Commander] | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>plotter</code>               (<code>type[Plotter] | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>stats</code>               (<code>type[BotStatistic] | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>name</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> Source code in <code>lettrade/bot.py</code> <pre><code>def __init__(\n    self,\n    datas: DataFeed | list[DataFeed] | list[str] | str,\n    strategy: type[Strategy],\n    feeder: type[DataFeeder],\n    exchange: type[Exchange],\n    account: type[Account],\n    commander: type[Commander] | None = None,\n    plotter: type[Plotter] | None = None,\n    stats: type[BotStatistic] | None = None,\n    name: str | None = None,\n    **kwargs,\n) -&gt; None:\n    \"\"\"_summary_\n\n    Args:\n        datas (DataFeed | list[DataFeed] | list[str] | str): _description_\n        strategy (type[Strategy]): _description_\n        feeder (type[DataFeeder]): _description_\n        exchange (type[Exchange]): _description_\n        account (type[Account]): _description_\n        commander (type[Commander] | None, optional): _description_. Defaults to None.\n        plotter (type[Plotter] | None, optional): _description_. Defaults to None.\n        stats (type[BotStatistic] | None, optional): _description_. Defaults to None.\n        name (str | None, optional): _description_. Defaults to None.\n    \"\"\"\n    logger.info(\"New bot: %s\", name)\n\n    self._strategy_cls = strategy\n    self._feeder_cls = feeder\n    self._exchange_cls = exchange\n    self._account_cls = account\n    self._commander_cls = commander\n    self._plotter_cls = plotter\n    self._stats_cls = stats\n\n    self._name = name\n    self._kwargs = kwargs\n\n    # DataFeeds\n    self.datas = datas\n    self.data = self.datas[0]\n</code></pre>"},{"location":"reference/bot/#lettrade.bot.LetTradeBot.account","title":"account  <code>instance-attribute</code>","text":"<pre><code>account: Account\n</code></pre> <p>Trading account handler</p>"},{"location":"reference/bot/#lettrade.bot.LetTradeBot.brain","title":"brain  <code>instance-attribute</code>","text":"<pre><code>brain: Brain\n</code></pre> <p>Brain of bot</p>"},{"location":"reference/bot/#lettrade.bot.LetTradeBot.commander","title":"commander  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>commander: Commander | None = None\n</code></pre> <p>Control the bot</p>"},{"location":"reference/bot/#lettrade.bot.LetTradeBot.data","title":"data  <code>instance-attribute</code>","text":"<pre><code>data: DataFeed = datas[0]\n</code></pre> <p>Main DataFeed for bot</p>"},{"location":"reference/bot/#lettrade.bot.LetTradeBot.datas","title":"datas  <code>instance-attribute</code>","text":"<pre><code>datas: list[DataFeed] = datas\n</code></pre> <p>DataFeed list for bot</p>"},{"location":"reference/bot/#lettrade.bot.LetTradeBot.exchange","title":"exchange  <code>instance-attribute</code>","text":"<pre><code>exchange: Exchange\n</code></pre> <p>Trading exchange and events</p>"},{"location":"reference/bot/#lettrade.bot.LetTradeBot.feeder","title":"feeder  <code>instance-attribute</code>","text":"<pre><code>feeder: DataFeeder\n</code></pre> <p>DataFeeder help to handle <code>datas</code></p>"},{"location":"reference/bot/#lettrade.bot.LetTradeBot.plotter","title":"plotter  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>plotter: Plotter | None = None\n</code></pre> <p>Plot graphic results</p>"},{"location":"reference/bot/#lettrade.bot.LetTradeBot.strategy","title":"strategy  <code>instance-attribute</code>","text":"<pre><code>strategy: Strategy\n</code></pre> <p>Strategy</p>"},{"location":"reference/bot/#lettrade.bot.LetTradeBot.init","title":"init","text":"<pre><code>init()\n</code></pre> <p>Init objects from classes</p> Source code in <code>lettrade/bot.py</code> <pre><code>def init(self):\n    \"\"\"Init objects from classes\"\"\"\n    # Feeder\n    self.feeder = self._feeder_cls(**self._kwargs.get(\"feeder_kwargs\", {}))\n    self.feeder.init(self.datas)\n\n    # Account\n    self.account = self._account_cls(**self._kwargs.get(\"account_kwargs\", {}))\n\n    # Exchange\n    self.exchange = self._exchange_cls(**self._kwargs.get(\"exchange_kwargs\", {}))\n\n    # Commander\n    if self._commander_cls:\n        self.commander = self._commander_cls(\n            **self._kwargs.get(\"commander_kwargs\", {})\n        )\n\n    # Strategy\n    self.strategy = self._strategy_cls(\n        feeder=self.feeder,\n        exchange=self.exchange,\n        account=self.account,\n        commander=self.commander,\n        **self._kwargs.get(\"strategy_kwargs\", {}),\n    )\n\n    # Brain\n    self.brain = Brain(\n        strategy=self.strategy,\n        exchange=self.exchange,\n        feeder=self.feeder,\n        commander=self.commander,\n        **self._kwargs.get(\"brain_kwargs\", {}),\n    )\n\n    # Init\n    if self.commander:\n        self.commander.init(\n            bot=self,\n            brain=self.brain,\n            exchange=self.exchange,\n            strategy=self.strategy,\n        )\n    self.exchange.init(\n        brain=self.brain,\n        feeder=self.feeder,\n        account=self.account,\n        commander=self.commander,\n    )\n\n    # Stats\n    self.stats = self._stats_cls(\n        feeder=self.feeder,\n        exchange=self.exchange,\n        strategy=self.strategy,\n        **self._kwargs.get(\"stats_kwargs\", {}),\n    )\n\n    # Plotter\n    if self._plotter_cls:\n        self.plotter = self._plotter_cls(\n            self,\n            **self._kwargs.get(\"plotter_kwargs\", {}),\n        )\n\n    if __debug__:\n        logger.debug(\"Bot %s inited with %d datas\", self._name, len(self.datas))\n</code></pre>"},{"location":"reference/bot/#lettrade.bot.LetTradeBot.new_bot","title":"new_bot  <code>classmethod</code>","text":"<pre><code>new_bot(\n    datas: list[DataFeed],\n    strategy_cls: type[Strategy],\n    feeder_cls: type[DataFeeder],\n    exchange_cls: type[Exchange],\n    account_cls: type[Account],\n    commander_cls: type[Commander],\n    plotter_cls: type[Plotter],\n    stats_cls: type[BotStatistic],\n    name: str | None = None,\n    **kwargs\n) -&gt; LetTradeBot\n</code></pre> <p>Create new bot object</p> <p>Parameters:</p> <ul> <li> <code>datas</code>               (<code>list[DataFeed]</code>)           \u2013            <p>description</p> </li> <li> <code>strategy_cls</code>               (<code>type[Strategy]</code>)           \u2013            <p>description</p> </li> <li> <code>feeder_cls</code>               (<code>type[DataFeeder]</code>)           \u2013            <p>description</p> </li> <li> <code>exchange_cls</code>               (<code>type[Exchange]</code>)           \u2013            <p>description</p> </li> <li> <code>account_cls</code>               (<code>type[Account]</code>)           \u2013            <p>description</p> </li> <li> <code>commander_cls</code>               (<code>type[Commander]</code>)           \u2013            <p>description</p> </li> <li> <code>plotter_cls</code>               (<code>type[Plotter]</code>)           \u2013            <p>description</p> </li> <li> <code>stats_cls</code>               (<code>type[BotStatistic]</code>)           \u2013            <p>description</p> </li> <li> <code>name</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>LetTradeBot</code> (              <code>LetTradeBot</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/bot.py</code> <pre><code>@classmethod\ndef new_bot(\n    cls,\n    datas: list[DataFeed],\n    strategy_cls: type[Strategy],\n    feeder_cls: type[DataFeeder],\n    exchange_cls: type[Exchange],\n    account_cls: type[Account],\n    commander_cls: type[Commander],\n    plotter_cls: type[Plotter],\n    stats_cls: type[BotStatistic],\n    name: str | None = None,\n    **kwargs,\n) -&gt; \"LetTradeBot\":\n    \"\"\"Create new bot object\n\n    Args:\n        datas (list[DataFeed]): _description_\n        strategy_cls (type[Strategy]): _description_\n        feeder_cls (type[DataFeeder]): _description_\n        exchange_cls (type[Exchange]): _description_\n        account_cls (type[Account]): _description_\n        commander_cls (type[Commander]): _description_\n        plotter_cls (type[Plotter]): _description_\n        stats_cls (type[BotStatistic]): _description_\n        name (str | None, optional): _description_. Defaults to None.\n\n    Returns:\n        LetTradeBot: _description_\n    \"\"\"\n    bot = cls(\n        strategy=strategy_cls,\n        datas=datas,\n        feeder=feeder_cls,\n        exchange=exchange_cls,\n        account=account_cls,\n        commander=commander_cls,\n        plotter=plotter_cls,\n        stats=stats_cls,\n        name=name,\n        **kwargs,\n    )\n    return bot\n</code></pre>"},{"location":"reference/bot/#lettrade.bot.LetTradeBot.plot","title":"plot","text":"<pre><code>plot(*args, **kwargs)\n</code></pre> <p>Plot bot result</p> Source code in <code>lettrade/bot.py</code> <pre><code>def plot(self, *args, **kwargs):\n    \"\"\"Plot bot result\"\"\"\n    if __debug__:\n        from .utils.docs import is_docs_session\n\n        if is_docs_session():\n            return\n\n    self.plotter.plot(*args, **kwargs)\n</code></pre>"},{"location":"reference/bot/#lettrade.bot.LetTradeBot.run","title":"run","text":"<pre><code>run()\n</code></pre> <p>Run bot</p> Source code in <code>lettrade/bot.py</code> <pre><code>def run(self):\n    \"\"\"Run bot\"\"\"\n    if self.commander:\n        self.commander.start()\n\n    self.brain.run()\n\n    if self.commander:\n        self.commander.stop()\n\n    if self._stats_cls:\n        self.stats.compute()\n</code></pre>"},{"location":"reference/bot/#lettrade.bot.LetTradeBot.run_bot","title":"run_bot  <code>classmethod</code>","text":"<pre><code>run_bot(\n    bot: LetTradeBot | None = None,\n    datas: list[DataFeed] | None = None,\n    id: int | None = None,\n    name: str | None = None,\n    result: Literal[\"str\", \"stats\", \"bot\", None] = \"str\",\n    **kwargs\n) -&gt; LetTradeBot | BotStatistic | str | None\n</code></pre> <p>Run bot object</p> <p>Parameters:</p> <ul> <li> <code>bot</code>               (<code>LetTradeBot | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>datas</code>               (<code>list[DataFeed] | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>id</code>               (<code>int | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>name</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>result</code>               (<code>Literal['str', 'stats', 'bot', None]</code>, default:                   <code>'str'</code> )           \u2013            <p>description. Defaults to \"str\".</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>LetTradeBot | BotStatistic | str | None</code>           \u2013            <p>LetTradeBot | BotStatistic | str | None: Return value will be pickle across multiprocessing. The cost higher from <code>str</code>, <code>stats</code> object, <code>bot</code> object</p> </li> </ul> Source code in <code>lettrade/bot.py</code> <pre><code>@classmethod\ndef run_bot(\n    cls,\n    bot: \"LetTradeBot | None\" = None,\n    datas: list[DataFeed] | None = None,\n    id: int | None = None,\n    name: str | None = None,\n    result: Literal[\"str\", \"stats\", \"bot\", None] = \"str\",\n    **kwargs,\n) -&gt; \"LetTradeBot | BotStatistic | str | None\":\n    \"\"\"Run bot object\n\n    Args:\n        bot (LetTradeBot | None, optional): _description_. Defaults to None.\n        datas (list[DataFeed] | None, optional): _description_. Defaults to None.\n        id (int | None, optional): _description_. Defaults to None.\n        name (str | None, optional): _description_. Defaults to None.\n        result (Literal[\"str\", \"stats\", \"bot\", None], optional): _description_. Defaults to \"str\".\n\n    Returns:\n        LetTradeBot | BotStatistic | str | None: Return value will be pickle across multiprocessing.\n            The cost higher from `str`, `stats` object, `bot` object\n    \"\"\"\n    # Set name for current processing\n    if name is None:\n        d = datas[0] if datas else bot.data\n        name = f\"{id}-{os.getpid()}-{d.name}\"\n\n    if bot is None:\n        bot = cls.start_bot(\n            datas=datas,\n            name=name,\n            **kwargs,\n        )\n\n    # bot\n    bot.run(**kwargs.get(\"run_kwargs\", {}))\n\n    # Return type\n    if result == \"stats\":\n        return bot.stats\n    if result == \"str\":\n        return str(bot.stats)\n\n    return bot\n</code></pre>"},{"location":"reference/bot/#lettrade.bot.LetTradeBot.start","title":"start","text":"<pre><code>start()\n</code></pre> <p>Start bot</p> Source code in <code>lettrade/bot.py</code> <pre><code>def start(self):\n    \"\"\"Start bot\"\"\"\n    if not hasattr(self, \"brain\"):\n        self.init()\n\n    self.brain.start()\n\n    if __debug__:\n        logger.debug(\"Bot %s started with %d datas\", self._name, len(self.datas))\n</code></pre>"},{"location":"reference/bot/#lettrade.bot.LetTradeBot.start_bot","title":"start_bot  <code>classmethod</code>","text":"<pre><code>start_bot(\n    bot: LetTradeBot | None = None, **kwargs\n) -&gt; LetTradeBot\n</code></pre> <p>Init and start bot object</p> <p>Parameters:</p> <ul> <li> <code>bot</code>               (<code>LetTradeBot | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>LetTradeBot</code> (              <code>LetTradeBot</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/bot.py</code> <pre><code>@classmethod\ndef start_bot(\n    cls,\n    bot: \"LetTradeBot | None\" = None,\n    **kwargs,\n) -&gt; \"LetTradeBot\":\n    \"\"\"Init and start bot object\n\n    Args:\n        bot (LetTradeBot | None, optional): _description_. Defaults to None.\n\n    Returns:\n        LetTradeBot: _description_\n    \"\"\"\n    if bot is None:\n        bot = cls.new_bot(**kwargs)\n    bot.init(**kwargs.get(\"init_kwargs\", {}))\n    bot.start()\n    return bot\n</code></pre>"},{"location":"reference/bot/#lettrade.bot.LetTradeBot.stop","title":"stop","text":"<pre><code>stop()\n</code></pre> <p>Stop bot</p> Source code in <code>lettrade/bot.py</code> <pre><code>def stop(self):\n    \"\"\"Stop bot\"\"\"\n    self.brain.stop()\n    if self.plotter is not None:\n        self.plotter.stop()\n</code></pre>"},{"location":"reference/lettrade/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> lettrade","text":""},{"location":"reference/lettrade/#lettrade.lettrade","title":"lettrade","text":""},{"location":"reference/lettrade/#lettrade.lettrade.LetTrade","title":"LetTrade","text":"<pre><code>LetTrade(\n    datas: DataFeed | list[DataFeed] | str | list[str],\n    strategy: type[Strategy],\n    feeder: type[DataFeeder],\n    exchange: type[Exchange],\n    account: type[Account],\n    commander: type[Commander] | None = None,\n    stats: type[BotStatistic] = BotStatistic,\n    plotter: type[Plotter] | None = None,\n    name: str | None = None,\n    bot: type[LetTradeBot] = LetTradeBot,\n    **kwargs\n)\n</code></pre> <p>Building new bot object and handle multiprocessing</p> <p>Parameters:</p> <ul> <li> <code>datas</code>               (<code>DataFeed | list[DataFeed] | str | list[str]</code>)           \u2013            <p>description</p> </li> <li> <code>strategy</code>               (<code>type[Strategy]</code>)           \u2013            <p>description</p> </li> <li> <code>feeder</code>               (<code>type[DataFeeder]</code>)           \u2013            <p>description</p> </li> <li> <code>exchange</code>               (<code>type[Exchange]</code>)           \u2013            <p>description</p> </li> <li> <code>account</code>               (<code>type[Account]</code>)           \u2013            <p>description</p> </li> <li> <code>commander</code>               (<code>type[Commander] | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>stats</code>               (<code>type[BotStatistic]</code>, default:                   <code>BotStatistic</code> )           \u2013            <p>description. Defaults to BotStatistic.</p> </li> <li> <code>plotter</code>               (<code>type[Plotter] | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>name</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>bot</code>               (<code>type[LetTradeBot]</code>, default:                   <code>LetTradeBot</code> )           \u2013            <p>description. Defaults to LetTradeBot.</p> </li> </ul> Source code in <code>lettrade/lettrade.py</code> <pre><code>def __init__(\n    self,\n    datas: DataFeed | list[DataFeed] | str | list[str],\n    strategy: type[Strategy],\n    feeder: type[DataFeeder],\n    exchange: type[Exchange],\n    account: type[Account],\n    commander: type[Commander] | None = None,\n    stats: type[BotStatistic] = BotStatistic,\n    plotter: type[Plotter] | None = None,\n    name: str | None = None,\n    bot: type[LetTradeBot] = LetTradeBot,\n    **kwargs,\n) -&gt; None:\n    \"\"\"_summary_\n\n    Args:\n        datas (DataFeed | list[DataFeed] | str | list[str]): _description_\n        strategy (type[Strategy]): _description_\n        feeder (type[DataFeeder]): _description_\n        exchange (type[Exchange]): _description_\n        account (type[Account]): _description_\n        commander (type[Commander] | None, optional): _description_. Defaults to None.\n        stats (type[BotStatistic], optional): _description_. Defaults to BotStatistic.\n        plotter (type[Plotter] | None, optional): _description_. Defaults to None.\n        name (str | None, optional): _description_. Defaults to None.\n        bot (type[LetTradeBot], optional): _description_. Defaults to LetTradeBot.\n    \"\"\"\n    self._kwargs = kwargs\n    self._kwargs[\"strategy_cls\"] = strategy\n    self._kwargs[\"feeder_cls\"] = feeder\n    self._kwargs[\"exchange_cls\"] = exchange\n    self._kwargs[\"account_cls\"] = account\n    self._kwargs[\"commander_cls\"] = commander\n    self._kwargs[\"stats_cls\"] = stats\n    self._kwargs[\"plotter_cls\"] = plotter\n    self._kwargs[\"bot_cls\"] = bot\n    self._kwargs[\"name\"] = name\n\n    self._kwargs[\"datas\"] = self._init_datafeeds(datas)\n</code></pre>"},{"location":"reference/lettrade/#lettrade.lettrade.LetTrade.plot","title":"plot","text":"<pre><code>plot(*args, jump: dict | None = None, **kwargs)\n</code></pre> <p>Plot strategy/optimize result</p> BotPlotter <p>Miror of BotPlotter.plot(). Plotly implement PlotlyBotPlotter.plot().</p> <p>Args:     <code>jump</code> (dict | None, optional): Miror of BotPlotter.jump()</p> <p>Example:     Jump to position_id         <pre><code>lt.plot(\n    jump=dict(position_id=1, range=300),\n    layout=dict(height=2000),\n)\n</code></pre></p> OptimizePlotter <p>Miror of OptimizePlotter.plot(). Plotly implement PlotlyOptimizePlotter.plot().</p> <p>Example:         <pre><code>lt.plot(layout=dict(height=2000))\n</code></pre></p> Source code in <code>lettrade/lettrade.py</code> <pre><code>def plot(self, *args, jump: dict | None = None, **kwargs):\n    \"\"\"Plot strategy/optimize result\n\n    BotPlotter:\n        Miror of [BotPlotter.plot()](site:/reference/plot/bot/#lettrade.plot.bot.BotPlotter.plot).\n        Plotly implement [PlotlyBotPlotter.plot()](site:/reference/plot/plotly/plotly/#lettrade.plot.plotly.plotly.PlotlyBotPlotter.plot).\n\n        Args:\n            `jump` (dict | None, optional): Miror of [BotPlotter.jump()](site:/reference/plot/bot/#lettrade.plot.bot.BotPlotter.jump)\n\n        Example:\n            Jump to position_id\n                ```python\n                lt.plot(\n                    jump=dict(position_id=1, range=300),\n                    layout=dict(height=2000),\n                )\n                ```\n\n    OptimizePlotter:\n        Miror of [OptimizePlotter.plot()](site:/reference/plot/optimize/#lettrade.plot.optimize.OptimizePlotter.plot).\n        Plotly implement [PlotlyOptimizePlotter.plot()](site:/reference/exchange/backtest/plotly/optimize/#lettrade.exchange.backtest.plotly.optimize.PlotlyOptimizePlotter.plot).\n\n        Example:\n                ```python\n                lt.plot(layout=dict(height=2000))\n                ```\n    \"\"\"\n    if __debug__:\n        from .utils.docs import is_docs_session\n\n        if is_docs_session():\n            return\n\n    self.plotter.plot(*args, jump=jump, **kwargs)\n</code></pre>"},{"location":"reference/lettrade/#lettrade.lettrade.LetTrade.run","title":"run","text":"<pre><code>run(worker: int | None = None, **kwargs)\n</code></pre> <p>Run LetTrade in single or multiple processing</p> <p>Parameters:</p> <ul> <li> <code>worker</code>               (<code>int | None</code>, default:                   <code>None</code> )           \u2013            <p>Number of processing. Defaults to None.</p> </li> </ul> Source code in <code>lettrade/lettrade.py</code> <pre><code>def run(self, worker: int | None = None, **kwargs):\n    \"\"\"Run LetTrade in single or multiple processing\n\n    Args:\n        worker (int | None, optional): Number of processing. Defaults to None.\n    \"\"\"\n    if worker or isinstance(self.data, list):\n        if not isinstance(self.data, list):\n            # self.data = self.datas\n            self.datas = [self.data]\n\n        worker = self._max_workers(worker)\n\n        self._multiprocess()\n\n        datas_source = self._kwargs.pop(\"datas\")\n        with ProcessPoolExecutor(max_workers=worker) as executor:\n            futures = [\n                executor.submit(\n                    self._bot_cls.run_bot,\n                    datas=datas,\n                    id=i,\n                    result=\"str\",\n                    **self._kwargs,\n                )\n                for i, datas in enumerate(datas_source)\n            ]\n            for future in futures:\n                result = future.result()\n                print(result)\n    else:\n        self._bot = self._bot_cls.run_bot(\n            bot=self._bot,\n            result=\"bot\",\n            **self._kwargs,\n        )\n        print(str(self._bot.stats))\n</code></pre>"},{"location":"reference/lettrade/#lettrade.lettrade.LetTrade.start","title":"start","text":"<pre><code>start(force: bool = False)\n</code></pre> <p>Start LetTrade by init bot object and loading datafeeds</p> <p>Parameters:</p> <ul> <li> <code>force</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>description. Defaults to False.</p> </li> </ul> Source code in <code>lettrade/lettrade.py</code> <pre><code>def start(self, force: bool = False):\n    \"\"\"Start LetTrade by init bot object and loading datafeeds\n\n    Args:\n        force (bool, optional): _description_. Defaults to False.\n    \"\"\"\n    if force and self._bot is not None:\n        self._bot = None\n\n    self._bot = self._bot_cls.start_bot(bot=self._bot, **self._kwargs)\n</code></pre>"},{"location":"reference/lettrade/#lettrade.lettrade.LetTrade.stop","title":"stop","text":"<pre><code>stop()\n</code></pre> <p>Stop LetTrade</p> Source code in <code>lettrade/lettrade.py</code> <pre><code>def stop(self):\n    \"\"\"Stop LetTrade\"\"\"\n    if self._bot is not None:\n        return self._bot.stop()\n    if self.stats:\n        self.stats.stop()\n</code></pre>"},{"location":"reference/account/","title":"Index","text":""},{"location":"reference/account/#lettrade.account","title":"account","text":""},{"location":"reference/account/account/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> account","text":""},{"location":"reference/account/account/#lettrade.account.account","title":"account","text":""},{"location":"reference/account/account/#lettrade.account.account.Account","title":"Account","text":"<pre><code>Account(\n    risk: float = 0.02,\n    balance: float = 10000,\n    margin: float = 1.0,\n    leverage: float = 1.0,\n    type: AccountType = AccountType.Hedging,\n    **kwargs\n)\n</code></pre> <p>Manage account balance, leverage, commission. Risk calculate and control</p> <p>Parameters:</p> <ul> <li> <code>risk</code>               (<code>float</code>, default:                   <code>0.02</code> )           \u2013            <p>description. Defaults to 0.02.</p> </li> <li> <code>balance</code>               (<code>float</code>, default:                   <code>10000</code> )           \u2013            <p>description. Defaults to 10_000.</p> </li> <li> <code>margin</code>               (<code>float</code>, default:                   <code>1.0</code> )           \u2013            <p>description. Defaults to 1.0.</p> </li> <li> <code>leverage</code>               (<code>float</code>, default:                   <code>1.0</code> )           \u2013            <p>description. Defaults to 1.0.</p> </li> <li> <code>**kwargs</code>               (<code>dict</code>, default:                   <code>{}</code> )           \u2013            <p>Config of account. Defaults to {}.</p> </li> </ul> Source code in <code>lettrade/account/account.py</code> <pre><code>def __init__(\n    self,\n    risk: float = 0.02,\n    balance: float = 10_000,\n    margin: float = 1.0,\n    leverage: float = 1.0,\n    type: AccountType = AccountType.Hedging,\n    **kwargs,\n) -&gt; None:\n    \"\"\"_summary_\n\n    Args:\n        risk (float, optional): _description_. Defaults to 0.02.\n        balance (float, optional): _description_. Defaults to 10_000.\n        margin (float, optional): _description_. Defaults to 1.0.\n        leverage (float, optional): _description_. Defaults to 1.0.\n        **kwargs (dict, optional): Config of account. Defaults to {}.\n    \"\"\"\n    self._risk = risk\n    self._balance = balance\n    self._margin = margin\n    self._leverage = leverage\n    self._type = type\n    self._config = kwargs\n\n    self._equities = dict()\n\n    self._do_equity_snapshot = True  # Snapshot balance\n</code></pre>"},{"location":"reference/account/account/#lettrade.account.account.Account.balance","title":"balance  <code>property</code>","text":"<pre><code>balance: float\n</code></pre> <p>Balance of account</p> <p>Returns:</p> <ul> <li> <code>float</code> (              <code>float</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/account/account/#lettrade.account.account.Account.equity","title":"equity  <code>abstractmethod</code> <code>property</code>","text":"<pre><code>equity: float\n</code></pre> <p>Equity value of account</p> <p>Returns:</p> <ul> <li> <code>float</code> (              <code>float</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/account/account/#lettrade.account.account.Account.next","title":"next","text":"<pre><code>next()\n</code></pre> <p>Next account</p> Source code in <code>lettrade/account/account.py</code> <pre><code>def next(self):\n    \"\"\"Next account\"\"\"\n</code></pre>"},{"location":"reference/account/account/#lettrade.account.account.Account.next_next","title":"next_next","text":"<pre><code>next_next()\n</code></pre> <p>Call after strategy.next()</p> Source code in <code>lettrade/account/account.py</code> <pre><code>def next_next(self):\n    \"\"\"Call after strategy.next()\"\"\"\n    self._equity_snapshot()\n</code></pre>"},{"location":"reference/account/account/#lettrade.account.account.Account.on_positions","title":"on_positions","text":"<pre><code>on_positions(positions: list[Position])\n</code></pre> <p>Event positions updated</p> Source code in <code>lettrade/account/account.py</code> <pre><code>def on_positions(self, positions: list[\"Position\"]):\n    \"\"\"Event positions updated\"\"\"\n    if not self._do_equity_snapshot:\n        self._do_equity_snapshot = True\n</code></pre>"},{"location":"reference/account/account/#lettrade.account.account.Account.pl","title":"pl","text":"<pre><code>pl(size, entry_price: float, exit_price=None) -&gt; float\n</code></pre> <p>Estimate temporary profit and loss</p> Source code in <code>lettrade/account/account.py</code> <pre><code>def pl(self, size, entry_price: float, exit_price=None) -&gt; float:\n    \"\"\"Estimate temporary profit and loss\"\"\"\n    if exit_price is None:\n        exit_price = self._exchange.data.l.open[0]\n\n    return size * (exit_price - entry_price)\n</code></pre>"},{"location":"reference/account/account/#lettrade.account.account.Account.risk","title":"risk","text":"<pre><code>risk(side: TradeSide, size: float, **kwargs) -&gt; float\n</code></pre> <p>Risk calculation</p> Source code in <code>lettrade/account/account.py</code> <pre><code>def risk(self, side: \"TradeSide\", size: float, **kwargs) -&gt; float:\n    \"\"\"Risk calculation\"\"\"\n    if size is None:\n        return side * abs(self._risk)\n    return side * abs(size)\n</code></pre>"},{"location":"reference/account/account/#lettrade.account.account.Account.start","title":"start","text":"<pre><code>start()\n</code></pre> <p>Start account</p> Source code in <code>lettrade/account/account.py</code> <pre><code>def start(self):\n    \"\"\"Start account\"\"\"\n</code></pre>"},{"location":"reference/account/account/#lettrade.account.account.Account.stop","title":"stop","text":"<pre><code>stop()\n</code></pre> <p>Stop account</p> Source code in <code>lettrade/account/account.py</code> <pre><code>def stop(self):\n    \"\"\"Stop account\"\"\"\n    try:\n        self._equity_snapshot()\n    except LetAccountInsufficientException:\n        pass\n</code></pre>"},{"location":"reference/account/account/#lettrade.account.account.AccountType","title":"AccountType","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p>"},{"location":"reference/account/account/#lettrade.account.account.AccountType.Hedging","title":"Hedging  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Hedging = 'hedging'\n</code></pre>"},{"location":"reference/account/account/#lettrade.account.account.AccountType.Speculation","title":"Speculation  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Speculation = 'speculation'\n</code></pre>"},{"location":"reference/account/error/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> error","text":""},{"location":"reference/account/error/#lettrade.account.error","title":"error","text":""},{"location":"reference/account/error/#lettrade.account.error.LetAccountInsufficientException","title":"LetAccountInsufficientException","text":"<p>               Bases: <code>LetException</code></p> <p>Account is insufficient exception</p>"},{"location":"reference/base/","title":"Index","text":""},{"location":"reference/base/#lettrade.base","title":"base","text":""},{"location":"reference/base/error/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> error","text":""},{"location":"reference/base/error/#lettrade.base.error","title":"error","text":""},{"location":"reference/base/error/#lettrade.base.error.LetException","title":"LetException","text":"<p>               Bases: <code>Exception</code></p> <p>Base LetTrade exception</p>"},{"location":"reference/base/flag/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> flag","text":""},{"location":"reference/base/flag/#lettrade.base.flag","title":"flag","text":""},{"location":"reference/base/flag/#lettrade.base.flag.validate_data_getitem_pointer","title":"validate_data_getitem_pointer  <code>module-attribute</code>","text":"<pre><code>validate_data_getitem_pointer: bool = False\n</code></pre> <p>Flag to validate <code>DataFeed</code> get data by pointer but doesn't has prefix <code>DataFeed.l.</code></p>"},{"location":"reference/base/flag/#lettrade.base.flag.validate_strategy_trade","title":"validate_strategy_trade  <code>module-attribute</code>","text":"<pre><code>validate_strategy_trade: bool = False\n</code></pre> <p>Flag to validate trading object is not writing attribute from strategy</p>"},{"location":"reference/brain/","title":"Index","text":""},{"location":"reference/brain/#lettrade.brain","title":"brain","text":""},{"location":"reference/brain/brain/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> brain","text":""},{"location":"reference/brain/brain/#lettrade.brain.brain","title":"brain","text":""},{"location":"reference/brain/brain/#lettrade.brain.brain.Brain","title":"Brain","text":"<pre><code>Brain(\n    strategy: Strategy,\n    exchange: Exchange,\n    feeder: DataFeeder,\n    commander: Commander,\n    **kwargs\n)\n</code></pre> <p>Brain of bot</p> <p>Parameters:</p> <ul> <li> <code>strategy</code>               (<code>Strategy</code>)           \u2013            <p>description</p> </li> <li> <code>exchange</code>               (<code>Exchange</code>)           \u2013            <p>description</p> </li> <li> <code>feeder</code>               (<code>DataFeeder</code>)           \u2013            <p>description</p> </li> <li> <code>commander</code>               (<code>Commander</code>)           \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/brain/brain.py</code> <pre><code>def __init__(\n    self,\n    strategy: Strategy,\n    exchange: Exchange,\n    feeder: DataFeeder,\n    commander: Commander,\n    **kwargs,\n) -&gt; None:\n    \"\"\"_summary_\n\n    Args:\n        strategy (Strategy): _description_\n        exchange (Exchange): _description_\n        feeder (DataFeeder): _description_\n        commander (Commander): _description_\n    \"\"\"\n    self.strategy = strategy\n    self.exchange = exchange\n    self.feeder = feeder\n    self.commander = commander\n\n    # self.datas = self.feeder.datas\n    self.data = self.feeder.data\n</code></pre>"},{"location":"reference/brain/brain/#lettrade.brain.brain.Brain.on_executions","title":"on_executions","text":"<pre><code>on_executions(executions: list[Execution])\n</code></pre> <p>Receive new <code>Execution</code> event and send to <code>Strategy</code></p> Source code in <code>lettrade/brain/brain.py</code> <pre><code>def on_executions(self, executions: list[Execution]):\n    \"\"\"Receive new `Execution` event and send to `Strategy`\"\"\"\n    self.on_transactions(executions)\n    self.strategy.on_executions(executions)\n</code></pre>"},{"location":"reference/brain/brain/#lettrade.brain.brain.Brain.on_notify","title":"on_notify","text":"<pre><code>on_notify(*args, **kwargs)\n</code></pre> <p>Receive new notify and send to Strategy</p> Source code in <code>lettrade/brain/brain.py</code> <pre><code>def on_notify(self, *args, **kwargs):\n    \"\"\"Receive new notify and send to Strategy\"\"\"\n    self.strategy.on_notify(*args, **kwargs)\n</code></pre>"},{"location":"reference/brain/brain/#lettrade.brain.brain.Brain.on_orders","title":"on_orders","text":"<pre><code>on_orders(orders: list[Order])\n</code></pre> <p>Receive new <code>Order</code> event and send to <code>Strategy</code></p> Source code in <code>lettrade/brain/brain.py</code> <pre><code>def on_orders(self, orders: list[Order]):\n    \"\"\"Receive new `Order` event and send to `Strategy`\"\"\"\n    self.on_transactions(orders)\n    self.strategy.on_orders(orders)\n</code></pre>"},{"location":"reference/brain/brain/#lettrade.brain.brain.Brain.on_positions","title":"on_positions","text":"<pre><code>on_positions(positions: list[Position])\n</code></pre> <p>Receive new <code>Position</code> event and send to <code>Strategy</code></p> Source code in <code>lettrade/brain/brain.py</code> <pre><code>def on_positions(self, positions: list[Position]):\n    \"\"\"Receive new `Position` event and send to `Strategy`\"\"\"\n    self.on_transactions(positions)\n    self.strategy.on_positions(positions)\n</code></pre>"},{"location":"reference/brain/brain/#lettrade.brain.brain.Brain.on_transactions","title":"on_transactions","text":"<pre><code>on_transactions(transactions)\n</code></pre> <p>Receive new transaction event and send to <code>Strategy</code></p> Source code in <code>lettrade/brain/brain.py</code> <pre><code>def on_transactions(self, transactions):\n    \"\"\"Receive new transaction event and send to `Strategy`\"\"\"\n    if self.commander is not None:\n        # TODO: send message to commander when new transaction\n        self.commander.send_message(f\"New transactions: {str(transactions)}\")\n\n    self.strategy.on_transactions(transactions)\n</code></pre>"},{"location":"reference/brain/brain/#lettrade.brain.brain.Brain.run","title":"run","text":"<pre><code>run()\n</code></pre> <p>Run the trading bot</p> Source code in <code>lettrade/brain/brain.py</code> <pre><code>def run(self):\n    \"\"\"Run the trading bot\"\"\"\n\n    while self.feeder.alive():\n        # Load feeder next data\n        try:\n            self.feeder.next()\n            self.exchange.next()\n            self.strategy._next()\n            self.exchange.next_next()\n        except LetOrderValidateException as e:\n            logger.error(\n                \"[%s] Order validates exception\",\n                self.data.now,\n                exc_info=e,\n            )\n            continue\n        except LetAccountInsufficientException as e:\n            logger.error(\"Account equity is insufficient\", exc_info=e)\n            break\n        except LetNoMoreDataFeedException:\n            break\n        except Exception as e:\n            logger.exception(\"Bot running error\", exc_info=e)\n            break\n\n    self.strategy._stop()\n</code></pre>"},{"location":"reference/brain/brain/#lettrade.brain.brain.Brain.stop","title":"stop","text":"<pre><code>stop()\n</code></pre> <p>Stop the trading bot</p> Source code in <code>lettrade/brain/brain.py</code> <pre><code>def stop(self):\n    \"\"\"Stop the trading bot\"\"\"\n    self.feeder.stop()\n    self.exchange.stop()\n</code></pre>"},{"location":"reference/calendar/","title":"Index","text":""},{"location":"reference/calendar/#lettrade.calendar","title":"calendar","text":""},{"location":"reference/calendar/calendar/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> calendar","text":""},{"location":"reference/calendar/calendar/#lettrade.calendar.calendar","title":"calendar","text":""},{"location":"reference/commander/","title":"Index","text":""},{"location":"reference/commander/#lettrade.commander","title":"commander","text":""},{"location":"reference/commander/commander/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> commander","text":""},{"location":"reference/commander/commander/#lettrade.commander.commander","title":"commander","text":""},{"location":"reference/commander/commander/#lettrade.commander.commander.Commander","title":"Commander","text":"<p>               Bases: <code>ABC</code></p> <p>Abstract class for strategy commander. Help to manage and report strategy real-time</p>"},{"location":"reference/commander/commander/#lettrade.commander.commander.Commander.init","title":"init","text":"<pre><code>init(\n    bot: LetTradeBot,\n    brain: Brain,\n    exchange: Exchange,\n    strategy: Strategy,\n)\n</code></pre> <p>Init commander dependencies</p> <p>Parameters:</p> <ul> <li> <code>bot</code>               (<code>LetTradeBot</code>)           \u2013            <p>LetTradeBot object</p> </li> <li> <code>brain</code>               (<code>Brain</code>)           \u2013            <p>Brain of bot</p> </li> <li> <code>exchange</code>               (<code>Exchange</code>)           \u2013            <p>Manage bot trading</p> </li> <li> <code>strategy</code>               (<code>Strategy</code>)           \u2013            <p>Strategy of bot</p> </li> </ul> Source code in <code>lettrade/commander/commander.py</code> <pre><code>def init(\n    self,\n    bot: \"LetTradeBot\",\n    brain: \"Brain\",\n    exchange: \"Exchange\",\n    strategy: \"Strategy\",\n):\n    \"\"\"Init commander dependencies\n\n    Args:\n        bot (LetTradeBot): LetTradeBot object\n        brain (Brain): Brain of bot\n        exchange (Exchange): Manage bot trading\n        strategy (Strategy): Strategy of bot\n    \"\"\"\n    self.bot = bot\n    self.brain = brain\n    self.exchange = exchange\n    self.strategy = strategy\n\n    self._name = self.bot._name\n</code></pre>"},{"location":"reference/commander/telegram/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> telegram","text":""},{"location":"reference/commander/telegram/#lettrade.commander.telegram","title":"telegram","text":"<p>Module help LetTrade send notify and receive command from Telegram Bot</p>"},{"location":"reference/commander/telegram/#lettrade.commander.telegram--example","title":"Example","text":"Example <pre><code>import os\nfrom datetime import datetime\n\nimport talib.abstract as ta\nfrom dotenv import load_dotenv\n\nfrom lettrade import indicator as i\n\n# import example.logger\nfrom lettrade.all import DataFeed, Strategy, TelegramCommander, let_metatrader\n\nload_dotenv()\n\n\nclass SmaCross(Strategy):\n    ema1_window = 9\n    ema2_window = 21\n\n    _now: datetime\n\n    def indicators(self, df: DataFeed):\n        df[\"ema1\"] = ta.EMA(df, timeperiod=self.ema1_window)\n        df[\"ema2\"] = ta.EMA(df, timeperiod=self.ema2_window)\n\n        df[\"signal_ema_crossover\"] = i.crossover(df.ema1, df.ema2)\n        df[\"signal_ema_crossunder\"] = i.crossunder(df.ema1, df.ema2)\n        return df\n\n    def start(self, df: DataFeed):\n        self._now = df.now\n\n    def next(self, df: DataFeed):\n        if self.is_live:\n            # Filter start of new bar\n            if self._now == df.now:\n                return\n            self._now = df.now\n\n        if len(self.orders) &gt; 0 or len(self.positions) &gt; 0:\n            return\n\n        if df.l[\"signal_ema_crossover\"][-1]:\n            price = self.data.l[\"close\"][-1]\n            self.buy(size=0.1, sl=price - 0.01, tp=price + 0.01)\n        elif df.l[\"signal_ema_crossunder\"][-1]:\n            price = self.data.l[\"close\"][-1]\n            self.sell(size=0.1, sl=price + 0.01, tp=price - 0.01)\n\n    def stop(self, df: DataFeed):\n        print(df.tail())\n        print(self.orders)\n\n    def plot(self, config: dict, df: DataFeed):\n        return dict(\n            scatters=[\n                dict(\n                    x=df.index,\n                    y=df[\"ema1\"],\n                    line=dict(color=\"blue\", width=1),\n                    name=\"ema1\",\n                ),\n                dict(\n                    x=df.index,\n                    y=df[\"ema2\"],\n                    line=dict(color=\"green\", width=1),\n                    name=\"ema2\",\n                ),\n            ]\n        )\n\n\nif __name__ == \"__main__\":\n    lt = let_metatrader(\n        strategy=SmaCross,\n        datas=[(\"EURGBP\", \"5m\")],\n        mt5_login=os.getenv(\"MT5_LOGIN\"),\n        mt5_password=os.getenv(\"MT5_PASSWORD\"),\n        mt5_server=os.getenv(\"MT5_SERVER\"),\n        mt5_wine=os.getenv(\"MT5_WINE\", None),\n        commander=TelegramCommander,\n        commander_kwargs=dict(\n            token=os.getenv(\"TELEGRAM_TOKEN\"),\n            chat_id=os.getenv(\"TELEGRAM_CHAT_ID\"),\n        ),\n    )\n\n    lt.run()\n</code></pre>"},{"location":"reference/commander/telegram/#lettrade.commander.telegram.TelegramAPI","title":"TelegramAPI","text":"<pre><code>TelegramAPI(token: str, chat_id: int, *args, **kwargs)\n</code></pre> <p>Singleton object communicate across multipprocessing</p> Source code in <code>lettrade/commander/telegram.py</code> <pre><code>def __init__(self, token: str, chat_id: int, *args, **kwargs) -&gt; None:\n    self._token: str = token\n    self._chat_id: int = int(chat_id)\n    self._bots_queue = dict()\n    self._bot_selected = None\n</code></pre>"},{"location":"reference/commander/telegram/#lettrade.commander.telegram.TelegramAPI.cleanup","title":"cleanup","text":"<pre><code>cleanup() -&gt; None\n</code></pre> <p>Stops all running telegram threads.</p> Source code in <code>lettrade/commander/telegram.py</code> <pre><code>def cleanup(self) -&gt; None:\n    \"\"\"Stops all running telegram threads.\"\"\"\n    # This can take up to `timeout` from the call to `start_polling`.\n    asyncio.run_coroutine_threadsafe(self._cleanup_telegram(), self._loop)\n    self._thread.join()\n</code></pre>"},{"location":"reference/commander/telegram/#lettrade.commander.telegram.TelegramAPI.send_message","title":"send_message","text":"<pre><code>send_message(msg: str, pname: str, **kwargs) -&gt; None\n</code></pre> <p>Send message to Telegram Bot</p> <p>Parameters:</p> <ul> <li> <code>msg</code>               (<code>str</code>)           \u2013            <p>Message</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>_type_</code> (              <code>None</code> )          \u2013            <p><code>None</code></p> </li> </ul> Source code in <code>lettrade/commander/telegram.py</code> <pre><code>def send_message(self, msg: str, pname: str, **kwargs) -&gt; None:\n    \"\"\"Send message to Telegram Bot\n\n    Args:\n        msg (str): Message\n\n    Returns:\n        _type_: `None`\n    \"\"\"\n    msg = f\"*[Process: {pname}]*\\n\\n{escape_markdown(msg)}\"\n    asyncio.run_coroutine_threadsafe(self._send_msg(msg, **kwargs), self._loop)\n</code></pre>"},{"location":"reference/commander/telegram/#lettrade.commander.telegram.TelegramAPI.start","title":"start","text":"<pre><code>start(pname: str, action_queue: Queue)\n</code></pre> <p>Start</p> Source code in <code>lettrade/commander/telegram.py</code> <pre><code>def start(self, pname: str, action_queue: Queue):\n    \"\"\"Start\"\"\"\n    if pname in self._bots_queue:\n        logger.warning(\"Process name %s override existed action queue\", pname)\n    self._bots_queue[pname] = action_queue\n\n    logger.info(\"New join process: %s\", pname)\n\n    # TODO: Lock for safe multipleprocessing\n    if hasattr(self, \"_keyboard\"):\n        return\n\n    self._init_keyboard()\n    self._start_thread()\n</code></pre>"},{"location":"reference/commander/telegram/#lettrade.commander.telegram.TelegramCommander","title":"TelegramCommander","text":"<pre><code>TelegramCommander(\n    token: str,\n    chat_id: int,\n    api: TelegramAPI | None = None,\n    *args,\n    **kwargs\n)\n</code></pre> <p>               Bases: <code>Commander</code></p> <p>Send notify and receive command from Telegram Bot</p> <p>Parameters:</p> <ul> <li> <code>token</code>               (<code>str</code>)           \u2013            <p>Telegram Bot token</p> </li> <li> <code>chat_id</code>               (<code>int</code>)           \u2013            <p>Telegram chat_id</p> </li> </ul> Source code in <code>lettrade/commander/telegram.py</code> <pre><code>def __init__(\n    self,\n    token: str,\n    chat_id: int,\n    api: TelegramAPI | None = None,\n    *args,\n    **kwargs,\n) -&gt; None:\n    \"\"\"_summary_\n\n    Args:\n        token (str): Telegram Bot token\n        chat_id (int): Telegram chat_id\n    \"\"\"\n    super().__init__(*args, **kwargs)\n    self._api = api or TelegramAPI(token=token, chat_id=chat_id)\n    self._is_running = True\n</code></pre>"},{"location":"reference/commander/telegram/#lettrade.commander.telegram.TelegramCommander.init","title":"init","text":"<pre><code>init(\n    bot: LetTradeBot,\n    brain: Brain,\n    exchange: Exchange,\n    strategy: Strategy,\n)\n</code></pre> <p>Init commander dependencies</p> <p>Parameters:</p> <ul> <li> <code>bot</code>               (<code>LetTradeBot</code>)           \u2013            <p>LetTradeBot object</p> </li> <li> <code>brain</code>               (<code>Brain</code>)           \u2013            <p>Brain of bot</p> </li> <li> <code>exchange</code>               (<code>Exchange</code>)           \u2013            <p>Manage bot trading</p> </li> <li> <code>strategy</code>               (<code>Strategy</code>)           \u2013            <p>Strategy of bot</p> </li> </ul> Source code in <code>lettrade/commander/commander.py</code> <pre><code>def init(\n    self,\n    bot: \"LetTradeBot\",\n    brain: \"Brain\",\n    exchange: \"Exchange\",\n    strategy: \"Strategy\",\n):\n    \"\"\"Init commander dependencies\n\n    Args:\n        bot (LetTradeBot): LetTradeBot object\n        brain (Brain): Brain of bot\n        exchange (Exchange): Manage bot trading\n        strategy (Strategy): Strategy of bot\n    \"\"\"\n    self.bot = bot\n    self.brain = brain\n    self.exchange = exchange\n    self.strategy = strategy\n\n    self._name = self.bot._name\n</code></pre>"},{"location":"reference/commander/telegram/#lettrade.commander.telegram.TelegramCommander.start","title":"start","text":"<pre><code>start()\n</code></pre> <p>Start</p> Source code in <code>lettrade/commander/telegram.py</code> <pre><code>def start(self):\n    \"\"\"Start\"\"\"\n    logger.info(\"TelegramCommander start %s\", self._name)\n    q = self._t_action()\n    self._api.start(pname=self._name, action_queue=q)\n</code></pre>"},{"location":"reference/commander/telegram/#lettrade.commander.telegram.TelegramCommander.stop","title":"stop","text":"<pre><code>stop()\n</code></pre> <p>Stop</p> Source code in <code>lettrade/commander/telegram.py</code> <pre><code>def stop(self):\n    \"\"\"Stop\"\"\"\n    logger.info(\"TelegramCommander stop %s\", self._name)\n    self._api.cleanup()\n    self._is_running = False\n</code></pre>"},{"location":"reference/commander/telegram/#lettrade.commander.telegram.authorized_only","title":"authorized_only","text":"<pre><code>authorized_only(\n    command_handler: Callable[\n        ..., Coroutine[Any, Any, None]\n    ]\n)\n</code></pre> <p>Decorator to check if the message comes from the correct chat_id</p> <p>Parameters:</p> <ul> <li> <code>command_handler</code>               (<code>Callable[..., Coroutine[Any, Any, None]]</code>)           \u2013            <p>Telegram CommandHandler</p> </li> </ul> Source code in <code>lettrade/commander/telegram.py</code> <pre><code>def authorized_only(command_handler: Callable[..., Coroutine[Any, Any, None]]):\n    \"\"\"Decorator to check if the message comes from the correct chat_id\n\n    Args:\n        command_handler (Callable[..., Coroutine[Any, Any, None]]): Telegram CommandHandler\n    \"\"\"\n\n    @wraps(command_handler)\n    async def wrapper(self: \"TelegramCommander\", *args, **kwargs):\n        \"\"\"Decorator logic\"\"\"\n        update = kwargs.get(\"update\") or args[0]\n\n        # Reject unauthorized messages\n        if update.callback_query:\n            cchat_id = int(update.callback_query.message.chat.id)\n        else:\n            cchat_id = int(update.message.chat_id)\n\n        if cchat_id != self._chat_id:\n            logger.info(f\"Rejected unauthorized message from: {update.message.chat_id}\")\n            return wrapper\n\n        logger.debug(\n            \"Executing handler: %s for chat_id: %s\",\n            command_handler.__name__,\n            self._chat_id,\n        )\n        try:\n            return await command_handler(self, *args, **kwargs)\n        except Exception as e:\n            await self._send_msg(str(e))\n            # except BaseException:\n            logger.exception(\"Exception occurred within Telegram module\", exc_info=e)\n\n    return wrapper\n</code></pre>"},{"location":"reference/data/","title":"Index","text":""},{"location":"reference/data/#lettrade.data","title":"data","text":""},{"location":"reference/data/data/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> data","text":""},{"location":"reference/data/data/#lettrade.data.data","title":"data","text":""},{"location":"reference/data/data/#lettrade.data.data.DataFeed","title":"DataFeed","text":"<pre><code>DataFeed(\n    *args,\n    name: str,\n    timeframe: TimeFrame,\n    meta: dict | None = None,\n    **kwargs\n)\n</code></pre> <p>               Bases: <code>DataFrame</code></p> <p>Data for Strategy. A implement of pandas.DataFrame</p> <p>Parameters:</p> <ul> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>description</p> </li> <li> <code>timeframe</code>               (<code>TimeFrame</code>)           \u2013            <p>description</p> </li> <li> <code>meta</code>               (<code>dict | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/data/data.py</code> <pre><code>def __init__(\n    self,\n    *args,\n    name: str,\n    timeframe: TimeFrame,\n    meta: dict | None = None,\n    **kwargs,\n) -&gt; None:\n    \"\"\"_summary_\n\n    Args:\n        name (str): _description_\n        timeframe (TimeFrame): _description_\n        meta (dict | None, optional): _description_. Defaults to None.\n\n    Raises:\n        RuntimeError: _description_\n    \"\"\"\n    # Validate\n    if not _data_name_pattern.match(name):\n        raise RuntimeError(\n            f\"Bot name {name} is not valid format {_data_name_pattern}\"\n        )\n\n    # Init\n    super().__init__(*args, **kwargs)\n    self._init_index()\n\n    # Metadata\n    if not meta:\n        meta = dict()\n    meta[\"name\"] = name\n    meta[\"timeframe\"] = TimeFrame(timeframe)\n    self.attrs = {\"lt_meta\": meta}\n\n    # LetWrapper\n    object.__setattr__(self, \"l\", LetDataFeedWrapper(self))\n</code></pre>"},{"location":"reference/data/data/#lettrade.data.data.DataFeed.i","title":"i  <code>property</code>","text":"<pre><code>i: indicator\n</code></pre> <p>Alias to <code>lettrade.indicator</code> and using in DataFeed by call: <code>DataFeed.i.indicator_name()</code></p>"},{"location":"reference/data/data/#lettrade.data.data.DataFeed.is_main","title":"is_main  <code>property</code>","text":"<pre><code>is_main: bool\n</code></pre> <p>Property to check DataFeed is main DataFeed or not</p>"},{"location":"reference/data/data/#lettrade.data.data.DataFeed.l","title":"l  <code>instance-attribute</code>","text":"<pre><code>l: LetDataFeedWrapper\n</code></pre> <p>LetTrade DataFeed wrapper using to manage index pointer of DataFeed</p>"},{"location":"reference/data/data/#lettrade.data.data.DataFeed.meta","title":"meta  <code>property</code>","text":"<pre><code>meta: dict\n</code></pre> <p>Property to get metadata of DataFeed</p>"},{"location":"reference/data/data/#lettrade.data.data.DataFeed.name","title":"name  <code>property</code>","text":"<pre><code>name: str\n</code></pre> <p>Property to get name of DataFeed</p>"},{"location":"reference/data/data/#lettrade.data.data.DataFeed.now","title":"now  <code>property</code>","text":"<pre><code>now: Timestamp\n</code></pre> <p>Property to get current index value of DataFeed</p>"},{"location":"reference/data/data/#lettrade.data.data.DataFeed.timeframe","title":"timeframe  <code>property</code>","text":"<pre><code>timeframe: TimeFrame\n</code></pre> <p>Property to get timeframe of DataFeed</p>"},{"location":"reference/data/data/#lettrade.data.data.DataFeed.bar","title":"bar","text":"<pre><code>bar(i: int = 0) -&gt; Timestamp\n</code></pre> <p>Get current pd.Timestamp value of DataFeed</p> <p>Parameters:</p> <ul> <li> <code>i</code>               (<code>int</code>, default:                   <code>0</code> )           \u2013            <p>Index. Defaults to 0.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Timestamp</code>           \u2013            <p>pd.Timestamp: description</p> </li> </ul> Source code in <code>lettrade/data/data.py</code> <pre><code>def bar(self, i: int = 0) -&gt; pd.Timestamp:\n    \"\"\"Get current pd.Timestamp value of DataFeed\n\n    Args:\n        i (int, optional): Index. Defaults to 0.\n\n    Returns:\n        pd.Timestamp: _description_\n    \"\"\"\n    return self.l.index[i]\n</code></pre>"},{"location":"reference/data/data/#lettrade.data.data.DataFeed.copy","title":"copy","text":"<pre><code>copy(deep: bool = False, **kwargs) -&gt; DataFeed\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>deep</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>description. Defaults to False.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>DataFeed</code> (              <code>DataFeed</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/data/data.py</code> <pre><code>def copy(self, deep: bool = False, **kwargs) -&gt; \"DataFeed\":\n    \"\"\"_summary_\n\n    Args:\n        deep (bool, optional): _description_. Defaults to False.\n\n    Returns:\n        DataFeed: _description_\n    \"\"\"\n    df = super().copy(deep=deep)\n    df = self.__class__(\n        data=df,\n        name=self.name,\n        timeframe=self.timeframe,\n        meta=self.meta.copy(),\n        **kwargs,\n    )\n    return df\n</code></pre>"},{"location":"reference/data/data/#lettrade.data.data.DataFeed.drop","title":"drop","text":"<pre><code>drop(\n    *args,\n    since: int | str | Timestamp | None = None,\n    to: int | str | Timestamp | None = None,\n    **kwargs\n) -&gt; None\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>since</code>               (<code>int | str | Timestamp | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>to</code>               (<code>int | str | Timestamp | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/data/data.py</code> <pre><code>def drop(\n    self,\n    *args,\n    since: int | str | pd.Timestamp | None = None,\n    to: int | str | pd.Timestamp | None = None,\n    **kwargs,\n) -&gt; None:\n    \"\"\"_summary_\n\n    Args:\n        since (int | str | pd.Timestamp | None, optional): _description_. Defaults to None.\n        to (int | str | pd.Timestamp | None, optional): _description_. Defaults to None.\n\n    Raises:\n        RuntimeError: _description_\n    \"\"\"\n    if since is None and to is None:\n        super().drop(*args, **kwargs)\n        return\n\n    condiction = None\n\n    # Since\n    if since is not None:\n        if isinstance(since, int):\n            loc = self.l.index[since]\n        elif isinstance(since, str):\n            loc = pd.to_datetime(since, utc=True)\n        elif isinstance(since, pd.Timestamp):\n            loc = since\n        else:\n            raise RuntimeError(f\"DataFeed.drop since {since} is invalid\")\n        condiction = self.index &lt; loc\n\n    # To\n    if to is not None:\n        if isinstance(to, int):\n            loc = self.l.index[to]\n        elif isinstance(to, str):\n            loc = pd.to_datetime(to, utc=True)\n        elif isinstance(to, pd.Timestamp):\n            loc = to\n        else:\n            raise RuntimeError(f\"DataFeed.drop to {to} is invalid\")\n\n        if condiction is None:\n            condiction = self.index &gt; loc\n        else:\n            condiction = condiction | (self.index &gt; loc)\n\n    index = self[condiction].index\n    super().drop(index=index, inplace=True)\n    self.l.reset()\n\n    if __debug__:\n        logger.debug(\"BackTestDataFeed %s dropped %s rows\", self.name, len(index))\n</code></pre>"},{"location":"reference/data/data/#lettrade.data.data.DataFeed.next","title":"next","text":"<pre><code>next(size=1)\n</code></pre> <p>Load next data</p> <p>Parameters:</p> <ul> <li> <code>size</code>               (<code>int</code>, default:                   <code>1</code> )           \u2013            <p>description. Defaults to 1.</p> </li> </ul> Source code in <code>lettrade/data/data.py</code> <pre><code>def next(self, size=1):\n    \"\"\"Load next data\n\n    Args:\n        size (int, optional): _description_. Defaults to 1.\n    \"\"\"\n    self.l.next(size)\n</code></pre>"},{"location":"reference/data/data/#lettrade.data.data.DataFeed.push","title":"push","text":"<pre><code>push(\n    rows: list[list[int | float]],\n    unit: str | None = None,\n    utc: bool = True,\n    **kwargs\n)\n</code></pre> <p>Push new rows to DataFeed</p> <p>Parameters:</p> <ul> <li> <code>rows</code>               (<code>list[list[int | float]]</code>)           \u2013            <p>list of rows <code>[[\"timestamp\", \"open price\", \"high price\"...]]</code></p> </li> <li> <code>unit</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>pandas.Timestamp parsing unit. Defaults to None.</p> </li> <li> <code>utc</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>description. Defaults to True.</p> </li> </ul> Source code in <code>lettrade/data/data.py</code> <pre><code>def push(\n    self,\n    rows: list[list[int | float]],\n    unit: str | None = None,\n    utc: bool = True,\n    **kwargs,\n):\n    \"\"\"Push new rows to DataFeed\n\n    Args:\n        rows (list[list[int | float]]): list of rows `[[\"timestamp\", \"open price\", \"high price\"...]]`\n        unit (str | None, optional): pandas.Timestamp parsing unit. Defaults to None.\n        utc (bool, optional): _description_. Defaults to True.\n    \"\"\"\n    for row in rows:\n        dt = pd.to_datetime(row[0], unit=unit, utc=utc, **kwargs)\n        self.at[\n            dt,\n            (\n                \"open\",\n                \"high\",\n                \"low\",\n                \"close\",\n                \"volume\",\n            ),\n        ] = (\n            row[1],  # open\n            row[2],  # high\n            row[3],  # low\n            row[4],  # close\n            row[5],  # volume\n        )\n\n    if __debug__:\n        logger.debug(\"[%s] Update bar: \\n%s\", self.name, self.tail(len(rows)))\n</code></pre>"},{"location":"reference/data/error/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> error","text":""},{"location":"reference/data/error/#lettrade.data.error","title":"error","text":""},{"location":"reference/data/error/#lettrade.data.error.LetNoMoreDataFeedException","title":"LetNoMoreDataFeedException","text":"<p>               Bases: <code>LetException</code></p> <p>DataFeeder has no more data to feed</p>"},{"location":"reference/data/feeder/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> feeder","text":""},{"location":"reference/data/feeder/#lettrade.data.feeder","title":"feeder","text":""},{"location":"reference/data/feeder/#lettrade.data.feeder.DataFeeder","title":"DataFeeder","text":""},{"location":"reference/data/feeder/#lettrade.data.feeder.DataFeeder.is_continous","title":"is_continous  <code>property</code>","text":"<pre><code>is_continous\n</code></pre> <p>Flag check is realtime continous datafeeder</p>"},{"location":"reference/data/resample/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> resample","text":""},{"location":"reference/data/resample/#lettrade.data.resample","title":"resample","text":""},{"location":"reference/data/timeframe/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> timeframe","text":""},{"location":"reference/data/timeframe/#lettrade.data.timeframe","title":"timeframe","text":""},{"location":"reference/data/timeframe/#lettrade.data.timeframe.TimeFrame","title":"TimeFrame","text":"<pre><code>TimeFrame(tf: int | str | list | Timedelta | Self)\n</code></pre> <p>DataFeed TimeFrame</p> <p>Parameters:</p> <ul> <li> <code>tf</code>               (<code>int | str | list | Timedelta | TimeFrame</code>)           \u2013            <ul> <li><code>int</code>: TimeFrame in minutes. Example: TimeFrame(5) == TimeFrame(\"5m\")</li> <li><code>str</code>: string format of TimeFrame in <code>s</code>, <code>m</code>, <code>h</code>, <code>d</code>, <code>w</code>.</li> </ul> </li> </ul> <p>Raises:     RuntimeError: description</p> Source code in <code>lettrade/data/timeframe.py</code> <pre><code>def __init__(self, tf: int | str | list | pd.Timedelta | Self) -&gt; None:\n    \"\"\"_summary_\n\n    Args:\n        tf (int | str | list | pd.Timedelta | TimeFrame):\n            - `int`: TimeFrame in minutes. Example: TimeFrame(5) == TimeFrame(\"5m\")\n            - `str`: string format of TimeFrame in `s`, `m`, `h`, `d`, `w`.\n    Raises:\n        RuntimeError: _description_\n    \"\"\"\n    if isinstance(tf, TimeFrame):\n        self.value = tf.value\n        self.unit = tf.unit\n    elif isinstance(tf, str):\n        match = _pattern_timeframe_str.search(tf)\n        if not match:\n            raise RuntimeError(f\"TimeFrame value {tf} is invalid\")\n\n        self.value = int(match.group(1))\n        self.unit = match.group(2)\n    elif isinstance(tf, int):\n        self.value = tf\n        self.unit = \"m\"\n    elif isinstance(tf, list):\n        self.value = int(tf[0])\n        self.unit = tf[1]\n    elif isinstance(tf, pd.Timedelta):\n        map = TIMEFRAME_DELTA_2_STR[tf]\n        self.value = map[0]\n        self.unit = map[1]\n    else:\n        raise RuntimeError(f\"Timeframe {tf} is invalid format\")\n\n    # Validate\n    self._validate()\n\n    # Setup\n    self.unit_pandas = TIMEFRAME_UNIT_LET_2_PANDAS[self.unit]\n    self.delta = pd.Timedelta(self.value, self.unit_pandas)\n\n    # Warning\n    if self.delta not in TIMEFRAME_DELTA_2_STR:\n        if self.unit not in [\"s\", \"m\"]:\n            logger.warning(\n                \"Unsupport TimeFrame(%s), some function may not work floor()/ceil()...\",\n                self.delta,\n            )\n</code></pre>"},{"location":"reference/data/timeframe/#lettrade.data.timeframe.TimeFrame.string","title":"string  <code>property</code>","text":"<pre><code>string\n</code></pre> <p>TimeFrame as lettrade string</p>"},{"location":"reference/data/timeframe/#lettrade.data.timeframe.TimeFrame.string_pandas","title":"string_pandas  <code>property</code>","text":"<pre><code>string_pandas\n</code></pre> <p>TimeFrame as pandas string</p>"},{"location":"reference/data/timeframe/#lettrade.data.timeframe.TimeFrame.ceil","title":"ceil","text":"<pre><code>ceil(\n    at: datetime | timedelta | Timestamp | Timedelta,\n) -&gt; Timestamp | Timedelta\n</code></pre> <p>Get ceil of TimeFrame</p> <p>Parameters:</p> <ul> <li> <code>at</code>               (<code>datetime | timedelta | Timestamp | Timedelta</code>)           \u2013            <p>description</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Timestamp | Timedelta</code>           \u2013            <p>pd.Timestamp: description</p> </li> </ul> Source code in <code>lettrade/data/timeframe.py</code> <pre><code>def ceil(\n    self, at: datetime | timedelta | pd.Timestamp | pd.Timedelta\n) -&gt; pd.Timestamp | pd.Timedelta:\n    \"\"\"Get ceil of TimeFrame\n\n    Args:\n        at (datetime | timedelta | pd.Timestamp | pd.Timedelta): _description_\n\n    Raises:\n        RuntimeError: _description_\n\n    Returns:\n        pd.Timestamp: _description_\n    \"\"\"\n    if isinstance(at, datetime):\n        at = pd.Timestamp(at)\n    elif isinstance(at, timedelta):\n        at = pd.Timedelta(at)\n\n    if self.unit in [\"h\", \"m\", \"s\"]:\n        freq = self.string_pandas\n        if self.unit == \"m\":\n            freq += \"in\"\n        return at.ceil(freq=freq)\n\n    if isinstance(at, pd.Timestamp):\n        if self.unit == \"d\":\n            return pd.Timestamp(at.date() + pd.Timedelta(days=1))\n        if self.unit == \"w\":\n            return pd.Timestamp(at.date() + pd.Timedelta(days=7 - at.day_of_week))\n\n    elif isinstance(at, pd.Timedelta):\n        if self.unit == \"d\":\n            return pd.Timedelta(days=at.days + (0 if at.seconds == 0 else 1))\n        if self.unit == \"w\":\n            weeks = math.ceil(at.days / 7)\n            return pd.Timedelta(weeks=weeks)\n\n    raise RuntimeError(f\"Unit {self.unit} is not implement yet for {at}\")\n</code></pre>"},{"location":"reference/data/timeframe/#lettrade.data.timeframe.TimeFrame.floor","title":"floor","text":"<pre><code>floor(\n    at: datetime | timedelta | Timestamp | Timedelta,\n) -&gt; Timestamp | Timedelta\n</code></pre> <p>Get floor of TimeFrame</p> <p>Parameters:</p> <ul> <li> <code>at</code>               (<code>datetime | timedelta | Timestamp | Timedelta</code>)           \u2013            <p>description</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Timestamp | Timedelta</code>           \u2013            <p>pd.Timestamp | pd.Timedelta: description</p> </li> </ul> Source code in <code>lettrade/data/timeframe.py</code> <pre><code>def floor(\n    self, at: datetime | timedelta | pd.Timestamp | pd.Timedelta\n) -&gt; pd.Timestamp | pd.Timedelta:\n    \"\"\"Get floor of TimeFrame\n\n    Args:\n        at (datetime | timedelta | pd.Timestamp | pd.Timedelta): _description_\n\n    Raises:\n        RuntimeError: _description_\n\n    Returns:\n        pd.Timestamp | pd.Timedelta: _description_\n    \"\"\"\n    if isinstance(at, datetime):\n        at = pd.Timestamp(at)\n    elif isinstance(at, timedelta):\n        at = pd.Timedelta(at)\n\n    if self.unit in [\"h\", \"m\", \"s\"]:\n        freq = self.string_pandas\n        if self.unit == \"m\":\n            freq += \"in\"\n        return at.floor(freq=freq)\n\n    if isinstance(at, pd.Timestamp):\n        if self.unit == \"d\":\n            return pd.Timestamp(at.date())\n        if self.unit == \"w\":\n            return pd.Timestamp(at.date() - pd.Timedelta(days=at.day_of_week))\n\n    elif isinstance(at, pd.Timedelta):\n        if self.unit == \"d\":\n            return pd.Timedelta(days=at.days)\n        if self.unit == \"w\":\n            weeks = math.floor(at.days / 7)\n            return pd.Timedelta(weeks=weeks)\n\n    raise RuntimeError(f\"Unit {self.unit} is not implement yet for {at}\")\n</code></pre>"},{"location":"reference/data/wrapper/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> wrapper","text":""},{"location":"reference/data/wrapper/#lettrade.data.wrapper","title":"wrapper","text":""},{"location":"reference/data/wrapper/#lettrade.data.wrapper.LetDataFeedWrapper","title":"LetDataFeedWrapper","text":"<pre><code>LetDataFeedWrapper(data: DataFrame)\n</code></pre> <p>Wrap DataFeed</p> <p>Parameters:</p> <ul> <li> <code>data</code>               (<code>DataFrame</code>)           \u2013            <p>DataFeed object</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/data/wrapper.py</code> <pre><code>def __init__(self, data: pd.DataFrame) -&gt; None:\n    \"\"\"_summary_\n\n    Args:\n        data (pd.DataFrame): DataFeed object\n\n    Raises:\n        RuntimeError: _description_\n    \"\"\"\n    # Validate new instance not load an existed wrapper\n    if hasattr(data.index, __LET_WRAPPER_KEY__):\n        raise RuntimeError(\"DataFeed.index reuses a loaded wrapper\")\n    for column in data.columns:\n        if hasattr(data[column], __LET_WRAPPER_KEY__):\n            raise RuntimeError(f\"DataFeed.{column} reuses a loaded wrapper\")\n\n    self._pointer = 0\n    self._data = data\n    self._iloc = LetILocWrapper(self._data, self)\n</code></pre>"},{"location":"reference/data/wrapper/#lettrade.data.wrapper.LetDataFeedWrapper.iloc","title":"iloc  <code>property</code>","text":"<pre><code>iloc: LetILocWrapper | _iLocIndexer\n</code></pre> <p>Get iloc wrapper of DataFeed</p>"},{"location":"reference/data/wrapper/#lettrade.data.wrapper.LetDataFeedWrapper.pointer","title":"pointer  <code>property</code>","text":"<pre><code>pointer\n</code></pre> <p>Get current pointer value</p>"},{"location":"reference/data/wrapper/#lettrade.data.wrapper.LetDataFeedWrapper.pointer_start","title":"pointer_start  <code>property</code>","text":"<pre><code>pointer_start\n</code></pre> <p>Get start pointer value</p>"},{"location":"reference/data/wrapper/#lettrade.data.wrapper.LetDataFeedWrapper.pointer_stop","title":"pointer_stop  <code>property</code>","text":"<pre><code>pointer_stop\n</code></pre> <p>Get stop pointer value</p>"},{"location":"reference/data/wrapper/#lettrade.data.wrapper.LetDataFeedWrapper.go_start","title":"go_start","text":"<pre><code>go_start() -&gt; None\n</code></pre> <p>Move pointer to begin</p> Source code in <code>lettrade/data/wrapper.py</code> <pre><code>def go_start(self) -&gt; None:\n    \"\"\"Move pointer to begin\"\"\"\n    self._pointer = 0\n</code></pre>"},{"location":"reference/data/wrapper/#lettrade.data.wrapper.LetDataFeedWrapper.go_stop","title":"go_stop","text":"<pre><code>go_stop() -&gt; None\n</code></pre> <p>Move pointer to end</p> Source code in <code>lettrade/data/wrapper.py</code> <pre><code>def go_stop(self) -&gt; None:\n    \"\"\"Move pointer to end\"\"\"\n    self._pointer = len(self._data) - 1\n</code></pre>"},{"location":"reference/data/wrapper/#lettrade.data.wrapper.LetDataFeedWrapper.next","title":"next","text":"<pre><code>next(size=1)\n</code></pre> <p>Move pointer to next</p> Source code in <code>lettrade/data/wrapper.py</code> <pre><code>def next(self, size=1):\n    \"\"\"Move pointer to next\"\"\"\n    self._pointer += size\n</code></pre>"},{"location":"reference/data/wrapper/#lettrade.data.wrapper.LetDataFeedWrapper.reset","title":"reset","text":"<pre><code>reset() -&gt; None\n</code></pre> <p>Reset pointer to begin</p> Source code in <code>lettrade/data/wrapper.py</code> <pre><code>def reset(self) -&gt; None:\n    \"\"\"Reset pointer to begin\"\"\"\n    self._pointer = 0\n</code></pre>"},{"location":"reference/data/wrapper/#lettrade.data.wrapper.LetILocWrapper","title":"LetILocWrapper","text":"<pre><code>LetILocWrapper(data, owner)\n</code></pre> <p>Wrap iloc object from DataFeed</p> <p>Parameters:</p> <ul> <li> <code>data</code>               (<code>_type_</code>)           \u2013            <p>DataFeed or pd.Series</p> </li> <li> <code>owner</code>               (<code>_type_</code>)           \u2013            <p>DataFeed object</p> </li> </ul> Source code in <code>lettrade/data/wrapper.py</code> <pre><code>def __init__(self, data, owner) -&gt; None:\n    \"\"\"_summary_\n\n    Args:\n        data (_type_): DataFeed or pd.Series\n        owner (_type_): DataFeed object\n    \"\"\"\n    self._data = data\n    self._owner = owner\n</code></pre>"},{"location":"reference/data/wrapper/#lettrade.data.wrapper.LetIndexWapper","title":"LetIndexWapper","text":"<pre><code>LetIndexWapper(data, owner)\n</code></pre> <p>Wrap DataFeed.index</p> <p>Parameters:</p> <ul> <li> <code>data</code>               (<code>_type_</code>)           \u2013            <p>pandas.DatetimeIndex</p> </li> <li> <code>owner</code>               (<code>_type_</code>)           \u2013            <p>DataFeed object</p> </li> </ul> Source code in <code>lettrade/data/wrapper.py</code> <pre><code>def __init__(self, data, owner) -&gt; None:\n    \"\"\"_summary_\n\n    Args:\n        data (_type_): pandas.DatetimeIndex\n        owner (_type_): DataFeed object\n    \"\"\"\n    self._data = data\n    self._owner = owner\n</code></pre>"},{"location":"reference/data/wrapper/#lettrade.data.wrapper.LetSeriesWapper","title":"LetSeriesWapper","text":"<pre><code>LetSeriesWapper(data, owner)\n</code></pre> <p>Wrap DataFeed column</p> Source code in <code>lettrade/data/wrapper.py</code> <pre><code>def __init__(self, data, owner) -&gt; None:\n    self._data = data\n    self._owner = owner\n    self._iloc = LetILocWrapper(self._data, self._owner)\n</code></pre>"},{"location":"reference/data/extra/","title":"Index","text":""},{"location":"reference/data/extra/#lettrade.data.extra","title":"extra","text":""},{"location":"reference/data/extra/csv/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> csv","text":""},{"location":"reference/data/extra/csv/#lettrade.data.extra.csv","title":"csv","text":""},{"location":"reference/data/extra/csv/#lettrade.data.extra.csv.csv_export","title":"csv_export","text":"<pre><code>csv_export(\n    dataframe: DataFrame,\n    path: str | Path = \"data/data.csv\",\n    tz: timezone = None,\n    round: int = 5,\n    **kwargs\n) -&gt; DataFrame\n</code></pre> <p>Dump DataFeed to csv file. Inject function <code>pandas.DataFrame.let_to_csv()</code></p> <p>Parameters:</p> <ul> <li> <code>dataframe</code>               (<code>DataFrame</code>)           \u2013            <p>description</p> </li> <li> <code>path</code>               (<code>str | Path</code>, default:                   <code>'data/data.csv'</code> )           \u2013            <p>description. Defaults to \"data/data.csv\".</p> </li> <li> <code>tz</code>               (<code>timezone</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>round</code>               (<code>int</code>, default:                   <code>5</code> )           \u2013            <p>description. Defaults to 5.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>DataFrame</code>           \u2013            <p>pd.DataFrame: description</p> </li> </ul> Source code in <code>lettrade/data/extra/csv.py</code> <pre><code>def csv_export(\n    dataframe: pd.DataFrame,\n    path: str | Path = \"data/data.csv\",\n    tz: timezone = None,\n    round: int = 5,\n    **kwargs,\n) -&gt; pd.DataFrame:\n    \"\"\"Dump DataFeed to csv file. Inject function `pandas.DataFrame.let_to_csv()`\n\n    Args:\n        dataframe (pd.DataFrame): _description_\n        path (str | Path, optional): _description_. Defaults to \"data/data.csv\".\n        tz (timezone, optional): _description_. Defaults to None.\n        round (int, optional): _description_. Defaults to 5.\n\n    Returns:\n        pd.DataFrame: _description_\n    \"\"\"\n    dataframe = dataframe.astype(\n        dtype={\n            \"open\": \"float\",\n            \"high\": \"float\",\n            \"low\": \"float\",\n            \"close\": \"float\",\n            \"volume\": \"float\",\n        }\n    )\n\n    if not isinstance(dataframe.index, pd.DatetimeIndex):\n        dataframe = dataframe.set_index(\"datetime\")\n\n    if tz is not None:\n        dataframe.index = dataframe.index.tz_convert(tz)\n\n    if round &gt; 0:\n        dataframe = dataframe.round(round)\n\n    if not isinstance(path, Path):\n        path = Path(path)\n\n    path.parent.mkdir(parents=True, exist_ok=True)\n    dataframe.to_csv(path, **kwargs)\n\n    logger.info(\"Saved data to %s\", path)\n    return dataframe\n</code></pre>"},{"location":"reference/exchange/","title":"Index","text":""},{"location":"reference/exchange/#lettrade.exchange","title":"exchange","text":"<p>Exchange implements</p>"},{"location":"reference/exchange/#lettrade.exchange--stable-exchanges","title":"Stable Exchanges","text":"<ul> <li>BackTest: Backtesting exchange</li> <li>MetaTrader: MetaTrader 5 live data and trading</li> <li>CCXT: CCXT CryptoCurrency live data and trading</li> </ul>"},{"location":"reference/exchange/base/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> base","text":""},{"location":"reference/exchange/base/#lettrade.exchange.base","title":"base","text":""},{"location":"reference/exchange/base/#lettrade.exchange.base.BaseTransaction","title":"BaseTransaction","text":"<pre><code>BaseTransaction(\n    id: str, exchange: Exchange, data: DataFeed, size: float\n)\n</code></pre> <p>Base class of Execution/Order/Position</p> <p>Parameters:</p> <ul> <li> <code>id</code>               (<code>str</code>)           \u2013            <p>description</p> </li> <li> <code>exchange</code>               (<code>Exchange</code>)           \u2013            <p>description</p> </li> <li> <code>data</code>               (<code>DataFeed</code>)           \u2013            <p>description</p> </li> <li> <code>size</code>               (<code>float</code>)           \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/base.py</code> <pre><code>def __init__(\n    self,\n    id: str,\n    exchange: \"Exchange\",\n    data: \"DataFeed\",\n    size: float,\n) -&gt; None:\n    \"\"\"_summary_\n\n    Args:\n        id (str): _description_\n        exchange (Exchange): _description_\n        data (DataFeed): _description_\n        size (float): _description_\n    \"\"\"\n    self.id: str = id\n    self.exchange: \"Exchange\" = exchange\n    self.data: \"DataFeed\" = data\n    self.size: float = size\n</code></pre>"},{"location":"reference/exchange/base/#lettrade.exchange.base.BaseTransaction.is_long","title":"is_long  <code>property</code>","text":"<pre><code>is_long: bool\n</code></pre> <p>True if side is long (size is positive).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True/False</p> </li> </ul>"},{"location":"reference/exchange/base/#lettrade.exchange.base.BaseTransaction.is_short","title":"is_short  <code>property</code>","text":"<pre><code>is_short: bool\n</code></pre> <p>True if side is short (size is negative).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/base/#lettrade.exchange.base.BaseTransaction.side","title":"side  <code>property</code>","text":"<pre><code>side: TradeSide\n</code></pre> <p>True if side is short (size is negative).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>TradeSide</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/base/#lettrade.exchange.base.OrderState","title":"OrderState","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>Order state</p>"},{"location":"reference/exchange/base/#lettrade.exchange.base.OrderState.Canceled","title":"Canceled  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Canceled = 'canceled'\n</code></pre> <p>Canceled</p>"},{"location":"reference/exchange/base/#lettrade.exchange.base.OrderState.Filled","title":"Filled  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Filled = 'filled'\n</code></pre> <p>Full filled</p>"},{"location":"reference/exchange/base/#lettrade.exchange.base.OrderState.Partial","title":"Partial  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Partial = 'partial'\n</code></pre> <p>Partial filled, still wait for full fill</p>"},{"location":"reference/exchange/base/#lettrade.exchange.base.OrderState.Pending","title":"Pending  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Pending = 'pending'\n</code></pre> <p>Pending order, wait for exchange accept</p>"},{"location":"reference/exchange/base/#lettrade.exchange.base.OrderState.Placed","title":"Placed  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Placed = 'place'\n</code></pre> <p>Placed order on exchange</p>"},{"location":"reference/exchange/base/#lettrade.exchange.base.OrderType","title":"OrderType","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>Order type</p>"},{"location":"reference/exchange/base/#lettrade.exchange.base.OrderType.Limit","title":"Limit  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Limit = 'limit'\n</code></pre> <p>Limit order</p>"},{"location":"reference/exchange/base/#lettrade.exchange.base.OrderType.Market","title":"Market  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Market = 'market'\n</code></pre> <p>Market order</p>"},{"location":"reference/exchange/base/#lettrade.exchange.base.OrderType.Stop","title":"Stop  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Stop = 'stop'\n</code></pre> <p>Stop order</p>"},{"location":"reference/exchange/base/#lettrade.exchange.base.OrderType.StopLimit","title":"StopLimit  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>StopLimit = 'stoplimit'\n</code></pre> <p>Stop-Limit order</p>"},{"location":"reference/exchange/base/#lettrade.exchange.base.PositionState","title":"PositionState","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>Position state</p>"},{"location":"reference/exchange/base/#lettrade.exchange.base.PositionState.Exit","title":"Exit  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Exit = 'exit'\n</code></pre> <p>Exited state</p>"},{"location":"reference/exchange/base/#lettrade.exchange.base.PositionState.Open","title":"Open  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Open = 'open'\n</code></pre> <p>Opening state</p>"},{"location":"reference/exchange/base/#lettrade.exchange.base.TradeSide","title":"TradeSide","text":"<p>               Bases: <code>int</code>, <code>Enum</code></p> <p>Side of Trade</p>"},{"location":"reference/exchange/base/#lettrade.exchange.base.TradeSide.Buy","title":"Buy  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Buy = 1\n</code></pre> <p>Buy/Long side</p>"},{"location":"reference/exchange/base/#lettrade.exchange.base.TradeSide.Sell","title":"Sell  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Sell = -1\n</code></pre> <p>Sell/Short side</p>"},{"location":"reference/exchange/error/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> error","text":""},{"location":"reference/exchange/error/#lettrade.exchange.error","title":"error","text":""},{"location":"reference/exchange/error/#lettrade.exchange.error.LetOrderException","title":"LetOrderException","text":"<p>               Bases: <code>LetException</code></p> <p>Base order exception</p>"},{"location":"reference/exchange/error/#lettrade.exchange.error.LetOrderInvalidException","title":"LetOrderInvalidException","text":"<p>               Bases: <code>LetOrderException</code></p> <p>Order place is invalid exception</p>"},{"location":"reference/exchange/error/#lettrade.exchange.error.LetOrderValidateException","title":"LetOrderValidateException","text":"<p>               Bases: <code>LetOrderException</code></p> <p>Order attribute validate exception</p>"},{"location":"reference/exchange/exchange/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> exchange","text":""},{"location":"reference/exchange/exchange/#lettrade.exchange.exchange","title":"exchange","text":""},{"location":"reference/exchange/exchange/#lettrade.exchange.exchange.Exchange","title":"Exchange","text":"<pre><code>Exchange(**kwargs)\n</code></pre> <p>Base Exchange class to handle trading</p> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def __init__(self, **kwargs):\n    self._config = kwargs\n\n    self.orders = dict()\n    self.history_orders = dict()\n    self.positions = dict()\n    self.history_positions = dict()\n    self.executions = dict()\n\n    self._state = ExchangeState.Init\n</code></pre>"},{"location":"reference/exchange/exchange/#lettrade.exchange.exchange.Exchange.data","title":"data  <code>instance-attribute</code>","text":"<pre><code>data: DataFeed\n</code></pre> <p>main DataFeed</p>"},{"location":"reference/exchange/exchange/#lettrade.exchange.exchange.Exchange.datas","title":"datas  <code>instance-attribute</code>","text":"<pre><code>datas: list[DataFeed]\n</code></pre> <p>List of all available DataFeed</p>"},{"location":"reference/exchange/exchange/#lettrade.exchange.exchange.Exchange.executions","title":"executions  <code>instance-attribute</code>","text":"<pre><code>executions: dict[str, Execution] = dict()\n</code></pre> <p>Execution dict by <code>Execution.id</code> key</p>"},{"location":"reference/exchange/exchange/#lettrade.exchange.exchange.Exchange.history_orders","title":"history_orders  <code>instance-attribute</code>","text":"<pre><code>history_orders: dict[str, Order] = dict()\n</code></pre> <p>History Order dict by <code>Order.id</code> key</p>"},{"location":"reference/exchange/exchange/#lettrade.exchange.exchange.Exchange.history_positions","title":"history_positions  <code>instance-attribute</code>","text":"<pre><code>history_positions: dict[str, Position] = dict()\n</code></pre> <p>History Position dict by <code>Position.id</code> key</p>"},{"location":"reference/exchange/exchange/#lettrade.exchange.exchange.Exchange.orders","title":"orders  <code>instance-attribute</code>","text":"<pre><code>orders: dict[str, Order] = dict()\n</code></pre> <p>Available Order dict by <code>Order.id</code> key</p>"},{"location":"reference/exchange/exchange/#lettrade.exchange.exchange.Exchange.positions","title":"positions  <code>instance-attribute</code>","text":"<pre><code>positions: dict[str, Position] = dict()\n</code></pre> <p>Available Position dict by <code>Position.id</code> key</p>"},{"location":"reference/exchange/exchange/#lettrade.exchange.exchange.Exchange.init","title":"init","text":"<pre><code>init(\n    brain: Brain,\n    feeder: DataFeeder,\n    account: Account,\n    commander: Commander,\n) -&gt; None\n</code></pre> <p>Init Exchange dependencies. Set data/datas from feeder. Set state to <code>ExchangeState.Start</code>.</p> <p>Parameters:</p> <ul> <li> <code>brain</code>               (<code>Brain</code>)           \u2013            <p>description</p> </li> <li> <code>feeder</code>               (<code>DataFeeder</code>)           \u2013            <p>description</p> </li> <li> <code>account</code>               (<code>Account</code>)           \u2013            <p>description</p> </li> <li> <code>commander</code>               (<code>Commander</code>)           \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def init(\n    self,\n    brain: \"Brain\",\n    feeder: DataFeeder,\n    account: Account,\n    commander: Commander,\n) -&gt; None:\n    \"\"\"Init Exchange dependencies.\n    Set data/datas from feeder.\n    Set state to `ExchangeState.Start`.\n\n    Args:\n        brain (Brain): _description_\n        feeder (DataFeeder): _description_\n        account (Account): _description_\n        commander (Commander): _description_\n    \"\"\"\n    self._brain = brain\n    self._feeder = feeder\n    self._account = account\n    self._commander = commander\n\n    self.data = self._feeder.data\n    self.datas = self._feeder.datas\n\n    self._account.init(exchange=self)\n\n    self._state = ExchangeState.Start\n</code></pre>"},{"location":"reference/exchange/exchange/#lettrade.exchange.exchange.Exchange.new_order","title":"new_order  <code>abstractmethod</code>","text":"<pre><code>new_order(\n    size: float,\n    limit: float | None = None,\n    stop: float | None = None,\n    sl: float | None = None,\n    tp: float | None = None,\n    tag: str | None = None,\n    *args,\n    **kwargs\n) -&gt; OrderResult\n</code></pre> <p>Place new <code>Order</code></p> <p>Parameters:</p> <ul> <li> <code>size</code>               (<code>float</code>)           \u2013            <p>description</p> </li> <li> <code>limit</code>               (<code>float | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>stop</code>               (<code>float | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>sl</code>               (<code>float | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>tp</code>               (<code>float | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>tag</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>OrderResult</code> (              <code>OrderResult</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>@abstractmethod\ndef new_order(\n    self,\n    size: float,\n    limit: float | None = None,\n    stop: float | None = None,\n    sl: float | None = None,\n    tp: float | None = None,\n    tag: str | None = None,\n    *args,\n    **kwargs,\n) -&gt; OrderResult:\n    \"\"\"Place new `Order`\n\n    Args:\n        size (float): _description_\n        limit (float | None, optional): _description_. Defaults to None.\n        stop (float | None, optional): _description_. Defaults to None.\n        sl (float | None, optional): _description_. Defaults to None.\n        tp (float | None, optional): _description_. Defaults to None.\n        tag (str | None, optional): _description_. Defaults to None.\n\n    Returns:\n        OrderResult: _description_\n    \"\"\"\n    raise NotImplementedError(\"Exchange.new_order not implement yet\")\n</code></pre>"},{"location":"reference/exchange/exchange/#lettrade.exchange.exchange.Exchange.next","title":"next","text":"<pre><code>next()\n</code></pre> <p>Call after data feeded and before strategy.next()</p> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def next(self):\n    \"\"\"Call after data feeded and before strategy.next()\"\"\"\n    self._account.next()\n</code></pre>"},{"location":"reference/exchange/exchange/#lettrade.exchange.exchange.Exchange.next_next","title":"next_next","text":"<pre><code>next_next()\n</code></pre> <p>Call after strategy.next()</p> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def next_next(self):\n    \"\"\"Call after strategy.next()\"\"\"\n    self._account.next_next()\n</code></pre>"},{"location":"reference/exchange/exchange/#lettrade.exchange.exchange.Exchange.on_execution","title":"on_execution","text":"<pre><code>on_execution(\n    execution: Execution,\n    broadcast: bool | None = True,\n    **kwargs\n) -&gt; None\n</code></pre> <p>Receive Execution event from exchange then store and notify Brain</p> <p>Parameters:</p> <ul> <li> <code>execution</code>               (<code>Execution</code>)           \u2013            <p>description</p> </li> <li> <code>broadcast</code>               (<code>bool | None</code>, default:                   <code>True</code> )           \u2013            <p>description. Defaults to True.</p> </li> </ul> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def on_execution(\n    self,\n    execution: Execution,\n    broadcast: bool | None = True,\n    **kwargs,\n) -&gt; None:\n    \"\"\"Receive Execution event from exchange then store and notify Brain\n\n    Args:\n        execution (Execution): _description_\n        broadcast (bool | None, optional): _description_. Defaults to True.\n    \"\"\"\n    self.on_executions(executions=[execution], broadcast=broadcast, **kwargs)\n</code></pre>"},{"location":"reference/exchange/exchange/#lettrade.exchange.exchange.Exchange.on_executions","title":"on_executions","text":"<pre><code>on_executions(\n    executions: list[Execution],\n    broadcast: bool | None = True,\n    **kwargs\n) -&gt; None\n</code></pre> <p>Receive Execution event from exchange then store and notify Brain</p> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def on_executions(\n    self,\n    executions: list[Execution],\n    broadcast: bool | None = True,\n    **kwargs,\n) -&gt; None:\n    \"\"\"\n    Receive Execution event from exchange then store and notify Brain\n    \"\"\"\n    for execution in executions:\n        if not isinstance(execution, Execution):\n            raise RuntimeError(f\"{execution} is not instance of type Execution\")\n\n        if execution.id in self.executions:\n            # Merge to keep Execution handler for strategy using\n            # when strategy want to store Execution object\n            # and object will be automatic update directly\n            self.executions[execution.id].merge(execution)\n            execution = self.executions[execution.id]\n        else:\n            self.executions[execution.id] = execution\n\n    if self._state != ExchangeState.Run:\n        return\n\n    if broadcast:\n        self._brain.on_executions(executions)\n</code></pre>"},{"location":"reference/exchange/exchange/#lettrade.exchange.exchange.Exchange.on_order","title":"on_order","text":"<pre><code>on_order(\n    order: Order, broadcast: bool | None = True, **kwargs\n) -&gt; None\n</code></pre> <p>Receive order event from exchange then store and notify Brain</p> <p>Parameters:</p> <ul> <li> <code>order</code>               (<code>Order</code>)           \u2013            <p>description</p> </li> <li> <code>broadcast</code>               (<code>bool | None</code>, default:                   <code>True</code> )           \u2013            <p>description. Defaults to True.</p> </li> </ul> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def on_order(\n    self,\n    order: Order,\n    broadcast: bool | None = True,\n    **kwargs,\n) -&gt; None:\n    \"\"\"Receive order event from exchange then store and notify Brain\n\n    Args:\n        order (Order): _description_\n        broadcast (bool | None, optional): _description_. Defaults to True.\n    \"\"\"\n    self.on_orders(orders=[order], broadcast=broadcast, **kwargs)\n</code></pre>"},{"location":"reference/exchange/exchange/#lettrade.exchange.exchange.Exchange.on_orders","title":"on_orders","text":"<pre><code>on_orders(\n    orders: list[Order],\n    broadcast: bool | None = True,\n    **kwargs\n) -&gt; None\n</code></pre> <p>Receive orders event from exchange then store and notify Brain</p> <p>Parameters:</p> <ul> <li> <code>orders</code>               (<code>list[Order]</code>)           \u2013            <p>description</p> </li> <li> <code>broadcast</code>               (<code>bool | None</code>, default:                   <code>True</code> )           \u2013            <p>description. Defaults to True.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def on_orders(\n    self,\n    orders: list[Order],\n    broadcast: bool | None = True,\n    **kwargs,\n) -&gt; None:\n    \"\"\"Receive orders event from exchange then store and notify Brain\n\n    Args:\n        orders (list[Order]): _description_\n        broadcast (bool | None, optional): _description_. Defaults to True.\n\n    Raises:\n        RuntimeError: _description_\n    \"\"\"\n    for order in orders:\n        if not isinstance(order, Order):\n            raise RuntimeError(f\"{order} is not instance of type Order\")\n\n        if order.is_closed:\n            if order.id in self.history_orders:\n                logger.warning(\"Order closed recall: %s\", order)\n\n            self.history_orders[order.id] = order\n            if order.id in self.orders:\n                del self.orders[order.id]\n        else:\n            if order.id in self.history_orders:\n                raise RuntimeError(f\"Order {order.id} closed\")\n\n            if order.id in self.orders:\n                # Merge to keep Order handler for strategy using\n                # when strategy want to store Order object\n                # and object will be automatic update directly\n                self.orders[order.id].merge(order)\n                order = self.orders[order.id]\n            else:\n                self.orders[order.id] = order\n\n    if self._state != ExchangeState.Run:\n        return\n\n    if broadcast:\n        self._brain.on_orders(orders)\n</code></pre>"},{"location":"reference/exchange/exchange/#lettrade.exchange.exchange.Exchange.on_position","title":"on_position","text":"<pre><code>on_position(\n    position: Position,\n    broadcast: bool | None = True,\n    **kwargs\n) -&gt; None\n</code></pre> <p>Receive Position event from exchange then store and notify Brain</p> <p>Parameters:</p> <ul> <li> <code>position</code>               (<code>Position</code>)           \u2013            <p>new comming <code>Position</code></p> </li> <li> <code>broadcast</code>               (<code>bool | None</code>, default:                   <code>True</code> )           \u2013            <p>Flag notify to Brain. Defaults to True.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>validate <code>Position</code> instance</p> </li> </ul> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def on_position(\n    self,\n    position: Position,\n    broadcast: bool | None = True,\n    **kwargs,\n) -&gt; None:\n    \"\"\"Receive Position event from exchange then store and notify Brain\n\n    Args:\n        position (Position): new comming `Position`\n        broadcast (bool | None, optional): Flag notify to Brain. Defaults to True.\n\n    Raises:\n        RuntimeError: validate `Position` instance\n    \"\"\"\n    self.on_positions(positions=[position], broadcast=broadcast, **kwargs)\n</code></pre>"},{"location":"reference/exchange/exchange/#lettrade.exchange.exchange.Exchange.on_positions","title":"on_positions","text":"<pre><code>on_positions(\n    positions: list[Position],\n    broadcast: bool | None = True,\n    **kwargs\n) -&gt; None\n</code></pre> <p>Receive Positions event from exchange then store and notify Brain</p> <p>Parameters:</p> <ul> <li> <code>positions</code>               (<code>list[Position]</code>)           \u2013            <p>list of new comming <code>Position</code></p> </li> <li> <code>broadcast</code>               (<code>bool | None</code>, default:                   <code>True</code> )           \u2013            <p>Flag notify to Brain. Defaults to True.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>validate <code>Position</code> instance</p> </li> </ul> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def on_positions(\n    self,\n    positions: list[Position],\n    broadcast: bool | None = True,\n    **kwargs,\n) -&gt; None:\n    \"\"\"Receive Positions event from exchange then store and notify Brain\n\n    Args:\n        positions (list[Position]): list of new comming `Position`\n        broadcast (bool | None, optional): Flag notify to Brain. Defaults to True.\n\n    Raises:\n        RuntimeError: validate `Position` instance\n    \"\"\"\n    for position in positions:\n        if not isinstance(position, Position):\n            raise RuntimeError(f\"{position} is not instance of type Position\")\n\n        if position.is_exited:\n            if position.id in self.history_positions:\n                logger.warning(\"Position exited recall: %s\", position)\n\n            self.history_positions[position.id] = position\n            if position.id in self.positions:\n                del self.positions[position.id]\n\n            # self._account._on_position_exit(position)\n        else:\n            if position.id in self.history_positions:\n                raise RuntimeError(f\"Position {position.id} closed: {position}\")\n            if position.id in self.positions:\n                # Merge to keep Position handler for strategy using\n                # when strategy want to store Position object\n                # and object will be automatic update directly\n                self.positions[position.id].merge(position)\n                position = self.positions[position.id]\n            else:\n                self.positions[position.id] = position\n                # self._account._on_position_entry(position)\n\n    self._account.on_positions(positions)\n\n    if self._state != ExchangeState.Run:\n        return\n\n    if broadcast:\n        self._brain.on_positions(positions)\n</code></pre>"},{"location":"reference/exchange/exchange/#lettrade.exchange.exchange.Exchange.start","title":"start","text":"<pre><code>start() -&gt; None\n</code></pre> <p>Start of Exchange by: - Start account. - Set state to <code>ExchangeState.Run</code> ready for next().</p> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def start(self) -&gt; None:\n    \"\"\"Start of Exchange by:\n    - Start account.\n    - Set state to `ExchangeState.Run` ready for next().\n    \"\"\"\n    self._account.start()\n    self._state = ExchangeState.Run\n</code></pre>"},{"location":"reference/exchange/exchange/#lettrade.exchange.exchange.Exchange.stop","title":"stop","text":"<pre><code>stop() -&gt; None\n</code></pre> <p>Stop Exchange</p> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def stop(self) -&gt; None:\n    \"\"\"Stop Exchange\"\"\"\n    self._state = ExchangeState.Stop\n    self._account.stop()\n</code></pre>"},{"location":"reference/exchange/execution/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> execution","text":""},{"location":"reference/exchange/execution/#lettrade.exchange.execution","title":"execution","text":""},{"location":"reference/exchange/execution/#lettrade.exchange.execution.Execution","title":"Execution","text":"<pre><code>Execution(\n    id: str,\n    exchange: Exchange,\n    data: DataFeed,\n    size: float,\n    price: float,\n    at: float,\n    order_id: str | None = None,\n    order: Order | None = None,\n    position_id: str | None = None,\n    position: Position | None = None,\n    **kwargs\n)\n</code></pre> <p>               Bases: <code>BaseTransaction</code></p> <p>Execution</p> Source code in <code>lettrade/exchange/execution.py</code> <pre><code>def __init__(\n    self,\n    id: str,\n    exchange: \"Exchange\",\n    data: \"DataFeed\",\n    size: float,\n    price: float,\n    at: float,\n    order_id: str | None = None,\n    order: \"Order | None\" = None,\n    position_id: str | None = None,\n    position: \"Position | None\" = None,\n    **kwargs,\n):\n    super().__init__(\n        id=id,\n        exchange=exchange,\n        data=data,\n        size=size,\n        **kwargs,\n    )\n    self.order_id = order_id\n    self.order: \"Order\" = order\n    self.position_id = position_id\n    self.position: \"Position\" = position\n    self.price = price\n    self.at = at\n</code></pre>"},{"location":"reference/exchange/execution/#lettrade.exchange.execution.Execution.is_long","title":"is_long  <code>property</code>","text":"<pre><code>is_long: bool\n</code></pre> <p>True if side is long (size is positive).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True/False</p> </li> </ul>"},{"location":"reference/exchange/execution/#lettrade.exchange.execution.Execution.is_short","title":"is_short  <code>property</code>","text":"<pre><code>is_short: bool\n</code></pre> <p>True if side is short (size is negative).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/execution/#lettrade.exchange.execution.Execution.side","title":"side  <code>property</code>","text":"<pre><code>side: TradeSide\n</code></pre> <p>True if side is short (size is negative).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>TradeSide</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/execution/#lettrade.exchange.execution.Execution.merge","title":"merge","text":"<pre><code>merge(other: Execution)\n</code></pre> <p>Merge to keep object handler but not overwrite for Strategy using when Strategy want to store object and object will be automatic update directly</p> Source code in <code>lettrade/exchange/execution.py</code> <pre><code>def merge(self, other: \"Execution\"):\n    \"\"\"\n    Merge to keep object handler but not overwrite for Strategy using when Strategy want to store object and object will be automatic update directly\n    \"\"\"\n    if other is self:\n        return\n\n    if self.id != other.id:\n        raise RuntimeError(f\"Merge difference id {self.id} != {other.id} execution\")\n\n    self.price = other.price\n    self.size = other.size\n\n    if other.at:\n        self.at = other.at\n    if other.order_id:\n        self.order_id = other.order_id\n    if other.order:\n        self.order = other.order\n    if other.position_id:\n        self.position_id = other.position_id\n    if other.position:\n        self.position = other.position\n</code></pre>"},{"location":"reference/exchange/order/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> order","text":""},{"location":"reference/exchange/order/#lettrade.exchange.order","title":"order","text":""},{"location":"reference/exchange/order/#lettrade.exchange.order.Order","title":"Order","text":"<pre><code>Order(\n    id: str,\n    exchange: Exchange,\n    data: DataFeed,\n    size: float,\n    state: OrderState = OrderState.Pending,\n    type: OrderType = OrderType.Market,\n    limit_price: float | None = None,\n    stop_price: float | None = None,\n    sl_price: float | None = None,\n    tp_price: float | None = None,\n    parent: Position | None = None,\n    tag: str | None = None,\n    placed_at: Timestamp | None = None,\n    **kwargs\n)\n</code></pre> <p>               Bases: <code>BaseTransaction</code></p> Source code in <code>lettrade/exchange/order.py</code> <pre><code>def __init__(\n    self,\n    id: str,\n    exchange: \"Exchange\",\n    data: \"DataFeed\",\n    size: float,\n    state: OrderState = OrderState.Pending,\n    type: OrderType = OrderType.Market,\n    limit_price: float | None = None,\n    stop_price: float | None = None,\n    sl_price: float | None = None,\n    tp_price: float | None = None,\n    parent: \"Position | None\" = None,\n    tag: str | None = None,\n    placed_at: pd.Timestamp | None = None,\n    **kwargs,\n):\n    super().__init__(\n        id=id,\n        exchange=exchange,\n        data=data,\n        size=size,\n        **kwargs,\n    )\n\n    self.type: OrderType = type\n    self.state: OrderState = state\n    self.limit_price: float | None = limit_price\n    self.stop_price: float | None = stop_price\n    self.sl_price: float | None = sl_price\n    self.tp_price: float | None = tp_price\n    self.parent: \"Position | None\" = parent\n    self.tag: str | None = tag\n    self.placed_at: pd.Timestamp | None = placed_at\n    self.filled_at: pd.Timestamp | None = None\n    self.filled_price: float | None = None\n</code></pre>"},{"location":"reference/exchange/order/#lettrade.exchange.order.Order.is_closed","title":"is_closed  <code>property</code>","text":"<pre><code>is_closed: bool\n</code></pre> <p>Flag to check <code>Order</code> closed</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True if <code>state</code> in [OrderState.Filled, OrderState.Canceled]</p> </li> </ul>"},{"location":"reference/exchange/order/#lettrade.exchange.order.Order.is_long","title":"is_long  <code>property</code>","text":"<pre><code>is_long: bool\n</code></pre> <p>True if side is long (size is positive).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True/False</p> </li> </ul>"},{"location":"reference/exchange/order/#lettrade.exchange.order.Order.is_opening","title":"is_opening  <code>property</code>","text":"<pre><code>is_opening: bool\n</code></pre> <p>Flag to check <code>Order</code> still alive</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True if <code>state</code> in [OrderState.Pending, OrderState.Placed, OrderState.Partial]</p> </li> </ul>"},{"location":"reference/exchange/order/#lettrade.exchange.order.Order.is_short","title":"is_short  <code>property</code>","text":"<pre><code>is_short: bool\n</code></pre> <p>True if side is short (size is negative).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/order/#lettrade.exchange.order.Order.is_sl_order","title":"is_sl_order  <code>property</code>","text":"<pre><code>is_sl_order: bool\n</code></pre> <p><code>Order</code> is stop-loss order of a <code>Position</code></p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/order/#lettrade.exchange.order.Order.is_tp_order","title":"is_tp_order  <code>property</code>","text":"<pre><code>is_tp_order: bool\n</code></pre> <p><code>Order</code> is take-profit order of a <code>Position</code></p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/order/#lettrade.exchange.order.Order.limit","title":"limit  <code>property</code>","text":"<pre><code>limit: float | None\n</code></pre> <p>Getter of limit_price</p> <p>Returns:</p> <ul> <li> <code>float | None</code>           \u2013            <p>float | None: <code>float</code> or <code>None</code></p> </li> </ul>"},{"location":"reference/exchange/order/#lettrade.exchange.order.Order.place_price","title":"place_price  <code>property</code>","text":"<pre><code>place_price: float | None\n</code></pre> <p>Getter of place_price</p> <p>Returns:</p> <ul> <li> <code>float | None</code>           \u2013            <p>float | None: <code>float</code> or <code>None</code></p> </li> </ul>"},{"location":"reference/exchange/order/#lettrade.exchange.order.Order.side","title":"side  <code>property</code>","text":"<pre><code>side: TradeSide\n</code></pre> <p>True if side is short (size is negative).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>TradeSide</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/order/#lettrade.exchange.order.Order.sl","title":"sl  <code>property</code>","text":"<pre><code>sl: float | None\n</code></pre> <p>Getter of sl_price</p> <p>Returns:</p> <ul> <li> <code>float | None</code>           \u2013            <p>float | None: <code>float</code> or <code>None</code></p> </li> </ul>"},{"location":"reference/exchange/order/#lettrade.exchange.order.Order.stop","title":"stop  <code>property</code>","text":"<pre><code>stop: float | None\n</code></pre> <p>Getter of stop_price</p> <p>Returns:</p> <ul> <li> <code>float | None</code>           \u2013            <p>float | None: <code>float</code> or <code>None</code></p> </li> </ul>"},{"location":"reference/exchange/order/#lettrade.exchange.order.Order.tp","title":"tp  <code>property</code>","text":"<pre><code>tp: float | None\n</code></pre> <p>Getter of tp_price</p> <p>Returns:</p> <ul> <li> <code>float | None</code>           \u2013            <p>float | None: <code>float</code> or <code>None</code></p> </li> </ul>"},{"location":"reference/exchange/order/#lettrade.exchange.order.Order.cancel","title":"cancel","text":"<pre><code>cancel(raw: object | None = None, **kwargs) -&gt; OrderResult\n</code></pre> <p>Cancel <code>Order</code> Set <code>status</code> to <code>OrderState.Canceled</code>. Send event to <code>Exchange</code></p> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>Validate state is <code>OrderState.Placed</code></p> </li> </ul> <p>Returns:</p> <ul> <li> <code>OrderResult</code> (              <code>OrderResult</code> )          \u2013            <p>result of <code>Order</code></p> </li> </ul> Source code in <code>lettrade/exchange/order.py</code> <pre><code>def cancel(self, raw: object | None = None, **kwargs) -&gt; \"OrderResult\":\n    \"\"\"Cancel `Order`\n    Set `status` to `OrderState.Canceled`.\n    Send event to `Exchange`\n\n    Raises:\n        RuntimeError: Validate state is `OrderState.Placed`\n\n    Returns:\n        OrderResult: result of `Order`\n    \"\"\"\n    if self.state != OrderState.Placed:\n        raise RuntimeError(f\"Order {self.id} state {self.state} is not Placed\")\n\n    self.state = OrderState.Canceled\n    self.exchange.on_order(self)\n    return OrderResultOk(order=self, raw=raw)\n</code></pre>"},{"location":"reference/exchange/order/#lettrade.exchange.order.Order.fill","title":"fill","text":"<pre><code>fill(\n    price: float, at: Timestamp, raw: object | None = None\n) -&gt; OrderResult\n</code></pre> <p>Fill <code>Order</code>. Set <code>status</code> to <code>OrderState.Executed</code>. Send event to <code>Exchange</code></p> <p>Parameters:</p> <ul> <li> <code>price</code>               (<code>float</code>)           \u2013            <p>Executed price</p> </li> <li> <code>at</code>               (<code>Timestamp</code>)           \u2013            <p>Executed bar</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>OrderResult</code> (              <code>OrderResult</code> )          \u2013            <p>result of <code>Order</code></p> </li> </ul> Source code in <code>lettrade/exchange/order.py</code> <pre><code>def fill(\n    self,\n    price: float,\n    at: pd.Timestamp,\n    raw: object | None = None,\n) -&gt; \"OrderResult\":\n    \"\"\"Fill `Order`.\n    Set `status` to `OrderState.Executed`.\n    Send event to `Exchange`\n\n    Args:\n        price (float): Executed price\n        at (pd.Timestamp): Executed bar\n\n    Raises:\n        RuntimeError: _description_\n\n    Returns:\n        OrderResult: result of `Order`\n    \"\"\"\n    if self.state != OrderState.Placed:\n        raise RuntimeError(f\"Order {self.id} state {self.state} is not Placed\")\n\n    self.filled_at = at\n    self.filled_price = price\n    self.state = OrderState.Filled\n    self.exchange.on_order(self)\n    return OrderResultOk(order=self, raw=raw)\n</code></pre>"},{"location":"reference/exchange/order/#lettrade.exchange.order.Order.merge","title":"merge","text":"<pre><code>merge(other: Order)\n</code></pre> <p>Update current <code>Order</code> variables by other <code>Order</code></p> <p>Parameters:</p> <ul> <li> <code>other</code>               (<code>Order</code>)           \u2013            <p>Merge source <code>Order</code></p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>Validate same id</p> </li> </ul> Source code in <code>lettrade/exchange/order.py</code> <pre><code>def merge(self, other: \"Order\"):\n    \"\"\"Update current `Order` variables by other `Order`\n\n    Args:\n        other (Order): Merge source `Order`\n\n    Raises:\n        RuntimeError: Validate same id\n    \"\"\"\n    if other is self:\n        return\n\n    if self.id != other.id:\n        raise RuntimeError(f\"Merge difference id {self.id} != {other.id} order\")\n\n    self.size = other.size\n    self.sl_price = other.sl_price\n    self.tp_price = other.tp_price\n\n    if other.limit_price:\n        self.limit_price = other.limit_price\n    if other.stop_price:\n        self.stop_price = other.stop_price\n    if other.placed_at:\n        self.placed_at = other.placed_at\n\n    if other.filled_price:\n        self.filled_price = other.filled_price\n    if other.filled_at:\n        self.filled_at = other.filled_at\n\n    if other.parent:\n        self.parent = other.parent\n</code></pre>"},{"location":"reference/exchange/order/#lettrade.exchange.order.Order.place","title":"place","text":"<pre><code>place(\n    at: Timestamp, raw: object | None = None\n) -&gt; OrderResult\n</code></pre> <p>Place <code>Order</code> Set <code>status</code> to <code>OrderState.Placed</code>. Send event to <code>Exchange</code></p> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>OrderResult</code> (              <code>OrderResult</code> )          \u2013            <p>result of <code>Order</code></p> </li> </ul> Source code in <code>lettrade/exchange/order.py</code> <pre><code>def place(\n    self,\n    at: pd.Timestamp,\n    raw: object | None = None,\n) -&gt; \"OrderResult\":\n    \"\"\"Place `Order`\n    Set `status` to `OrderState.Placed`.\n    Send event to `Exchange`\n\n    Raises:\n        RuntimeError: _description_\n\n    Returns:\n        OrderResult: result of `Order`\n    \"\"\"\n    self.validate()\n\n    if self.state != OrderState.Pending:\n        raise RuntimeError(f\"Order {self.id} state {self.state} is not Pending\")\n\n    self.state = OrderState.Placed\n    self.placed_at = at\n\n    logger.info(\"Placing new order: %s\", self)\n\n    self.exchange.on_order(self)\n    return OrderResultOk(order=self, raw=raw)\n</code></pre>"},{"location":"reference/exchange/order/#lettrade.exchange.order.Order.update","title":"update","text":"<pre><code>update(\n    limit_price: float | None = None,\n    stop_price: float | None = None,\n    sl: float | None = None,\n    tp: float | None = None,\n    raw: object | None = None,\n) -&gt; OrderResult\n</code></pre> <p>Update Order</p> <p>Parameters:</p> <ul> <li> <code>limit_price</code>               (<code>float</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>stop_price</code>               (<code>float</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>sl</code>               (<code>float</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>tp</code>               (<code>float</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/order.py</code> <pre><code>def update(\n    self,\n    limit_price: float | None = None,\n    stop_price: float | None = None,\n    sl: float | None = None,\n    tp: float | None = None,\n    raw: object | None = None,\n) -&gt; \"OrderResult\":\n    \"\"\"Update Order\n\n    Args:\n        limit_price (float, optional): _description_. Defaults to None.\n        stop_price (float, optional): _description_. Defaults to None.\n        sl (float, optional): _description_. Defaults to None.\n        tp (float, optional): _description_. Defaults to None.\n\n    Raises:\n        RuntimeError: _description_\n    \"\"\"\n    if self.is_closed:\n        raise RuntimeError(f\"Update a closed order {self}\")\n\n    # TODO: validate parameters\n    if limit_price is not None:\n        self.limit_price = limit_price\n    if stop_price is not None:\n        self.stop_price = stop_price\n\n    if sl is not None:\n        self.sl_price = sl\n    if tp is not None:\n        self.tp_price = tp\n\n    self.exchange.on_order(self)\n    return OrderResultOk(order=self, raw=raw)\n</code></pre>"},{"location":"reference/exchange/order/#lettrade.exchange.order.OrderResult","title":"OrderResult","text":"<pre><code>OrderResult(\n    ok: bool = True,\n    order: Order | None = None,\n    raw: object | None = None,\n)\n</code></pre> <p>Result of <code>Order</code></p> <p>Parameters:</p> <ul> <li> <code>ok</code>               (<code>bool | None</code>, default:                   <code>True</code> )           \u2013            <p>Flag to check <code>Order</code> is success or not. Defaults to True.</p> </li> <li> <code>order</code>               (<code>Order | None</code>, default:                   <code>None</code> )           \u2013            <p>Order own the result. Defaults to None.</p> </li> <li> <code>raw</code>               (<code>object | None</code>, default:                   <code>None</code> )           \u2013            <p>Raw object of <code>Order</code>. Defaults to None.</p> </li> </ul> Source code in <code>lettrade/exchange/order.py</code> <pre><code>def __init__(\n    self,\n    ok: bool = True,\n    order: \"Order | None\" = None,\n    raw: object | None = None,\n) -&gt; None:\n    \"\"\"_summary_\n\n    Args:\n        ok (bool | None, optional): Flag to check `Order` is success or not. Defaults to True.\n        order (Order | None, optional): Order own the result. Defaults to None.\n        raw (object | None, optional): Raw object of `Order`. Defaults to None.\n    \"\"\"\n    self.ok: bool = ok\n    self.order: \"Order | None\" = order\n    self.raw: object | None = raw\n</code></pre>"},{"location":"reference/exchange/order/#lettrade.exchange.order.OrderResultError","title":"OrderResultError","text":"<pre><code>OrderResultError(\n    error: str,\n    order: Order | None = None,\n    raw: object | None = None,\n)\n</code></pre> <p>               Bases: <code>OrderResult</code></p> <p>Result of a error <code>Order</code></p> <p>Parameters:</p> <ul> <li> <code>error</code>               (<code>str</code>)           \u2013            <p>Error message</p> </li> <li> <code>order</code>               (<code>Order | None</code>, default:                   <code>None</code> )           \u2013            <p>Order own the result. Defaults to None.</p> </li> <li> <code>raw</code>               (<code>object | None</code>, default:                   <code>None</code> )           \u2013            <p>Raw object of <code>Order</code>. Defaults to None.</p> </li> </ul> Source code in <code>lettrade/exchange/order.py</code> <pre><code>def __init__(\n    self,\n    error: str,\n    order: \"Order | None\" = None,\n    raw: object | None = None,\n) -&gt; None:\n    \"\"\"_summary_\n\n    Args:\n        error (str): Error message\n        order (Order | None, optional): Order own the result. Defaults to None.\n        raw (object | None, optional): Raw object of `Order`. Defaults to None.\n    \"\"\"\n    super().__init__(ok=False, order=order, raw=raw)\n    self.error: str = error\n</code></pre>"},{"location":"reference/exchange/order/#lettrade.exchange.order.OrderResultOk","title":"OrderResultOk","text":"<pre><code>OrderResultOk(\n    order: Order | None = None, raw: object | None = None\n)\n</code></pre> <p>               Bases: <code>OrderResult</code></p> <p>Result of a success <code>Order</code></p> <p>Parameters:</p> <ul> <li> <code>order</code>               (<code>Order | None</code>, default:                   <code>None</code> )           \u2013            <p>Order own the result. Defaults to None.</p> </li> <li> <code>raw</code>               (<code>object | None</code>, default:                   <code>None</code> )           \u2013            <p>Raw object of <code>Order</code>. Defaults to None.</p> </li> </ul> Source code in <code>lettrade/exchange/order.py</code> <pre><code>def __init__(\n    self,\n    order: \"Order | None\" = None,\n    raw: object | None = None,\n) -&gt; None:\n    \"\"\"_summary_\n\n    Args:\n        order (Order | None, optional): Order own the result. Defaults to None.\n        raw (object | None, optional): Raw object of `Order`. Defaults to None.\n    \"\"\"\n    super().__init__(ok=True, order=order, raw=raw)\n</code></pre>"},{"location":"reference/exchange/position/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> position","text":""},{"location":"reference/exchange/position/#lettrade.exchange.position","title":"position","text":""},{"location":"reference/exchange/position/#lettrade.exchange.position.Position","title":"Position","text":"<pre><code>Position(\n    id: str,\n    exchange: Exchange,\n    data: DataFeed,\n    size: float,\n    parent: Order,\n    state: PositionState = PositionState.Open,\n    entry_price: float | None = None,\n    entry_fee: float = 0.0,\n    entry_at: Timestamp | None = None,\n    sl_order: Order | None = None,\n    tp_order: Order | None = None,\n    tag: str | None = None,\n    **kwargs\n)\n</code></pre> <p>               Bases: <code>BaseTransaction</code></p> <p>When an <code>Order</code> is filled, it results in an active <code>Position</code>. Find active positions in <code>Strategy.positions</code> and closed, settled positions in <code>Strategy.closed_positions</code>.</p> Source code in <code>lettrade/exchange/position.py</code> <pre><code>def __init__(\n    self,\n    id: str,\n    exchange: \"Exchange\",\n    data: \"DataFeed\",\n    size: float,\n    parent: \"Order\",\n    state: PositionState = PositionState.Open,\n    entry_price: float | None = None,\n    entry_fee: float = 0.0,\n    entry_at: pd.Timestamp | None = None,\n    sl_order: Order | None = None,\n    tp_order: Order | None = None,\n    tag: str | None = None,\n    **kwargs,\n):\n    super().__init__(\n        id=id,\n        exchange=exchange,\n        data=data,\n        size=size,\n        **kwargs,\n    )\n    self._account: \"Account\" = self.exchange._account\n\n    self.state: PositionState = state\n    self.parent: \"Order\" = parent\n    self.tag: str | None = tag\n\n    self.entry_price: float | None = entry_price\n    self.entry_fee: float = entry_fee\n    self.entry_at: pd.Timestamp | None = entry_at\n\n    self.exit_price: float | None = None\n    self.exit_fee: float = 0.0\n    self.exit_at: pd.Timestamp | None = None\n    self.exit_pl: float | None = None\n\n    self.sl_order: Order | None = sl_order\n    self.tp_order: Order | None = tp_order\n</code></pre>"},{"location":"reference/exchange/position/#lettrade.exchange.position.Position.fee","title":"fee  <code>property</code>","text":"<pre><code>fee: float\n</code></pre> <p>Fee/Estimate Fee for trade</p> <p>Returns:</p> <ul> <li> <code>float</code> (              <code>float</code> )          \u2013            <p>Fee</p> </li> </ul>"},{"location":"reference/exchange/position/#lettrade.exchange.position.Position.is_exited","title":"is_exited  <code>property</code>","text":"<pre><code>is_exited: bool\n</code></pre> <p>Flag to check Position state.</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True if the trade exited</p> </li> </ul>"},{"location":"reference/exchange/position/#lettrade.exchange.position.Position.is_long","title":"is_long  <code>property</code>","text":"<pre><code>is_long: bool\n</code></pre> <p>True if side is long (size is positive).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True/False</p> </li> </ul>"},{"location":"reference/exchange/position/#lettrade.exchange.position.Position.is_opening","title":"is_opening  <code>property</code>","text":"<pre><code>is_opening: bool\n</code></pre> <p>Flag to check Position state.</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True if the trade opening</p> </li> </ul>"},{"location":"reference/exchange/position/#lettrade.exchange.position.Position.is_short","title":"is_short  <code>property</code>","text":"<pre><code>is_short: bool\n</code></pre> <p>True if side is short (size is negative).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/position/#lettrade.exchange.position.Position.pl","title":"pl  <code>property</code>","text":"<pre><code>pl: float\n</code></pre> <p>Estimate Profit or Loss of Position</p> <p>Returns:</p> <ul> <li> <code>float</code> (              <code>float</code> )          \u2013            <p>PnL</p> </li> </ul>"},{"location":"reference/exchange/position/#lettrade.exchange.position.Position.side","title":"side  <code>property</code>","text":"<pre><code>side: TradeSide\n</code></pre> <p>True if side is short (size is negative).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>TradeSide</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/position/#lettrade.exchange.position.Position.merge","title":"merge","text":"<pre><code>merge(other: Position) -&gt; bool\n</code></pre> <p>Merge position from another position has same id</p> <p>Parameters:</p> <ul> <li> <code>other</code>               (<code>Position</code>)           \u2013            <p>description</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/position.py</code> <pre><code>def merge(self, other: \"Position\") -&gt; bool:\n    \"\"\"Merge position from another position has same id\n\n    Args:\n        other (Position): _description_\n\n    Raises:\n        RuntimeError: _description_\n    \"\"\"\n    if other is self:\n        return False\n\n    if self.id != other.id:\n        raise RuntimeError(f\"Merge difference id {self.id} != {other.id} order\")\n\n    self.size = other.size\n\n    if other.sl_order is not None:\n        self.sl_order = other.sl_order\n        self.sl_order.parent = self\n    elif self.sl_order is not None:\n        self.sl_order.cancel()\n        self.sl_order = None\n\n    if other.tp_order is not None:\n        self.tp_order = other.tp_order\n        self.tp_order.parent = self\n    elif self.tp_order is not None:\n        self.tp_order.cancel()\n        self.tp_order = None\n\n    if other.entry_at:\n        self.entry_at = other.entry_at\n    if other.entry_price:\n        self.entry_price = other.entry_price\n\n    if other.exit_at:\n        self.exit_at = other.exit_at\n    if other.exit_price:\n        self.exit_price = other.exit_price\n    if other.exit_fee:\n        self.exit_fee = other.exit_fee\n    if other.exit_pl:\n        self.exit_pl = other.exit_pl\n\n    if other.parent:\n        self.parent = other.parent\n\n    return True\n</code></pre>"},{"location":"reference/exchange/position/#lettrade.exchange.position.PositionResult","title":"PositionResult","text":"<pre><code>PositionResult(\n    ok: bool = True,\n    position: Position | None = None,\n    raw: object | None = None,\n)\n</code></pre> <p>Result of <code>Position</code></p> <p>Parameters:</p> <ul> <li> <code>ok</code>               (<code>bool | None</code>, default:                   <code>True</code> )           \u2013            <p>Flag to check <code>Position</code> is success or not. Defaults to True.</p> </li> <li> <code>position</code>               (<code>Position | None</code>, default:                   <code>None</code> )           \u2013            <p>Position own the result. Defaults to None.</p> </li> <li> <code>raw</code>               (<code>object | None</code>, default:                   <code>None</code> )           \u2013            <p>Raw object of <code>Position</code>. Defaults to None.</p> </li> </ul> Source code in <code>lettrade/exchange/position.py</code> <pre><code>def __init__(\n    self,\n    ok: bool = True,\n    position: \"Position | None\" = None,\n    raw: object | None = None,\n) -&gt; None:\n    \"\"\"_summary_\n\n    Args:\n        ok (bool | None, optional): Flag to check `Position` is success or not. Defaults to True.\n        position (Position | None, optional): Position own the result. Defaults to None.\n        raw (object | None, optional): Raw object of `Position`. Defaults to None.\n    \"\"\"\n    self.ok: bool = ok\n    self.position: \"Position | None\" = position\n    self.raw: object | None = raw\n</code></pre>"},{"location":"reference/exchange/position/#lettrade.exchange.position.PositionResultError","title":"PositionResultError","text":"<pre><code>PositionResultError(\n    error: str,\n    position: Position | None = None,\n    raw: object | None = None,\n)\n</code></pre> <p>               Bases: <code>PositionResult</code></p> <p>Result of a error <code>Position</code></p> <p>Parameters:</p> <ul> <li> <code>error</code>               (<code>str</code>)           \u2013            <p>Error message</p> </li> <li> <code>position</code>               (<code>Position | None</code>, default:                   <code>None</code> )           \u2013            <p>Position own the result. Defaults to None.</p> </li> <li> <code>raw</code>               (<code>object | None</code>, default:                   <code>None</code> )           \u2013            <p>Raw object of <code>Position</code>. Defaults to None.</p> </li> </ul> Source code in <code>lettrade/exchange/position.py</code> <pre><code>def __init__(\n    self,\n    error: str,\n    position: \"Position | None\" = None,\n    raw: object | None = None,\n) -&gt; None:\n    \"\"\"_summary_\n\n    Args:\n        error (str): Error message\n        position (Position | None, optional): Position own the result. Defaults to None.\n        raw (object | None, optional): Raw object of `Position`. Defaults to None.\n    \"\"\"\n    super().__init__(ok=False, position=position, raw=raw)\n    self.error: str = error\n</code></pre>"},{"location":"reference/exchange/position/#lettrade.exchange.position.PositionResultOk","title":"PositionResultOk","text":"<pre><code>PositionResultOk(\n    position: Position | None = None,\n    raw: object | None = None,\n)\n</code></pre> <p>               Bases: <code>PositionResult</code></p> <p>Result of a success <code>Position</code></p> <p>Parameters:</p> <ul> <li> <code>position</code>               (<code>Position | None</code>, default:                   <code>None</code> )           \u2013            <p>Position own the result. Defaults to None.</p> </li> <li> <code>raw</code>               (<code>object | None</code>, default:                   <code>None</code> )           \u2013            <p>Raw object of <code>Position</code>. Defaults to None.</p> </li> </ul> Source code in <code>lettrade/exchange/position.py</code> <pre><code>def __init__(\n    self,\n    position: \"Position | None\" = None,\n    raw: object | None = None,\n) -&gt; None:\n    \"\"\"_summary_\n\n    Args:\n        position (Position | None, optional): Position own the result. Defaults to None.\n        raw (object | None, optional): Raw object of `Position`. Defaults to None.\n    \"\"\"\n    super().__init__(ok=True, position=position, raw=raw)\n</code></pre>"},{"location":"reference/exchange/backtest/","title":"Index","text":""},{"location":"reference/exchange/backtest/#lettrade.exchange.backtest","title":"backtest","text":""},{"location":"reference/exchange/backtest/account/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> account","text":""},{"location":"reference/exchange/backtest/account/#lettrade.exchange.backtest.account","title":"account","text":""},{"location":"reference/exchange/backtest/account/#lettrade.exchange.backtest.account.BackTestAccount","title":"BackTestAccount","text":"<pre><code>BackTestAccount(\n    risk: float = 0.02,\n    balance: float = 10000,\n    commission: float = 0.2,\n    margin: float = 1,\n    leverage: float = 1,\n    **kwargs\n)\n</code></pre> <p>               Bases: <code>Account</code></p> <p>Parameters:</p> <ul> <li> <code>risk</code>               (<code>float</code>, default:                   <code>0.02</code> )           \u2013            <p>description. Defaults to 0.02.</p> </li> <li> <code>balance</code>               (<code>float</code>, default:                   <code>10000</code> )           \u2013            <p>description. Defaults to 10_000.</p> </li> <li> <code>commission</code>               (<code>float</code>, default:                   <code>0.2</code> )           \u2013            <p>Commission fee is percent of size. Defaults to 0.2.</p> </li> <li> <code>margin</code>               (<code>float</code>, default:                   <code>1</code> )           \u2013            <p>description. Defaults to 1.</p> </li> <li> <code>leverage</code>               (<code>float</code>, default:                   <code>1</code> )           \u2013            <p>description. Defaults to 1.</p> </li> <li> <code>**kwargs</code>               (<code>dict</code>, default:                   <code>{}</code> )           \u2013            <p>Mirror of lettrade.account.Account().</p> </li> </ul> Source code in <code>lettrade/exchange/backtest/account.py</code> <pre><code>def __init__(\n    self,\n    risk: float = 0.02,\n    balance: float = 10_000,\n    commission: float = 0.2,\n    margin: float = 1,\n    leverage: float = 1,\n    **kwargs,\n) -&gt; None:\n    \"\"\"Account for backtest\n\n    Args:\n        risk (float, optional): _description_. Defaults to 0.02.\n        balance (float, optional): _description_. Defaults to 10_000.\n        commission (float, optional): Commission fee is percent of size. Defaults to 0.2.\n        margin (float, optional): _description_. Defaults to 1.\n        leverage (float, optional): _description_. Defaults to 1.\n        **kwargs (dict, optional): Mirror of [lettrade.account.Account()](site:/reference/account/account/#lettrade.account.account.Account).\n    \"\"\"\n    super().__init__(\n        risk=risk,\n        balance=balance,\n        margin=margin,\n        leverage=leverage,\n        **kwargs,\n    )\n    self._commission = commission\n</code></pre>"},{"location":"reference/exchange/backtest/account/#lettrade.exchange.backtest.account.BackTestAccount.balance","title":"balance  <code>property</code>","text":"<pre><code>balance: float\n</code></pre> <p>Balance of account</p> <p>Returns:</p> <ul> <li> <code>float</code> (              <code>float</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/backtest/account/#lettrade.exchange.backtest.account.BackTestAccount.next","title":"next","text":"<pre><code>next()\n</code></pre> <p>Next account</p> Source code in <code>lettrade/account/account.py</code> <pre><code>def next(self):\n    \"\"\"Next account\"\"\"\n</code></pre>"},{"location":"reference/exchange/backtest/account/#lettrade.exchange.backtest.account.BackTestAccount.next_next","title":"next_next","text":"<pre><code>next_next()\n</code></pre> <p>Call after strategy.next()</p> Source code in <code>lettrade/account/account.py</code> <pre><code>def next_next(self):\n    \"\"\"Call after strategy.next()\"\"\"\n    self._equity_snapshot()\n</code></pre>"},{"location":"reference/exchange/backtest/account/#lettrade.exchange.backtest.account.BackTestAccount.risk","title":"risk","text":"<pre><code>risk(side: TradeSide, size: float, **kwargs) -&gt; float\n</code></pre> <p>Risk calculation</p> Source code in <code>lettrade/account/account.py</code> <pre><code>def risk(self, side: \"TradeSide\", size: float, **kwargs) -&gt; float:\n    \"\"\"Risk calculation\"\"\"\n    if size is None:\n        return side * abs(self._risk)\n    return side * abs(size)\n</code></pre>"},{"location":"reference/exchange/backtest/account/#lettrade.exchange.backtest.account.BackTestAccount.start","title":"start","text":"<pre><code>start()\n</code></pre> <p>Start account</p> Source code in <code>lettrade/account/account.py</code> <pre><code>def start(self):\n    \"\"\"Start account\"\"\"\n</code></pre>"},{"location":"reference/exchange/backtest/account/#lettrade.exchange.backtest.account.BackTestAccount.stop","title":"stop","text":"<pre><code>stop()\n</code></pre> <p>Stop account</p> Source code in <code>lettrade/account/account.py</code> <pre><code>def stop(self):\n    \"\"\"Stop account\"\"\"\n    try:\n        self._equity_snapshot()\n    except LetAccountInsufficientException:\n        pass\n</code></pre>"},{"location":"reference/exchange/backtest/account/#lettrade.exchange.backtest.account.ForexBackTestAccount","title":"ForexBackTestAccount","text":"<pre><code>ForexBackTestAccount(\n    risk: float = 0.02,\n    balance: float = 10000,\n    commission: float = 0.2,\n    margin: float = 1,\n    leverage: float = 1,\n    **kwargs\n)\n</code></pre> <p>               Bases: <code>BackTestAccount</code></p> <p>Forex backtest account helps to handle lot size</p> <p>Parameters:</p> <ul> <li> <code>risk</code>               (<code>float</code>, default:                   <code>0.02</code> )           \u2013            <p>description. Defaults to 0.02.</p> </li> <li> <code>balance</code>               (<code>float</code>, default:                   <code>10000</code> )           \u2013            <p>description. Defaults to 10_000.</p> </li> <li> <code>commission</code>               (<code>float</code>, default:                   <code>0.2</code> )           \u2013            <p>Commission fee is percent of size. Defaults to 0.2.</p> </li> <li> <code>margin</code>               (<code>float</code>, default:                   <code>1</code> )           \u2013            <p>description. Defaults to 1.</p> </li> <li> <code>leverage</code>               (<code>float</code>, default:                   <code>1</code> )           \u2013            <p>description. Defaults to 1.</p> </li> <li> <code>**kwargs</code>               (<code>dict</code>, default:                   <code>{}</code> )           \u2013            <p>Mirror of lettrade.account.Account().</p> </li> </ul> Source code in <code>lettrade/exchange/backtest/account.py</code> <pre><code>def __init__(\n    self,\n    risk: float = 0.02,\n    balance: float = 10_000,\n    commission: float = 0.2,\n    margin: float = 1,\n    leverage: float = 1,\n    **kwargs,\n) -&gt; None:\n    \"\"\"Account for backtest\n\n    Args:\n        risk (float, optional): _description_. Defaults to 0.02.\n        balance (float, optional): _description_. Defaults to 10_000.\n        commission (float, optional): Commission fee is percent of size. Defaults to 0.2.\n        margin (float, optional): _description_. Defaults to 1.\n        leverage (float, optional): _description_. Defaults to 1.\n        **kwargs (dict, optional): Mirror of [lettrade.account.Account()](site:/reference/account/account/#lettrade.account.account.Account).\n    \"\"\"\n    super().__init__(\n        risk=risk,\n        balance=balance,\n        margin=margin,\n        leverage=leverage,\n        **kwargs,\n    )\n    self._commission = commission\n</code></pre>"},{"location":"reference/exchange/backtest/account/#lettrade.exchange.backtest.account.ForexBackTestAccount.balance","title":"balance  <code>property</code>","text":"<pre><code>balance: float\n</code></pre> <p>Balance of account</p> <p>Returns:</p> <ul> <li> <code>float</code> (              <code>float</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/backtest/account/#lettrade.exchange.backtest.account.ForexBackTestAccount.next","title":"next","text":"<pre><code>next()\n</code></pre> <p>Next account</p> Source code in <code>lettrade/account/account.py</code> <pre><code>def next(self):\n    \"\"\"Next account\"\"\"\n</code></pre>"},{"location":"reference/exchange/backtest/account/#lettrade.exchange.backtest.account.ForexBackTestAccount.next_next","title":"next_next","text":"<pre><code>next_next()\n</code></pre> <p>Call after strategy.next()</p> Source code in <code>lettrade/account/account.py</code> <pre><code>def next_next(self):\n    \"\"\"Call after strategy.next()\"\"\"\n    self._equity_snapshot()\n</code></pre>"},{"location":"reference/exchange/backtest/account/#lettrade.exchange.backtest.account.ForexBackTestAccount.risk","title":"risk","text":"<pre><code>risk(side: TradeSide, size: float, **kwargs) -&gt; float\n</code></pre> <p>Risk calculation</p> Source code in <code>lettrade/account/account.py</code> <pre><code>def risk(self, side: \"TradeSide\", size: float, **kwargs) -&gt; float:\n    \"\"\"Risk calculation\"\"\"\n    if size is None:\n        return side * abs(self._risk)\n    return side * abs(size)\n</code></pre>"},{"location":"reference/exchange/backtest/account/#lettrade.exchange.backtest.account.ForexBackTestAccount.start","title":"start","text":"<pre><code>start()\n</code></pre> <p>Start account</p> Source code in <code>lettrade/account/account.py</code> <pre><code>def start(self):\n    \"\"\"Start account\"\"\"\n</code></pre>"},{"location":"reference/exchange/backtest/account/#lettrade.exchange.backtest.account.ForexBackTestAccount.stop","title":"stop","text":"<pre><code>stop()\n</code></pre> <p>Stop account</p> Source code in <code>lettrade/account/account.py</code> <pre><code>def stop(self):\n    \"\"\"Stop account\"\"\"\n    try:\n        self._equity_snapshot()\n    except LetAccountInsufficientException:\n        pass\n</code></pre>"},{"location":"reference/exchange/backtest/backtest/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> backtest","text":""},{"location":"reference/exchange/backtest/backtest/#lettrade.exchange.backtest.backtest","title":"backtest","text":""},{"location":"reference/exchange/backtest/backtest/#lettrade.exchange.backtest.backtest.LetTradeBackTest","title":"LetTradeBackTest","text":"<pre><code>LetTradeBackTest(\n    datas: DataFeed | list[DataFeed] | str | list[str],\n    strategy: type[Strategy],\n    feeder: type[DataFeeder],\n    exchange: type[Exchange],\n    account: type[Account],\n    commander: type[Commander] | None = None,\n    stats: type[BotStatistic] = BotStatistic,\n    plotter: type[Plotter] | None = None,\n    name: str | None = None,\n    bot: type[LetTradeBot] = LetTradeBot,\n    **kwargs\n)\n</code></pre> <p>               Bases: <code>LetTrade</code></p> <p>Parameters:</p> <ul> <li> <code>datas</code>               (<code>DataFeed | list[DataFeed] | str | list[str]</code>)           \u2013            <p>description</p> </li> <li> <code>strategy</code>               (<code>type[Strategy]</code>)           \u2013            <p>description</p> </li> <li> <code>feeder</code>               (<code>type[DataFeeder]</code>)           \u2013            <p>description</p> </li> <li> <code>exchange</code>               (<code>type[Exchange]</code>)           \u2013            <p>description</p> </li> <li> <code>account</code>               (<code>type[Account]</code>)           \u2013            <p>description</p> </li> <li> <code>commander</code>               (<code>type[Commander] | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>stats</code>               (<code>type[BotStatistic]</code>, default:                   <code>BotStatistic</code> )           \u2013            <p>description. Defaults to BotStatistic.</p> </li> <li> <code>plotter</code>               (<code>type[Plotter] | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>name</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>bot</code>               (<code>type[LetTradeBot]</code>, default:                   <code>LetTradeBot</code> )           \u2013            <p>description. Defaults to LetTradeBot.</p> </li> </ul> Source code in <code>lettrade/lettrade.py</code> <pre><code>def __init__(\n    self,\n    datas: DataFeed | list[DataFeed] | str | list[str],\n    strategy: type[Strategy],\n    feeder: type[DataFeeder],\n    exchange: type[Exchange],\n    account: type[Account],\n    commander: type[Commander] | None = None,\n    stats: type[BotStatistic] = BotStatistic,\n    plotter: type[Plotter] | None = None,\n    name: str | None = None,\n    bot: type[LetTradeBot] = LetTradeBot,\n    **kwargs,\n) -&gt; None:\n    \"\"\"_summary_\n\n    Args:\n        datas (DataFeed | list[DataFeed] | str | list[str]): _description_\n        strategy (type[Strategy]): _description_\n        feeder (type[DataFeeder]): _description_\n        exchange (type[Exchange]): _description_\n        account (type[Account]): _description_\n        commander (type[Commander] | None, optional): _description_. Defaults to None.\n        stats (type[BotStatistic], optional): _description_. Defaults to BotStatistic.\n        plotter (type[Plotter] | None, optional): _description_. Defaults to None.\n        name (str | None, optional): _description_. Defaults to None.\n        bot (type[LetTradeBot], optional): _description_. Defaults to LetTradeBot.\n    \"\"\"\n    self._kwargs = kwargs\n    self._kwargs[\"strategy_cls\"] = strategy\n    self._kwargs[\"feeder_cls\"] = feeder\n    self._kwargs[\"exchange_cls\"] = exchange\n    self._kwargs[\"account_cls\"] = account\n    self._kwargs[\"commander_cls\"] = commander\n    self._kwargs[\"stats_cls\"] = stats\n    self._kwargs[\"plotter_cls\"] = plotter\n    self._kwargs[\"bot_cls\"] = bot\n    self._kwargs[\"name\"] = name\n\n    self._kwargs[\"datas\"] = self._init_datafeeds(datas)\n</code></pre>"},{"location":"reference/exchange/backtest/backtest/#lettrade.exchange.backtest.backtest.LetTradeBackTest.optimize","title":"optimize","text":"<pre><code>optimize(\n    multiprocessing: Literal[\"auto\", \"fork\"] = \"auto\",\n    workers: int | None = None,\n    process_bar: bool = True,\n    cache: str = \"data/optimize\",\n    **kwargs\n)\n</code></pre> <p>Backtest optimization</p> <p>Parameters:</p> <ul> <li> <code>multiprocessing</code>               (<code>str | None</code>, default:                   <code>'auto'</code> )           \u2013            <p>description. Defaults to \"auto\".</p> </li> </ul> Source code in <code>lettrade/exchange/backtest/backtest.py</code> <pre><code>def optimize(\n    self,\n    multiprocessing: Literal[\"auto\", \"fork\"] = \"auto\",\n    workers: int | None = None,\n    process_bar: bool = True,\n    cache: str = \"data/optimize\",\n    **kwargs,\n):\n    \"\"\"Backtest optimization\n\n    Args:\n        multiprocessing (str | None, optional): _description_. Defaults to \"auto\".\n    \"\"\"\n    if self.data.l.pointer != 0:\n        # TODO: Can drop unnecessary columns by snapshort data.columns from init time\n        raise RuntimeError(\n            \"Optimize datas is not clean, don't run() backtest before optimize()\"\n        )\n\n    # optimizes = list(product(*(zip(repeat(k), v) for k, v in kwargs.items())))\n    optimizes = list(\n        dict(zip(kwargs.keys(), values)) for values in product(*kwargs.values())\n    )\n\n    self._optimize_init(cache=cache, total=len(optimizes), process_bar=process_bar)\n\n    # Run optimize in multiprocessing\n    self._optimizes_multiproccess(\n        optimizes=optimizes,\n        multiprocessing=multiprocessing,\n        workers=workers,\n    )\n\n    self.optimize_done()\n</code></pre>"},{"location":"reference/exchange/backtest/backtest/#lettrade.exchange.backtest.backtest.LetTradeBackTest.optimize_cache","title":"optimize_cache","text":"<pre><code>optimize_cache(cache: str = 'data/optimize')\n</code></pre> <p>Load optimize results from cache</p> <p>Parameters:</p> <ul> <li> <code>cache</code>               (<code>str</code>, default:                   <code>'data/optimize'</code> )           \u2013            <p>Cache directory. Defaults to \"data/optimize\".</p> </li> </ul> Source code in <code>lettrade/exchange/backtest/backtest.py</code> <pre><code>def optimize_cache(self, cache: str = \"data/optimize\"):\n    \"\"\"Load optimize results from cache\n\n    Args:\n        cache (str, optional): Cache directory. Defaults to \"data/optimize\".\n    \"\"\"\n    import json\n\n    self._optimize_init(cache=cache, total=0, process_bar=False)\n    cache_dir = self._kwargs[\"cache\"]\n    queue = self._kwargs[\"queue\"]\n\n    logger.info(\"Load caches from: %s\", cache)\n\n    for cache_file in os.listdir(cache_dir):\n        if cache_file == \"info.json\":\n            continue\n\n        try:\n            cache_path = f\"{cache_dir}/{cache_file}\"\n            data = json.load(open(cache_path, encoding=\"utf-8\"))\n\n            queue.put(\n                dict(\n                    index=cache_file,\n                    optimize=data[\"optimize\"],\n                    result=data[\"result\"],\n                )\n            )\n        except Exception as e:\n            logger.warning(\"Loading cache %s error %s\", cache_path, e)\n\n    logger.info(\"Loaded %s caches\", len(self._stats.results))\n</code></pre>"},{"location":"reference/exchange/backtest/backtest/#lettrade.exchange.backtest.backtest.LetTradeBackTest.optimize_done","title":"optimize_done","text":"<pre><code>optimize_done()\n</code></pre> <p>Clean and close optimize handlers</p> Source code in <code>lettrade/exchange/backtest/backtest.py</code> <pre><code>def optimize_done(self):\n    \"\"\"Clean and close optimize handlers\"\"\"\n    self._stats.done()\n</code></pre>"},{"location":"reference/exchange/backtest/backtest/#lettrade.exchange.backtest.backtest.LetTradeBackTest.optimize_model","title":"optimize_model","text":"<pre><code>optimize_model(\n    params_parser: Callable[\n        [Any], list[set[str, Any]]\n    ] = None,\n    result_parser: Callable[[Series], float] = None,\n    total: int = 0,\n    cache: str = \"data/optimize\",\n    process_bar: bool = False,\n    dumper: (\n        Callable[[dict, LetTradeBackTest], None] | None\n    ) = None,\n) -&gt; Callable[[Any], Any]\n</code></pre> <p>Optimize function help to integrated with external optimize trainer</p> <p>Parameters:</p> <ul> <li> <code>params_parser</code>               (<code>Callable[[Any], list[set[str, Any]]]</code>, default:                   <code>None</code> )           \u2013            <p>Parse external parameters to bot parameters dict. Defaults to None.</p> </li> <li> <code>result_parser</code>               (<code>Callable[[Series], float]</code>, default:                   <code>None</code> )           \u2013            <p>Parse bot result to external score. Defaults to None.</p> </li> <li> <code>total</code>               (<code>int</code>, default:                   <code>0</code> )           \u2013            <p>Total number of optimize if possible. Defaults to 0.</p> </li> <li> <code>cache</code>               (<code>str</code>, default:                   <code>'data/optimize'</code> )           \u2013            <p>Cache directory to store optimize result. Defaults to \"data/optimize\".</p> </li> <li> <code>process_bar</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Enable/Disable process bar. Defaults to False.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Callable[[Any], Any]</code>           \u2013            <p>Callable[[Any], Any]: Optimize model function</p> </li> </ul> Source code in <code>lettrade/exchange/backtest/backtest.py</code> <pre><code>def optimize_model(\n    self,\n    params_parser: Callable[[Any], list[set[str, Any]]] = None,\n    result_parser: Callable[[pd.Series], float] = None,\n    total: int = 0,\n    cache: str = \"data/optimize\",\n    process_bar: bool = False,\n    dumper: Callable[[dict, \"LetTradeBackTest\"], None] | None = None,\n) -&gt; Callable[[Any], Any]:\n    \"\"\"Optimize function help to integrated with external optimize trainer\n\n    Args:\n        params_parser (Callable[[Any], list[set[str, Any]]], optional): Parse external parameters to bot parameters dict. Defaults to None.\n        result_parser (Callable[[pd.Series], float], optional): Parse bot result to external score. Defaults to None.\n        total (int, optional): Total number of optimize if possible. Defaults to 0.\n        cache (str, optional): Cache directory to store optimize result. Defaults to \"data/optimize\".\n        process_bar (bool, optional): Enable/Disable process bar. Defaults to False.\n\n    Raises:\n        RuntimeError: _description_\n\n    Returns:\n        Callable[[Any], Any]: Optimize model function\n    \"\"\"\n    if self.data.l.pointer != 0:\n        raise RuntimeError(\n            \"Optimize datas is not clean, don't run() backtest before optimize()\"\n        )\n\n    self._optimize_init(cache=cache, total=total, process_bar=process_bar)\n\n    # Optimize parameters\n    optimizer_kwargs = dict(\n        main_pid=os.getpid(),\n        params_parser=params_parser,\n        result_parser=result_parser,\n        kwargs=self._kwargs,\n    )\n\n    if dumper is not None:\n        dumper(optimizer_kwargs, self)\n    else:\n        self.__class__._optimize_model_kwargs(optimizer_kwargs)\n\n    return self.__class__._optimize_model\n</code></pre>"},{"location":"reference/exchange/backtest/backtest/#lettrade.exchange.backtest.backtest.LetTradeBackTest.plot","title":"plot","text":"<pre><code>plot(*args, jump: dict | None = None, **kwargs)\n</code></pre> <p>Plot strategy/optimize result</p> BotPlotter <p>Miror of BotPlotter.plot(). Plotly implement PlotlyBotPlotter.plot().</p> <p>Args:     <code>jump</code> (dict | None, optional): Miror of BotPlotter.jump()</p> <p>Example:     Jump to position_id         <pre><code>lt.plot(\n    jump=dict(position_id=1, range=300),\n    layout=dict(height=2000),\n)\n</code></pre></p> OptimizePlotter <p>Miror of OptimizePlotter.plot(). Plotly implement PlotlyOptimizePlotter.plot().</p> <p>Example:         <pre><code>lt.plot(layout=dict(height=2000))\n</code></pre></p> Source code in <code>lettrade/lettrade.py</code> <pre><code>def plot(self, *args, jump: dict | None = None, **kwargs):\n    \"\"\"Plot strategy/optimize result\n\n    BotPlotter:\n        Miror of [BotPlotter.plot()](site:/reference/plot/bot/#lettrade.plot.bot.BotPlotter.plot).\n        Plotly implement [PlotlyBotPlotter.plot()](site:/reference/plot/plotly/plotly/#lettrade.plot.plotly.plotly.PlotlyBotPlotter.plot).\n\n        Args:\n            `jump` (dict | None, optional): Miror of [BotPlotter.jump()](site:/reference/plot/bot/#lettrade.plot.bot.BotPlotter.jump)\n\n        Example:\n            Jump to position_id\n                ```python\n                lt.plot(\n                    jump=dict(position_id=1, range=300),\n                    layout=dict(height=2000),\n                )\n                ```\n\n    OptimizePlotter:\n        Miror of [OptimizePlotter.plot()](site:/reference/plot/optimize/#lettrade.plot.optimize.OptimizePlotter.plot).\n        Plotly implement [PlotlyOptimizePlotter.plot()](site:/reference/exchange/backtest/plotly/optimize/#lettrade.exchange.backtest.plotly.optimize.PlotlyOptimizePlotter.plot).\n\n        Example:\n                ```python\n                lt.plot(layout=dict(height=2000))\n                ```\n    \"\"\"\n    if __debug__:\n        from .utils.docs import is_docs_session\n\n        if is_docs_session():\n            return\n\n    self.plotter.plot(*args, jump=jump, **kwargs)\n</code></pre>"},{"location":"reference/exchange/backtest/backtest/#lettrade.exchange.backtest.backtest.LetTradeBackTest.stop","title":"stop","text":"<pre><code>stop()\n</code></pre> <p>Stop LetTrade</p> Source code in <code>lettrade/lettrade.py</code> <pre><code>def stop(self):\n    \"\"\"Stop LetTrade\"\"\"\n    if self._bot is not None:\n        return self._bot.stop()\n    if self.stats:\n        self.stats.stop()\n</code></pre>"},{"location":"reference/exchange/backtest/backtest/#lettrade.exchange.backtest.backtest.LetTradeBackTestBot","title":"LetTradeBackTestBot","text":"<pre><code>LetTradeBackTestBot(\n    datas: DataFeed | list[DataFeed] | list[str] | str,\n    strategy: type[Strategy],\n    feeder: type[DataFeeder],\n    exchange: type[Exchange],\n    account: type[Account],\n    commander: type[Commander] | None = None,\n    plotter: type[Plotter] | None = None,\n    stats: type[BotStatistic] | None = None,\n    name: str | None = None,\n    **kwargs\n)\n</code></pre> <p>               Bases: <code>LetTradeBot</code></p> <p>LetTradeBot for backtest</p> <p>Parameters:</p> <ul> <li> <code>datas</code>               (<code>DataFeed | list[DataFeed] | list[str] | str</code>)           \u2013            <p>description</p> </li> <li> <code>strategy</code>               (<code>type[Strategy]</code>)           \u2013            <p>description</p> </li> <li> <code>feeder</code>               (<code>type[DataFeeder]</code>)           \u2013            <p>description</p> </li> <li> <code>exchange</code>               (<code>type[Exchange]</code>)           \u2013            <p>description</p> </li> <li> <code>account</code>               (<code>type[Account]</code>)           \u2013            <p>description</p> </li> <li> <code>commander</code>               (<code>type[Commander] | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>plotter</code>               (<code>type[Plotter] | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>stats</code>               (<code>type[BotStatistic] | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>name</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> Source code in <code>lettrade/bot.py</code> <pre><code>def __init__(\n    self,\n    datas: DataFeed | list[DataFeed] | list[str] | str,\n    strategy: type[Strategy],\n    feeder: type[DataFeeder],\n    exchange: type[Exchange],\n    account: type[Account],\n    commander: type[Commander] | None = None,\n    plotter: type[Plotter] | None = None,\n    stats: type[BotStatistic] | None = None,\n    name: str | None = None,\n    **kwargs,\n) -&gt; None:\n    \"\"\"_summary_\n\n    Args:\n        datas (DataFeed | list[DataFeed] | list[str] | str): _description_\n        strategy (type[Strategy]): _description_\n        feeder (type[DataFeeder]): _description_\n        exchange (type[Exchange]): _description_\n        account (type[Account]): _description_\n        commander (type[Commander] | None, optional): _description_. Defaults to None.\n        plotter (type[Plotter] | None, optional): _description_. Defaults to None.\n        stats (type[BotStatistic] | None, optional): _description_. Defaults to None.\n        name (str | None, optional): _description_. Defaults to None.\n    \"\"\"\n    logger.info(\"New bot: %s\", name)\n\n    self._strategy_cls = strategy\n    self._feeder_cls = feeder\n    self._exchange_cls = exchange\n    self._account_cls = account\n    self._commander_cls = commander\n    self._plotter_cls = plotter\n    self._stats_cls = stats\n\n    self._name = name\n    self._kwargs = kwargs\n\n    # DataFeeds\n    self.datas = datas\n    self.data = self.datas[0]\n</code></pre>"},{"location":"reference/exchange/backtest/backtest/#lettrade.exchange.backtest.backtest.LetTradeBackTestBot.account","title":"account  <code>instance-attribute</code>","text":"<pre><code>account: Account\n</code></pre> <p>Trading account handler</p>"},{"location":"reference/exchange/backtest/backtest/#lettrade.exchange.backtest.backtest.LetTradeBackTestBot.brain","title":"brain  <code>instance-attribute</code>","text":"<pre><code>brain: Brain\n</code></pre> <p>Brain of bot</p>"},{"location":"reference/exchange/backtest/backtest/#lettrade.exchange.backtest.backtest.LetTradeBackTestBot.commander","title":"commander  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>commander: Commander | None = None\n</code></pre> <p>Control the bot</p>"},{"location":"reference/exchange/backtest/backtest/#lettrade.exchange.backtest.backtest.LetTradeBackTestBot.data","title":"data  <code>instance-attribute</code>","text":"<pre><code>data: DataFeed = datas[0]\n</code></pre> <p>Main DataFeed for bot</p>"},{"location":"reference/exchange/backtest/backtest/#lettrade.exchange.backtest.backtest.LetTradeBackTestBot.datas","title":"datas  <code>instance-attribute</code>","text":"<pre><code>datas: list[DataFeed] = datas\n</code></pre> <p>DataFeed list for bot</p>"},{"location":"reference/exchange/backtest/backtest/#lettrade.exchange.backtest.backtest.LetTradeBackTestBot.exchange","title":"exchange  <code>instance-attribute</code>","text":"<pre><code>exchange: Exchange\n</code></pre> <p>Trading exchange and events</p>"},{"location":"reference/exchange/backtest/backtest/#lettrade.exchange.backtest.backtest.LetTradeBackTestBot.feeder","title":"feeder  <code>instance-attribute</code>","text":"<pre><code>feeder: DataFeeder\n</code></pre> <p>DataFeeder help to handle <code>datas</code></p>"},{"location":"reference/exchange/backtest/backtest/#lettrade.exchange.backtest.backtest.LetTradeBackTestBot.plotter","title":"plotter  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>plotter: Plotter | None = None\n</code></pre> <p>Plot graphic results</p>"},{"location":"reference/exchange/backtest/backtest/#lettrade.exchange.backtest.backtest.LetTradeBackTestBot.strategy","title":"strategy  <code>instance-attribute</code>","text":"<pre><code>strategy: Strategy\n</code></pre> <p>Strategy</p>"},{"location":"reference/exchange/backtest/backtest/#lettrade.exchange.backtest.backtest.LetTradeBackTestBot.new_bot","title":"new_bot  <code>classmethod</code>","text":"<pre><code>new_bot(\n    datas: list[DataFeed],\n    strategy_cls: type[Strategy],\n    feeder_cls: type[DataFeeder],\n    exchange_cls: type[Exchange],\n    account_cls: type[Account],\n    commander_cls: type[Commander],\n    plotter_cls: type[Plotter],\n    stats_cls: type[BotStatistic],\n    name: str | None = None,\n    **kwargs\n) -&gt; LetTradeBot\n</code></pre> <p>Create new bot object</p> <p>Parameters:</p> <ul> <li> <code>datas</code>               (<code>list[DataFeed]</code>)           \u2013            <p>description</p> </li> <li> <code>strategy_cls</code>               (<code>type[Strategy]</code>)           \u2013            <p>description</p> </li> <li> <code>feeder_cls</code>               (<code>type[DataFeeder]</code>)           \u2013            <p>description</p> </li> <li> <code>exchange_cls</code>               (<code>type[Exchange]</code>)           \u2013            <p>description</p> </li> <li> <code>account_cls</code>               (<code>type[Account]</code>)           \u2013            <p>description</p> </li> <li> <code>commander_cls</code>               (<code>type[Commander]</code>)           \u2013            <p>description</p> </li> <li> <code>plotter_cls</code>               (<code>type[Plotter]</code>)           \u2013            <p>description</p> </li> <li> <code>stats_cls</code>               (<code>type[BotStatistic]</code>)           \u2013            <p>description</p> </li> <li> <code>name</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>LetTradeBot</code> (              <code>LetTradeBot</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/bot.py</code> <pre><code>@classmethod\ndef new_bot(\n    cls,\n    datas: list[DataFeed],\n    strategy_cls: type[Strategy],\n    feeder_cls: type[DataFeeder],\n    exchange_cls: type[Exchange],\n    account_cls: type[Account],\n    commander_cls: type[Commander],\n    plotter_cls: type[Plotter],\n    stats_cls: type[BotStatistic],\n    name: str | None = None,\n    **kwargs,\n) -&gt; \"LetTradeBot\":\n    \"\"\"Create new bot object\n\n    Args:\n        datas (list[DataFeed]): _description_\n        strategy_cls (type[Strategy]): _description_\n        feeder_cls (type[DataFeeder]): _description_\n        exchange_cls (type[Exchange]): _description_\n        account_cls (type[Account]): _description_\n        commander_cls (type[Commander]): _description_\n        plotter_cls (type[Plotter]): _description_\n        stats_cls (type[BotStatistic]): _description_\n        name (str | None, optional): _description_. Defaults to None.\n\n    Returns:\n        LetTradeBot: _description_\n    \"\"\"\n    bot = cls(\n        strategy=strategy_cls,\n        datas=datas,\n        feeder=feeder_cls,\n        exchange=exchange_cls,\n        account=account_cls,\n        commander=commander_cls,\n        plotter=plotter_cls,\n        stats=stats_cls,\n        name=name,\n        **kwargs,\n    )\n    return bot\n</code></pre>"},{"location":"reference/exchange/backtest/backtest/#lettrade.exchange.backtest.backtest.LetTradeBackTestBot.plot","title":"plot","text":"<pre><code>plot(*args, **kwargs)\n</code></pre> <p>Plot bot result</p> Source code in <code>lettrade/bot.py</code> <pre><code>def plot(self, *args, **kwargs):\n    \"\"\"Plot bot result\"\"\"\n    if __debug__:\n        from .utils.docs import is_docs_session\n\n        if is_docs_session():\n            return\n\n    self.plotter.plot(*args, **kwargs)\n</code></pre>"},{"location":"reference/exchange/backtest/backtest/#lettrade.exchange.backtest.backtest.LetTradeBackTestBot.run","title":"run","text":"<pre><code>run()\n</code></pre> <p>Run bot</p> Source code in <code>lettrade/bot.py</code> <pre><code>def run(self):\n    \"\"\"Run bot\"\"\"\n    if self.commander:\n        self.commander.start()\n\n    self.brain.run()\n\n    if self.commander:\n        self.commander.stop()\n\n    if self._stats_cls:\n        self.stats.compute()\n</code></pre>"},{"location":"reference/exchange/backtest/backtest/#lettrade.exchange.backtest.backtest.LetTradeBackTestBot.run_bot","title":"run_bot  <code>classmethod</code>","text":"<pre><code>run_bot(\n    bot: LetTradeBot | None = None,\n    datas: list[DataFeed] | None = None,\n    id: int | None = None,\n    name: str | None = None,\n    result: Literal[\"str\", \"stats\", \"bot\", None] = \"str\",\n    **kwargs\n) -&gt; LetTradeBot | BotStatistic | str | None\n</code></pre> <p>Run bot object</p> <p>Parameters:</p> <ul> <li> <code>bot</code>               (<code>LetTradeBot | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>datas</code>               (<code>list[DataFeed] | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>id</code>               (<code>int | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>name</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>result</code>               (<code>Literal['str', 'stats', 'bot', None]</code>, default:                   <code>'str'</code> )           \u2013            <p>description. Defaults to \"str\".</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>LetTradeBot | BotStatistic | str | None</code>           \u2013            <p>LetTradeBot | BotStatistic | str | None: Return value will be pickle across multiprocessing. The cost higher from <code>str</code>, <code>stats</code> object, <code>bot</code> object</p> </li> </ul> Source code in <code>lettrade/bot.py</code> <pre><code>@classmethod\ndef run_bot(\n    cls,\n    bot: \"LetTradeBot | None\" = None,\n    datas: list[DataFeed] | None = None,\n    id: int | None = None,\n    name: str | None = None,\n    result: Literal[\"str\", \"stats\", \"bot\", None] = \"str\",\n    **kwargs,\n) -&gt; \"LetTradeBot | BotStatistic | str | None\":\n    \"\"\"Run bot object\n\n    Args:\n        bot (LetTradeBot | None, optional): _description_. Defaults to None.\n        datas (list[DataFeed] | None, optional): _description_. Defaults to None.\n        id (int | None, optional): _description_. Defaults to None.\n        name (str | None, optional): _description_. Defaults to None.\n        result (Literal[\"str\", \"stats\", \"bot\", None], optional): _description_. Defaults to \"str\".\n\n    Returns:\n        LetTradeBot | BotStatistic | str | None: Return value will be pickle across multiprocessing.\n            The cost higher from `str`, `stats` object, `bot` object\n    \"\"\"\n    # Set name for current processing\n    if name is None:\n        d = datas[0] if datas else bot.data\n        name = f\"{id}-{os.getpid()}-{d.name}\"\n\n    if bot is None:\n        bot = cls.start_bot(\n            datas=datas,\n            name=name,\n            **kwargs,\n        )\n\n    # bot\n    bot.run(**kwargs.get(\"run_kwargs\", {}))\n\n    # Return type\n    if result == \"stats\":\n        return bot.stats\n    if result == \"str\":\n        return str(bot.stats)\n\n    return bot\n</code></pre>"},{"location":"reference/exchange/backtest/backtest/#lettrade.exchange.backtest.backtest.LetTradeBackTestBot.start","title":"start","text":"<pre><code>start()\n</code></pre> <p>Start bot</p> Source code in <code>lettrade/bot.py</code> <pre><code>def start(self):\n    \"\"\"Start bot\"\"\"\n    if not hasattr(self, \"brain\"):\n        self.init()\n\n    self.brain.start()\n\n    if __debug__:\n        logger.debug(\"Bot %s started with %d datas\", self._name, len(self.datas))\n</code></pre>"},{"location":"reference/exchange/backtest/backtest/#lettrade.exchange.backtest.backtest.LetTradeBackTestBot.start_bot","title":"start_bot  <code>classmethod</code>","text":"<pre><code>start_bot(\n    bot: LetTradeBot | None = None, **kwargs\n) -&gt; LetTradeBot\n</code></pre> <p>Init and start bot object</p> <p>Parameters:</p> <ul> <li> <code>bot</code>               (<code>LetTradeBot | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>LetTradeBot</code> (              <code>LetTradeBot</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/bot.py</code> <pre><code>@classmethod\ndef start_bot(\n    cls,\n    bot: \"LetTradeBot | None\" = None,\n    **kwargs,\n) -&gt; \"LetTradeBot\":\n    \"\"\"Init and start bot object\n\n    Args:\n        bot (LetTradeBot | None, optional): _description_. Defaults to None.\n\n    Returns:\n        LetTradeBot: _description_\n    \"\"\"\n    if bot is None:\n        bot = cls.new_bot(**kwargs)\n    bot.init(**kwargs.get(\"init_kwargs\", {}))\n    bot.start()\n    return bot\n</code></pre>"},{"location":"reference/exchange/backtest/backtest/#lettrade.exchange.backtest.backtest.LetTradeBackTestBot.stop","title":"stop","text":"<pre><code>stop()\n</code></pre> <p>Stop bot</p> Source code in <code>lettrade/bot.py</code> <pre><code>def stop(self):\n    \"\"\"Stop bot\"\"\"\n    self.brain.stop()\n    if self.plotter is not None:\n        self.plotter.stop()\n</code></pre>"},{"location":"reference/exchange/backtest/backtest/#lettrade.exchange.backtest.backtest.let_backtest","title":"let_backtest","text":"<pre><code>let_backtest(\n    datas: DataFeed | list[DataFeed] | str | list[str],\n    strategy: type[Strategy],\n    *,\n    feeder: type[DataFeeder] = BackTestDataFeeder,\n    exchange: type[Exchange] = BackTestExchange,\n    account: type[Account] = BackTestAccount,\n    commander: type[Commander] | None = BackTestCommander,\n    stats: type[BotStatistic] | None = BotStatistic,\n    optimize_stats: (\n        type[OptimizeStatistic] | None\n    ) = OptimizeStatistic,\n    plotter: type[BotPlotter] | None = \"PlotlyBotPlotter\",\n    optimize_plotter: (\n        type[OptimizePlotter] | None\n    ) = \"PlotlyOptimizePlotter\",\n    bot: (\n        type[LetTradeBackTestBot] | None\n    ) = LetTradeBackTestBot,\n    balance: float | None = 10000,\n    commission: float | None = 0.2,\n    leverage: float | None = 20,\n    **kwargs\n) -&gt; LetTradeBackTest\n</code></pre> <p>Complete <code>lettrade</code> backtest depenencies</p> <p>Parameters:</p> <ul> <li> <code>datas</code>               (<code>DataFeed | list[DataFeed] | str | list[str]</code>)           \u2013            <p>description</p> </li> <li> <code>strategy</code>               (<code>Type[Strategy]</code>)           \u2013            <p>The Strategy implement class</p> </li> <li> <code>feeder</code>               (<code>Type[DataFeeder]</code>, default:                   <code>BackTestDataFeeder</code> )           \u2013            <p>description. Defaults to BackTestDataFeeder.</p> </li> <li> <code>exchange</code>               (<code>Type[Exchange]</code>, default:                   <code>BackTestExchange</code> )           \u2013            <p>description. Defaults to BackTestExchange.</p> </li> <li> <code>account</code>               (<code>Type[Account]</code>, default:                   <code>BackTestAccount</code> )           \u2013            <p>description. Defaults to BackTestAccount.</p> </li> <li> <code>commander</code>               (<code>Type[Commander] | None</code>, default:                   <code>BackTestCommander</code> )           \u2013            <p>description. Defaults to BackTestCommander.</p> </li> <li> <code>plotter</code>               (<code>Type[Plotter] | None</code>, default:                   <code>'PlotlyBotPlotter'</code> )           \u2013            <p>description. Defaults to PlotlyBotPlotter.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>The validate parameter error</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>LetTradeBackTest</code> (              <code>LetTradeBackTest</code> )          \u2013            <p>The LetTrade backtesting object</p> </li> </ul> Source code in <code>lettrade/exchange/backtest/backtest.py</code> <pre><code>def let_backtest(\n    datas: DataFeed | list[DataFeed] | str | list[str],\n    strategy: type[Strategy],\n    *,\n    feeder: type[DataFeeder] = BackTestDataFeeder,\n    exchange: type[Exchange] = BackTestExchange,\n    account: type[Account] = BackTestAccount,\n    commander: type[Commander] | None = BackTestCommander,\n    stats: type[BotStatistic] | None = BotStatistic,\n    optimize_stats: type[OptimizeStatistic] | None = OptimizeStatistic,\n    plotter: type[BotPlotter] | None = \"PlotlyBotPlotter\",\n    optimize_plotter: type[OptimizePlotter] | None = \"PlotlyOptimizePlotter\",\n    bot: type[LetTradeBackTestBot] | None = LetTradeBackTestBot,\n    # Account kwargs\n    balance: float | None = 10_000,\n    commission: float | None = 0.2,\n    leverage: float | None = 20,\n    **kwargs,\n) -&gt; \"LetTradeBackTest\":\n    \"\"\"Complete `lettrade` backtest depenencies\n\n    Args:\n        datas (DataFeed | list[DataFeed] | str | list[str]): _description_\n        strategy (Type[Strategy]): The Strategy implement class\n        feeder (Type[DataFeeder], optional): _description_. Defaults to BackTestDataFeeder.\n        exchange (Type[Exchange], optional): _description_. Defaults to BackTestExchange.\n        account (Type[Account], optional): _description_. Defaults to BackTestAccount.\n        commander (Type[Commander] | None, optional): _description_. Defaults to BackTestCommander.\n        plotter (Type[Plotter] | None, optional): _description_. Defaults to PlotlyBotPlotter.\n\n    Raises:\n        RuntimeError: The validate parameter error\n\n    Returns:\n        LetTradeBackTest: The LetTrade backtesting object\n    \"\"\"\n    account_kwargs: dict = kwargs.setdefault(\"account_kwargs\", {})\n    account_kwargs.update(\n        balance=balance,\n        commission=commission,\n        leverage=leverage,\n    )\n\n    return LetTradeBackTest(\n        strategy=strategy,\n        datas=datas,\n        feeder=feeder,\n        exchange=exchange,\n        commander=commander,\n        account=account,\n        stats=stats,\n        plotter=plotter,\n        bot=bot,\n        # Backtest\n        optimize_stats_cls=optimize_stats,\n        optimize_plotter_cls=optimize_plotter,\n        **kwargs,\n    )\n</code></pre>"},{"location":"reference/exchange/backtest/commander/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> commander","text":""},{"location":"reference/exchange/backtest/commander/#lettrade.exchange.backtest.commander","title":"commander","text":""},{"location":"reference/exchange/backtest/commander/#lettrade.exchange.backtest.commander.BackTestCommander","title":"BackTestCommander","text":"<p>               Bases: <code>Commander</code></p> <p>BackTest Commander to debug commander notify</p>"},{"location":"reference/exchange/backtest/commander/#lettrade.exchange.backtest.commander.BackTestCommander.init","title":"init","text":"<pre><code>init(\n    bot: LetTradeBot,\n    brain: Brain,\n    exchange: Exchange,\n    strategy: Strategy,\n)\n</code></pre> <p>Init commander dependencies</p> <p>Parameters:</p> <ul> <li> <code>bot</code>               (<code>LetTradeBot</code>)           \u2013            <p>LetTradeBot object</p> </li> <li> <code>brain</code>               (<code>Brain</code>)           \u2013            <p>Brain of bot</p> </li> <li> <code>exchange</code>               (<code>Exchange</code>)           \u2013            <p>Manage bot trading</p> </li> <li> <code>strategy</code>               (<code>Strategy</code>)           \u2013            <p>Strategy of bot</p> </li> </ul> Source code in <code>lettrade/commander/commander.py</code> <pre><code>def init(\n    self,\n    bot: \"LetTradeBot\",\n    brain: \"Brain\",\n    exchange: \"Exchange\",\n    strategy: \"Strategy\",\n):\n    \"\"\"Init commander dependencies\n\n    Args:\n        bot (LetTradeBot): LetTradeBot object\n        brain (Brain): Brain of bot\n        exchange (Exchange): Manage bot trading\n        strategy (Strategy): Strategy of bot\n    \"\"\"\n    self.bot = bot\n    self.brain = brain\n    self.exchange = exchange\n    self.strategy = strategy\n\n    self._name = self.bot._name\n</code></pre>"},{"location":"reference/exchange/backtest/data/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> data","text":""},{"location":"reference/exchange/backtest/data/#lettrade.exchange.backtest.data","title":"data","text":""},{"location":"reference/exchange/backtest/data/#lettrade.exchange.backtest.data.BackTestDataFeed","title":"BackTestDataFeed","text":"<pre><code>BackTestDataFeed(\n    data: DataFrame,\n    name: str,\n    timeframe: str | int | Timedelta | None = None,\n    meta: dict | None = None,\n    since: int | str | Timestamp | None = None,\n    to: int | str | Timestamp | None = None,\n    **kwargs\n)\n</code></pre> <p>               Bases: <code>DataFeed</code></p> <p>BackTest DataFeed</p> <p>Parameters:</p> <ul> <li> <code>data</code>               (<code>DataFrame</code>)           \u2013            <p>description</p> </li> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>description</p> </li> <li> <code>timeframe</code>               (<code>str | int | Timedelta | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>meta</code>               (<code>dict | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>since</code>               (<code>int | str | Timestamp | None</code>, default:                   <code>None</code> )           \u2013            <p>Drop data before since. Defaults to None.</p> </li> <li> <code>to</code>               (<code>int | str | Timestamp | None</code>, default:                   <code>None</code> )           \u2013            <p>Drop data after to. Defaults to None.</p> </li> </ul> Source code in <code>lettrade/exchange/backtest/data.py</code> <pre><code>def __init__(\n    self,\n    data: pd.DataFrame,\n    name: str,\n    timeframe: str | int | pd.Timedelta | None = None,\n    meta: dict | None = None,\n    since: int | str | pd.Timestamp | None = None,\n    to: int | str | pd.Timestamp | None = None,\n    **kwargs,\n) -&gt; None:\n    \"\"\"_summary_\n\n    Args:\n        data (pd.DataFrame): _description_\n        name (str): _description_\n        timeframe (str | int | pd.Timedelta | None, optional): _description_. Defaults to None.\n        meta (dict | None, optional): _description_. Defaults to None.\n        since (int | str | pd.Timestamp | None, optional): Drop data before since. Defaults to None.\n        to (int | str | pd.Timestamp | None, optional): Drop data after to. Defaults to None.\n    \"\"\"\n    if timeframe is None:\n        timeframe = self._find_timeframe(data)\n        logger.info(\"DataFeed %s auto detect timeframe %s\", name, timeframe)\n    super().__init__(\n        data=data,\n        name=name,\n        timeframe=timeframe,\n        meta=meta,\n        **kwargs,\n    )\n    if since is not None or to is not None:\n        self.drop(since=since, to=to)\n</code></pre>"},{"location":"reference/exchange/backtest/data/#lettrade.exchange.backtest.data.BackTestDataFeed.i","title":"i  <code>property</code>","text":"<pre><code>i: indicator\n</code></pre> <p>Alias to <code>lettrade.indicator</code> and using in DataFeed by call: <code>DataFeed.i.indicator_name()</code></p>"},{"location":"reference/exchange/backtest/data/#lettrade.exchange.backtest.data.BackTestDataFeed.is_main","title":"is_main  <code>property</code>","text":"<pre><code>is_main: bool\n</code></pre> <p>Property to check DataFeed is main DataFeed or not</p>"},{"location":"reference/exchange/backtest/data/#lettrade.exchange.backtest.data.BackTestDataFeed.l","title":"l  <code>instance-attribute</code>","text":"<pre><code>l: LetDataFeedWrapper\n</code></pre> <p>LetTrade DataFeed wrapper using to manage index pointer of DataFeed</p>"},{"location":"reference/exchange/backtest/data/#lettrade.exchange.backtest.data.BackTestDataFeed.meta","title":"meta  <code>property</code>","text":"<pre><code>meta: dict\n</code></pre> <p>Property to get metadata of DataFeed</p>"},{"location":"reference/exchange/backtest/data/#lettrade.exchange.backtest.data.BackTestDataFeed.name","title":"name  <code>property</code>","text":"<pre><code>name: str\n</code></pre> <p>Property to get name of DataFeed</p>"},{"location":"reference/exchange/backtest/data/#lettrade.exchange.backtest.data.BackTestDataFeed.now","title":"now  <code>property</code>","text":"<pre><code>now: Timestamp\n</code></pre> <p>Property to get current index value of DataFeed</p>"},{"location":"reference/exchange/backtest/data/#lettrade.exchange.backtest.data.BackTestDataFeed.timeframe","title":"timeframe  <code>property</code>","text":"<pre><code>timeframe: TimeFrame\n</code></pre> <p>Property to get timeframe of DataFeed</p>"},{"location":"reference/exchange/backtest/data/#lettrade.exchange.backtest.data.BackTestDataFeed.bar","title":"bar","text":"<pre><code>bar(i: int = 0) -&gt; Timestamp\n</code></pre> <p>Get current pd.Timestamp value of DataFeed</p> <p>Parameters:</p> <ul> <li> <code>i</code>               (<code>int</code>, default:                   <code>0</code> )           \u2013            <p>Index. Defaults to 0.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Timestamp</code>           \u2013            <p>pd.Timestamp: description</p> </li> </ul> Source code in <code>lettrade/data/data.py</code> <pre><code>def bar(self, i: int = 0) -&gt; pd.Timestamp:\n    \"\"\"Get current pd.Timestamp value of DataFeed\n\n    Args:\n        i (int, optional): Index. Defaults to 0.\n\n    Returns:\n        pd.Timestamp: _description_\n    \"\"\"\n    return self.l.index[i]\n</code></pre>"},{"location":"reference/exchange/backtest/data/#lettrade.exchange.backtest.data.BackTestDataFeed.copy","title":"copy","text":"<pre><code>copy(deep: bool = False, **kwargs) -&gt; DataFeed\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>deep</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>description. Defaults to False.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>DataFeed</code> (              <code>DataFeed</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/data/data.py</code> <pre><code>def copy(self, deep: bool = False, **kwargs) -&gt; \"DataFeed\":\n    \"\"\"_summary_\n\n    Args:\n        deep (bool, optional): _description_. Defaults to False.\n\n    Returns:\n        DataFeed: _description_\n    \"\"\"\n    df = super().copy(deep=deep)\n    df = self.__class__(\n        data=df,\n        name=self.name,\n        timeframe=self.timeframe,\n        meta=self.meta.copy(),\n        **kwargs,\n    )\n    return df\n</code></pre>"},{"location":"reference/exchange/backtest/data/#lettrade.exchange.backtest.data.BackTestDataFeed.drop","title":"drop","text":"<pre><code>drop(\n    *args,\n    since: int | str | Timestamp | None = None,\n    to: int | str | Timestamp | None = None,\n    **kwargs\n) -&gt; None\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>since</code>               (<code>int | str | Timestamp | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>to</code>               (<code>int | str | Timestamp | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/data/data.py</code> <pre><code>def drop(\n    self,\n    *args,\n    since: int | str | pd.Timestamp | None = None,\n    to: int | str | pd.Timestamp | None = None,\n    **kwargs,\n) -&gt; None:\n    \"\"\"_summary_\n\n    Args:\n        since (int | str | pd.Timestamp | None, optional): _description_. Defaults to None.\n        to (int | str | pd.Timestamp | None, optional): _description_. Defaults to None.\n\n    Raises:\n        RuntimeError: _description_\n    \"\"\"\n    if since is None and to is None:\n        super().drop(*args, **kwargs)\n        return\n\n    condiction = None\n\n    # Since\n    if since is not None:\n        if isinstance(since, int):\n            loc = self.l.index[since]\n        elif isinstance(since, str):\n            loc = pd.to_datetime(since, utc=True)\n        elif isinstance(since, pd.Timestamp):\n            loc = since\n        else:\n            raise RuntimeError(f\"DataFeed.drop since {since} is invalid\")\n        condiction = self.index &lt; loc\n\n    # To\n    if to is not None:\n        if isinstance(to, int):\n            loc = self.l.index[to]\n        elif isinstance(to, str):\n            loc = pd.to_datetime(to, utc=True)\n        elif isinstance(to, pd.Timestamp):\n            loc = to\n        else:\n            raise RuntimeError(f\"DataFeed.drop to {to} is invalid\")\n\n        if condiction is None:\n            condiction = self.index &gt; loc\n        else:\n            condiction = condiction | (self.index &gt; loc)\n\n    index = self[condiction].index\n    super().drop(index=index, inplace=True)\n    self.l.reset()\n\n    if __debug__:\n        logger.debug(\"BackTestDataFeed %s dropped %s rows\", self.name, len(index))\n</code></pre>"},{"location":"reference/exchange/backtest/data/#lettrade.exchange.backtest.data.BackTestDataFeed.push","title":"push","text":"<pre><code>push(\n    rows: list[list[int | float]],\n    unit: str | None = None,\n    utc: bool = True,\n    **kwargs\n)\n</code></pre> <p>Push new rows to DataFeed</p> <p>Parameters:</p> <ul> <li> <code>rows</code>               (<code>list[list[int | float]]</code>)           \u2013            <p>list of rows <code>[[\"timestamp\", \"open price\", \"high price\"...]]</code></p> </li> <li> <code>unit</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>pandas.Timestamp parsing unit. Defaults to None.</p> </li> <li> <code>utc</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>description. Defaults to True.</p> </li> </ul> Source code in <code>lettrade/data/data.py</code> <pre><code>def push(\n    self,\n    rows: list[list[int | float]],\n    unit: str | None = None,\n    utc: bool = True,\n    **kwargs,\n):\n    \"\"\"Push new rows to DataFeed\n\n    Args:\n        rows (list[list[int | float]]): list of rows `[[\"timestamp\", \"open price\", \"high price\"...]]`\n        unit (str | None, optional): pandas.Timestamp parsing unit. Defaults to None.\n        utc (bool, optional): _description_. Defaults to True.\n    \"\"\"\n    for row in rows:\n        dt = pd.to_datetime(row[0], unit=unit, utc=utc, **kwargs)\n        self.at[\n            dt,\n            (\n                \"open\",\n                \"high\",\n                \"low\",\n                \"close\",\n                \"volume\",\n            ),\n        ] = (\n            row[1],  # open\n            row[2],  # high\n            row[3],  # low\n            row[4],  # close\n            row[5],  # volume\n        )\n\n    if __debug__:\n        logger.debug(\"[%s] Update bar: \\n%s\", self.name, self.tail(len(rows)))\n</code></pre>"},{"location":"reference/exchange/backtest/data/#lettrade.exchange.backtest.data.CSVBackTestDataFeed","title":"CSVBackTestDataFeed","text":"<pre><code>CSVBackTestDataFeed(\n    path: str | None = None,\n    csv: dict | None = None,\n    name: str | None = None,\n    timeframe: str | int | Timedelta | None = None,\n    meta: dict | None = None,\n    data: DataFeed | None = None,\n    **kwargs: dict\n)\n</code></pre> <p>               Bases: <code>BackTestDataFeed</code></p> <p>Implement help to load DataFeed from csv file</p> <p>Parameters:</p> <ul> <li> <code>path</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>Path to csv file. Defaults to None.</p> </li> <li> <code>csv</code>               (<code>dict | None</code>, default:                   <code>None</code> )           \u2013            <p>Reflect of <code>pandas.read_csv()</code> parameters. Defaults to None.</p> </li> <li> <code>name</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>timeframe</code>               (<code>str | int | Timedelta | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>meta</code>               (<code>dict | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>data</code>               (<code>DataFeed | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>**kwargs</code>               (<code>dict</code>, default:                   <code>{}</code> )           \u2013            <p>DataFeed dict parameters</p> </li> </ul> Source code in <code>lettrade/exchange/backtest/data.py</code> <pre><code>def __init__(\n    self,\n    path: str | None = None,\n    csv: dict | None = None,\n    name: str | None = None,\n    timeframe: str | int | pd.Timedelta | None = None,\n    meta: dict | None = None,\n    data: DataFeed | None = None,\n    **kwargs: dict,\n) -&gt; None:\n    \"\"\"_summary_\n\n    Args:\n        path (str | None, optional): Path to csv file. Defaults to None.\n        csv (dict | None, optional): Reflect of `pandas.read_csv()` parameters. Defaults to None.\n        name (str | None, optional): _description_. Defaults to None.\n        timeframe (str | int | pd.Timedelta | None, optional): _description_. Defaults to None.\n        meta (dict | None, optional): _description_. Defaults to None.\n        data (DataFeed | None, optional): _description_. Defaults to None.\n        **kwargs (dict): [DataFeed](../../data/data.md#lettrade.data.data.DataFeed) dict parameters\n    \"\"\"\n    if name is None:\n        name = _path_to_name(path)\n\n    if data is None:\n        csv_params = dict(\n            index_col=0,\n            parse_dates=[\"datetime\"],\n            delimiter=\",\",\n            header=0,\n        )\n        if csv is not None:\n            csv_params.update(**csv)\n\n        data = pd.read_csv(path, **csv_params)\n\n        if not isinstance(data.index, pd.DatetimeIndex):\n            data.index = data.index.astype(\"datetime64[ns, UTC]\")\n\n    super().__init__(\n        data=data,\n        name=name,\n        timeframe=timeframe,\n        meta=meta,\n        **kwargs,\n    )\n</code></pre>"},{"location":"reference/exchange/backtest/data/#lettrade.exchange.backtest.data.CSVBackTestDataFeed.i","title":"i  <code>property</code>","text":"<pre><code>i: indicator\n</code></pre> <p>Alias to <code>lettrade.indicator</code> and using in DataFeed by call: <code>DataFeed.i.indicator_name()</code></p>"},{"location":"reference/exchange/backtest/data/#lettrade.exchange.backtest.data.CSVBackTestDataFeed.is_main","title":"is_main  <code>property</code>","text":"<pre><code>is_main: bool\n</code></pre> <p>Property to check DataFeed is main DataFeed or not</p>"},{"location":"reference/exchange/backtest/data/#lettrade.exchange.backtest.data.CSVBackTestDataFeed.l","title":"l  <code>instance-attribute</code>","text":"<pre><code>l: LetDataFeedWrapper\n</code></pre> <p>LetTrade DataFeed wrapper using to manage index pointer of DataFeed</p>"},{"location":"reference/exchange/backtest/data/#lettrade.exchange.backtest.data.CSVBackTestDataFeed.meta","title":"meta  <code>property</code>","text":"<pre><code>meta: dict\n</code></pre> <p>Property to get metadata of DataFeed</p>"},{"location":"reference/exchange/backtest/data/#lettrade.exchange.backtest.data.CSVBackTestDataFeed.name","title":"name  <code>property</code>","text":"<pre><code>name: str\n</code></pre> <p>Property to get name of DataFeed</p>"},{"location":"reference/exchange/backtest/data/#lettrade.exchange.backtest.data.CSVBackTestDataFeed.now","title":"now  <code>property</code>","text":"<pre><code>now: Timestamp\n</code></pre> <p>Property to get current index value of DataFeed</p>"},{"location":"reference/exchange/backtest/data/#lettrade.exchange.backtest.data.CSVBackTestDataFeed.timeframe","title":"timeframe  <code>property</code>","text":"<pre><code>timeframe: TimeFrame\n</code></pre> <p>Property to get timeframe of DataFeed</p>"},{"location":"reference/exchange/backtest/data/#lettrade.exchange.backtest.data.CSVBackTestDataFeed.bar","title":"bar","text":"<pre><code>bar(i: int = 0) -&gt; Timestamp\n</code></pre> <p>Get current pd.Timestamp value of DataFeed</p> <p>Parameters:</p> <ul> <li> <code>i</code>               (<code>int</code>, default:                   <code>0</code> )           \u2013            <p>Index. Defaults to 0.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Timestamp</code>           \u2013            <p>pd.Timestamp: description</p> </li> </ul> Source code in <code>lettrade/data/data.py</code> <pre><code>def bar(self, i: int = 0) -&gt; pd.Timestamp:\n    \"\"\"Get current pd.Timestamp value of DataFeed\n\n    Args:\n        i (int, optional): Index. Defaults to 0.\n\n    Returns:\n        pd.Timestamp: _description_\n    \"\"\"\n    return self.l.index[i]\n</code></pre>"},{"location":"reference/exchange/backtest/data/#lettrade.exchange.backtest.data.CSVBackTestDataFeed.copy","title":"copy","text":"<pre><code>copy(deep: bool = False, **kwargs) -&gt; DataFeed\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>deep</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>description. Defaults to False.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>DataFeed</code> (              <code>DataFeed</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/data/data.py</code> <pre><code>def copy(self, deep: bool = False, **kwargs) -&gt; \"DataFeed\":\n    \"\"\"_summary_\n\n    Args:\n        deep (bool, optional): _description_. Defaults to False.\n\n    Returns:\n        DataFeed: _description_\n    \"\"\"\n    df = super().copy(deep=deep)\n    df = self.__class__(\n        data=df,\n        name=self.name,\n        timeframe=self.timeframe,\n        meta=self.meta.copy(),\n        **kwargs,\n    )\n    return df\n</code></pre>"},{"location":"reference/exchange/backtest/data/#lettrade.exchange.backtest.data.CSVBackTestDataFeed.drop","title":"drop","text":"<pre><code>drop(\n    *args,\n    since: int | str | Timestamp | None = None,\n    to: int | str | Timestamp | None = None,\n    **kwargs\n) -&gt; None\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>since</code>               (<code>int | str | Timestamp | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>to</code>               (<code>int | str | Timestamp | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/data/data.py</code> <pre><code>def drop(\n    self,\n    *args,\n    since: int | str | pd.Timestamp | None = None,\n    to: int | str | pd.Timestamp | None = None,\n    **kwargs,\n) -&gt; None:\n    \"\"\"_summary_\n\n    Args:\n        since (int | str | pd.Timestamp | None, optional): _description_. Defaults to None.\n        to (int | str | pd.Timestamp | None, optional): _description_. Defaults to None.\n\n    Raises:\n        RuntimeError: _description_\n    \"\"\"\n    if since is None and to is None:\n        super().drop(*args, **kwargs)\n        return\n\n    condiction = None\n\n    # Since\n    if since is not None:\n        if isinstance(since, int):\n            loc = self.l.index[since]\n        elif isinstance(since, str):\n            loc = pd.to_datetime(since, utc=True)\n        elif isinstance(since, pd.Timestamp):\n            loc = since\n        else:\n            raise RuntimeError(f\"DataFeed.drop since {since} is invalid\")\n        condiction = self.index &lt; loc\n\n    # To\n    if to is not None:\n        if isinstance(to, int):\n            loc = self.l.index[to]\n        elif isinstance(to, str):\n            loc = pd.to_datetime(to, utc=True)\n        elif isinstance(to, pd.Timestamp):\n            loc = to\n        else:\n            raise RuntimeError(f\"DataFeed.drop to {to} is invalid\")\n\n        if condiction is None:\n            condiction = self.index &gt; loc\n        else:\n            condiction = condiction | (self.index &gt; loc)\n\n    index = self[condiction].index\n    super().drop(index=index, inplace=True)\n    self.l.reset()\n\n    if __debug__:\n        logger.debug(\"BackTestDataFeed %s dropped %s rows\", self.name, len(index))\n</code></pre>"},{"location":"reference/exchange/backtest/data/#lettrade.exchange.backtest.data.CSVBackTestDataFeed.push","title":"push","text":"<pre><code>push(\n    rows: list[list[int | float]],\n    unit: str | None = None,\n    utc: bool = True,\n    **kwargs\n)\n</code></pre> <p>Push new rows to DataFeed</p> <p>Parameters:</p> <ul> <li> <code>rows</code>               (<code>list[list[int | float]]</code>)           \u2013            <p>list of rows <code>[[\"timestamp\", \"open price\", \"high price\"...]]</code></p> </li> <li> <code>unit</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>pandas.Timestamp parsing unit. Defaults to None.</p> </li> <li> <code>utc</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>description. Defaults to True.</p> </li> </ul> Source code in <code>lettrade/data/data.py</code> <pre><code>def push(\n    self,\n    rows: list[list[int | float]],\n    unit: str | None = None,\n    utc: bool = True,\n    **kwargs,\n):\n    \"\"\"Push new rows to DataFeed\n\n    Args:\n        rows (list[list[int | float]]): list of rows `[[\"timestamp\", \"open price\", \"high price\"...]]`\n        unit (str | None, optional): pandas.Timestamp parsing unit. Defaults to None.\n        utc (bool, optional): _description_. Defaults to True.\n    \"\"\"\n    for row in rows:\n        dt = pd.to_datetime(row[0], unit=unit, utc=utc, **kwargs)\n        self.at[\n            dt,\n            (\n                \"open\",\n                \"high\",\n                \"low\",\n                \"close\",\n                \"volume\",\n            ),\n        ] = (\n            row[1],  # open\n            row[2],  # high\n            row[3],  # low\n            row[4],  # close\n            row[5],  # volume\n        )\n\n    if __debug__:\n        logger.debug(\"[%s] Update bar: \\n%s\", self.name, self.tail(len(rows)))\n</code></pre>"},{"location":"reference/exchange/backtest/data/#lettrade.exchange.backtest.data.YFBackTestDataFeed","title":"YFBackTestDataFeed","text":"<pre><code>YFBackTestDataFeed(\n    name: str,\n    ticker: str,\n    since: str,\n    to: str | None = None,\n    period: str | None = None,\n    interval: str = \"1d\",\n    **kwargs\n)\n</code></pre> <p>               Bases: <code>BackTestDataFeed</code></p> <p>YahooFinance DataFeed</p> <p>Parameters:</p> <ul> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>description</p> </li> <li> <code>ticker</code>               (<code>str</code>)           \u2013            <p>description</p> </li> <li> <code>since</code>               (<code>str</code>)           \u2013            <p>description</p> </li> <li> <code>to</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>period</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>interval</code>               (<code>str</code>, default:                   <code>'1d'</code> )           \u2013            <p>description. Defaults to \"1d\".</p> </li> </ul> Source code in <code>lettrade/exchange/backtest/data.py</code> <pre><code>def __init__(\n    self,\n    name: str,\n    ticker: str,\n    since: str,\n    to: str | None = None,\n    period: str | None = None,\n    interval: str = \"1d\",\n    **kwargs,\n) -&gt; None:\n    \"\"\"_summary_\n\n    Args:\n        name (str): _description_\n        ticker (str): _description_\n        since (str): _description_\n        to (str | None, optional): _description_. Defaults to None.\n        period (str | None, optional): _description_. Defaults to None.\n        interval (str, optional): _description_. Defaults to \"1d\".\n    \"\"\"\n    params = dict(\n        start=since,\n        end=to,\n        period=period,\n        interval=interval,\n    )\n\n    # Download\n    import yfinance as yf\n\n    df = yf.download(ticker, **params)\n\n    # Parse to lettrade datafeed\n    from .extra.yfinance import yf_parse\n\n    df = yf_parse(df)\n\n    # Metadata\n    meta = dict(yf=dict(ticker=ticker, **params))\n\n    super().__init__(\n        name=name,\n        meta=meta,\n        data=df,\n        **kwargs,\n    )\n</code></pre>"},{"location":"reference/exchange/backtest/data/#lettrade.exchange.backtest.data.YFBackTestDataFeed.i","title":"i  <code>property</code>","text":"<pre><code>i: indicator\n</code></pre> <p>Alias to <code>lettrade.indicator</code> and using in DataFeed by call: <code>DataFeed.i.indicator_name()</code></p>"},{"location":"reference/exchange/backtest/data/#lettrade.exchange.backtest.data.YFBackTestDataFeed.is_main","title":"is_main  <code>property</code>","text":"<pre><code>is_main: bool\n</code></pre> <p>Property to check DataFeed is main DataFeed or not</p>"},{"location":"reference/exchange/backtest/data/#lettrade.exchange.backtest.data.YFBackTestDataFeed.l","title":"l  <code>instance-attribute</code>","text":"<pre><code>l: LetDataFeedWrapper\n</code></pre> <p>LetTrade DataFeed wrapper using to manage index pointer of DataFeed</p>"},{"location":"reference/exchange/backtest/data/#lettrade.exchange.backtest.data.YFBackTestDataFeed.meta","title":"meta  <code>property</code>","text":"<pre><code>meta: dict\n</code></pre> <p>Property to get metadata of DataFeed</p>"},{"location":"reference/exchange/backtest/data/#lettrade.exchange.backtest.data.YFBackTestDataFeed.name","title":"name  <code>property</code>","text":"<pre><code>name: str\n</code></pre> <p>Property to get name of DataFeed</p>"},{"location":"reference/exchange/backtest/data/#lettrade.exchange.backtest.data.YFBackTestDataFeed.now","title":"now  <code>property</code>","text":"<pre><code>now: Timestamp\n</code></pre> <p>Property to get current index value of DataFeed</p>"},{"location":"reference/exchange/backtest/data/#lettrade.exchange.backtest.data.YFBackTestDataFeed.timeframe","title":"timeframe  <code>property</code>","text":"<pre><code>timeframe: TimeFrame\n</code></pre> <p>Property to get timeframe of DataFeed</p>"},{"location":"reference/exchange/backtest/data/#lettrade.exchange.backtest.data.YFBackTestDataFeed.bar","title":"bar","text":"<pre><code>bar(i: int = 0) -&gt; Timestamp\n</code></pre> <p>Get current pd.Timestamp value of DataFeed</p> <p>Parameters:</p> <ul> <li> <code>i</code>               (<code>int</code>, default:                   <code>0</code> )           \u2013            <p>Index. Defaults to 0.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Timestamp</code>           \u2013            <p>pd.Timestamp: description</p> </li> </ul> Source code in <code>lettrade/data/data.py</code> <pre><code>def bar(self, i: int = 0) -&gt; pd.Timestamp:\n    \"\"\"Get current pd.Timestamp value of DataFeed\n\n    Args:\n        i (int, optional): Index. Defaults to 0.\n\n    Returns:\n        pd.Timestamp: _description_\n    \"\"\"\n    return self.l.index[i]\n</code></pre>"},{"location":"reference/exchange/backtest/data/#lettrade.exchange.backtest.data.YFBackTestDataFeed.copy","title":"copy","text":"<pre><code>copy(deep: bool = False, **kwargs) -&gt; DataFeed\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>deep</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>description. Defaults to False.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>DataFeed</code> (              <code>DataFeed</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/data/data.py</code> <pre><code>def copy(self, deep: bool = False, **kwargs) -&gt; \"DataFeed\":\n    \"\"\"_summary_\n\n    Args:\n        deep (bool, optional): _description_. Defaults to False.\n\n    Returns:\n        DataFeed: _description_\n    \"\"\"\n    df = super().copy(deep=deep)\n    df = self.__class__(\n        data=df,\n        name=self.name,\n        timeframe=self.timeframe,\n        meta=self.meta.copy(),\n        **kwargs,\n    )\n    return df\n</code></pre>"},{"location":"reference/exchange/backtest/data/#lettrade.exchange.backtest.data.YFBackTestDataFeed.drop","title":"drop","text":"<pre><code>drop(\n    *args,\n    since: int | str | Timestamp | None = None,\n    to: int | str | Timestamp | None = None,\n    **kwargs\n) -&gt; None\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>since</code>               (<code>int | str | Timestamp | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>to</code>               (<code>int | str | Timestamp | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/data/data.py</code> <pre><code>def drop(\n    self,\n    *args,\n    since: int | str | pd.Timestamp | None = None,\n    to: int | str | pd.Timestamp | None = None,\n    **kwargs,\n) -&gt; None:\n    \"\"\"_summary_\n\n    Args:\n        since (int | str | pd.Timestamp | None, optional): _description_. Defaults to None.\n        to (int | str | pd.Timestamp | None, optional): _description_. Defaults to None.\n\n    Raises:\n        RuntimeError: _description_\n    \"\"\"\n    if since is None and to is None:\n        super().drop(*args, **kwargs)\n        return\n\n    condiction = None\n\n    # Since\n    if since is not None:\n        if isinstance(since, int):\n            loc = self.l.index[since]\n        elif isinstance(since, str):\n            loc = pd.to_datetime(since, utc=True)\n        elif isinstance(since, pd.Timestamp):\n            loc = since\n        else:\n            raise RuntimeError(f\"DataFeed.drop since {since} is invalid\")\n        condiction = self.index &lt; loc\n\n    # To\n    if to is not None:\n        if isinstance(to, int):\n            loc = self.l.index[to]\n        elif isinstance(to, str):\n            loc = pd.to_datetime(to, utc=True)\n        elif isinstance(to, pd.Timestamp):\n            loc = to\n        else:\n            raise RuntimeError(f\"DataFeed.drop to {to} is invalid\")\n\n        if condiction is None:\n            condiction = self.index &gt; loc\n        else:\n            condiction = condiction | (self.index &gt; loc)\n\n    index = self[condiction].index\n    super().drop(index=index, inplace=True)\n    self.l.reset()\n\n    if __debug__:\n        logger.debug(\"BackTestDataFeed %s dropped %s rows\", self.name, len(index))\n</code></pre>"},{"location":"reference/exchange/backtest/data/#lettrade.exchange.backtest.data.YFBackTestDataFeed.push","title":"push","text":"<pre><code>push(\n    rows: list[list[int | float]],\n    unit: str | None = None,\n    utc: bool = True,\n    **kwargs\n)\n</code></pre> <p>Push new rows to DataFeed</p> <p>Parameters:</p> <ul> <li> <code>rows</code>               (<code>list[list[int | float]]</code>)           \u2013            <p>list of rows <code>[[\"timestamp\", \"open price\", \"high price\"...]]</code></p> </li> <li> <code>unit</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>pandas.Timestamp parsing unit. Defaults to None.</p> </li> <li> <code>utc</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>description. Defaults to True.</p> </li> </ul> Source code in <code>lettrade/data/data.py</code> <pre><code>def push(\n    self,\n    rows: list[list[int | float]],\n    unit: str | None = None,\n    utc: bool = True,\n    **kwargs,\n):\n    \"\"\"Push new rows to DataFeed\n\n    Args:\n        rows (list[list[int | float]]): list of rows `[[\"timestamp\", \"open price\", \"high price\"...]]`\n        unit (str | None, optional): pandas.Timestamp parsing unit. Defaults to None.\n        utc (bool, optional): _description_. Defaults to True.\n    \"\"\"\n    for row in rows:\n        dt = pd.to_datetime(row[0], unit=unit, utc=utc, **kwargs)\n        self.at[\n            dt,\n            (\n                \"open\",\n                \"high\",\n                \"low\",\n                \"close\",\n                \"volume\",\n            ),\n        ] = (\n            row[1],  # open\n            row[2],  # high\n            row[3],  # low\n            row[4],  # close\n            row[5],  # volume\n        )\n\n    if __debug__:\n        logger.debug(\"[%s] Update bar: \\n%s\", self.name, self.tail(len(rows)))\n</code></pre>"},{"location":"reference/exchange/backtest/exchange/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> exchange","text":""},{"location":"reference/exchange/backtest/exchange/#lettrade.exchange.backtest.exchange","title":"exchange","text":""},{"location":"reference/exchange/backtest/exchange/#lettrade.exchange.backtest.exchange.BackTestExchange","title":"BackTestExchange","text":"<pre><code>BackTestExchange(**kwargs)\n</code></pre> <p>               Bases: <code>Exchange</code></p> Source code in <code>lettrade/exchange/backtest/exchange.py</code> <pre><code>def __init__(self, **kwargs):\n    super().__init__(**kwargs)\n\n    if self._config.setdefault(\"use_execution\", False):\n        self.executions = None\n</code></pre>"},{"location":"reference/exchange/backtest/exchange/#lettrade.exchange.backtest.exchange.BackTestExchange.data","title":"data  <code>instance-attribute</code>","text":"<pre><code>data: DataFeed\n</code></pre> <p>main DataFeed</p>"},{"location":"reference/exchange/backtest/exchange/#lettrade.exchange.backtest.exchange.BackTestExchange.datas","title":"datas  <code>instance-attribute</code>","text":"<pre><code>datas: list[DataFeed]\n</code></pre> <p>List of all available DataFeed</p>"},{"location":"reference/exchange/backtest/exchange/#lettrade.exchange.backtest.exchange.BackTestExchange.history_orders","title":"history_orders  <code>instance-attribute</code>","text":"<pre><code>history_orders: dict[str, Order] = dict()\n</code></pre> <p>History Order dict by <code>Order.id</code> key</p>"},{"location":"reference/exchange/backtest/exchange/#lettrade.exchange.backtest.exchange.BackTestExchange.history_positions","title":"history_positions  <code>instance-attribute</code>","text":"<pre><code>history_positions: dict[str, Position] = dict()\n</code></pre> <p>History Position dict by <code>Position.id</code> key</p>"},{"location":"reference/exchange/backtest/exchange/#lettrade.exchange.backtest.exchange.BackTestExchange.orders","title":"orders  <code>instance-attribute</code>","text":"<pre><code>orders: dict[str, Order] = dict()\n</code></pre> <p>Available Order dict by <code>Order.id</code> key</p>"},{"location":"reference/exchange/backtest/exchange/#lettrade.exchange.backtest.exchange.BackTestExchange.positions","title":"positions  <code>instance-attribute</code>","text":"<pre><code>positions: dict[str, Position] = dict()\n</code></pre> <p>Available Position dict by <code>Position.id</code> key</p>"},{"location":"reference/exchange/backtest/exchange/#lettrade.exchange.backtest.exchange.BackTestExchange.init","title":"init","text":"<pre><code>init(\n    brain: Brain,\n    feeder: DataFeeder,\n    account: Account,\n    commander: Commander,\n) -&gt; None\n</code></pre> <p>Init Exchange dependencies. Set data/datas from feeder. Set state to <code>ExchangeState.Start</code>.</p> <p>Parameters:</p> <ul> <li> <code>brain</code>               (<code>Brain</code>)           \u2013            <p>description</p> </li> <li> <code>feeder</code>               (<code>DataFeeder</code>)           \u2013            <p>description</p> </li> <li> <code>account</code>               (<code>Account</code>)           \u2013            <p>description</p> </li> <li> <code>commander</code>               (<code>Commander</code>)           \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def init(\n    self,\n    brain: \"Brain\",\n    feeder: DataFeeder,\n    account: Account,\n    commander: Commander,\n) -&gt; None:\n    \"\"\"Init Exchange dependencies.\n    Set data/datas from feeder.\n    Set state to `ExchangeState.Start`.\n\n    Args:\n        brain (Brain): _description_\n        feeder (DataFeeder): _description_\n        account (Account): _description_\n        commander (Commander): _description_\n    \"\"\"\n    self._brain = brain\n    self._feeder = feeder\n    self._account = account\n    self._commander = commander\n\n    self.data = self._feeder.data\n    self.datas = self._feeder.datas\n\n    self._account.init(exchange=self)\n\n    self._state = ExchangeState.Start\n</code></pre>"},{"location":"reference/exchange/backtest/exchange/#lettrade.exchange.backtest.exchange.BackTestExchange.new_order","title":"new_order","text":"<pre><code>new_order(\n    size: float,\n    type: OrderType = OrderType.Market,\n    limit: float | None = None,\n    stop: float | None = None,\n    sl: float | None = None,\n    tp: float | None = None,\n    tag: object | None = None,\n    data: DataFeed | None = None,\n    **kwargs\n) -&gt; OrderResult\n</code></pre> <p>Place new order. Then send order events to <code>Brain</code></p> <p>Parameters:</p> <ul> <li> <code>size</code>               (<code>float</code>)           \u2013            <p>description</p> </li> <li> <code>type</code>               (<code>OrderType | None</code>, default:                   <code>Market</code> )           \u2013            <p>description. Defaults to OrderType.Market.</p> </li> <li> <code>limit</code>               (<code>float | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>stop</code>               (<code>float | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>sl</code>               (<code>float | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>tp</code>               (<code>float | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>tag</code>               (<code>object | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>data</code>               (<code>DataFeed | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>**kwargs</code>               (<code>dict | None</code>, default:                   <code>{}</code> )           \u2013            <p>Extra-parameters</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>OrderResult</code> (              <code>OrderResult</code> )          \u2013            <p>Result when place new <code>Order</code></p> </li> </ul> Source code in <code>lettrade/exchange/backtest/exchange.py</code> <pre><code>def new_order(\n    self,\n    size: float,\n    type: OrderType = OrderType.Market,\n    limit: float | None = None,\n    stop: float | None = None,\n    sl: float | None = None,\n    tp: float | None = None,\n    tag: object | None = None,\n    data: DataFeed | None = None,\n    **kwargs,\n) -&gt; OrderResult:\n    \"\"\"Place new order.\n    Then send order events to `Brain`\n\n    Args:\n        size (float): _description_\n        type (OrderType | None, optional): _description_. Defaults to OrderType.Market.\n        limit (float | None, optional): _description_. Defaults to None.\n        stop (float | None, optional): _description_. Defaults to None.\n        sl (float | None, optional): _description_. Defaults to None.\n        tp (float | None, optional): _description_. Defaults to None.\n        tag (object | None, optional): _description_. Defaults to None.\n        data (DataFeed | None, optional): _description_. Defaults to None.\n        **kwargs (dict | None, optional): Extra-parameters\n\n    Returns:\n        OrderResult: Result when place new `Order`\n    \"\"\"\n    if not data:\n        data = self.data\n\n    order = BackTestOrder(\n        id=self._id(),\n        exchange=self,\n        data=data,\n        size=size,\n        type=type,\n        limit_price=limit,\n        stop_price=stop,\n        sl_price=sl,\n        tp_price=tp,\n        tag=tag,\n    )\n    ok = order.place(at=self.data.bar())\n\n    if type == OrderType.Market:\n        # Simulate market order will send event before return order result\n        self._simulate_orders()\n\n    return ok\n</code></pre>"},{"location":"reference/exchange/backtest/exchange/#lettrade.exchange.backtest.exchange.BackTestExchange.next","title":"next","text":"<pre><code>next()\n</code></pre> <p>Execution when new data feeded</p> Source code in <code>lettrade/exchange/backtest/exchange.py</code> <pre><code>def next(self):\n    \"\"\"Execution when new data feeded\"\"\"\n    self._simulate_orders()\n    super().next()\n</code></pre>"},{"location":"reference/exchange/backtest/exchange/#lettrade.exchange.backtest.exchange.BackTestExchange.next_next","title":"next_next","text":"<pre><code>next_next()\n</code></pre> <p>Call after strategy.next()</p> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def next_next(self):\n    \"\"\"Call after strategy.next()\"\"\"\n    self._account.next_next()\n</code></pre>"},{"location":"reference/exchange/backtest/exchange/#lettrade.exchange.backtest.exchange.BackTestExchange.on_executions","title":"on_executions","text":"<pre><code>on_executions(\n    executions: list[Execution],\n    broadcast: bool | None = True,\n    **kwargs\n) -&gt; None\n</code></pre> <p>Receive Execution event from exchange then store and notify Brain</p> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def on_executions(\n    self,\n    executions: list[Execution],\n    broadcast: bool | None = True,\n    **kwargs,\n) -&gt; None:\n    \"\"\"\n    Receive Execution event from exchange then store and notify Brain\n    \"\"\"\n    for execution in executions:\n        if not isinstance(execution, Execution):\n            raise RuntimeError(f\"{execution} is not instance of type Execution\")\n\n        if execution.id in self.executions:\n            # Merge to keep Execution handler for strategy using\n            # when strategy want to store Execution object\n            # and object will be automatic update directly\n            self.executions[execution.id].merge(execution)\n            execution = self.executions[execution.id]\n        else:\n            self.executions[execution.id] = execution\n\n    if self._state != ExchangeState.Run:\n        return\n\n    if broadcast:\n        self._brain.on_executions(executions)\n</code></pre>"},{"location":"reference/exchange/backtest/exchange/#lettrade.exchange.backtest.exchange.BackTestExchange.on_order","title":"on_order","text":"<pre><code>on_order(\n    order: Order, broadcast: bool | None = True, **kwargs\n) -&gt; None\n</code></pre> <p>Receive order event from exchange then store and notify Brain</p> <p>Parameters:</p> <ul> <li> <code>order</code>               (<code>Order</code>)           \u2013            <p>description</p> </li> <li> <code>broadcast</code>               (<code>bool | None</code>, default:                   <code>True</code> )           \u2013            <p>description. Defaults to True.</p> </li> </ul> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def on_order(\n    self,\n    order: Order,\n    broadcast: bool | None = True,\n    **kwargs,\n) -&gt; None:\n    \"\"\"Receive order event from exchange then store and notify Brain\n\n    Args:\n        order (Order): _description_\n        broadcast (bool | None, optional): _description_. Defaults to True.\n    \"\"\"\n    self.on_orders(orders=[order], broadcast=broadcast, **kwargs)\n</code></pre>"},{"location":"reference/exchange/backtest/exchange/#lettrade.exchange.backtest.exchange.BackTestExchange.on_orders","title":"on_orders","text":"<pre><code>on_orders(\n    orders: list[Order],\n    broadcast: bool | None = True,\n    **kwargs\n) -&gt; None\n</code></pre> <p>Receive orders event from exchange then store and notify Brain</p> <p>Parameters:</p> <ul> <li> <code>orders</code>               (<code>list[Order]</code>)           \u2013            <p>description</p> </li> <li> <code>broadcast</code>               (<code>bool | None</code>, default:                   <code>True</code> )           \u2013            <p>description. Defaults to True.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def on_orders(\n    self,\n    orders: list[Order],\n    broadcast: bool | None = True,\n    **kwargs,\n) -&gt; None:\n    \"\"\"Receive orders event from exchange then store and notify Brain\n\n    Args:\n        orders (list[Order]): _description_\n        broadcast (bool | None, optional): _description_. Defaults to True.\n\n    Raises:\n        RuntimeError: _description_\n    \"\"\"\n    for order in orders:\n        if not isinstance(order, Order):\n            raise RuntimeError(f\"{order} is not instance of type Order\")\n\n        if order.is_closed:\n            if order.id in self.history_orders:\n                logger.warning(\"Order closed recall: %s\", order)\n\n            self.history_orders[order.id] = order\n            if order.id in self.orders:\n                del self.orders[order.id]\n        else:\n            if order.id in self.history_orders:\n                raise RuntimeError(f\"Order {order.id} closed\")\n\n            if order.id in self.orders:\n                # Merge to keep Order handler for strategy using\n                # when strategy want to store Order object\n                # and object will be automatic update directly\n                self.orders[order.id].merge(order)\n                order = self.orders[order.id]\n            else:\n                self.orders[order.id] = order\n\n    if self._state != ExchangeState.Run:\n        return\n\n    if broadcast:\n        self._brain.on_orders(orders)\n</code></pre>"},{"location":"reference/exchange/backtest/exchange/#lettrade.exchange.backtest.exchange.BackTestExchange.on_position","title":"on_position","text":"<pre><code>on_position(\n    position: Position,\n    broadcast: bool | None = True,\n    **kwargs\n) -&gt; None\n</code></pre> <p>Receive Position event from exchange then store and notify Brain</p> <p>Parameters:</p> <ul> <li> <code>position</code>               (<code>Position</code>)           \u2013            <p>new comming <code>Position</code></p> </li> <li> <code>broadcast</code>               (<code>bool | None</code>, default:                   <code>True</code> )           \u2013            <p>Flag notify to Brain. Defaults to True.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>validate <code>Position</code> instance</p> </li> </ul> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def on_position(\n    self,\n    position: Position,\n    broadcast: bool | None = True,\n    **kwargs,\n) -&gt; None:\n    \"\"\"Receive Position event from exchange then store and notify Brain\n\n    Args:\n        position (Position): new comming `Position`\n        broadcast (bool | None, optional): Flag notify to Brain. Defaults to True.\n\n    Raises:\n        RuntimeError: validate `Position` instance\n    \"\"\"\n    self.on_positions(positions=[position], broadcast=broadcast, **kwargs)\n</code></pre>"},{"location":"reference/exchange/backtest/exchange/#lettrade.exchange.backtest.exchange.BackTestExchange.on_positions","title":"on_positions","text":"<pre><code>on_positions(\n    positions: list[Position],\n    broadcast: bool | None = True,\n    **kwargs\n) -&gt; None\n</code></pre> <p>Receive Positions event from exchange then store and notify Brain</p> <p>Parameters:</p> <ul> <li> <code>positions</code>               (<code>list[Position]</code>)           \u2013            <p>list of new comming <code>Position</code></p> </li> <li> <code>broadcast</code>               (<code>bool | None</code>, default:                   <code>True</code> )           \u2013            <p>Flag notify to Brain. Defaults to True.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>validate <code>Position</code> instance</p> </li> </ul> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def on_positions(\n    self,\n    positions: list[Position],\n    broadcast: bool | None = True,\n    **kwargs,\n) -&gt; None:\n    \"\"\"Receive Positions event from exchange then store and notify Brain\n\n    Args:\n        positions (list[Position]): list of new comming `Position`\n        broadcast (bool | None, optional): Flag notify to Brain. Defaults to True.\n\n    Raises:\n        RuntimeError: validate `Position` instance\n    \"\"\"\n    for position in positions:\n        if not isinstance(position, Position):\n            raise RuntimeError(f\"{position} is not instance of type Position\")\n\n        if position.is_exited:\n            if position.id in self.history_positions:\n                logger.warning(\"Position exited recall: %s\", position)\n\n            self.history_positions[position.id] = position\n            if position.id in self.positions:\n                del self.positions[position.id]\n\n            # self._account._on_position_exit(position)\n        else:\n            if position.id in self.history_positions:\n                raise RuntimeError(f\"Position {position.id} closed: {position}\")\n            if position.id in self.positions:\n                # Merge to keep Position handler for strategy using\n                # when strategy want to store Position object\n                # and object will be automatic update directly\n                self.positions[position.id].merge(position)\n                position = self.positions[position.id]\n            else:\n                self.positions[position.id] = position\n                # self._account._on_position_entry(position)\n\n    self._account.on_positions(positions)\n\n    if self._state != ExchangeState.Run:\n        return\n\n    if broadcast:\n        self._brain.on_positions(positions)\n</code></pre>"},{"location":"reference/exchange/backtest/exchange/#lettrade.exchange.backtest.exchange.BackTestExchange.start","title":"start","text":"<pre><code>start() -&gt; None\n</code></pre> <p>Start of Exchange by: - Start account. - Set state to <code>ExchangeState.Run</code> ready for next().</p> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def start(self) -&gt; None:\n    \"\"\"Start of Exchange by:\n    - Start account.\n    - Set state to `ExchangeState.Run` ready for next().\n    \"\"\"\n    self._account.start()\n    self._state = ExchangeState.Run\n</code></pre>"},{"location":"reference/exchange/backtest/exchange/#lettrade.exchange.backtest.exchange.BackTestExchange.stop","title":"stop","text":"<pre><code>stop() -&gt; None\n</code></pre> <p>Stop Exchange</p> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def stop(self) -&gt; None:\n    \"\"\"Stop Exchange\"\"\"\n    self._state = ExchangeState.Stop\n    self._account.stop()\n</code></pre>"},{"location":"reference/exchange/backtest/feeder/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> feeder","text":""},{"location":"reference/exchange/backtest/feeder/#lettrade.exchange.backtest.feeder","title":"feeder","text":""},{"location":"reference/exchange/backtest/feeder/#lettrade.exchange.backtest.feeder.BackTestDataFeeder","title":"BackTestDataFeeder","text":"<p>               Bases: <code>DataFeeder</code></p> <p>BackTest DataFeeder</p>"},{"location":"reference/exchange/backtest/feeder/#lettrade.exchange.backtest.feeder.BackTestDataFeeder.is_continous","title":"is_continous  <code>property</code>","text":"<pre><code>is_continous\n</code></pre> <p>Flag check is realtime continous datafeeder</p>"},{"location":"reference/exchange/backtest/plot/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> plot","text":""},{"location":"reference/exchange/backtest/plot/#lettrade.exchange.backtest.plot","title":"plot","text":""},{"location":"reference/exchange/backtest/plot/#lettrade.exchange.backtest.plot.OptimizePlotter","title":"OptimizePlotter","text":"<pre><code>OptimizePlotter()\n</code></pre> <p>               Bases: <code>Plotter</code></p> <p>Class help to plot <code>lettrade</code></p> Source code in <code>lettrade/exchange/backtest/plot.py</code> <pre><code>def __init__(self) -&gt; None:\n    super().__init__()\n</code></pre>"},{"location":"reference/exchange/backtest/plot/#lettrade.exchange.backtest.plot.OptimizePlotter.contour","title":"contour","text":"<pre><code>contour(x: str, y: str, z: str = 'equity', **kwargs)\n</code></pre> Source code in <code>lettrade/exchange/backtest/plot.py</code> <pre><code>def contour(self, x: str, y: str, z: str = \"equity\", **kwargs):\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/backtest/plot/#lettrade.exchange.backtest.plot.OptimizePlotter.heatmap","title":"heatmap","text":"<pre><code>heatmap(x: str, y: str, z: str = 'equity', **kwargs)\n</code></pre> Source code in <code>lettrade/exchange/backtest/plot.py</code> <pre><code>def heatmap(self, x: str, y: str, z: str = \"equity\", **kwargs):\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/backtest/plot/#lettrade.exchange.backtest.plot.OptimizePlotter.load","title":"load  <code>abstractmethod</code>","text":"<pre><code>load()\n</code></pre> <p>Load plot config from <code>Strategy.plot()</code> and setup candlestick/equity</p> Source code in <code>lettrade/plot/plot.py</code> <pre><code>@abstractmethod\ndef load(self):\n    \"\"\"Load plot config from `Strategy.plot()` and setup candlestick/equity\"\"\"\n</code></pre>"},{"location":"reference/exchange/backtest/plot/#lettrade.exchange.backtest.plot.OptimizePlotter.on_done","title":"on_done","text":"<pre><code>on_done()\n</code></pre> Source code in <code>lettrade/exchange/backtest/plot.py</code> <pre><code>def on_done(self):\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/backtest/plot/#lettrade.exchange.backtest.plot.OptimizePlotter.on_result","title":"on_result","text":"<pre><code>on_result(result)\n</code></pre> Source code in <code>lettrade/exchange/backtest/plot.py</code> <pre><code>def on_result(self, result):\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/backtest/plot/#lettrade.exchange.backtest.plot.OptimizePlotter.plot","title":"plot  <code>abstractmethod</code>","text":"<pre><code>plot(**kwargs)\n</code></pre> <p>Plot <code>equity</code>, <code>orders</code>, and <code>positions</code> then show</p> Source code in <code>lettrade/plot/plot.py</code> <pre><code>@abstractmethod\ndef plot(self, **kwargs):\n    \"\"\"Plot `equity`, `orders`, and `positions` then show\"\"\"\n</code></pre>"},{"location":"reference/exchange/backtest/plot/#lettrade.exchange.backtest.plot.OptimizePlotter.stop","title":"stop  <code>abstractmethod</code>","text":"<pre><code>stop()\n</code></pre> <p>stop plotter</p> Source code in <code>lettrade/plot/plot.py</code> <pre><code>@abstractmethod\ndef stop(self):\n    \"\"\"stop plotter\"\"\"\n</code></pre>"},{"location":"reference/exchange/backtest/stats/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> stats","text":""},{"location":"reference/exchange/backtest/stats/#lettrade.exchange.backtest.stats","title":"stats","text":""},{"location":"reference/exchange/backtest/stats/#lettrade.exchange.backtest.stats.OptimizeStatistic","title":"OptimizeStatistic","text":"<pre><code>OptimizeStatistic(\n    plotter: OptimizePlotter = None, total: int = 0\n)\n</code></pre> <p>Compute strategy result</p> Source code in <code>lettrade/exchange/backtest/stats.py</code> <pre><code>def __init__(self, plotter: OptimizePlotter = None, total: int = 0) -&gt; None:\n    self.plotter = plotter\n    self._total = total\n\n    self.results = []\n    self._result_thread = None\n\n    if self.plotter is not None:\n        self.plotter.init(self.results)\n\n    self._t_wait_result()\n</code></pre>"},{"location":"reference/exchange/backtest/stats/#lettrade.exchange.backtest.stats.OptimizeStatistic.compute","title":"compute","text":"<pre><code>compute()\n</code></pre> <p>Calculate strategy report</p> Source code in <code>lettrade/exchange/backtest/stats.py</code> <pre><code>def compute(self):\n    \"\"\"\n    Calculate strategy report\n    \"\"\"\n\n    return self.result\n</code></pre>"},{"location":"reference/exchange/backtest/trade/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> trade","text":""},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade","title":"trade","text":""},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestExecution","title":"BackTestExecution","text":"<pre><code>BackTestExecution(\n    exchange: BackTestExchange, *args, **kwargs\n)\n</code></pre> <p>               Bases: <code>Execution</code></p> <p>Execution for backtesting</p> Source code in <code>lettrade/exchange/backtest/trade.py</code> <pre><code>def __init__(self, exchange: \"BackTestExchange\", *args, **kwargs):\n    if exchange.executions is None:\n        logger.warning(\n            \"Execution transaction is disable, enable by flag: show_execution=True\"\n        )\n        return\n\n    super().__init__(*args, exchange=exchange, **kwargs)\n</code></pre>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestExecution.is_long","title":"is_long  <code>property</code>","text":"<pre><code>is_long: bool\n</code></pre> <p>True if side is long (size is positive).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True/False</p> </li> </ul>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestExecution.is_short","title":"is_short  <code>property</code>","text":"<pre><code>is_short: bool\n</code></pre> <p>True if side is short (size is negative).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestExecution.side","title":"side  <code>property</code>","text":"<pre><code>side: TradeSide\n</code></pre> <p>True if side is short (size is negative).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>TradeSide</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestExecution.from_order","title":"from_order  <code>classmethod</code>","text":"<pre><code>from_order(\n    order: BackTestOrder,\n    price: float,\n    at: object,\n    size: float | None = None,\n) -&gt; BackTestExecution\n</code></pre> <p>Method help to build Execution object from Order object</p> <p>Parameters:</p> <ul> <li> <code>price</code>               (<code>float</code>)           \u2013            <p>Executed price</p> </li> <li> <code>at</code>               (<code>object</code>)           \u2013            <p>Executed bar</p> </li> <li> <code>size</code>               (<code>float | None</code>, default:                   <code>None</code> )           \u2013            <p>Executed size. Defaults to None.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>BackTestExecution</code> (              <code>BackTestExecution</code> )          \u2013            <p>Execution object</p> </li> </ul> Source code in <code>lettrade/exchange/backtest/trade.py</code> <pre><code>@classmethod\ndef from_order(\n    cls,\n    order: \"BackTestOrder\",\n    price: float,\n    at: object,\n    size: float | None = None,\n) -&gt; \"BackTestExecution\":\n    \"\"\"Method help to build Execution object from Order object\n\n    Args:\n        price (float): Executed price\n        at (object): Executed bar\n        size (float | None, optional): Executed size. Defaults to None.\n\n    Returns:\n        BackTestExecution: Execution object\n    \"\"\"\n    return cls(\n        id=order.id,\n        size=size or order.size,\n        exchange=order.exchange,\n        data=order.data,\n        price=price,\n        at=at,\n        order=order,\n    )\n</code></pre>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestExecution.merge","title":"merge","text":"<pre><code>merge(other: Execution)\n</code></pre> <p>Merge to keep object handler but not overwrite for Strategy using when Strategy want to store object and object will be automatic update directly</p> Source code in <code>lettrade/exchange/execution.py</code> <pre><code>def merge(self, other: \"Execution\"):\n    \"\"\"\n    Merge to keep object handler but not overwrite for Strategy using when Strategy want to store object and object will be automatic update directly\n    \"\"\"\n    if other is self:\n        return\n\n    if self.id != other.id:\n        raise RuntimeError(f\"Merge difference id {self.id} != {other.id} execution\")\n\n    self.price = other.price\n    self.size = other.size\n\n    if other.at:\n        self.at = other.at\n    if other.order_id:\n        self.order_id = other.order_id\n    if other.order:\n        self.order = other.order\n    if other.position_id:\n        self.position_id = other.position_id\n    if other.position:\n        self.position = other.position\n</code></pre>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestOrder","title":"BackTestOrder","text":"<pre><code>BackTestOrder(\n    id: str,\n    exchange: Exchange,\n    data: DataFeed,\n    size: float,\n    state: OrderState = OrderState.Pending,\n    type: OrderType = OrderType.Market,\n    limit_price: float | None = None,\n    stop_price: float | None = None,\n    sl_price: float | None = None,\n    tp_price: float | None = None,\n    parent: Position | None = None,\n    tag: str | None = None,\n    placed_at: Timestamp | None = None,\n    **kwargs\n)\n</code></pre> <p>               Bases: <code>Order</code></p> <p>Order for backtesting</p> Source code in <code>lettrade/exchange/order.py</code> <pre><code>def __init__(\n    self,\n    id: str,\n    exchange: \"Exchange\",\n    data: \"DataFeed\",\n    size: float,\n    state: OrderState = OrderState.Pending,\n    type: OrderType = OrderType.Market,\n    limit_price: float | None = None,\n    stop_price: float | None = None,\n    sl_price: float | None = None,\n    tp_price: float | None = None,\n    parent: \"Position | None\" = None,\n    tag: str | None = None,\n    placed_at: pd.Timestamp | None = None,\n    **kwargs,\n):\n    super().__init__(\n        id=id,\n        exchange=exchange,\n        data=data,\n        size=size,\n        **kwargs,\n    )\n\n    self.type: OrderType = type\n    self.state: OrderState = state\n    self.limit_price: float | None = limit_price\n    self.stop_price: float | None = stop_price\n    self.sl_price: float | None = sl_price\n    self.tp_price: float | None = tp_price\n    self.parent: \"Position | None\" = parent\n    self.tag: str | None = tag\n    self.placed_at: pd.Timestamp | None = placed_at\n    self.filled_at: pd.Timestamp | None = None\n    self.filled_price: float | None = None\n</code></pre>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestOrder.is_closed","title":"is_closed  <code>property</code>","text":"<pre><code>is_closed: bool\n</code></pre> <p>Flag to check <code>Order</code> closed</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True if <code>state</code> in [OrderState.Filled, OrderState.Canceled]</p> </li> </ul>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestOrder.is_long","title":"is_long  <code>property</code>","text":"<pre><code>is_long: bool\n</code></pre> <p>True if side is long (size is positive).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True/False</p> </li> </ul>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestOrder.is_opening","title":"is_opening  <code>property</code>","text":"<pre><code>is_opening: bool\n</code></pre> <p>Flag to check <code>Order</code> still alive</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True if <code>state</code> in [OrderState.Pending, OrderState.Placed, OrderState.Partial]</p> </li> </ul>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestOrder.is_short","title":"is_short  <code>property</code>","text":"<pre><code>is_short: bool\n</code></pre> <p>True if side is short (size is negative).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestOrder.is_sl_order","title":"is_sl_order  <code>property</code>","text":"<pre><code>is_sl_order: bool\n</code></pre> <p><code>Order</code> is stop-loss order of a <code>Position</code></p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestOrder.is_tp_order","title":"is_tp_order  <code>property</code>","text":"<pre><code>is_tp_order: bool\n</code></pre> <p><code>Order</code> is take-profit order of a <code>Position</code></p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestOrder.limit","title":"limit  <code>property</code>","text":"<pre><code>limit: float | None\n</code></pre> <p>Getter of limit_price</p> <p>Returns:</p> <ul> <li> <code>float | None</code>           \u2013            <p>float | None: <code>float</code> or <code>None</code></p> </li> </ul>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestOrder.place_price","title":"place_price  <code>property</code>","text":"<pre><code>place_price: float | None\n</code></pre> <p>Getter of place_price</p> <p>Returns:</p> <ul> <li> <code>float | None</code>           \u2013            <p>float | None: <code>float</code> or <code>None</code></p> </li> </ul>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestOrder.side","title":"side  <code>property</code>","text":"<pre><code>side: TradeSide\n</code></pre> <p>True if side is short (size is negative).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>TradeSide</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestOrder.sl","title":"sl  <code>property</code>","text":"<pre><code>sl: float | None\n</code></pre> <p>Getter of sl_price</p> <p>Returns:</p> <ul> <li> <code>float | None</code>           \u2013            <p>float | None: <code>float</code> or <code>None</code></p> </li> </ul>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestOrder.stop","title":"stop  <code>property</code>","text":"<pre><code>stop: float | None\n</code></pre> <p>Getter of stop_price</p> <p>Returns:</p> <ul> <li> <code>float | None</code>           \u2013            <p>float | None: <code>float</code> or <code>None</code></p> </li> </ul>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestOrder.tp","title":"tp  <code>property</code>","text":"<pre><code>tp: float | None\n</code></pre> <p>Getter of tp_price</p> <p>Returns:</p> <ul> <li> <code>float | None</code>           \u2013            <p>float | None: <code>float</code> or <code>None</code></p> </li> </ul>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestOrder.cancel","title":"cancel","text":"<pre><code>cancel(\n    caller: Order | Position | None = None, **kwargs\n) -&gt; OrderResult\n</code></pre> <p>Cancel the Order and notify Exchange</p> Source code in <code>lettrade/exchange/backtest/trade.py</code> <pre><code>def cancel(\n    self,\n    caller: Order | Position | None = None,\n    **kwargs,\n) -&gt; \"OrderResult\":\n    \"\"\"Cancel the Order and notify Exchange\"\"\"\n    if self.state != OrderState.Placed:\n        raise RuntimeError(f\"Order {self.id} state {self.state} is not Placed\")\n\n    if self.parent:\n        if self is self.parent.sl_order:\n            self.parent.sl_order = None\n        elif self is self.parent.tp_order:\n            self.parent.tp_order = None\n\n    return super().cancel()\n</code></pre>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestOrder.fill","title":"fill","text":"<pre><code>fill(\n    price: float, at: object, **kwargs\n) -&gt; BackTestExecution\n</code></pre> <p>Execution order and notify for Exchange</p> <p>Parameters:</p> <ul> <li> <code>price</code>               (<code>float</code>)           \u2013            <p>Executed price</p> </li> <li> <code>at</code>               (<code>object</code>)           \u2013            <p>Executed bar</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>BackTestExecution</code> (              <code>BackTestExecution</code> )          \u2013            <p>Execution object</p> </li> </ul> Source code in <code>lettrade/exchange/backtest/trade.py</code> <pre><code>def fill(self, price: float, at: object, **kwargs) -&gt; BackTestExecution:\n    \"\"\"Execution order and notify for Exchange\n\n    Args:\n        price (float): Executed price\n        at (object): Executed bar\n\n    Raises:\n        RuntimeError: _description_\n\n    Returns:\n        BackTestExecution: Execution object\n    \"\"\"\n    if self.state != OrderState.Placed:\n        raise RuntimeError(f\"Execution a {self.state} order\")\n\n    # Order\n    ok = super().fill(price=price, at=at)\n\n    # Execution is enable\n    if self.exchange.executions is not None:\n        execution = BackTestExecution.from_order(order=self, price=price, at=at)\n        execution._on_execution()\n\n    # Position hit SL/TP\n    if self.parent:\n        self.parent.exit(price=price, at=at, caller=self)\n    else:\n        # Position: Place and create new position\n        position = BackTestPosition.from_order(order=self)\n\n        position.entry(price=price, at=at)\n\n    return ok\n</code></pre>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestOrder.merge","title":"merge","text":"<pre><code>merge(other: Order)\n</code></pre> <p>Update current <code>Order</code> variables by other <code>Order</code></p> <p>Parameters:</p> <ul> <li> <code>other</code>               (<code>Order</code>)           \u2013            <p>Merge source <code>Order</code></p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>Validate same id</p> </li> </ul> Source code in <code>lettrade/exchange/order.py</code> <pre><code>def merge(self, other: \"Order\"):\n    \"\"\"Update current `Order` variables by other `Order`\n\n    Args:\n        other (Order): Merge source `Order`\n\n    Raises:\n        RuntimeError: Validate same id\n    \"\"\"\n    if other is self:\n        return\n\n    if self.id != other.id:\n        raise RuntimeError(f\"Merge difference id {self.id} != {other.id} order\")\n\n    self.size = other.size\n    self.sl_price = other.sl_price\n    self.tp_price = other.tp_price\n\n    if other.limit_price:\n        self.limit_price = other.limit_price\n    if other.stop_price:\n        self.stop_price = other.stop_price\n    if other.placed_at:\n        self.placed_at = other.placed_at\n\n    if other.filled_price:\n        self.filled_price = other.filled_price\n    if other.filled_at:\n        self.filled_at = other.filled_at\n\n    if other.parent:\n        self.parent = other.parent\n</code></pre>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestOrder.place","title":"place","text":"<pre><code>place(\n    at: Timestamp, raw: object | None = None\n) -&gt; OrderResult\n</code></pre> <p>Place <code>Order</code> Set <code>status</code> to <code>OrderState.Placed</code>. Send event to <code>Exchange</code></p> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>OrderResult</code> (              <code>OrderResult</code> )          \u2013            <p>result of <code>Order</code></p> </li> </ul> Source code in <code>lettrade/exchange/order.py</code> <pre><code>def place(\n    self,\n    at: pd.Timestamp,\n    raw: object | None = None,\n) -&gt; \"OrderResult\":\n    \"\"\"Place `Order`\n    Set `status` to `OrderState.Placed`.\n    Send event to `Exchange`\n\n    Raises:\n        RuntimeError: _description_\n\n    Returns:\n        OrderResult: result of `Order`\n    \"\"\"\n    self.validate()\n\n    if self.state != OrderState.Pending:\n        raise RuntimeError(f\"Order {self.id} state {self.state} is not Pending\")\n\n    self.state = OrderState.Placed\n    self.placed_at = at\n\n    logger.info(\"Placing new order: %s\", self)\n\n    self.exchange.on_order(self)\n    return OrderResultOk(order=self, raw=raw)\n</code></pre>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestOrder.update","title":"update","text":"<pre><code>update(\n    limit_price: float | None = None,\n    stop_price: float | None = None,\n    sl: float | None = None,\n    tp: float | None = None,\n    raw: object | None = None,\n) -&gt; OrderResult\n</code></pre> <p>Update Order</p> <p>Parameters:</p> <ul> <li> <code>limit_price</code>               (<code>float</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>stop_price</code>               (<code>float</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>sl</code>               (<code>float</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>tp</code>               (<code>float</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/order.py</code> <pre><code>def update(\n    self,\n    limit_price: float | None = None,\n    stop_price: float | None = None,\n    sl: float | None = None,\n    tp: float | None = None,\n    raw: object | None = None,\n) -&gt; \"OrderResult\":\n    \"\"\"Update Order\n\n    Args:\n        limit_price (float, optional): _description_. Defaults to None.\n        stop_price (float, optional): _description_. Defaults to None.\n        sl (float, optional): _description_. Defaults to None.\n        tp (float, optional): _description_. Defaults to None.\n\n    Raises:\n        RuntimeError: _description_\n    \"\"\"\n    if self.is_closed:\n        raise RuntimeError(f\"Update a closed order {self}\")\n\n    # TODO: validate parameters\n    if limit_price is not None:\n        self.limit_price = limit_price\n    if stop_price is not None:\n        self.stop_price = stop_price\n\n    if sl is not None:\n        self.sl_price = sl\n    if tp is not None:\n        self.tp_price = tp\n\n    self.exchange.on_order(self)\n    return OrderResultOk(order=self, raw=raw)\n</code></pre>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestPosition","title":"BackTestPosition","text":"<pre><code>BackTestPosition(\n    id: str,\n    exchange: Exchange,\n    data: DataFeed,\n    size: float,\n    parent: Order,\n    state: PositionState = PositionState.Open,\n    entry_price: float | None = None,\n    entry_fee: float = 0.0,\n    entry_at: Timestamp | None = None,\n    sl_order: Order | None = None,\n    tp_order: Order | None = None,\n    tag: str | None = None,\n    **kwargs\n)\n</code></pre> <p>               Bases: <code>Position</code></p> <p>Position for backtesting</p> Source code in <code>lettrade/exchange/position.py</code> <pre><code>def __init__(\n    self,\n    id: str,\n    exchange: \"Exchange\",\n    data: \"DataFeed\",\n    size: float,\n    parent: \"Order\",\n    state: PositionState = PositionState.Open,\n    entry_price: float | None = None,\n    entry_fee: float = 0.0,\n    entry_at: pd.Timestamp | None = None,\n    sl_order: Order | None = None,\n    tp_order: Order | None = None,\n    tag: str | None = None,\n    **kwargs,\n):\n    super().__init__(\n        id=id,\n        exchange=exchange,\n        data=data,\n        size=size,\n        **kwargs,\n    )\n    self._account: \"Account\" = self.exchange._account\n\n    self.state: PositionState = state\n    self.parent: \"Order\" = parent\n    self.tag: str | None = tag\n\n    self.entry_price: float | None = entry_price\n    self.entry_fee: float = entry_fee\n    self.entry_at: pd.Timestamp | None = entry_at\n\n    self.exit_price: float | None = None\n    self.exit_fee: float = 0.0\n    self.exit_at: pd.Timestamp | None = None\n    self.exit_pl: float | None = None\n\n    self.sl_order: Order | None = sl_order\n    self.tp_order: Order | None = tp_order\n</code></pre>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestPosition.fee","title":"fee  <code>property</code>","text":"<pre><code>fee: float\n</code></pre> <p>Fee/Estimate Fee for trade</p> <p>Returns:</p> <ul> <li> <code>float</code> (              <code>float</code> )          \u2013            <p>Fee</p> </li> </ul>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestPosition.is_exited","title":"is_exited  <code>property</code>","text":"<pre><code>is_exited: bool\n</code></pre> <p>Flag to check Position state.</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True if the trade exited</p> </li> </ul>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestPosition.is_long","title":"is_long  <code>property</code>","text":"<pre><code>is_long: bool\n</code></pre> <p>True if side is long (size is positive).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True/False</p> </li> </ul>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestPosition.is_opening","title":"is_opening  <code>property</code>","text":"<pre><code>is_opening: bool\n</code></pre> <p>Flag to check Position state.</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True if the trade opening</p> </li> </ul>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestPosition.is_short","title":"is_short  <code>property</code>","text":"<pre><code>is_short: bool\n</code></pre> <p>True if side is short (size is negative).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestPosition.pl","title":"pl  <code>property</code>","text":"<pre><code>pl: float\n</code></pre> <p>Estimate Profit or Loss of Position</p> <p>Returns:</p> <ul> <li> <code>float</code> (              <code>float</code> )          \u2013            <p>PnL</p> </li> </ul>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestPosition.side","title":"side  <code>property</code>","text":"<pre><code>side: TradeSide\n</code></pre> <p>True if side is short (size is negative).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>TradeSide</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestPosition.exit","title":"exit","text":"<pre><code>exit(\n    price: float | None = None,\n    at: Timestamp | None = None,\n    caller: Order | Position | None = None,\n    **kwargs\n) -&gt; PositionResult\n</code></pre> <p>Exit Position</p> <p>Parameters:</p> <ul> <li> <code>price</code>               (<code>float</code>, default:                   <code>None</code> )           \u2013            <p>Exit price</p> </li> <li> <code>at</code>               (<code>object</code>, default:                   <code>None</code> )           \u2013            <p>Exit bar</p> </li> <li> <code>caller</code>               (<code>Order | Position</code>, default:                   <code>None</code> )           \u2013            <p>Skip caller to prevent infinite recursion loop. Defaults to None.</p> </li> </ul> Source code in <code>lettrade/exchange/backtest/trade.py</code> <pre><code>def exit(\n    self,\n    price: float | None = None,\n    at: pd.Timestamp | None = None,\n    caller: Order | Position | None = None,\n    **kwargs,\n) -&gt; PositionResult:\n    \"\"\"Exit Position\n\n    Args:\n        price (float): Exit price\n        at (object): Exit bar\n        caller (Order | Position, optional): Skip caller to prevent infinite recursion loop. Defaults to None.\n    \"\"\"\n    if self.state == PositionState.Exit:\n        if caller is None:\n            # Call by user\n            raise RuntimeError(f\"Call exited position {self}\")\n        return\n\n    if caller is None:\n        # Call by user\n        if price is not None:\n            raise RuntimeError(f\"Price set {price} is not available\")\n        if at is not None:\n            raise RuntimeError(f\"At set {at} is not available\")\n\n        price = self.data.l.open[0]\n        at = self.data.l.index[0]\n    else:\n        # Call by SL/TP order\n        if price is None or at is None:\n            raise RuntimeError(f\"Caller {caller} with price is None or at is None\")\n\n    # PnL\n    pl = self._account.pl(\n        size=self.size,\n        entry_price=self.entry_price,\n        exit_price=price,\n    )\n\n    # Fee\n    fee = self._account.fee(size=self.size)\n\n    # State\n    ok = super().exit(price=price, at=at, pl=pl, fee=fee, **kwargs)\n\n    # Caller is position close by tp/sl order\n    if caller is None:\n        if self.sl_order is not None:\n            self.sl_order.cancel(caller=self)\n        if self.tp_order is not None:\n            self.tp_order.cancel(caller=self)\n    else:\n        if self.sl_order and self.sl_order is not caller:\n            self.sl_order.cancel(caller=caller)\n        if self.tp_order and self.tp_order is not caller:\n            self.tp_order.cancel(caller=caller)\n\n    return ok\n</code></pre>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestPosition.from_order","title":"from_order  <code>classmethod</code>","text":"<pre><code>from_order(\n    order: BackTestOrder,\n    size: float | None = None,\n    state: PositionState = PositionState.Open,\n    **kwargs\n) -&gt; BackTestPosition\n</code></pre> <p>Build Position object from Order object</p> <p>Parameters:</p> <ul> <li> <code>size</code>               (<code>float</code>, default:                   <code>None</code> )           \u2013            <p>Size of Position object. Defaults to None.</p> </li> <li> <code>state</code>               (<code>PositionState</code>, default:                   <code>Open</code> )           \u2013            <p>State of Position object. Defaults to PositionState.Open.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>BackTestPosition</code> (              <code>BackTestPosition</code> )          \u2013            <p>Position object</p> </li> </ul> Source code in <code>lettrade/exchange/backtest/trade.py</code> <pre><code>@classmethod\ndef from_order(\n    cls,\n    order: \"BackTestOrder\",\n    size: float | None = None,\n    state: PositionState = PositionState.Open,\n    **kwargs,\n) -&gt; \"BackTestPosition\":\n    \"\"\"Build Position object from Order object\n\n    Args:\n        size (float, optional): Size of Position object. Defaults to None.\n        state (PositionState, optional): State of Position object. Defaults to PositionState.Open.\n\n    Returns:\n        BackTestPosition: Position object\n    \"\"\"\n    position = cls(\n        id=order.id,\n        size=size or order.size,\n        exchange=order.exchange,\n        data=order.data,\n        state=state,\n        parent=order,\n    )\n    if order.sl_price:\n        position._new_sl_order(stop_price=order.sl_price)\n    if order.tp_price:\n        position._new_tp_order(limit_price=order.tp_price)\n    order.parent = position\n    return position\n</code></pre>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestPosition.merge","title":"merge","text":"<pre><code>merge(other: Position) -&gt; bool\n</code></pre> <p>Merge position from another position has same id</p> <p>Parameters:</p> <ul> <li> <code>other</code>               (<code>Position</code>)           \u2013            <p>description</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/position.py</code> <pre><code>def merge(self, other: \"Position\") -&gt; bool:\n    \"\"\"Merge position from another position has same id\n\n    Args:\n        other (Position): _description_\n\n    Raises:\n        RuntimeError: _description_\n    \"\"\"\n    if other is self:\n        return False\n\n    if self.id != other.id:\n        raise RuntimeError(f\"Merge difference id {self.id} != {other.id} order\")\n\n    self.size = other.size\n\n    if other.sl_order is not None:\n        self.sl_order = other.sl_order\n        self.sl_order.parent = self\n    elif self.sl_order is not None:\n        self.sl_order.cancel()\n        self.sl_order = None\n\n    if other.tp_order is not None:\n        self.tp_order = other.tp_order\n        self.tp_order.parent = self\n    elif self.tp_order is not None:\n        self.tp_order.cancel()\n        self.tp_order = None\n\n    if other.entry_at:\n        self.entry_at = other.entry_at\n    if other.entry_price:\n        self.entry_price = other.entry_price\n\n    if other.exit_at:\n        self.exit_at = other.exit_at\n    if other.exit_price:\n        self.exit_price = other.exit_price\n    if other.exit_fee:\n        self.exit_fee = other.exit_fee\n    if other.exit_pl:\n        self.exit_pl = other.exit_pl\n\n    if other.parent:\n        self.parent = other.parent\n\n    return True\n</code></pre>"},{"location":"reference/exchange/backtest/extra/","title":"Index","text":""},{"location":"reference/exchange/backtest/extra/#lettrade.exchange.backtest.extra","title":"extra","text":""},{"location":"reference/exchange/backtest/extra/ray/","title":"Index","text":""},{"location":"reference/exchange/backtest/extra/ray/#lettrade.exchange.backtest.extra.ray","title":"ray","text":""},{"location":"reference/exchange/backtest/extra/ray/ray/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> ray","text":""},{"location":"reference/exchange/backtest/extra/ray/ray/#lettrade.exchange.backtest.extra.ray.ray","title":"ray","text":""},{"location":"reference/exchange/backtest/extra/yfinance/","title":"Index","text":""},{"location":"reference/exchange/backtest/extra/yfinance/#lettrade.exchange.backtest.extra.yfinance","title":"yfinance","text":""},{"location":"reference/exchange/backtest/extra/yfinance/yfinance/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> yfinance","text":""},{"location":"reference/exchange/backtest/extra/yfinance/yfinance/#lettrade.exchange.backtest.extra.yfinance.yfinance","title":"yfinance","text":""},{"location":"reference/exchange/backtest/plotly/","title":"Index","text":""},{"location":"reference/exchange/backtest/plotly/#lettrade.exchange.backtest.plotly","title":"plotly","text":""},{"location":"reference/exchange/backtest/plotly/optimize/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> optimize","text":""},{"location":"reference/exchange/backtest/plotly/optimize/#lettrade.exchange.backtest.plotly.optimize","title":"optimize","text":""},{"location":"reference/exchange/backtest/plotly/optimize/#lettrade.exchange.backtest.plotly.optimize.PlotlyOptimizePlotter","title":"PlotlyOptimizePlotter","text":"<pre><code>PlotlyOptimizePlotter(total=None, process_bar: bool = True)\n</code></pre> <p>               Bases: <code>OptimizePlotter</code></p> Source code in <code>lettrade/exchange/backtest/plotly/optimize.py</code> <pre><code>def __init__(self, total=None, process_bar: bool = True) -&gt; None:\n    super().__init__()\n\n    self._total = total\n\n    if process_bar:\n        from rich.progress import (\n            BarColumn,\n            Console,\n            Progress,\n            SpinnerColumn,\n            TaskProgressColumn,\n            TextColumn,\n            TimeElapsedColumn,\n            TimeRemainingColumn,\n        )\n\n        console = Console(record=True, force_jupyter=False)\n        self._process_bar = Progress(\n            SpinnerColumn(),\n            # *Progress.get_default_columns(),\n            TextColumn(\"[progress.description]{task.description}\"),\n            BarColumn(),\n            TaskProgressColumn(),\n            TextColumn(\"[bold blue][{task.completed}/{task.total}]\"),\n            TimeRemainingColumn(),\n            TimeElapsedColumn(),\n            console=console,\n            # transient=False,\n        )\n        self._process_bar.add_task(\"[cyan2]Optimizing\", total=total)\n        self._process_bar.start()\n    else:\n        self._process_bar = None\n</code></pre>"},{"location":"reference/exchange/backtest/plotly/optimize/#lettrade.exchange.backtest.plotly.optimize.PlotlyOptimizePlotter.contour","title":"contour","text":"<pre><code>contour(\n    x: str = None,\n    y: str = None,\n    z: str = \"equity\",\n    histfunc=\"max\",\n    **kwargs\n)\n</code></pre> <p>Plot optimize contour</p> <p>Parameters:</p> <ul> <li> <code>x</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>y</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>z</code>               (<code>str</code>, default:                   <code>'equity'</code> )           \u2013            <p>description. Defaults to \"equity\".</p> </li> <li> <code>histfunc</code>               (<code>str</code>, default:                   <code>'max'</code> )           \u2013            <p>description. Defaults to \"max\".</p> </li> </ul> Source code in <code>lettrade/exchange/backtest/plotly/optimize.py</code> <pre><code>def contour(\n    self,\n    x: str = None,\n    y: str = None,\n    z: str = \"equity\",\n    histfunc=\"max\",\n    **kwargs,\n):\n    \"\"\"Plot optimize contour\n\n    Args:\n        x (str, optional): _description_. Defaults to None.\n        y (str, optional): _description_. Defaults to None.\n        z (str, optional): _description_. Defaults to \"equity\".\n        histfunc (str, optional): _description_. Defaults to \"max\".\n    \"\"\"\n    x, y, z = self._xyz_default(x, y, z)\n    df = pd.DataFrame(self._xyzs(x=x, y=y, z=z))\n    fig = px.density_contour(\n        df,\n        x=x,\n        y=y,\n        z=z,\n        nbinsx=int(df[x].max() - df[x].min() + 1),\n        nbinsy=int(df[y].max() - df[y].min() + 1),\n        histfunc=histfunc,\n        **kwargs,\n    )\n    fig.update_traces(contours_coloring=\"fill\", contours_showlabels=True)\n    fig.show()\n</code></pre>"},{"location":"reference/exchange/backtest/plotly/optimize/#lettrade.exchange.backtest.plotly.optimize.PlotlyOptimizePlotter.heatmap","title":"heatmap","text":"<pre><code>heatmap(\n    x: str = None,\n    y: str = None,\n    z: str = \"equity\",\n    histfunc=\"max\",\n    **kwargs\n)\n</code></pre> <p>Plot optimize heatmap</p> <p>Parameters:</p> <ul> <li> <code>x</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>y</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>z</code>               (<code>str</code>, default:                   <code>'equity'</code> )           \u2013            <p>description. Defaults to \"equity\".</p> </li> <li> <code>histfunc</code>               (<code>str</code>, default:                   <code>'max'</code> )           \u2013            <p>description. Defaults to \"max\".</p> </li> </ul> Source code in <code>lettrade/exchange/backtest/plotly/optimize.py</code> <pre><code>def heatmap(\n    self,\n    x: str = None,\n    y: str = None,\n    z: str = \"equity\",\n    histfunc=\"max\",\n    **kwargs,\n):\n    \"\"\"Plot optimize heatmap\n\n    Args:\n        x (str, optional): _description_. Defaults to None.\n        y (str, optional): _description_. Defaults to None.\n        z (str, optional): _description_. Defaults to \"equity\".\n        histfunc (str, optional): _description_. Defaults to \"max\".\n    \"\"\"\n    x, y, z = self._xyz_default(x, y, z)\n    df = pd.DataFrame(self._xyzs(x=x, y=y, z=z))\n    fig = px.density_heatmap(\n        df,\n        x=x,\n        y=y,\n        z=z,\n        nbinsx=int(df[x].max() - df[x].min() + 1),\n        nbinsy=int(df[y].max() - df[y].min() + 1),\n        histfunc=histfunc,\n        color_continuous_scale=\"Viridis\",\n        **kwargs,\n    )\n    fig.show()\n</code></pre>"},{"location":"reference/exchange/backtest/plotly/optimize/#lettrade.exchange.backtest.plotly.optimize.PlotlyOptimizePlotter.plot","title":"plot","text":"<pre><code>plot(**kwargs)\n</code></pre> <p>Plot optimize result</p> Source code in <code>lettrade/exchange/backtest/plotly/optimize.py</code> <pre><code>def plot(self, **kwargs):\n    \"\"\"Plot optimize result\"\"\"\n    ids = []\n    equities = []\n    for result in self.results:\n        ids.append(result[\"index\"])\n        equities.append(result[\"result\"][\"equity\"])\n\n    df = pd.DataFrame({\"id\": ids, \"equity\": equities})\n\n    fig = px.scatter(df, x=\"id\", y=\"equity\")\n    fig.show()\n</code></pre>"},{"location":"reference/exchange/ccxt/","title":"Index","text":""},{"location":"reference/exchange/ccxt/#lettrade.exchange.ccxt","title":"ccxt","text":""},{"location":"reference/exchange/ccxt/api/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> api","text":""},{"location":"reference/exchange/ccxt/api/#lettrade.exchange.ccxt.api","title":"api","text":""},{"location":"reference/exchange/ccxt/api/#lettrade.exchange.ccxt.api.CCXTAPI","title":"CCXTAPI","text":"<pre><code>CCXTAPI(\n    exchange: int,\n    key: str,\n    secret: str,\n    currency: str = \"USDT\",\n    ccxt: CCXTAPIExchange | None = None,\n    **kwargs\n)\n</code></pre> <p>               Bases: <code>LiveAPI</code></p> <p>CCXT API</p> <p>Parameters:</p> <ul> <li> <code>exchange</code>               (<code>int</code>)           \u2013            <p>description</p> </li> <li> <code>key</code>               (<code>str</code>)           \u2013            <p>description</p> </li> <li> <code>secret</code>               (<code>str</code>)           \u2013            <p>description</p> </li> <li> <code>ccxt</code>               (<code>CCXTAPIExchange | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> Source code in <code>lettrade/exchange/ccxt/api.py</code> <pre><code>def __init__(\n    self,\n    exchange: int,\n    key: str,\n    secret: str,\n    currency: str = \"USDT\",\n    ccxt: CCXTAPIExchange | None = None,\n    **kwargs,\n):\n    \"\"\"_summary_\n\n    Args:\n        exchange (int): _description_\n        key (str): _description_\n        secret (str): _description_\n        ccxt (CCXTAPIExchange | None, optional): _description_. Defaults to None.\n    \"\"\"\n    if ccxt is None:\n        ccxt = CCXTAPIExchange(exchange=exchange, key=key, secret=secret, **kwargs)\n    self._ccxt = ccxt\n    self._currency = ccxt\n</code></pre>"},{"location":"reference/exchange/ccxt/api/#lettrade.exchange.ccxt.api.CCXTAPI.account","title":"account","text":"<pre><code>account() -&gt; dict\n</code></pre> Source code in <code>lettrade/exchange/ccxt/api.py</code> <pre><code>def account(self) -&gt; dict:\n    \"\"\"\"\"\"\n    raw = self._ccxt.fetch_my_balance()\n    currency = raw[self._currency]\n    return Box(\n        balance=currency[\"free\"],\n        equity=currency[\"total\"],\n        margin=1,\n        leverage=1,\n        raw=raw,\n    )\n</code></pre>"},{"location":"reference/exchange/ccxt/api/#lettrade.exchange.ccxt.api.CCXTAPI.execution_get","title":"execution_get","text":"<pre><code>execution_get(id: str, **kwargs) -&gt; dict\n</code></pre> Source code in <code>lettrade/exchange/ccxt/api.py</code> <pre><code>def execution_get(self, id: str, **kwargs) -&gt; dict:\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/ccxt/api/#lettrade.exchange.ccxt.api.CCXTAPI.executions_get","title":"executions_get","text":"<pre><code>executions_get(\n    position_id: str | None = None,\n    search: str | None = None,\n    **kwargs\n) -&gt; list[dict]\n</code></pre> Source code in <code>lettrade/exchange/ccxt/api.py</code> <pre><code>def executions_get(\n    self,\n    position_id: str | None = None,\n    search: str | None = None,\n    **kwargs,\n) -&gt; list[dict]:\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/ccxt/api/#lettrade.exchange.ccxt.api.CCXTAPI.executions_total","title":"executions_total","text":"<pre><code>executions_total(\n    since: datetime | None = None,\n    to: datetime | None = None,\n    **kwargs\n) -&gt; int\n</code></pre> Source code in <code>lettrade/exchange/ccxt/api.py</code> <pre><code>def executions_total(\n    self,\n    since: datetime | None = None,\n    to: datetime | None = None,\n    **kwargs,\n) -&gt; int:\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/ccxt/api/#lettrade.exchange.ccxt.api.CCXTAPI.init","title":"init","text":"<pre><code>init(**kwargs)\n</code></pre> Source code in <code>lettrade/exchange/live/api.py</code> <pre><code>def init(self, **kwargs):\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/ccxt/api/#lettrade.exchange.ccxt.api.CCXTAPI.order_close","title":"order_close","text":"<pre><code>order_close(order: CCXTOrder)\n</code></pre> Source code in <code>lettrade/exchange/ccxt/api.py</code> <pre><code>def order_close(self, order: \"CCXTOrder\"):\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/ccxt/api/#lettrade.exchange.ccxt.api.CCXTAPI.order_open","title":"order_open","text":"<pre><code>order_open(order: CCXTOrder, **kwargs)\n</code></pre> Source code in <code>lettrade/exchange/ccxt/api.py</code> <pre><code>def order_open(self, order: \"CCXTOrder\", **kwargs):\n    \"\"\"\"\"\"\n    try:\n        result = self._ccxt.create_my_order(\n            symbol=order.data.symbol,\n            type=order.type.lower(),\n            side=order.side.lower(),\n            amount=abs(order.size),\n            price=order.place_price,\n            **kwargs,\n        )\n\n        print(\"order_open\", order, result)\n        return result\n    except ccxt.InvalidOrder as e:\n        raise LetLiveOrderInvalidException(e.args[0]) from e\n</code></pre>"},{"location":"reference/exchange/ccxt/api/#lettrade.exchange.ccxt.api.CCXTAPI.orders_get","title":"orders_get","text":"<pre><code>orders_get(**kwargs)\n</code></pre> Source code in <code>lettrade/exchange/ccxt/api.py</code> <pre><code>def orders_get(self, **kwargs):\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/ccxt/api/#lettrade.exchange.ccxt.api.CCXTAPI.orders_history_get","title":"orders_history_get","text":"<pre><code>orders_history_get(\n    id: str | None = None,\n    since: datetime | None = None,\n    to: datetime | None = None,\n    **kwargs\n) -&gt; list[dict]\n</code></pre> Source code in <code>lettrade/exchange/live/api.py</code> <pre><code>def orders_history_get(\n    self,\n    id: str | None = None,\n    since: datetime | None = None,\n    to: datetime | None = None,\n    **kwargs,\n) -&gt; list[dict]:\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/ccxt/api/#lettrade.exchange.ccxt.api.CCXTAPI.orders_total","title":"orders_total","text":"<pre><code>orders_total()\n</code></pre> Source code in <code>lettrade/exchange/ccxt/api.py</code> <pre><code>def orders_total(self):\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/ccxt/api/#lettrade.exchange.ccxt.api.CCXTAPI.position_close","title":"position_close","text":"<pre><code>position_close(position: CCXTPosition, **kwargs) -&gt; dict\n</code></pre> Source code in <code>lettrade/exchange/ccxt/api.py</code> <pre><code>def position_close(self, position: \"CCXTPosition\", **kwargs) -&gt; dict:\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/ccxt/api/#lettrade.exchange.ccxt.api.CCXTAPI.position_update","title":"position_update","text":"<pre><code>position_update(\n    position: CCXTPosition,\n    sl: float | None = None,\n    tp: float | None = None,\n    **kwargs\n) -&gt; dict\n</code></pre> Source code in <code>lettrade/exchange/ccxt/api.py</code> <pre><code>def position_update(\n    self,\n    position: \"CCXTPosition\",\n    sl: float | None = None,\n    tp: float | None = None,\n    **kwargs,\n) -&gt; dict:\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/ccxt/api/#lettrade.exchange.ccxt.api.CCXTAPI.positions_get","title":"positions_get","text":"<pre><code>positions_get(\n    id: str = None, symbol: str = None, **kwargs\n) -&gt; list[dict]\n</code></pre> Source code in <code>lettrade/exchange/ccxt/api.py</code> <pre><code>def positions_get(self, id: str = None, symbol: str = None, **kwargs) -&gt; list[dict]:\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/ccxt/api/#lettrade.exchange.ccxt.api.CCXTAPI.positions_total","title":"positions_total","text":"<pre><code>positions_total(\n    since: datetime | None = None,\n    to: datetime | None = None,\n    **kwargs\n) -&gt; int\n</code></pre> Source code in <code>lettrade/exchange/ccxt/api.py</code> <pre><code>def positions_total(\n    self,\n    since: datetime | None = None,\n    to: datetime | None = None,\n    **kwargs,\n) -&gt; int:\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/ccxt/api/#lettrade.exchange.ccxt.api.CCXTAPI.stop","title":"stop","text":"<pre><code>stop()\n</code></pre> Source code in <code>lettrade/exchange/ccxt/api.py</code> <pre><code>def stop(self):\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/ccxt/api/#lettrade.exchange.ccxt.api.CCXTAPIExchange","title":"CCXTAPIExchange","text":"<pre><code>CCXTAPIExchange(\n    exchange: str,\n    key: str,\n    secret: str,\n    options: dict | None = None,\n    type: Literal[\"spot\", \"margin\", \"future\"] = \"spot\",\n    sandbox: bool = True,\n    verbose: bool = False,\n    **kwargs\n)\n</code></pre> <p>Single instance across multiprocessing. Help pickle-able result and send across multiprocessing</p> Source code in <code>lettrade/exchange/ccxt/api.py</code> <pre><code>def __init__(\n    self,\n    exchange: str,\n    key: str,\n    secret: str,\n    options: dict | None = None,\n    type: Literal[\"spot\", \"margin\", \"future\"] = \"spot\",\n    sandbox: bool = True,\n    verbose: bool = False,\n    **kwargs,\n) -&gt; None:\n    config = dict(\n        apiKey=key,\n        secret=secret,\n        enableRateLimit=True,\n        defaultType=type,\n        options={\n            \"sandboxMode\": sandbox,\n            \"warnOnFetchOpenOrdersWithoutSymbol\": False,\n            \"tradesLimit\": 1,\n            \"ordersLimit\": 1,\n            \"OHLCVLimit\": 1,\n        },\n    )\n    config.update(kwargs)\n\n    if options is not None:\n        config[\"options\"].update(options)\n\n    self._exchange = getattr(ccxt, exchange)(config)\n\n    # Must call sanbox function instead of option sandboxMode\n    self._exchange.set_sandbox_mode(sandbox)\n    self._exchange.verbose = verbose\n    logger.info(\"Starting exchange class: %s\", self._exchange)\n</code></pre>"},{"location":"reference/exchange/ccxt/api/#lettrade.exchange.ccxt.api.CCXTAPIExchange.stop","title":"stop","text":"<pre><code>stop()\n</code></pre> Source code in <code>lettrade/exchange/ccxt/api.py</code> <pre><code>def stop(self):\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/ccxt/ccxt/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> ccxt","text":""},{"location":"reference/exchange/ccxt/ccxt/#lettrade.exchange.ccxt.ccxt","title":"ccxt","text":""},{"location":"reference/exchange/ccxt/ccxt/#lettrade.exchange.ccxt.ccxt.CCXTAccount","title":"CCXTAccount","text":"<pre><code>CCXTAccount(api: LiveAPI, currency: str = 'USDT', **kwargs)\n</code></pre> <p>               Bases: <code>LiveAccount</code></p> <p>Account for CCXT</p> Source code in <code>lettrade/exchange/ccxt/ccxt.py</code> <pre><code>def __init__(self, api: LiveAPI, currency: str = \"USDT\", **kwargs) -&gt; None:\n    super().__init__(api, **kwargs)\n    self._currency = currency\n</code></pre>"},{"location":"reference/exchange/ccxt/ccxt/#lettrade.exchange.ccxt.ccxt.CCXTAccount.balance","title":"balance  <code>property</code>","text":"<pre><code>balance: float\n</code></pre> <p>Balance of account</p> <p>Returns:</p> <ul> <li> <code>float</code> (              <code>float</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/ccxt/ccxt/#lettrade.exchange.ccxt.ccxt.CCXTAccount.account_refresh","title":"account_refresh","text":"<pre><code>account_refresh()\n</code></pre> <p>Refresh account balance</p> Source code in <code>lettrade/exchange/live/account.py</code> <pre><code>def account_refresh(self):\n    \"\"\"Refresh account balance\"\"\"\n    self._account = self._api.account()\n\n    if __debug__:\n        logger.debug(\"Account: %s\", str(self._account))\n\n    self._balance = self._account.balance\n    self._equity = self._account.equity\n</code></pre>"},{"location":"reference/exchange/ccxt/ccxt/#lettrade.exchange.ccxt.ccxt.CCXTAccount.next","title":"next","text":"<pre><code>next()\n</code></pre> <p>Next account</p> Source code in <code>lettrade/account/account.py</code> <pre><code>def next(self):\n    \"\"\"Next account\"\"\"\n</code></pre>"},{"location":"reference/exchange/ccxt/ccxt/#lettrade.exchange.ccxt.ccxt.CCXTAccount.next_next","title":"next_next","text":"<pre><code>next_next()\n</code></pre> <p>Call after strategy.next()</p> Source code in <code>lettrade/account/account.py</code> <pre><code>def next_next(self):\n    \"\"\"Call after strategy.next()\"\"\"\n    self._equity_snapshot()\n</code></pre>"},{"location":"reference/exchange/ccxt/ccxt/#lettrade.exchange.ccxt.ccxt.CCXTAccount.risk","title":"risk","text":"<pre><code>risk(side: TradeSide, size: float, **kwargs) -&gt; float\n</code></pre> <p>Risk calculation</p> Source code in <code>lettrade/account/account.py</code> <pre><code>def risk(self, side: \"TradeSide\", size: float, **kwargs) -&gt; float:\n    \"\"\"Risk calculation\"\"\"\n    if size is None:\n        return side * abs(self._risk)\n    return side * abs(size)\n</code></pre>"},{"location":"reference/exchange/ccxt/ccxt/#lettrade.exchange.ccxt.ccxt.CCXTAccount.start","title":"start","text":"<pre><code>start()\n</code></pre> <p>Start live account by load account info from API</p> Source code in <code>lettrade/exchange/live/account.py</code> <pre><code>def start(self):\n    \"\"\"Start live account by load account info from API\"\"\"\n    self.account_refresh()\n    self._margin = self._account.margin\n    self._leverage = self._account.leverage\n</code></pre>"},{"location":"reference/exchange/ccxt/ccxt/#lettrade.exchange.ccxt.ccxt.CCXTAccount.stop","title":"stop","text":"<pre><code>stop()\n</code></pre> <p>Stop account</p> Source code in <code>lettrade/account/account.py</code> <pre><code>def stop(self):\n    \"\"\"Stop account\"\"\"\n    try:\n        self._equity_snapshot()\n    except LetAccountInsufficientException:\n        pass\n</code></pre>"},{"location":"reference/exchange/ccxt/ccxt/#lettrade.exchange.ccxt.ccxt.CCXTDataFeed","title":"CCXTDataFeed","text":"<pre><code>CCXTDataFeed(\n    symbol: str,\n    timeframe: str | int | Timedelta,\n    name: str | None = None,\n    api: LiveAPI | None = None,\n    columns: list[str] | None = None,\n    **kwargs\n)\n</code></pre> <p>               Bases: <code>LiveDataFeed</code></p> <p>DataFeed for CCXT</p> <p>Parameters:</p> <ul> <li> <code>symbol</code>               (<code>str</code>)           \u2013            <p>Symbol of DataFeed</p> </li> <li> <code>timeframe</code>               (<code>str | int | Timedelta</code>)           \u2013            <p>TimeFrame of DataFeed</p> </li> <li> <code>name</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>Name of DataFeed, auto generate <code>{symbol}_{timeframe}</code> if none. Defaults to None.</p> </li> <li> <code>api</code>               (<code>LiveAPI | None</code>, default:                   <code>None</code> )           \u2013            <p>Live trading API. Defaults to None.</p> </li> <li> <code>columns</code>               (<code>list[str] | None</code>, default:                   <code>None</code> )           \u2013            <p>List of DataFeed columns. Defaults to None.</p> </li> </ul> Source code in <code>lettrade/exchange/live/data.py</code> <pre><code>def __init__(\n    self,\n    symbol: str,\n    timeframe: str | int | pd.Timedelta,\n    name: str | None = None,\n    api: LiveAPI | None = None,\n    columns: list[str] | None = None,\n    **kwargs,\n) -&gt; None:\n    \"\"\"_summary_\n\n    Args:\n        symbol (str): Symbol of DataFeed\n        timeframe (str | int | pd.Timedelta): TimeFrame of DataFeed\n        name (str | None, optional): Name of DataFeed, auto generate `{symbol}_{timeframe}` if none. Defaults to None.\n        api (LiveAPI | None, optional): Live trading API. Defaults to None.\n        columns (list[str] | None, optional): List of DataFeed columns. Defaults to None.\n    \"\"\"\n    super().__init__(\n        name=name or f\"{symbol}_{timeframe}\",\n        timeframe=timeframe,\n        columns=columns or [\"open\", \"high\", \"low\", \"close\", \"volume\"],\n        **kwargs,\n    )\n\n    self.meta.update(symbol=symbol, base_columns=self.columns.copy())\n\n    if api is not None:\n        self._api = api\n</code></pre>"},{"location":"reference/exchange/ccxt/ccxt/#lettrade.exchange.ccxt.ccxt.CCXTDataFeed.i","title":"i  <code>property</code>","text":"<pre><code>i: indicator\n</code></pre> <p>Alias to <code>lettrade.indicator</code> and using in DataFeed by call: <code>DataFeed.i.indicator_name()</code></p>"},{"location":"reference/exchange/ccxt/ccxt/#lettrade.exchange.ccxt.ccxt.CCXTDataFeed.is_main","title":"is_main  <code>property</code>","text":"<pre><code>is_main: bool\n</code></pre> <p>Property to check DataFeed is main DataFeed or not</p>"},{"location":"reference/exchange/ccxt/ccxt/#lettrade.exchange.ccxt.ccxt.CCXTDataFeed.l","title":"l  <code>instance-attribute</code>","text":"<pre><code>l: LetDataFeedWrapper\n</code></pre> <p>LetTrade DataFeed wrapper using to manage index pointer of DataFeed</p>"},{"location":"reference/exchange/ccxt/ccxt/#lettrade.exchange.ccxt.ccxt.CCXTDataFeed.meta","title":"meta  <code>property</code>","text":"<pre><code>meta: dict\n</code></pre> <p>Property to get metadata of DataFeed</p>"},{"location":"reference/exchange/ccxt/ccxt/#lettrade.exchange.ccxt.ccxt.CCXTDataFeed.name","title":"name  <code>property</code>","text":"<pre><code>name: str\n</code></pre> <p>Property to get name of DataFeed</p>"},{"location":"reference/exchange/ccxt/ccxt/#lettrade.exchange.ccxt.ccxt.CCXTDataFeed.now","title":"now  <code>property</code>","text":"<pre><code>now: Timestamp\n</code></pre> <p>Property to get current index value of DataFeed</p>"},{"location":"reference/exchange/ccxt/ccxt/#lettrade.exchange.ccxt.ccxt.CCXTDataFeed.symbol","title":"symbol  <code>property</code>","text":"<pre><code>symbol: str\n</code></pre> <p>Property to get symbol of DataFeed</p>"},{"location":"reference/exchange/ccxt/ccxt/#lettrade.exchange.ccxt.ccxt.CCXTDataFeed.timeframe","title":"timeframe  <code>property</code>","text":"<pre><code>timeframe: TimeFrame\n</code></pre> <p>Property to get timeframe of DataFeed</p>"},{"location":"reference/exchange/ccxt/ccxt/#lettrade.exchange.ccxt.ccxt.CCXTDataFeed.bar","title":"bar","text":"<pre><code>bar(i: int = 0) -&gt; Timestamp\n</code></pre> <p>Get current pd.Timestamp value of DataFeed</p> <p>Parameters:</p> <ul> <li> <code>i</code>               (<code>int</code>, default:                   <code>0</code> )           \u2013            <p>Index. Defaults to 0.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Timestamp</code>           \u2013            <p>pd.Timestamp: description</p> </li> </ul> Source code in <code>lettrade/data/data.py</code> <pre><code>def bar(self, i: int = 0) -&gt; pd.Timestamp:\n    \"\"\"Get current pd.Timestamp value of DataFeed\n\n    Args:\n        i (int, optional): Index. Defaults to 0.\n\n    Returns:\n        pd.Timestamp: _description_\n    \"\"\"\n    return self.l.index[i]\n</code></pre>"},{"location":"reference/exchange/ccxt/ccxt/#lettrade.exchange.ccxt.ccxt.CCXTDataFeed.bars","title":"bars","text":"<pre><code>bars(\n    since: int | str | Timestamp, to: int | str | Timestamp\n) -&gt; list\n</code></pre> <p>Get bars from LiveAPI</p> <p>Parameters:</p> <ul> <li> <code>since</code>               (<code>int | str | Timestamp</code>)           \u2013            <p>description</p> </li> <li> <code>to</code>               (<code>int | str | Timestamp</code>)           \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list</code> (              <code>list</code> )          \u2013            <p>list of bar</p> </li> </ul> Source code in <code>lettrade/exchange/live/data.py</code> <pre><code>def bars(\n    self,\n    since: int | str | pd.Timestamp,\n    to: int | str | pd.Timestamp,\n) -&gt; list:\n    \"\"\"Get bars from LiveAPI\n\n    Args:\n        since (int | str | pd.Timestamp): _description_\n        to (int | str | pd.Timestamp): _description_\n\n    Returns:\n        list: list of bar\n    \"\"\"\n    return self._api.bars(\n        symbol=self.symbol,\n        timeframe=self.timeframe.string,\n        since=since,\n        to=to,\n    )\n</code></pre>"},{"location":"reference/exchange/ccxt/ccxt/#lettrade.exchange.ccxt.ccxt.CCXTDataFeed.bars_load","title":"bars_load","text":"<pre><code>bars_load(\n    since: int | str | Timestamp, to: int | str | Timestamp\n) -&gt; bool\n</code></pre> <p>Get bar from API and push to DataFeed</p> <p>Parameters:</p> <ul> <li> <code>since</code>               (<code>int | str | Timestamp</code>)           \u2013            <p>description</p> </li> <li> <code>to</code>               (<code>int | str | Timestamp</code>)           \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True if has data, False if no data</p> </li> </ul> Source code in <code>lettrade/exchange/live/data.py</code> <pre><code>def bars_load(\n    self,\n    since: int | str | pd.Timestamp,\n    to: int | str | pd.Timestamp,\n) -&gt; bool:\n    \"\"\"Get bar from API and push to DataFeed\n\n    Args:\n        since (int | str | pd.Timestamp): _description_\n        to (int | str | pd.Timestamp): _description_\n\n    Returns:\n        bool: True if has data, False if no data\n    \"\"\"\n    bars = self.bars(since=since, to=to)\n\n    if bars is None or len(bars) == 0:\n        logger.warning(\"No bars data for %s\", self.name)\n        return False\n\n    self.push(bars, unit=self._bar_datetime_unit)\n    return True\n</code></pre>"},{"location":"reference/exchange/ccxt/ccxt/#lettrade.exchange.ccxt.ccxt.CCXTDataFeed.drop","title":"drop","text":"<pre><code>drop(\n    *args,\n    since: int | str | Timestamp | None = None,\n    to: int | str | Timestamp | None = None,\n    **kwargs\n) -&gt; None\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>since</code>               (<code>int | str | Timestamp | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>to</code>               (<code>int | str | Timestamp | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/data/data.py</code> <pre><code>def drop(\n    self,\n    *args,\n    since: int | str | pd.Timestamp | None = None,\n    to: int | str | pd.Timestamp | None = None,\n    **kwargs,\n) -&gt; None:\n    \"\"\"_summary_\n\n    Args:\n        since (int | str | pd.Timestamp | None, optional): _description_. Defaults to None.\n        to (int | str | pd.Timestamp | None, optional): _description_. Defaults to None.\n\n    Raises:\n        RuntimeError: _description_\n    \"\"\"\n    if since is None and to is None:\n        super().drop(*args, **kwargs)\n        return\n\n    condiction = None\n\n    # Since\n    if since is not None:\n        if isinstance(since, int):\n            loc = self.l.index[since]\n        elif isinstance(since, str):\n            loc = pd.to_datetime(since, utc=True)\n        elif isinstance(since, pd.Timestamp):\n            loc = since\n        else:\n            raise RuntimeError(f\"DataFeed.drop since {since} is invalid\")\n        condiction = self.index &lt; loc\n\n    # To\n    if to is not None:\n        if isinstance(to, int):\n            loc = self.l.index[to]\n        elif isinstance(to, str):\n            loc = pd.to_datetime(to, utc=True)\n        elif isinstance(to, pd.Timestamp):\n            loc = to\n        else:\n            raise RuntimeError(f\"DataFeed.drop to {to} is invalid\")\n\n        if condiction is None:\n            condiction = self.index &gt; loc\n        else:\n            condiction = condiction | (self.index &gt; loc)\n\n    index = self[condiction].index\n    super().drop(index=index, inplace=True)\n    self.l.reset()\n\n    if __debug__:\n        logger.debug(\"BackTestDataFeed %s dropped %s rows\", self.name, len(index))\n</code></pre>"},{"location":"reference/exchange/ccxt/ccxt/#lettrade.exchange.ccxt.ccxt.CCXTDataFeed.dump_csv","title":"dump_csv","text":"<pre><code>dump_csv(\n    path: str | None = None,\n    since: int | str | datetime | None = 0,\n    to: int | str | datetime | None = 1000,\n    **kwargs\n)\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>path</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>since</code>               (<code>int | str | datetime | None</code>, default:                   <code>0</code> )           \u2013            <p>description. Defaults to 0.</p> </li> <li> <code>to</code>               (<code>int | str | datetime | None</code>, default:                   <code>1000</code> )           \u2013            <p>description. Defaults to 1_000.</p> </li> </ul> Source code in <code>lettrade/exchange/live/data.py</code> <pre><code>def dump_csv(\n    self,\n    path: str | None = None,\n    since: int | str | datetime | None = 0,\n    to: int | str | datetime | None = 1_000,\n    **kwargs,\n):\n    \"\"\"_summary_\n\n    Args:\n        path (str | None, optional): _description_. Defaults to None.\n        since (int  |  str  |  datetime | None, optional): _description_. Defaults to 0.\n        to (int  |  str  |  datetime | None, optional): _description_. Defaults to 1_000.\n    \"\"\"\n    if self.empty:\n        if isinstance(since, str):\n            since = pd.to_datetime(since).to_pydatetime()\n        if isinstance(to, str):\n            to = pd.to_datetime(to).to_pydatetime()\n\n        self.bars_load(since=since, to=to)\n\n    if path is None:\n        path = f\"data/{self.name}-{since}_{to}.csv\"\n\n    from lettrade.data.extra.csv import csv_export\n\n    csv_export(dataframe=self, path=path, **kwargs)\n</code></pre>"},{"location":"reference/exchange/ccxt/ccxt/#lettrade.exchange.ccxt.ccxt.CCXTDataFeed.instance","title":"instance  <code>classmethod</code>","text":"<pre><code>instance(\n    api: LiveAPI | None = None,\n    api_kwargs: dict | None = None,\n    **kwargs\n) -&gt; LiveDataFeed\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>api</code>               (<code>LiveAPI</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>api_kwargs</code>               (<code>dict</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>Missing api requirement</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>LiveDataFeed</code> (              <code>LiveDataFeed</code> )          \u2013            <p>DataFeed object</p> </li> </ul> Source code in <code>lettrade/exchange/live/data.py</code> <pre><code>@classmethod\ndef instance(\n    cls,\n    api: LiveAPI | None = None,\n    api_kwargs: dict | None = None,\n    **kwargs,\n) -&gt; \"LiveDataFeed\":\n    \"\"\"_summary_\n\n    Args:\n        api (LiveAPI, optional): _description_. Defaults to None.\n        api_kwargs (dict, optional): _description_. Defaults to None.\n\n    Raises:\n        RuntimeError: Missing api requirement\n\n    Returns:\n        LiveDataFeed: DataFeed object\n    \"\"\"\n    if api is None:\n        if api_kwargs is None:\n            raise RuntimeError(\"api or api_kwargs cannot missing\")\n        api = cls._api_cls(**api_kwargs)\n    obj = cls(api=api, **kwargs)\n    return obj\n</code></pre>"},{"location":"reference/exchange/ccxt/ccxt/#lettrade.exchange.ccxt.ccxt.CCXTDataFeed.next","title":"next","text":"<pre><code>next(size=1, tick=0) -&gt; bool\n</code></pre> <p>Drop extra columns and load next DataFeed</p> <p>Parameters:</p> <ul> <li> <code>size</code>               (<code>int</code>, default:                   <code>1</code> )           \u2013            <p>description. Defaults to 1.</p> </li> <li> <code>tick</code>               (<code>int</code>, default:                   <code>0</code> )           \u2013            <p>description. Defaults to 0.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/live/data.py</code> <pre><code>def next(self, size=1, tick=0) -&gt; bool:\n    \"\"\"Drop extra columns and load next DataFeed\n\n    Args:\n        size (int, optional): _description_. Defaults to 1.\n        tick (int, optional): _description_. Defaults to 0.\n\n    Returns:\n        bool: _description_\n    \"\"\"\n    # Drop existed extra columns to skip reusing calculated data\n    self.drop(columns=self.columns.difference(self._base_columns), inplace=True)\n\n    self.bars_load(since=0, to=size + 1)\n    self.l.go_stop()\n    return True\n</code></pre>"},{"location":"reference/exchange/ccxt/ccxt/#lettrade.exchange.ccxt.ccxt.CCXTDataFeed.push","title":"push","text":"<pre><code>push(\n    rows: list[list[int | float]],\n    unit: str | None = None,\n    utc: bool = True,\n    **kwargs\n)\n</code></pre> <p>Push new rows to DataFeed</p> <p>Parameters:</p> <ul> <li> <code>rows</code>               (<code>list[list[int | float]]</code>)           \u2013            <p>list of rows <code>[[\"timestamp\", \"open price\", \"high price\"...]]</code></p> </li> <li> <code>unit</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>pandas.Timestamp parsing unit. Defaults to None.</p> </li> <li> <code>utc</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>description. Defaults to True.</p> </li> </ul> Source code in <code>lettrade/data/data.py</code> <pre><code>def push(\n    self,\n    rows: list[list[int | float]],\n    unit: str | None = None,\n    utc: bool = True,\n    **kwargs,\n):\n    \"\"\"Push new rows to DataFeed\n\n    Args:\n        rows (list[list[int | float]]): list of rows `[[\"timestamp\", \"open price\", \"high price\"...]]`\n        unit (str | None, optional): pandas.Timestamp parsing unit. Defaults to None.\n        utc (bool, optional): _description_. Defaults to True.\n    \"\"\"\n    for row in rows:\n        dt = pd.to_datetime(row[0], unit=unit, utc=utc, **kwargs)\n        self.at[\n            dt,\n            (\n                \"open\",\n                \"high\",\n                \"low\",\n                \"close\",\n                \"volume\",\n            ),\n        ] = (\n            row[1],  # open\n            row[2],  # high\n            row[3],  # low\n            row[4],  # close\n            row[5],  # volume\n        )\n\n    if __debug__:\n        logger.debug(\"[%s] Update bar: \\n%s\", self.name, self.tail(len(rows)))\n</code></pre>"},{"location":"reference/exchange/ccxt/ccxt/#lettrade.exchange.ccxt.ccxt.CCXTDataFeed.symbol_info","title":"symbol_info","text":"<pre><code>symbol_info()\n</code></pre> <p>Get symbol information from API</p> Source code in <code>lettrade/exchange/live/data.py</code> <pre><code>def symbol_info(self):\n    \"\"\"Get symbol information from API\"\"\"\n    return self._api.market(symbol=self.symbol)\n</code></pre>"},{"location":"reference/exchange/ccxt/ccxt/#lettrade.exchange.ccxt.ccxt.CCXTDataFeeder","title":"CCXTDataFeeder","text":"<pre><code>CCXTDataFeeder(\n    api: LiveAPI,\n    tick: bool = 5,\n    start_size: int = 500,\n    **kwargs\n)\n</code></pre> <p>               Bases: <code>LiveDataFeeder</code></p> <p>DataFeeder for CCXT</p> <pre><code>tick == 0: wait until new bar change value\ntick &gt; 0: sleep tick time (in seconds) then update\n</code></pre> Source code in <code>lettrade/exchange/live/feeder.py</code> <pre><code>def __init__(\n    self,\n    api: LiveAPI,\n    tick: bool = 5,\n    start_size: int = 500,\n    **kwargs,\n) -&gt; None:\n    \"\"\"\n    tick:\n        tick &lt; 0: no tick, just get completed bar\n        tick == 0: wait until new bar change value\n        tick &gt; 0: sleep tick time (in seconds) then update\n    \"\"\"\n    super().__init__()\n    self._api = api\n    self._tick = tick\n    self._start_size = start_size\n    self._config = kwargs\n\n    if isinstance(self._tick, int):\n        self._wait_timeframe = TimeFrame(f\"{self._tick}s\")\n    else:\n        self._wait_timeframe = None\n</code></pre>"},{"location":"reference/exchange/ccxt/ccxt/#lettrade.exchange.ccxt.ccxt.CCXTDataFeeder.is_continous","title":"is_continous  <code>property</code>","text":"<pre><code>is_continous\n</code></pre> <p>Flag check is realtime continous datafeeder</p>"},{"location":"reference/exchange/ccxt/ccxt/#lettrade.exchange.ccxt.ccxt.CCXTDataFeeder.instance","title":"instance  <code>classmethod</code>","text":"<pre><code>instance(\n    api: LiveAPI | None = None,\n    api_kwargs: dict | None = None,\n    **kwargs\n) -&gt; LiveDataFeed\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>api</code>               (<code>LiveAPI</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>api_kwargs</code>               (<code>dict</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>Missing api requirement</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>LiveDataFeed</code> (              <code>LiveDataFeed</code> )          \u2013            <p>DataFeed object</p> </li> </ul> Source code in <code>lettrade/exchange/live/feeder.py</code> <pre><code>@classmethod\ndef instance(\n    cls,\n    api: LiveAPI | None = None,\n    api_kwargs: dict | None = None,\n    **kwargs,\n) -&gt; \"LiveDataFeed\":\n    \"\"\"_summary_\n\n    Args:\n        api (LiveAPI, optional): _description_. Defaults to None.\n        api_kwargs (dict, optional): _description_. Defaults to None.\n\n    Raises:\n        RuntimeError: Missing api requirement\n\n    Returns:\n        LiveDataFeed: DataFeed object\n    \"\"\"\n    if api is None:\n        if api_kwargs is None:\n            raise RuntimeError(\"api or api_kwargs cannot missing\")\n        api = cls._api_cls(**api_kwargs)\n    obj = cls(api=api, **kwargs)\n    return obj\n</code></pre>"},{"location":"reference/exchange/ccxt/ccxt/#lettrade.exchange.ccxt.ccxt.CCXTExchange","title":"CCXTExchange","text":"<pre><code>CCXTExchange(api: LiveAPI, *args, **kwargs)\n</code></pre> <p>               Bases: <code>LiveExchange</code></p> <p>MetaTrade 5 exchange module for <code>lettrade</code></p> <p>Parameters:</p> <ul> <li> <code>api</code>               (<code>LiveAPI</code>)           \u2013            <p>API connect to rpyc MeTrader 5 Terminal server through module <code>mt5linux</code></p> </li> <li> <code>*args</code>               (<code>list</code>, default:                   <code>()</code> )           \u2013            <p><code>Exchange</code> list parameters</p> </li> <li> <code>**kwargs</code>               (<code>dict</code>, default:                   <code>{}</code> )           \u2013            <p><code>Exchange</code> dict parameters</p> </li> </ul> Source code in <code>lettrade/exchange/live/exchange.py</code> <pre><code>def __init__(self, api: LiveAPI, *args, **kwargs):\n    \"\"\"_summary_\n\n    Args:\n        api (LiveAPI): API connect to rpyc MeTrader 5 Terminal server through module `mt5linux`\n        *args (list): `Exchange` list parameters\n        **kwargs (dict): `Exchange` dict parameters\n    \"\"\"\n    super().__init__(*args, **kwargs)\n    self._api = api\n</code></pre>"},{"location":"reference/exchange/ccxt/ccxt/#lettrade.exchange.ccxt.ccxt.CCXTExchange.data","title":"data  <code>instance-attribute</code>","text":"<pre><code>data: DataFeed\n</code></pre> <p>main DataFeed</p>"},{"location":"reference/exchange/ccxt/ccxt/#lettrade.exchange.ccxt.ccxt.CCXTExchange.datas","title":"datas  <code>instance-attribute</code>","text":"<pre><code>datas: list[DataFeed]\n</code></pre> <p>List of all available DataFeed</p>"},{"location":"reference/exchange/ccxt/ccxt/#lettrade.exchange.ccxt.ccxt.CCXTExchange.executions","title":"executions  <code>instance-attribute</code>","text":"<pre><code>executions: dict[str, Execution] = dict()\n</code></pre> <p>Execution dict by <code>Execution.id</code> key</p>"},{"location":"reference/exchange/ccxt/ccxt/#lettrade.exchange.ccxt.ccxt.CCXTExchange.history_orders","title":"history_orders  <code>instance-attribute</code>","text":"<pre><code>history_orders: dict[str, Order] = dict()\n</code></pre> <p>History Order dict by <code>Order.id</code> key</p>"},{"location":"reference/exchange/ccxt/ccxt/#lettrade.exchange.ccxt.ccxt.CCXTExchange.history_positions","title":"history_positions  <code>instance-attribute</code>","text":"<pre><code>history_positions: dict[str, Position] = dict()\n</code></pre> <p>History Position dict by <code>Position.id</code> key</p>"},{"location":"reference/exchange/ccxt/ccxt/#lettrade.exchange.ccxt.ccxt.CCXTExchange.orders","title":"orders  <code>instance-attribute</code>","text":"<pre><code>orders: dict[str, Order] = dict()\n</code></pre> <p>Available Order dict by <code>Order.id</code> key</p>"},{"location":"reference/exchange/ccxt/ccxt/#lettrade.exchange.ccxt.ccxt.CCXTExchange.positions","title":"positions  <code>instance-attribute</code>","text":"<pre><code>positions: dict[str, Position] = dict()\n</code></pre> <p>Available Position dict by <code>Position.id</code> key</p>"},{"location":"reference/exchange/ccxt/ccxt/#lettrade.exchange.ccxt.ccxt.CCXTExchange.init","title":"init","text":"<pre><code>init(\n    brain: Brain,\n    feeder: DataFeeder,\n    account: Account,\n    commander: Commander,\n) -&gt; None\n</code></pre> <p>Init Exchange dependencies. Set data/datas from feeder. Set state to <code>ExchangeState.Start</code>.</p> <p>Parameters:</p> <ul> <li> <code>brain</code>               (<code>Brain</code>)           \u2013            <p>description</p> </li> <li> <code>feeder</code>               (<code>DataFeeder</code>)           \u2013            <p>description</p> </li> <li> <code>account</code>               (<code>Account</code>)           \u2013            <p>description</p> </li> <li> <code>commander</code>               (<code>Commander</code>)           \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def init(\n    self,\n    brain: \"Brain\",\n    feeder: DataFeeder,\n    account: Account,\n    commander: Commander,\n) -&gt; None:\n    \"\"\"Init Exchange dependencies.\n    Set data/datas from feeder.\n    Set state to `ExchangeState.Start`.\n\n    Args:\n        brain (Brain): _description_\n        feeder (DataFeeder): _description_\n        account (Account): _description_\n        commander (Commander): _description_\n    \"\"\"\n    self._brain = brain\n    self._feeder = feeder\n    self._account = account\n    self._commander = commander\n\n    self.data = self._feeder.data\n    self.datas = self._feeder.datas\n\n    self._account.init(exchange=self)\n\n    self._state = ExchangeState.Start\n</code></pre>"},{"location":"reference/exchange/ccxt/ccxt/#lettrade.exchange.ccxt.ccxt.CCXTExchange.new_order","title":"new_order","text":"<pre><code>new_order(\n    size: float,\n    type: OrderType | None = OrderType.Market,\n    limit: float | None = None,\n    stop: float | None = None,\n    sl: float | None = None,\n    tp: float | None = None,\n    tag: str | None = None,\n    data: DataFeed | None = None,\n    **kwargs\n) -&gt; OrderResult\n</code></pre> <p>Place new order to server</p> <p>Parameters:</p> <ul> <li> <code>size</code>               (<code>float</code>)           \u2013            <p>description</p> </li> <li> <code>type</code>               (<code>OrderType | None</code>, default:                   <code>Market</code> )           \u2013            <p>description. Defaults to OrderType.Market.</p> </li> <li> <code>limit</code>               (<code>float | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>stop</code>               (<code>float | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>sl</code>               (<code>float | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>tp</code>               (<code>float | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>tag</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>data</code>               (<code>DataFeed | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>OrderResult</code> (              <code>OrderResult</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/live/exchange.py</code> <pre><code>def new_order(\n    self,\n    size: float,\n    type: OrderType | None = OrderType.Market,\n    limit: float | None = None,\n    stop: float | None = None,\n    sl: float | None = None,\n    tp: float | None = None,\n    tag: str | None = None,\n    data: DataFeed | None = None,\n    **kwargs,\n) -&gt; OrderResult:\n    \"\"\"Place new order to server\n\n    Args:\n        size (float): _description_\n        type (OrderType | None, optional): _description_. Defaults to OrderType.Market.\n        limit (float | None, optional): _description_. Defaults to None.\n        stop (float | None, optional): _description_. Defaults to None.\n        sl (float | None, optional): _description_. Defaults to None.\n        tp (float | None, optional): _description_. Defaults to None.\n        tag (str | None, optional): _description_. Defaults to None.\n        data (DataFeed | None, optional): _description_. Defaults to None.\n\n    Returns:\n        OrderResult: _description_\n    \"\"\"\n    if not data:\n        data = self.data\n\n    if type == OrderType.Market:\n        limit = 0\n        stop = 0\n\n    order = self._order_cls(\n        id=-1,\n        exchange=self,\n        data=data,\n        size=size,\n        type=type,\n        limit_price=limit,\n        stop_price=stop,\n        sl_price=sl,\n        tp_price=tp,\n        tag=tag,\n        **kwargs,\n    )\n    ok = order.place()\n\n    # if __debug__:\n    #     logger.info(\"New order %s at %s\", order, self.data.now)\n\n    return ok\n</code></pre>"},{"location":"reference/exchange/ccxt/ccxt/#lettrade.exchange.ccxt.ccxt.CCXTExchange.next_next","title":"next_next","text":"<pre><code>next_next()\n</code></pre> <p>Call after strategy.next()</p> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def next_next(self):\n    \"\"\"Call after strategy.next()\"\"\"\n    self._account.next_next()\n</code></pre>"},{"location":"reference/exchange/ccxt/ccxt/#lettrade.exchange.ccxt.ccxt.CCXTExchange.on_execution","title":"on_execution","text":"<pre><code>on_execution(\n    execution: Execution,\n    broadcast: bool | None = True,\n    **kwargs\n) -&gt; None\n</code></pre> <p>Receive Execution event from exchange then store and notify Brain</p> <p>Parameters:</p> <ul> <li> <code>execution</code>               (<code>Execution</code>)           \u2013            <p>description</p> </li> <li> <code>broadcast</code>               (<code>bool | None</code>, default:                   <code>True</code> )           \u2013            <p>description. Defaults to True.</p> </li> </ul> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def on_execution(\n    self,\n    execution: Execution,\n    broadcast: bool | None = True,\n    **kwargs,\n) -&gt; None:\n    \"\"\"Receive Execution event from exchange then store and notify Brain\n\n    Args:\n        execution (Execution): _description_\n        broadcast (bool | None, optional): _description_. Defaults to True.\n    \"\"\"\n    self.on_executions(executions=[execution], broadcast=broadcast, **kwargs)\n</code></pre>"},{"location":"reference/exchange/ccxt/ccxt/#lettrade.exchange.ccxt.ccxt.CCXTExchange.on_executions","title":"on_executions","text":"<pre><code>on_executions(\n    executions: list[Execution],\n    broadcast: bool | None = True,\n    **kwargs\n) -&gt; None\n</code></pre> <p>Receive Execution event from exchange then store and notify Brain</p> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def on_executions(\n    self,\n    executions: list[Execution],\n    broadcast: bool | None = True,\n    **kwargs,\n) -&gt; None:\n    \"\"\"\n    Receive Execution event from exchange then store and notify Brain\n    \"\"\"\n    for execution in executions:\n        if not isinstance(execution, Execution):\n            raise RuntimeError(f\"{execution} is not instance of type Execution\")\n\n        if execution.id in self.executions:\n            # Merge to keep Execution handler for strategy using\n            # when strategy want to store Execution object\n            # and object will be automatic update directly\n            self.executions[execution.id].merge(execution)\n            execution = self.executions[execution.id]\n        else:\n            self.executions[execution.id] = execution\n\n    if self._state != ExchangeState.Run:\n        return\n\n    if broadcast:\n        self._brain.on_executions(executions)\n</code></pre>"},{"location":"reference/exchange/ccxt/ccxt/#lettrade.exchange.ccxt.ccxt.CCXTExchange.on_order","title":"on_order","text":"<pre><code>on_order(\n    order: Order, broadcast: bool | None = True, **kwargs\n) -&gt; None\n</code></pre> <p>Receive order event from exchange then store and notify Brain</p> <p>Parameters:</p> <ul> <li> <code>order</code>               (<code>Order</code>)           \u2013            <p>description</p> </li> <li> <code>broadcast</code>               (<code>bool | None</code>, default:                   <code>True</code> )           \u2013            <p>description. Defaults to True.</p> </li> </ul> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def on_order(\n    self,\n    order: Order,\n    broadcast: bool | None = True,\n    **kwargs,\n) -&gt; None:\n    \"\"\"Receive order event from exchange then store and notify Brain\n\n    Args:\n        order (Order): _description_\n        broadcast (bool | None, optional): _description_. Defaults to True.\n    \"\"\"\n    self.on_orders(orders=[order], broadcast=broadcast, **kwargs)\n</code></pre>"},{"location":"reference/exchange/ccxt/ccxt/#lettrade.exchange.ccxt.ccxt.CCXTExchange.on_orders","title":"on_orders","text":"<pre><code>on_orders(\n    orders: list[Order],\n    broadcast: bool | None = True,\n    **kwargs\n) -&gt; None\n</code></pre> <p>Receive orders event from exchange then store and notify Brain</p> <p>Parameters:</p> <ul> <li> <code>orders</code>               (<code>list[Order]</code>)           \u2013            <p>description</p> </li> <li> <code>broadcast</code>               (<code>bool | None</code>, default:                   <code>True</code> )           \u2013            <p>description. Defaults to True.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def on_orders(\n    self,\n    orders: list[Order],\n    broadcast: bool | None = True,\n    **kwargs,\n) -&gt; None:\n    \"\"\"Receive orders event from exchange then store and notify Brain\n\n    Args:\n        orders (list[Order]): _description_\n        broadcast (bool | None, optional): _description_. Defaults to True.\n\n    Raises:\n        RuntimeError: _description_\n    \"\"\"\n    for order in orders:\n        if not isinstance(order, Order):\n            raise RuntimeError(f\"{order} is not instance of type Order\")\n\n        if order.is_closed:\n            if order.id in self.history_orders:\n                logger.warning(\"Order closed recall: %s\", order)\n\n            self.history_orders[order.id] = order\n            if order.id in self.orders:\n                del self.orders[order.id]\n        else:\n            if order.id in self.history_orders:\n                raise RuntimeError(f\"Order {order.id} closed\")\n\n            if order.id in self.orders:\n                # Merge to keep Order handler for strategy using\n                # when strategy want to store Order object\n                # and object will be automatic update directly\n                self.orders[order.id].merge(order)\n                order = self.orders[order.id]\n            else:\n                self.orders[order.id] = order\n\n    if self._state != ExchangeState.Run:\n        return\n\n    if broadcast:\n        self._brain.on_orders(orders)\n</code></pre>"},{"location":"reference/exchange/ccxt/ccxt/#lettrade.exchange.ccxt.ccxt.CCXTExchange.on_position","title":"on_position","text":"<pre><code>on_position(\n    position: Position,\n    broadcast: bool | None = True,\n    **kwargs\n) -&gt; None\n</code></pre> <p>Receive Position event from exchange then store and notify Brain</p> <p>Parameters:</p> <ul> <li> <code>position</code>               (<code>Position</code>)           \u2013            <p>new comming <code>Position</code></p> </li> <li> <code>broadcast</code>               (<code>bool | None</code>, default:                   <code>True</code> )           \u2013            <p>Flag notify to Brain. Defaults to True.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>validate <code>Position</code> instance</p> </li> </ul> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def on_position(\n    self,\n    position: Position,\n    broadcast: bool | None = True,\n    **kwargs,\n) -&gt; None:\n    \"\"\"Receive Position event from exchange then store and notify Brain\n\n    Args:\n        position (Position): new comming `Position`\n        broadcast (bool | None, optional): Flag notify to Brain. Defaults to True.\n\n    Raises:\n        RuntimeError: validate `Position` instance\n    \"\"\"\n    self.on_positions(positions=[position], broadcast=broadcast, **kwargs)\n</code></pre>"},{"location":"reference/exchange/ccxt/ccxt/#lettrade.exchange.ccxt.ccxt.CCXTExchange.on_positions","title":"on_positions","text":"<pre><code>on_positions(\n    positions: list[Position],\n    broadcast: bool | None = True,\n    **kwargs\n) -&gt; None\n</code></pre> <p>Receive Positions event from exchange then store and notify Brain</p> <p>Parameters:</p> <ul> <li> <code>positions</code>               (<code>list[Position]</code>)           \u2013            <p>list of new comming <code>Position</code></p> </li> <li> <code>broadcast</code>               (<code>bool | None</code>, default:                   <code>True</code> )           \u2013            <p>Flag notify to Brain. Defaults to True.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>validate <code>Position</code> instance</p> </li> </ul> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def on_positions(\n    self,\n    positions: list[Position],\n    broadcast: bool | None = True,\n    **kwargs,\n) -&gt; None:\n    \"\"\"Receive Positions event from exchange then store and notify Brain\n\n    Args:\n        positions (list[Position]): list of new comming `Position`\n        broadcast (bool | None, optional): Flag notify to Brain. Defaults to True.\n\n    Raises:\n        RuntimeError: validate `Position` instance\n    \"\"\"\n    for position in positions:\n        if not isinstance(position, Position):\n            raise RuntimeError(f\"{position} is not instance of type Position\")\n\n        if position.is_exited:\n            if position.id in self.history_positions:\n                logger.warning(\"Position exited recall: %s\", position)\n\n            self.history_positions[position.id] = position\n            if position.id in self.positions:\n                del self.positions[position.id]\n\n            # self._account._on_position_exit(position)\n        else:\n            if position.id in self.history_positions:\n                raise RuntimeError(f\"Position {position.id} closed: {position}\")\n            if position.id in self.positions:\n                # Merge to keep Position handler for strategy using\n                # when strategy want to store Position object\n                # and object will be automatic update directly\n                self.positions[position.id].merge(position)\n                position = self.positions[position.id]\n            else:\n                self.positions[position.id] = position\n                # self._account._on_position_entry(position)\n\n    self._account.on_positions(positions)\n\n    if self._state != ExchangeState.Run:\n        return\n\n    if broadcast:\n        self._brain.on_positions(positions)\n</code></pre>"},{"location":"reference/exchange/ccxt/ccxt/#lettrade.exchange.ccxt.ccxt.CCXTExchange.start","title":"start","text":"<pre><code>start() -&gt; None\n</code></pre> <p>Start Live exchange by: Sync positions from server</p> Source code in <code>lettrade/exchange/live/exchange.py</code> <pre><code>def start(self) -&gt; None:\n    \"\"\"Start Live exchange by: Sync positions from server\"\"\"\n    self._api.start(exchange=self)\n    return super().start()\n</code></pre>"},{"location":"reference/exchange/ccxt/ccxt/#lettrade.exchange.ccxt.ccxt.CCXTExchange.stop","title":"stop","text":"<pre><code>stop() -&gt; None\n</code></pre> <p>Stop Exchange</p> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def stop(self) -&gt; None:\n    \"\"\"Stop Exchange\"\"\"\n    self._state = ExchangeState.Stop\n    self._account.stop()\n</code></pre>"},{"location":"reference/exchange/ccxt/ccxt/#lettrade.exchange.ccxt.ccxt.LetTradeCCXT","title":"LetTradeCCXT","text":"<pre><code>LetTradeCCXT(\n    feeder: type[CCXTDataFeeder] = CCXTDataFeeder,\n    exchange: type[CCXTExchange] = CCXTExchange,\n    account: type[CCXTAccount] = CCXTAccount,\n    **kwargs\n)\n</code></pre> <p>               Bases: <code>LetTradeLive</code></p> <p>Help to maintain CCXT bots</p> <p>Parameters:</p> <ul> <li> <code>feeder</code>               (<code>Type[CCXTDataFeeder]</code>, default:                   <code>CCXTDataFeeder</code> )           \u2013            <p>description. Defaults to CCXTDataFeeder.</p> </li> <li> <code>exchange</code>               (<code>Type[CCXTExchange]</code>, default:                   <code>CCXTExchange</code> )           \u2013            <p>description. Defaults to CCXTExchange.</p> </li> <li> <code>account</code>               (<code>Type[CCXTAccount]</code>, default:                   <code>CCXTAccount</code> )           \u2013            <p>description. Defaults to CCXTAccount.</p> </li> </ul> Source code in <code>lettrade/exchange/ccxt/ccxt.py</code> <pre><code>def __init__(\n    self,\n    feeder: type[CCXTDataFeeder] = CCXTDataFeeder,\n    exchange: type[CCXTExchange] = CCXTExchange,\n    account: type[CCXTAccount] = CCXTAccount,\n    **kwargs,\n) -&gt; None:\n    \"\"\"_summary_\n\n    Args:\n        feeder (Type[CCXTDataFeeder], optional): _description_. Defaults to CCXTDataFeeder.\n        exchange (Type[CCXTExchange], optional): _description_. Defaults to CCXTExchange.\n        account (Type[CCXTAccount], optional): _description_. Defaults to CCXTAccount.\n    \"\"\"\n    super().__init__(\n        feeder=feeder,\n        exchange=exchange,\n        account=account,\n        **kwargs,\n    )\n</code></pre>"},{"location":"reference/exchange/ccxt/ccxt/#lettrade.exchange.ccxt.ccxt.LetTradeCCXT.plot","title":"plot","text":"<pre><code>plot(*args, jump: dict | None = None, **kwargs)\n</code></pre> <p>Plot strategy/optimize result</p> BotPlotter <p>Miror of BotPlotter.plot(). Plotly implement PlotlyBotPlotter.plot().</p> <p>Args:     <code>jump</code> (dict | None, optional): Miror of BotPlotter.jump()</p> <p>Example:     Jump to position_id         <pre><code>lt.plot(\n    jump=dict(position_id=1, range=300),\n    layout=dict(height=2000),\n)\n</code></pre></p> OptimizePlotter <p>Miror of OptimizePlotter.plot(). Plotly implement PlotlyOptimizePlotter.plot().</p> <p>Example:         <pre><code>lt.plot(layout=dict(height=2000))\n</code></pre></p> Source code in <code>lettrade/lettrade.py</code> <pre><code>def plot(self, *args, jump: dict | None = None, **kwargs):\n    \"\"\"Plot strategy/optimize result\n\n    BotPlotter:\n        Miror of [BotPlotter.plot()](site:/reference/plot/bot/#lettrade.plot.bot.BotPlotter.plot).\n        Plotly implement [PlotlyBotPlotter.plot()](site:/reference/plot/plotly/plotly/#lettrade.plot.plotly.plotly.PlotlyBotPlotter.plot).\n\n        Args:\n            `jump` (dict | None, optional): Miror of [BotPlotter.jump()](site:/reference/plot/bot/#lettrade.plot.bot.BotPlotter.jump)\n\n        Example:\n            Jump to position_id\n                ```python\n                lt.plot(\n                    jump=dict(position_id=1, range=300),\n                    layout=dict(height=2000),\n                )\n                ```\n\n    OptimizePlotter:\n        Miror of [OptimizePlotter.plot()](site:/reference/plot/optimize/#lettrade.plot.optimize.OptimizePlotter.plot).\n        Plotly implement [PlotlyOptimizePlotter.plot()](site:/reference/exchange/backtest/plotly/optimize/#lettrade.exchange.backtest.plotly.optimize.PlotlyOptimizePlotter.plot).\n\n        Example:\n                ```python\n                lt.plot(layout=dict(height=2000))\n                ```\n    \"\"\"\n    if __debug__:\n        from .utils.docs import is_docs_session\n\n        if is_docs_session():\n            return\n\n    self.plotter.plot(*args, jump=jump, **kwargs)\n</code></pre>"},{"location":"reference/exchange/ccxt/ccxt/#lettrade.exchange.ccxt.ccxt.LetTradeCCXT.run","title":"run","text":"<pre><code>run(worker: int | None = None, **kwargs)\n</code></pre> <p>Run LetTrade in single or multiple processing</p> <p>Parameters:</p> <ul> <li> <code>worker</code>               (<code>int | None</code>, default:                   <code>None</code> )           \u2013            <p>Number of processing. Defaults to None.</p> </li> </ul> Source code in <code>lettrade/lettrade.py</code> <pre><code>def run(self, worker: int | None = None, **kwargs):\n    \"\"\"Run LetTrade in single or multiple processing\n\n    Args:\n        worker (int | None, optional): Number of processing. Defaults to None.\n    \"\"\"\n    if worker or isinstance(self.data, list):\n        if not isinstance(self.data, list):\n            # self.data = self.datas\n            self.datas = [self.data]\n\n        worker = self._max_workers(worker)\n\n        self._multiprocess()\n\n        datas_source = self._kwargs.pop(\"datas\")\n        with ProcessPoolExecutor(max_workers=worker) as executor:\n            futures = [\n                executor.submit(\n                    self._bot_cls.run_bot,\n                    datas=datas,\n                    id=i,\n                    result=\"str\",\n                    **self._kwargs,\n                )\n                for i, datas in enumerate(datas_source)\n            ]\n            for future in futures:\n                result = future.result()\n                print(result)\n    else:\n        self._bot = self._bot_cls.run_bot(\n            bot=self._bot,\n            result=\"bot\",\n            **self._kwargs,\n        )\n        print(str(self._bot.stats))\n</code></pre>"},{"location":"reference/exchange/ccxt/ccxt/#lettrade.exchange.ccxt.ccxt.LetTradeCCXT.start","title":"start","text":"<pre><code>start(force: bool = False)\n</code></pre> <p>Start LetTrade by init bot object and loading datafeeds</p> <p>Parameters:</p> <ul> <li> <code>force</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>description. Defaults to False.</p> </li> </ul> Source code in <code>lettrade/lettrade.py</code> <pre><code>def start(self, force: bool = False):\n    \"\"\"Start LetTrade by init bot object and loading datafeeds\n\n    Args:\n        force (bool, optional): _description_. Defaults to False.\n    \"\"\"\n    if force and self._bot is not None:\n        self._bot = None\n\n    self._bot = self._bot_cls.start_bot(bot=self._bot, **self._kwargs)\n</code></pre>"},{"location":"reference/exchange/ccxt/ccxt/#lettrade.exchange.ccxt.ccxt.LetTradeCCXT.stop","title":"stop","text":"<pre><code>stop()\n</code></pre> <p>Stop LetTrade</p> Source code in <code>lettrade/lettrade.py</code> <pre><code>def stop(self):\n    \"\"\"Stop LetTrade\"\"\"\n    if self._bot is not None:\n        return self._bot.stop()\n    if self.stats:\n        self.stats.stop()\n</code></pre>"},{"location":"reference/exchange/ccxt/ccxt/#lettrade.exchange.ccxt.ccxt.LetTradeCCXTBot","title":"LetTradeCCXTBot","text":"<pre><code>LetTradeCCXTBot(api: LiveAPI | None = LiveAPI, **kwargs)\n</code></pre> <p>               Bases: <code>LetTradeLiveBot</code></p> <p>LetTradeBot for CCXT</p> <p>Parameters:</p> <ul> <li> <code>api</code>               (<code>LiveAPI | None</code>, default:                   <code>LiveAPI</code> )           \u2013            <p>description. Defaults to LiveAPI.</p> </li> </ul> Source code in <code>lettrade/exchange/live/live.py</code> <pre><code>def __init__(self, api: LiveAPI | None = LiveAPI, **kwargs) -&gt; None:\n    \"\"\"_summary_\n\n    Args:\n        api (LiveAPI | None, optional): _description_. Defaults to LiveAPI.\n    \"\"\"\n    super().__init__(**kwargs)\n\n    if issubclass(api, LiveAPI):\n        self._api = api(**self._kwargs.get(\"api_kwargs\", {}))\n    else:\n        self._api = api\n\n    self._kwargs.setdefault(\"feeder_kwargs\", dict()).update(api=self._api)\n    self._kwargs.setdefault(\"exchange_kwargs\", dict()).update(api=self._api)\n    self._kwargs.setdefault(\"account_kwargs\", dict()).update(api=self._api)\n\n    for data in self.datas:\n        data._api = self._api\n</code></pre>"},{"location":"reference/exchange/ccxt/ccxt/#lettrade.exchange.ccxt.ccxt.let_ccxt","title":"let_ccxt","text":"<pre><code>let_ccxt(\n    datas: set[set[str]],\n    strategy: type[Strategy],\n    *,\n    ccxt_exchange: str,\n    ccxt_key: str,\n    ccxt_secret: str,\n    ccxt_type: Literal[\"spot\", \"margin\", \"future\"] = \"spot\",\n    ccxt_verbose: bool = False,\n    feeder: type[CCXTDataFeeder] = CCXTDataFeeder,\n    exchange: type[CCXTExchange] = CCXTExchange,\n    account: type[CCXTAccount] = CCXTAccount,\n    commander: type[Commander] | None = None,\n    stats: type[BotStatistic] | None = BotStatistic,\n    plotter: type[Plotter] | None = None,\n    bot: type[LetTradeCCXTBot] | None = LetTradeCCXTBot,\n    lettrade: type[LetTradeCCXT] | None = LetTradeCCXT,\n    api: type[CCXTAPI] | None = CCXTAPI,\n    **kwargs\n) -&gt; LetTradeCCXT\n</code></pre> <p>Help to build <code>LetTradeCCXT</code></p> <p>Parameters:</p> <ul> <li> <code>datas</code>               (<code>set[set[str]]</code>)           \u2013            <p>description</p> </li> <li> <code>strategy</code>               (<code>Type[Strategy]</code>)           \u2013            <p>description</p> </li> <li> <code>ccxt_exchange</code>               (<code>str</code>)           \u2013            <p>description</p> </li> <li> <code>ccxt_key</code>               (<code>str</code>)           \u2013            <p>description</p> </li> <li> <code>ccxt_secret</code>               (<code>str</code>)           \u2013            <p>description</p> </li> <li> <code>ccxt_type</code>               (<code>Literal['spot', 'margin', 'future']</code>, default:                   <code>'spot'</code> )           \u2013            <p>description. Defaults to \"spot\".</p> </li> <li> <code>ccxt_verbose</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>description. Defaults to False.</p> </li> <li> <code>feeder</code>               (<code>Type[CCXTDataFeeder]</code>, default:                   <code>CCXTDataFeeder</code> )           \u2013            <p>description. Defaults to CCXTDataFeeder.</p> </li> <li> <code>exchange</code>               (<code>Type[CCXTExchange]</code>, default:                   <code>CCXTExchange</code> )           \u2013            <p>description. Defaults to CCXTExchange.</p> </li> <li> <code>account</code>               (<code>Type[CCXTAccount]</code>, default:                   <code>CCXTAccount</code> )           \u2013            <p>description. Defaults to CCXTAccount.</p> </li> <li> <code>commander</code>               (<code>Type[Commander] | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>stats</code>               (<code>Type[BotStatistic] | None</code>, default:                   <code>BotStatistic</code> )           \u2013            <p>description. Defaults to BotStatistic.</p> </li> <li> <code>plotter</code>               (<code>Type[Plotter] | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>bot</code>               (<code>Type[LetTradeCCXTBot] | None</code>, default:                   <code>LetTradeCCXTBot</code> )           \u2013            <p>description. Defaults to LetTradeCCXTBot.</p> </li> <li> <code>lettrade</code>               (<code>Type[LetTradeCCXT] | None</code>, default:                   <code>LetTradeCCXT</code> )           \u2013            <p>description. Defaults to LetTradeCCXT.</p> </li> <li> <code>api</code>               (<code>Type[CCXTAPI] | None</code>, default:                   <code>CCXTAPI</code> )           \u2013            <p>description. Defaults to CCXTAPI.</p> </li> <li> <code>**kwargs</code>               (<code>dict</code>, default:                   <code>{}</code> )           \u2013            <p>All remaining properties are passed to the constructor of <code>LetTradeLive</code></p> </li> </ul> <p>Returns:</p> <ul> <li> <code>LetTradeCCXT</code> (              <code>LetTradeCCXT</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/ccxt/ccxt.py</code> <pre><code>def let_ccxt(\n    datas: set[set[str]],\n    strategy: type[Strategy],\n    *,\n    ccxt_exchange: str,\n    ccxt_key: str,\n    ccxt_secret: str,\n    ccxt_type: Literal[\"spot\", \"margin\", \"future\"] = \"spot\",\n    ccxt_verbose: bool = False,\n    feeder: type[CCXTDataFeeder] = CCXTDataFeeder,\n    exchange: type[CCXTExchange] = CCXTExchange,\n    account: type[CCXTAccount] = CCXTAccount,\n    commander: type[Commander] | None = None,\n    stats: type[BotStatistic] | None = BotStatistic,\n    plotter: type[Plotter] | None = None,\n    bot: type[LetTradeCCXTBot] | None = LetTradeCCXTBot,\n    lettrade: type[LetTradeCCXT] | None = LetTradeCCXT,\n    api: type[CCXTAPI] | None = CCXTAPI,\n    **kwargs,\n) -&gt; LetTradeCCXT:\n    \"\"\"Help to build `LetTradeCCXT`\n\n    Args:\n        datas (set[set[str]]): _description_\n        strategy (Type[Strategy]): _description_\n        ccxt_exchange (str): _description_\n        ccxt_key (str): _description_\n        ccxt_secret (str): _description_\n        ccxt_type (Literal[\"spot\", \"margin\", \"future\"], optional): _description_. Defaults to \"spot\".\n        ccxt_verbose (bool, optional): _description_. Defaults to False.\n        feeder (Type[CCXTDataFeeder], optional): _description_. Defaults to CCXTDataFeeder.\n        exchange (Type[CCXTExchange], optional): _description_. Defaults to CCXTExchange.\n        account (Type[CCXTAccount], optional): _description_. Defaults to CCXTAccount.\n        commander (Type[Commander] | None, optional): _description_. Defaults to None.\n        stats (Type[BotStatistic] | None, optional): _description_. Defaults to BotStatistic.\n        plotter (Type[Plotter] | None, optional): _description_. Defaults to None.\n        bot (Type[LetTradeCCXTBot] | None, optional): _description_. Defaults to LetTradeCCXTBot.\n        lettrade (Type[LetTradeCCXT] | None, optional): _description_. Defaults to LetTradeCCXT.\n        api (Type[CCXTAPI] | None, optional): _description_. Defaults to CCXTAPI.\n        **kwargs (dict): All remaining properties are passed to the constructor of `LetTradeLive`\n\n    Returns:\n        LetTradeCCXT: _description_\n    \"\"\"\n    api_kwargs: dict = kwargs.setdefault(\"api_kwargs\", {})\n    api_kwargs.update(\n        exchange=ccxt_exchange,\n        key=ccxt_key,\n        secret=ccxt_secret,\n        type=ccxt_type,\n        verbose=ccxt_verbose,\n    )\n\n    return let_live(\n        strategy=strategy,\n        datas=datas,\n        feeder=feeder,\n        exchange=exchange,\n        account=account,\n        commander=commander,\n        plotter=plotter,\n        stats=stats,\n        bot=bot,\n        lettrade=lettrade,\n        api=api,\n        **kwargs,\n    )\n</code></pre>"},{"location":"reference/exchange/ccxt/trade/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> trade","text":""},{"location":"reference/exchange/ccxt/trade/#lettrade.exchange.ccxt.trade","title":"trade","text":""},{"location":"reference/exchange/ccxt/trade/#lettrade.exchange.ccxt.trade.CCXTExecution","title":"CCXTExecution","text":"<pre><code>CCXTExecution(\n    id: str,\n    exchange: LiveExchange,\n    data: LiveDataFeed,\n    size: float,\n    price: float,\n    at: float,\n    order_id: str | None = None,\n    order: Order | None = None,\n    position_id: str | None = None,\n    position: Position | None = None,\n    api: LiveAPI | None = None,\n    raw: object | None = None,\n    **kwargs\n)\n</code></pre> <p>               Bases: <code>LiveExecution</code></p> <p>Execution for CCXT</p> Source code in <code>lettrade/exchange/live/trade.py</code> <pre><code>def __init__(\n    self,\n    id: str,\n    exchange: \"LiveExchange\",\n    data: \"LiveDataFeed\",\n    size: float,\n    price: float,\n    at: float,\n    order_id: str | None = None,\n    order: \"Order | None\" = None,\n    position_id: str | None = None,\n    position: \"Position | None\" = None,\n    # tag: str | None = None,\n    api: LiveAPI | None = None,\n    raw: object | None = None,\n    **kwargs,\n):\n    super().__init__(\n        id=id,\n        exchange=exchange,\n        data=data,\n        size=size,\n        price=price,\n        at=at,\n        order_id=order_id,\n        order=order,\n        position_id=position_id,\n        position=position,\n        api=api,\n        raw=raw,\n        **kwargs,\n    )\n</code></pre>"},{"location":"reference/exchange/ccxt/trade/#lettrade.exchange.ccxt.trade.CCXTExecution.is_long","title":"is_long  <code>property</code>","text":"<pre><code>is_long: bool\n</code></pre> <p>True if side is long (size is positive).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True/False</p> </li> </ul>"},{"location":"reference/exchange/ccxt/trade/#lettrade.exchange.ccxt.trade.CCXTExecution.is_short","title":"is_short  <code>property</code>","text":"<pre><code>is_short: bool\n</code></pre> <p>True if side is short (size is negative).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/ccxt/trade/#lettrade.exchange.ccxt.trade.CCXTExecution.side","title":"side  <code>property</code>","text":"<pre><code>side: TradeSide\n</code></pre> <p>True if side is short (size is negative).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>TradeSide</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/ccxt/trade/#lettrade.exchange.ccxt.trade.CCXTExecution.from_raw","title":"from_raw  <code>classmethod</code>","text":"<pre><code>from_raw(\n    raw, exchange: LiveExchange, api: CCXTAPI = None\n) -&gt; CCXTExecution\n</code></pre> <p>Building new CCXTExecution from live api raw object</p> <p>Parameters:</p> <ul> <li> <code>raw</code>               (<code>_type_</code>)           \u2013            <p>description</p> </li> <li> <code>exchange</code>               (<code>LiveExchange</code>)           \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>CCXTExecution</code> (              <code>CCXTExecution</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/ccxt/trade.py</code> <pre><code>@classmethod\ndef from_raw(\n    cls,\n    raw,\n    exchange: \"LiveExchange\",\n    api: CCXTAPI = None,\n) -&gt; \"CCXTExecution\":\n    \"\"\"Building new CCXTExecution from live api raw object\n\n    Args:\n        raw (_type_): _description_\n        exchange (LiveExchange): _description_\n\n    Returns:\n        CCXTExecution: _description_\n    \"\"\"\n\n    return cls(\n        exchange=exchange,\n        id=raw.ticket,\n        # TODO: Fix by get data from symbol\n        data=exchange.data,\n        # TODO: size and type from raw.type\n        size=raw.volume,\n        price=raw.price,\n        # TODO: set bar time\n        at=None,\n        order_id=raw.order,\n        position_id=raw.position_id,\n        tag=raw.comment,\n        api=api,\n        raw=raw,\n    )\n</code></pre>"},{"location":"reference/exchange/ccxt/trade/#lettrade.exchange.ccxt.trade.CCXTExecution.merge","title":"merge","text":"<pre><code>merge(other: Execution)\n</code></pre> <p>Merge to keep object handler but not overwrite for Strategy using when Strategy want to store object and object will be automatic update directly</p> Source code in <code>lettrade/exchange/execution.py</code> <pre><code>def merge(self, other: \"Execution\"):\n    \"\"\"\n    Merge to keep object handler but not overwrite for Strategy using when Strategy want to store object and object will be automatic update directly\n    \"\"\"\n    if other is self:\n        return\n\n    if self.id != other.id:\n        raise RuntimeError(f\"Merge difference id {self.id} != {other.id} execution\")\n\n    self.price = other.price\n    self.size = other.size\n\n    if other.at:\n        self.at = other.at\n    if other.order_id:\n        self.order_id = other.order_id\n    if other.order:\n        self.order = other.order\n    if other.position_id:\n        self.position_id = other.position_id\n    if other.position:\n        self.position = other.position\n</code></pre>"},{"location":"reference/exchange/ccxt/trade/#lettrade.exchange.ccxt.trade.CCXTOrder","title":"CCXTOrder","text":"<pre><code>CCXTOrder(is_real: bool = True, **kwargs)\n</code></pre> <p>               Bases: <code>LiveOrder</code></p> <p>Order for CCXT</p> Source code in <code>lettrade/exchange/ccxt/trade.py</code> <pre><code>def __init__(self, is_real: bool = True, **kwargs):\n    super().__init__(**kwargs)\n\n    self.is_real: bool = is_real\n    \"\"\"Flag to check `Order` is real, cannot duplicate id, cannot recall from history\"\"\"\n</code></pre>"},{"location":"reference/exchange/ccxt/trade/#lettrade.exchange.ccxt.trade.CCXTOrder.is_closed","title":"is_closed  <code>property</code>","text":"<pre><code>is_closed: bool\n</code></pre> <p>Flag to check <code>Order</code> closed</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True if <code>state</code> in [OrderState.Filled, OrderState.Canceled]</p> </li> </ul>"},{"location":"reference/exchange/ccxt/trade/#lettrade.exchange.ccxt.trade.CCXTOrder.is_long","title":"is_long  <code>property</code>","text":"<pre><code>is_long: bool\n</code></pre> <p>True if side is long (size is positive).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True/False</p> </li> </ul>"},{"location":"reference/exchange/ccxt/trade/#lettrade.exchange.ccxt.trade.CCXTOrder.is_opening","title":"is_opening  <code>property</code>","text":"<pre><code>is_opening: bool\n</code></pre> <p>Flag to check <code>Order</code> still alive</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True if <code>state</code> in [OrderState.Pending, OrderState.Placed, OrderState.Partial]</p> </li> </ul>"},{"location":"reference/exchange/ccxt/trade/#lettrade.exchange.ccxt.trade.CCXTOrder.is_real","title":"is_real  <code>instance-attribute</code>","text":"<pre><code>is_real: bool = is_real\n</code></pre> <p>Flag to check <code>Order</code> is real, cannot duplicate id, cannot recall from history</p>"},{"location":"reference/exchange/ccxt/trade/#lettrade.exchange.ccxt.trade.CCXTOrder.is_short","title":"is_short  <code>property</code>","text":"<pre><code>is_short: bool\n</code></pre> <p>True if side is short (size is negative).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/ccxt/trade/#lettrade.exchange.ccxt.trade.CCXTOrder.is_sl_order","title":"is_sl_order  <code>property</code>","text":"<pre><code>is_sl_order: bool\n</code></pre> <p><code>Order</code> is stop-loss order of a <code>Position</code></p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/ccxt/trade/#lettrade.exchange.ccxt.trade.CCXTOrder.is_tp_order","title":"is_tp_order  <code>property</code>","text":"<pre><code>is_tp_order: bool\n</code></pre> <p><code>Order</code> is take-profit order of a <code>Position</code></p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/ccxt/trade/#lettrade.exchange.ccxt.trade.CCXTOrder.limit","title":"limit  <code>property</code>","text":"<pre><code>limit: float | None\n</code></pre> <p>Getter of limit_price</p> <p>Returns:</p> <ul> <li> <code>float | None</code>           \u2013            <p>float | None: <code>float</code> or <code>None</code></p> </li> </ul>"},{"location":"reference/exchange/ccxt/trade/#lettrade.exchange.ccxt.trade.CCXTOrder.place_price","title":"place_price  <code>property</code>","text":"<pre><code>place_price: float | None\n</code></pre> <p>Getter of place_price</p> <p>Returns:</p> <ul> <li> <code>float | None</code>           \u2013            <p>float | None: <code>float</code> or <code>None</code></p> </li> </ul>"},{"location":"reference/exchange/ccxt/trade/#lettrade.exchange.ccxt.trade.CCXTOrder.side","title":"side  <code>property</code>","text":"<pre><code>side: TradeSide\n</code></pre> <p>True if side is short (size is negative).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>TradeSide</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/ccxt/trade/#lettrade.exchange.ccxt.trade.CCXTOrder.sl","title":"sl  <code>property</code>","text":"<pre><code>sl: float | None\n</code></pre> <p>Getter of sl_price</p> <p>Returns:</p> <ul> <li> <code>float | None</code>           \u2013            <p>float | None: <code>float</code> or <code>None</code></p> </li> </ul>"},{"location":"reference/exchange/ccxt/trade/#lettrade.exchange.ccxt.trade.CCXTOrder.stop","title":"stop  <code>property</code>","text":"<pre><code>stop: float | None\n</code></pre> <p>Getter of stop_price</p> <p>Returns:</p> <ul> <li> <code>float | None</code>           \u2013            <p>float | None: <code>float</code> or <code>None</code></p> </li> </ul>"},{"location":"reference/exchange/ccxt/trade/#lettrade.exchange.ccxt.trade.CCXTOrder.tp","title":"tp  <code>property</code>","text":"<pre><code>tp: float | None\n</code></pre> <p>Getter of tp_price</p> <p>Returns:</p> <ul> <li> <code>float | None</code>           \u2013            <p>float | None: <code>float</code> or <code>None</code></p> </li> </ul>"},{"location":"reference/exchange/ccxt/trade/#lettrade.exchange.ccxt.trade.CCXTOrder.cancel","title":"cancel","text":"<pre><code>cancel(**kwargs) -&gt; OrderResult\n</code></pre> <p>Cancel order</p> <p>Returns:</p> <ul> <li> <code>OrderResult</code> (              <code>OrderResult</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/ccxt/trade.py</code> <pre><code>def cancel(self, **kwargs) -&gt; OrderResult:\n    \"\"\"Cancel order\n\n    Returns:\n        OrderResult: _description_\n    \"\"\"\n    if not self.parent:\n        # Abandon order\n        result = self._api.order_close(order=self, **kwargs)\n    else:\n        # Virtual SL/TP order of trade\n        result = None\n\n    return super(LiveOrder, self).cancel(raw=result)\n</code></pre>"},{"location":"reference/exchange/ccxt/trade/#lettrade.exchange.ccxt.trade.CCXTOrder.fill","title":"fill","text":"<pre><code>fill(\n    price: float, at: Timestamp, raw: object | None = None\n) -&gt; OrderResult\n</code></pre> <p>Fill <code>Order</code>. Set <code>status</code> to <code>OrderState.Executed</code>. Send event to <code>Exchange</code></p> <p>Parameters:</p> <ul> <li> <code>price</code>               (<code>float</code>)           \u2013            <p>Executed price</p> </li> <li> <code>at</code>               (<code>Timestamp</code>)           \u2013            <p>Executed bar</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>OrderResult</code> (              <code>OrderResult</code> )          \u2013            <p>result of <code>Order</code></p> </li> </ul> Source code in <code>lettrade/exchange/order.py</code> <pre><code>def fill(\n    self,\n    price: float,\n    at: pd.Timestamp,\n    raw: object | None = None,\n) -&gt; \"OrderResult\":\n    \"\"\"Fill `Order`.\n    Set `status` to `OrderState.Executed`.\n    Send event to `Exchange`\n\n    Args:\n        price (float): Executed price\n        at (pd.Timestamp): Executed bar\n\n    Raises:\n        RuntimeError: _description_\n\n    Returns:\n        OrderResult: result of `Order`\n    \"\"\"\n    if self.state != OrderState.Placed:\n        raise RuntimeError(f\"Order {self.id} state {self.state} is not Placed\")\n\n    self.filled_at = at\n    self.filled_price = price\n    self.state = OrderState.Filled\n    self.exchange.on_order(self)\n    return OrderResultOk(order=self, raw=raw)\n</code></pre>"},{"location":"reference/exchange/ccxt/trade/#lettrade.exchange.ccxt.trade.CCXTOrder.from_position","title":"from_position  <code>classmethod</code>","text":"<pre><code>from_position(\n    position: CCXTPosition,\n    sl: float | None = None,\n    tp: float | None = None,\n) -&gt; CCXTOrder\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>position</code>               (<code>CCXTPosition</code>)           \u2013            <p>description</p> </li> <li> <code>sl</code>               (<code>float | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>tp</code>               (<code>float | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>CCXTOrder</code> (              <code>CCXTOrder</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/ccxt/trade.py</code> <pre><code>@classmethod\ndef from_position(\n    cls,\n    position: \"CCXTPosition\",\n    sl: float | None = None,\n    tp: float | None = None,\n) -&gt; \"CCXTOrder\":\n    \"\"\"_summary_\n\n    Args:\n        position (CCXTPosition): _description_\n        sl (float | None, optional): _description_. Defaults to None.\n        tp (float | None, optional): _description_. Defaults to None.\n\n    Raises:\n        RuntimeError: _description_\n\n    Returns:\n        CCXTOrder: _description_\n    \"\"\"\n    if not sl and not tp:\n        raise RuntimeError(\"not sl and not tp\")\n    return cls(\n        id=f\"{position.id}-{'sl' if sl else 'tp'}\",\n        exchange=position.exchange,\n        data=position.data,\n        state=OrderState.Placed,\n        type=OrderType.Stop if sl else OrderType.Limit,\n        size=-position.size,\n        limit_price=tp,\n        stop_price=sl,\n        parent=position,\n        placed_at=position.entry_at,\n        is_real=False,\n    )\n</code></pre>"},{"location":"reference/exchange/ccxt/trade/#lettrade.exchange.ccxt.trade.CCXTOrder.from_raw","title":"from_raw  <code>classmethod</code>","text":"<pre><code>from_raw(\n    raw: Any,\n    exchange: LiveExchange,\n    api: CCXTAPI | None = None,\n) -&gt; CCXTOrder | None\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>raw</code>               (<code>Any</code>)           \u2013            <p>description.</p> </li> <li> <code>exchange</code>               (<code>LiveExchange</code>)           \u2013            <p>description.</p> </li> <li> <code>api</code>               (<code>CCXTAPI | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>NotImplementedError</code>             \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>CCXTOrder</code> (              <code>CCXTOrder | None</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/ccxt/trade.py</code> <pre><code>@classmethod\ndef from_raw(\n    cls,\n    raw: Any,\n    exchange: \"LiveExchange\",\n    api: CCXTAPI | None = None,\n) -&gt; \"CCXTOrder | None\":\n    \"\"\"_summary_\n\n    Args:\n        raw (Any): _description_.\n        exchange (LiveExchange): _description_.\n        api (CCXTAPI | None, optional): _description_. Defaults to None.\n\n    Raises:\n        NotImplementedError: _description_\n\n    Returns:\n        CCXTOrder: _description_\n    \"\"\"\n    # DataFeed\n    data = None\n    for d in exchange.datas:\n        if d.symbol == raw.symbol:\n            data = d\n            break\n    if data is None:\n        logger.warning(\"Raw order %s is not handling %s\", raw.symbol, raw)\n        return\n\n    # Prices &amp; Side &amp; Type\n    limit_price = None\n    stop_price = None\n    match raw.type:\n        case MT5.ORDER_TYPE_BUY:\n            side = TradeSide.Buy\n            type = OrderType.Market\n        case MT5.ORDER_TYPE_SELL:\n            side = TradeSide.Sell\n            type = OrderType.Market\n        case MT5.ORDER_TYPE_BUY_LIMIT:\n            side = TradeSide.Buy\n            type = OrderType.Limit\n            limit_price = raw.price_open\n        case MT5.ORDER_TYPE_SELL_LIMIT:\n            side = TradeSide.Sell\n            type = OrderType.Limit\n            limit_price = raw.price_open\n        case MT5.ORDER_TYPE_BUY_STOP:\n            side = TradeSide.Buy\n            type = OrderType.Stop\n            stop_price = raw.price_open\n        case MT5.ORDER_TYPE_SELL_STOP:\n            side = TradeSide.Sell\n            type = OrderType.Stop\n            stop_price = raw.price_open\n        # case MT5.ORDER_TYPE_BUY_STOP_LIMIT:\n        #     side = TradeSide.Buy\n        #     type = OrderType.StopLimit\n        #     # TODO\n        #     limit_price = raw.price_open\n        #     stop_price = raw.price_open\n        # case MT5.ORDER_TYPE_SELL_STOP_LIMIT:\n        #     side = TradeSide.Sell\n        #     type = OrderType.StopLimit\n        #     # TODO\n        #     limit_price = raw.price_open\n        #     stop_price = raw.price_open\n        # case MT5.ORDER_TYPE_CLOSE_BY:\n        case _:\n            raise NotImplementedError(\n                f\"Order type {raw.type} is not implement\",\n                raw,\n            )\n    # State\n    match raw.state:\n        case MT5.ORDER_STATE_STARTED:\n            state = OrderState.Pending\n        case MT5.ORDER_STATE_PLACED:\n            state = OrderState.Placed\n        case MT5.ORDER_STATE_CANCELED:\n            state = OrderState.Canceled\n        case MT5.ORDER_STATE_PARTIAL:\n            state = OrderState.Partial\n        case MT5.ORDER_STATE_FILLED:\n            state = OrderState.Filled\n        case MT5.ORDER_STATE_REJECTED:\n            state = OrderState.Canceled\n        case MT5.ORDER_STATE_EXPIRED:\n            state = OrderState.Canceled\n        case MT5.ORDER_STATE_REQUEST_ADD:\n            state = OrderState.Placed\n        case MT5.ORDER_STATE_REQUEST_MODIFY:\n            state = OrderState.Placed\n        case MT5.ORDER_STATE_REQUEST_CANCEL:\n            state = OrderState.Canceled\n        case _:\n            raise NotImplementedError(\n                f\"Raw order state {raw.state} is not implement\"\n            )\n\n    order = cls(\n        exchange=exchange,\n        id=raw.ticket,\n        state=state,\n        data=data,\n        size=side * (raw.volume_current or raw.volume_initial),\n        type=type,\n        limit_price=limit_price,\n        stop_price=stop_price,\n        sl_price=raw.sl or None,\n        tp_price=raw.tp or None,\n        tag=raw.comment,\n        placed_at=pd.to_datetime(raw.time_setup_msc, unit=\"ms\", utc=True),\n        api=api,\n        raw=raw,\n    )\n\n    if hasattr(raw, \"time_done_msc\"):\n        order.filled_price = raw.price_current\n        order.filled_at = pd.to_datetime(raw.time_done_msc, unit=\"ms\", utc=True)\n\n    return order\n</code></pre>"},{"location":"reference/exchange/ccxt/trade/#lettrade.exchange.ccxt.trade.CCXTOrder.merge","title":"merge","text":"<pre><code>merge(other: Order)\n</code></pre> <p>Update current <code>Order</code> variables by other <code>Order</code></p> <p>Parameters:</p> <ul> <li> <code>other</code>               (<code>Order</code>)           \u2013            <p>Merge source <code>Order</code></p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>Validate same id</p> </li> </ul> Source code in <code>lettrade/exchange/order.py</code> <pre><code>def merge(self, other: \"Order\"):\n    \"\"\"Update current `Order` variables by other `Order`\n\n    Args:\n        other (Order): Merge source `Order`\n\n    Raises:\n        RuntimeError: Validate same id\n    \"\"\"\n    if other is self:\n        return\n\n    if self.id != other.id:\n        raise RuntimeError(f\"Merge difference id {self.id} != {other.id} order\")\n\n    self.size = other.size\n    self.sl_price = other.sl_price\n    self.tp_price = other.tp_price\n\n    if other.limit_price:\n        self.limit_price = other.limit_price\n    if other.stop_price:\n        self.stop_price = other.stop_price\n    if other.placed_at:\n        self.placed_at = other.placed_at\n\n    if other.filled_price:\n        self.filled_price = other.filled_price\n    if other.filled_at:\n        self.filled_at = other.filled_at\n\n    if other.parent:\n        self.parent = other.parent\n</code></pre>"},{"location":"reference/exchange/ccxt/trade/#lettrade.exchange.ccxt.trade.CCXTOrder.place","title":"place","text":"<pre><code>place() -&gt; OrderResult\n</code></pre> <p>summary</p> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>OrderResult</code> (              <code>OrderResult</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/ccxt/trade.py</code> <pre><code>def place(self) -&gt; OrderResult:\n    \"\"\"_summary_\n\n    Raises:\n        RuntimeError: _description_\n\n    Returns:\n        OrderResult: _description_\n    \"\"\"\n    if self.state != OrderState.Pending:\n        raise RuntimeError(f\"Order {self.id} state {self.state} is not Pending\")\n\n    try:\n        result = self._api.order_open(self)\n\n        self.raw = result\n        self.id = result.order\n\n        # TODO: get current order time\n        return super(LiveOrder, self).place(at=self.data.l.index[0], raw=result)\n    except LetLiveOrderInvalidException as e:\n        error = OrderResultError(\n            error=e.message,\n            order=self,\n            raw=e.raw,\n        )\n        logger.error(\"Place order %s\", str(error))\n        self.exchange.on_notify(error=error)\n        return error\n</code></pre>"},{"location":"reference/exchange/ccxt/trade/#lettrade.exchange.ccxt.trade.CCXTOrder.update","title":"update","text":"<pre><code>update(\n    limit_price: float | None = None,\n    stop_price: float | None = None,\n    sl: float | None = None,\n    tp: float | None = None,\n    caller: float | None = None,\n    **kwargs\n) -&gt; OrderResult\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>limit_price</code>               (<code>float | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>stop_price</code>               (<code>float | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>sl</code>               (<code>float | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>tp</code>               (<code>float | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>caller</code>               (<code>float | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>OrderResult</code> (              <code>OrderResult</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/ccxt/trade.py</code> <pre><code>def update(\n    self,\n    limit_price: float | None = None,\n    stop_price: float | None = None,\n    sl: float | None = None,\n    tp: float | None = None,\n    caller: float | None = None,\n    **kwargs,\n) -&gt; OrderResult:\n    \"\"\"_summary_\n\n    Args:\n        limit_price (float | None, optional): _description_. Defaults to None.\n        stop_price (float | None, optional): _description_. Defaults to None.\n        sl (float | None, optional): _description_. Defaults to None.\n        tp (float | None, optional): _description_. Defaults to None.\n        caller (float | None, optional): _description_. Defaults to None.\n\n    Raises:\n        RuntimeError: _description_\n\n    Returns:\n        OrderResult: _description_\n    \"\"\"\n    if caller is self:\n        raise RuntimeError(f\"Order recusive update {self}\")\n\n    if self.parent is None:\n        result = self._api.order_update(\n            order=self,\n            limit_price=limit_price,\n            stop_price=stop_price,\n            sl=sl,\n            tp=tp,\n            **kwargs,\n        )\n        return super(LiveOrder, self).update(\n            limit_price=result.limit_price,\n            stop_price=result.stop_price,\n            sl=result.sl,\n            tp=result.tp,\n        )\n    else:\n        # SL/TP Order just a virtual order\n        if caller is not self.parent:\n            if self.is_sl_order:\n                self.parent.update(sl=stop_price, caller=self)\n            elif self.is_tp_order:\n                self.parent.update(tp=limit_price, caller=self)\n            else:\n                raise RuntimeError(f\"Abandon order {self}\")\n\n        return super(LiveOrder, self).update(\n            limit_price=limit_price,\n            stop_price=stop_price,\n        )\n</code></pre>"},{"location":"reference/exchange/ccxt/trade/#lettrade.exchange.ccxt.trade.CCXTPosition","title":"CCXTPosition","text":"<pre><code>CCXTPosition(\n    id: str,\n    exchange: LiveExchange,\n    data: LiveDataFeed,\n    size: float,\n    parent: Order,\n    tag: str | None = None,\n    state: PositionState = PositionState.Open,\n    entry_price: float | None = None,\n    entry_fee: float = 0.0,\n    entry_at: int | None = None,\n    sl_order: Order | None = None,\n    tp_order: Order | None = None,\n    api: LiveAPI | None = None,\n    raw: object | None = None,\n    **kwargs\n)\n</code></pre> <p>               Bases: <code>LivePosition</code></p> <p>Position for CCXT</p> Source code in <code>lettrade/exchange/live/trade.py</code> <pre><code>def __init__(\n    self,\n    id: str,\n    exchange: \"LiveExchange\",\n    data: \"LiveDataFeed\",\n    size: float,\n    parent: Order,\n    tag: str | None = None,\n    state: PositionState = PositionState.Open,\n    entry_price: float | None = None,\n    entry_fee: float = 0.0,\n    entry_at: int | None = None,\n    sl_order: Order | None = None,\n    tp_order: Order | None = None,\n    api: LiveAPI | None = None,\n    raw: object | None = None,\n    **kwargs,\n):\n    super().__init__(\n        id=id,\n        exchange=exchange,\n        data=data,\n        size=size,\n        parent=parent,\n        tag=tag,\n        state=state,\n        entry_price=entry_price,\n        entry_fee=entry_fee,\n        entry_at=entry_at,\n        sl_order=sl_order,\n        tp_order=tp_order,\n        api=api,\n        raw=raw,\n        **kwargs,\n    )\n</code></pre>"},{"location":"reference/exchange/ccxt/trade/#lettrade.exchange.ccxt.trade.CCXTPosition.fee","title":"fee  <code>property</code>","text":"<pre><code>fee: float\n</code></pre> <p>Fee/Estimate Fee for trade</p> <p>Returns:</p> <ul> <li> <code>float</code> (              <code>float</code> )          \u2013            <p>Fee</p> </li> </ul>"},{"location":"reference/exchange/ccxt/trade/#lettrade.exchange.ccxt.trade.CCXTPosition.is_exited","title":"is_exited  <code>property</code>","text":"<pre><code>is_exited: bool\n</code></pre> <p>Flag to check Position state.</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True if the trade exited</p> </li> </ul>"},{"location":"reference/exchange/ccxt/trade/#lettrade.exchange.ccxt.trade.CCXTPosition.is_long","title":"is_long  <code>property</code>","text":"<pre><code>is_long: bool\n</code></pre> <p>True if side is long (size is positive).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True/False</p> </li> </ul>"},{"location":"reference/exchange/ccxt/trade/#lettrade.exchange.ccxt.trade.CCXTPosition.is_opening","title":"is_opening  <code>property</code>","text":"<pre><code>is_opening: bool\n</code></pre> <p>Flag to check Position state.</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True if the trade opening</p> </li> </ul>"},{"location":"reference/exchange/ccxt/trade/#lettrade.exchange.ccxt.trade.CCXTPosition.is_short","title":"is_short  <code>property</code>","text":"<pre><code>is_short: bool\n</code></pre> <p>True if side is short (size is negative).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/ccxt/trade/#lettrade.exchange.ccxt.trade.CCXTPosition.pl","title":"pl  <code>property</code>","text":"<pre><code>pl: float\n</code></pre> <p>Estimate Profit or Loss of Position</p> <p>Returns:</p> <ul> <li> <code>float</code> (              <code>float</code> )          \u2013            <p>PnL</p> </li> </ul>"},{"location":"reference/exchange/ccxt/trade/#lettrade.exchange.ccxt.trade.CCXTPosition.side","title":"side  <code>property</code>","text":"<pre><code>side: TradeSide\n</code></pre> <p>True if side is short (size is negative).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>TradeSide</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/ccxt/trade/#lettrade.exchange.ccxt.trade.CCXTPosition.exit","title":"exit","text":"<pre><code>exit() -&gt; PositionResult\n</code></pre> <p>summary</p> <p>Returns:</p> <ul> <li> <code>PositionResult</code> (              <code>PositionResult</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/ccxt/trade.py</code> <pre><code>def exit(self) -&gt; PositionResult:\n    \"\"\"_summary_\n\n    Returns:\n        PositionResult: _description_\n    \"\"\"\n    result = self._api.position_close(position=self)\n    if result.code != 0:\n        logger.error(\"Update position %s\", str(result))\n        error = PositionResultError(\n            error=result.error,\n            position=self,\n            raw=result,\n        )\n        self.exchange.on_notify(error=error)\n        return error\n\n    execution_raw = self._api.execution_get(id=result.execution_id)\n\n    # TODO: execution object and event\n    result.execution_raw = execution_raw\n\n    return super(LivePosition, self).exit(\n        price=result.price,\n        at=pd.to_datetime(execution_raw.time_msc, unit=\"ms\", utc=True),\n        pl=execution_raw.profit,\n        fee=execution_raw.fee + execution_raw.swap + execution_raw.commission,\n        raw=result,\n    )\n</code></pre>"},{"location":"reference/exchange/ccxt/trade/#lettrade.exchange.ccxt.trade.CCXTPosition.from_raw","title":"from_raw  <code>classmethod</code>","text":"<pre><code>from_raw(\n    raw,\n    exchange: LiveExchange,\n    state: PositionState = PositionState.Open,\n    data: LiveDataFeed = None,\n    api: CCXTAPI = None,\n) -&gt; CCXTPosition\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>raw</code>               (<code>_type_</code>)           \u2013            <p>description</p> </li> <li> <code>exchange</code>               (<code>LiveExchange</code>)           \u2013            <p>description</p> </li> <li> <code>data</code>               (<code>LiveDataFeed</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>api</code>               (<code>CCXTAPI</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>NotImplementedError</code>             \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>CCXTPosition</code> (              <code>CCXTPosition</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/ccxt/trade.py</code> <pre><code>@classmethod\ndef from_raw(\n    cls,\n    raw,\n    exchange: \"LiveExchange\",\n    state: PositionState = PositionState.Open,\n    data: \"LiveDataFeed\" = None,\n    api: CCXTAPI = None,\n) -&gt; \"CCXTPosition\":\n    \"\"\"_summary_\n\n    Args:\n        raw (_type_): _description_\n        exchange (LiveExchange): _description_\n        data (LiveDataFeed, optional): _description_. Defaults to None.\n        api (CCXTAPI, optional): _description_. Defaults to None.\n\n    Raises:\n        NotImplementedError: _description_\n\n    Returns:\n        CCXTPosition: _description_\n    \"\"\"\n    # DataFeed\n    if data is None:\n        for d in exchange.datas:\n            if d.symbol == raw.symbol:\n                data = d\n                break\n        if data is None:\n            logger.warning(\"Raw position %s is not handling %s\", raw.symbol, raw)\n            return\n\n    # Side\n    match raw.type:\n        case MT5.POSITION_TYPE_BUY:\n            side = TradeSide.Buy\n        case MT5.POSITION_TYPE_SELL:\n            side = TradeSide.Sell\n        case _:\n            raise NotImplementedError(\n                f\"Position type {raw.type} is not implement\",\n                raw,\n            )\n\n    position = cls(\n        exchange=exchange,\n        id=raw.ticket,\n        data=data,\n        state=state,\n        size=side * raw.volume,\n        entry_price=raw.price_open,\n        entry_fee=raw.swap,\n        entry_at=pd.to_datetime(raw.time_msc, unit=\"ms\", utc=True),\n        parent=None,\n        tag=raw.comment,\n        api=api,\n        raw=raw,\n    )\n\n    # SL\n    if raw.sl &gt; 0.0:\n        position.sl_order = exchange._order_cls.from_position(\n            position=position, sl=raw.sl\n        )\n        exchange.on_order(position.sl_order)\n\n    # TP\n    if raw.tp &gt; 0.0:\n        position.tp_order = exchange._order_cls.from_position(\n            position=position, tp=raw.tp\n        )\n        exchange.on_order(position.tp_order)\n\n    return position\n</code></pre>"},{"location":"reference/exchange/ccxt/trade/#lettrade.exchange.ccxt.trade.CCXTPosition.merge","title":"merge","text":"<pre><code>merge(other: LivePosition) -&gt; bool\n</code></pre> <p>Merge LivePosition from another</p> <p>Parameters:</p> <ul> <li> <code>other</code>               (<code>LivePosition</code>)           \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/live/trade.py</code> <pre><code>def merge(self, other: \"LivePosition\") -&gt; bool:\n    \"\"\"Merge LivePosition from another\n\n    Args:\n        other (LivePosition): _description_\n\n    Returns:\n        bool: _description_\n    \"\"\"\n    if not super().merge(other):\n        return False\n    self.raw = other.raw\n    return True\n</code></pre>"},{"location":"reference/exchange/ccxt/trade/#lettrade.exchange.ccxt.trade.CCXTPosition.update","title":"update","text":"<pre><code>update(\n    sl: float | None = None,\n    tp: float | None = None,\n    caller: float | None = None,\n    **kwargs\n) -&gt; PositionResult\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>sl</code>               (<code>float | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>tp</code>               (<code>float | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>caller</code>               (<code>float | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>PositionResult</code> (              <code>PositionResult</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/ccxt/trade.py</code> <pre><code>def update(\n    self,\n    sl: float | None = None,\n    tp: float | None = None,\n    caller: float | None = None,\n    **kwargs,\n) -&gt; PositionResult:\n    \"\"\"_summary_\n\n    Args:\n        sl (float | None, optional): _description_. Defaults to None.\n        tp (float | None, optional): _description_. Defaults to None.\n        caller (float | None, optional): _description_. Defaults to None.\n\n    Raises:\n        RuntimeError: _description_\n\n    Returns:\n        PositionResult: _description_\n    \"\"\"\n    if not sl and not tp:\n        raise RuntimeError(\"Update sl=None and tp=None\")\n    if caller is self:\n        raise RuntimeError(f\"Position recusive update {self}\")\n\n    result = self._api.position_update(position=self, sl=sl, tp=tp)\n    if result.code != 0:\n        logger.error(\"Update position %s\", str(result))\n        error = PositionResultError(\n            error=result.error,\n            position=self,\n            raw=result,\n        )\n        self.exchange.on_notify(error=error)\n        return error\n\n    if sl is not None:\n        if self.sl_order:\n            if caller is not self.sl_order:\n                self.sl_order.update(stop_price=sl, caller=self)\n        else:\n            self.sl_order = self.exchange._order_cls.from_position(\n                position=self, sl=sl\n            )\n\n    if tp is not None:\n        if self.tp_order:\n            if caller is not self.tp_order:\n                self.tp_order.update(limit_price=tp, caller=self)\n        else:\n            self.tp_order = self.exchange._order_cls.from_position(\n                position=self, tp=tp\n            )\n\n    return super(LivePosition, self).update(raw=result)\n</code></pre>"},{"location":"reference/exchange/live/","title":"Index","text":""},{"location":"reference/exchange/live/#lettrade.exchange.live","title":"live","text":"<p>Live trading base classes</p>"},{"location":"reference/exchange/live/account/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> account","text":""},{"location":"reference/exchange/live/account/#lettrade.exchange.live.account","title":"account","text":""},{"location":"reference/exchange/live/account/#lettrade.exchange.live.account.LiveAccount","title":"LiveAccount","text":"<pre><code>LiveAccount(api: LiveAPI, **kwargs)\n</code></pre> <p>               Bases: <code>Account</code></p> <p>Parameters:</p> <ul> <li> <code>api</code>               (<code>LiveAPI</code>)           \u2013            <p>description</p> </li> <li> <code>**kwargs</code>               (<code>dict</code>, default:                   <code>{}</code> )           \u2013            <p>Mirror of lettrade.account.Account().</p> </li> </ul> Source code in <code>lettrade/exchange/live/account.py</code> <pre><code>def __init__(self, api: LiveAPI, **kwargs) -&gt; None:\n    \"\"\"Account for live trading\n\n    Args:\n        api (LiveAPI): _description_\n        **kwargs (dict, optional): Mirror of [lettrade.account.Account()](site:/reference/account/account/#lettrade.account.account.Account).\n    \"\"\"\n    super().__init__(**kwargs)\n    self._api = api\n\n    self._balance = 0.0\n    self._equity = 0.0\n</code></pre>"},{"location":"reference/exchange/live/account/#lettrade.exchange.live.account.LiveAccount.balance","title":"balance  <code>property</code>","text":"<pre><code>balance: float\n</code></pre> <p>Balance of account</p> <p>Returns:</p> <ul> <li> <code>float</code> (              <code>float</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/live/account/#lettrade.exchange.live.account.LiveAccount.account_refresh","title":"account_refresh","text":"<pre><code>account_refresh()\n</code></pre> <p>Refresh account balance</p> Source code in <code>lettrade/exchange/live/account.py</code> <pre><code>def account_refresh(self):\n    \"\"\"Refresh account balance\"\"\"\n    self._account = self._api.account()\n\n    if __debug__:\n        logger.debug(\"Account: %s\", str(self._account))\n\n    self._balance = self._account.balance\n    self._equity = self._account.equity\n</code></pre>"},{"location":"reference/exchange/live/account/#lettrade.exchange.live.account.LiveAccount.next","title":"next","text":"<pre><code>next()\n</code></pre> <p>Next account</p> Source code in <code>lettrade/account/account.py</code> <pre><code>def next(self):\n    \"\"\"Next account\"\"\"\n</code></pre>"},{"location":"reference/exchange/live/account/#lettrade.exchange.live.account.LiveAccount.next_next","title":"next_next","text":"<pre><code>next_next()\n</code></pre> <p>Call after strategy.next()</p> Source code in <code>lettrade/account/account.py</code> <pre><code>def next_next(self):\n    \"\"\"Call after strategy.next()\"\"\"\n    self._equity_snapshot()\n</code></pre>"},{"location":"reference/exchange/live/account/#lettrade.exchange.live.account.LiveAccount.risk","title":"risk","text":"<pre><code>risk(side: TradeSide, size: float, **kwargs) -&gt; float\n</code></pre> <p>Risk calculation</p> Source code in <code>lettrade/account/account.py</code> <pre><code>def risk(self, side: \"TradeSide\", size: float, **kwargs) -&gt; float:\n    \"\"\"Risk calculation\"\"\"\n    if size is None:\n        return side * abs(self._risk)\n    return side * abs(size)\n</code></pre>"},{"location":"reference/exchange/live/account/#lettrade.exchange.live.account.LiveAccount.start","title":"start","text":"<pre><code>start()\n</code></pre> <p>Start live account by load account info from API</p> Source code in <code>lettrade/exchange/live/account.py</code> <pre><code>def start(self):\n    \"\"\"Start live account by load account info from API\"\"\"\n    self.account_refresh()\n    self._margin = self._account.margin\n    self._leverage = self._account.leverage\n</code></pre>"},{"location":"reference/exchange/live/account/#lettrade.exchange.live.account.LiveAccount.stop","title":"stop","text":"<pre><code>stop()\n</code></pre> <p>Stop account</p> Source code in <code>lettrade/account/account.py</code> <pre><code>def stop(self):\n    \"\"\"Stop account\"\"\"\n    try:\n        self._equity_snapshot()\n    except LetAccountInsufficientException:\n        pass\n</code></pre>"},{"location":"reference/exchange/live/api/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> api","text":""},{"location":"reference/exchange/live/api/#lettrade.exchange.live.api","title":"api","text":""},{"location":"reference/exchange/live/api/#lettrade.exchange.live.api.LiveAPI","title":"LiveAPI","text":"<pre><code>LiveAPI(**kwargs)\n</code></pre> <p>               Bases: <code>ABC</code></p> Source code in <code>lettrade/exchange/live/api.py</code> <pre><code>def __init__(self, **kwargs):\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/live/api/#lettrade.exchange.live.api.LiveAPI.account","title":"account  <code>abstractmethod</code>","text":"<pre><code>account() -&gt; dict\n</code></pre> Source code in <code>lettrade/exchange/live/api.py</code> <pre><code>@abstractmethod\ndef account(self) -&gt; dict:\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/live/api/#lettrade.exchange.live.api.LiveAPI.bars","title":"bars  <code>abstractmethod</code>","text":"<pre><code>bars(\n    symbol,\n    timeframe,\n    since: int | datetime | None = 0,\n    to: int | datetime | None = 1000,\n) -&gt; list[list]\n</code></pre> Source code in <code>lettrade/exchange/live/api.py</code> <pre><code>@abstractmethod\ndef bars(\n    self,\n    symbol,\n    timeframe,\n    since: int | datetime | None = 0,\n    to: int | datetime | None = 1_000,\n) -&gt; list[list]:\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/live/api/#lettrade.exchange.live.api.LiveAPI.execution_get","title":"execution_get  <code>abstractmethod</code>","text":"<pre><code>execution_get(id: str, **kwargs) -&gt; dict\n</code></pre> Source code in <code>lettrade/exchange/live/api.py</code> <pre><code>@abstractmethod\ndef execution_get(self, id: str, **kwargs) -&gt; dict:\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/live/api/#lettrade.exchange.live.api.LiveAPI.executions_get","title":"executions_get  <code>abstractmethod</code>","text":"<pre><code>executions_get(\n    position_id: str | None = None,\n    search: str | None = None,\n    **kwargs\n) -&gt; list[dict]\n</code></pre> Source code in <code>lettrade/exchange/live/api.py</code> <pre><code>@abstractmethod\ndef executions_get(\n    self,\n    position_id: str | None = None,\n    search: str | None = None,\n    **kwargs,\n) -&gt; list[dict]:\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/live/api/#lettrade.exchange.live.api.LiveAPI.executions_total","title":"executions_total  <code>abstractmethod</code>","text":"<pre><code>executions_total(\n    since: datetime | None = None,\n    to: datetime | None = None,\n    **kwargs\n) -&gt; int\n</code></pre> Source code in <code>lettrade/exchange/live/api.py</code> <pre><code>@abstractmethod\ndef executions_total(\n    self,\n    since: datetime | None = None,\n    to: datetime | None = None,\n    **kwargs,\n) -&gt; int:\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/live/api/#lettrade.exchange.live.api.LiveAPI.heartbeat","title":"heartbeat","text":"<pre><code>heartbeat() -&gt; bool\n</code></pre> Source code in <code>lettrade/exchange/live/api.py</code> <pre><code>def heartbeat(self) -&gt; bool:\n    \"\"\"\"\"\"\n    return True\n</code></pre>"},{"location":"reference/exchange/live/api/#lettrade.exchange.live.api.LiveAPI.init","title":"init","text":"<pre><code>init(**kwargs)\n</code></pre> Source code in <code>lettrade/exchange/live/api.py</code> <pre><code>def init(self, **kwargs):\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/live/api/#lettrade.exchange.live.api.LiveAPI.market","title":"market  <code>abstractmethod</code>","text":"<pre><code>market(symbol: str) -&gt; dict\n</code></pre> Source code in <code>lettrade/exchange/live/api.py</code> <pre><code>@abstractmethod\ndef market(self, symbol: str) -&gt; dict:\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/live/api/#lettrade.exchange.live.api.LiveAPI.markets","title":"markets  <code>abstractmethod</code>","text":"<pre><code>markets(symbols: list[str]) -&gt; dict\n</code></pre> Source code in <code>lettrade/exchange/live/api.py</code> <pre><code>@abstractmethod\ndef markets(self, symbols: list[str]) -&gt; dict:\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/live/api/#lettrade.exchange.live.api.LiveAPI.multiprocess","title":"multiprocess  <code>classmethod</code>","text":"<pre><code>multiprocess(kwargs: dict, **other_kwargs)\n</code></pre> Source code in <code>lettrade/exchange/live/api.py</code> <pre><code>@classmethod\ndef multiprocess(cls, kwargs: dict, **other_kwargs):\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/live/api/#lettrade.exchange.live.api.LiveAPI.next","title":"next","text":"<pre><code>next()\n</code></pre> Source code in <code>lettrade/exchange/live/api.py</code> <pre><code>def next(self):\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/live/api/#lettrade.exchange.live.api.LiveAPI.order_close","title":"order_close  <code>abstractmethod</code>","text":"<pre><code>order_close(order: LiveOrder, **kwargs) -&gt; dict\n</code></pre> Source code in <code>lettrade/exchange/live/api.py</code> <pre><code>@abstractmethod\ndef order_close(self, order: \"LiveOrder\", **kwargs) -&gt; dict:\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/live/api/#lettrade.exchange.live.api.LiveAPI.order_open","title":"order_open  <code>abstractmethod</code>","text":"<pre><code>order_open(**kwargs) -&gt; dict\n</code></pre> Source code in <code>lettrade/exchange/live/api.py</code> <pre><code>@abstractmethod\ndef order_open(self, **kwargs) -&gt; dict:\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/live/api/#lettrade.exchange.live.api.LiveAPI.order_update","title":"order_update  <code>abstractmethod</code>","text":"<pre><code>order_update(\n    order: LiveOrder, sl=None, tp=None, **kwargs\n) -&gt; dict\n</code></pre> Source code in <code>lettrade/exchange/live/api.py</code> <pre><code>@abstractmethod\ndef order_update(self, order: \"LiveOrder\", sl=None, tp=None, **kwargs) -&gt; dict:\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/live/api/#lettrade.exchange.live.api.LiveAPI.orders_get","title":"orders_get  <code>abstractmethod</code>","text":"<pre><code>orders_get(\n    id: str | None = None,\n    symbol: str | None = None,\n    **kwargs\n)\n</code></pre> Source code in <code>lettrade/exchange/live/api.py</code> <pre><code>@abstractmethod\ndef orders_get(\n    self,\n    id: str | None = None,\n    symbol: str | None = None,\n    **kwargs,\n):\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/live/api/#lettrade.exchange.live.api.LiveAPI.orders_history_get","title":"orders_history_get","text":"<pre><code>orders_history_get(\n    id: str | None = None,\n    since: datetime | None = None,\n    to: datetime | None = None,\n    **kwargs\n) -&gt; list[dict]\n</code></pre> Source code in <code>lettrade/exchange/live/api.py</code> <pre><code>def orders_history_get(\n    self,\n    id: str | None = None,\n    since: datetime | None = None,\n    to: datetime | None = None,\n    **kwargs,\n) -&gt; list[dict]:\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/live/api/#lettrade.exchange.live.api.LiveAPI.orders_total","title":"orders_total  <code>abstractmethod</code>","text":"<pre><code>orders_total(\n    since: datetime | None = None,\n    to: datetime | None = None,\n    **kwargs\n) -&gt; int\n</code></pre> Source code in <code>lettrade/exchange/live/api.py</code> <pre><code>@abstractmethod\ndef orders_total(\n    self,\n    since: datetime | None = None,\n    to: datetime | None = None,\n    **kwargs,\n) -&gt; int:\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/live/api/#lettrade.exchange.live.api.LiveAPI.position_close","title":"position_close  <code>abstractmethod</code>","text":"<pre><code>position_close(position: LivePosition, **kwargs) -&gt; dict\n</code></pre> Source code in <code>lettrade/exchange/live/api.py</code> <pre><code>@abstractmethod\ndef position_close(self, position: \"LivePosition\", **kwargs) -&gt; dict:\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/live/api/#lettrade.exchange.live.api.LiveAPI.position_update","title":"position_update  <code>abstractmethod</code>","text":"<pre><code>position_update(\n    position: LivePosition,\n    sl: float | None = None,\n    tp: float | None = None,\n    **kwargs\n) -&gt; dict\n</code></pre> Source code in <code>lettrade/exchange/live/api.py</code> <pre><code>@abstractmethod\ndef position_update(\n    self,\n    position: \"LivePosition\",\n    sl: float | None = None,\n    tp: float | None = None,\n    **kwargs,\n) -&gt; dict:\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/live/api/#lettrade.exchange.live.api.LiveAPI.positions_get","title":"positions_get  <code>abstractmethod</code>","text":"<pre><code>positions_get(\n    id: str = None, symbol: str = None, **kwargs\n) -&gt; list[dict]\n</code></pre> Source code in <code>lettrade/exchange/live/api.py</code> <pre><code>@abstractmethod\ndef positions_get(self, id: str = None, symbol: str = None, **kwargs) -&gt; list[dict]:\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/live/api/#lettrade.exchange.live.api.LiveAPI.positions_total","title":"positions_total  <code>abstractmethod</code>","text":"<pre><code>positions_total(\n    since: datetime | None = None,\n    to: datetime | None = None,\n    **kwargs\n) -&gt; int\n</code></pre> Source code in <code>lettrade/exchange/live/api.py</code> <pre><code>@abstractmethod\ndef positions_total(\n    self,\n    since: datetime | None = None,\n    to: datetime | None = None,\n    **kwargs,\n) -&gt; int:\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/live/api/#lettrade.exchange.live.api.LiveAPI.start","title":"start","text":"<pre><code>start(exchange: LiveExchange)\n</code></pre> Source code in <code>lettrade/exchange/live/api.py</code> <pre><code>def start(self, exchange: \"LiveExchange\"):\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/live/api/#lettrade.exchange.live.api.LiveAPI.stop","title":"stop","text":"<pre><code>stop()\n</code></pre> Source code in <code>lettrade/exchange/live/api.py</code> <pre><code>def stop(self):\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/live/api/#lettrade.exchange.live.api.LiveAPI.tick_get","title":"tick_get  <code>abstractmethod</code>","text":"<pre><code>tick_get(symbol: str) -&gt; dict\n</code></pre> Source code in <code>lettrade/exchange/live/api.py</code> <pre><code>@abstractmethod\ndef tick_get(self, symbol: str) -&gt; dict:\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/live/data/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> data","text":""},{"location":"reference/exchange/live/data/#lettrade.exchange.live.data","title":"data","text":""},{"location":"reference/exchange/live/data/#lettrade.exchange.live.data.LiveDataFeed","title":"LiveDataFeed","text":"<pre><code>LiveDataFeed(\n    symbol: str,\n    timeframe: str | int | Timedelta,\n    name: str | None = None,\n    api: LiveAPI | None = None,\n    columns: list[str] | None = None,\n    **kwargs\n)\n</code></pre> <p>               Bases: <code>DataFeed</code></p> <p>Live trading DataFeed</p> <p>Parameters:</p> <ul> <li> <code>symbol</code>               (<code>str</code>)           \u2013            <p>Symbol of DataFeed</p> </li> <li> <code>timeframe</code>               (<code>str | int | Timedelta</code>)           \u2013            <p>TimeFrame of DataFeed</p> </li> <li> <code>name</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>Name of DataFeed, auto generate <code>{symbol}_{timeframe}</code> if none. Defaults to None.</p> </li> <li> <code>api</code>               (<code>LiveAPI | None</code>, default:                   <code>None</code> )           \u2013            <p>Live trading API. Defaults to None.</p> </li> <li> <code>columns</code>               (<code>list[str] | None</code>, default:                   <code>None</code> )           \u2013            <p>List of DataFeed columns. Defaults to None.</p> </li> </ul> Source code in <code>lettrade/exchange/live/data.py</code> <pre><code>def __init__(\n    self,\n    symbol: str,\n    timeframe: str | int | pd.Timedelta,\n    name: str | None = None,\n    api: LiveAPI | None = None,\n    columns: list[str] | None = None,\n    **kwargs,\n) -&gt; None:\n    \"\"\"_summary_\n\n    Args:\n        symbol (str): Symbol of DataFeed\n        timeframe (str | int | pd.Timedelta): TimeFrame of DataFeed\n        name (str | None, optional): Name of DataFeed, auto generate `{symbol}_{timeframe}` if none. Defaults to None.\n        api (LiveAPI | None, optional): Live trading API. Defaults to None.\n        columns (list[str] | None, optional): List of DataFeed columns. Defaults to None.\n    \"\"\"\n    super().__init__(\n        name=name or f\"{symbol}_{timeframe}\",\n        timeframe=timeframe,\n        columns=columns or [\"open\", \"high\", \"low\", \"close\", \"volume\"],\n        **kwargs,\n    )\n\n    self.meta.update(symbol=symbol, base_columns=self.columns.copy())\n\n    if api is not None:\n        self._api = api\n</code></pre>"},{"location":"reference/exchange/live/data/#lettrade.exchange.live.data.LiveDataFeed.i","title":"i  <code>property</code>","text":"<pre><code>i: indicator\n</code></pre> <p>Alias to <code>lettrade.indicator</code> and using in DataFeed by call: <code>DataFeed.i.indicator_name()</code></p>"},{"location":"reference/exchange/live/data/#lettrade.exchange.live.data.LiveDataFeed.is_main","title":"is_main  <code>property</code>","text":"<pre><code>is_main: bool\n</code></pre> <p>Property to check DataFeed is main DataFeed or not</p>"},{"location":"reference/exchange/live/data/#lettrade.exchange.live.data.LiveDataFeed.l","title":"l  <code>instance-attribute</code>","text":"<pre><code>l: LetDataFeedWrapper\n</code></pre> <p>LetTrade DataFeed wrapper using to manage index pointer of DataFeed</p>"},{"location":"reference/exchange/live/data/#lettrade.exchange.live.data.LiveDataFeed.meta","title":"meta  <code>property</code>","text":"<pre><code>meta: dict\n</code></pre> <p>Property to get metadata of DataFeed</p>"},{"location":"reference/exchange/live/data/#lettrade.exchange.live.data.LiveDataFeed.name","title":"name  <code>property</code>","text":"<pre><code>name: str\n</code></pre> <p>Property to get name of DataFeed</p>"},{"location":"reference/exchange/live/data/#lettrade.exchange.live.data.LiveDataFeed.now","title":"now  <code>property</code>","text":"<pre><code>now: Timestamp\n</code></pre> <p>Property to get current index value of DataFeed</p>"},{"location":"reference/exchange/live/data/#lettrade.exchange.live.data.LiveDataFeed.symbol","title":"symbol  <code>property</code>","text":"<pre><code>symbol: str\n</code></pre> <p>Property to get symbol of DataFeed</p>"},{"location":"reference/exchange/live/data/#lettrade.exchange.live.data.LiveDataFeed.timeframe","title":"timeframe  <code>property</code>","text":"<pre><code>timeframe: TimeFrame\n</code></pre> <p>Property to get timeframe of DataFeed</p>"},{"location":"reference/exchange/live/data/#lettrade.exchange.live.data.LiveDataFeed.bar","title":"bar","text":"<pre><code>bar(i: int = 0) -&gt; Timestamp\n</code></pre> <p>Get current pd.Timestamp value of DataFeed</p> <p>Parameters:</p> <ul> <li> <code>i</code>               (<code>int</code>, default:                   <code>0</code> )           \u2013            <p>Index. Defaults to 0.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Timestamp</code>           \u2013            <p>pd.Timestamp: description</p> </li> </ul> Source code in <code>lettrade/data/data.py</code> <pre><code>def bar(self, i: int = 0) -&gt; pd.Timestamp:\n    \"\"\"Get current pd.Timestamp value of DataFeed\n\n    Args:\n        i (int, optional): Index. Defaults to 0.\n\n    Returns:\n        pd.Timestamp: _description_\n    \"\"\"\n    return self.l.index[i]\n</code></pre>"},{"location":"reference/exchange/live/data/#lettrade.exchange.live.data.LiveDataFeed.bars","title":"bars","text":"<pre><code>bars(\n    since: int | str | Timestamp, to: int | str | Timestamp\n) -&gt; list\n</code></pre> <p>Get bars from LiveAPI</p> <p>Parameters:</p> <ul> <li> <code>since</code>               (<code>int | str | Timestamp</code>)           \u2013            <p>description</p> </li> <li> <code>to</code>               (<code>int | str | Timestamp</code>)           \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list</code> (              <code>list</code> )          \u2013            <p>list of bar</p> </li> </ul> Source code in <code>lettrade/exchange/live/data.py</code> <pre><code>def bars(\n    self,\n    since: int | str | pd.Timestamp,\n    to: int | str | pd.Timestamp,\n) -&gt; list:\n    \"\"\"Get bars from LiveAPI\n\n    Args:\n        since (int | str | pd.Timestamp): _description_\n        to (int | str | pd.Timestamp): _description_\n\n    Returns:\n        list: list of bar\n    \"\"\"\n    return self._api.bars(\n        symbol=self.symbol,\n        timeframe=self.timeframe.string,\n        since=since,\n        to=to,\n    )\n</code></pre>"},{"location":"reference/exchange/live/data/#lettrade.exchange.live.data.LiveDataFeed.bars_load","title":"bars_load","text":"<pre><code>bars_load(\n    since: int | str | Timestamp, to: int | str | Timestamp\n) -&gt; bool\n</code></pre> <p>Get bar from API and push to DataFeed</p> <p>Parameters:</p> <ul> <li> <code>since</code>               (<code>int | str | Timestamp</code>)           \u2013            <p>description</p> </li> <li> <code>to</code>               (<code>int | str | Timestamp</code>)           \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True if has data, False if no data</p> </li> </ul> Source code in <code>lettrade/exchange/live/data.py</code> <pre><code>def bars_load(\n    self,\n    since: int | str | pd.Timestamp,\n    to: int | str | pd.Timestamp,\n) -&gt; bool:\n    \"\"\"Get bar from API and push to DataFeed\n\n    Args:\n        since (int | str | pd.Timestamp): _description_\n        to (int | str | pd.Timestamp): _description_\n\n    Returns:\n        bool: True if has data, False if no data\n    \"\"\"\n    bars = self.bars(since=since, to=to)\n\n    if bars is None or len(bars) == 0:\n        logger.warning(\"No bars data for %s\", self.name)\n        return False\n\n    self.push(bars, unit=self._bar_datetime_unit)\n    return True\n</code></pre>"},{"location":"reference/exchange/live/data/#lettrade.exchange.live.data.LiveDataFeed.drop","title":"drop","text":"<pre><code>drop(\n    *args,\n    since: int | str | Timestamp | None = None,\n    to: int | str | Timestamp | None = None,\n    **kwargs\n) -&gt; None\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>since</code>               (<code>int | str | Timestamp | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>to</code>               (<code>int | str | Timestamp | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/data/data.py</code> <pre><code>def drop(\n    self,\n    *args,\n    since: int | str | pd.Timestamp | None = None,\n    to: int | str | pd.Timestamp | None = None,\n    **kwargs,\n) -&gt; None:\n    \"\"\"_summary_\n\n    Args:\n        since (int | str | pd.Timestamp | None, optional): _description_. Defaults to None.\n        to (int | str | pd.Timestamp | None, optional): _description_. Defaults to None.\n\n    Raises:\n        RuntimeError: _description_\n    \"\"\"\n    if since is None and to is None:\n        super().drop(*args, **kwargs)\n        return\n\n    condiction = None\n\n    # Since\n    if since is not None:\n        if isinstance(since, int):\n            loc = self.l.index[since]\n        elif isinstance(since, str):\n            loc = pd.to_datetime(since, utc=True)\n        elif isinstance(since, pd.Timestamp):\n            loc = since\n        else:\n            raise RuntimeError(f\"DataFeed.drop since {since} is invalid\")\n        condiction = self.index &lt; loc\n\n    # To\n    if to is not None:\n        if isinstance(to, int):\n            loc = self.l.index[to]\n        elif isinstance(to, str):\n            loc = pd.to_datetime(to, utc=True)\n        elif isinstance(to, pd.Timestamp):\n            loc = to\n        else:\n            raise RuntimeError(f\"DataFeed.drop to {to} is invalid\")\n\n        if condiction is None:\n            condiction = self.index &gt; loc\n        else:\n            condiction = condiction | (self.index &gt; loc)\n\n    index = self[condiction].index\n    super().drop(index=index, inplace=True)\n    self.l.reset()\n\n    if __debug__:\n        logger.debug(\"BackTestDataFeed %s dropped %s rows\", self.name, len(index))\n</code></pre>"},{"location":"reference/exchange/live/data/#lettrade.exchange.live.data.LiveDataFeed.dump_csv","title":"dump_csv","text":"<pre><code>dump_csv(\n    path: str | None = None,\n    since: int | str | datetime | None = 0,\n    to: int | str | datetime | None = 1000,\n    **kwargs\n)\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>path</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>since</code>               (<code>int | str | datetime | None</code>, default:                   <code>0</code> )           \u2013            <p>description. Defaults to 0.</p> </li> <li> <code>to</code>               (<code>int | str | datetime | None</code>, default:                   <code>1000</code> )           \u2013            <p>description. Defaults to 1_000.</p> </li> </ul> Source code in <code>lettrade/exchange/live/data.py</code> <pre><code>def dump_csv(\n    self,\n    path: str | None = None,\n    since: int | str | datetime | None = 0,\n    to: int | str | datetime | None = 1_000,\n    **kwargs,\n):\n    \"\"\"_summary_\n\n    Args:\n        path (str | None, optional): _description_. Defaults to None.\n        since (int  |  str  |  datetime | None, optional): _description_. Defaults to 0.\n        to (int  |  str  |  datetime | None, optional): _description_. Defaults to 1_000.\n    \"\"\"\n    if self.empty:\n        if isinstance(since, str):\n            since = pd.to_datetime(since).to_pydatetime()\n        if isinstance(to, str):\n            to = pd.to_datetime(to).to_pydatetime()\n\n        self.bars_load(since=since, to=to)\n\n    if path is None:\n        path = f\"data/{self.name}-{since}_{to}.csv\"\n\n    from lettrade.data.extra.csv import csv_export\n\n    csv_export(dataframe=self, path=path, **kwargs)\n</code></pre>"},{"location":"reference/exchange/live/data/#lettrade.exchange.live.data.LiveDataFeed.instance","title":"instance  <code>classmethod</code>","text":"<pre><code>instance(\n    api: LiveAPI | None = None,\n    api_kwargs: dict | None = None,\n    **kwargs\n) -&gt; LiveDataFeed\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>api</code>               (<code>LiveAPI</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>api_kwargs</code>               (<code>dict</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>Missing api requirement</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>LiveDataFeed</code> (              <code>LiveDataFeed</code> )          \u2013            <p>DataFeed object</p> </li> </ul> Source code in <code>lettrade/exchange/live/data.py</code> <pre><code>@classmethod\ndef instance(\n    cls,\n    api: LiveAPI | None = None,\n    api_kwargs: dict | None = None,\n    **kwargs,\n) -&gt; \"LiveDataFeed\":\n    \"\"\"_summary_\n\n    Args:\n        api (LiveAPI, optional): _description_. Defaults to None.\n        api_kwargs (dict, optional): _description_. Defaults to None.\n\n    Raises:\n        RuntimeError: Missing api requirement\n\n    Returns:\n        LiveDataFeed: DataFeed object\n    \"\"\"\n    if api is None:\n        if api_kwargs is None:\n            raise RuntimeError(\"api or api_kwargs cannot missing\")\n        api = cls._api_cls(**api_kwargs)\n    obj = cls(api=api, **kwargs)\n    return obj\n</code></pre>"},{"location":"reference/exchange/live/data/#lettrade.exchange.live.data.LiveDataFeed.next","title":"next","text":"<pre><code>next(size=1, tick=0) -&gt; bool\n</code></pre> <p>Drop extra columns and load next DataFeed</p> <p>Parameters:</p> <ul> <li> <code>size</code>               (<code>int</code>, default:                   <code>1</code> )           \u2013            <p>description. Defaults to 1.</p> </li> <li> <code>tick</code>               (<code>int</code>, default:                   <code>0</code> )           \u2013            <p>description. Defaults to 0.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/live/data.py</code> <pre><code>def next(self, size=1, tick=0) -&gt; bool:\n    \"\"\"Drop extra columns and load next DataFeed\n\n    Args:\n        size (int, optional): _description_. Defaults to 1.\n        tick (int, optional): _description_. Defaults to 0.\n\n    Returns:\n        bool: _description_\n    \"\"\"\n    # Drop existed extra columns to skip reusing calculated data\n    self.drop(columns=self.columns.difference(self._base_columns), inplace=True)\n\n    self.bars_load(since=0, to=size + 1)\n    self.l.go_stop()\n    return True\n</code></pre>"},{"location":"reference/exchange/live/data/#lettrade.exchange.live.data.LiveDataFeed.push","title":"push","text":"<pre><code>push(\n    rows: list[list[int | float]],\n    unit: str | None = None,\n    utc: bool = True,\n    **kwargs\n)\n</code></pre> <p>Push new rows to DataFeed</p> <p>Parameters:</p> <ul> <li> <code>rows</code>               (<code>list[list[int | float]]</code>)           \u2013            <p>list of rows <code>[[\"timestamp\", \"open price\", \"high price\"...]]</code></p> </li> <li> <code>unit</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>pandas.Timestamp parsing unit. Defaults to None.</p> </li> <li> <code>utc</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>description. Defaults to True.</p> </li> </ul> Source code in <code>lettrade/data/data.py</code> <pre><code>def push(\n    self,\n    rows: list[list[int | float]],\n    unit: str | None = None,\n    utc: bool = True,\n    **kwargs,\n):\n    \"\"\"Push new rows to DataFeed\n\n    Args:\n        rows (list[list[int | float]]): list of rows `[[\"timestamp\", \"open price\", \"high price\"...]]`\n        unit (str | None, optional): pandas.Timestamp parsing unit. Defaults to None.\n        utc (bool, optional): _description_. Defaults to True.\n    \"\"\"\n    for row in rows:\n        dt = pd.to_datetime(row[0], unit=unit, utc=utc, **kwargs)\n        self.at[\n            dt,\n            (\n                \"open\",\n                \"high\",\n                \"low\",\n                \"close\",\n                \"volume\",\n            ),\n        ] = (\n            row[1],  # open\n            row[2],  # high\n            row[3],  # low\n            row[4],  # close\n            row[5],  # volume\n        )\n\n    if __debug__:\n        logger.debug(\"[%s] Update bar: \\n%s\", self.name, self.tail(len(rows)))\n</code></pre>"},{"location":"reference/exchange/live/data/#lettrade.exchange.live.data.LiveDataFeed.symbol_info","title":"symbol_info","text":"<pre><code>symbol_info()\n</code></pre> <p>Get symbol information from API</p> Source code in <code>lettrade/exchange/live/data.py</code> <pre><code>def symbol_info(self):\n    \"\"\"Get symbol information from API\"\"\"\n    return self._api.market(symbol=self.symbol)\n</code></pre>"},{"location":"reference/exchange/live/error/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> error","text":""},{"location":"reference/exchange/live/error/#lettrade.exchange.live.error","title":"error","text":""},{"location":"reference/exchange/live/error/#lettrade.exchange.live.error.LetLiveAPIUnauthorizedException","title":"LetLiveAPIUnauthorizedException","text":"<pre><code>LetLiveAPIUnauthorizedException(\n    *args: object, raw: dict = None\n)\n</code></pre> <p>               Bases: <code>LetLiveException</code></p> <p>API Unauthorized exception</p> Source code in <code>lettrade/exchange/live/error.py</code> <pre><code>def __init__(self, *args: object, raw: dict = None) -&gt; None:\n    super().__init__(*args)\n    self.raw = raw\n</code></pre>"},{"location":"reference/exchange/live/error/#lettrade.exchange.live.error.LetLiveOrderInvalidException","title":"LetLiveOrderInvalidException","text":"<pre><code>LetLiveOrderInvalidException(\n    *args: object, raw: dict = None\n)\n</code></pre> <p>               Bases: <code>LetLiveException</code>, <code>LetOrderInvalidException</code></p> <p>Live order place is invalid exception</p> Source code in <code>lettrade/exchange/live/error.py</code> <pre><code>def __init__(self, *args: object, raw: dict = None) -&gt; None:\n    super().__init__(*args)\n    self.raw = raw\n</code></pre>"},{"location":"reference/exchange/live/exchange/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> exchange","text":""},{"location":"reference/exchange/live/exchange/#lettrade.exchange.live.exchange","title":"exchange","text":""},{"location":"reference/exchange/live/exchange/#lettrade.exchange.live.exchange.LiveExchange","title":"LiveExchange","text":"<pre><code>LiveExchange(api: LiveAPI, *args, **kwargs)\n</code></pre> <p>               Bases: <code>Exchange</code></p> <p>MetaTrade 5 exchange module for <code>lettrade</code></p> <p>Parameters:</p> <ul> <li> <code>api</code>               (<code>LiveAPI</code>)           \u2013            <p>API connect to rpyc MeTrader 5 Terminal server through module <code>mt5linux</code></p> </li> <li> <code>*args</code>               (<code>list</code>, default:                   <code>()</code> )           \u2013            <p><code>Exchange</code> list parameters</p> </li> <li> <code>**kwargs</code>               (<code>dict</code>, default:                   <code>{}</code> )           \u2013            <p><code>Exchange</code> dict parameters</p> </li> </ul> Source code in <code>lettrade/exchange/live/exchange.py</code> <pre><code>def __init__(self, api: LiveAPI, *args, **kwargs):\n    \"\"\"_summary_\n\n    Args:\n        api (LiveAPI): API connect to rpyc MeTrader 5 Terminal server through module `mt5linux`\n        *args (list): `Exchange` list parameters\n        **kwargs (dict): `Exchange` dict parameters\n    \"\"\"\n    super().__init__(*args, **kwargs)\n    self._api = api\n</code></pre>"},{"location":"reference/exchange/live/exchange/#lettrade.exchange.live.exchange.LiveExchange.data","title":"data  <code>instance-attribute</code>","text":"<pre><code>data: DataFeed\n</code></pre> <p>main DataFeed</p>"},{"location":"reference/exchange/live/exchange/#lettrade.exchange.live.exchange.LiveExchange.datas","title":"datas  <code>instance-attribute</code>","text":"<pre><code>datas: list[DataFeed]\n</code></pre> <p>List of all available DataFeed</p>"},{"location":"reference/exchange/live/exchange/#lettrade.exchange.live.exchange.LiveExchange.executions","title":"executions  <code>instance-attribute</code>","text":"<pre><code>executions: dict[str, Execution] = dict()\n</code></pre> <p>Execution dict by <code>Execution.id</code> key</p>"},{"location":"reference/exchange/live/exchange/#lettrade.exchange.live.exchange.LiveExchange.history_orders","title":"history_orders  <code>instance-attribute</code>","text":"<pre><code>history_orders: dict[str, Order] = dict()\n</code></pre> <p>History Order dict by <code>Order.id</code> key</p>"},{"location":"reference/exchange/live/exchange/#lettrade.exchange.live.exchange.LiveExchange.history_positions","title":"history_positions  <code>instance-attribute</code>","text":"<pre><code>history_positions: dict[str, Position] = dict()\n</code></pre> <p>History Position dict by <code>Position.id</code> key</p>"},{"location":"reference/exchange/live/exchange/#lettrade.exchange.live.exchange.LiveExchange.orders","title":"orders  <code>instance-attribute</code>","text":"<pre><code>orders: dict[str, Order] = dict()\n</code></pre> <p>Available Order dict by <code>Order.id</code> key</p>"},{"location":"reference/exchange/live/exchange/#lettrade.exchange.live.exchange.LiveExchange.positions","title":"positions  <code>instance-attribute</code>","text":"<pre><code>positions: dict[str, Position] = dict()\n</code></pre> <p>Available Position dict by <code>Position.id</code> key</p>"},{"location":"reference/exchange/live/exchange/#lettrade.exchange.live.exchange.LiveExchange.init","title":"init","text":"<pre><code>init(\n    brain: Brain,\n    feeder: DataFeeder,\n    account: Account,\n    commander: Commander,\n) -&gt; None\n</code></pre> <p>Init Exchange dependencies. Set data/datas from feeder. Set state to <code>ExchangeState.Start</code>.</p> <p>Parameters:</p> <ul> <li> <code>brain</code>               (<code>Brain</code>)           \u2013            <p>description</p> </li> <li> <code>feeder</code>               (<code>DataFeeder</code>)           \u2013            <p>description</p> </li> <li> <code>account</code>               (<code>Account</code>)           \u2013            <p>description</p> </li> <li> <code>commander</code>               (<code>Commander</code>)           \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def init(\n    self,\n    brain: \"Brain\",\n    feeder: DataFeeder,\n    account: Account,\n    commander: Commander,\n) -&gt; None:\n    \"\"\"Init Exchange dependencies.\n    Set data/datas from feeder.\n    Set state to `ExchangeState.Start`.\n\n    Args:\n        brain (Brain): _description_\n        feeder (DataFeeder): _description_\n        account (Account): _description_\n        commander (Commander): _description_\n    \"\"\"\n    self._brain = brain\n    self._feeder = feeder\n    self._account = account\n    self._commander = commander\n\n    self.data = self._feeder.data\n    self.datas = self._feeder.datas\n\n    self._account.init(exchange=self)\n\n    self._state = ExchangeState.Start\n</code></pre>"},{"location":"reference/exchange/live/exchange/#lettrade.exchange.live.exchange.LiveExchange.new_order","title":"new_order","text":"<pre><code>new_order(\n    size: float,\n    type: OrderType | None = OrderType.Market,\n    limit: float | None = None,\n    stop: float | None = None,\n    sl: float | None = None,\n    tp: float | None = None,\n    tag: str | None = None,\n    data: DataFeed | None = None,\n    **kwargs\n) -&gt; OrderResult\n</code></pre> <p>Place new order to server</p> <p>Parameters:</p> <ul> <li> <code>size</code>               (<code>float</code>)           \u2013            <p>description</p> </li> <li> <code>type</code>               (<code>OrderType | None</code>, default:                   <code>Market</code> )           \u2013            <p>description. Defaults to OrderType.Market.</p> </li> <li> <code>limit</code>               (<code>float | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>stop</code>               (<code>float | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>sl</code>               (<code>float | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>tp</code>               (<code>float | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>tag</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>data</code>               (<code>DataFeed | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>OrderResult</code> (              <code>OrderResult</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/live/exchange.py</code> <pre><code>def new_order(\n    self,\n    size: float,\n    type: OrderType | None = OrderType.Market,\n    limit: float | None = None,\n    stop: float | None = None,\n    sl: float | None = None,\n    tp: float | None = None,\n    tag: str | None = None,\n    data: DataFeed | None = None,\n    **kwargs,\n) -&gt; OrderResult:\n    \"\"\"Place new order to server\n\n    Args:\n        size (float): _description_\n        type (OrderType | None, optional): _description_. Defaults to OrderType.Market.\n        limit (float | None, optional): _description_. Defaults to None.\n        stop (float | None, optional): _description_. Defaults to None.\n        sl (float | None, optional): _description_. Defaults to None.\n        tp (float | None, optional): _description_. Defaults to None.\n        tag (str | None, optional): _description_. Defaults to None.\n        data (DataFeed | None, optional): _description_. Defaults to None.\n\n    Returns:\n        OrderResult: _description_\n    \"\"\"\n    if not data:\n        data = self.data\n\n    if type == OrderType.Market:\n        limit = 0\n        stop = 0\n\n    order = self._order_cls(\n        id=-1,\n        exchange=self,\n        data=data,\n        size=size,\n        type=type,\n        limit_price=limit,\n        stop_price=stop,\n        sl_price=sl,\n        tp_price=tp,\n        tag=tag,\n        **kwargs,\n    )\n    ok = order.place()\n\n    # if __debug__:\n    #     logger.info(\"New order %s at %s\", order, self.data.now)\n\n    return ok\n</code></pre>"},{"location":"reference/exchange/live/exchange/#lettrade.exchange.live.exchange.LiveExchange.next_next","title":"next_next","text":"<pre><code>next_next()\n</code></pre> <p>Call after strategy.next()</p> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def next_next(self):\n    \"\"\"Call after strategy.next()\"\"\"\n    self._account.next_next()\n</code></pre>"},{"location":"reference/exchange/live/exchange/#lettrade.exchange.live.exchange.LiveExchange.on_execution","title":"on_execution","text":"<pre><code>on_execution(\n    execution: Execution,\n    broadcast: bool | None = True,\n    **kwargs\n) -&gt; None\n</code></pre> <p>Receive Execution event from exchange then store and notify Brain</p> <p>Parameters:</p> <ul> <li> <code>execution</code>               (<code>Execution</code>)           \u2013            <p>description</p> </li> <li> <code>broadcast</code>               (<code>bool | None</code>, default:                   <code>True</code> )           \u2013            <p>description. Defaults to True.</p> </li> </ul> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def on_execution(\n    self,\n    execution: Execution,\n    broadcast: bool | None = True,\n    **kwargs,\n) -&gt; None:\n    \"\"\"Receive Execution event from exchange then store and notify Brain\n\n    Args:\n        execution (Execution): _description_\n        broadcast (bool | None, optional): _description_. Defaults to True.\n    \"\"\"\n    self.on_executions(executions=[execution], broadcast=broadcast, **kwargs)\n</code></pre>"},{"location":"reference/exchange/live/exchange/#lettrade.exchange.live.exchange.LiveExchange.on_executions","title":"on_executions","text":"<pre><code>on_executions(\n    executions: list[Execution],\n    broadcast: bool | None = True,\n    **kwargs\n) -&gt; None\n</code></pre> <p>Receive Execution event from exchange then store and notify Brain</p> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def on_executions(\n    self,\n    executions: list[Execution],\n    broadcast: bool | None = True,\n    **kwargs,\n) -&gt; None:\n    \"\"\"\n    Receive Execution event from exchange then store and notify Brain\n    \"\"\"\n    for execution in executions:\n        if not isinstance(execution, Execution):\n            raise RuntimeError(f\"{execution} is not instance of type Execution\")\n\n        if execution.id in self.executions:\n            # Merge to keep Execution handler for strategy using\n            # when strategy want to store Execution object\n            # and object will be automatic update directly\n            self.executions[execution.id].merge(execution)\n            execution = self.executions[execution.id]\n        else:\n            self.executions[execution.id] = execution\n\n    if self._state != ExchangeState.Run:\n        return\n\n    if broadcast:\n        self._brain.on_executions(executions)\n</code></pre>"},{"location":"reference/exchange/live/exchange/#lettrade.exchange.live.exchange.LiveExchange.on_order","title":"on_order","text":"<pre><code>on_order(\n    order: Order, broadcast: bool | None = True, **kwargs\n) -&gt; None\n</code></pre> <p>Receive order event from exchange then store and notify Brain</p> <p>Parameters:</p> <ul> <li> <code>order</code>               (<code>Order</code>)           \u2013            <p>description</p> </li> <li> <code>broadcast</code>               (<code>bool | None</code>, default:                   <code>True</code> )           \u2013            <p>description. Defaults to True.</p> </li> </ul> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def on_order(\n    self,\n    order: Order,\n    broadcast: bool | None = True,\n    **kwargs,\n) -&gt; None:\n    \"\"\"Receive order event from exchange then store and notify Brain\n\n    Args:\n        order (Order): _description_\n        broadcast (bool | None, optional): _description_. Defaults to True.\n    \"\"\"\n    self.on_orders(orders=[order], broadcast=broadcast, **kwargs)\n</code></pre>"},{"location":"reference/exchange/live/exchange/#lettrade.exchange.live.exchange.LiveExchange.on_orders","title":"on_orders","text":"<pre><code>on_orders(\n    orders: list[Order],\n    broadcast: bool | None = True,\n    **kwargs\n) -&gt; None\n</code></pre> <p>Receive orders event from exchange then store and notify Brain</p> <p>Parameters:</p> <ul> <li> <code>orders</code>               (<code>list[Order]</code>)           \u2013            <p>description</p> </li> <li> <code>broadcast</code>               (<code>bool | None</code>, default:                   <code>True</code> )           \u2013            <p>description. Defaults to True.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def on_orders(\n    self,\n    orders: list[Order],\n    broadcast: bool | None = True,\n    **kwargs,\n) -&gt; None:\n    \"\"\"Receive orders event from exchange then store and notify Brain\n\n    Args:\n        orders (list[Order]): _description_\n        broadcast (bool | None, optional): _description_. Defaults to True.\n\n    Raises:\n        RuntimeError: _description_\n    \"\"\"\n    for order in orders:\n        if not isinstance(order, Order):\n            raise RuntimeError(f\"{order} is not instance of type Order\")\n\n        if order.is_closed:\n            if order.id in self.history_orders:\n                logger.warning(\"Order closed recall: %s\", order)\n\n            self.history_orders[order.id] = order\n            if order.id in self.orders:\n                del self.orders[order.id]\n        else:\n            if order.id in self.history_orders:\n                raise RuntimeError(f\"Order {order.id} closed\")\n\n            if order.id in self.orders:\n                # Merge to keep Order handler for strategy using\n                # when strategy want to store Order object\n                # and object will be automatic update directly\n                self.orders[order.id].merge(order)\n                order = self.orders[order.id]\n            else:\n                self.orders[order.id] = order\n\n    if self._state != ExchangeState.Run:\n        return\n\n    if broadcast:\n        self._brain.on_orders(orders)\n</code></pre>"},{"location":"reference/exchange/live/exchange/#lettrade.exchange.live.exchange.LiveExchange.on_position","title":"on_position","text":"<pre><code>on_position(\n    position: Position,\n    broadcast: bool | None = True,\n    **kwargs\n) -&gt; None\n</code></pre> <p>Receive Position event from exchange then store and notify Brain</p> <p>Parameters:</p> <ul> <li> <code>position</code>               (<code>Position</code>)           \u2013            <p>new comming <code>Position</code></p> </li> <li> <code>broadcast</code>               (<code>bool | None</code>, default:                   <code>True</code> )           \u2013            <p>Flag notify to Brain. Defaults to True.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>validate <code>Position</code> instance</p> </li> </ul> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def on_position(\n    self,\n    position: Position,\n    broadcast: bool | None = True,\n    **kwargs,\n) -&gt; None:\n    \"\"\"Receive Position event from exchange then store and notify Brain\n\n    Args:\n        position (Position): new comming `Position`\n        broadcast (bool | None, optional): Flag notify to Brain. Defaults to True.\n\n    Raises:\n        RuntimeError: validate `Position` instance\n    \"\"\"\n    self.on_positions(positions=[position], broadcast=broadcast, **kwargs)\n</code></pre>"},{"location":"reference/exchange/live/exchange/#lettrade.exchange.live.exchange.LiveExchange.on_positions","title":"on_positions","text":"<pre><code>on_positions(\n    positions: list[Position],\n    broadcast: bool | None = True,\n    **kwargs\n) -&gt; None\n</code></pre> <p>Receive Positions event from exchange then store and notify Brain</p> <p>Parameters:</p> <ul> <li> <code>positions</code>               (<code>list[Position]</code>)           \u2013            <p>list of new comming <code>Position</code></p> </li> <li> <code>broadcast</code>               (<code>bool | None</code>, default:                   <code>True</code> )           \u2013            <p>Flag notify to Brain. Defaults to True.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>validate <code>Position</code> instance</p> </li> </ul> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def on_positions(\n    self,\n    positions: list[Position],\n    broadcast: bool | None = True,\n    **kwargs,\n) -&gt; None:\n    \"\"\"Receive Positions event from exchange then store and notify Brain\n\n    Args:\n        positions (list[Position]): list of new comming `Position`\n        broadcast (bool | None, optional): Flag notify to Brain. Defaults to True.\n\n    Raises:\n        RuntimeError: validate `Position` instance\n    \"\"\"\n    for position in positions:\n        if not isinstance(position, Position):\n            raise RuntimeError(f\"{position} is not instance of type Position\")\n\n        if position.is_exited:\n            if position.id in self.history_positions:\n                logger.warning(\"Position exited recall: %s\", position)\n\n            self.history_positions[position.id] = position\n            if position.id in self.positions:\n                del self.positions[position.id]\n\n            # self._account._on_position_exit(position)\n        else:\n            if position.id in self.history_positions:\n                raise RuntimeError(f\"Position {position.id} closed: {position}\")\n            if position.id in self.positions:\n                # Merge to keep Position handler for strategy using\n                # when strategy want to store Position object\n                # and object will be automatic update directly\n                self.positions[position.id].merge(position)\n                position = self.positions[position.id]\n            else:\n                self.positions[position.id] = position\n                # self._account._on_position_entry(position)\n\n    self._account.on_positions(positions)\n\n    if self._state != ExchangeState.Run:\n        return\n\n    if broadcast:\n        self._brain.on_positions(positions)\n</code></pre>"},{"location":"reference/exchange/live/exchange/#lettrade.exchange.live.exchange.LiveExchange.start","title":"start","text":"<pre><code>start() -&gt; None\n</code></pre> <p>Start Live exchange by: Sync positions from server</p> Source code in <code>lettrade/exchange/live/exchange.py</code> <pre><code>def start(self) -&gt; None:\n    \"\"\"Start Live exchange by: Sync positions from server\"\"\"\n    self._api.start(exchange=self)\n    return super().start()\n</code></pre>"},{"location":"reference/exchange/live/exchange/#lettrade.exchange.live.exchange.LiveExchange.stop","title":"stop","text":"<pre><code>stop() -&gt; None\n</code></pre> <p>Stop Exchange</p> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def stop(self) -&gt; None:\n    \"\"\"Stop Exchange\"\"\"\n    self._state = ExchangeState.Stop\n    self._account.stop()\n</code></pre>"},{"location":"reference/exchange/live/feeder/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> feeder","text":""},{"location":"reference/exchange/live/feeder/#lettrade.exchange.live.feeder","title":"feeder","text":""},{"location":"reference/exchange/live/feeder/#lettrade.exchange.live.feeder.LiveDataFeeder","title":"LiveDataFeeder","text":"<pre><code>LiveDataFeeder(\n    api: LiveAPI,\n    tick: bool = 5,\n    start_size: int = 500,\n    **kwargs\n)\n</code></pre> <p>               Bases: <code>DataFeeder</code></p> <pre><code>tick == 0: wait until new bar change value\ntick &gt; 0: sleep tick time (in seconds) then update\n</code></pre> Source code in <code>lettrade/exchange/live/feeder.py</code> <pre><code>def __init__(\n    self,\n    api: LiveAPI,\n    tick: bool = 5,\n    start_size: int = 500,\n    **kwargs,\n) -&gt; None:\n    \"\"\"\n    tick:\n        tick &lt; 0: no tick, just get completed bar\n        tick == 0: wait until new bar change value\n        tick &gt; 0: sleep tick time (in seconds) then update\n    \"\"\"\n    super().__init__()\n    self._api = api\n    self._tick = tick\n    self._start_size = start_size\n    self._config = kwargs\n\n    if isinstance(self._tick, int):\n        self._wait_timeframe = TimeFrame(f\"{self._tick}s\")\n    else:\n        self._wait_timeframe = None\n</code></pre>"},{"location":"reference/exchange/live/feeder/#lettrade.exchange.live.feeder.LiveDataFeeder.is_continous","title":"is_continous  <code>property</code>","text":"<pre><code>is_continous\n</code></pre> <p>Flag check is realtime continous datafeeder</p>"},{"location":"reference/exchange/live/feeder/#lettrade.exchange.live.feeder.LiveDataFeeder.instance","title":"instance  <code>classmethod</code>","text":"<pre><code>instance(\n    api: LiveAPI | None = None,\n    api_kwargs: dict | None = None,\n    **kwargs\n) -&gt; LiveDataFeed\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>api</code>               (<code>LiveAPI</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>api_kwargs</code>               (<code>dict</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>Missing api requirement</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>LiveDataFeed</code> (              <code>LiveDataFeed</code> )          \u2013            <p>DataFeed object</p> </li> </ul> Source code in <code>lettrade/exchange/live/feeder.py</code> <pre><code>@classmethod\ndef instance(\n    cls,\n    api: LiveAPI | None = None,\n    api_kwargs: dict | None = None,\n    **kwargs,\n) -&gt; \"LiveDataFeed\":\n    \"\"\"_summary_\n\n    Args:\n        api (LiveAPI, optional): _description_. Defaults to None.\n        api_kwargs (dict, optional): _description_. Defaults to None.\n\n    Raises:\n        RuntimeError: Missing api requirement\n\n    Returns:\n        LiveDataFeed: DataFeed object\n    \"\"\"\n    if api is None:\n        if api_kwargs is None:\n            raise RuntimeError(\"api or api_kwargs cannot missing\")\n        api = cls._api_cls(**api_kwargs)\n    obj = cls(api=api, **kwargs)\n    return obj\n</code></pre>"},{"location":"reference/exchange/live/live/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> live","text":""},{"location":"reference/exchange/live/live/#lettrade.exchange.live.live","title":"live","text":""},{"location":"reference/exchange/live/live/#lettrade.exchange.live.live.LetTradeLive","title":"LetTradeLive","text":"<pre><code>LetTradeLive(\n    datas: DataFeed | list[DataFeed] | str | list[str],\n    strategy: type[Strategy],\n    feeder: type[DataFeeder],\n    exchange: type[Exchange],\n    account: type[Account],\n    commander: type[Commander] | None = None,\n    stats: type[BotStatistic] = BotStatistic,\n    plotter: type[Plotter] | None = None,\n    name: str | None = None,\n    bot: type[LetTradeBot] = LetTradeBot,\n    **kwargs\n)\n</code></pre> <p>               Bases: <code>LetTrade</code></p> <p>Help to maintain live bots</p> <p>Parameters:</p> <ul> <li> <code>datas</code>               (<code>DataFeed | list[DataFeed] | str | list[str]</code>)           \u2013            <p>description</p> </li> <li> <code>strategy</code>               (<code>type[Strategy]</code>)           \u2013            <p>description</p> </li> <li> <code>feeder</code>               (<code>type[DataFeeder]</code>)           \u2013            <p>description</p> </li> <li> <code>exchange</code>               (<code>type[Exchange]</code>)           \u2013            <p>description</p> </li> <li> <code>account</code>               (<code>type[Account]</code>)           \u2013            <p>description</p> </li> <li> <code>commander</code>               (<code>type[Commander] | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>stats</code>               (<code>type[BotStatistic]</code>, default:                   <code>BotStatistic</code> )           \u2013            <p>description. Defaults to BotStatistic.</p> </li> <li> <code>plotter</code>               (<code>type[Plotter] | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>name</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>bot</code>               (<code>type[LetTradeBot]</code>, default:                   <code>LetTradeBot</code> )           \u2013            <p>description. Defaults to LetTradeBot.</p> </li> </ul> Source code in <code>lettrade/lettrade.py</code> <pre><code>def __init__(\n    self,\n    datas: DataFeed | list[DataFeed] | str | list[str],\n    strategy: type[Strategy],\n    feeder: type[DataFeeder],\n    exchange: type[Exchange],\n    account: type[Account],\n    commander: type[Commander] | None = None,\n    stats: type[BotStatistic] = BotStatistic,\n    plotter: type[Plotter] | None = None,\n    name: str | None = None,\n    bot: type[LetTradeBot] = LetTradeBot,\n    **kwargs,\n) -&gt; None:\n    \"\"\"_summary_\n\n    Args:\n        datas (DataFeed | list[DataFeed] | str | list[str]): _description_\n        strategy (type[Strategy]): _description_\n        feeder (type[DataFeeder]): _description_\n        exchange (type[Exchange]): _description_\n        account (type[Account]): _description_\n        commander (type[Commander] | None, optional): _description_. Defaults to None.\n        stats (type[BotStatistic], optional): _description_. Defaults to BotStatistic.\n        plotter (type[Plotter] | None, optional): _description_. Defaults to None.\n        name (str | None, optional): _description_. Defaults to None.\n        bot (type[LetTradeBot], optional): _description_. Defaults to LetTradeBot.\n    \"\"\"\n    self._kwargs = kwargs\n    self._kwargs[\"strategy_cls\"] = strategy\n    self._kwargs[\"feeder_cls\"] = feeder\n    self._kwargs[\"exchange_cls\"] = exchange\n    self._kwargs[\"account_cls\"] = account\n    self._kwargs[\"commander_cls\"] = commander\n    self._kwargs[\"stats_cls\"] = stats\n    self._kwargs[\"plotter_cls\"] = plotter\n    self._kwargs[\"bot_cls\"] = bot\n    self._kwargs[\"name\"] = name\n\n    self._kwargs[\"datas\"] = self._init_datafeeds(datas)\n</code></pre>"},{"location":"reference/exchange/live/live/#lettrade.exchange.live.live.LetTradeLive.plot","title":"plot","text":"<pre><code>plot(*args, jump: dict | None = None, **kwargs)\n</code></pre> <p>Plot strategy/optimize result</p> BotPlotter <p>Miror of BotPlotter.plot(). Plotly implement PlotlyBotPlotter.plot().</p> <p>Args:     <code>jump</code> (dict | None, optional): Miror of BotPlotter.jump()</p> <p>Example:     Jump to position_id         <pre><code>lt.plot(\n    jump=dict(position_id=1, range=300),\n    layout=dict(height=2000),\n)\n</code></pre></p> OptimizePlotter <p>Miror of OptimizePlotter.plot(). Plotly implement PlotlyOptimizePlotter.plot().</p> <p>Example:         <pre><code>lt.plot(layout=dict(height=2000))\n</code></pre></p> Source code in <code>lettrade/lettrade.py</code> <pre><code>def plot(self, *args, jump: dict | None = None, **kwargs):\n    \"\"\"Plot strategy/optimize result\n\n    BotPlotter:\n        Miror of [BotPlotter.plot()](site:/reference/plot/bot/#lettrade.plot.bot.BotPlotter.plot).\n        Plotly implement [PlotlyBotPlotter.plot()](site:/reference/plot/plotly/plotly/#lettrade.plot.plotly.plotly.PlotlyBotPlotter.plot).\n\n        Args:\n            `jump` (dict | None, optional): Miror of [BotPlotter.jump()](site:/reference/plot/bot/#lettrade.plot.bot.BotPlotter.jump)\n\n        Example:\n            Jump to position_id\n                ```python\n                lt.plot(\n                    jump=dict(position_id=1, range=300),\n                    layout=dict(height=2000),\n                )\n                ```\n\n    OptimizePlotter:\n        Miror of [OptimizePlotter.plot()](site:/reference/plot/optimize/#lettrade.plot.optimize.OptimizePlotter.plot).\n        Plotly implement [PlotlyOptimizePlotter.plot()](site:/reference/exchange/backtest/plotly/optimize/#lettrade.exchange.backtest.plotly.optimize.PlotlyOptimizePlotter.plot).\n\n        Example:\n                ```python\n                lt.plot(layout=dict(height=2000))\n                ```\n    \"\"\"\n    if __debug__:\n        from .utils.docs import is_docs_session\n\n        if is_docs_session():\n            return\n\n    self.plotter.plot(*args, jump=jump, **kwargs)\n</code></pre>"},{"location":"reference/exchange/live/live/#lettrade.exchange.live.live.LetTradeLive.run","title":"run","text":"<pre><code>run(worker: int | None = None, **kwargs)\n</code></pre> <p>Run LetTrade in single or multiple processing</p> <p>Parameters:</p> <ul> <li> <code>worker</code>               (<code>int | None</code>, default:                   <code>None</code> )           \u2013            <p>Number of processing. Defaults to None.</p> </li> </ul> Source code in <code>lettrade/lettrade.py</code> <pre><code>def run(self, worker: int | None = None, **kwargs):\n    \"\"\"Run LetTrade in single or multiple processing\n\n    Args:\n        worker (int | None, optional): Number of processing. Defaults to None.\n    \"\"\"\n    if worker or isinstance(self.data, list):\n        if not isinstance(self.data, list):\n            # self.data = self.datas\n            self.datas = [self.data]\n\n        worker = self._max_workers(worker)\n\n        self._multiprocess()\n\n        datas_source = self._kwargs.pop(\"datas\")\n        with ProcessPoolExecutor(max_workers=worker) as executor:\n            futures = [\n                executor.submit(\n                    self._bot_cls.run_bot,\n                    datas=datas,\n                    id=i,\n                    result=\"str\",\n                    **self._kwargs,\n                )\n                for i, datas in enumerate(datas_source)\n            ]\n            for future in futures:\n                result = future.result()\n                print(result)\n    else:\n        self._bot = self._bot_cls.run_bot(\n            bot=self._bot,\n            result=\"bot\",\n            **self._kwargs,\n        )\n        print(str(self._bot.stats))\n</code></pre>"},{"location":"reference/exchange/live/live/#lettrade.exchange.live.live.LetTradeLive.start","title":"start","text":"<pre><code>start(force: bool = False)\n</code></pre> <p>Start LetTrade by init bot object and loading datafeeds</p> <p>Parameters:</p> <ul> <li> <code>force</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>description. Defaults to False.</p> </li> </ul> Source code in <code>lettrade/lettrade.py</code> <pre><code>def start(self, force: bool = False):\n    \"\"\"Start LetTrade by init bot object and loading datafeeds\n\n    Args:\n        force (bool, optional): _description_. Defaults to False.\n    \"\"\"\n    if force and self._bot is not None:\n        self._bot = None\n\n    self._bot = self._bot_cls.start_bot(bot=self._bot, **self._kwargs)\n</code></pre>"},{"location":"reference/exchange/live/live/#lettrade.exchange.live.live.LetTradeLive.stop","title":"stop","text":"<pre><code>stop()\n</code></pre> <p>Stop LetTrade</p> Source code in <code>lettrade/lettrade.py</code> <pre><code>def stop(self):\n    \"\"\"Stop LetTrade\"\"\"\n    if self._bot is not None:\n        return self._bot.stop()\n    if self.stats:\n        self.stats.stop()\n</code></pre>"},{"location":"reference/exchange/live/live/#lettrade.exchange.live.live.LetTradeLiveBot","title":"LetTradeLiveBot","text":"<pre><code>LetTradeLiveBot(api: LiveAPI | None = LiveAPI, **kwargs)\n</code></pre> <p>               Bases: <code>LetTradeBot</code></p> <p>Live bot object</p> <p>Parameters:</p> <ul> <li> <code>api</code>               (<code>LiveAPI | None</code>, default:                   <code>LiveAPI</code> )           \u2013            <p>description. Defaults to LiveAPI.</p> </li> </ul> Source code in <code>lettrade/exchange/live/live.py</code> <pre><code>def __init__(self, api: LiveAPI | None = LiveAPI, **kwargs) -&gt; None:\n    \"\"\"_summary_\n\n    Args:\n        api (LiveAPI | None, optional): _description_. Defaults to LiveAPI.\n    \"\"\"\n    super().__init__(**kwargs)\n\n    if issubclass(api, LiveAPI):\n        self._api = api(**self._kwargs.get(\"api_kwargs\", {}))\n    else:\n        self._api = api\n\n    self._kwargs.setdefault(\"feeder_kwargs\", dict()).update(api=self._api)\n    self._kwargs.setdefault(\"exchange_kwargs\", dict()).update(api=self._api)\n    self._kwargs.setdefault(\"account_kwargs\", dict()).update(api=self._api)\n\n    for data in self.datas:\n        data._api = self._api\n</code></pre>"},{"location":"reference/exchange/live/live/#lettrade.exchange.live.live.LetTradeLiveBot.account","title":"account  <code>instance-attribute</code>","text":"<pre><code>account: Account\n</code></pre> <p>Trading account handler</p>"},{"location":"reference/exchange/live/live/#lettrade.exchange.live.live.LetTradeLiveBot.brain","title":"brain  <code>instance-attribute</code>","text":"<pre><code>brain: Brain\n</code></pre> <p>Brain of bot</p>"},{"location":"reference/exchange/live/live/#lettrade.exchange.live.live.LetTradeLiveBot.commander","title":"commander  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>commander: Commander | None = None\n</code></pre> <p>Control the bot</p>"},{"location":"reference/exchange/live/live/#lettrade.exchange.live.live.LetTradeLiveBot.data","title":"data  <code>instance-attribute</code>","text":"<pre><code>data: DataFeed = datas[0]\n</code></pre> <p>Main DataFeed for bot</p>"},{"location":"reference/exchange/live/live/#lettrade.exchange.live.live.LetTradeLiveBot.exchange","title":"exchange  <code>instance-attribute</code>","text":"<pre><code>exchange: Exchange\n</code></pre> <p>Trading exchange and events</p>"},{"location":"reference/exchange/live/live/#lettrade.exchange.live.live.LetTradeLiveBot.feeder","title":"feeder  <code>instance-attribute</code>","text":"<pre><code>feeder: DataFeeder\n</code></pre> <p>DataFeeder help to handle <code>datas</code></p>"},{"location":"reference/exchange/live/live/#lettrade.exchange.live.live.LetTradeLiveBot.plotter","title":"plotter  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>plotter: Plotter | None = None\n</code></pre> <p>Plot graphic results</p>"},{"location":"reference/exchange/live/live/#lettrade.exchange.live.live.LetTradeLiveBot.strategy","title":"strategy  <code>instance-attribute</code>","text":"<pre><code>strategy: Strategy\n</code></pre> <p>Strategy</p>"},{"location":"reference/exchange/live/live/#lettrade.exchange.live.live.LetTradeLiveBot.new_bot","title":"new_bot  <code>classmethod</code>","text":"<pre><code>new_bot(\n    datas: list[DataFeed],\n    strategy_cls: type[Strategy],\n    feeder_cls: type[DataFeeder],\n    exchange_cls: type[Exchange],\n    account_cls: type[Account],\n    commander_cls: type[Commander],\n    plotter_cls: type[Plotter],\n    stats_cls: type[BotStatistic],\n    name: str | None = None,\n    **kwargs\n) -&gt; LetTradeBot\n</code></pre> <p>Create new bot object</p> <p>Parameters:</p> <ul> <li> <code>datas</code>               (<code>list[DataFeed]</code>)           \u2013            <p>description</p> </li> <li> <code>strategy_cls</code>               (<code>type[Strategy]</code>)           \u2013            <p>description</p> </li> <li> <code>feeder_cls</code>               (<code>type[DataFeeder]</code>)           \u2013            <p>description</p> </li> <li> <code>exchange_cls</code>               (<code>type[Exchange]</code>)           \u2013            <p>description</p> </li> <li> <code>account_cls</code>               (<code>type[Account]</code>)           \u2013            <p>description</p> </li> <li> <code>commander_cls</code>               (<code>type[Commander]</code>)           \u2013            <p>description</p> </li> <li> <code>plotter_cls</code>               (<code>type[Plotter]</code>)           \u2013            <p>description</p> </li> <li> <code>stats_cls</code>               (<code>type[BotStatistic]</code>)           \u2013            <p>description</p> </li> <li> <code>name</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>LetTradeBot</code> (              <code>LetTradeBot</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/bot.py</code> <pre><code>@classmethod\ndef new_bot(\n    cls,\n    datas: list[DataFeed],\n    strategy_cls: type[Strategy],\n    feeder_cls: type[DataFeeder],\n    exchange_cls: type[Exchange],\n    account_cls: type[Account],\n    commander_cls: type[Commander],\n    plotter_cls: type[Plotter],\n    stats_cls: type[BotStatistic],\n    name: str | None = None,\n    **kwargs,\n) -&gt; \"LetTradeBot\":\n    \"\"\"Create new bot object\n\n    Args:\n        datas (list[DataFeed]): _description_\n        strategy_cls (type[Strategy]): _description_\n        feeder_cls (type[DataFeeder]): _description_\n        exchange_cls (type[Exchange]): _description_\n        account_cls (type[Account]): _description_\n        commander_cls (type[Commander]): _description_\n        plotter_cls (type[Plotter]): _description_\n        stats_cls (type[BotStatistic]): _description_\n        name (str | None, optional): _description_. Defaults to None.\n\n    Returns:\n        LetTradeBot: _description_\n    \"\"\"\n    bot = cls(\n        strategy=strategy_cls,\n        datas=datas,\n        feeder=feeder_cls,\n        exchange=exchange_cls,\n        account=account_cls,\n        commander=commander_cls,\n        plotter=plotter_cls,\n        stats=stats_cls,\n        name=name,\n        **kwargs,\n    )\n    return bot\n</code></pre>"},{"location":"reference/exchange/live/live/#lettrade.exchange.live.live.LetTradeLiveBot.plot","title":"plot","text":"<pre><code>plot(*args, **kwargs)\n</code></pre> <p>Plot bot result</p> Source code in <code>lettrade/bot.py</code> <pre><code>def plot(self, *args, **kwargs):\n    \"\"\"Plot bot result\"\"\"\n    if __debug__:\n        from .utils.docs import is_docs_session\n\n        if is_docs_session():\n            return\n\n    self.plotter.plot(*args, **kwargs)\n</code></pre>"},{"location":"reference/exchange/live/live/#lettrade.exchange.live.live.LetTradeLiveBot.run","title":"run","text":"<pre><code>run()\n</code></pre> <p>Run bot</p> Source code in <code>lettrade/bot.py</code> <pre><code>def run(self):\n    \"\"\"Run bot\"\"\"\n    if self.commander:\n        self.commander.start()\n\n    self.brain.run()\n\n    if self.commander:\n        self.commander.stop()\n\n    if self._stats_cls:\n        self.stats.compute()\n</code></pre>"},{"location":"reference/exchange/live/live/#lettrade.exchange.live.live.LetTradeLiveBot.run_bot","title":"run_bot  <code>classmethod</code>","text":"<pre><code>run_bot(\n    bot: LetTradeBot | None = None,\n    datas: list[DataFeed] | None = None,\n    id: int | None = None,\n    name: str | None = None,\n    result: Literal[\"str\", \"stats\", \"bot\", None] = \"str\",\n    **kwargs\n) -&gt; LetTradeBot | BotStatistic | str | None\n</code></pre> <p>Run bot object</p> <p>Parameters:</p> <ul> <li> <code>bot</code>               (<code>LetTradeBot | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>datas</code>               (<code>list[DataFeed] | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>id</code>               (<code>int | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>name</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>result</code>               (<code>Literal['str', 'stats', 'bot', None]</code>, default:                   <code>'str'</code> )           \u2013            <p>description. Defaults to \"str\".</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>LetTradeBot | BotStatistic | str | None</code>           \u2013            <p>LetTradeBot | BotStatistic | str | None: Return value will be pickle across multiprocessing. The cost higher from <code>str</code>, <code>stats</code> object, <code>bot</code> object</p> </li> </ul> Source code in <code>lettrade/bot.py</code> <pre><code>@classmethod\ndef run_bot(\n    cls,\n    bot: \"LetTradeBot | None\" = None,\n    datas: list[DataFeed] | None = None,\n    id: int | None = None,\n    name: str | None = None,\n    result: Literal[\"str\", \"stats\", \"bot\", None] = \"str\",\n    **kwargs,\n) -&gt; \"LetTradeBot | BotStatistic | str | None\":\n    \"\"\"Run bot object\n\n    Args:\n        bot (LetTradeBot | None, optional): _description_. Defaults to None.\n        datas (list[DataFeed] | None, optional): _description_. Defaults to None.\n        id (int | None, optional): _description_. Defaults to None.\n        name (str | None, optional): _description_. Defaults to None.\n        result (Literal[\"str\", \"stats\", \"bot\", None], optional): _description_. Defaults to \"str\".\n\n    Returns:\n        LetTradeBot | BotStatistic | str | None: Return value will be pickle across multiprocessing.\n            The cost higher from `str`, `stats` object, `bot` object\n    \"\"\"\n    # Set name for current processing\n    if name is None:\n        d = datas[0] if datas else bot.data\n        name = f\"{id}-{os.getpid()}-{d.name}\"\n\n    if bot is None:\n        bot = cls.start_bot(\n            datas=datas,\n            name=name,\n            **kwargs,\n        )\n\n    # bot\n    bot.run(**kwargs.get(\"run_kwargs\", {}))\n\n    # Return type\n    if result == \"stats\":\n        return bot.stats\n    if result == \"str\":\n        return str(bot.stats)\n\n    return bot\n</code></pre>"},{"location":"reference/exchange/live/live/#lettrade.exchange.live.live.LetTradeLiveBot.start","title":"start","text":"<pre><code>start()\n</code></pre> <p>Start bot</p> Source code in <code>lettrade/bot.py</code> <pre><code>def start(self):\n    \"\"\"Start bot\"\"\"\n    if not hasattr(self, \"brain\"):\n        self.init()\n\n    self.brain.start()\n\n    if __debug__:\n        logger.debug(\"Bot %s started with %d datas\", self._name, len(self.datas))\n</code></pre>"},{"location":"reference/exchange/live/live/#lettrade.exchange.live.live.LetTradeLiveBot.start_bot","title":"start_bot  <code>classmethod</code>","text":"<pre><code>start_bot(\n    bot: LetTradeBot | None = None, **kwargs\n) -&gt; LetTradeBot\n</code></pre> <p>Init and start bot object</p> <p>Parameters:</p> <ul> <li> <code>bot</code>               (<code>LetTradeBot | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>LetTradeBot</code> (              <code>LetTradeBot</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/bot.py</code> <pre><code>@classmethod\ndef start_bot(\n    cls,\n    bot: \"LetTradeBot | None\" = None,\n    **kwargs,\n) -&gt; \"LetTradeBot\":\n    \"\"\"Init and start bot object\n\n    Args:\n        bot (LetTradeBot | None, optional): _description_. Defaults to None.\n\n    Returns:\n        LetTradeBot: _description_\n    \"\"\"\n    if bot is None:\n        bot = cls.new_bot(**kwargs)\n    bot.init(**kwargs.get(\"init_kwargs\", {}))\n    bot.start()\n    return bot\n</code></pre>"},{"location":"reference/exchange/live/live/#lettrade.exchange.live.live.LetTradeLiveBot.stop","title":"stop","text":"<pre><code>stop()\n</code></pre> <p>Stop bot</p> Source code in <code>lettrade/bot.py</code> <pre><code>def stop(self):\n    \"\"\"Stop bot\"\"\"\n    self.brain.stop()\n    if self.plotter is not None:\n        self.plotter.stop()\n</code></pre>"},{"location":"reference/exchange/live/live/#lettrade.exchange.live.live.let_live","title":"let_live","text":"<pre><code>let_live(\n    datas: set[set[str]],\n    strategy: type[Strategy],\n    *,\n    commander: Commander | None = None,\n    stats: type[BotStatistic] = BotStatistic,\n    plotter: type[Plotter] | None = None,\n    bot: type[LetTradeLiveBot] = LetTradeLiveBot,\n    lettrade: type[LetTradeLive] = LetTradeLive,\n    api: type[LiveAPI] = LiveAPI,\n    **kwargs\n) -&gt; LetTradeLive\n</code></pre> <p>Help to build <code>LetTradeLive</code></p> <p>Parameters:</p> <ul> <li> <code>datas</code>               (<code>set[set[str]]</code>)           \u2013            <p>description</p> </li> <li> <code>strategy</code>               (<code>type[Strategy]</code>)           \u2013            <p>description</p> </li> <li> <code>commander</code>               (<code>Commander | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>stats</code>               (<code>type[BotStatistic]</code>, default:                   <code>BotStatistic</code> )           \u2013            <p>description. Defaults to BotStatistic.</p> </li> <li> <code>plotter</code>               (<code>type[Plotter] | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>bot</code>               (<code>type[LetTradeLiveBot]</code>, default:                   <code>LetTradeLiveBot</code> )           \u2013            <p>description. Defaults to LetTradeLiveBot.</p> </li> <li> <code>lettrade</code>               (<code>type[LetTradeLive]</code>, default:                   <code>LetTradeLive</code> )           \u2013            <p>description. Defaults to LetTradeLive.</p> </li> <li> <code>api</code>               (<code>type[LiveAPI]</code>, default:                   <code>LiveAPI</code> )           \u2013            <p>description. Defaults to LiveAPI.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>LetTradeLive</code> (              <code>LetTradeLive</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/live/live.py</code> <pre><code>def let_live(\n    datas: set[set[str]],\n    strategy: type[Strategy],\n    *,\n    commander: Commander | None = None,\n    stats: type[BotStatistic] = BotStatistic,\n    plotter: type[Plotter] | None = None,\n    bot: type[LetTradeLiveBot] = LetTradeLiveBot,\n    lettrade: type[LetTradeLive] = LetTradeLive,\n    api: type[LiveAPI] = LiveAPI,\n    **kwargs,\n) -&gt; \"LetTradeLive\":\n    \"\"\"Help to build `LetTradeLive`\n\n    Args:\n        datas (set[set[str]]): _description_\n        strategy (type[Strategy]): _description_\n        commander (Commander | None, optional): _description_. Defaults to None.\n        stats (type[BotStatistic], optional): _description_. Defaults to BotStatistic.\n        plotter (type[Plotter] | None, optional): _description_. Defaults to None.\n        bot (type[LetTradeLiveBot], optional): _description_. Defaults to LetTradeLiveBot.\n        lettrade (type[LetTradeLive], optional): _description_. Defaults to LetTradeLive.\n        api (type[LiveAPI], optional): _description_. Defaults to LiveAPI.\n\n    Returns:\n        LetTradeLive: _description_\n    \"\"\"\n    return lettrade(\n        strategy=strategy,\n        datas=datas,\n        commander=commander,\n        plotter=plotter,\n        stats=stats,\n        bot=bot,\n        api=api,\n        **kwargs,\n    )\n</code></pre>"},{"location":"reference/exchange/live/trade/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> trade","text":""},{"location":"reference/exchange/live/trade/#lettrade.exchange.live.trade","title":"trade","text":""},{"location":"reference/exchange/live/trade/#lettrade.exchange.live.trade.LiveExecution","title":"LiveExecution","text":"<pre><code>LiveExecution(\n    id: str,\n    exchange: LiveExchange,\n    data: LiveDataFeed,\n    size: float,\n    price: float,\n    at: float,\n    order_id: str | None = None,\n    order: Order | None = None,\n    position_id: str | None = None,\n    position: Position | None = None,\n    api: LiveAPI | None = None,\n    raw: object | None = None,\n    **kwargs\n)\n</code></pre> <p>               Bases: <code>_LiveTrade</code>, <code>Execution</code></p> <p>Execution for Live</p> Source code in <code>lettrade/exchange/live/trade.py</code> <pre><code>def __init__(\n    self,\n    id: str,\n    exchange: \"LiveExchange\",\n    data: \"LiveDataFeed\",\n    size: float,\n    price: float,\n    at: float,\n    order_id: str | None = None,\n    order: \"Order | None\" = None,\n    position_id: str | None = None,\n    position: \"Position | None\" = None,\n    # tag: str | None = None,\n    api: LiveAPI | None = None,\n    raw: object | None = None,\n    **kwargs,\n):\n    super().__init__(\n        id=id,\n        exchange=exchange,\n        data=data,\n        size=size,\n        price=price,\n        at=at,\n        order_id=order_id,\n        order=order,\n        position_id=position_id,\n        position=position,\n        api=api,\n        raw=raw,\n        **kwargs,\n    )\n</code></pre>"},{"location":"reference/exchange/live/trade/#lettrade.exchange.live.trade.LiveExecution.is_long","title":"is_long  <code>property</code>","text":"<pre><code>is_long: bool\n</code></pre> <p>True if side is long (size is positive).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True/False</p> </li> </ul>"},{"location":"reference/exchange/live/trade/#lettrade.exchange.live.trade.LiveExecution.is_short","title":"is_short  <code>property</code>","text":"<pre><code>is_short: bool\n</code></pre> <p>True if side is short (size is negative).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/live/trade/#lettrade.exchange.live.trade.LiveExecution.side","title":"side  <code>property</code>","text":"<pre><code>side: TradeSide\n</code></pre> <p>True if side is short (size is negative).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>TradeSide</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/live/trade/#lettrade.exchange.live.trade.LiveExecution.from_raw","title":"from_raw  <code>abstractmethod</code> <code>classmethod</code>","text":"<pre><code>from_raw(raw, exchange: LiveExchange) -&gt; LiveExecution\n</code></pre> <p>Building new LiveExecution from live api raw object</p> <p>Parameters:</p> <ul> <li> <code>raw</code>               (<code>_type_</code>)           \u2013            <p>description</p> </li> <li> <code>exchange</code>               (<code>LiveExchange</code>)           \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>LiveExecution</code> (              <code>LiveExecution</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/live/trade.py</code> <pre><code>@classmethod\n@abstractmethod\ndef from_raw(cls, raw, exchange: \"LiveExchange\") -&gt; \"LiveExecution\":\n    \"\"\"Building new LiveExecution from live api raw object\n\n    Args:\n        raw (_type_): _description_\n        exchange (LiveExchange): _description_\n\n    Returns:\n        LiveExecution: _description_\n    \"\"\"\n    raise NotImplementedError(cls)\n</code></pre>"},{"location":"reference/exchange/live/trade/#lettrade.exchange.live.trade.LiveExecution.merge","title":"merge","text":"<pre><code>merge(other: Execution)\n</code></pre> <p>Merge to keep object handler but not overwrite for Strategy using when Strategy want to store object and object will be automatic update directly</p> Source code in <code>lettrade/exchange/execution.py</code> <pre><code>def merge(self, other: \"Execution\"):\n    \"\"\"\n    Merge to keep object handler but not overwrite for Strategy using when Strategy want to store object and object will be automatic update directly\n    \"\"\"\n    if other is self:\n        return\n\n    if self.id != other.id:\n        raise RuntimeError(f\"Merge difference id {self.id} != {other.id} execution\")\n\n    self.price = other.price\n    self.size = other.size\n\n    if other.at:\n        self.at = other.at\n    if other.order_id:\n        self.order_id = other.order_id\n    if other.order:\n        self.order = other.order\n    if other.position_id:\n        self.position_id = other.position_id\n    if other.position:\n        self.position = other.position\n</code></pre>"},{"location":"reference/exchange/live/trade/#lettrade.exchange.live.trade.LiveOrder","title":"LiveOrder","text":"<pre><code>LiveOrder(\n    id: str,\n    exchange: LiveExchange,\n    data: LiveDataFeed,\n    size: float,\n    state: OrderState = OrderState.Pending,\n    type: OrderType = OrderType.Market,\n    limit_price: float | None = None,\n    stop_price: float | None = None,\n    sl_price: float | None = None,\n    tp_price: float | None = None,\n    parent: Position | None = None,\n    tag: str | None = None,\n    api: LiveAPI | None = None,\n    raw: object | None = None,\n    **kwargs\n)\n</code></pre> <p>               Bases: <code>_LiveTrade</code>, <code>Order</code></p> Source code in <code>lettrade/exchange/live/trade.py</code> <pre><code>def __init__(\n    self,\n    id: str,\n    exchange: \"LiveExchange\",\n    data: \"LiveDataFeed\",\n    size: float,\n    state: OrderState = OrderState.Pending,\n    type: OrderType = OrderType.Market,\n    limit_price: float | None = None,\n    stop_price: float | None = None,\n    sl_price: float | None = None,\n    tp_price: float | None = None,\n    parent: \"Position | None\" = None,\n    tag: str | None = None,\n    api: LiveAPI | None = None,\n    raw: object | None = None,\n    **kwargs,\n):\n    super().__init__(\n        id=id,\n        exchange=exchange,\n        data=data,\n        size=size,\n        state=state,\n        type=type,\n        limit_price=limit_price,\n        stop_price=stop_price,\n        sl_price=sl_price,\n        tp_price=tp_price,\n        parent=parent,\n        tag=tag,\n        api=api,\n        raw=raw,\n        **kwargs,\n    )\n</code></pre>"},{"location":"reference/exchange/live/trade/#lettrade.exchange.live.trade.LiveOrder.is_closed","title":"is_closed  <code>property</code>","text":"<pre><code>is_closed: bool\n</code></pre> <p>Flag to check <code>Order</code> closed</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True if <code>state</code> in [OrderState.Filled, OrderState.Canceled]</p> </li> </ul>"},{"location":"reference/exchange/live/trade/#lettrade.exchange.live.trade.LiveOrder.is_long","title":"is_long  <code>property</code>","text":"<pre><code>is_long: bool\n</code></pre> <p>True if side is long (size is positive).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True/False</p> </li> </ul>"},{"location":"reference/exchange/live/trade/#lettrade.exchange.live.trade.LiveOrder.is_opening","title":"is_opening  <code>property</code>","text":"<pre><code>is_opening: bool\n</code></pre> <p>Flag to check <code>Order</code> still alive</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True if <code>state</code> in [OrderState.Pending, OrderState.Placed, OrderState.Partial]</p> </li> </ul>"},{"location":"reference/exchange/live/trade/#lettrade.exchange.live.trade.LiveOrder.is_short","title":"is_short  <code>property</code>","text":"<pre><code>is_short: bool\n</code></pre> <p>True if side is short (size is negative).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/live/trade/#lettrade.exchange.live.trade.LiveOrder.is_sl_order","title":"is_sl_order  <code>property</code>","text":"<pre><code>is_sl_order: bool\n</code></pre> <p><code>Order</code> is stop-loss order of a <code>Position</code></p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/live/trade/#lettrade.exchange.live.trade.LiveOrder.is_tp_order","title":"is_tp_order  <code>property</code>","text":"<pre><code>is_tp_order: bool\n</code></pre> <p><code>Order</code> is take-profit order of a <code>Position</code></p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/live/trade/#lettrade.exchange.live.trade.LiveOrder.limit","title":"limit  <code>property</code>","text":"<pre><code>limit: float | None\n</code></pre> <p>Getter of limit_price</p> <p>Returns:</p> <ul> <li> <code>float | None</code>           \u2013            <p>float | None: <code>float</code> or <code>None</code></p> </li> </ul>"},{"location":"reference/exchange/live/trade/#lettrade.exchange.live.trade.LiveOrder.place_price","title":"place_price  <code>property</code>","text":"<pre><code>place_price: float | None\n</code></pre> <p>Getter of place_price</p> <p>Returns:</p> <ul> <li> <code>float | None</code>           \u2013            <p>float | None: <code>float</code> or <code>None</code></p> </li> </ul>"},{"location":"reference/exchange/live/trade/#lettrade.exchange.live.trade.LiveOrder.side","title":"side  <code>property</code>","text":"<pre><code>side: TradeSide\n</code></pre> <p>True if side is short (size is negative).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>TradeSide</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/live/trade/#lettrade.exchange.live.trade.LiveOrder.sl","title":"sl  <code>property</code>","text":"<pre><code>sl: float | None\n</code></pre> <p>Getter of sl_price</p> <p>Returns:</p> <ul> <li> <code>float | None</code>           \u2013            <p>float | None: <code>float</code> or <code>None</code></p> </li> </ul>"},{"location":"reference/exchange/live/trade/#lettrade.exchange.live.trade.LiveOrder.stop","title":"stop  <code>property</code>","text":"<pre><code>stop: float | None\n</code></pre> <p>Getter of stop_price</p> <p>Returns:</p> <ul> <li> <code>float | None</code>           \u2013            <p>float | None: <code>float</code> or <code>None</code></p> </li> </ul>"},{"location":"reference/exchange/live/trade/#lettrade.exchange.live.trade.LiveOrder.tp","title":"tp  <code>property</code>","text":"<pre><code>tp: float | None\n</code></pre> <p>Getter of tp_price</p> <p>Returns:</p> <ul> <li> <code>float | None</code>           \u2013            <p>float | None: <code>float</code> or <code>None</code></p> </li> </ul>"},{"location":"reference/exchange/live/trade/#lettrade.exchange.live.trade.LiveOrder.cancel","title":"cancel","text":"<pre><code>cancel(**kwargs) -&gt; OrderResult\n</code></pre> <p>Cancel order</p> <p>Returns:</p> <ul> <li> <code>OrderResult</code> (              <code>OrderResult</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/live/trade.py</code> <pre><code>def cancel(self, **kwargs) -&gt; OrderResult:\n    \"\"\"Cancel order\n\n    Returns:\n        OrderResult: _description_\n    \"\"\"\n    result = self._api.order_close(order=self, **kwargs)\n    return super().cancel(raw=result)\n</code></pre>"},{"location":"reference/exchange/live/trade/#lettrade.exchange.live.trade.LiveOrder.fill","title":"fill","text":"<pre><code>fill(\n    price: float, at: Timestamp, raw: object | None = None\n) -&gt; OrderResult\n</code></pre> <p>Fill <code>Order</code>. Set <code>status</code> to <code>OrderState.Executed</code>. Send event to <code>Exchange</code></p> <p>Parameters:</p> <ul> <li> <code>price</code>               (<code>float</code>)           \u2013            <p>Executed price</p> </li> <li> <code>at</code>               (<code>Timestamp</code>)           \u2013            <p>Executed bar</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>OrderResult</code> (              <code>OrderResult</code> )          \u2013            <p>result of <code>Order</code></p> </li> </ul> Source code in <code>lettrade/exchange/order.py</code> <pre><code>def fill(\n    self,\n    price: float,\n    at: pd.Timestamp,\n    raw: object | None = None,\n) -&gt; \"OrderResult\":\n    \"\"\"Fill `Order`.\n    Set `status` to `OrderState.Executed`.\n    Send event to `Exchange`\n\n    Args:\n        price (float): Executed price\n        at (pd.Timestamp): Executed bar\n\n    Raises:\n        RuntimeError: _description_\n\n    Returns:\n        OrderResult: result of `Order`\n    \"\"\"\n    if self.state != OrderState.Placed:\n        raise RuntimeError(f\"Order {self.id} state {self.state} is not Placed\")\n\n    self.filled_at = at\n    self.filled_price = price\n    self.state = OrderState.Filled\n    self.exchange.on_order(self)\n    return OrderResultOk(order=self, raw=raw)\n</code></pre>"},{"location":"reference/exchange/live/trade/#lettrade.exchange.live.trade.LiveOrder.from_position","title":"from_position  <code>abstractmethod</code> <code>classmethod</code>","text":"<pre><code>from_position(\n    position: LivePosition, sl=None, tp=None\n) -&gt; LiveOrder\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>position</code>               (<code>LivePosition</code>)           \u2013            <p>description</p> </li> <li> <code>sl</code>               (<code>_type_</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>tp</code>               (<code>_type_</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>LiveOrder</code> (              <code>LiveOrder</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/live/trade.py</code> <pre><code>@classmethod\n@abstractmethod\ndef from_position(cls, position: \"LivePosition\", sl=None, tp=None) -&gt; \"LiveOrder\":\n    \"\"\"_summary_\n\n    Args:\n        position (LivePosition): _description_\n        sl (_type_, optional): _description_. Defaults to None.\n        tp (_type_, optional): _description_. Defaults to None.\n\n    Returns:\n        LiveOrder: _description_\n    \"\"\"\n    raise NotImplementedError(cls)\n</code></pre>"},{"location":"reference/exchange/live/trade/#lettrade.exchange.live.trade.LiveOrder.from_raw","title":"from_raw  <code>abstractmethod</code> <code>classmethod</code>","text":"<pre><code>from_raw(raw, exchange: LiveExchange) -&gt; LiveOrder\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>raw</code>               (<code>_type_</code>)           \u2013            <p>description</p> </li> <li> <code>exchange</code>               (<code>LiveExchange</code>)           \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>LiveOrder</code> (              <code>LiveOrder</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/live/trade.py</code> <pre><code>@classmethod\n@abstractmethod\ndef from_raw(cls, raw, exchange: \"LiveExchange\") -&gt; \"LiveOrder\":\n    \"\"\"_summary_\n\n    Args:\n        raw (_type_): _description_\n        exchange (LiveExchange): _description_\n\n    Returns:\n        LiveOrder: _description_\n    \"\"\"\n    raise NotImplementedError(cls)\n</code></pre>"},{"location":"reference/exchange/live/trade/#lettrade.exchange.live.trade.LiveOrder.merge","title":"merge","text":"<pre><code>merge(other: Order)\n</code></pre> <p>Update current <code>Order</code> variables by other <code>Order</code></p> <p>Parameters:</p> <ul> <li> <code>other</code>               (<code>Order</code>)           \u2013            <p>Merge source <code>Order</code></p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>Validate same id</p> </li> </ul> Source code in <code>lettrade/exchange/order.py</code> <pre><code>def merge(self, other: \"Order\"):\n    \"\"\"Update current `Order` variables by other `Order`\n\n    Args:\n        other (Order): Merge source `Order`\n\n    Raises:\n        RuntimeError: Validate same id\n    \"\"\"\n    if other is self:\n        return\n\n    if self.id != other.id:\n        raise RuntimeError(f\"Merge difference id {self.id} != {other.id} order\")\n\n    self.size = other.size\n    self.sl_price = other.sl_price\n    self.tp_price = other.tp_price\n\n    if other.limit_price:\n        self.limit_price = other.limit_price\n    if other.stop_price:\n        self.stop_price = other.stop_price\n    if other.placed_at:\n        self.placed_at = other.placed_at\n\n    if other.filled_price:\n        self.filled_price = other.filled_price\n    if other.filled_at:\n        self.filled_at = other.filled_at\n\n    if other.parent:\n        self.parent = other.parent\n</code></pre>"},{"location":"reference/exchange/live/trade/#lettrade.exchange.live.trade.LivePosition","title":"LivePosition","text":"<pre><code>LivePosition(\n    id: str,\n    exchange: LiveExchange,\n    data: LiveDataFeed,\n    size: float,\n    parent: Order,\n    tag: str | None = None,\n    state: PositionState = PositionState.Open,\n    entry_price: float | None = None,\n    entry_fee: float = 0.0,\n    entry_at: int | None = None,\n    sl_order: Order | None = None,\n    tp_order: Order | None = None,\n    api: LiveAPI | None = None,\n    raw: object | None = None,\n    **kwargs\n)\n</code></pre> <p>               Bases: <code>_LiveTrade</code>, <code>Position</code></p> Source code in <code>lettrade/exchange/live/trade.py</code> <pre><code>def __init__(\n    self,\n    id: str,\n    exchange: \"LiveExchange\",\n    data: \"LiveDataFeed\",\n    size: float,\n    parent: Order,\n    tag: str | None = None,\n    state: PositionState = PositionState.Open,\n    entry_price: float | None = None,\n    entry_fee: float = 0.0,\n    entry_at: int | None = None,\n    sl_order: Order | None = None,\n    tp_order: Order | None = None,\n    api: LiveAPI | None = None,\n    raw: object | None = None,\n    **kwargs,\n):\n    super().__init__(\n        id=id,\n        exchange=exchange,\n        data=data,\n        size=size,\n        parent=parent,\n        tag=tag,\n        state=state,\n        entry_price=entry_price,\n        entry_fee=entry_fee,\n        entry_at=entry_at,\n        sl_order=sl_order,\n        tp_order=tp_order,\n        api=api,\n        raw=raw,\n        **kwargs,\n    )\n</code></pre>"},{"location":"reference/exchange/live/trade/#lettrade.exchange.live.trade.LivePosition.fee","title":"fee  <code>property</code>","text":"<pre><code>fee: float\n</code></pre> <p>Fee/Estimate Fee for trade</p> <p>Returns:</p> <ul> <li> <code>float</code> (              <code>float</code> )          \u2013            <p>Fee</p> </li> </ul>"},{"location":"reference/exchange/live/trade/#lettrade.exchange.live.trade.LivePosition.is_exited","title":"is_exited  <code>property</code>","text":"<pre><code>is_exited: bool\n</code></pre> <p>Flag to check Position state.</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True if the trade exited</p> </li> </ul>"},{"location":"reference/exchange/live/trade/#lettrade.exchange.live.trade.LivePosition.is_long","title":"is_long  <code>property</code>","text":"<pre><code>is_long: bool\n</code></pre> <p>True if side is long (size is positive).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True/False</p> </li> </ul>"},{"location":"reference/exchange/live/trade/#lettrade.exchange.live.trade.LivePosition.is_opening","title":"is_opening  <code>property</code>","text":"<pre><code>is_opening: bool\n</code></pre> <p>Flag to check Position state.</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True if the trade opening</p> </li> </ul>"},{"location":"reference/exchange/live/trade/#lettrade.exchange.live.trade.LivePosition.is_short","title":"is_short  <code>property</code>","text":"<pre><code>is_short: bool\n</code></pre> <p>True if side is short (size is negative).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/live/trade/#lettrade.exchange.live.trade.LivePosition.pl","title":"pl  <code>property</code>","text":"<pre><code>pl: float\n</code></pre> <p>Estimate Profit or Loss of Position</p> <p>Returns:</p> <ul> <li> <code>float</code> (              <code>float</code> )          \u2013            <p>PnL</p> </li> </ul>"},{"location":"reference/exchange/live/trade/#lettrade.exchange.live.trade.LivePosition.side","title":"side  <code>property</code>","text":"<pre><code>side: TradeSide\n</code></pre> <p>True if side is short (size is negative).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>TradeSide</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/live/trade/#lettrade.exchange.live.trade.LivePosition.exit","title":"exit  <code>abstractmethod</code>","text":"<pre><code>exit() -&gt; PositionResult\n</code></pre> <p>summary</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>PositionResult</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/live/trade.py</code> <pre><code>@abstractmethod\ndef exit(self) -&gt; PositionResult:\n    \"\"\"_summary_\n\n    Returns:\n        bool: _description_\n    \"\"\"\n    raise NotImplementedError(type(self))\n</code></pre>"},{"location":"reference/exchange/live/trade/#lettrade.exchange.live.trade.LivePosition.from_raw","title":"from_raw  <code>abstractmethod</code> <code>classmethod</code>","text":"<pre><code>from_raw(\n    raw,\n    exchange: LiveExchange,\n    state: PositionState = PositionState.Open,\n    **kwargs\n) -&gt; LivePosition\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>raw</code>               (<code>_type_</code>)           \u2013            <p>description</p> </li> <li> <code>exchange</code>               (<code>LiveExchange</code>)           \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>LivePosition</code> (              <code>LivePosition</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/live/trade.py</code> <pre><code>@classmethod\n@abstractmethod\ndef from_raw(\n    cls,\n    raw,\n    exchange: \"LiveExchange\",\n    state: PositionState = PositionState.Open,\n    **kwargs,\n) -&gt; \"LivePosition\":\n    \"\"\"_summary_\n\n    Args:\n        raw (_type_): _description_\n        exchange (LiveExchange): _description_\n\n    Returns:\n        LivePosition: _description_\n    \"\"\"\n    raise NotImplementedError(cls)\n</code></pre>"},{"location":"reference/exchange/live/trade/#lettrade.exchange.live.trade.LivePosition.merge","title":"merge","text":"<pre><code>merge(other: LivePosition) -&gt; bool\n</code></pre> <p>Merge LivePosition from another</p> <p>Parameters:</p> <ul> <li> <code>other</code>               (<code>LivePosition</code>)           \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/live/trade.py</code> <pre><code>def merge(self, other: \"LivePosition\") -&gt; bool:\n    \"\"\"Merge LivePosition from another\n\n    Args:\n        other (LivePosition): _description_\n\n    Returns:\n        bool: _description_\n    \"\"\"\n    if not super().merge(other):\n        return False\n    self.raw = other.raw\n    return True\n</code></pre>"},{"location":"reference/exchange/live/trade/#lettrade.exchange.live.trade.LivePosition.update","title":"update  <code>abstractmethod</code>","text":"<pre><code>update(\n    sl: float | None = None,\n    tp: float | None = None,\n    caller: float | None = None,\n    **kwargs\n)\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>sl</code>               (<code>float | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>tp</code>               (<code>float | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>caller</code>               (<code>float | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>NotImplementedError</code>             \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/live/trade.py</code> <pre><code>@abstractmethod\ndef update(\n    self,\n    sl: float | None = None,\n    tp: float | None = None,\n    caller: float | None = None,\n    **kwargs,\n):\n    \"\"\"_summary_\n\n    Args:\n        sl (float | None, optional): _description_. Defaults to None.\n        tp (float | None, optional): _description_. Defaults to None.\n        caller (float | None, optional): _description_. Defaults to None.\n\n    Raises:\n        NotImplementedError: _description_\n    \"\"\"\n    raise NotImplementedError(type(self))\n</code></pre>"},{"location":"reference/exchange/metatrader/","title":"Index","text":""},{"location":"reference/exchange/metatrader/#lettrade.exchange.metatrader","title":"metatrader","text":""},{"location":"reference/exchange/metatrader/api/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> api","text":""},{"location":"reference/exchange/metatrader/api/#lettrade.exchange.metatrader.api","title":"api","text":""},{"location":"reference/exchange/metatrader/api/#lettrade.exchange.metatrader.api.MetaTraderAPI","title":"MetaTraderAPI","text":"<pre><code>MetaTraderAPI(\n    login: int,\n    password: str,\n    server: str,\n    timeout: int = 60,\n    retry: int = 20,\n    host: str = \"localhost\",\n    port: int = 18812,\n    wine: str | None = None,\n    magic: int = 88888888,\n    **kwargs\n)\n</code></pre> <p>               Bases: <code>LiveAPI</code></p> <p>API to connect MetaTrader 5 Terminal</p> <p>Parameters:</p> <ul> <li> <code>login</code>               (<code>int</code>)           \u2013            <p>description</p> </li> <li> <code>password</code>               (<code>str</code>)           \u2013            <p>description</p> </li> <li> <code>server</code>               (<code>str</code>)           \u2013            <p>description</p> </li> <li> <code>timeout</code>               (<code>int</code>, default:                   <code>60</code> )           \u2013            <p>description. Defaults to 60.</p> </li> <li> <code>retry</code>               (<code>int</code>, default:                   <code>20</code> )           \u2013            <p>description. Defaults to 20.</p> </li> <li> <code>host</code>               (<code>str</code>, default:                   <code>'localhost'</code> )           \u2013            <p>description. Defaults to \"localhost\".</p> </li> <li> <code>port</code>               (<code>int</code>, default:                   <code>18812</code> )           \u2013            <p>description. Defaults to 18812.</p> </li> <li> <code>wine</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>magic</code>               (<code>int</code>, default:                   <code>88888888</code> )           \u2013            <p>description. Defaults to 88888888.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ConnectionRefusedError</code>             \u2013            <p>description</p> </li> <li> <code>RuntimeError</code>             \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/metatrader/api.py</code> <pre><code>def __init__(\n    self,\n    login: int,\n    password: str,\n    server: str,\n    timeout: int = 60,\n    retry: int = 20,\n    host: str = \"localhost\",\n    port: int = 18812,\n    wine: str | None = None,\n    magic: int = 88888888,\n    **kwargs,\n):\n    \"\"\"_summary_\n\n    Args:\n        login (int): _description_\n        password (str): _description_\n        server (str): _description_\n        timeout (int, optional): _description_. Defaults to 60.\n        retry (int, optional): _description_. Defaults to 20.\n        host (str, optional): _description_. Defaults to \"localhost\".\n        port (int, optional): _description_. Defaults to 18812.\n        wine (str | None, optional): _description_. Defaults to None.\n        magic (int, optional): _description_. Defaults to 88888888.\n\n    Raises:\n        ConnectionRefusedError: _description_\n        RuntimeError: _description_\n    \"\"\"\n    # Parameters\n    self._config = kwargs\n    self._magic = magic\n\n    self._load_history_since = datetime.now() - timedelta(days=7)\n    self._deal_time_checked = datetime.now() - timedelta(days=1)\n    self._orders_stored = dict()\n    self._executions_stored = dict()\n    self._positions_stored = dict()\n\n    # Update config\n    self._config.update(\n        host=host,\n        port=port,\n        login=int(login),\n        password=password,\n        server=server,\n        wine=wine,\n        retry=retry,\n    )\n\n    # Start enviroments\n    self._refresh_environments()\n</code></pre>"},{"location":"reference/exchange/metatrader/api/#lettrade.exchange.metatrader.api.MetaTraderAPI.account","title":"account","text":"<pre><code>account(**kwargs) -&gt; dict\n</code></pre> <p>Metatrader 5 account information</p> <p>Returns:</p> <ul> <li> <code>dict</code> (              <code>dict</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/metatrader/api.py</code> <pre><code>@mt5_connection\ndef account(self, **kwargs) -&gt; dict:\n    \"\"\"Metatrader 5 account information\n\n    Returns:\n        dict: _description_\n    \"\"\"\n    raw = self._mt5.account_info()\n    if raw is None:\n        raise _RetryException()\n    return raw\n</code></pre>"},{"location":"reference/exchange/metatrader/api/#lettrade.exchange.metatrader.api.MetaTraderAPI.bars","title":"bars","text":"<pre><code>bars(\n    symbol,\n    timeframe,\n    since: int | datetime | None = 0,\n    to: int | datetime | None = 1000,\n    **kwargs\n) -&gt; list[list]\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>symbol</code>               (<code>_type_</code>)           \u2013            <p>description</p> </li> <li> <code>timeframe</code>               (<code>_type_</code>)           \u2013            <p>description</p> </li> <li> <code>since</code>               (<code>int | datetime | None</code>, default:                   <code>0</code> )           \u2013            <p>description. Defaults to 0.</p> </li> <li> <code>to</code>               (<code>int | datetime | None</code>, default:                   <code>1000</code> )           \u2013            <p>description. Defaults to 1_000.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[list]</code>           \u2013            <p>list[list]: description</p> </li> </ul> Source code in <code>lettrade/exchange/metatrader/api.py</code> <pre><code>@mt5_connection\ndef bars(\n    self,\n    symbol,\n    timeframe,\n    since: int | datetime | None = 0,\n    to: int | datetime | None = 1_000,\n    **kwargs,\n) -&gt; list[list]:\n    \"\"\"_summary_\n\n    Args:\n        symbol (_type_): _description_\n        timeframe (_type_): _description_\n        since (int | datetime | None, optional): _description_. Defaults to 0.\n        to (int | datetime | None, optional): _description_. Defaults to 1_000.\n\n    Returns:\n        list[list]: _description_\n    \"\"\"\n    timeframe = TIMEFRAME_L2M[timeframe]\n\n    if isinstance(since, int):\n        raw = self._mt5.copy_rates_from_pos(symbol, timeframe, since, to)\n\n    elif isinstance(to, int):\n        raw = self._mt5.copy_rates_from(symbol, timeframe, since, to)\n    else:\n        raw = self._mt5.copy_rates_range(symbol, timeframe, since, to)\n\n    if raw is None:\n        raise _RetryException()\n    return raw\n</code></pre>"},{"location":"reference/exchange/metatrader/api/#lettrade.exchange.metatrader.api.MetaTraderAPI.do_order_open","title":"do_order_open","text":"<pre><code>do_order_open(\n    symbol: str,\n    size: float,\n    type: int,\n    price: float,\n    sl: float = None,\n    tp: float = None,\n    tag: str | None = None,\n    deviation: int = 10,\n    **kwargs\n) -&gt; dict\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>symbol</code>               (<code>str</code>)           \u2013            <p>description</p> </li> <li> <code>size</code>               (<code>float</code>)           \u2013            <p>description</p> </li> <li> <code>type</code>               (<code>int</code>)           \u2013            <p>description</p> </li> <li> <code>price</code>               (<code>float</code>)           \u2013            <p>description</p> </li> <li> <code>sl</code>               (<code>float</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>tp</code>               (<code>float</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>tag</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to \"\".</p> </li> <li> <code>deviation</code>               (<code>int</code>, default:                   <code>10</code> )           \u2013            <p>description. Defaults to 10.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict</code> (              <code>dict</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/metatrader/api.py</code> <pre><code>@mt5_connection\ndef do_order_open(\n    self,\n    symbol: str,\n    size: float,\n    type: int,\n    price: float,\n    sl: float = None,\n    tp: float = None,\n    tag: str | None = None,\n    deviation: int = 10,\n    **kwargs,\n) -&gt; dict:\n    \"\"\"_summary_\n\n    Args:\n        symbol (str): _description_\n        size (float): _description_\n        type (int): _description_\n        price (float): _description_\n        sl (float, optional): _description_. Defaults to None.\n        tp (float, optional): _description_. Defaults to None.\n        tag (str, optional): _description_. Defaults to \"\".\n        deviation (int, optional): _description_. Defaults to 10.\n\n    Returns:\n        dict: _description_\n    \"\"\"\n    request = self._parse_trade_request(\n        symbol=symbol,\n        size=size,\n        type=type,\n        price=price,\n        sl=sl,\n        tp=tp,\n        tag=tag,\n        deviation=deviation,\n    )\n    raw = self._mt5.order_send(request)\n\n    # Retry\n    if raw is None:\n        raise _RetryException()\n\n    raw = self._parse_trade_send_response(raw)\n    if raw.code != 0:\n        raise LetLiveOrderInvalidException(raw.error, raw=raw)\n\n    return raw\n</code></pre>"},{"location":"reference/exchange/metatrader/api/#lettrade.exchange.metatrader.api.MetaTraderAPI.do_position_update","title":"do_position_update","text":"<pre><code>do_position_update(\n    id: int,\n    sl: float | None = None,\n    tp: float | None = None,\n    **kwargs\n) -&gt; dict\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>id</code>               (<code>int</code>)           \u2013            <p>description</p> </li> <li> <code>sl</code>               (<code>float | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>tp</code>               (<code>float | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict</code> (              <code>dict</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/metatrader/api.py</code> <pre><code>@mt5_connection\ndef do_position_update(\n    self,\n    id: int,\n    # symbol: str,\n    sl: float | None = None,\n    tp: float | None = None,\n    **kwargs,\n) -&gt; dict:\n    \"\"\"_summary_\n\n    Args:\n        id (int): _description_\n        sl (float | None, optional): _description_. Defaults to None.\n        tp (float | None, optional): _description_. Defaults to None.\n\n    Returns:\n        dict: _description_\n    \"\"\"\n    request = self._parse_trade_request(\n        position=id,\n        # symbol=symbol,\n        sl=sl,\n        tp=tp,\n        action=MT5.TRADE_ACTION_SLTP,\n        **kwargs,\n    )\n    raw = self._mt5.order_send(request)\n\n    # Retry\n    if raw is None:\n        raise _RetryException()\n\n    return self._parse_trade_send_response(raw)\n</code></pre>"},{"location":"reference/exchange/metatrader/api/#lettrade.exchange.metatrader.api.MetaTraderAPI.execution_get","title":"execution_get","text":"<pre><code>execution_get(id: str, **kwargs) -&gt; dict\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>id</code>               (<code>str</code>)           \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict</code> (              <code>dict</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/metatrader/api.py</code> <pre><code>@mt5_connection\ndef execution_get(self, id: str, **kwargs) -&gt; dict:\n    \"\"\"_summary_\n\n    Args:\n        id (str): _description_\n\n    Returns:\n        dict: _description_\n    \"\"\"\n    if id is not None:\n        kwargs[\"ticket\"] = int(id)\n\n    raws = self._mt5.history_deals_get(**kwargs)\n\n    # Retry\n    if raws is None:\n        raise _RetryException()\n\n    if __debug__:\n        logger.debug(\"Raw execution: %s\", raws)\n\n    return self._execution_parse_response(raws[0])\n</code></pre>"},{"location":"reference/exchange/metatrader/api/#lettrade.exchange.metatrader.api.MetaTraderAPI.executions_get","title":"executions_get","text":"<pre><code>executions_get(\n    position_id: str | None = None,\n    search: str | None = None,\n    **kwargs\n) -&gt; list[dict]\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>position_id</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>search</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[dict]</code>           \u2013            <p>list[dict]: description</p> </li> </ul> Source code in <code>lettrade/exchange/metatrader/api.py</code> <pre><code>@mt5_connection\ndef executions_get(\n    self,\n    position_id: str | None = None,\n    search: str | None = None,\n    **kwargs,\n) -&gt; list[dict]:\n    \"\"\"_summary_\n\n    Args:\n        position_id (str | None, optional): _description_. Defaults to None.\n        search (str | None, optional): _description_. Defaults to None.\n\n    Returns:\n        list[dict]: _description_\n    \"\"\"\n    if position_id is not None:\n        kwargs[\"position\"] = int(position_id)\n    if search is not None:\n        kwargs[\"group\"] = search\n\n    raws = self._mt5.history_deals_get(**kwargs)\n\n    # Retry\n    if raws is None:\n        raise _RetryException()\n\n    # May be wrong account when position exist but no execution\n    if not raws and position_id is not None:\n        logger.warning(\n            \"Execution retry check connection when position=%s exist but no execution\",\n            position_id,\n        )\n\n        # Retry check mt5 connection\n        raise _RetryException()\n\n    if __debug__:\n        logger.debug(\"Raw executions: %s\", raws)\n\n    return [self._execution_parse_response(raw) for raw in raws]\n</code></pre>"},{"location":"reference/exchange/metatrader/api/#lettrade.exchange.metatrader.api.MetaTraderAPI.executions_total","title":"executions_total","text":"<pre><code>executions_total(\n    since: datetime | None = None,\n    to: datetime | None = None,\n    **kwargs\n) -&gt; int\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>since</code>               (<code>datetime | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>to</code>               (<code>datetime | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>int</code> (              <code>int</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/metatrader/api.py</code> <pre><code>@mt5_connection\ndef executions_total(\n    self,\n    since: datetime | None = None,\n    to: datetime | None = None,\n    **kwargs,\n) -&gt; int:\n    \"\"\"_summary_\n\n    Args:\n        since (datetime | None, optional): _description_. Defaults to None.\n        to (datetime | None, optional): _description_. Defaults to None.\n\n    Returns:\n        int: _description_\n    \"\"\"\n    if since is not None:\n        kwargs[\"date_from\"] = since\n    if to is not None:\n        kwargs[\"date_to\"] = to\n\n    raw = self._mt5.history_deals_total(**kwargs)\n    if raw is None:\n        raise _RetryException()\n    return raw\n</code></pre>"},{"location":"reference/exchange/metatrader/api/#lettrade.exchange.metatrader.api.MetaTraderAPI.heartbeat","title":"heartbeat","text":"<pre><code>heartbeat() -&gt; bool\n</code></pre> <p>Heartbeat</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/metatrader/api.py</code> <pre><code>def heartbeat(self) -&gt; bool:\n    \"\"\"Heartbeat\n\n    Returns:\n        bool: _description_\n    \"\"\"\n    return True\n</code></pre>"},{"location":"reference/exchange/metatrader/api/#lettrade.exchange.metatrader.api.MetaTraderAPI.init","title":"init","text":"<pre><code>init(**kwargs)\n</code></pre> Source code in <code>lettrade/exchange/live/api.py</code> <pre><code>def init(self, **kwargs):\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/metatrader/api/#lettrade.exchange.metatrader.api.MetaTraderAPI.market","title":"market","text":"<pre><code>market(symbol: str, **kwargs) -&gt; dict\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>symbol</code>               (<code>str</code>)           \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict</code> (              <code>dict</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/metatrader/api.py</code> <pre><code>@mt5_connection\ndef market(self, symbol: str, **kwargs) -&gt; dict:\n    \"\"\"_summary_\n\n    Args:\n        symbol (str): _description_\n\n    Returns:\n        dict: _description_\n    \"\"\"\n    raw = self._mt5.symbol_info(symbol)\n    if raw is None:\n        raise _RetryException()\n    return raw\n</code></pre>"},{"location":"reference/exchange/metatrader/api/#lettrade.exchange.metatrader.api.MetaTraderAPI.markets","title":"markets","text":"<pre><code>markets(search: str | None = None, **kwargs) -&gt; list[dict]\n</code></pre> <p>The filter for arranging a group of necessary symbols. If the group is specified, the function returns only symbols meeting a specified criteria.</p> Search example <p>Get symbols whose names do not contain USD, EUR, JPY and GBP <code>search=\"*,!*USD*,!*EUR*,!*JPY*,!*GBP*\"</code></p> <p>Parameters:</p> <ul> <li> <code>search</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[dict]</code>           \u2013            <p>list[dict]: description</p> </li> </ul> Source code in <code>lettrade/exchange/metatrader/api.py</code> <pre><code>@mt5_connection\ndef markets(self, search: str | None = None, **kwargs) -&gt; list[dict]:\n    \"\"\"The filter for arranging a group of necessary symbols.\n    If the group is specified, the function returns only symbols meeting a specified criteria.\n\n    Search example:\n        Get symbols whose names do not contain USD, EUR, JPY and GBP\n        `search=\"*,!*USD*,!*EUR*,!*JPY*,!*GBP*\"`\n\n    Args:\n        search (str | None, optional): _description_. Defaults to None.\n\n    Returns:\n        list[dict]: _description_\n    \"\"\"\n    raw = self._mt5.symbols_get(search)\n    if raw is None:\n        raise _RetryException()\n    return raw\n</code></pre>"},{"location":"reference/exchange/metatrader/api/#lettrade.exchange.metatrader.api.MetaTraderAPI.next","title":"next","text":"<pre><code>next()\n</code></pre> <p>Next tick action</p> Source code in <code>lettrade/exchange/metatrader/api.py</code> <pre><code>def next(self):\n    \"\"\"Next tick action\"\"\"\n    self._check_transaction_events()\n</code></pre>"},{"location":"reference/exchange/metatrader/api/#lettrade.exchange.metatrader.api.MetaTraderAPI.order_open","title":"order_open","text":"<pre><code>order_open(order: MetaTraderOrder) -&gt; dict\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>order</code>               (<code>MetaTraderOrder</code>)           \u2013            <p>description</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>NotImplementedError</code>             \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict</code> (              <code>dict</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/metatrader/api.py</code> <pre><code>def order_open(self, order: \"MetaTraderOrder\") -&gt; dict:\n    \"\"\"_summary_\n\n    Args:\n        order (MetaTraderOrder): _description_\n\n    Raises:\n        NotImplementedError: _description_\n\n    Returns:\n        dict: _description_\n    \"\"\"\n    match order.type:\n        case OrderType.Limit:\n            price = order.limit_price\n        case OrderType.Stop:\n            price = order.stop_price\n        case OrderType.Market:\n            tick = self.tick_get(order.data.symbol)\n            price = tick.ask if order.is_long else tick.bid\n        case _:\n            raise NotImplementedError(\n                f\"Open order type {order.type} is not implement yet\"\n            )\n\n    type = MT5.ORDER_TYPE_BUY if order.is_long else MT5.ORDER_TYPE_SELL\n\n    return self.do_order_open(\n        symbol=order.data.symbol,\n        type=type,\n        size=order.size,\n        price=price,\n        sl=order.sl,\n        tp=order.tp,\n        tag=order.tag,\n    )\n</code></pre>"},{"location":"reference/exchange/metatrader/api/#lettrade.exchange.metatrader.api.MetaTraderAPI.orders_get","title":"orders_get","text":"<pre><code>orders_get(\n    id: str | None = None,\n    symbol: str | None = None,\n    **kwargs\n) -&gt; list[dict]\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>id</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>symbol</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[dict]</code>           \u2013            <p>list[dict]: description</p> </li> </ul> Source code in <code>lettrade/exchange/metatrader/api.py</code> <pre><code>@mt5_connection\ndef orders_get(\n    self,\n    id: str | None = None,\n    symbol: str | None = None,\n    **kwargs,\n) -&gt; list[dict]:\n    \"\"\"_summary_\n\n    Args:\n        id (str | None, optional): _description_. Defaults to None.\n        symbol (str | None, optional): _description_. Defaults to None.\n\n    Returns:\n        list[dict]: _description_\n    \"\"\"\n    if id is not None:\n        kwargs[\"ticket\"] = int(id)\n    if symbol is not None:\n        kwargs[\"symbol\"] = symbol\n\n    raws = self._mt5.orders_get(**kwargs)\n\n    # Return None to retry\n    if raws is None:\n        raise _RetryException()\n\n    return [self._order_parse_response(raw) for raw in raws]\n</code></pre>"},{"location":"reference/exchange/metatrader/api/#lettrade.exchange.metatrader.api.MetaTraderAPI.orders_history_get","title":"orders_history_get","text":"<pre><code>orders_history_get(\n    id: str | None = None,\n    position_id: str | None = None,\n    since: datetime | None = None,\n    to: datetime | None = None,\n    **kwargs\n) -&gt; list[dict]\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>id</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>position_id</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>since</code>               (<code>datetime | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>to</code>               (<code>datetime | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[dict]</code>           \u2013            <p>list[dict]: description</p> </li> </ul> Source code in <code>lettrade/exchange/metatrader/api.py</code> <pre><code>@mt5_connection\ndef orders_history_get(\n    self,\n    id: str | None = None,\n    position_id: str | None = None,\n    since: datetime | None = None,\n    to: datetime | None = None,\n    **kwargs,\n) -&gt; list[dict]:\n    \"\"\"_summary_\n\n    Args:\n        id (str | None, optional): _description_. Defaults to None.\n        position_id (str | None, optional): _description_. Defaults to None.\n        since (datetime | None, optional): _description_. Defaults to None.\n        to (datetime | None, optional): _description_. Defaults to None.\n\n    Returns:\n        list[dict]: _description_\n    \"\"\"\n    if id is not None:\n        kwargs[\"ticket\"] = int(id)\n    if position_id is not None:\n        kwargs[\"position\"] = int(position_id)\n    if since is not None:\n        kwargs[\"date_from\"] = since\n    if to is not None:\n        kwargs[\"date_to\"] = to\n\n    raws = self._mt5.history_orders_get(**kwargs)\n\n    # Retry\n    if raws is None:\n        raise _RetryException()\n\n    return [self._order_parse_response(raw) for raw in raws]\n</code></pre>"},{"location":"reference/exchange/metatrader/api/#lettrade.exchange.metatrader.api.MetaTraderAPI.orders_history_total","title":"orders_history_total","text":"<pre><code>orders_history_total(\n    since: datetime | None = None,\n    to: datetime | None = None,\n    **kwargs\n) -&gt; int\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>since</code>               (<code>datetime | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>to</code>               (<code>datetime | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>int</code> (              <code>int</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/metatrader/api.py</code> <pre><code>@mt5_connection\ndef orders_history_total(\n    self,\n    since: datetime | None = None,\n    to: datetime | None = None,\n    **kwargs,\n) -&gt; int:\n    \"\"\"_summary_\n\n    Args:\n        since (datetime | None, optional): _description_. Defaults to None.\n        to (datetime | None, optional): _description_. Defaults to None.\n\n    Returns:\n        int: _description_\n    \"\"\"\n    if since is not None:\n        kwargs[\"date_from\"] = since\n    if to is not None:\n        kwargs[\"date_to\"] = to\n\n    raw = self._mt5.history_orders_get(**kwargs)\n    if raw is None:\n        raise _RetryException()\n    return raw\n</code></pre>"},{"location":"reference/exchange/metatrader/api/#lettrade.exchange.metatrader.api.MetaTraderAPI.orders_total","title":"orders_total","text":"<pre><code>orders_total(\n    since: datetime | None = None,\n    to: datetime | None = None,\n    **kwargs\n) -&gt; int\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>since</code>               (<code>datetime | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>to</code>               (<code>datetime | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>int</code> (              <code>int</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/metatrader/api.py</code> <pre><code>@mt5_connection\ndef orders_total(\n    self,\n    since: datetime | None = None,\n    to: datetime | None = None,\n    **kwargs,\n) -&gt; int:\n    \"\"\"_summary_\n\n    Args:\n        since (datetime | None, optional): _description_. Defaults to None.\n        to (datetime | None, optional): _description_. Defaults to None.\n\n    Returns:\n        int: _description_\n    \"\"\"\n    if since is not None:\n        kwargs[\"date_from\"] = since\n    if to is not None:\n        kwargs[\"date_to\"] = to\n\n    raw = self._mt5.orders_total(**kwargs)\n    if raw is None:\n        raise _RetryException()\n\n    return raw\n</code></pre>"},{"location":"reference/exchange/metatrader/api/#lettrade.exchange.metatrader.api.MetaTraderAPI.position_close","title":"position_close","text":"<pre><code>position_close(\n    position: MetaTraderPosition, **kwargs\n) -&gt; dict\n</code></pre> <p>Close a position</p> <p>Parameters:</p> <ul> <li> <code>position</code>               (<code>MetaTraderPosition</code>)           \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict</code> (              <code>dict</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/metatrader/api.py</code> <pre><code>def position_close(self, position: \"MetaTraderPosition\", **kwargs) -&gt; dict:\n    \"\"\"Close a position\n\n    Args:\n        position (MetaTraderPosition): _description_\n\n    Returns:\n        dict: _description_\n    \"\"\"\n    tick = self.tick_get(position.data.symbol)\n    price = tick.ask if position.is_long else tick.bid\n\n    # Opposite with position side\n    type = MT5.ORDER_TYPE_SELL if position.is_long else MT5.ORDER_TYPE_BUY\n\n    return self.do_position_close(\n        id=int(position.id),\n        symbol=position.data.symbol,\n        type=type,\n        size=position.size,\n        price=price,\n        **kwargs,\n    )\n</code></pre>"},{"location":"reference/exchange/metatrader/api/#lettrade.exchange.metatrader.api.MetaTraderAPI.position_update","title":"position_update","text":"<pre><code>position_update(\n    position: MetaTraderPosition,\n    sl: float | None = None,\n    tp: float | None = None,\n    **kwargs\n) -&gt; dict\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>position</code>               (<code>MetaTraderPosition</code>)           \u2013            <p>description</p> </li> <li> <code>sl</code>               (<code>float | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>tp</code>               (<code>float | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict</code> (              <code>dict</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/metatrader/api.py</code> <pre><code>def position_update(\n    self,\n    position: \"MetaTraderPosition\",\n    sl: float | None = None,\n    tp: float | None = None,\n    **kwargs,\n) -&gt; dict:\n    \"\"\"_summary_\n\n    Args:\n        position (MetaTraderPosition): _description_\n        sl (float | None, optional): _description_. Defaults to None.\n        tp (float | None, optional): _description_. Defaults to None.\n\n    Returns:\n        dict: _description_\n    \"\"\"\n    return self.do_position_update(\n        id=int(position.id),\n        symbol=position.data.symbol,\n        sl=sl,\n        tp=tp,\n        **kwargs,\n    )\n</code></pre>"},{"location":"reference/exchange/metatrader/api/#lettrade.exchange.metatrader.api.MetaTraderAPI.positions_get","title":"positions_get","text":"<pre><code>positions_get(\n    id: str = None, symbol: str = None, **kwargs\n) -&gt; list[dict]\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>id</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>symbol</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[dict]</code>           \u2013            <p>list[dict]: description</p> </li> </ul> Source code in <code>lettrade/exchange/metatrader/api.py</code> <pre><code>@mt5_connection\ndef positions_get(\n    self,\n    id: str = None,\n    symbol: str = None,\n    **kwargs,\n) -&gt; list[dict]:\n    \"\"\"_summary_\n\n    Args:\n        id (str, optional): _description_. Defaults to None.\n        symbol (str, optional): _description_. Defaults to None.\n\n    Returns:\n        list[dict]: _description_\n    \"\"\"\n    if id is not None:\n        kwargs.update(ticket=int(id))\n    if symbol is not None:\n        kwargs.update(symbol=symbol)\n\n    raws = self._mt5.positions_get(**kwargs)\n\n    # Retry\n    if raws is None:\n        raise _RetryException()\n\n    return [self._position_parse_response(raw) for raw in raws]\n</code></pre>"},{"location":"reference/exchange/metatrader/api/#lettrade.exchange.metatrader.api.MetaTraderAPI.positions_total","title":"positions_total","text":"<pre><code>positions_total(\n    since: datetime | None = None,\n    to: datetime | None = None,\n    **kwargs\n) -&gt; int\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>since</code>               (<code>datetime | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>to</code>               (<code>datetime | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>int</code> (              <code>int</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/metatrader/api.py</code> <pre><code>@mt5_connection\ndef positions_total(\n    self,\n    since: datetime | None = None,\n    to: datetime | None = None,\n    **kwargs,\n) -&gt; int:\n    \"\"\"_summary_\n\n    Args:\n        since (datetime | None, optional): _description_. Defaults to None.\n        to (datetime | None, optional): _description_. Defaults to None.\n\n    Returns:\n        int: _description_\n    \"\"\"\n    if since is not None:\n        kwargs[\"date_from\"] = since\n    if to is not None:\n        kwargs[\"date_to\"] = to\n\n    raw = self._mt5.positions_total(**kwargs)\n    if raw is None:\n        raise _RetryException()\n    return raw\n</code></pre>"},{"location":"reference/exchange/metatrader/api/#lettrade.exchange.metatrader.api.MetaTraderAPI.start","title":"start","text":"<pre><code>start(exchange: MetaTraderExchange)\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>exchange</code>               (<code>MetaTraderExchange</code>)           \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/metatrader/api.py</code> <pre><code>def start(self, exchange: \"MetaTraderExchange\"):\n    \"\"\"_summary_\n\n    Args:\n        exchange (MetaTraderExchange): _description_\n    \"\"\"\n    self._exchange = exchange\n\n    self._load_history_transactions()\n    self._check_transaction_events()\n</code></pre>"},{"location":"reference/exchange/metatrader/api/#lettrade.exchange.metatrader.api.MetaTraderAPI.stop","title":"stop","text":"<pre><code>stop()\n</code></pre> <p>Stop MetaTrader 5 Terminal</p> Source code in <code>lettrade/exchange/metatrader/api.py</code> <pre><code>def stop(self):\n    \"\"\"Stop MetaTrader 5 Terminal\"\"\"\n    self._mt5.shutdown()\n</code></pre>"},{"location":"reference/exchange/metatrader/api/#lettrade.exchange.metatrader.api.MetaTraderAPI.tick_get","title":"tick_get","text":"<pre><code>tick_get(symbol: str, **kwargs) -&gt; dict\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>symbol</code>               (<code>str</code>)           \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict</code> (              <code>dict</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/metatrader/api.py</code> <pre><code>@mt5_connection\ndef tick_get(self, symbol: str, **kwargs) -&gt; dict:\n    \"\"\"_summary_\n\n    Args:\n        symbol (str): _description_\n\n    Returns:\n        dict: _description_\n    \"\"\"\n    raw = self._mt5.symbol_info_tick(symbol)\n    if raw is None:\n        raise _RetryException()\n    return raw\n</code></pre>"},{"location":"reference/exchange/metatrader/metatrader/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> metatrader","text":""},{"location":"reference/exchange/metatrader/metatrader/#lettrade.exchange.metatrader.metatrader","title":"metatrader","text":""},{"location":"reference/exchange/metatrader/metatrader/#lettrade.exchange.metatrader.metatrader.LetTradeMetaTrader","title":"LetTradeMetaTrader","text":"<pre><code>LetTradeMetaTrader(\n    feeder: type[\n        MetaTraderDataFeeder\n    ] = MetaTraderDataFeeder,\n    exchange: type[MetaTraderExchange] = MetaTraderExchange,\n    account: type[MetaTraderAccount] = MetaTraderAccount,\n    **kwargs\n)\n</code></pre> <p>               Bases: <code>LetTradeLive</code></p> <p>Help to maintain MetaTrader bots</p> <p>Parameters:</p> <ul> <li> <code>feeder</code>               (<code>Type[MetaTraderDataFeeder]</code>, default:                   <code>MetaTraderDataFeeder</code> )           \u2013            <p>description. Defaults to MetaTraderDataFeeder.</p> </li> <li> <code>exchange</code>               (<code>Type[MetaTraderExchange]</code>, default:                   <code>MetaTraderExchange</code> )           \u2013            <p>description. Defaults to MetaTraderExchange.</p> </li> <li> <code>account</code>               (<code>Type[MetaTraderAccount]</code>, default:                   <code>MetaTraderAccount</code> )           \u2013            <p>description. Defaults to MetaTraderAccount.</p> </li> </ul> Source code in <code>lettrade/exchange/metatrader/metatrader.py</code> <pre><code>def __init__(\n    self,\n    feeder: type[MetaTraderDataFeeder] = MetaTraderDataFeeder,\n    exchange: type[MetaTraderExchange] = MetaTraderExchange,\n    account: type[MetaTraderAccount] = MetaTraderAccount,\n    **kwargs,\n) -&gt; None:\n    \"\"\"_summary_\n\n    Args:\n        feeder (Type[MetaTraderDataFeeder], optional): _description_. Defaults to MetaTraderDataFeeder.\n        exchange (Type[MetaTraderExchange], optional): _description_. Defaults to MetaTraderExchange.\n        account (Type[MetaTraderAccount], optional): _description_. Defaults to MetaTraderAccount.\n    \"\"\"\n    super().__init__(\n        feeder=feeder,\n        exchange=exchange,\n        account=account,\n        **kwargs,\n    )\n</code></pre>"},{"location":"reference/exchange/metatrader/metatrader/#lettrade.exchange.metatrader.metatrader.LetTradeMetaTrader.plot","title":"plot","text":"<pre><code>plot(*args, jump: dict | None = None, **kwargs)\n</code></pre> <p>Plot strategy/optimize result</p> BotPlotter <p>Miror of BotPlotter.plot(). Plotly implement PlotlyBotPlotter.plot().</p> <p>Args:     <code>jump</code> (dict | None, optional): Miror of BotPlotter.jump()</p> <p>Example:     Jump to position_id         <pre><code>lt.plot(\n    jump=dict(position_id=1, range=300),\n    layout=dict(height=2000),\n)\n</code></pre></p> OptimizePlotter <p>Miror of OptimizePlotter.plot(). Plotly implement PlotlyOptimizePlotter.plot().</p> <p>Example:         <pre><code>lt.plot(layout=dict(height=2000))\n</code></pre></p> Source code in <code>lettrade/lettrade.py</code> <pre><code>def plot(self, *args, jump: dict | None = None, **kwargs):\n    \"\"\"Plot strategy/optimize result\n\n    BotPlotter:\n        Miror of [BotPlotter.plot()](site:/reference/plot/bot/#lettrade.plot.bot.BotPlotter.plot).\n        Plotly implement [PlotlyBotPlotter.plot()](site:/reference/plot/plotly/plotly/#lettrade.plot.plotly.plotly.PlotlyBotPlotter.plot).\n\n        Args:\n            `jump` (dict | None, optional): Miror of [BotPlotter.jump()](site:/reference/plot/bot/#lettrade.plot.bot.BotPlotter.jump)\n\n        Example:\n            Jump to position_id\n                ```python\n                lt.plot(\n                    jump=dict(position_id=1, range=300),\n                    layout=dict(height=2000),\n                )\n                ```\n\n    OptimizePlotter:\n        Miror of [OptimizePlotter.plot()](site:/reference/plot/optimize/#lettrade.plot.optimize.OptimizePlotter.plot).\n        Plotly implement [PlotlyOptimizePlotter.plot()](site:/reference/exchange/backtest/plotly/optimize/#lettrade.exchange.backtest.plotly.optimize.PlotlyOptimizePlotter.plot).\n\n        Example:\n                ```python\n                lt.plot(layout=dict(height=2000))\n                ```\n    \"\"\"\n    if __debug__:\n        from .utils.docs import is_docs_session\n\n        if is_docs_session():\n            return\n\n    self.plotter.plot(*args, jump=jump, **kwargs)\n</code></pre>"},{"location":"reference/exchange/metatrader/metatrader/#lettrade.exchange.metatrader.metatrader.LetTradeMetaTrader.run","title":"run","text":"<pre><code>run(worker: int | None = None, **kwargs)\n</code></pre> <p>Run LetTrade in single or multiple processing</p> <p>Parameters:</p> <ul> <li> <code>worker</code>               (<code>int | None</code>, default:                   <code>None</code> )           \u2013            <p>Number of processing. Defaults to None.</p> </li> </ul> Source code in <code>lettrade/lettrade.py</code> <pre><code>def run(self, worker: int | None = None, **kwargs):\n    \"\"\"Run LetTrade in single or multiple processing\n\n    Args:\n        worker (int | None, optional): Number of processing. Defaults to None.\n    \"\"\"\n    if worker or isinstance(self.data, list):\n        if not isinstance(self.data, list):\n            # self.data = self.datas\n            self.datas = [self.data]\n\n        worker = self._max_workers(worker)\n\n        self._multiprocess()\n\n        datas_source = self._kwargs.pop(\"datas\")\n        with ProcessPoolExecutor(max_workers=worker) as executor:\n            futures = [\n                executor.submit(\n                    self._bot_cls.run_bot,\n                    datas=datas,\n                    id=i,\n                    result=\"str\",\n                    **self._kwargs,\n                )\n                for i, datas in enumerate(datas_source)\n            ]\n            for future in futures:\n                result = future.result()\n                print(result)\n    else:\n        self._bot = self._bot_cls.run_bot(\n            bot=self._bot,\n            result=\"bot\",\n            **self._kwargs,\n        )\n        print(str(self._bot.stats))\n</code></pre>"},{"location":"reference/exchange/metatrader/metatrader/#lettrade.exchange.metatrader.metatrader.LetTradeMetaTrader.start","title":"start","text":"<pre><code>start(force: bool = False)\n</code></pre> <p>Start LetTrade by init bot object and loading datafeeds</p> <p>Parameters:</p> <ul> <li> <code>force</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>description. Defaults to False.</p> </li> </ul> Source code in <code>lettrade/lettrade.py</code> <pre><code>def start(self, force: bool = False):\n    \"\"\"Start LetTrade by init bot object and loading datafeeds\n\n    Args:\n        force (bool, optional): _description_. Defaults to False.\n    \"\"\"\n    if force and self._bot is not None:\n        self._bot = None\n\n    self._bot = self._bot_cls.start_bot(bot=self._bot, **self._kwargs)\n</code></pre>"},{"location":"reference/exchange/metatrader/metatrader/#lettrade.exchange.metatrader.metatrader.LetTradeMetaTrader.stop","title":"stop","text":"<pre><code>stop()\n</code></pre> <p>Stop LetTrade</p> Source code in <code>lettrade/lettrade.py</code> <pre><code>def stop(self):\n    \"\"\"Stop LetTrade\"\"\"\n    if self._bot is not None:\n        return self._bot.stop()\n    if self.stats:\n        self.stats.stop()\n</code></pre>"},{"location":"reference/exchange/metatrader/metatrader/#lettrade.exchange.metatrader.metatrader.LetTradeMetaTraderBot","title":"LetTradeMetaTraderBot","text":"<pre><code>LetTradeMetaTraderBot(\n    api: LiveAPI | None = LiveAPI, **kwargs\n)\n</code></pre> <p>               Bases: <code>LetTradeLiveBot</code></p> <p>LetTradeBot for MetaTrader</p> <p>Parameters:</p> <ul> <li> <code>api</code>               (<code>LiveAPI | None</code>, default:                   <code>LiveAPI</code> )           \u2013            <p>description. Defaults to LiveAPI.</p> </li> </ul> Source code in <code>lettrade/exchange/live/live.py</code> <pre><code>def __init__(self, api: LiveAPI | None = LiveAPI, **kwargs) -&gt; None:\n    \"\"\"_summary_\n\n    Args:\n        api (LiveAPI | None, optional): _description_. Defaults to LiveAPI.\n    \"\"\"\n    super().__init__(**kwargs)\n\n    if issubclass(api, LiveAPI):\n        self._api = api(**self._kwargs.get(\"api_kwargs\", {}))\n    else:\n        self._api = api\n\n    self._kwargs.setdefault(\"feeder_kwargs\", dict()).update(api=self._api)\n    self._kwargs.setdefault(\"exchange_kwargs\", dict()).update(api=self._api)\n    self._kwargs.setdefault(\"account_kwargs\", dict()).update(api=self._api)\n\n    for data in self.datas:\n        data._api = self._api\n</code></pre>"},{"location":"reference/exchange/metatrader/metatrader/#lettrade.exchange.metatrader.metatrader.MetaTraderAccount","title":"MetaTraderAccount","text":"<pre><code>MetaTraderAccount(api: LiveAPI, **kwargs)\n</code></pre> <p>               Bases: <code>LiveAccount</code></p> <p>Account for MetaTrader</p> <p>Parameters:</p> <ul> <li> <code>api</code>               (<code>LiveAPI</code>)           \u2013            <p>description</p> </li> <li> <code>**kwargs</code>               (<code>dict</code>, default:                   <code>{}</code> )           \u2013            <p>Mirror of lettrade.account.Account().</p> </li> </ul> Source code in <code>lettrade/exchange/live/account.py</code> <pre><code>def __init__(self, api: LiveAPI, **kwargs) -&gt; None:\n    \"\"\"Account for live trading\n\n    Args:\n        api (LiveAPI): _description_\n        **kwargs (dict, optional): Mirror of [lettrade.account.Account()](site:/reference/account/account/#lettrade.account.account.Account).\n    \"\"\"\n    super().__init__(**kwargs)\n    self._api = api\n\n    self._balance = 0.0\n    self._equity = 0.0\n</code></pre>"},{"location":"reference/exchange/metatrader/metatrader/#lettrade.exchange.metatrader.metatrader.MetaTraderDataFeed","title":"MetaTraderDataFeed","text":"<pre><code>MetaTraderDataFeed(\n    symbol: str,\n    timeframe: str | int | Timedelta,\n    name: str | None = None,\n    api: LiveAPI | None = None,\n    columns: list[str] | None = None,\n    **kwargs\n)\n</code></pre> <p>               Bases: <code>LiveDataFeed</code></p> <p>DataFeed for MetaTrader</p> <p>Parameters:</p> <ul> <li> <code>symbol</code>               (<code>str</code>)           \u2013            <p>Symbol of DataFeed</p> </li> <li> <code>timeframe</code>               (<code>str | int | Timedelta</code>)           \u2013            <p>TimeFrame of DataFeed</p> </li> <li> <code>name</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>Name of DataFeed, auto generate <code>{symbol}_{timeframe}</code> if none. Defaults to None.</p> </li> <li> <code>api</code>               (<code>LiveAPI | None</code>, default:                   <code>None</code> )           \u2013            <p>Live trading API. Defaults to None.</p> </li> <li> <code>columns</code>               (<code>list[str] | None</code>, default:                   <code>None</code> )           \u2013            <p>List of DataFeed columns. Defaults to None.</p> </li> </ul> Source code in <code>lettrade/exchange/live/data.py</code> <pre><code>def __init__(\n    self,\n    symbol: str,\n    timeframe: str | int | pd.Timedelta,\n    name: str | None = None,\n    api: LiveAPI | None = None,\n    columns: list[str] | None = None,\n    **kwargs,\n) -&gt; None:\n    \"\"\"_summary_\n\n    Args:\n        symbol (str): Symbol of DataFeed\n        timeframe (str | int | pd.Timedelta): TimeFrame of DataFeed\n        name (str | None, optional): Name of DataFeed, auto generate `{symbol}_{timeframe}` if none. Defaults to None.\n        api (LiveAPI | None, optional): Live trading API. Defaults to None.\n        columns (list[str] | None, optional): List of DataFeed columns. Defaults to None.\n    \"\"\"\n    super().__init__(\n        name=name or f\"{symbol}_{timeframe}\",\n        timeframe=timeframe,\n        columns=columns or [\"open\", \"high\", \"low\", \"close\", \"volume\"],\n        **kwargs,\n    )\n\n    self.meta.update(symbol=symbol, base_columns=self.columns.copy())\n\n    if api is not None:\n        self._api = api\n</code></pre>"},{"location":"reference/exchange/metatrader/metatrader/#lettrade.exchange.metatrader.metatrader.MetaTraderDataFeed.i","title":"i  <code>property</code>","text":"<pre><code>i: indicator\n</code></pre> <p>Alias to <code>lettrade.indicator</code> and using in DataFeed by call: <code>DataFeed.i.indicator_name()</code></p>"},{"location":"reference/exchange/metatrader/metatrader/#lettrade.exchange.metatrader.metatrader.MetaTraderDataFeed.is_main","title":"is_main  <code>property</code>","text":"<pre><code>is_main: bool\n</code></pre> <p>Property to check DataFeed is main DataFeed or not</p>"},{"location":"reference/exchange/metatrader/metatrader/#lettrade.exchange.metatrader.metatrader.MetaTraderDataFeed.l","title":"l  <code>instance-attribute</code>","text":"<pre><code>l: LetDataFeedWrapper\n</code></pre> <p>LetTrade DataFeed wrapper using to manage index pointer of DataFeed</p>"},{"location":"reference/exchange/metatrader/metatrader/#lettrade.exchange.metatrader.metatrader.MetaTraderDataFeed.meta","title":"meta  <code>property</code>","text":"<pre><code>meta: dict\n</code></pre> <p>Property to get metadata of DataFeed</p>"},{"location":"reference/exchange/metatrader/metatrader/#lettrade.exchange.metatrader.metatrader.MetaTraderDataFeed.name","title":"name  <code>property</code>","text":"<pre><code>name: str\n</code></pre> <p>Property to get name of DataFeed</p>"},{"location":"reference/exchange/metatrader/metatrader/#lettrade.exchange.metatrader.metatrader.MetaTraderDataFeed.now","title":"now  <code>property</code>","text":"<pre><code>now: Timestamp\n</code></pre> <p>Property to get current index value of DataFeed</p>"},{"location":"reference/exchange/metatrader/metatrader/#lettrade.exchange.metatrader.metatrader.MetaTraderDataFeed.symbol","title":"symbol  <code>property</code>","text":"<pre><code>symbol: str\n</code></pre> <p>Property to get symbol of DataFeed</p>"},{"location":"reference/exchange/metatrader/metatrader/#lettrade.exchange.metatrader.metatrader.MetaTraderDataFeed.timeframe","title":"timeframe  <code>property</code>","text":"<pre><code>timeframe: TimeFrame\n</code></pre> <p>Property to get timeframe of DataFeed</p>"},{"location":"reference/exchange/metatrader/metatrader/#lettrade.exchange.metatrader.metatrader.MetaTraderDataFeed.bar","title":"bar","text":"<pre><code>bar(i: int = 0) -&gt; Timestamp\n</code></pre> <p>Get current pd.Timestamp value of DataFeed</p> <p>Parameters:</p> <ul> <li> <code>i</code>               (<code>int</code>, default:                   <code>0</code> )           \u2013            <p>Index. Defaults to 0.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Timestamp</code>           \u2013            <p>pd.Timestamp: description</p> </li> </ul> Source code in <code>lettrade/data/data.py</code> <pre><code>def bar(self, i: int = 0) -&gt; pd.Timestamp:\n    \"\"\"Get current pd.Timestamp value of DataFeed\n\n    Args:\n        i (int, optional): Index. Defaults to 0.\n\n    Returns:\n        pd.Timestamp: _description_\n    \"\"\"\n    return self.l.index[i]\n</code></pre>"},{"location":"reference/exchange/metatrader/metatrader/#lettrade.exchange.metatrader.metatrader.MetaTraderDataFeed.bars","title":"bars","text":"<pre><code>bars(\n    since: int | str | Timestamp, to: int | str | Timestamp\n) -&gt; list\n</code></pre> <p>Get bars from LiveAPI</p> <p>Parameters:</p> <ul> <li> <code>since</code>               (<code>int | str | Timestamp</code>)           \u2013            <p>description</p> </li> <li> <code>to</code>               (<code>int | str | Timestamp</code>)           \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list</code> (              <code>list</code> )          \u2013            <p>list of bar</p> </li> </ul> Source code in <code>lettrade/exchange/live/data.py</code> <pre><code>def bars(\n    self,\n    since: int | str | pd.Timestamp,\n    to: int | str | pd.Timestamp,\n) -&gt; list:\n    \"\"\"Get bars from LiveAPI\n\n    Args:\n        since (int | str | pd.Timestamp): _description_\n        to (int | str | pd.Timestamp): _description_\n\n    Returns:\n        list: list of bar\n    \"\"\"\n    return self._api.bars(\n        symbol=self.symbol,\n        timeframe=self.timeframe.string,\n        since=since,\n        to=to,\n    )\n</code></pre>"},{"location":"reference/exchange/metatrader/metatrader/#lettrade.exchange.metatrader.metatrader.MetaTraderDataFeed.bars_load","title":"bars_load","text":"<pre><code>bars_load(\n    since: int | str | Timestamp, to: int | str | Timestamp\n) -&gt; bool\n</code></pre> <p>Get bar from API and push to DataFeed</p> <p>Parameters:</p> <ul> <li> <code>since</code>               (<code>int | str | Timestamp</code>)           \u2013            <p>description</p> </li> <li> <code>to</code>               (<code>int | str | Timestamp</code>)           \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True if has data, False if no data</p> </li> </ul> Source code in <code>lettrade/exchange/live/data.py</code> <pre><code>def bars_load(\n    self,\n    since: int | str | pd.Timestamp,\n    to: int | str | pd.Timestamp,\n) -&gt; bool:\n    \"\"\"Get bar from API and push to DataFeed\n\n    Args:\n        since (int | str | pd.Timestamp): _description_\n        to (int | str | pd.Timestamp): _description_\n\n    Returns:\n        bool: True if has data, False if no data\n    \"\"\"\n    bars = self.bars(since=since, to=to)\n\n    if bars is None or len(bars) == 0:\n        logger.warning(\"No bars data for %s\", self.name)\n        return False\n\n    self.push(bars, unit=self._bar_datetime_unit)\n    return True\n</code></pre>"},{"location":"reference/exchange/metatrader/metatrader/#lettrade.exchange.metatrader.metatrader.MetaTraderDataFeed.drop","title":"drop","text":"<pre><code>drop(\n    *args,\n    since: int | str | Timestamp | None = None,\n    to: int | str | Timestamp | None = None,\n    **kwargs\n) -&gt; None\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>since</code>               (<code>int | str | Timestamp | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>to</code>               (<code>int | str | Timestamp | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/data/data.py</code> <pre><code>def drop(\n    self,\n    *args,\n    since: int | str | pd.Timestamp | None = None,\n    to: int | str | pd.Timestamp | None = None,\n    **kwargs,\n) -&gt; None:\n    \"\"\"_summary_\n\n    Args:\n        since (int | str | pd.Timestamp | None, optional): _description_. Defaults to None.\n        to (int | str | pd.Timestamp | None, optional): _description_. Defaults to None.\n\n    Raises:\n        RuntimeError: _description_\n    \"\"\"\n    if since is None and to is None:\n        super().drop(*args, **kwargs)\n        return\n\n    condiction = None\n\n    # Since\n    if since is not None:\n        if isinstance(since, int):\n            loc = self.l.index[since]\n        elif isinstance(since, str):\n            loc = pd.to_datetime(since, utc=True)\n        elif isinstance(since, pd.Timestamp):\n            loc = since\n        else:\n            raise RuntimeError(f\"DataFeed.drop since {since} is invalid\")\n        condiction = self.index &lt; loc\n\n    # To\n    if to is not None:\n        if isinstance(to, int):\n            loc = self.l.index[to]\n        elif isinstance(to, str):\n            loc = pd.to_datetime(to, utc=True)\n        elif isinstance(to, pd.Timestamp):\n            loc = to\n        else:\n            raise RuntimeError(f\"DataFeed.drop to {to} is invalid\")\n\n        if condiction is None:\n            condiction = self.index &gt; loc\n        else:\n            condiction = condiction | (self.index &gt; loc)\n\n    index = self[condiction].index\n    super().drop(index=index, inplace=True)\n    self.l.reset()\n\n    if __debug__:\n        logger.debug(\"BackTestDataFeed %s dropped %s rows\", self.name, len(index))\n</code></pre>"},{"location":"reference/exchange/metatrader/metatrader/#lettrade.exchange.metatrader.metatrader.MetaTraderDataFeed.dump_csv","title":"dump_csv","text":"<pre><code>dump_csv(\n    path: str | None = None,\n    since: int | str | datetime | None = 0,\n    to: int | str | datetime | None = 1000,\n    **kwargs\n)\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>path</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>since</code>               (<code>int | str | datetime | None</code>, default:                   <code>0</code> )           \u2013            <p>description. Defaults to 0.</p> </li> <li> <code>to</code>               (<code>int | str | datetime | None</code>, default:                   <code>1000</code> )           \u2013            <p>description. Defaults to 1_000.</p> </li> </ul> Source code in <code>lettrade/exchange/live/data.py</code> <pre><code>def dump_csv(\n    self,\n    path: str | None = None,\n    since: int | str | datetime | None = 0,\n    to: int | str | datetime | None = 1_000,\n    **kwargs,\n):\n    \"\"\"_summary_\n\n    Args:\n        path (str | None, optional): _description_. Defaults to None.\n        since (int  |  str  |  datetime | None, optional): _description_. Defaults to 0.\n        to (int  |  str  |  datetime | None, optional): _description_. Defaults to 1_000.\n    \"\"\"\n    if self.empty:\n        if isinstance(since, str):\n            since = pd.to_datetime(since).to_pydatetime()\n        if isinstance(to, str):\n            to = pd.to_datetime(to).to_pydatetime()\n\n        self.bars_load(since=since, to=to)\n\n    if path is None:\n        path = f\"data/{self.name}-{since}_{to}.csv\"\n\n    from lettrade.data.extra.csv import csv_export\n\n    csv_export(dataframe=self, path=path, **kwargs)\n</code></pre>"},{"location":"reference/exchange/metatrader/metatrader/#lettrade.exchange.metatrader.metatrader.MetaTraderDataFeed.instance","title":"instance  <code>classmethod</code>","text":"<pre><code>instance(\n    api: LiveAPI | None = None,\n    api_kwargs: dict | None = None,\n    **kwargs\n) -&gt; LiveDataFeed\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>api</code>               (<code>LiveAPI</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>api_kwargs</code>               (<code>dict</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>Missing api requirement</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>LiveDataFeed</code> (              <code>LiveDataFeed</code> )          \u2013            <p>DataFeed object</p> </li> </ul> Source code in <code>lettrade/exchange/live/data.py</code> <pre><code>@classmethod\ndef instance(\n    cls,\n    api: LiveAPI | None = None,\n    api_kwargs: dict | None = None,\n    **kwargs,\n) -&gt; \"LiveDataFeed\":\n    \"\"\"_summary_\n\n    Args:\n        api (LiveAPI, optional): _description_. Defaults to None.\n        api_kwargs (dict, optional): _description_. Defaults to None.\n\n    Raises:\n        RuntimeError: Missing api requirement\n\n    Returns:\n        LiveDataFeed: DataFeed object\n    \"\"\"\n    if api is None:\n        if api_kwargs is None:\n            raise RuntimeError(\"api or api_kwargs cannot missing\")\n        api = cls._api_cls(**api_kwargs)\n    obj = cls(api=api, **kwargs)\n    return obj\n</code></pre>"},{"location":"reference/exchange/metatrader/metatrader/#lettrade.exchange.metatrader.metatrader.MetaTraderDataFeed.next","title":"next","text":"<pre><code>next(size=1, tick=0) -&gt; bool\n</code></pre> <p>Drop extra columns and load next DataFeed</p> <p>Parameters:</p> <ul> <li> <code>size</code>               (<code>int</code>, default:                   <code>1</code> )           \u2013            <p>description. Defaults to 1.</p> </li> <li> <code>tick</code>               (<code>int</code>, default:                   <code>0</code> )           \u2013            <p>description. Defaults to 0.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/live/data.py</code> <pre><code>def next(self, size=1, tick=0) -&gt; bool:\n    \"\"\"Drop extra columns and load next DataFeed\n\n    Args:\n        size (int, optional): _description_. Defaults to 1.\n        tick (int, optional): _description_. Defaults to 0.\n\n    Returns:\n        bool: _description_\n    \"\"\"\n    # Drop existed extra columns to skip reusing calculated data\n    self.drop(columns=self.columns.difference(self._base_columns), inplace=True)\n\n    self.bars_load(since=0, to=size + 1)\n    self.l.go_stop()\n    return True\n</code></pre>"},{"location":"reference/exchange/metatrader/metatrader/#lettrade.exchange.metatrader.metatrader.MetaTraderDataFeed.push","title":"push","text":"<pre><code>push(\n    rows: list[list[int | float]],\n    unit: str | None = None,\n    utc: bool = True,\n    **kwargs\n)\n</code></pre> <p>Push new rows to DataFeed</p> <p>Parameters:</p> <ul> <li> <code>rows</code>               (<code>list[list[int | float]]</code>)           \u2013            <p>list of rows <code>[[\"timestamp\", \"open price\", \"high price\"...]]</code></p> </li> <li> <code>unit</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>pandas.Timestamp parsing unit. Defaults to None.</p> </li> <li> <code>utc</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>description. Defaults to True.</p> </li> </ul> Source code in <code>lettrade/data/data.py</code> <pre><code>def push(\n    self,\n    rows: list[list[int | float]],\n    unit: str | None = None,\n    utc: bool = True,\n    **kwargs,\n):\n    \"\"\"Push new rows to DataFeed\n\n    Args:\n        rows (list[list[int | float]]): list of rows `[[\"timestamp\", \"open price\", \"high price\"...]]`\n        unit (str | None, optional): pandas.Timestamp parsing unit. Defaults to None.\n        utc (bool, optional): _description_. Defaults to True.\n    \"\"\"\n    for row in rows:\n        dt = pd.to_datetime(row[0], unit=unit, utc=utc, **kwargs)\n        self.at[\n            dt,\n            (\n                \"open\",\n                \"high\",\n                \"low\",\n                \"close\",\n                \"volume\",\n            ),\n        ] = (\n            row[1],  # open\n            row[2],  # high\n            row[3],  # low\n            row[4],  # close\n            row[5],  # volume\n        )\n\n    if __debug__:\n        logger.debug(\"[%s] Update bar: \\n%s\", self.name, self.tail(len(rows)))\n</code></pre>"},{"location":"reference/exchange/metatrader/metatrader/#lettrade.exchange.metatrader.metatrader.MetaTraderDataFeed.symbol_info","title":"symbol_info","text":"<pre><code>symbol_info()\n</code></pre> <p>Get symbol information from API</p> Source code in <code>lettrade/exchange/live/data.py</code> <pre><code>def symbol_info(self):\n    \"\"\"Get symbol information from API\"\"\"\n    return self._api.market(symbol=self.symbol)\n</code></pre>"},{"location":"reference/exchange/metatrader/metatrader/#lettrade.exchange.metatrader.metatrader.MetaTraderDataFeeder","title":"MetaTraderDataFeeder","text":"<pre><code>MetaTraderDataFeeder(\n    api: LiveAPI,\n    tick: bool = 5,\n    start_size: int = 500,\n    **kwargs\n)\n</code></pre> <p>               Bases: <code>LiveDataFeeder</code></p> <p>DataFeeder for MetaTrader</p> <pre><code>tick == 0: wait until new bar change value\ntick &gt; 0: sleep tick time (in seconds) then update\n</code></pre> Source code in <code>lettrade/exchange/live/feeder.py</code> <pre><code>def __init__(\n    self,\n    api: LiveAPI,\n    tick: bool = 5,\n    start_size: int = 500,\n    **kwargs,\n) -&gt; None:\n    \"\"\"\n    tick:\n        tick &lt; 0: no tick, just get completed bar\n        tick == 0: wait until new bar change value\n        tick &gt; 0: sleep tick time (in seconds) then update\n    \"\"\"\n    super().__init__()\n    self._api = api\n    self._tick = tick\n    self._start_size = start_size\n    self._config = kwargs\n\n    if isinstance(self._tick, int):\n        self._wait_timeframe = TimeFrame(f\"{self._tick}s\")\n    else:\n        self._wait_timeframe = None\n</code></pre>"},{"location":"reference/exchange/metatrader/metatrader/#lettrade.exchange.metatrader.metatrader.MetaTraderDataFeeder.is_continous","title":"is_continous  <code>property</code>","text":"<pre><code>is_continous\n</code></pre> <p>Flag check is realtime continous datafeeder</p>"},{"location":"reference/exchange/metatrader/metatrader/#lettrade.exchange.metatrader.metatrader.MetaTraderDataFeeder.instance","title":"instance  <code>classmethod</code>","text":"<pre><code>instance(\n    api: LiveAPI | None = None,\n    api_kwargs: dict | None = None,\n    **kwargs\n) -&gt; LiveDataFeed\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>api</code>               (<code>LiveAPI</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>api_kwargs</code>               (<code>dict</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>Missing api requirement</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>LiveDataFeed</code> (              <code>LiveDataFeed</code> )          \u2013            <p>DataFeed object</p> </li> </ul> Source code in <code>lettrade/exchange/live/feeder.py</code> <pre><code>@classmethod\ndef instance(\n    cls,\n    api: LiveAPI | None = None,\n    api_kwargs: dict | None = None,\n    **kwargs,\n) -&gt; \"LiveDataFeed\":\n    \"\"\"_summary_\n\n    Args:\n        api (LiveAPI, optional): _description_. Defaults to None.\n        api_kwargs (dict, optional): _description_. Defaults to None.\n\n    Raises:\n        RuntimeError: Missing api requirement\n\n    Returns:\n        LiveDataFeed: DataFeed object\n    \"\"\"\n    if api is None:\n        if api_kwargs is None:\n            raise RuntimeError(\"api or api_kwargs cannot missing\")\n        api = cls._api_cls(**api_kwargs)\n    obj = cls(api=api, **kwargs)\n    return obj\n</code></pre>"},{"location":"reference/exchange/metatrader/metatrader/#lettrade.exchange.metatrader.metatrader.MetaTraderExchange","title":"MetaTraderExchange","text":"<pre><code>MetaTraderExchange(api: LiveAPI, *args, **kwargs)\n</code></pre> <p>               Bases: <code>LiveExchange</code></p> <p>MetaTrade 5 exchange module for <code>lettrade</code></p> <p>Parameters:</p> <ul> <li> <code>api</code>               (<code>LiveAPI</code>)           \u2013            <p>API connect to rpyc MeTrader 5 Terminal server through module <code>mt5linux</code></p> </li> <li> <code>*args</code>               (<code>list</code>, default:                   <code>()</code> )           \u2013            <p><code>Exchange</code> list parameters</p> </li> <li> <code>**kwargs</code>               (<code>dict</code>, default:                   <code>{}</code> )           \u2013            <p><code>Exchange</code> dict parameters</p> </li> </ul> Source code in <code>lettrade/exchange/live/exchange.py</code> <pre><code>def __init__(self, api: LiveAPI, *args, **kwargs):\n    \"\"\"_summary_\n\n    Args:\n        api (LiveAPI): API connect to rpyc MeTrader 5 Terminal server through module `mt5linux`\n        *args (list): `Exchange` list parameters\n        **kwargs (dict): `Exchange` dict parameters\n    \"\"\"\n    super().__init__(*args, **kwargs)\n    self._api = api\n</code></pre>"},{"location":"reference/exchange/metatrader/metatrader/#lettrade.exchange.metatrader.metatrader.MetaTraderExchange.data","title":"data  <code>instance-attribute</code>","text":"<pre><code>data: DataFeed\n</code></pre> <p>main DataFeed</p>"},{"location":"reference/exchange/metatrader/metatrader/#lettrade.exchange.metatrader.metatrader.MetaTraderExchange.datas","title":"datas  <code>instance-attribute</code>","text":"<pre><code>datas: list[DataFeed]\n</code></pre> <p>List of all available DataFeed</p>"},{"location":"reference/exchange/metatrader/metatrader/#lettrade.exchange.metatrader.metatrader.MetaTraderExchange.executions","title":"executions  <code>instance-attribute</code>","text":"<pre><code>executions: dict[str, Execution] = dict()\n</code></pre> <p>Execution dict by <code>Execution.id</code> key</p>"},{"location":"reference/exchange/metatrader/metatrader/#lettrade.exchange.metatrader.metatrader.MetaTraderExchange.history_orders","title":"history_orders  <code>instance-attribute</code>","text":"<pre><code>history_orders: dict[str, Order] = dict()\n</code></pre> <p>History Order dict by <code>Order.id</code> key</p>"},{"location":"reference/exchange/metatrader/metatrader/#lettrade.exchange.metatrader.metatrader.MetaTraderExchange.history_positions","title":"history_positions  <code>instance-attribute</code>","text":"<pre><code>history_positions: dict[str, Position] = dict()\n</code></pre> <p>History Position dict by <code>Position.id</code> key</p>"},{"location":"reference/exchange/metatrader/metatrader/#lettrade.exchange.metatrader.metatrader.MetaTraderExchange.orders","title":"orders  <code>instance-attribute</code>","text":"<pre><code>orders: dict[str, Order] = dict()\n</code></pre> <p>Available Order dict by <code>Order.id</code> key</p>"},{"location":"reference/exchange/metatrader/metatrader/#lettrade.exchange.metatrader.metatrader.MetaTraderExchange.positions","title":"positions  <code>instance-attribute</code>","text":"<pre><code>positions: dict[str, Position] = dict()\n</code></pre> <p>Available Position dict by <code>Position.id</code> key</p>"},{"location":"reference/exchange/metatrader/metatrader/#lettrade.exchange.metatrader.metatrader.MetaTraderExchange.init","title":"init","text":"<pre><code>init(\n    brain: Brain,\n    feeder: DataFeeder,\n    account: Account,\n    commander: Commander,\n) -&gt; None\n</code></pre> <p>Init Exchange dependencies. Set data/datas from feeder. Set state to <code>ExchangeState.Start</code>.</p> <p>Parameters:</p> <ul> <li> <code>brain</code>               (<code>Brain</code>)           \u2013            <p>description</p> </li> <li> <code>feeder</code>               (<code>DataFeeder</code>)           \u2013            <p>description</p> </li> <li> <code>account</code>               (<code>Account</code>)           \u2013            <p>description</p> </li> <li> <code>commander</code>               (<code>Commander</code>)           \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def init(\n    self,\n    brain: \"Brain\",\n    feeder: DataFeeder,\n    account: Account,\n    commander: Commander,\n) -&gt; None:\n    \"\"\"Init Exchange dependencies.\n    Set data/datas from feeder.\n    Set state to `ExchangeState.Start`.\n\n    Args:\n        brain (Brain): _description_\n        feeder (DataFeeder): _description_\n        account (Account): _description_\n        commander (Commander): _description_\n    \"\"\"\n    self._brain = brain\n    self._feeder = feeder\n    self._account = account\n    self._commander = commander\n\n    self.data = self._feeder.data\n    self.datas = self._feeder.datas\n\n    self._account.init(exchange=self)\n\n    self._state = ExchangeState.Start\n</code></pre>"},{"location":"reference/exchange/metatrader/metatrader/#lettrade.exchange.metatrader.metatrader.MetaTraderExchange.new_order","title":"new_order","text":"<pre><code>new_order(\n    size: float,\n    type: OrderType | None = OrderType.Market,\n    limit: float | None = None,\n    stop: float | None = None,\n    sl: float | None = None,\n    tp: float | None = None,\n    tag: str | None = None,\n    data: DataFeed | None = None,\n    **kwargs\n) -&gt; OrderResult\n</code></pre> <p>Place new order to server</p> <p>Parameters:</p> <ul> <li> <code>size</code>               (<code>float</code>)           \u2013            <p>description</p> </li> <li> <code>type</code>               (<code>OrderType | None</code>, default:                   <code>Market</code> )           \u2013            <p>description. Defaults to OrderType.Market.</p> </li> <li> <code>limit</code>               (<code>float | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>stop</code>               (<code>float | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>sl</code>               (<code>float | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>tp</code>               (<code>float | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>tag</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>data</code>               (<code>DataFeed | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>OrderResult</code> (              <code>OrderResult</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/live/exchange.py</code> <pre><code>def new_order(\n    self,\n    size: float,\n    type: OrderType | None = OrderType.Market,\n    limit: float | None = None,\n    stop: float | None = None,\n    sl: float | None = None,\n    tp: float | None = None,\n    tag: str | None = None,\n    data: DataFeed | None = None,\n    **kwargs,\n) -&gt; OrderResult:\n    \"\"\"Place new order to server\n\n    Args:\n        size (float): _description_\n        type (OrderType | None, optional): _description_. Defaults to OrderType.Market.\n        limit (float | None, optional): _description_. Defaults to None.\n        stop (float | None, optional): _description_. Defaults to None.\n        sl (float | None, optional): _description_. Defaults to None.\n        tp (float | None, optional): _description_. Defaults to None.\n        tag (str | None, optional): _description_. Defaults to None.\n        data (DataFeed | None, optional): _description_. Defaults to None.\n\n    Returns:\n        OrderResult: _description_\n    \"\"\"\n    if not data:\n        data = self.data\n\n    if type == OrderType.Market:\n        limit = 0\n        stop = 0\n\n    order = self._order_cls(\n        id=-1,\n        exchange=self,\n        data=data,\n        size=size,\n        type=type,\n        limit_price=limit,\n        stop_price=stop,\n        sl_price=sl,\n        tp_price=tp,\n        tag=tag,\n        **kwargs,\n    )\n    ok = order.place()\n\n    # if __debug__:\n    #     logger.info(\"New order %s at %s\", order, self.data.now)\n\n    return ok\n</code></pre>"},{"location":"reference/exchange/metatrader/metatrader/#lettrade.exchange.metatrader.metatrader.MetaTraderExchange.next_next","title":"next_next","text":"<pre><code>next_next()\n</code></pre> <p>Call after strategy.next()</p> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def next_next(self):\n    \"\"\"Call after strategy.next()\"\"\"\n    self._account.next_next()\n</code></pre>"},{"location":"reference/exchange/metatrader/metatrader/#lettrade.exchange.metatrader.metatrader.MetaTraderExchange.on_execution","title":"on_execution","text":"<pre><code>on_execution(\n    execution: Execution,\n    broadcast: bool | None = True,\n    **kwargs\n) -&gt; None\n</code></pre> <p>Receive Execution event from exchange then store and notify Brain</p> <p>Parameters:</p> <ul> <li> <code>execution</code>               (<code>Execution</code>)           \u2013            <p>description</p> </li> <li> <code>broadcast</code>               (<code>bool | None</code>, default:                   <code>True</code> )           \u2013            <p>description. Defaults to True.</p> </li> </ul> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def on_execution(\n    self,\n    execution: Execution,\n    broadcast: bool | None = True,\n    **kwargs,\n) -&gt; None:\n    \"\"\"Receive Execution event from exchange then store and notify Brain\n\n    Args:\n        execution (Execution): _description_\n        broadcast (bool | None, optional): _description_. Defaults to True.\n    \"\"\"\n    self.on_executions(executions=[execution], broadcast=broadcast, **kwargs)\n</code></pre>"},{"location":"reference/exchange/metatrader/metatrader/#lettrade.exchange.metatrader.metatrader.MetaTraderExchange.on_executions","title":"on_executions","text":"<pre><code>on_executions(\n    executions: list[Execution],\n    broadcast: bool | None = True,\n    **kwargs\n) -&gt; None\n</code></pre> <p>Receive Execution event from exchange then store and notify Brain</p> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def on_executions(\n    self,\n    executions: list[Execution],\n    broadcast: bool | None = True,\n    **kwargs,\n) -&gt; None:\n    \"\"\"\n    Receive Execution event from exchange then store and notify Brain\n    \"\"\"\n    for execution in executions:\n        if not isinstance(execution, Execution):\n            raise RuntimeError(f\"{execution} is not instance of type Execution\")\n\n        if execution.id in self.executions:\n            # Merge to keep Execution handler for strategy using\n            # when strategy want to store Execution object\n            # and object will be automatic update directly\n            self.executions[execution.id].merge(execution)\n            execution = self.executions[execution.id]\n        else:\n            self.executions[execution.id] = execution\n\n    if self._state != ExchangeState.Run:\n        return\n\n    if broadcast:\n        self._brain.on_executions(executions)\n</code></pre>"},{"location":"reference/exchange/metatrader/metatrader/#lettrade.exchange.metatrader.metatrader.MetaTraderExchange.on_orders","title":"on_orders","text":"<pre><code>on_orders(\n    orders: list[Order],\n    broadcast: bool | None = True,\n    **kwargs\n) -&gt; None\n</code></pre> <p>Receive orders event from exchange then store and notify Brain</p> <p>Parameters:</p> <ul> <li> <code>orders</code>               (<code>list[Order]</code>)           \u2013            <p>description</p> </li> <li> <code>broadcast</code>               (<code>bool | None</code>, default:                   <code>True</code> )           \u2013            <p>description. Defaults to True.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def on_orders(\n    self,\n    orders: list[Order],\n    broadcast: bool | None = True,\n    **kwargs,\n) -&gt; None:\n    \"\"\"Receive orders event from exchange then store and notify Brain\n\n    Args:\n        orders (list[Order]): _description_\n        broadcast (bool | None, optional): _description_. Defaults to True.\n\n    Raises:\n        RuntimeError: _description_\n    \"\"\"\n    for order in orders:\n        if not isinstance(order, Order):\n            raise RuntimeError(f\"{order} is not instance of type Order\")\n\n        if order.is_closed:\n            if order.id in self.history_orders:\n                logger.warning(\"Order closed recall: %s\", order)\n\n            self.history_orders[order.id] = order\n            if order.id in self.orders:\n                del self.orders[order.id]\n        else:\n            if order.id in self.history_orders:\n                raise RuntimeError(f\"Order {order.id} closed\")\n\n            if order.id in self.orders:\n                # Merge to keep Order handler for strategy using\n                # when strategy want to store Order object\n                # and object will be automatic update directly\n                self.orders[order.id].merge(order)\n                order = self.orders[order.id]\n            else:\n                self.orders[order.id] = order\n\n    if self._state != ExchangeState.Run:\n        return\n\n    if broadcast:\n        self._brain.on_orders(orders)\n</code></pre>"},{"location":"reference/exchange/metatrader/metatrader/#lettrade.exchange.metatrader.metatrader.MetaTraderExchange.on_position","title":"on_position","text":"<pre><code>on_position(\n    position: Position,\n    broadcast: bool | None = True,\n    **kwargs\n) -&gt; None\n</code></pre> <p>Receive Position event from exchange then store and notify Brain</p> <p>Parameters:</p> <ul> <li> <code>position</code>               (<code>Position</code>)           \u2013            <p>new comming <code>Position</code></p> </li> <li> <code>broadcast</code>               (<code>bool | None</code>, default:                   <code>True</code> )           \u2013            <p>Flag notify to Brain. Defaults to True.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>validate <code>Position</code> instance</p> </li> </ul> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def on_position(\n    self,\n    position: Position,\n    broadcast: bool | None = True,\n    **kwargs,\n) -&gt; None:\n    \"\"\"Receive Position event from exchange then store and notify Brain\n\n    Args:\n        position (Position): new comming `Position`\n        broadcast (bool | None, optional): Flag notify to Brain. Defaults to True.\n\n    Raises:\n        RuntimeError: validate `Position` instance\n    \"\"\"\n    self.on_positions(positions=[position], broadcast=broadcast, **kwargs)\n</code></pre>"},{"location":"reference/exchange/metatrader/metatrader/#lettrade.exchange.metatrader.metatrader.MetaTraderExchange.on_positions","title":"on_positions","text":"<pre><code>on_positions(\n    positions: list[Position],\n    broadcast: bool | None = True,\n    **kwargs\n) -&gt; None\n</code></pre> <p>Receive Positions event from exchange then store and notify Brain</p> <p>Parameters:</p> <ul> <li> <code>positions</code>               (<code>list[Position]</code>)           \u2013            <p>list of new comming <code>Position</code></p> </li> <li> <code>broadcast</code>               (<code>bool | None</code>, default:                   <code>True</code> )           \u2013            <p>Flag notify to Brain. Defaults to True.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>validate <code>Position</code> instance</p> </li> </ul> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def on_positions(\n    self,\n    positions: list[Position],\n    broadcast: bool | None = True,\n    **kwargs,\n) -&gt; None:\n    \"\"\"Receive Positions event from exchange then store and notify Brain\n\n    Args:\n        positions (list[Position]): list of new comming `Position`\n        broadcast (bool | None, optional): Flag notify to Brain. Defaults to True.\n\n    Raises:\n        RuntimeError: validate `Position` instance\n    \"\"\"\n    for position in positions:\n        if not isinstance(position, Position):\n            raise RuntimeError(f\"{position} is not instance of type Position\")\n\n        if position.is_exited:\n            if position.id in self.history_positions:\n                logger.warning(\"Position exited recall: %s\", position)\n\n            self.history_positions[position.id] = position\n            if position.id in self.positions:\n                del self.positions[position.id]\n\n            # self._account._on_position_exit(position)\n        else:\n            if position.id in self.history_positions:\n                raise RuntimeError(f\"Position {position.id} closed: {position}\")\n            if position.id in self.positions:\n                # Merge to keep Position handler for strategy using\n                # when strategy want to store Position object\n                # and object will be automatic update directly\n                self.positions[position.id].merge(position)\n                position = self.positions[position.id]\n            else:\n                self.positions[position.id] = position\n                # self._account._on_position_entry(position)\n\n    self._account.on_positions(positions)\n\n    if self._state != ExchangeState.Run:\n        return\n\n    if broadcast:\n        self._brain.on_positions(positions)\n</code></pre>"},{"location":"reference/exchange/metatrader/metatrader/#lettrade.exchange.metatrader.metatrader.MetaTraderExchange.start","title":"start","text":"<pre><code>start() -&gt; None\n</code></pre> <p>Start Live exchange by: Sync positions from server</p> Source code in <code>lettrade/exchange/live/exchange.py</code> <pre><code>def start(self) -&gt; None:\n    \"\"\"Start Live exchange by: Sync positions from server\"\"\"\n    self._api.start(exchange=self)\n    return super().start()\n</code></pre>"},{"location":"reference/exchange/metatrader/metatrader/#lettrade.exchange.metatrader.metatrader.MetaTraderExchange.stop","title":"stop","text":"<pre><code>stop() -&gt; None\n</code></pre> <p>Stop Exchange</p> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def stop(self) -&gt; None:\n    \"\"\"Stop Exchange\"\"\"\n    self._state = ExchangeState.Stop\n    self._account.stop()\n</code></pre>"},{"location":"reference/exchange/metatrader/metatrader/#lettrade.exchange.metatrader.metatrader.let_metatrader","title":"let_metatrader","text":"<pre><code>let_metatrader(\n    datas: set[set[str]],\n    strategy: type[Strategy],\n    *,\n    mt5_login: int,\n    mt5_password: str,\n    mt5_server: str,\n    mt5_wine: str | None = None,\n    feeder: type[\n        MetaTraderDataFeeder\n    ] = MetaTraderDataFeeder,\n    exchange: type[MetaTraderExchange] = MetaTraderExchange,\n    account: type[MetaTraderAccount] = MetaTraderAccount,\n    commander: type[Commander] | None = None,\n    stats: type[BotStatistic] = BotStatistic,\n    plotter: type[Plotter] | None = None,\n    bot: type[\n        LetTradeMetaTraderBot\n    ] = LetTradeMetaTraderBot,\n    lettrade: type[LetTradeMetaTrader] = LetTradeMetaTrader,\n    api: type[MetaTraderAPI] = MetaTraderAPI,\n    **kwargs\n) -&gt; LetTradeMetaTrader\n</code></pre> <p>Help to build <code>LetTradeMetaTrader</code></p> <p>Parameters:</p> <ul> <li> <code>datas</code>               (<code>set[set[str]]</code>)           \u2013            <p>description</p> </li> <li> <code>strategy</code>               (<code>type[Strategy]</code>)           \u2013            <p>description</p> </li> <li> <code>mt5_login</code>               (<code>int</code>)           \u2013            <p>description</p> </li> <li> <code>mt5_password</code>               (<code>str</code>)           \u2013            <p>description</p> </li> <li> <code>mt5_server</code>               (<code>str</code>)           \u2013            <p>description</p> </li> <li> <code>mt5_wine</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>WineHQ execute path. Defaults to None.</p> </li> <li> <code>feeder</code>               (<code>type[MetaTraderDataFeeder]</code>, default:                   <code>MetaTraderDataFeeder</code> )           \u2013            <p>description. Defaults to MetaTraderDataFeeder.</p> </li> <li> <code>exchange</code>               (<code>type[MetaTraderExchange]</code>, default:                   <code>MetaTraderExchange</code> )           \u2013            <p>description. Defaults to MetaTraderExchange.</p> </li> <li> <code>account</code>               (<code>type[MetaTraderAccount]</code>, default:                   <code>MetaTraderAccount</code> )           \u2013            <p>description. Defaults to MetaTraderAccount.</p> </li> <li> <code>commander</code>               (<code>type[Commander] | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>stats</code>               (<code>type[BotStatistic]</code>, default:                   <code>BotStatistic</code> )           \u2013            <p>description. Defaults to BotStatistic.</p> </li> <li> <code>plotter</code>               (<code>type[Plotter] | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>bot</code>               (<code>type[LetTradeMetaTraderBot]</code>, default:                   <code>LetTradeMetaTraderBot</code> )           \u2013            <p>description. Defaults to LetTradeMetaTraderBot.</p> </li> <li> <code>lettrade</code>               (<code>type[LetTradeMetaTrader]</code>, default:                   <code>LetTradeMetaTrader</code> )           \u2013            <p>description. Defaults to LetTradeMetaTrader.</p> </li> <li> <code>api</code>               (<code>type[MetaTraderAPI]</code>, default:                   <code>MetaTraderAPI</code> )           \u2013            <p>description. Defaults to MetaTraderAPI.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>LetTradeMetaTrader</code> (              <code>LetTradeMetaTrader</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/metatrader/metatrader.py</code> <pre><code>def let_metatrader(\n    datas: set[set[str]],\n    strategy: type[Strategy],\n    *,\n    mt5_login: int,\n    mt5_password: str,\n    mt5_server: str,\n    mt5_wine: str | None = None,\n    feeder: type[MetaTraderDataFeeder] = MetaTraderDataFeeder,\n    exchange: type[MetaTraderExchange] = MetaTraderExchange,\n    account: type[MetaTraderAccount] = MetaTraderAccount,\n    commander: type[Commander] | None = None,\n    stats: type[BotStatistic] = BotStatistic,\n    plotter: type[Plotter] | None = None,\n    bot: type[LetTradeMetaTraderBot] = LetTradeMetaTraderBot,\n    lettrade: type[LetTradeMetaTrader] = LetTradeMetaTrader,\n    api: type[MetaTraderAPI] = MetaTraderAPI,\n    **kwargs,\n) -&gt; LetTradeMetaTrader:\n    \"\"\"Help to build `LetTradeMetaTrader`\n\n    Args:\n        datas (set[set[str]]): _description_\n        strategy (type[Strategy]): _description_\n        mt5_login (int): _description_\n        mt5_password (str): _description_\n        mt5_server (str): _description_\n        mt5_wine (str | None, optional): WineHQ execute path. Defaults to None.\n        feeder (type[MetaTraderDataFeeder], optional): _description_. Defaults to MetaTraderDataFeeder.\n        exchange (type[MetaTraderExchange], optional): _description_. Defaults to MetaTraderExchange.\n        account (type[MetaTraderAccount], optional): _description_. Defaults to MetaTraderAccount.\n        commander (type[Commander] | None, optional): _description_. Defaults to None.\n        stats (type[BotStatistic], optional): _description_. Defaults to BotStatistic.\n        plotter (type[Plotter] | None, optional): _description_. Defaults to None.\n        bot (type[LetTradeMetaTraderBot], optional): _description_. Defaults to LetTradeMetaTraderBot.\n        lettrade (type[LetTradeMetaTrader], optional): _description_. Defaults to LetTradeMetaTrader.\n        api (type[MetaTraderAPI], optional): _description_. Defaults to MetaTraderAPI.\n\n    Returns:\n        LetTradeMetaTrader: _description_\n    \"\"\"\n    api_kwargs: dict = kwargs.setdefault(\"api_kwargs\", {})\n    api_kwargs.update(\n        login=int(mt5_login),\n        password=mt5_password,\n        server=mt5_server,\n        wine=mt5_wine,\n    )\n\n    return let_live(\n        strategy=strategy,\n        datas=datas,\n        feeder=feeder,\n        exchange=exchange,\n        account=account,\n        commander=commander,\n        stats=stats,\n        plotter=plotter,\n        bot=bot,\n        lettrade=lettrade,\n        api=api,\n        **kwargs,\n    )\n</code></pre>"},{"location":"reference/exchange/metatrader/trade/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> trade","text":""},{"location":"reference/exchange/metatrader/trade/#lettrade.exchange.metatrader.trade","title":"trade","text":""},{"location":"reference/exchange/metatrader/trade/#lettrade.exchange.metatrader.trade.MetaTraderExecution","title":"MetaTraderExecution","text":"<pre><code>MetaTraderExecution(\n    pl: float = None,\n    fee: float = None,\n    tag: str | None = None,\n    **kwargs\n)\n</code></pre> <p>               Bases: <code>LiveExecution</code></p> <p>Execution for MetaTrader</p> Source code in <code>lettrade/exchange/metatrader/trade.py</code> <pre><code>def __init__(\n    self,\n    pl: float = None,\n    fee: float = None,\n    tag: str | None = None,\n    **kwargs,\n):\n    super().__init__(**kwargs)\n    self.pl: float = pl\n    self.fee: float = fee\n    self.tag: str | None = tag\n</code></pre>"},{"location":"reference/exchange/metatrader/trade/#lettrade.exchange.metatrader.trade.MetaTraderExecution.is_long","title":"is_long  <code>property</code>","text":"<pre><code>is_long: bool\n</code></pre> <p>True if side is long (size is positive).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True/False</p> </li> </ul>"},{"location":"reference/exchange/metatrader/trade/#lettrade.exchange.metatrader.trade.MetaTraderExecution.is_short","title":"is_short  <code>property</code>","text":"<pre><code>is_short: bool\n</code></pre> <p>True if side is short (size is negative).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/metatrader/trade/#lettrade.exchange.metatrader.trade.MetaTraderExecution.side","title":"side  <code>property</code>","text":"<pre><code>side: TradeSide\n</code></pre> <p>True if side is short (size is negative).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>TradeSide</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/metatrader/trade/#lettrade.exchange.metatrader.trade.MetaTraderExecution.from_raw","title":"from_raw  <code>classmethod</code>","text":"<pre><code>from_raw(\n    raw,\n    exchange: MetaTraderExchange,\n    data: LiveDataFeed | None = None,\n    api: MetaTraderAPI | None = None,\n) -&gt; MetaTraderExecution | None\n</code></pre> <p>Building new MetaTraderExecution from live api raw object</p> <p>Parameters:</p> <ul> <li> <code>raw</code>               (<code>_type_</code>)           \u2013            <p>description</p> </li> <li> <code>exchange</code>               (<code>MetaTraderExchange</code>)           \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>MetaTraderExecution</code> (              <code>MetaTraderExecution | None</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/metatrader/trade.py</code> <pre><code>@classmethod\ndef from_raw(\n    cls,\n    raw,\n    exchange: \"MetaTraderExchange\",\n    data: \"LiveDataFeed | None\" = None,\n    api: MetaTraderAPI | None = None,\n) -&gt; \"MetaTraderExecution | None\":\n    \"\"\"Building new MetaTraderExecution from live api raw object\n\n    Args:\n        raw (_type_): _description_\n        exchange (MetaTraderExchange): _description_\n\n    Returns:\n        MetaTraderExecution: _description_\n    \"\"\"\n    # DataFeed\n    if data is None:\n        for d in exchange.datas:\n            if d.symbol == raw.symbol:\n                data = d\n                break\n        if data is None:\n            logger.warning(\"Raw execution %s is not handling %s\", raw.symbol, raw)\n            return\n    # Side\n    match raw.type:\n        case MT5.DEAL_TYPE_BUY:\n            side = TradeSide.Buy\n        case MT5.DEAL_TYPE_SELL:\n            side = TradeSide.Sell\n        case _:\n            logger.warning(\n                \"Raw execution %s type %s is not handling %s\",\n                raw.symbol,\n                raw.type,\n                raw,\n            )\n            return\n\n    return cls(\n        exchange=exchange,\n        id=raw.ticket,\n        data=data,\n        order_id=raw.order,\n        position_id=raw.position_id,\n        size=side * raw.volume,\n        price=raw.price,\n        pl=raw.profit,\n        fee=raw.fee + raw.swap + raw.commission,\n        at=pd.to_datetime(raw.time_msc, unit=\"ms\", utc=True),\n        tag=raw.comment,\n        api=api,\n        raw=raw,\n    )\n</code></pre>"},{"location":"reference/exchange/metatrader/trade/#lettrade.exchange.metatrader.trade.MetaTraderExecution.merge","title":"merge","text":"<pre><code>merge(other: Execution)\n</code></pre> <p>Merge to keep object handler but not overwrite for Strategy using when Strategy want to store object and object will be automatic update directly</p> Source code in <code>lettrade/exchange/execution.py</code> <pre><code>def merge(self, other: \"Execution\"):\n    \"\"\"\n    Merge to keep object handler but not overwrite for Strategy using when Strategy want to store object and object will be automatic update directly\n    \"\"\"\n    if other is self:\n        return\n\n    if self.id != other.id:\n        raise RuntimeError(f\"Merge difference id {self.id} != {other.id} execution\")\n\n    self.price = other.price\n    self.size = other.size\n\n    if other.at:\n        self.at = other.at\n    if other.order_id:\n        self.order_id = other.order_id\n    if other.order:\n        self.order = other.order\n    if other.position_id:\n        self.position_id = other.position_id\n    if other.position:\n        self.position = other.position\n</code></pre>"},{"location":"reference/exchange/metatrader/trade/#lettrade.exchange.metatrader.trade.MetaTraderOrder","title":"MetaTraderOrder","text":"<pre><code>MetaTraderOrder(is_real: bool = True, **kwargs)\n</code></pre> <p>               Bases: <code>LiveOrder</code></p> <p>Order for MetaTrader</p> Source code in <code>lettrade/exchange/metatrader/trade.py</code> <pre><code>def __init__(self, is_real: bool = True, **kwargs):\n    super().__init__(**kwargs)\n\n    self.is_real: bool = is_real\n    \"\"\"Flag to check `Order` is real, cannot duplicate id, cannot recall from history\"\"\"\n</code></pre>"},{"location":"reference/exchange/metatrader/trade/#lettrade.exchange.metatrader.trade.MetaTraderOrder.is_closed","title":"is_closed  <code>property</code>","text":"<pre><code>is_closed: bool\n</code></pre> <p>Flag to check <code>Order</code> closed</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True if <code>state</code> in [OrderState.Filled, OrderState.Canceled]</p> </li> </ul>"},{"location":"reference/exchange/metatrader/trade/#lettrade.exchange.metatrader.trade.MetaTraderOrder.is_long","title":"is_long  <code>property</code>","text":"<pre><code>is_long: bool\n</code></pre> <p>True if side is long (size is positive).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True/False</p> </li> </ul>"},{"location":"reference/exchange/metatrader/trade/#lettrade.exchange.metatrader.trade.MetaTraderOrder.is_opening","title":"is_opening  <code>property</code>","text":"<pre><code>is_opening: bool\n</code></pre> <p>Flag to check <code>Order</code> still alive</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True if <code>state</code> in [OrderState.Pending, OrderState.Placed, OrderState.Partial]</p> </li> </ul>"},{"location":"reference/exchange/metatrader/trade/#lettrade.exchange.metatrader.trade.MetaTraderOrder.is_real","title":"is_real  <code>instance-attribute</code>","text":"<pre><code>is_real: bool = is_real\n</code></pre> <p>Flag to check <code>Order</code> is real, cannot duplicate id, cannot recall from history</p>"},{"location":"reference/exchange/metatrader/trade/#lettrade.exchange.metatrader.trade.MetaTraderOrder.is_short","title":"is_short  <code>property</code>","text":"<pre><code>is_short: bool\n</code></pre> <p>True if side is short (size is negative).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/metatrader/trade/#lettrade.exchange.metatrader.trade.MetaTraderOrder.is_sl_order","title":"is_sl_order  <code>property</code>","text":"<pre><code>is_sl_order: bool\n</code></pre> <p><code>Order</code> is stop-loss order of a <code>Position</code></p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/metatrader/trade/#lettrade.exchange.metatrader.trade.MetaTraderOrder.is_tp_order","title":"is_tp_order  <code>property</code>","text":"<pre><code>is_tp_order: bool\n</code></pre> <p><code>Order</code> is take-profit order of a <code>Position</code></p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/metatrader/trade/#lettrade.exchange.metatrader.trade.MetaTraderOrder.limit","title":"limit  <code>property</code>","text":"<pre><code>limit: float | None\n</code></pre> <p>Getter of limit_price</p> <p>Returns:</p> <ul> <li> <code>float | None</code>           \u2013            <p>float | None: <code>float</code> or <code>None</code></p> </li> </ul>"},{"location":"reference/exchange/metatrader/trade/#lettrade.exchange.metatrader.trade.MetaTraderOrder.place_price","title":"place_price  <code>property</code>","text":"<pre><code>place_price: float | None\n</code></pre> <p>Getter of place_price</p> <p>Returns:</p> <ul> <li> <code>float | None</code>           \u2013            <p>float | None: <code>float</code> or <code>None</code></p> </li> </ul>"},{"location":"reference/exchange/metatrader/trade/#lettrade.exchange.metatrader.trade.MetaTraderOrder.side","title":"side  <code>property</code>","text":"<pre><code>side: TradeSide\n</code></pre> <p>True if side is short (size is negative).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>TradeSide</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/metatrader/trade/#lettrade.exchange.metatrader.trade.MetaTraderOrder.sl","title":"sl  <code>property</code>","text":"<pre><code>sl: float | None\n</code></pre> <p>Getter of sl_price</p> <p>Returns:</p> <ul> <li> <code>float | None</code>           \u2013            <p>float | None: <code>float</code> or <code>None</code></p> </li> </ul>"},{"location":"reference/exchange/metatrader/trade/#lettrade.exchange.metatrader.trade.MetaTraderOrder.stop","title":"stop  <code>property</code>","text":"<pre><code>stop: float | None\n</code></pre> <p>Getter of stop_price</p> <p>Returns:</p> <ul> <li> <code>float | None</code>           \u2013            <p>float | None: <code>float</code> or <code>None</code></p> </li> </ul>"},{"location":"reference/exchange/metatrader/trade/#lettrade.exchange.metatrader.trade.MetaTraderOrder.tp","title":"tp  <code>property</code>","text":"<pre><code>tp: float | None\n</code></pre> <p>Getter of tp_price</p> <p>Returns:</p> <ul> <li> <code>float | None</code>           \u2013            <p>float | None: <code>float</code> or <code>None</code></p> </li> </ul>"},{"location":"reference/exchange/metatrader/trade/#lettrade.exchange.metatrader.trade.MetaTraderOrder.cancel","title":"cancel","text":"<pre><code>cancel(**kwargs) -&gt; OrderResult\n</code></pre> <p>Cancel order</p> <p>Returns:</p> <ul> <li> <code>OrderResult</code> (              <code>OrderResult</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/metatrader/trade.py</code> <pre><code>def cancel(self, **kwargs) -&gt; OrderResult:\n    \"\"\"Cancel order\n\n    Returns:\n        OrderResult: _description_\n    \"\"\"\n    if not self.parent:\n        # Abandon order\n        result = self._api.order_close(order=self, **kwargs)\n    else:\n        # Virtual SL/TP order of trade\n        result = None\n\n    return super(LiveOrder, self).cancel(raw=result)\n</code></pre>"},{"location":"reference/exchange/metatrader/trade/#lettrade.exchange.metatrader.trade.MetaTraderOrder.fill","title":"fill","text":"<pre><code>fill(\n    price: float, at: Timestamp, raw: object | None = None\n) -&gt; OrderResult\n</code></pre> <p>Fill <code>Order</code>. Set <code>status</code> to <code>OrderState.Executed</code>. Send event to <code>Exchange</code></p> <p>Parameters:</p> <ul> <li> <code>price</code>               (<code>float</code>)           \u2013            <p>Executed price</p> </li> <li> <code>at</code>               (<code>Timestamp</code>)           \u2013            <p>Executed bar</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>OrderResult</code> (              <code>OrderResult</code> )          \u2013            <p>result of <code>Order</code></p> </li> </ul> Source code in <code>lettrade/exchange/order.py</code> <pre><code>def fill(\n    self,\n    price: float,\n    at: pd.Timestamp,\n    raw: object | None = None,\n) -&gt; \"OrderResult\":\n    \"\"\"Fill `Order`.\n    Set `status` to `OrderState.Executed`.\n    Send event to `Exchange`\n\n    Args:\n        price (float): Executed price\n        at (pd.Timestamp): Executed bar\n\n    Raises:\n        RuntimeError: _description_\n\n    Returns:\n        OrderResult: result of `Order`\n    \"\"\"\n    if self.state != OrderState.Placed:\n        raise RuntimeError(f\"Order {self.id} state {self.state} is not Placed\")\n\n    self.filled_at = at\n    self.filled_price = price\n    self.state = OrderState.Filled\n    self.exchange.on_order(self)\n    return OrderResultOk(order=self, raw=raw)\n</code></pre>"},{"location":"reference/exchange/metatrader/trade/#lettrade.exchange.metatrader.trade.MetaTraderOrder.from_position","title":"from_position  <code>classmethod</code>","text":"<pre><code>from_position(\n    position: MetaTraderPosition,\n    sl: float | None = None,\n    tp: float | None = None,\n) -&gt; MetaTraderOrder\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>position</code>               (<code>MetaTraderPosition</code>)           \u2013            <p>description</p> </li> <li> <code>sl</code>               (<code>float | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>tp</code>               (<code>float | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>MetaTraderOrder</code> (              <code>MetaTraderOrder</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/metatrader/trade.py</code> <pre><code>@classmethod\ndef from_position(\n    cls,\n    position: \"MetaTraderPosition\",\n    sl: float | None = None,\n    tp: float | None = None,\n) -&gt; \"MetaTraderOrder\":\n    \"\"\"_summary_\n\n    Args:\n        position (MetaTraderPosition): _description_\n        sl (float | None, optional): _description_. Defaults to None.\n        tp (float | None, optional): _description_. Defaults to None.\n\n    Raises:\n        RuntimeError: _description_\n\n    Returns:\n        MetaTraderOrder: _description_\n    \"\"\"\n    if not sl and not tp:\n        raise RuntimeError(\"not sl and not tp\")\n    return cls(\n        id=f\"{position.id}-{'sl' if sl else 'tp'}\",\n        exchange=position.exchange,\n        data=position.data,\n        state=OrderState.Placed,\n        type=OrderType.Stop if sl else OrderType.Limit,\n        size=-position.size,\n        limit_price=tp,\n        stop_price=sl,\n        parent=position,\n        placed_at=position.entry_at,\n        is_real=False,\n    )\n</code></pre>"},{"location":"reference/exchange/metatrader/trade/#lettrade.exchange.metatrader.trade.MetaTraderOrder.from_raw","title":"from_raw  <code>classmethod</code>","text":"<pre><code>from_raw(\n    raw: Any,\n    exchange: MetaTraderExchange,\n    data: LiveDataFeed | None = None,\n    api: MetaTraderAPI | None = None,\n) -&gt; MetaTraderOrder | None\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>raw</code>               (<code>Any</code>)           \u2013            <p>description</p> </li> <li> <code>exchange</code>               (<code>MetaTraderExchange</code>)           \u2013            <p>description</p> </li> <li> <code>data</code>               (<code>LiveDataFeed | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>api</code>               (<code>MetaTraderAPI | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>NotImplementedError</code>             \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>MetaTraderOrder | None</code>           \u2013            <p>MetaTraderOrder | None: description</p> </li> </ul> Source code in <code>lettrade/exchange/metatrader/trade.py</code> <pre><code>@classmethod\ndef from_raw(\n    cls,\n    raw: Any,\n    exchange: \"MetaTraderExchange\",\n    data: \"LiveDataFeed | None\" = None,\n    api: MetaTraderAPI | None = None,\n) -&gt; \"MetaTraderOrder | None\":\n    \"\"\"_summary_\n\n    Args:\n        raw (Any): _description_\n        exchange (MetaTraderExchange): _description_\n        data (LiveDataFeed | None, optional): _description_. Defaults to None.\n        api (MetaTraderAPI | None, optional): _description_. Defaults to None.\n\n    Raises:\n        NotImplementedError: _description_\n\n    Returns:\n        MetaTraderOrder | None: _description_\n    \"\"\"\n    # DataFeed\n    if data is None:\n        for d in exchange.datas:\n            if d.symbol == raw.symbol:\n                data = d\n                break\n        if data is None:\n            logger.warning(\"Raw order %s is not handling %s\", raw.symbol, raw)\n            return\n\n    # Prices &amp; Side &amp; Type\n    limit_price = None\n    stop_price = None\n    match raw.type:\n        case MT5.ORDER_TYPE_BUY:\n            side = TradeSide.Buy\n            type = OrderType.Market\n        case MT5.ORDER_TYPE_SELL:\n            side = TradeSide.Sell\n            type = OrderType.Market\n        case MT5.ORDER_TYPE_BUY_LIMIT:\n            side = TradeSide.Buy\n            type = OrderType.Limit\n            limit_price = raw.price_open\n        case MT5.ORDER_TYPE_SELL_LIMIT:\n            side = TradeSide.Sell\n            type = OrderType.Limit\n            limit_price = raw.price_open\n        case MT5.ORDER_TYPE_BUY_STOP:\n            side = TradeSide.Buy\n            type = OrderType.Stop\n            stop_price = raw.price_open\n        case MT5.ORDER_TYPE_SELL_STOP:\n            side = TradeSide.Sell\n            type = OrderType.Stop\n            stop_price = raw.price_open\n        # case MT5.ORDER_TYPE_BUY_STOP_LIMIT:\n        #     side = TradeSide.Buy\n        #     type = OrderType.StopLimit\n        #     # TODO\n        #     limit_price = raw.price_open\n        #     stop_price = raw.price_open\n        # case MT5.ORDER_TYPE_SELL_STOP_LIMIT:\n        #     side = TradeSide.Sell\n        #     type = OrderType.StopLimit\n        #     # TODO\n        #     limit_price = raw.price_open\n        #     stop_price = raw.price_open\n        # case MT5.ORDER_TYPE_CLOSE_BY:\n        case _:\n            raise NotImplementedError(\n                f\"Order type {raw.type} is not implement\",\n                raw,\n            )\n    # State\n    match raw.state:\n        case MT5.ORDER_STATE_STARTED:\n            state = OrderState.Pending\n        case MT5.ORDER_STATE_PLACED:\n            state = OrderState.Placed\n        case MT5.ORDER_STATE_CANCELED:\n            state = OrderState.Canceled\n        case MT5.ORDER_STATE_PARTIAL:\n            state = OrderState.Partial\n        case MT5.ORDER_STATE_FILLED:\n            state = OrderState.Filled\n        case MT5.ORDER_STATE_REJECTED:\n            state = OrderState.Canceled\n        case MT5.ORDER_STATE_EXPIRED:\n            state = OrderState.Canceled\n        case MT5.ORDER_STATE_REQUEST_ADD:\n            state = OrderState.Placed\n        case MT5.ORDER_STATE_REQUEST_MODIFY:\n            state = OrderState.Placed\n        case MT5.ORDER_STATE_REQUEST_CANCEL:\n            state = OrderState.Canceled\n        case _:\n            raise NotImplementedError(\n                f\"Raw order state {raw.state} is not implement\"\n            )\n\n    order = cls(\n        exchange=exchange,\n        id=raw.ticket,\n        state=state,\n        data=data,\n        size=side * (raw.volume_current or raw.volume_initial),\n        type=type,\n        limit_price=limit_price,\n        stop_price=stop_price,\n        sl_price=raw.sl or None,\n        tp_price=raw.tp or None,\n        tag=raw.comment,\n        placed_at=pd.to_datetime(raw.time_setup_msc, unit=\"ms\", utc=True),\n        api=api,\n        raw=raw,\n    )\n\n    if hasattr(raw, \"time_done_msc\"):\n        order.filled_price = raw.price_current\n        order.filled_at = pd.to_datetime(raw.time_done_msc, unit=\"ms\", utc=True)\n\n    return order\n</code></pre>"},{"location":"reference/exchange/metatrader/trade/#lettrade.exchange.metatrader.trade.MetaTraderOrder.merge","title":"merge","text":"<pre><code>merge(other: Order)\n</code></pre> <p>Update current <code>Order</code> variables by other <code>Order</code></p> <p>Parameters:</p> <ul> <li> <code>other</code>               (<code>Order</code>)           \u2013            <p>Merge source <code>Order</code></p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>Validate same id</p> </li> </ul> Source code in <code>lettrade/exchange/order.py</code> <pre><code>def merge(self, other: \"Order\"):\n    \"\"\"Update current `Order` variables by other `Order`\n\n    Args:\n        other (Order): Merge source `Order`\n\n    Raises:\n        RuntimeError: Validate same id\n    \"\"\"\n    if other is self:\n        return\n\n    if self.id != other.id:\n        raise RuntimeError(f\"Merge difference id {self.id} != {other.id} order\")\n\n    self.size = other.size\n    self.sl_price = other.sl_price\n    self.tp_price = other.tp_price\n\n    if other.limit_price:\n        self.limit_price = other.limit_price\n    if other.stop_price:\n        self.stop_price = other.stop_price\n    if other.placed_at:\n        self.placed_at = other.placed_at\n\n    if other.filled_price:\n        self.filled_price = other.filled_price\n    if other.filled_at:\n        self.filled_at = other.filled_at\n\n    if other.parent:\n        self.parent = other.parent\n</code></pre>"},{"location":"reference/exchange/metatrader/trade/#lettrade.exchange.metatrader.trade.MetaTraderOrder.place","title":"place","text":"<pre><code>place() -&gt; OrderResult\n</code></pre> <p>summary</p> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>OrderResult</code> (              <code>OrderResult</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/metatrader/trade.py</code> <pre><code>def place(self) -&gt; OrderResult:\n    \"\"\"_summary_\n\n    Raises:\n        RuntimeError: _description_\n\n    Returns:\n        OrderResult: _description_\n    \"\"\"\n    if self.state != OrderState.Pending:\n        raise RuntimeError(f\"Order {self.id} state {self.state} is not Pending\")\n\n    try:\n        result = self._api.order_open(self)\n\n        self.raw = result\n        self.id = result.order\n\n        # TODO: get current order time\n        return super(LiveOrder, self).place(at=self.data.l.index[0], raw=result)\n    except LetLiveOrderInvalidException as e:\n        error = OrderResultError(\n            error=e.message,\n            order=self,\n            raw=e.raw,\n        )\n        logger.error(\"Place order %s\", str(error))\n        self.exchange.on_notify(error=error)\n        return error\n</code></pre>"},{"location":"reference/exchange/metatrader/trade/#lettrade.exchange.metatrader.trade.MetaTraderOrder.update","title":"update","text":"<pre><code>update(\n    limit_price: float | None = None,\n    stop_price: float | None = None,\n    sl: float | None = None,\n    tp: float | None = None,\n    caller: float | None = None,\n    **kwargs\n) -&gt; OrderResult\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>limit_price</code>               (<code>float | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>stop_price</code>               (<code>float | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>sl</code>               (<code>float | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>tp</code>               (<code>float | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>caller</code>               (<code>float | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>OrderResult</code> (              <code>OrderResult</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/metatrader/trade.py</code> <pre><code>def update(\n    self,\n    limit_price: float | None = None,\n    stop_price: float | None = None,\n    sl: float | None = None,\n    tp: float | None = None,\n    caller: float | None = None,\n    **kwargs,\n) -&gt; OrderResult:\n    \"\"\"_summary_\n\n    Args:\n        limit_price (float | None, optional): _description_. Defaults to None.\n        stop_price (float | None, optional): _description_. Defaults to None.\n        sl (float | None, optional): _description_. Defaults to None.\n        tp (float | None, optional): _description_. Defaults to None.\n        caller (float | None, optional): _description_. Defaults to None.\n\n    Raises:\n        RuntimeError: _description_\n\n    Returns:\n        OrderResult: _description_\n    \"\"\"\n    if caller is self:\n        raise RuntimeError(f\"Order recusive update {self}\")\n\n    if self.parent is None:\n        result = self._api.order_update(\n            order=self,\n            limit_price=limit_price,\n            stop_price=stop_price,\n            sl=sl,\n            tp=tp,\n            **kwargs,\n        )\n        return super(LiveOrder, self).update(\n            limit_price=result.limit_price,\n            stop_price=result.stop_price,\n            sl=result.sl,\n            tp=result.tp,\n        )\n    else:\n        # SL/TP Order just a virtual order\n        if caller is not self.parent:\n            if self.is_sl_order:\n                self.parent.update(sl=stop_price, caller=self)\n            elif self.is_tp_order:\n                self.parent.update(tp=limit_price, caller=self)\n            else:\n                raise RuntimeError(f\"Abandon order {self}\")\n\n        return super(LiveOrder, self).update(\n            limit_price=limit_price,\n            stop_price=stop_price,\n        )\n</code></pre>"},{"location":"reference/exchange/metatrader/trade/#lettrade.exchange.metatrader.trade.MetaTraderPosition","title":"MetaTraderPosition","text":"<pre><code>MetaTraderPosition(\n    id: str,\n    exchange: LiveExchange,\n    data: LiveDataFeed,\n    size: float,\n    parent: Order,\n    tag: str | None = None,\n    state: PositionState = PositionState.Open,\n    entry_price: float | None = None,\n    entry_fee: float = 0.0,\n    entry_at: int | None = None,\n    sl_order: Order | None = None,\n    tp_order: Order | None = None,\n    api: LiveAPI | None = None,\n    raw: object | None = None,\n    **kwargs\n)\n</code></pre> <p>               Bases: <code>LivePosition</code></p> <p>Position for MetaTrader</p> Source code in <code>lettrade/exchange/live/trade.py</code> <pre><code>def __init__(\n    self,\n    id: str,\n    exchange: \"LiveExchange\",\n    data: \"LiveDataFeed\",\n    size: float,\n    parent: Order,\n    tag: str | None = None,\n    state: PositionState = PositionState.Open,\n    entry_price: float | None = None,\n    entry_fee: float = 0.0,\n    entry_at: int | None = None,\n    sl_order: Order | None = None,\n    tp_order: Order | None = None,\n    api: LiveAPI | None = None,\n    raw: object | None = None,\n    **kwargs,\n):\n    super().__init__(\n        id=id,\n        exchange=exchange,\n        data=data,\n        size=size,\n        parent=parent,\n        tag=tag,\n        state=state,\n        entry_price=entry_price,\n        entry_fee=entry_fee,\n        entry_at=entry_at,\n        sl_order=sl_order,\n        tp_order=tp_order,\n        api=api,\n        raw=raw,\n        **kwargs,\n    )\n</code></pre>"},{"location":"reference/exchange/metatrader/trade/#lettrade.exchange.metatrader.trade.MetaTraderPosition.fee","title":"fee  <code>property</code>","text":"<pre><code>fee: float\n</code></pre> <p>Fee/Estimate Fee for trade</p> <p>Returns:</p> <ul> <li> <code>float</code> (              <code>float</code> )          \u2013            <p>Fee</p> </li> </ul>"},{"location":"reference/exchange/metatrader/trade/#lettrade.exchange.metatrader.trade.MetaTraderPosition.is_exited","title":"is_exited  <code>property</code>","text":"<pre><code>is_exited: bool\n</code></pre> <p>Flag to check Position state.</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True if the trade exited</p> </li> </ul>"},{"location":"reference/exchange/metatrader/trade/#lettrade.exchange.metatrader.trade.MetaTraderPosition.is_long","title":"is_long  <code>property</code>","text":"<pre><code>is_long: bool\n</code></pre> <p>True if side is long (size is positive).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True/False</p> </li> </ul>"},{"location":"reference/exchange/metatrader/trade/#lettrade.exchange.metatrader.trade.MetaTraderPosition.is_opening","title":"is_opening  <code>property</code>","text":"<pre><code>is_opening: bool\n</code></pre> <p>Flag to check Position state.</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True if the trade opening</p> </li> </ul>"},{"location":"reference/exchange/metatrader/trade/#lettrade.exchange.metatrader.trade.MetaTraderPosition.is_short","title":"is_short  <code>property</code>","text":"<pre><code>is_short: bool\n</code></pre> <p>True if side is short (size is negative).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/metatrader/trade/#lettrade.exchange.metatrader.trade.MetaTraderPosition.pl","title":"pl  <code>property</code>","text":"<pre><code>pl: float\n</code></pre> <p>Estimate Profit or Loss of Position</p> <p>Returns:</p> <ul> <li> <code>float</code> (              <code>float</code> )          \u2013            <p>PnL</p> </li> </ul>"},{"location":"reference/exchange/metatrader/trade/#lettrade.exchange.metatrader.trade.MetaTraderPosition.side","title":"side  <code>property</code>","text":"<pre><code>side: TradeSide\n</code></pre> <p>True if side is short (size is negative).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>TradeSide</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/metatrader/trade/#lettrade.exchange.metatrader.trade.MetaTraderPosition.exit","title":"exit","text":"<pre><code>exit() -&gt; PositionResult\n</code></pre> <p>summary</p> <p>Returns:</p> <ul> <li> <code>PositionResult</code> (              <code>PositionResult</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/metatrader/trade.py</code> <pre><code>def exit(self) -&gt; PositionResult:\n    \"\"\"_summary_\n\n    Returns:\n        PositionResult: _description_\n    \"\"\"\n    result = self._api.position_close(position=self)\n    if result.code != 0:\n        logger.error(\"Update position %s\", str(result))\n        error = PositionResultError(\n            error=result.error,\n            position=self,\n            raw=result,\n        )\n        self.exchange.on_notify(error=error)\n        return error\n\n    execution_raw = self._api.execution_get(id=result.execution_id)\n\n    # TODO: execution object and event\n    result.execution_raw = execution_raw\n\n    return super(LivePosition, self).exit(\n        price=result.price,\n        at=pd.to_datetime(execution_raw.time_msc, unit=\"ms\", utc=True),\n        pl=execution_raw.profit,\n        fee=execution_raw.fee + execution_raw.swap + execution_raw.commission,\n        raw=result,\n    )\n</code></pre>"},{"location":"reference/exchange/metatrader/trade/#lettrade.exchange.metatrader.trade.MetaTraderPosition.from_raw","title":"from_raw  <code>classmethod</code>","text":"<pre><code>from_raw(\n    raw,\n    exchange: MetaTraderExchange,\n    state: PositionState = PositionState.Open,\n    data: LiveDataFeed | None = None,\n    api: MetaTraderAPI = None,\n) -&gt; MetaTraderPosition\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>raw</code>               (<code>_type_</code>)           \u2013            <p>description</p> </li> <li> <code>exchange</code>               (<code>MetaTraderExchange</code>)           \u2013            <p>description</p> </li> <li> <code>data</code>               (<code>LiveDataFeed</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>api</code>               (<code>MetaTraderAPI</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>NotImplementedError</code>             \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>MetaTraderPosition</code> (              <code>MetaTraderPosition</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/metatrader/trade.py</code> <pre><code>@classmethod\ndef from_raw(\n    cls,\n    raw,\n    exchange: \"MetaTraderExchange\",\n    state: PositionState = PositionState.Open,\n    data: \"LiveDataFeed | None\" = None,\n    api: MetaTraderAPI = None,\n) -&gt; \"MetaTraderPosition\":\n    \"\"\"_summary_\n\n    Args:\n        raw (_type_): _description_\n        exchange (MetaTraderExchange): _description_\n        data (LiveDataFeed, optional): _description_. Defaults to None.\n        api (MetaTraderAPI, optional): _description_. Defaults to None.\n\n    Raises:\n        NotImplementedError: _description_\n\n    Returns:\n        MetaTraderPosition: _description_\n    \"\"\"\n    # DataFeed\n    if data is None:\n        for d in exchange.datas:\n            if d.symbol == raw.symbol:\n                data = d\n                break\n        if data is None:\n            logger.warning(\"Raw position %s is not handling %s\", raw.symbol, raw)\n            return\n\n    # Side\n    match raw.type:\n        case MT5.POSITION_TYPE_BUY:\n            side = TradeSide.Buy\n        case MT5.POSITION_TYPE_SELL:\n            side = TradeSide.Sell\n        case _:\n            raise NotImplementedError(\n                f\"Position type {raw.type} is not implement\",\n                raw,\n            )\n    # API\n    if api is None:\n        api = exchange._api\n\n    position = cls(\n        exchange=exchange,\n        id=raw.ticket,\n        data=data,\n        state=state,\n        size=side * raw.volume,\n        entry_price=raw.price_open,\n        entry_fee=raw.swap,\n        entry_at=pd.to_datetime(raw.time_msc, unit=\"ms\", utc=True),\n        parent=None,\n        tag=raw.comment,\n        api=api,\n        raw=raw,\n    )\n\n    # SL\n    if raw.sl &gt; 0.0:\n        position.sl_order = exchange._order_cls.from_position(\n            position=position, sl=raw.sl\n        )\n        exchange.on_order(position.sl_order)\n\n    # TP\n    if raw.tp &gt; 0.0:\n        position.tp_order = exchange._order_cls.from_position(\n            position=position, tp=raw.tp\n        )\n        exchange.on_order(position.tp_order)\n\n    if position.state == PositionState.Exit:\n        if position.exit_price is None:\n            if not hasattr(raw, \"executions\"):\n                raw.executions = api.executions_get(position_id=position.id)\n\n            exchange.on_executions_event(raw.executions, broadcast=False)\n\n            execution = exchange.executions[raw.executions[-1].ticket]\n            position.exit_at = execution.at\n            position.exit_price = execution.price\n            position.exit_pl = execution.pl\n            position.exit_fee = execution.fee\n\n    return position\n</code></pre>"},{"location":"reference/exchange/metatrader/trade/#lettrade.exchange.metatrader.trade.MetaTraderPosition.merge","title":"merge","text":"<pre><code>merge(other: LivePosition) -&gt; bool\n</code></pre> <p>Merge LivePosition from another</p> <p>Parameters:</p> <ul> <li> <code>other</code>               (<code>LivePosition</code>)           \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/live/trade.py</code> <pre><code>def merge(self, other: \"LivePosition\") -&gt; bool:\n    \"\"\"Merge LivePosition from another\n\n    Args:\n        other (LivePosition): _description_\n\n    Returns:\n        bool: _description_\n    \"\"\"\n    if not super().merge(other):\n        return False\n    self.raw = other.raw\n    return True\n</code></pre>"},{"location":"reference/exchange/metatrader/trade/#lettrade.exchange.metatrader.trade.MetaTraderPosition.update","title":"update","text":"<pre><code>update(\n    sl: float | None = None,\n    tp: float | None = None,\n    caller: float | None = None,\n    **kwargs\n) -&gt; PositionResult\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>sl</code>               (<code>float | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>tp</code>               (<code>float | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>caller</code>               (<code>float | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>description</p> </li> <li> <code>RuntimeError</code>             \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>PositionResult</code> (              <code>PositionResult</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/metatrader/trade.py</code> <pre><code>def update(\n    self,\n    sl: float | None = None,\n    tp: float | None = None,\n    caller: float | None = None,\n    **kwargs,\n) -&gt; PositionResult:\n    \"\"\"_summary_\n\n    Args:\n        sl (float | None, optional): _description_. Defaults to None.\n        tp (float | None, optional): _description_. Defaults to None.\n        caller (float | None, optional): _description_. Defaults to None.\n\n    Raises:\n        RuntimeError: _description_\n        RuntimeError: _description_\n\n    Returns:\n        PositionResult: _description_\n    \"\"\"\n    if not sl and not tp:\n        raise RuntimeError(\"Update sl=None and tp=None\")\n    if caller is self:\n        raise RuntimeError(f\"Position recusive update {self}\")\n\n    result = self._api.position_update(position=self, sl=sl, tp=tp)\n    if result.code != 0:\n        logger.error(\"Update position %s\", str(result))\n        error = PositionResultError(\n            error=result.error,\n            position=self,\n            raw=result,\n        )\n        self.exchange.on_notify(error=error)\n        return error\n\n    if sl is not None:\n        if self.sl_order:\n            if caller is not self.sl_order:\n                self.sl_order.update(stop_price=sl, caller=self)\n        else:\n            self.sl_order = self.exchange._order_cls.from_position(\n                position=self, sl=sl\n            )\n\n    if tp is not None:\n        if self.tp_order:\n            if caller is not self.tp_order:\n                self.tp_order.update(limit_price=tp, caller=self)\n        else:\n            self.tp_order = self.exchange._order_cls.from_position(\n                position=self, tp=tp\n            )\n\n    return super(LivePosition, self).update(raw=result)\n</code></pre>"},{"location":"reference/indicator/","title":"Index","text":""},{"location":"reference/indicator/#lettrade.indicator","title":"indicator","text":""},{"location":"reference/indicator/#lettrade.indicator.indicators_inject_pandas","title":"indicators_inject_pandas","text":"<pre><code>indicators_inject_pandas(obj: object | None = None)\n</code></pre> <p>Inject indicators to Pandas</p> Source code in <code>lettrade/indicator/__init__.py</code> <pre><code>def indicators_inject_pandas(obj: object | None = None):\n    \"\"\"Inject indicators to Pandas\"\"\"\n    if obj is None:\n        from pandas.core.base import PandasObject\n\n        obj = PandasObject\n\n    # Flag to mark indicators injected\n    if hasattr(obj, \"_lt_indicators_injected\"):\n        return\n\n    from .candlestick import pandas_inject as candlestick_pandas_inject\n    from .dataframe import pandas_inject as dataframe_pandas_inject\n    from .momentum import pandas_inject as momentum_pandas_inject\n    from .series import pandas_inject as series_pandas_inject\n    from .trend import pandas_inject as trend_pandas_inject\n    from .volatility import pandas_inject as volatility_pandas_inject\n\n    series_pandas_inject(obj)\n    dataframe_pandas_inject(obj)\n\n    candlestick_pandas_inject(obj)\n    trend_pandas_inject(obj)\n    volatility_pandas_inject(obj)\n    momentum_pandas_inject(obj)\n\n    # Flag to mark indicators injected\n    obj._lt_indicators_injected = True\n</code></pre>"},{"location":"reference/indicator/dataframe/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> dataframe","text":""},{"location":"reference/indicator/dataframe/#lettrade.indicator.dataframe","title":"dataframe","text":""},{"location":"reference/indicator/dataframe/#lettrade.indicator.dataframe.signal_condiction","title":"signal_condiction","text":"<pre><code>signal_condiction(\n    dataframe: DataFrame,\n    *condictions: list[list[Series | Any]],\n    name: str,\n    value: int | float = np.nan,\n    inplace: bool = False,\n    plot: bool | list = False,\n    plot_type: Literal[\"line\", \"mark\"] = \"line\",\n    plot_kwargs: dict | None = None,\n    **kwargs\n) -&gt; Series | DataFrame\n</code></pre> <p>Define a signal with multiple condiction</p> <p>Parameters:</p> <ul> <li> <code>dataframe</code>               (<code>DataFrame</code>)           \u2013            <p>description</p> </li> <li> <code>*condictions</code>               (<code>list[list[Series | Any]]</code>, default:                   <code>()</code> )           \u2013            <p>Pairs of condiction [<code>&lt;pandas.Series condiction&gt;</code>, <code>&lt;value&gt;</code>]</p> </li> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>Name of signal, column name when add to DataFrame with inplace=True.</p> </li> <li> <code>value</code>               (<code>int</code>, default:                   <code>nan</code> )           \u2013            <p>Default value when condiction is not matched. Defaults to 0.</p> </li> <li> <code>inplace</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>description. Defaults to False.</p> </li> <li> <code>plot</code>               (<code>bool | list</code>, default:                   <code>False</code> )           \u2013            <p>description. Defaults to False.</p> </li> <li> <code>plot_type</code>               (<code>Literal[&amp;quot;line&amp;quot;, &amp;quot;mark&amp;quot;]</code>, default:                   <code>'line'</code> )           \u2013            <p>description. Defaults to \"line\".</p> </li> <li> <code>plot_kwargs</code>               (<code>dict | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> Usage <pre><code>df.i.signal_condiction(\n    [df[\"close\"] &gt; df[\"open\"], 100],\n    [df[\"close\"] &lt; df[\"open\"], -100],\n    name=\"cdl_direction\",\n    inplace=True,\n    plot=True,\n    plot_kwargs=dict(color=\"green\", width=5),\n)\n</code></pre> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Series | DataFrame</code>           \u2013            <p>pd.Series | pd.DataFrame: description</p> </li> </ul> Source code in <code>lettrade/indicator/dataframe.py</code> <pre><code>def signal_condiction(\n    dataframe: pd.DataFrame,\n    *condictions: list[list[pd.Series | Any]],\n    name: str,\n    value: int | float = np.nan,\n    inplace: bool = False,\n    plot: bool | list = False,\n    plot_type: Literal[\"line\", \"mark\"] = \"line\",\n    plot_kwargs: dict | None = None,\n    **kwargs,\n) -&gt; pd.Series | pd.DataFrame:\n    \"\"\"Define a signal with multiple condiction\n\n    Args:\n        dataframe (pd.DataFrame): _description_\n        *condictions (list[list[pd.Series | Any]]): Pairs of condiction [`&lt;pandas.Series condiction&gt;`, `&lt;value&gt;`]\n        name (str): Name of signal, column name when add to DataFrame with inplace=True.\n        value (int, optional): Default value when condiction is not matched. Defaults to 0.\n        inplace (bool, optional): _description_. Defaults to False.\n        plot (bool | list, optional): _description_. Defaults to False.\n        plot_type (Literal[&amp;quot;line&amp;quot;, &amp;quot;mark&amp;quot;], optional): _description_. Defaults to \"line\".\n        plot_kwargs (dict | None, optional): _description_. Defaults to None.\n\n    Usage:\n        ```python\n        df.i.signal_condiction(\n            [df[\"close\"] &gt; df[\"open\"], 100],\n            [df[\"close\"] &lt; df[\"open\"], -100],\n            name=\"cdl_direction\",\n            inplace=True,\n            plot=True,\n            plot_kwargs=dict(color=\"green\", width=5),\n        )\n        ```\n\n    Raises:\n        RuntimeError: _description_\n\n    Returns:\n        pd.Series | pd.DataFrame: _description_\n    \"\"\"\n    if __debug__:\n        if not isinstance(dataframe, pd.DataFrame):\n            raise RuntimeError(\n                f\"dataframe type '{type(dataframe)}' \"\n                \"is not instance of pandas.DataFrame\"\n            )\n        if plot and not inplace:\n            raise RuntimeError(\"Cannot plot when inplace=False\")\n\n    s = pd.Series(value, index=dataframe.index, name=name, **kwargs)\n    for condiction in condictions:\n        s.loc[condiction[0]] = condiction[1]\n\n    if inplace:\n        dataframe[name] = s\n\n        # Plot\n        if plot:\n            if plot_kwargs is None:\n                plot_kwargs = dict()\n\n            plot_kwargs.update(series=name, name=name)\n\n            from lettrade.indicator.plot import IndicatorPlotter\n            from lettrade.plot.plotly import plot_line, plot_mark\n\n            plotter = plot_mark if plot_type == \"mark\" else plot_line\n            IndicatorPlotter(dataframe=dataframe, plotter=plotter, **plot_kwargs)\n\n        return dataframe\n\n    return s\n</code></pre>"},{"location":"reference/indicator/dataframe/#lettrade.indicator.dataframe.signal_direction","title":"signal_direction","text":"<pre><code>signal_direction(\n    dataframe: DataFrame,\n    up: Series,\n    down: Series,\n    name: str,\n    value: int = 0,\n    value_up: int = 100,\n    value_down: int = -100,\n    inplace: bool = False,\n    plot: bool | list = False,\n    plot_type: Literal[\"line\", \"mark\"] = \"line\",\n    plot_kwargs: dict | None = None,\n    **kwargs\n) -&gt; Series | DataFrame\n</code></pre> <p>Define a signal with 2 direction Up and Down with fixed value</p> <p>Parameters:</p> <ul> <li> <code>dataframe</code>               (<code>DataFrame</code>)           \u2013            <p>description</p> </li> <li> <code>up</code>               (<code>Series</code>)           \u2013            <p>description</p> </li> <li> <code>down</code>               (<code>Series</code>)           \u2013            <p>description</p> </li> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>Name of signal, column name when add to DataFrame with inplace=True.</p> </li> <li> <code>value</code>               (<code>int</code>, default:                   <code>0</code> )           \u2013            <p>Default value when condiction is not matched. Defaults to 0.</p> </li> <li> <code>value_up</code>               (<code>int</code>, default:                   <code>100</code> )           \u2013            <p>description. Defaults to 100.</p> </li> <li> <code>value_down</code>               (<code>int</code>, default:                   <code>-100</code> )           \u2013            <p>description. Defaults to -100.</p> </li> <li> <code>inplace</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Whether to add to the DataFrame and return DataFrame rather than return result. Defaults to False.</p> </li> <li> <code>plot</code>               (<code>bool | list</code>, default:                   <code>False</code> )           \u2013            <p>description. Defaults to False.</p> </li> <li> <code>plot_type</code>               (<code>Literal[&amp;quot;line&amp;quot;, &amp;quot;mark&amp;quot;]</code>, default:                   <code>'line'</code> )           \u2013            <p>description. Defaults to \"line\".</p> </li> <li> <code>plot_kwargs</code>               (<code>dict | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Series | DataFrame</code>           \u2013            <p>pd.Series | pd.DataFrame: description</p> </li> </ul> Source code in <code>lettrade/indicator/dataframe.py</code> <pre><code>def signal_direction(\n    dataframe: pd.DataFrame,\n    up: pd.Series,\n    down: pd.Series,\n    name: str,\n    value: int = 0,\n    value_up: int = 100,\n    value_down: int = -100,\n    inplace: bool = False,\n    plot: bool | list = False,\n    plot_type: Literal[\"line\", \"mark\"] = \"line\",\n    plot_kwargs: dict | None = None,\n    **kwargs,\n) -&gt; pd.Series | pd.DataFrame:\n    \"\"\"Define a signal with 2 direction Up and Down with fixed value\n\n    Args:\n        dataframe (pd.DataFrame): _description_\n        up (pd.Series): _description_\n        down (pd.Series): _description_\n        name (str): Name of signal, column name when add to DataFrame with inplace=True.\n        value (int, optional): Default value when condiction is not matched. Defaults to 0.\n        value_up (int, optional): _description_. Defaults to 100.\n        value_down (int, optional): _description_. Defaults to -100.\n        inplace (bool, optional): Whether to add to the DataFrame and return DataFrame rather than return result. Defaults to False.\n        plot (bool | list, optional): _description_. Defaults to False.\n        plot_type (Literal[&amp;quot;line&amp;quot;, &amp;quot;mark&amp;quot;], optional): _description_. Defaults to \"line\".\n        plot_kwargs (dict | None, optional): _description_. Defaults to None.\n\n    Returns:\n        pd.Series | pd.DataFrame: _description_\n    \"\"\"\n    return signal_condiction(\n        dataframe,\n        [up, value_up],\n        [down, value_down],\n        name=name,\n        value=value,\n        inplace=inplace,\n        plot=plot,\n        plot_type=plot_type,\n        plot_kwargs=plot_kwargs,\n        **kwargs,\n    )\n</code></pre>"},{"location":"reference/indicator/plot/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> plot","text":""},{"location":"reference/indicator/plot/#lettrade.indicator.plot","title":"plot","text":""},{"location":"reference/indicator/plot/#lettrade.indicator.plot.IndicatorPlotter","title":"IndicatorPlotter","text":"<pre><code>IndicatorPlotter(\n    dataframe: DataFrame,\n    plotter: Callable,\n    filter: Callable | Series | None = None,\n    push: bool = True,\n    **kwargs\n)\n</code></pre> <p>Add indicator plotter to DataFrame</p> Source code in <code>lettrade/indicator/plot.py</code> <pre><code>def __init__(\n    self,\n    dataframe: pd.DataFrame,\n    plotter: Callable,\n    filter: Callable | pd.Series | None = None,\n    push: bool = True,\n    **kwargs,\n) -&gt; None:\n    # self.dataframe: pd.DataFrame = dataframe\n    self.plotter: Callable = plotter\n    self.filter: Callable | pd.Series | None = filter\n    self.kwargs = kwargs\n\n    if push:\n        indicator_push_plotter(dataframe=dataframe, ip=self)\n</code></pre>"},{"location":"reference/indicator/series/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> series","text":""},{"location":"reference/indicator/series/#lettrade.indicator.series","title":"series","text":""},{"location":"reference/indicator/series/#lettrade.indicator.series.above","title":"above","text":"<pre><code>above(\n    series1: Series,\n    series2: Series,\n    dataframe: DataFrame = None,\n    name: str | None = None,\n    prefix: str = \"\",\n    inplace: bool = False,\n    plot: bool | list = False,\n    plot_kwargs: dict | None = None,\n) -&gt; Series\n</code></pre> <p>Check a Series is above another Series</p> <p>Parameters:</p> <ul> <li> <code>series1</code>               (<code>Series</code>)           \u2013            <p>first Series</p> </li> <li> <code>series2</code>               (<code>Series</code>)           \u2013            <p>second Series</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Series</code>           \u2013            <p>pd.Series: True series1 is above series2 else False</p> </li> </ul> Source code in <code>lettrade/indicator/series.py</code> <pre><code>def above(\n    series1: pd.Series,\n    series2: pd.Series,\n    dataframe: pd.DataFrame = None,\n    name: str | None = None,\n    prefix: str = \"\",\n    inplace: bool = False,\n    plot: bool | list = False,\n    plot_kwargs: dict | None = None,\n    # **kwargs,\n) -&gt; pd.Series:\n    \"\"\"Check a Series is above another Series\n\n    Args:\n        series1 (pd.Series): first Series\n        series2 (pd.Series): second Series\n\n    Returns:\n        pd.Series: True series1 is above series2 else False\n    \"\"\"\n    if __debug__:\n        if plot and not inplace:\n            raise RuntimeError(\"Cannot plot when inplace=False\")\n\n    if isinstance(series1, str):\n        series1 = dataframe[series1]\n    if isinstance(series2, str):\n        series2 = dataframe[series2]\n\n    i = (series1 - series2).apply(lambda v: 100 if v &gt; 0 else 0)\n\n    if inplace:\n        name = name or f\"{prefix}above\"\n        dataframe[name] = i\n\n        if plot:\n            _plot_mark(dataframe=dataframe, name=name, plot_kwargs=plot_kwargs)\n\n    return i\n</code></pre>"},{"location":"reference/indicator/series/#lettrade.indicator.series.below","title":"below","text":"<pre><code>below(\n    series1: Series,\n    series2: Series,\n    dataframe: DataFrame = None,\n    name: str | None = None,\n    prefix: str = \"\",\n    inplace: bool = False,\n    plot: bool | list = False,\n    plot_kwargs: dict | None = None,\n) -&gt; Series\n</code></pre> <p>Check a Series is below another Series</p> <p>Parameters:</p> <ul> <li> <code>series1</code>               (<code>Series</code>)           \u2013            <p>first Series</p> </li> <li> <code>series2</code>               (<code>Series</code>)           \u2013            <p>second Series</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Series</code>           \u2013            <p>pd.Series: True series1 is below series2 else False</p> </li> </ul> Source code in <code>lettrade/indicator/series.py</code> <pre><code>def below(\n    series1: pd.Series,\n    series2: pd.Series,\n    dataframe: pd.DataFrame = None,\n    name: str | None = None,\n    prefix: str = \"\",\n    inplace: bool = False,\n    plot: bool | list = False,\n    plot_kwargs: dict | None = None,\n    # **kwargs,\n) -&gt; pd.Series:\n    \"\"\"Check a Series is below another Series\n\n    Args:\n        series1 (pd.Series): first Series\n        series2 (pd.Series): second Series\n\n    Returns:\n        pd.Series: True series1 is below series2 else False\n    \"\"\"\n    if __debug__:\n        if plot and not inplace:\n            raise RuntimeError(\"Cannot plot when inplace=False\")\n\n    if isinstance(series1, str):\n        series1 = dataframe[series1]\n    if isinstance(series2, str):\n        series2 = dataframe[series2]\n\n    i = (series1 - series2).apply(lambda v: 100 if v &lt; 0 else 0)\n\n    if inplace:\n        name = name or f\"{prefix}below\"\n        dataframe[name] = i\n\n        if plot:\n            _plot_mark(dataframe=dataframe, name=name, plot_kwargs=plot_kwargs)\n\n    return i\n</code></pre>"},{"location":"reference/indicator/series/#lettrade.indicator.series.crossover","title":"crossover","text":"<pre><code>crossover(\n    series1: Series | str,\n    series2: Series | str,\n    dataframe: DataFrame = None,\n    name: str | None = None,\n    prefix: str = \"\",\n    inplace: bool = False,\n    plot: bool | list = False,\n    plot_kwargs: dict | None = None,\n) -&gt; Series\n</code></pre> <p>Check if a Series cross over another Series</p> <p>Parameters:</p> <ul> <li> <code>series1</code>               (<code>Series</code>)           \u2013            <p>first Series</p> </li> <li> <code>series2</code>               (<code>Series</code>)           \u2013            <p>second Series</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Series</code>           \u2013            <p>pd.Series: True if series1 cross over series2 else False</p> </li> </ul> Source code in <code>lettrade/indicator/series.py</code> <pre><code>def crossover(\n    series1: pd.Series | str,\n    series2: pd.Series | str,\n    dataframe: pd.DataFrame = None,\n    name: str | None = None,\n    prefix: str = \"\",\n    inplace: bool = False,\n    plot: bool | list = False,\n    plot_kwargs: dict | None = None,\n    # **kwargs,\n) -&gt; pd.Series:\n    \"\"\"Check if a Series cross over another Series\n\n    Args:\n        series1 (pd.Series): first Series\n        series2 (pd.Series): second Series\n\n    Returns:\n        pd.Series: True if series1 cross over series2 else False\n    \"\"\"\n    if __debug__:\n        if plot and not inplace:\n            raise RuntimeError(\"Cannot plot when inplace=False\")\n\n    if isinstance(series1, str):\n        series1 = dataframe[series1]\n    if isinstance(series2, str):\n        series2 = dataframe[series2]\n\n    below1 = below(series1, series2).shift(1)\n    above0 = above(series1, series2)\n    i = (below1 + above0).apply(lambda v: 100 if v &gt;= 200 else 0)\n\n    if inplace:\n        name = name or f\"{prefix}crossover\"\n        dataframe[name] = i\n\n        if plot:\n            _plot_mark(dataframe=dataframe, name=name, plot_kwargs=plot_kwargs)\n\n    return i\n</code></pre>"},{"location":"reference/indicator/series/#lettrade.indicator.series.crossunder","title":"crossunder","text":"<pre><code>crossunder(\n    series1: Series | str,\n    series2: Series | str,\n    dataframe: DataFrame = None,\n    name: str | None = None,\n    prefix: str = \"\",\n    inplace: bool = False,\n    plot: bool | list = False,\n    plot_kwargs: dict | None = None,\n) -&gt; Series\n</code></pre> <p>Check if a Series cross under another Series</p> <p>Parameters:</p> <ul> <li> <code>series1</code>               (<code>Series</code>)           \u2013            <p>first Series</p> </li> <li> <code>series2</code>               (<code>Series</code>)           \u2013            <p>second Series</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Series</code>           \u2013            <p>pd.Series: True if series1 cross under series2 else False</p> </li> </ul> Source code in <code>lettrade/indicator/series.py</code> <pre><code>def crossunder(\n    series1: pd.Series | str,\n    series2: pd.Series | str,\n    dataframe: pd.DataFrame = None,\n    name: str | None = None,\n    prefix: str = \"\",\n    inplace: bool = False,\n    plot: bool | list = False,\n    plot_kwargs: dict | None = None,\n    # **kwargs,\n) -&gt; pd.Series:\n    \"\"\"Check if a Series cross under another Series\n\n    Args:\n        series1 (pd.Series): first Series\n        series2 (pd.Series): second Series\n\n    Returns:\n        pd.Series: True if series1 cross under series2 else False\n    \"\"\"\n    if __debug__:\n        if plot and not inplace:\n            raise RuntimeError(\"Cannot plot when inplace=False\")\n\n    if isinstance(series1, str):\n        series1 = dataframe[series1]\n    if isinstance(series2, str):\n        series2 = dataframe[series2]\n\n    above1 = above(series1, series2).shift(1)\n    below0 = below(series1, series2)\n    i = (below0 + above1).apply(lambda v: 100 if v &gt;= 200 else 0)\n\n    if inplace:\n        name = name or f\"{prefix}crossunder\"\n        dataframe[name] = i\n\n        if plot:\n            _plot_mark(dataframe=dataframe, name=name, plot_kwargs=plot_kwargs)\n\n    return i\n</code></pre>"},{"location":"reference/indicator/series/#lettrade.indicator.series.diff","title":"diff","text":"<pre><code>diff(\n    series1: Series,\n    series2: Series,\n    dataframe: DataFrame = None,\n    name: str | None = None,\n    prefix: str = \"\",\n    inplace: bool = False,\n    plot: bool | list = False,\n    plot_kwargs: dict | None = None,\n) -&gt; Series\n</code></pre> <p>Difference between 2 series</p> <p>Parameters:</p> <ul> <li> <code>series1</code>               (<code>Series</code>)           \u2013            <p>description</p> </li> <li> <code>series2</code>               (<code>Series</code>)           \u2013            <p>description</p> </li> <li> <code>dataframe</code>               (<code>DataFrame</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>name</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>prefix</code>               (<code>str</code>, default:                   <code>''</code> )           \u2013            <p>description. Defaults to \"\".</p> </li> <li> <code>inplace</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>description. Defaults to False.</p> </li> <li> <code>plot</code>               (<code>bool | list</code>, default:                   <code>False</code> )           \u2013            <p>description. Defaults to False.</p> </li> <li> <code>plot_kwargs</code>               (<code>dict | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Series</code>           \u2013            <p>pd.Series: Difference of 2 series (series1 - series2)</p> </li> </ul> Source code in <code>lettrade/indicator/series.py</code> <pre><code>def diff(\n    series1: pd.Series,\n    series2: pd.Series,\n    dataframe: pd.DataFrame = None,\n    name: str | None = None,\n    prefix: str = \"\",\n    inplace: bool = False,\n    plot: bool | list = False,\n    plot_kwargs: dict | None = None,\n    # **kwargs,\n) -&gt; pd.Series:\n    \"\"\"Difference between 2 series\n\n    Args:\n        series1 (pd.Series): _description_\n        series2 (pd.Series): _description_\n        dataframe (pd.DataFrame, optional): _description_. Defaults to None.\n        name (str | None, optional): _description_. Defaults to None.\n        prefix (str, optional): _description_. Defaults to \"\".\n        inplace (bool, optional): _description_. Defaults to False.\n        plot (bool | list, optional): _description_. Defaults to False.\n        plot_kwargs (dict | None, optional): _description_. Defaults to None.\n\n    Raises:\n        RuntimeError: _description_\n\n    Returns:\n        pd.Series: Difference of 2 series (series1 - series2)\n    \"\"\"\n    if __debug__:\n        if plot and not inplace:\n            raise RuntimeError(\"Cannot plot when inplace=False\")\n\n    if isinstance(series1, str):\n        series1 = dataframe[series1]\n    if isinstance(series2, str):\n        series2 = dataframe[series2]\n\n    i = series1 - series2\n\n    if inplace:\n        name = name or f\"{prefix}diff\"\n        dataframe[name] = i\n\n        if plot:\n            _plot_mark(dataframe=dataframe, name=name, plot_kwargs=plot_kwargs)\n\n    return i\n</code></pre>"},{"location":"reference/indicator/utils/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> utils","text":""},{"location":"reference/indicator/utils/#lettrade.indicator.utils","title":"utils","text":""},{"location":"reference/indicator/utils/#lettrade.indicator.utils.talib_ma","title":"talib_ma","text":"<pre><code>talib_ma(\n    name: Literal[\n        \"sma\",\n        \"ema\",\n        \"wma\",\n        \"dema\",\n        \"tema\",\n        \"trima\",\n        \"kama\",\n        \"mama\",\n        \"t3\",\n    ]\n) -&gt; Callable\n</code></pre> <p>Helper Function that returns the Enum value for TA Lib's MA Type</p> Source code in <code>lettrade/indicator/utils.py</code> <pre><code>def talib_ma(\n    name: Literal[\"sma\", \"ema\", \"wma\", \"dema\", \"tema\", \"trima\", \"kama\", \"mama\", \"t3\"]\n) -&gt; Callable:\n    \"\"\"Helper Function that returns the Enum value for TA Lib's MA Type\"\"\"\n    if isinstance(name, str) and len(name) &gt; 1:\n        name = name.lower()\n        if name == \"sma\":\n            return taa.SMA\n        elif name == \"ema\":\n            return taa.EMA\n        elif name == \"wma\":\n            return taa.WMA\n        elif name == \"dema\":\n            return taa.DEMA\n        elif name == \"tema\":\n            return taa.TEMA\n        elif name == \"trima\":\n            return taa.TRIMA\n        elif name == \"kama\":\n            return taa.KAMA\n        elif name == \"mama\":\n            return taa.MAMA\n        elif name == \"t3\":\n            return taa.T3\n    return taa.SMA\n</code></pre>"},{"location":"reference/indicator/utils/#lettrade.indicator.utils.talib_ma_mode","title":"talib_ma_mode","text":"<pre><code>talib_ma_mode(\n    name: Literal[\n        \"sma\",\n        \"ema\",\n        \"wma\",\n        \"dema\",\n        \"tema\",\n        \"trima\",\n        \"kama\",\n        \"mama\",\n        \"t3\",\n    ]\n) -&gt; int\n</code></pre> <p>Helper Function that returns the Enum value for TA Lib's MA Type</p> Source code in <code>lettrade/indicator/utils.py</code> <pre><code>def talib_ma_mode(\n    name: Literal[\"sma\", \"ema\", \"wma\", \"dema\", \"tema\", \"trima\", \"kama\", \"mama\", \"t3\"]\n) -&gt; int:\n    \"\"\"Helper Function that returns the Enum value for TA Lib's MA Type\"\"\"\n    if isinstance(name, str) and len(name) &gt; 1:\n        name = name.lower()\n        if name == \"sma\":\n            return ta.MA_Type.SMA  # 0\n        elif name == \"ema\":\n            return ta.MA_Type.EMA  # 1\n        elif name == \"wma\":\n            return ta.MA_Type.WMA  # 2\n        elif name == \"dema\":\n            return ta.MA_Type.DEMA  # 3\n        elif name == \"tema\":\n            return ta.MA_Type.TEMA  # 4\n        elif name == \"trima\":\n            return ta.MA_Type.TRIMA  # 5\n        elif name == \"kama\":\n            return ta.MA_Type.KAMA  # 6\n        elif name == \"mama\":\n            return ta.MA_Type.MAMA  # 7\n        elif name == \"t3\":\n            return ta.MA_Type.T3  # 8\n    return 0  # Default: SMA -&gt; 0\n</code></pre>"},{"location":"reference/indicator/candlestick/","title":"Index","text":""},{"location":"reference/indicator/candlestick/#lettrade.indicator.candlestick","title":"candlestick","text":""},{"location":"reference/indicator/candlestick/candlestick/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> candlestick","text":""},{"location":"reference/indicator/candlestick/candlestick/#lettrade.indicator.candlestick.candlestick","title":"candlestick","text":""},{"location":"reference/indicator/candlestick/candlestick/#lettrade.indicator.candlestick.candlestick.cdl_direction","title":"cdl_direction","text":"<pre><code>cdl_direction(\n    dataframe: DataFrame,\n    name: str | None = None,\n    prefix: str = \"cdl_\",\n    inplace: bool = False,\n) -&gt; Series | DataFrame\n</code></pre> <p>Direction of candle</p> <p>Parameters:</p> <ul> <li> <code>dataframe</code>               (<code>DataFrame</code>)           \u2013            <p>description</p> </li> <li> <code>name</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>prefix</code>               (<code>str</code>, default:                   <code>'cdl_'</code> )           \u2013            <p>description. Defaults to \"cdl_\".</p> </li> <li> <code>inplace</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>description. Defaults to False.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Series | DataFrame</code>           \u2013            <p>pd.Series | pd.DataFrame: <code>pd.Series</code> return [100, 0 , -100] - <code>100</code> for bull bar - <code>-100</code> for bear bar - <code>0</code> for None</p> </li> </ul> Source code in <code>lettrade/indicator/candlestick/candlestick.py</code> <pre><code>def cdl_direction(\n    dataframe: pd.DataFrame,\n    name: str | None = None,\n    prefix: str = \"cdl_\",\n    inplace: bool = False,\n) -&gt; pd.Series | pd.DataFrame:\n    \"\"\"Direction of candle\n\n    Args:\n        dataframe (pd.DataFrame): _description_\n        name (str | None, optional): _description_. Defaults to None.\n        prefix (str, optional): _description_. Defaults to \"cdl_\".\n        inplace (bool, optional): _description_. Defaults to False.\n\n    Returns:\n        pd.Series | pd.DataFrame: `pd.Series` return [100, 0 , -100]\n            - `100` for bull bar\n            - `-100` for bear bar\n            - `0` for None\n    \"\"\"\n    if __debug__:\n        if not isinstance(dataframe, pd.DataFrame):\n            raise RuntimeError(\n                f\"dataframe type '{type(dataframe)}' \"\n                \"is not instance of pandas.DataFrame\"\n            )\n    i = dataframe.apply(\n        lambda r: 100 if r.open &lt; r.close else -100 if r.open &gt; r.close else 0,\n        axis=1,\n    ).astype(int)\n\n    if inplace:\n        dataframe[name or f\"{prefix}direction\"] = i\n        return dataframe\n\n    return i\n</code></pre>"},{"location":"reference/indicator/candlestick/talib/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> talib","text":""},{"location":"reference/indicator/candlestick/talib/#lettrade.indicator.candlestick.talib","title":"talib","text":""},{"location":"reference/indicator/candlestick/talib/#lettrade.indicator.candlestick.talib.cdl_3blackcrows","title":"cdl_3blackcrows","text":"<pre><code>cdl_3blackcrows(\n    dataframe: DataFrame,\n    name: str | None = None,\n    prefix: str = \"cdl_\",\n    inplace: bool = False,\n    **kwargs\n) -&gt; Series | DataFrame\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>dataframe</code>               (<code>DataFrame</code>)           \u2013            <p>description</p> </li> <li> <code>name</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>prefix</code>               (<code>str</code>, default:                   <code>'cdl_'</code> )           \u2013            <p>description. Defaults to \"cdl_\".</p> </li> <li> <code>inplace</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>description. Defaults to False.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Series | DataFrame</code>           \u2013            <p>pd.Series | pd.DataFrame: description</p> </li> </ul> Source code in <code>lettrade/indicator/candlestick/talib.py</code> <pre><code>def cdl_3blackcrows(\n    dataframe: pd.DataFrame,\n    name: str | None = None,\n    prefix: str = \"cdl_\",\n    inplace: bool = False,\n    **kwargs,\n) -&gt; pd.Series | pd.DataFrame:\n    \"\"\"_summary_\n\n    Args:\n        dataframe (pd.DataFrame): _description_\n        name (str | None, optional): _description_. Defaults to None.\n        prefix (str, optional): _description_. Defaults to \"cdl_\".\n        inplace (bool, optional): _description_. Defaults to False.\n\n    Returns:\n        pd.Series | pd.DataFrame: _description_\n    \"\"\"\n    return cdl_pattern(\n        dataframe=dataframe,\n        pattern=\"3blackcrows\",\n        name=name,\n        prefix=prefix,\n        inplace=inplace,\n        **kwargs,\n    )\n</code></pre>"},{"location":"reference/indicator/candlestick/talib/#lettrade.indicator.candlestick.talib.cdl_3inside","title":"cdl_3inside","text":"<pre><code>cdl_3inside(\n    dataframe: DataFrame,\n    name: str | None = None,\n    prefix: str = \"cdl_\",\n    inplace: bool = False,\n    **kwargs\n) -&gt; Series | DataFrame\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>dataframe</code>               (<code>DataFrame</code>)           \u2013            <p>description</p> </li> <li> <code>name</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>prefix</code>               (<code>str</code>, default:                   <code>'cdl_'</code> )           \u2013            <p>description. Defaults to \"cdl_\".</p> </li> <li> <code>inplace</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>description. Defaults to False.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Series | DataFrame</code>           \u2013            <p>pd.Series | pd.DataFrame: description</p> </li> </ul> Source code in <code>lettrade/indicator/candlestick/talib.py</code> <pre><code>def cdl_3inside(\n    dataframe: pd.DataFrame,\n    name: str | None = None,\n    prefix: str = \"cdl_\",\n    inplace: bool = False,\n    **kwargs,\n) -&gt; pd.Series | pd.DataFrame:\n    \"\"\"_summary_\n\n    Args:\n        dataframe (pd.DataFrame): _description_\n        name (str | None, optional): _description_. Defaults to None.\n        prefix (str, optional): _description_. Defaults to \"cdl_\".\n        inplace (bool, optional): _description_. Defaults to False.\n\n    Returns:\n        pd.Series | pd.DataFrame: _description_\n    \"\"\"\n    return cdl_pattern(\n        dataframe=dataframe,\n        pattern=\"3inside\",\n        name=name,\n        prefix=prefix,\n        inplace=inplace,\n        **kwargs,\n    )\n</code></pre>"},{"location":"reference/indicator/candlestick/talib/#lettrade.indicator.candlestick.talib.cdl_3whitesoldiers","title":"cdl_3whitesoldiers","text":"<pre><code>cdl_3whitesoldiers(\n    dataframe: DataFrame,\n    name: str | None = None,\n    prefix: str = \"cdl_\",\n    inplace: bool = False,\n    **kwargs\n) -&gt; Series | DataFrame\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>dataframe</code>               (<code>DataFrame</code>)           \u2013            <p>description</p> </li> <li> <code>name</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>prefix</code>               (<code>str</code>, default:                   <code>'cdl_'</code> )           \u2013            <p>description. Defaults to \"cdl_\".</p> </li> <li> <code>inplace</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>description. Defaults to False.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Series | DataFrame</code>           \u2013            <p>pd.Series | pd.DataFrame: description</p> </li> </ul> Source code in <code>lettrade/indicator/candlestick/talib.py</code> <pre><code>def cdl_3whitesoldiers(\n    dataframe: pd.DataFrame,\n    name: str | None = None,\n    prefix: str = \"cdl_\",\n    inplace: bool = False,\n    **kwargs,\n) -&gt; pd.Series | pd.DataFrame:\n    \"\"\"_summary_\n\n    Args:\n        dataframe (pd.DataFrame): _description_\n        name (str | None, optional): _description_. Defaults to None.\n        prefix (str, optional): _description_. Defaults to \"cdl_\".\n        inplace (bool, optional): _description_. Defaults to False.\n\n    Returns:\n        pd.Series | pd.DataFrame: _description_\n    \"\"\"\n    return cdl_pattern(\n        dataframe=dataframe,\n        pattern=\"3whitesoldiers\",\n        name=name,\n        prefix=prefix,\n        inplace=inplace,\n        **kwargs,\n    )\n</code></pre>"},{"location":"reference/indicator/candlestick/talib/#lettrade.indicator.candlestick.talib.cdl_doji","title":"cdl_doji","text":"<pre><code>cdl_doji(\n    dataframe: DataFrame,\n    name: str | None = None,\n    prefix: str = \"cdl_\",\n    inplace: bool = False,\n    **kwargs\n) -&gt; Series | DataFrame\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>dataframe</code>               (<code>DataFrame</code>)           \u2013            <p>description</p> </li> <li> <code>name</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>prefix</code>               (<code>str</code>, default:                   <code>'cdl_'</code> )           \u2013            <p>description. Defaults to \"cdl_\".</p> </li> <li> <code>inplace</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>description. Defaults to False.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Series | DataFrame</code>           \u2013            <p>pd.Series | pd.DataFrame: description</p> </li> </ul> Source code in <code>lettrade/indicator/candlestick/talib.py</code> <pre><code>def cdl_doji(\n    dataframe: pd.DataFrame,\n    name: str | None = None,\n    prefix: str = \"cdl_\",\n    inplace: bool = False,\n    **kwargs,\n) -&gt; pd.Series | pd.DataFrame:\n    \"\"\"_summary_\n\n    Args:\n        dataframe (pd.DataFrame): _description_\n        name (str | None, optional): _description_. Defaults to None.\n        prefix (str, optional): _description_. Defaults to \"cdl_\".\n        inplace (bool, optional): _description_. Defaults to False.\n\n    Returns:\n        pd.Series | pd.DataFrame: _description_\n    \"\"\"\n    return cdl_pattern(\n        dataframe=dataframe,\n        pattern=\"doji\",\n        name=name,\n        prefix=prefix,\n        inplace=inplace,\n        **kwargs,\n    )\n</code></pre>"},{"location":"reference/indicator/candlestick/talib/#lettrade.indicator.candlestick.talib.cdl_eveningstar","title":"cdl_eveningstar","text":"<pre><code>cdl_eveningstar(\n    dataframe: DataFrame,\n    name: str | None = None,\n    prefix: str = \"cdl_\",\n    inplace: bool = False,\n    **kwargs\n) -&gt; Series | DataFrame\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>dataframe</code>               (<code>DataFrame</code>)           \u2013            <p>description</p> </li> <li> <code>name</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>prefix</code>               (<code>str</code>, default:                   <code>'cdl_'</code> )           \u2013            <p>description. Defaults to \"cdl_\".</p> </li> <li> <code>inplace</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>description. Defaults to False.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Series | DataFrame</code>           \u2013            <p>pd.Series | pd.DataFrame: description</p> </li> </ul> Source code in <code>lettrade/indicator/candlestick/talib.py</code> <pre><code>def cdl_eveningstar(\n    dataframe: pd.DataFrame,\n    name: str | None = None,\n    prefix: str = \"cdl_\",\n    inplace: bool = False,\n    **kwargs,\n) -&gt; pd.Series | pd.DataFrame:\n    \"\"\"_summary_\n\n    Args:\n        dataframe (pd.DataFrame): _description_\n        name (str | None, optional): _description_. Defaults to None.\n        prefix (str, optional): _description_. Defaults to \"cdl_\".\n        inplace (bool, optional): _description_. Defaults to False.\n\n    Returns:\n        pd.Series | pd.DataFrame: _description_\n    \"\"\"\n    return cdl_pattern(\n        dataframe=dataframe,\n        pattern=\"eveningstar\",\n        name=name,\n        prefix=prefix,\n        inplace=inplace,\n        **kwargs,\n    )\n</code></pre>"},{"location":"reference/indicator/candlestick/talib/#lettrade.indicator.candlestick.talib.cdl_morningstar","title":"cdl_morningstar","text":"<pre><code>cdl_morningstar(\n    dataframe: DataFrame,\n    name: str | None = None,\n    prefix: str = \"cdl_\",\n    inplace: bool = False,\n    **kwargs\n) -&gt; Series | DataFrame\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>dataframe</code>               (<code>DataFrame</code>)           \u2013            <p>description</p> </li> <li> <code>name</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>prefix</code>               (<code>str</code>, default:                   <code>'cdl_'</code> )           \u2013            <p>description. Defaults to \"cdl_\".</p> </li> <li> <code>inplace</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>description. Defaults to False.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Series | DataFrame</code>           \u2013            <p>pd.Series | pd.DataFrame: description</p> </li> </ul> Source code in <code>lettrade/indicator/candlestick/talib.py</code> <pre><code>def cdl_morningstar(\n    dataframe: pd.DataFrame,\n    name: str | None = None,\n    prefix: str = \"cdl_\",\n    inplace: bool = False,\n    **kwargs,\n) -&gt; pd.Series | pd.DataFrame:\n    \"\"\"_summary_\n\n    Args:\n        dataframe (pd.DataFrame): _description_\n        name (str | None, optional): _description_. Defaults to None.\n        prefix (str, optional): _description_. Defaults to \"cdl_\".\n        inplace (bool, optional): _description_. Defaults to False.\n\n    Returns:\n        pd.Series | pd.DataFrame: _description_\n    \"\"\"\n    return cdl_pattern(\n        dataframe=dataframe,\n        pattern=\"morningstar\",\n        name=name,\n        prefix=prefix,\n        inplace=inplace,\n        **kwargs,\n    )\n</code></pre>"},{"location":"reference/indicator/candlestick/talib/#lettrade.indicator.candlestick.talib.cdl_pattern","title":"cdl_pattern","text":"<pre><code>cdl_pattern(\n    dataframe: DataFrame,\n    pattern: str,\n    name: str | None = None,\n    prefix: str = \"cdl_\",\n    inplace: bool = False,\n    plot: bool | list = False,\n    plot_type: Literal[\n        \"candlestick\", \"mark\"\n    ] = \"candlestick\",\n    plot_kwargs: dict | None = None,\n    **kwargs\n) -&gt; Series | DataFrame\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>dataframe</code>               (<code>DataFrame</code>)           \u2013            <p>pandas.DataFrame with ohlcv</p> </li> <li> <code>pattern</code>               (<code>str</code>)           \u2013            <p>TA-Lib candle pattern name. Ex: <code>3whitesoldiers</code>, <code>3blackcrows</code></p> </li> <li> <code>name</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>prefix</code>               (<code>str</code>, default:                   <code>'cdl_'</code> )           \u2013            <p>description. Defaults to \"cdl_\".</p> </li> <li> <code>inplace</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>description. Defaults to False.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Series | DataFrame</code>           \u2013            <p>pd.Series | pd.DataFrame: description</p> </li> </ul> Source code in <code>lettrade/indicator/candlestick/talib.py</code> <pre><code>def cdl_pattern(\n    dataframe: pd.DataFrame,\n    pattern: str,\n    name: str | None = None,\n    prefix: str = \"cdl_\",\n    inplace: bool = False,\n    plot: bool | list = False,\n    plot_type: Literal[\"candlestick\", \"mark\"] = \"candlestick\",\n    plot_kwargs: dict | None = None,\n    **kwargs,\n) -&gt; pd.Series | pd.DataFrame:\n    \"\"\"_summary_\n\n    Args:\n        dataframe (pd.DataFrame): pandas.DataFrame with ohlcv\n        pattern (str): TA-Lib candle pattern name. Ex: `3whitesoldiers`, `3blackcrows`\n        name (str | None, optional): _description_. Defaults to None.\n        prefix (str, optional): _description_. Defaults to \"cdl_\".\n        inplace (bool, optional): _description_. Defaults to False.\n\n    Raises:\n        RuntimeError: _description_\n\n    Returns:\n        pd.Series | pd.DataFrame: _description_\n    \"\"\"\n    if __debug__:\n        if not isinstance(dataframe, pd.DataFrame):\n            raise RuntimeError(\n                f\"dataframe type '{type(dataframe)}' \"\n                \"is not instance of pandas.DataFrame\"\n            )\n        if plot and not inplace:\n            raise RuntimeError(\"Cannot plot when inplace=False\")\n\n    i = getattr(ta, f\"CDL{pattern.upper()}\")(dataframe, **kwargs)\n\n    if inplace:\n        name = name or f\"{prefix}{pattern.lower()}\"\n        dataframe[name] = i\n\n        # Plot\n        if plot:\n            _plot_pattern(\n                dataframe=dataframe,\n                indicator=i,\n                name=name,\n                plot_type=plot_type,\n                plot_kwargs=plot_kwargs,\n            )\n\n        return dataframe\n\n    return i\n</code></pre>"},{"location":"reference/indicator/momentum/","title":"Index","text":""},{"location":"reference/indicator/momentum/#lettrade.indicator.momentum","title":"momentum","text":""},{"location":"reference/indicator/momentum/rsi/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> rsi","text":""},{"location":"reference/indicator/momentum/rsi/#lettrade.indicator.momentum.rsi","title":"rsi","text":""},{"location":"reference/indicator/momentum/rsi/#lettrade.indicator.momentum.rsi.rsi","title":"rsi","text":"<pre><code>rsi(\n    series: Series | str = \"close\",\n    window: int = None,\n    dataframe: DataFrame = None,\n    name: str | None = None,\n    prefix: str = \"\",\n    inplace: bool = False,\n    plot: bool | list = False,\n    plot_kwargs: dict | None = None,\n    **kwargs\n) -&gt; Series | DataFrame\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>series</code>               (<code>Series | str</code>, default:                   <code>'close'</code> )           \u2013            <p>description. Defaults to \"close\".</p> </li> <li> <code>window</code>               (<code>int</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>dataframe</code>               (<code>DataFrame</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>name</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>prefix</code>               (<code>str</code>, default:                   <code>''</code> )           \u2013            <p>description. Defaults to \"\".</p> </li> <li> <code>inplace</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>description. Defaults to False.</p> </li> <li> <code>plot</code>               (<code>bool | list</code>, default:                   <code>False</code> )           \u2013            <p>description. Defaults to False.</p> </li> <li> <code>plot_kwargs</code>               (<code>dict | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Series | DataFrame</code>           \u2013            <p>pd.Series | pd.DataFrame: description</p> </li> </ul> Source code in <code>lettrade/indicator/momentum/rsi.py</code> <pre><code>def rsi(\n    series: pd.Series | str = \"close\",\n    window: int = None,\n    dataframe: pd.DataFrame = None,\n    name: str | None = None,\n    prefix: str = \"\",\n    inplace: bool = False,\n    plot: bool | list = False,\n    plot_kwargs: dict | None = None,\n    **kwargs,\n) -&gt; pd.Series | pd.DataFrame:\n    \"\"\"_summary_\n\n    Args:\n        series (pd.Series | str, optional): _description_. Defaults to \"close\".\n        window (int, optional): _description_. Defaults to None.\n        dataframe (pd.DataFrame, optional): _description_. Defaults to None.\n        name (str | None, optional): _description_. Defaults to None.\n        prefix (str, optional): _description_. Defaults to \"\".\n        inplace (bool, optional): _description_. Defaults to False.\n        plot (bool | list, optional): _description_. Defaults to False.\n        plot_kwargs (dict | None, optional): _description_. Defaults to None.\n\n    Raises:\n        RuntimeError: _description_\n\n    Returns:\n        pd.Series | pd.DataFrame: _description_\n    \"\"\"\n    # Validation &amp; init\n    if __debug__:\n        if window is None or window &lt;= 0:\n            raise RuntimeError(f\"Window {window} is invalid\")\n    series = series_init(series=series, dataframe=dataframe, inplace=inplace)\n\n    # Indicator\n    i = ta.RSI(series, timeperiod=window, **kwargs)\n\n    if inplace:\n        name = name or f\"{prefix}rsi\"\n        dataframe[name] = i\n\n        # Plot\n        if plot:\n            if plot_kwargs is None:\n                plot_kwargs = dict()\n\n            plot_kwargs.update(series=name, name=name)\n            plot_kwargs.setdefault(\"row\", 2)\n            plot_kwargs.setdefault(\"row_height\", 0.5)\n\n            from lettrade.indicator.plot import IndicatorPlotter\n            from lettrade.plot.plotly import plot_line\n\n            IndicatorPlotter(dataframe=dataframe, plotter=plot_line, **plot_kwargs)\n\n        return dataframe\n\n    return i\n</code></pre>"},{"location":"reference/indicator/trend/","title":"Index","text":""},{"location":"reference/indicator/trend/#lettrade.indicator.trend","title":"trend","text":""},{"location":"reference/indicator/trend/ichimoku/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> ichimoku","text":""},{"location":"reference/indicator/trend/ichimoku/#lettrade.indicator.trend.ichimoku","title":"ichimoku","text":""},{"location":"reference/indicator/trend/ichimoku/#lettrade.indicator.trend.ichimoku.ichimoku","title":"ichimoku","text":"<pre><code>ichimoku(\n    dataframe: DataFrame,\n    conversion_line_window: int = 9,\n    base_line_windows: int = 26,\n    laggin_span: int = 52,\n    displacement: int = 26,\n    cloud: bool = False,\n    prefix: str = \"\",\n    inplace: bool = False,\n    plot: bool | list = False,\n    plot_kwargs: dict | None = None,\n) -&gt; dict[str, Series] | DataFrame\n</code></pre> <p>Ichimoku cloud indicator</p> Note <p>Do not use <code>chikou_span</code> for backtesting. It looks into the future, is not printed by most charting platforms. It is only useful for visual analysis</p> <p>Parameters:</p> <ul> <li> <code>dataframe</code>               (<code>DataFrame</code>)           \u2013            <p>Dataframe containing OHLCV data</p> </li> <li> <code>conversion_line_window</code>               (<code>int</code>, default:                   <code>9</code> )           \u2013            <p>Conversion line Window. Defaults to 9.</p> </li> <li> <code>base_line_windows</code>               (<code>int</code>, default:                   <code>26</code> )           \u2013            <p>Base line Windows. Defaults to 26.</p> </li> <li> <code>laggin_span</code>               (<code>int</code>, default:                   <code>52</code> )           \u2013            <p>Lagging span window. Defaults to 52.</p> </li> <li> <code>displacement</code>               (<code>int</code>, default:                   <code>26</code> )           \u2013            <p>Displacement (shift). Defaults to 26.</p> </li> <li> <code>cloud</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Add cloud direction. Defaults to False.</p> </li> <li> <code>prefix</code>               (<code>str</code>, default:                   <code>''</code> )           \u2013            <p>description. Defaults to \"ichimoku_\".</p> </li> <li> <code>inplace</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>description. Defaults to False.</p> </li> <li> <code>plot</code>               (<code>bool | list</code>, default:                   <code>False</code> )           \u2013            <p>description. Defaults to False.</p> </li> <li> <code>plot_kwargs</code>               (<code>dict | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict[str, Series] | DataFrame</code>           \u2013            <p>dict[str, pd.Series] | pd.DataFrame: {tenkan_sen, kijun_sen, senkou_span_a, senkou_span_b, leading_senkou_span_a,</p> </li> <li> <code>dict[str, Series] | DataFrame</code>           \u2013            <p>leading_senkou_span_b, chikou_span, cloud_white, cloud_black}</p> </li> </ul> Source code in <code>lettrade/indicator/trend/ichimoku.py</code> <pre><code>def ichimoku(\n    dataframe: pd.DataFrame,\n    conversion_line_window: int = 9,\n    base_line_windows: int = 26,\n    laggin_span: int = 52,\n    displacement: int = 26,\n    cloud: bool = False,\n    prefix: str = \"\",\n    inplace: bool = False,\n    plot: bool | list = False,\n    plot_kwargs: dict | None = None,\n) -&gt; dict[str, pd.Series] | pd.DataFrame:\n    \"\"\"Ichimoku cloud indicator\n\n    Note:\n        Do not use `chikou_span` for backtesting.\n        It looks into the future, is not printed by most charting platforms.\n        It is only useful for visual analysis\n\n    Args:\n        dataframe (pd.DataFrame): Dataframe containing OHLCV data\n        conversion_line_window (int, optional): Conversion line Window. Defaults to 9.\n        base_line_windows (int, optional): Base line Windows. Defaults to 26.\n        laggin_span (int, optional): Lagging span window. Defaults to 52.\n        displacement (int, optional): Displacement (shift). Defaults to 26.\n        cloud (bool, optional): Add cloud direction. Defaults to False.\n        prefix (str, optional): _description_. Defaults to \"ichimoku_\".\n        inplace (bool, optional): _description_. Defaults to False.\n        plot (bool | list, optional): _description_. Defaults to False.\n        plot_kwargs (dict | None, optional): _description_. Defaults to None.\n\n    Returns:\n        dict[str, pd.Series] | pd.DataFrame: {tenkan_sen, kijun_sen, senkou_span_a, senkou_span_b, leading_senkou_span_a,\n        leading_senkou_span_b, chikou_span, cloud_white, cloud_black}\n    \"\"\"\n    if __debug__:\n        if not isinstance(dataframe, pd.DataFrame):\n            raise RuntimeError(\n                f\"dataframe type '{type(dataframe)}' \"\n                \"is not instance of pandas.DataFrame\"\n            )\n        if plot and not inplace:\n            raise RuntimeError(\"Cannot plot when inplace=False\")\n\n    tenkan_sen = (\n        dataframe[\"high\"].rolling(window=conversion_line_window).max()\n        + dataframe[\"low\"].rolling(window=conversion_line_window).min()\n    ) / 2\n\n    kijun_sen = (\n        dataframe[\"high\"].rolling(window=base_line_windows).max()\n        + dataframe[\"low\"].rolling(window=base_line_windows).min()\n    ) / 2\n\n    leading_senkou_span_a = (tenkan_sen + kijun_sen) / 2\n\n    leading_senkou_span_b = (\n        dataframe[\"high\"].rolling(window=laggin_span).max()\n        + dataframe[\"low\"].rolling(window=laggin_span).min()\n    ) / 2\n\n    senkou_span_a = leading_senkou_span_a.shift(displacement - 1)\n\n    senkou_span_b = leading_senkou_span_b.shift(displacement - 1)\n\n    chikou_span = dataframe[\"close\"].shift(-displacement + 1)\n\n    if cloud:\n        cloud_white = senkou_span_a &gt; senkou_span_b\n        cloud_black = senkou_span_b &gt; senkou_span_a\n\n    # Result is inplace or new dict\n    result = dataframe if inplace else {}\n\n    result[f\"{prefix}tenkan_sen\"] = tenkan_sen\n    result[f\"{prefix}kijun_sen\"] = kijun_sen\n    result[f\"{prefix}senkou_span_a\"] = senkou_span_a\n    result[f\"{prefix}senkou_span_b\"] = senkou_span_b\n    result[f\"{prefix}leading_senkou_span_a\"] = leading_senkou_span_a\n    result[f\"{prefix}leading_senkou_span_b\"] = leading_senkou_span_b\n    result[f\"{prefix}chikou_span\"] = chikou_span\n\n    if cloud:\n        result[f\"{prefix}cloud_white\"] = cloud_white\n        result[f\"{prefix}cloud_black\"] = cloud_black\n\n    if plot:\n        if plot_kwargs is None:\n            plot_kwargs = dict()\n\n        if isinstance(plot, list):\n            if f\"{prefix}tenkan_sen\" in plot:\n                plot_kwargs.update(tenkan_sen=f\"{prefix}tenkan_sen\")\n            if f\"{prefix}kijun_sen\" in plot:\n                plot_kwargs.update(kijun_sen=f\"{prefix}kijun_sen\")\n            if f\"{prefix}senkou_span_a\" in plot:\n                plot_kwargs.update(senkou_span_a=f\"{prefix}senkou_span_a\")\n            if f\"{prefix}senkou_span_b\" in plot:\n                plot_kwargs.update(senkou_span_b=f\"{prefix}senkou_span_b\")\n            if f\"{prefix}chikou_span\" in plot:\n                plot_kwargs.update(chikou_span=f\"{prefix}chikou_span\")\n        else:\n            plot_kwargs.update(\n                tenkan_sen=f\"{prefix}tenkan_sen\",\n                kijun_sen=f\"{prefix}kijun_sen\",\n                senkou_span_a=f\"{prefix}senkou_span_a\",\n                senkou_span_b=f\"{prefix}senkou_span_b\",\n                chikou_span=f\"{prefix}chikou_span\",\n            )\n        from lettrade.indicator.plot import IndicatorPlotter\n        from lettrade.plot.plotly import plot_ichimoku\n\n        IndicatorPlotter(dataframe=dataframe, plotter=plot_ichimoku, **plot_kwargs)\n    return result\n</code></pre>"},{"location":"reference/indicator/trend/ma/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> ma","text":""},{"location":"reference/indicator/trend/ma/#lettrade.indicator.trend.ma","title":"ma","text":""},{"location":"reference/indicator/trend/ma/#lettrade.indicator.trend.ma.ema","title":"ema","text":"<pre><code>ema(\n    series: Series | str = \"close\",\n    window: int = None,\n    dataframe: DataFrame = None,\n    name: str | None = None,\n    prefix: str = \"\",\n    inplace: bool = False,\n    plot: bool | list = False,\n    plot_kwargs: dict | None = None,\n    **kwargs\n) -&gt; Series | DataFrame\n</code></pre> <p>Exponential Moving Average</p> <p>Parameters:</p> <ul> <li> <code>series</code>               (<code>Series | str</code>, default:                   <code>'close'</code> )           \u2013            <p>description. Defaults to \"close\".</p> </li> <li> <code>window</code>               (<code>int</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>dataframe</code>               (<code>DataFrame</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>name</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>prefix</code>               (<code>str</code>, default:                   <code>''</code> )           \u2013            <p>description. Defaults to \"\".</p> </li> <li> <code>inplace</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>description. Defaults to False.</p> </li> <li> <code>plot</code>               (<code>bool | list</code>, default:                   <code>False</code> )           \u2013            <p>description. Defaults to False.</p> </li> <li> <code>plot_kwargs</code>               (<code>dict | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> Example <pre><code>df.i.ema(window=21, name=\"ema\", inplace=True, plot=True)\n</code></pre> <p>Returns:</p> <ul> <li> <code>Series | DataFrame</code>           \u2013            <p>pd.Series | pd.DataFrame: description</p> </li> </ul> Source code in <code>lettrade/indicator/trend/ma.py</code> <pre><code>def ema(\n    series: pd.Series | str = \"close\",\n    window: int = None,\n    dataframe: pd.DataFrame = None,\n    name: str | None = None,\n    prefix: str = \"\",\n    inplace: bool = False,\n    plot: bool | list = False,\n    plot_kwargs: dict | None = None,\n    **kwargs,\n) -&gt; pd.Series | pd.DataFrame:\n    \"\"\"Exponential Moving Average\n\n    Args:\n        series (pd.Series | str, optional): _description_. Defaults to \"close\".\n        window (int, optional): _description_. Defaults to None.\n        dataframe (pd.DataFrame, optional): _description_. Defaults to None.\n        name (str | None, optional): _description_. Defaults to None.\n        prefix (str, optional): _description_. Defaults to \"\".\n        inplace (bool, optional): _description_. Defaults to False.\n        plot (bool | list, optional): _description_. Defaults to False.\n        plot_kwargs (dict | None, optional): _description_. Defaults to None.\n\n    Example:\n        ```python\n        df.i.ema(window=21, name=\"ema\", inplace=True, plot=True)\n        ```\n\n    Returns:\n        pd.Series | pd.DataFrame: _description_\n    \"\"\"\n    return ma(\n        series=series,\n        window=window,\n        mode=\"ema\",\n        dataframe=dataframe,\n        name=name,\n        prefix=prefix,\n        inplace=inplace,\n        plot=plot,\n        plot_kwargs=plot_kwargs,\n        **kwargs,\n    )\n</code></pre>"},{"location":"reference/indicator/trend/ma/#lettrade.indicator.trend.ma.ma","title":"ma","text":"<pre><code>ma(\n    series: Series | str = \"close\",\n    window: int = None,\n    mode: Literal[\n        \"sma\",\n        \"ema\",\n        \"wma\",\n        \"dema\",\n        \"tema\",\n        \"trima\",\n        \"kama\",\n        \"mama\",\n        \"t3\",\n    ] = None,\n    dataframe: DataFrame = None,\n    name: str | None = None,\n    prefix: str = \"\",\n    inplace: bool = False,\n    plot: bool | list = False,\n    plot_kwargs: dict | None = None,\n    **kwargs\n) -&gt; Series | DataFrame\n</code></pre> <p>Moving Average</p> <p>Parameters:</p> <ul> <li> <code>series</code>               (<code>Series | str</code>, default:                   <code>'close'</code> )           \u2013            <p>description. Defaults to \"close\".</p> </li> <li> <code>window</code>               (<code>int</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>mode</code>               (<code>Literal[ &amp;quot;sma&amp;quot;, &amp;quot;ema&amp;quot;, &amp;quot;wma&amp;quot;, &amp;quot;dema&amp;quot;, &amp;quot;tema&amp;quot;, &amp;quot;trima&amp;quot;, &amp;quot;kama&amp;quot;, &amp;quot;mama&amp;quot;, &amp;quot;t3&amp;quot; ]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>dataframe</code>               (<code>DataFrame</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>name</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>prefix</code>               (<code>str</code>, default:                   <code>''</code> )           \u2013            <p>description. Defaults to \"\".</p> </li> <li> <code>inplace</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>description. Defaults to False.</p> </li> <li> <code>plot</code>               (<code>bool | list</code>, default:                   <code>False</code> )           \u2013            <p>description. Defaults to False.</p> </li> <li> <code>plot_kwargs</code>               (<code>dict | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> Example <pre><code>df.i.ma(window=21, name=\"sma\", mode=\"sma\", inplace=True, plot=True)\n</code></pre> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Series | DataFrame</code>           \u2013            <p>pd.Series | pd.DataFrame: description</p> </li> </ul> Source code in <code>lettrade/indicator/trend/ma.py</code> <pre><code>def ma(\n    series: pd.Series | str = \"close\",\n    window: int = None,\n    mode: Literal[\n        \"sma\", \"ema\", \"wma\", \"dema\", \"tema\", \"trima\", \"kama\", \"mama\", \"t3\"\n    ] = None,\n    dataframe: pd.DataFrame = None,\n    name: str | None = None,\n    prefix: str = \"\",\n    inplace: bool = False,\n    plot: bool | list = False,\n    plot_kwargs: dict | None = None,\n    **kwargs,\n) -&gt; pd.Series | pd.DataFrame:\n    \"\"\"Moving Average\n\n    Args:\n        series (pd.Series | str, optional): _description_. Defaults to \"close\".\n        window (int, optional): _description_. Defaults to None.\n        mode (Literal[ &amp;quot;sma&amp;quot;, &amp;quot;ema&amp;quot;, &amp;quot;wma&amp;quot;, &amp;quot;dema&amp;quot;, &amp;quot;tema&amp;quot;, &amp;quot;trima&amp;quot;, &amp;quot;kama&amp;quot;, &amp;quot;mama&amp;quot;, &amp;quot;t3&amp;quot; ], optional): _description_. Defaults to None.\n        dataframe (pd.DataFrame, optional): _description_. Defaults to None.\n        name (str | None, optional): _description_. Defaults to None.\n        prefix (str, optional): _description_. Defaults to \"\".\n        inplace (bool, optional): _description_. Defaults to False.\n        plot (bool | list, optional): _description_. Defaults to False.\n        plot_kwargs (dict | None, optional): _description_. Defaults to None.\n\n    Example:\n        ```python\n        df.i.ma(window=21, name=\"sma\", mode=\"sma\", inplace=True, plot=True)\n        ```\n\n    Raises:\n        RuntimeError: _description_\n\n    Returns:\n        pd.Series | pd.DataFrame: _description_\n    \"\"\"\n    # Validation &amp; init\n    if __debug__:\n        if window is None or window &lt;= 0:\n            raise RuntimeError(f\"Window {window} is invalid\")\n        if mode is None:\n            raise RuntimeError(f\"Mode {window} is invalid\")\n        if plot and not inplace:\n            raise RuntimeError(\"Cannot plot when inplace=False\")\n\n    series = series_init(series=series, dataframe=dataframe, inplace=inplace)\n\n    # Indicator\n    ma_fn = talib_ma(mode)\n    i = ma_fn(series, timeperiod=window, **kwargs)\n\n    if inplace:\n        name = name or f\"{prefix}{mode}\"\n        dataframe[name] = i\n\n        # Plot\n        if plot:\n            if plot_kwargs is None:\n                plot_kwargs = dict()\n\n            plot_kwargs.update(series=name, name=name)\n\n            from lettrade.indicator.plot import IndicatorPlotter\n            from lettrade.plot.plotly import plot_line\n\n            IndicatorPlotter(dataframe=dataframe, plotter=plot_line, **plot_kwargs)\n\n        return dataframe\n\n    return i\n</code></pre>"},{"location":"reference/indicator/trend/parabolic_sar/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> parabolic_sar","text":""},{"location":"reference/indicator/trend/parabolic_sar/#lettrade.indicator.trend.parabolic_sar","title":"parabolic_sar","text":""},{"location":"reference/indicator/trend/parabolic_sar/#lettrade.indicator.trend.parabolic_sar.parabolic_sar","title":"parabolic_sar","text":"<pre><code>parabolic_sar(\n    dataframe: DataFrame,\n    af0: float = 0.02,\n    af: float = 0.02,\n    max_af: float = 0.2,\n    prefix: str = \"psar_\",\n    inplace: bool = False,\n    plot: bool | list = False,\n    plot_kwargs: dict | None = None,\n) -&gt; dict[str, Series] | DataFrame\n</code></pre> <p>Indicator: Parabolic Stop and Reverse (PSAR)</p> Source <p>https://github.com/twopirllc/pandas-ta/blob/main/pandas_ta/trend/psar.py</p> <p>Parameters:</p> <ul> <li> <code>dataframe</code>               (<code>DataFrame</code>)           \u2013            <p>description</p> </li> <li> <code>af0</code>               (<code>float</code>, default:                   <code>0.02</code> )           \u2013            <p>description. Defaults to 0.02.</p> </li> <li> <code>af</code>               (<code>float</code>, default:                   <code>0.02</code> )           \u2013            <p>description. Defaults to 0.02.</p> </li> <li> <code>max_af</code>               (<code>float</code>, default:                   <code>0.2</code> )           \u2013            <p>description. Defaults to 0.2.</p> </li> <li> <code>prefix</code>               (<code>str</code>, default:                   <code>'psar_'</code> )           \u2013            <p>description. Defaults to \"psar_\".</p> </li> <li> <code>inplace</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>description. Defaults to False.</p> </li> <li> <code>plot</code>               (<code>bool | list</code>, default:                   <code>False</code> )           \u2013            <p>description. Defaults to False.</p> </li> <li> <code>plot_kwargs</code>               (<code>dict | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict[str, Series] | DataFrame</code>           \u2013            <p>dict[str, pd.Series] | pd.DataFrame: description</p> </li> </ul> Source code in <code>lettrade/indicator/trend/parabolic_sar.py</code> <pre><code>def parabolic_sar(\n    dataframe: pd.DataFrame,\n    af0: float = 0.02,\n    af: float = 0.02,\n    max_af: float = 0.2,\n    prefix: str = \"psar_\",\n    inplace: bool = False,\n    plot: bool | list = False,\n    plot_kwargs: dict | None = None,\n) -&gt; dict[str, pd.Series] | pd.DataFrame:\n    \"\"\"Indicator: Parabolic Stop and Reverse (PSAR)\n\n    Source:\n        https://github.com/twopirllc/pandas-ta/blob/main/pandas_ta/trend/psar.py\n\n    Args:\n        dataframe (pd.DataFrame): _description_\n        af0 (float, optional): _description_. Defaults to 0.02.\n        af (float, optional): _description_. Defaults to 0.02.\n        max_af (float, optional): _description_. Defaults to 0.2.\n        prefix (str, optional): _description_. Defaults to \"psar_\".\n        inplace (bool, optional): _description_. Defaults to False.\n        plot (bool | list, optional): _description_. Defaults to False.\n        plot_kwargs (dict | None, optional): _description_. Defaults to None.\n\n    Raises:\n        RuntimeError: _description_\n\n    Returns:\n        dict[str, pd.Series] | pd.DataFrame: _description_\n    \"\"\"\n    if __debug__:\n        if not isinstance(dataframe, pd.DataFrame):\n            raise RuntimeError(\n                f\"dataframe type '{type(dataframe)}' \"\n                \"is not instance of pandas.DataFrame\"\n            )\n\n    def _falling(high: pd.Series, low: pd.Series, drift: int = 1):\n        \"\"\"Returns the last -DM value\"\"\"\n        # Not to be confused with ta.falling()\n        up = high - high.shift(drift)\n        dn = low.shift(drift) - low\n        dmn = (((dn &gt; up) &amp; (dn &gt; 0)) * dn).apply(zero).iloc[-1]\n        return dmn &gt; 0\n\n    # Falling if the first NaN -DM is positive\n    falling = _falling(dataframe.high.iloc[:2], dataframe.low.iloc[:2])\n    if falling:\n        sar = dataframe.high.iloc[0]\n        ep = dataframe.low.iloc[0]\n    else:\n        sar = dataframe.low.iloc[0]\n        ep = dataframe.high.iloc[0]\n\n    sar = dataframe.close.iloc[0]\n\n    i_long = pd.Series(np.nan, index=dataframe.high.index)\n    i_short = i_long.copy()\n    i_reversal = pd.Series(0, index=dataframe.high.index)\n    i_af = i_long.copy()\n    i_af.iloc[0:2] = af0\n\n    # Calculate Result\n    m = dataframe.high.shape[0]\n    for row in range(1, m):\n        high_ = dataframe.high.iloc[row]\n        low_ = dataframe.low.iloc[row]\n\n        if falling:\n            _sar = sar + af * (ep - sar)\n            reverse = high_ &gt; _sar\n\n            if low_ &lt; ep:\n                ep = low_\n                af = min(af + af0, max_af)\n\n            _sar = max(dataframe.high.iloc[row - 1], dataframe.high.iloc[row - 2], _sar)\n        else:\n            _sar = sar + af * (ep - sar)\n            reverse = low_ &lt; _sar\n\n            if high_ &gt; ep:\n                ep = high_\n                af = min(af + af0, max_af)\n\n            _sar = min(dataframe.low.iloc[row - 1], dataframe.low.iloc[row - 2], _sar)\n\n        if reverse:\n            _sar = ep\n            af = af0\n            falling = not falling  # Must come before next line\n            ep = low_ if falling else high_\n\n        sar = _sar  # Update SAR\n\n        # Seperate long/short sar based on falling\n        if falling:\n            i_short.iloc[row] = sar\n        else:\n            i_long.iloc[row] = sar\n\n        i_af.iloc[row] = af\n        i_reversal.iloc[row] = int(reverse)\n\n    # Result is inplace or new dict\n    result = dataframe if inplace else {}\n\n    result[f\"{prefix}long\"] = i_long\n    result[f\"{prefix}short\"] = i_short\n    result[f\"{prefix}af\"] = i_af\n    result[f\"{prefix}reversal\"] = i_reversal\n\n    # Plot\n    if plot:\n        if plot_kwargs is None:\n            plot_kwargs = dict()\n\n        if isinstance(plot, list):\n            if f\"{prefix}long\" in plot:\n                plot_kwargs.update(long=f\"{prefix}long\")\n            if f\"{prefix}short\" in plot:\n                plot_kwargs.update(short=f\"{prefix}short\")\n        else:\n            plot_kwargs.update(\n                long=f\"{prefix}long\",\n                short=f\"{prefix}short\",\n            )\n\n        from lettrade.indicator.plot import IndicatorPlotter\n        from lettrade.plot.plotly import plot_parabolic_sar\n\n        IndicatorPlotter(\n            dataframe=dataframe,\n            plotter=plot_parabolic_sar,\n            **plot_kwargs,\n        )\n\n    return result\n</code></pre>"},{"location":"reference/indicator/trend/parabolic_sar/#lettrade.indicator.trend.parabolic_sar.zero","title":"zero","text":"<pre><code>zero(x: tuple[int, float]) -&gt; tuple[int, float]\n</code></pre> <p>If the value is close to zero, then return zero. Otherwise return itself.</p> Source code in <code>lettrade/indicator/trend/parabolic_sar.py</code> <pre><code>def zero(x: tuple[int, float]) -&gt; tuple[int, float]:\n    \"\"\"If the value is close to zero, then return zero. Otherwise return itself.\"\"\"\n    return 0 if abs(x) &lt; sflt.epsilon else x\n</code></pre>"},{"location":"reference/indicator/vendor/","title":"Index","text":""},{"location":"reference/indicator/vendor/#lettrade.indicator.vendor","title":"vendor","text":""},{"location":"reference/indicator/vendor/qtpylib/","title":"Index","text":""},{"location":"reference/indicator/vendor/qtpylib/#lettrade.indicator.vendor.qtpylib","title":"qtpylib","text":""},{"location":"reference/indicator/vendor/qtpylib/inject/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> inject","text":""},{"location":"reference/indicator/vendor/qtpylib/inject/#lettrade.indicator.vendor.qtpylib.inject","title":"inject","text":""},{"location":"reference/indicator/vendor/qtpylib/qtpylib/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> qtpylib","text":""},{"location":"reference/indicator/vendor/qtpylib/qtpylib/#lettrade.indicator.vendor.qtpylib.qtpylib","title":"qtpylib","text":""},{"location":"reference/indicator/vendor/qtpylib/qtpylib/#lettrade.indicator.vendor.qtpylib.qtpylib.cci","title":"cci","text":"<pre><code>cci(series, window=14)\n</code></pre> <p>compute commodity channel index</p> Source code in <code>lettrade/indicator/vendor/qtpylib/qtpylib.py</code> <pre><code>def cci(series, window=14):\n    \"\"\"\n    compute commodity channel index\n    \"\"\"\n    price = typical_price(series)\n    typical_mean = rolling_mean(price, window)\n    res = (price - typical_mean) / (0.015 * np.std(typical_mean))\n    return pd.Series(index=series.index, data=res)\n</code></pre>"},{"location":"reference/indicator/vendor/qtpylib/qtpylib/#lettrade.indicator.vendor.qtpylib.qtpylib.ibs","title":"ibs","text":"<pre><code>ibs(bars)\n</code></pre> <p>Internal bar strength</p> Source code in <code>lettrade/indicator/vendor/qtpylib/qtpylib.py</code> <pre><code>def ibs(bars):\n    \"\"\"Internal bar strength\"\"\"\n    res = np.round((bars[\"close\"] - bars[\"low\"]) / (bars[\"high\"] - bars[\"low\"]), 2)\n    return pd.Series(index=bars.index, data=res)\n</code></pre>"},{"location":"reference/indicator/vendor/qtpylib/qtpylib/#lettrade.indicator.vendor.qtpylib.qtpylib.macd","title":"macd","text":"<pre><code>macd(series, fast=3, slow=10, smooth=16)\n</code></pre> <p>compute the MACD (Moving Average Convergence/Divergence) using a fast and slow exponential moving avg' return value is emaslow, emafast, macd which are len(x) arrays</p> Source code in <code>lettrade/indicator/vendor/qtpylib/qtpylib.py</code> <pre><code>def macd(series, fast=3, slow=10, smooth=16):\n    \"\"\"\n    compute the MACD (Moving Average Convergence/Divergence)\n    using a fast and slow exponential moving avg'\n    return value is emaslow, emafast, macd which are len(x) arrays\n    \"\"\"\n    macd_line = rolling_weighted_mean(series, window=fast) - rolling_weighted_mean(\n        series, window=slow\n    )\n    signal = rolling_weighted_mean(macd_line, window=smooth)\n    histogram = macd_line - signal\n    # return macd_line, signal, histogram\n    return pd.DataFrame(\n        index=series.index,\n        data={\n            \"macd\": macd_line.values,\n            \"signal\": signal.values,\n            \"histogram\": histogram.values,\n        },\n    )\n</code></pre>"},{"location":"reference/indicator/vendor/qtpylib/qtpylib/#lettrade.indicator.vendor.qtpylib.qtpylib.pvt","title":"pvt","text":"<pre><code>pvt(bars)\n</code></pre> <p>Price Volume Trend</p> Source code in <code>lettrade/indicator/vendor/qtpylib/qtpylib.py</code> <pre><code>def pvt(bars):\n    \"\"\"Price Volume Trend\"\"\"\n    trend = ((bars[\"close\"] - bars[\"close\"].shift(1)) / bars[\"close\"].shift(1)) * bars[\n        \"volume\"\n    ]\n    return trend.cumsum()\n</code></pre>"},{"location":"reference/indicator/vendor/qtpylib/qtpylib/#lettrade.indicator.vendor.qtpylib.qtpylib.roc","title":"roc","text":"<pre><code>roc(series, window=14)\n</code></pre> <p>compute rate of change</p> Source code in <code>lettrade/indicator/vendor/qtpylib/qtpylib.py</code> <pre><code>def roc(series, window=14):\n    \"\"\"\n    compute rate of change\n    \"\"\"\n    res = (series - series.shift(window)) / series.shift(window)\n    return pd.Series(index=series.index, data=res)\n</code></pre>"},{"location":"reference/indicator/vendor/qtpylib/qtpylib/#lettrade.indicator.vendor.qtpylib.qtpylib.rolling_vwap","title":"rolling_vwap","text":"<pre><code>rolling_vwap(bars, window=200, min_periods=None)\n</code></pre> <p>calculate vwap using moving window (input can be pandas series or numpy array) bars are usually mid [ (h+l)/2 ] or typical [ (h+l+c)/3 ]</p> Source code in <code>lettrade/indicator/vendor/qtpylib/qtpylib.py</code> <pre><code>def rolling_vwap(bars, window=200, min_periods=None):\n    \"\"\"\n    calculate vwap using moving window\n    (input can be pandas series or numpy array)\n    bars are usually mid [ (h+l)/2 ] or typical [ (h+l+c)/3 ]\n    \"\"\"\n    min_periods = window if min_periods is None else min_periods\n\n    typical = (bars[\"high\"] + bars[\"low\"] + bars[\"close\"]) / 3\n    volume = bars[\"volume\"]\n\n    left = (volume * typical).rolling(window=window, min_periods=min_periods).sum()\n    right = volume.rolling(window=window, min_periods=min_periods).sum()\n\n    return (\n        pd.Series(index=bars.index, data=(left / right))\n        .replace([np.inf, -np.inf], float(\"NaN\"))\n        .ffill()\n    )\n</code></pre>"},{"location":"reference/indicator/vendor/qtpylib/qtpylib/#lettrade.indicator.vendor.qtpylib.qtpylib.rsi","title":"rsi","text":"<pre><code>rsi(series, window=14)\n</code></pre> <p>compute the n period relative strength indicator</p> Source code in <code>lettrade/indicator/vendor/qtpylib/qtpylib.py</code> <pre><code>def rsi(series, window=14):\n    \"\"\"\n    compute the n period relative strength indicator\n    \"\"\"\n\n    # 100-(100/relative_strength)\n    deltas = np.diff(series)\n    seed = deltas[: window + 1]\n\n    # default values\n    ups = seed[seed &gt; 0].sum() / window\n    downs = -seed[seed &lt; 0].sum() / window\n    rsival = np.zeros_like(series)\n    rsival[:window] = 100.0 - 100.0 / (1.0 + ups / downs)\n\n    # period values\n    for i in range(window, len(series)):\n        delta = deltas[i - 1]\n        if delta &gt; 0:\n            upval = delta\n            downval = 0\n        else:\n            upval = 0\n            downval = -delta\n\n        ups = (ups * (window - 1) + upval) / window\n        downs = (downs * (window - 1.0) + downval) / window\n        rsival[i] = 100.0 - 100.0 / (1.0 + ups / downs)\n\n    # return rsival\n    return pd.Series(index=series.index, data=rsival)\n</code></pre>"},{"location":"reference/indicator/vendor/qtpylib/qtpylib/#lettrade.indicator.vendor.qtpylib.qtpylib.session","title":"session","text":"<pre><code>session(df, start='17:00', end='16:00')\n</code></pre> <p>remove previous globex day from df</p> Source code in <code>lettrade/indicator/vendor/qtpylib/qtpylib.py</code> <pre><code>def session(df, start=\"17:00\", end=\"16:00\"):\n    \"\"\"remove previous globex day from df\"\"\"\n    if df.empty:\n        return df\n\n    # get start/end/now as decimals\n    int_start = list(map(int, start.split(\":\")))\n    int_start = (int_start[0] + int_start[1] - 1 / 100) - 0.0001\n    int_end = list(map(int, end.split(\":\")))\n    int_end = int_end[0] + int_end[1] / 100\n    int_now = df[-1:].index.hour[0] + (df[:1].index.minute[0]) / 100\n\n    # same-dat session?\n    is_same_day = int_end &gt; int_start\n\n    # set pointers\n    curr = prev = df[-1:].index[0].strftime(\"%Y-%m-%d\")\n\n    # globex/forex session\n    if not is_same_day:\n        prev = (datetime.strptime(curr, \"%Y-%m-%d\") - timedelta(1)).strftime(\"%Y-%m-%d\")\n\n    # slice\n    if int_now &gt;= int_start:\n        df = df[df.index &gt;= curr + \" \" + start]\n    else:\n        df = df[df.index &gt;= prev + \" \" + start]\n\n    return df.copy()\n</code></pre>"},{"location":"reference/indicator/vendor/qtpylib/qtpylib/#lettrade.indicator.vendor.qtpylib.qtpylib.stoch","title":"stoch","text":"<pre><code>stoch(df, window=14, d=3, k=3, fast=False)\n</code></pre> <p>compute the n period relative strength indicator http://excelta.blogspot.co.il/2013/09/stochastic-oscillator-technical.html</p> Source code in <code>lettrade/indicator/vendor/qtpylib/qtpylib.py</code> <pre><code>def stoch(df, window=14, d=3, k=3, fast=False):\n    \"\"\"\n    compute the n period relative strength indicator\n    http://excelta.blogspot.co.il/2013/09/stochastic-oscillator-technical.html\n    \"\"\"\n\n    my_df = pd.DataFrame(index=df.index)\n\n    my_df[\"rolling_max\"] = df[\"high\"].rolling(window).max()\n    my_df[\"rolling_min\"] = df[\"low\"].rolling(window).min()\n\n    my_df[\"fast_k\"] = (\n        100\n        * (df[\"close\"] - my_df[\"rolling_min\"])\n        / (my_df[\"rolling_max\"] - my_df[\"rolling_min\"])\n    )\n    my_df[\"fast_d\"] = my_df[\"fast_k\"].rolling(d).mean()\n\n    if fast:\n        return my_df.loc[:, [\"fast_k\", \"fast_d\"]]\n\n    my_df[\"slow_k\"] = my_df[\"fast_k\"].rolling(k).mean()\n    my_df[\"slow_d\"] = my_df[\"slow_k\"].rolling(d).mean()\n\n    return my_df.loc[:, [\"slow_k\", \"slow_d\"]]\n</code></pre>"},{"location":"reference/indicator/vendor/qtpylib/qtpylib/#lettrade.indicator.vendor.qtpylib.qtpylib.vwap","title":"vwap","text":"<pre><code>vwap(bars)\n</code></pre> <p>calculate vwap of entire time series (input can be pandas series or numpy array) bars are usually mid [ (h+l)/2 ] or typical [ (h+l+c)/3 ]</p> Source code in <code>lettrade/indicator/vendor/qtpylib/qtpylib.py</code> <pre><code>def vwap(bars):\n    \"\"\"\n    calculate vwap of entire time series\n    (input can be pandas series or numpy array)\n    bars are usually mid [ (h+l)/2 ] or typical [ (h+l+c)/3 ]\n    \"\"\"\n    raise ValueError(\n        \"using `qtpylib.vwap` facilitates lookahead bias. Please use \"\n        \"`qtpylib.rolling_vwap` instead, which calculates vwap in a rolling manner.\"\n    )\n</code></pre>"},{"location":"reference/indicator/vendor/qtpylib/qtpylib/#lettrade.indicator.vendor.qtpylib.qtpylib.zlma","title":"zlma","text":"<pre><code>zlma(series, window=20, min_periods=None, kind='ema')\n</code></pre> <p>John Ehlers' Zero lag (exponential) moving average https://en.wikipedia.org/wiki/Zero_lag_exponential_moving_average</p> Source code in <code>lettrade/indicator/vendor/qtpylib/qtpylib.py</code> <pre><code>def zlma(series, window=20, min_periods=None, kind=\"ema\"):\n    \"\"\"\n    John Ehlers' Zero lag (exponential) moving average\n    https://en.wikipedia.org/wiki/Zero_lag_exponential_moving_average\n    \"\"\"\n    min_periods = window if min_periods is None else min_periods\n\n    lag = (window - 1) // 2\n    series = 2 * series - series.shift(lag)\n    if kind in [\"ewm\", \"ema\"]:\n        return wma(series, lag, min_periods)\n    elif kind == \"hma\":\n        return hma(series, lag, min_periods)\n    return sma(series, lag, min_periods)\n</code></pre>"},{"location":"reference/indicator/vendor/qtpylib/qtpylib/#lettrade.indicator.vendor.qtpylib.qtpylib.zscore","title":"zscore","text":"<pre><code>zscore(bars, window=20, stds=1, col='close')\n</code></pre> <p>get zscore of price</p> Source code in <code>lettrade/indicator/vendor/qtpylib/qtpylib.py</code> <pre><code>def zscore(bars, window=20, stds=1, col=\"close\"):\n    \"\"\"get zscore of price\"\"\"\n    std = numpy_rolling_std(bars[col], window)\n    mean = numpy_rolling_mean(bars[col], window)\n    return (bars[col] - mean) / (std * stds)\n</code></pre>"},{"location":"reference/indicator/volatility/","title":"Index","text":""},{"location":"reference/indicator/volatility/#lettrade.indicator.volatility","title":"volatility","text":""},{"location":"reference/indicator/volatility/atr/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> atr","text":""},{"location":"reference/indicator/volatility/atr/#lettrade.indicator.volatility.atr","title":"atr","text":""},{"location":"reference/indicator/volatility/atr/#lettrade.indicator.volatility.atr.atr","title":"atr","text":"<pre><code>atr(\n    dataframe: DataFrame,\n    window: int = 20,\n    prefix: str = \"\",\n    inplace: bool = False,\n) -&gt; dict[str, Series] | DataFrame\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>dataframe</code>               (<code>DataFrame</code>)           \u2013            <p>description</p> </li> <li> <code>window</code>               (<code>int</code>, default:                   <code>20</code> )           \u2013            <p>description. Defaults to 20.</p> </li> <li> <code>prefix</code>               (<code>str</code>, default:                   <code>''</code> )           \u2013            <p>description. Defaults to \"\".</p> </li> <li> <code>inplace</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>description. Defaults to False.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict[str, Series] | DataFrame</code>           \u2013            <p>dict[str, pd.Series] | pd.DataFrame: description</p> </li> </ul> Source code in <code>lettrade/indicator/volatility/atr.py</code> <pre><code>def atr(\n    dataframe: pd.DataFrame,\n    window: int = 20,\n    prefix: str = \"\",\n    inplace: bool = False,\n) -&gt; dict[str, pd.Series] | pd.DataFrame:\n    \"\"\"_summary_\n\n    Args:\n        dataframe (pd.DataFrame): _description_\n        window (int, optional): _description_. Defaults to 20.\n        prefix (str, optional): _description_. Defaults to \"\".\n        inplace (bool, optional): _description_. Defaults to False.\n\n    Raises:\n        RuntimeError: _description_\n\n    Returns:\n        dict[str, pd.Series] | pd.DataFrame: _description_\n    \"\"\"\n    if __debug__:\n        if not isinstance(dataframe, pd.DataFrame):\n            raise RuntimeError(\n                f\"dataframe type '{type(dataframe)}' \"\n                \"is not instance of pandas.DataFrame\"\n            )\n\n    i = ta.ATR(dataframe, timeperiod=window)\n\n    if inplace:\n        dataframe[f\"{prefix}atr\"] = i\n        return dataframe\n\n    return i\n</code></pre>"},{"location":"reference/indicator/volatility/bollinger_bands/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> bollinger_bands","text":""},{"location":"reference/indicator/volatility/bollinger_bands/#lettrade.indicator.volatility.bollinger_bands","title":"bollinger_bands","text":""},{"location":"reference/indicator/volatility/bollinger_bands/#lettrade.indicator.volatility.bollinger_bands.bollinger_bands","title":"bollinger_bands","text":"<pre><code>bollinger_bands(\n    series: Series | str = \"close\",\n    window: int = 0,\n    std: int | float = 0,\n    ma_mode: Literal[\"ema\", \"sma\"] = \"sma\",\n    dataframe: DataFrame = None,\n    prefix: str = \"bb_\",\n    inplace: bool = False,\n    plot: bool | list = False,\n    plot_kwargs: dict | None = None,\n    **kwargs\n) -&gt; dict[str, Series] | DataFrame\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>series</code>               (<code>Series | str</code>, default:                   <code>'close'</code> )           \u2013            <p>description. Defaults to \"close\".</p> </li> <li> <code>window</code>               (<code>int</code>, default:                   <code>0</code> )           \u2013            <p>description. Defaults to 0.</p> </li> <li> <code>std</code>               (<code>int | float</code>, default:                   <code>0</code> )           \u2013            <p>description. Defaults to 0.</p> </li> <li> <code>ma_mode</code>               (<code>Literal[&amp;quot;ema&amp;quot;, &amp;quot;sma&amp;quot;]</code>, default:                   <code>'sma'</code> )           \u2013            <p>description. Defaults to \"sma\".</p> </li> <li> <code>dataframe</code>               (<code>DataFrame</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>prefix</code>               (<code>str</code>, default:                   <code>'bb_'</code> )           \u2013            <p>description. Defaults to \"bb_\".</p> </li> <li> <code>inplace</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>description. Defaults to False.</p> </li> <li> <code>plot</code>               (<code>bool | list</code>, default:                   <code>False</code> )           \u2013            <p>Flag or list of columns name. Defaults to False.</p> </li> <li> <code>plot_kwargs</code>               (<code>dict | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> Example <pre><code>df.i.bollinger_bands(window=20, std=2.0, inplace=True, plot=True)\n</code></pre> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict[str, Series] | DataFrame</code>           \u2013            <p>dict[str, pd.Series] | pd.DataFrame: description</p> </li> </ul> Source code in <code>lettrade/indicator/volatility/bollinger_bands.py</code> <pre><code>def bollinger_bands(\n    series: pd.Series | str = \"close\",\n    window: int = 0,\n    std: int | float = 0,\n    ma_mode: Literal[\"ema\", \"sma\"] = \"sma\",\n    dataframe: pd.DataFrame = None,\n    prefix: str = \"bb_\",\n    inplace: bool = False,\n    plot: bool | list = False,\n    plot_kwargs: dict | None = None,\n    **kwargs,\n) -&gt; dict[str, pd.Series] | pd.DataFrame:\n    \"\"\"_summary_\n\n    Args:\n        series (pd.Series | str, optional): _description_. Defaults to \"close\".\n        window (int, optional): _description_. Defaults to 0.\n        std (int | float, optional): _description_. Defaults to 0.\n        ma_mode (Literal[&amp;quot;ema&amp;quot;, &amp;quot;sma&amp;quot;], optional): _description_. Defaults to \"sma\".\n        dataframe (pd.DataFrame, optional): _description_. Defaults to None.\n        prefix (str, optional): _description_. Defaults to \"bb_\".\n        inplace (bool, optional): _description_. Defaults to False.\n        plot (bool | list, optional): Flag or list of columns name. Defaults to False.\n        plot_kwargs (dict | None, optional): _description_. Defaults to None.\n\n    Example:\n        ```python\n        df.i.bollinger_bands(window=20, std=2.0, inplace=True, plot=True)\n        ```\n\n    Raises:\n        RuntimeError: _description_\n\n    Returns:\n        dict[str, pd.Series] | pd.DataFrame: _description_\n    \"\"\"\n    if __debug__:\n        if window &lt;= 0:\n            raise RuntimeError(f\"Window {window} is invalid\")\n        if std &lt;= 0:\n            raise RuntimeError(f\"Std {std} is invalid\")\n        if plot and not inplace:\n            raise RuntimeError(\"Cannot plot when inplace=False\")\n\n    series = series_init(series=series, dataframe=dataframe, inplace=inplace)\n\n    i_upper, i_basis, i_lower = ta.BBANDS(\n        series,\n        timeperiod=window,\n        nbdevup=std,\n        nbdevdn=std,\n        matype=talib_ma_mode(ma_mode),\n        **kwargs,\n    )\n\n    # Result is inplace or new dict\n    result = dataframe if inplace else {}\n    result[f\"{prefix}upper\"] = i_upper\n    result[f\"{prefix}basis\"] = i_basis\n    result[f\"{prefix}lower\"] = i_lower\n\n    # Plot\n    if plot:\n        if plot_kwargs is None:\n            plot_kwargs = dict()\n\n        if isinstance(plot, list):\n            if f\"{prefix}upper\" in plot:\n                plot_kwargs.update(upper=f\"{prefix}upper\")\n            if f\"{prefix}basis\" in plot:\n                plot_kwargs.update(basis=f\"{prefix}basis\")\n            if f\"{prefix}lower\" in plot:\n                plot_kwargs.update(lower=f\"{prefix}lower\")\n        else:\n            plot_kwargs.update(\n                upper=f\"{prefix}upper\",\n                basis=f\"{prefix}basis\",\n                lower=f\"{prefix}lower\",\n            )\n\n        from lettrade.indicator.plot import IndicatorPlotter\n        from lettrade.plot.plotly import plot_bollinger_bands\n\n        IndicatorPlotter(\n            dataframe=dataframe,\n            plotter=plot_bollinger_bands,\n            **plot_kwargs,\n        )\n\n    return result\n</code></pre>"},{"location":"reference/indicator/volatility/keltner_channel/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> keltner_channel","text":""},{"location":"reference/indicator/volatility/keltner_channel/#lettrade.indicator.volatility.keltner_channel","title":"keltner_channel","text":""},{"location":"reference/indicator/volatility/keltner_channel/#lettrade.indicator.volatility.keltner_channel.keltner_channel","title":"keltner_channel","text":"<pre><code>keltner_channel(\n    dataframe: DataFrame,\n    ma: int = 20,\n    ma_mode: Literal[\n        \"sma\",\n        \"ema\",\n        \"wma\",\n        \"dema\",\n        \"tema\",\n        \"trima\",\n        \"kama\",\n        \"mama\",\n        \"t3\",\n    ] = \"ema\",\n    atr: int = 20,\n    shift: float = 1.6,\n    prefix: str = \"kc_\",\n    inplace: bool = False,\n    plot: bool | list = False,\n    plot_kwargs: dict | None = None,\n) -&gt; dict[str, Series] | DataFrame\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>dataframe</code>               (<code>DataFrame</code>)           \u2013            <p>description</p> </li> <li> <code>ma</code>               (<code>int</code>, default:                   <code>20</code> )           \u2013            <p>description. Defaults to 20.</p> </li> <li> <code>ma_mode</code>               (<code>Literal['sma', 'ema', 'wma', 'dema', 'tema', 'trima', 'kama', 'mama', 't3']</code>, default:                   <code>'ema'</code> )           \u2013            <p>description. Defaults to \"ema\".</p> </li> <li> <code>atr</code>               (<code>int</code>, default:                   <code>20</code> )           \u2013            <p>description. Defaults to 20.</p> </li> <li> <code>shift</code>               (<code>float</code>, default:                   <code>1.6</code> )           \u2013            <p>description. Defaults to 1.6.</p> </li> <li> <code>prefix</code>               (<code>str</code>, default:                   <code>'kc_'</code> )           \u2013            <p>description. Defaults to \"kc_\".</p> </li> <li> <code>inplace</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>description. Defaults to False.</p> </li> <li> <code>plot</code>               (<code>bool | list</code>, default:                   <code>False</code> )           \u2013            <p>description. Defaults to False.</p> </li> <li> <code>plot_kwargs</code>               (<code>dict | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> Example <pre><code>df.i.keltner_channel(ma=20, atr=20, shift=1.6, inplace=True, plot=True)\n</code></pre> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict[str, Series] | DataFrame</code>           \u2013            <p>dict[str, pd.Series] | pd.DataFrame: {kc_upper, kc_middle, kc_lower}</p> </li> </ul> Source code in <code>lettrade/indicator/volatility/keltner_channel.py</code> <pre><code>def keltner_channel(\n    dataframe: pd.DataFrame,\n    ma: int = 20,\n    ma_mode: Literal[\n        \"sma\", \"ema\", \"wma\", \"dema\", \"tema\", \"trima\", \"kama\", \"mama\", \"t3\"\n    ] = \"ema\",\n    atr: int = 20,\n    shift: float = 1.6,\n    prefix: str = \"kc_\",\n    inplace: bool = False,\n    plot: bool | list = False,\n    plot_kwargs: dict | None = None,\n) -&gt; dict[str, pd.Series] | pd.DataFrame:\n    \"\"\"_summary_\n\n    Args:\n        dataframe (pd.DataFrame): _description_\n        ma (int, optional): _description_. Defaults to 20.\n        ma_mode (Literal[ \"sma\", \"ema\", \"wma\", \"dema\", \"tema\", \"trima\", \"kama\", \"mama\", \"t3\" ], optional): _description_. Defaults to \"ema\".\n        atr (int, optional): _description_. Defaults to 20.\n        shift (float, optional): _description_. Defaults to 1.6.\n        prefix (str, optional): _description_. Defaults to \"kc_\".\n        inplace (bool, optional): _description_. Defaults to False.\n        plot (bool | list, optional): _description_. Defaults to False.\n        plot_kwargs (dict | None, optional): _description_. Defaults to None.\n\n    Example:\n        ```python\n        df.i.keltner_channel(ma=20, atr=20, shift=1.6, inplace=True, plot=True)\n        ```\n\n    Raises:\n        RuntimeError: _description_\n\n    Returns:\n        dict[str, pd.Series] | pd.DataFrame: {kc_upper, kc_middle, kc_lower}\n    \"\"\"\n    if __debug__:\n        if not isinstance(dataframe, pd.DataFrame):\n            raise RuntimeError(\n                f\"dataframe type '{type(dataframe)}' \"\n                \"is not instance of pandas.DataFrame\"\n            )\n        if plot and not inplace:\n            raise RuntimeError(\"Cannot plot when inplace=False\")\n\n    ma_fn = talib_ma(ma_mode)\n    i_basis = ma_fn(dataframe, timeperiod=ma)\n\n    i_atr = ta.ATR(dataframe, timeperiod=atr)\n    i_upper = i_basis + shift * i_atr\n    i_lower = i_basis - shift * i_atr\n\n    # Result is inplace or new dict\n    result = dataframe if inplace else {}\n    result[f\"{prefix}upper\"] = i_upper\n    result[f\"{prefix}basis\"] = i_basis\n    result[f\"{prefix}lower\"] = i_lower\n\n    # Plot\n    if plot:\n        if plot_kwargs is None:\n            plot_kwargs = dict()\n\n        if isinstance(plot, list):\n            if f\"{prefix}upper\" in plot:\n                plot_kwargs.update(upper=f\"{prefix}upper\")\n            if f\"{prefix}basis\" in plot:\n                plot_kwargs.update(basis=f\"{prefix}basis\")\n            if f\"{prefix}lower\" in plot:\n                plot_kwargs.update(lower=f\"{prefix}lower\")\n        else:\n            plot_kwargs.update(\n                upper=f\"{prefix}upper\",\n                basis=f\"{prefix}basis\",\n                lower=f\"{prefix}lower\",\n            )\n\n        from lettrade.indicator.plot import IndicatorPlotter\n        from lettrade.plot.plotly import plot_keltner_channel\n\n        IndicatorPlotter(\n            dataframe=dataframe,\n            plotter=plot_keltner_channel,\n            **plot_kwargs,\n        )\n\n    return result\n</code></pre>"},{"location":"reference/plot/","title":"Index","text":""},{"location":"reference/plot/#lettrade.plot","title":"plot","text":""},{"location":"reference/plot/bot/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> bot","text":""},{"location":"reference/plot/bot/#lettrade.plot.bot","title":"bot","text":""},{"location":"reference/plot/bot/#lettrade.plot.bot.BotPlotter","title":"BotPlotter","text":"<pre><code>BotPlotter(bot: LetTradeBot)\n</code></pre> <p>               Bases: <code>Plotter</code></p> <p>Class help to plot bot result</p> Source code in <code>lettrade/plot/bot.py</code> <pre><code>def __init__(self, bot: \"LetTradeBot\") -&gt; None:\n    self.bot = bot\n    self.feeder = bot.feeder\n    self.exchange = bot.exchange\n    self.account = bot.account\n    self.strategy = bot.strategy\n\n    self.datas = self.feeder.datas\n</code></pre>"},{"location":"reference/plot/bot/#lettrade.plot.bot.BotPlotter.data","title":"data  <code>property</code> <code>writable</code>","text":"<pre><code>data: DataFeed\n</code></pre> <p>Get plotting main datafeed</p> <p>Returns:</p> <ul> <li> <code>DataFeed</code> (              <code>DataFeed</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/plot/bot/#lettrade.plot.bot.BotPlotter.datas","title":"datas  <code>instance-attribute</code>","text":"<pre><code>datas: list[DataFeed] = datas\n</code></pre> <p>All plotting datafeeds</p>"},{"location":"reference/plot/bot/#lettrade.plot.bot.BotPlotter.jump","title":"jump","text":"<pre><code>jump(\n    since: int | str | Timestamp | None = None,\n    order_id: str | None = None,\n    position_id: str | None = None,\n    range: int = 300,\n    name: str | None = None,\n)\n</code></pre> <p>Jump to place on datefeed</p> <p>Parameters:</p> <ul> <li> <code>since</code>               (<code>int | str | Timestamp | None</code>, default:                   <code>None</code> )           \u2013            <p>Jump to index/datetime. Defaults to None.</p> </li> <li> <code>order_id</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>Jump to order id. Defaults to None.</p> </li> <li> <code>position_id</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>Jump to position id. Defaults to None.</p> </li> <li> <code>range</code>               (<code>int</code>, default:                   <code>300</code> )           \u2013            <p>number of candle plot. Defaults to 300.</p> </li> <li> <code>name</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/plot/bot.py</code> <pre><code>def jump(\n    self,\n    since: int | str | pd.Timestamp | None = None,\n    order_id: str | None = None,\n    position_id: str | None = None,\n    range: int = 300,\n    name: str | None = None,\n):\n    \"\"\"Jump to place on datefeed\n\n    Args:\n        since (int | str | pd.Timestamp | None, optional): Jump to index/datetime. Defaults to None.\n        order_id (str | None, optional): Jump to order id. Defaults to None.\n        position_id (str | None, optional): Jump to position id. Defaults to None.\n        range (int, optional): number of candle plot. Defaults to 300.\n        name (str | None, optional): _description_. Defaults to None.\n\n    Raises:\n        RuntimeError: _description_\n    \"\"\"\n    if self._datas_stored is None:\n        self._datas_stored = self.datas.copy()\n\n    if since is None:\n        if order_id is not None:  # Jump to order id\n            if not isinstance(order_id, str):\n                order_id = str(order_id)\n\n            if order_id in self.exchange.orders:\n                order = self.exchange.orders[order_id]\n            elif order_id in self.exchange.history_orders:\n                order = self.exchange.history_orders[order_id]\n            else:\n                raise RuntimeError(f\"Order id {order_id} not found\")\n\n            loc = self._data_stored.l.index.get_loc(order.placed_at)\n            since = loc - int(range / 2)\n\n        elif position_id is not None:  # Jump to position id\n            if not isinstance(position_id, str):\n                position_id = str(position_id)\n\n            if position_id in self.exchange.positions:\n                position = self.exchange.positions[position_id]\n            elif position_id in self.exchange.history_positions:\n                position = self.exchange.history_positions[position_id]\n            else:\n                raise RuntimeError(f\"Position id {position_id} not found\")\n\n            loc = self._data_stored.l.index.get_loc(position.entry_at)\n            since = loc - int(range / 2)\n        else:  # Reset\n            self.jump_reset()\n            return\n\n    elif isinstance(since, str):  # Parse string to pd.Timestamp, then since=index\n        since = pd.to_datetime(since, utc=True)\n        since = self._data_stored.l.index.get_loc(since)\n    elif isinstance(since, pd.Timestamp):  # Get index of Timestamp\n        since = self._data_stored.l.index.get_loc(since)\n\n    if name is None:\n        name = self._data_stored.name\n\n    # Since min at pointer_start\n    if since &lt; self._data_stored.l.pointer_start:\n        since = self._data_stored.l.pointer_start\n    # Since max at pointer_stop\n    if since &gt; self._data_stored.l.pointer_stop - range:\n        since = self._data_stored.l.pointer_stop - range\n\n    # Jump\n    jump_start_dt = None\n    jump_stop_dt = None\n    for i, data in enumerate(self._datas_stored):\n        if i == 0:\n            self.datas[i] = data.__class__(\n                data=data.l[since : since + range],\n                name=data.name,\n                timeframe=data.timeframe,\n            )\n            jump_start_dt = self.data.index[0]\n            jump_stop_dt = self.data.index[-1]\n        else:\n            self.datas[i] = data.__class__(\n                data=data.loc[\n                    (data.index &gt;= jump_start_dt) &amp; (data.index &lt;= jump_stop_dt)\n                ],\n                name=data.name,\n                timeframe=data.timeframe,\n            )\n\n        if hasattr(data, DATAFRAME_PLOTTERS_NAME):\n            object.__setattr__(\n                self.datas[i],\n                DATAFRAME_PLOTTERS_NAME,\n                getattr(data, DATAFRAME_PLOTTERS_NAME),\n            )\n\n    # Reload data\n    self.load()\n</code></pre>"},{"location":"reference/plot/bot/#lettrade.plot.bot.BotPlotter.jump_reset","title":"jump_reset","text":"<pre><code>jump_reset() -&gt; bool\n</code></pre> <p>Reset jump datafeeds back to bot datafeeds</p> Source code in <code>lettrade/plot/bot.py</code> <pre><code>def jump_reset(self) -&gt; bool:\n    \"\"\"Reset jump datafeeds back to bot datafeeds\"\"\"\n    if not self._datas_stored or self.data is self._data_stored:\n        return False\n\n    self.datas = self._datas_stored.copy()\n    return True\n</code></pre>"},{"location":"reference/plot/bot/#lettrade.plot.bot.BotPlotter.load","title":"load  <code>abstractmethod</code>","text":"<pre><code>load()\n</code></pre> <p>Load plot config from <code>Strategy.plot()</code> and setup candlestick/equity</p> Source code in <code>lettrade/plot/plot.py</code> <pre><code>@abstractmethod\ndef load(self):\n    \"\"\"Load plot config from `Strategy.plot()` and setup candlestick/equity\"\"\"\n</code></pre>"},{"location":"reference/plot/bot/#lettrade.plot.bot.BotPlotter.plot","title":"plot  <code>abstractmethod</code>","text":"<pre><code>plot(**kwargs)\n</code></pre> <p>Plot <code>equity</code>, <code>orders</code>, and <code>positions</code> then show</p> Source code in <code>lettrade/plot/plot.py</code> <pre><code>@abstractmethod\ndef plot(self, **kwargs):\n    \"\"\"Plot `equity`, `orders`, and `positions` then show\"\"\"\n</code></pre>"},{"location":"reference/plot/bot/#lettrade.plot.bot.BotPlotter.stop","title":"stop  <code>abstractmethod</code>","text":"<pre><code>stop()\n</code></pre> <p>stop plotter</p> Source code in <code>lettrade/plot/plot.py</code> <pre><code>@abstractmethod\ndef stop(self):\n    \"\"\"stop plotter\"\"\"\n</code></pre>"},{"location":"reference/plot/color/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> color","text":""},{"location":"reference/plot/color/#lettrade.plot.color","title":"color","text":""},{"location":"reference/plot/color/#lettrade.plot.color.PlotColor","title":"PlotColor","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>Enum plot color</p>"},{"location":"reference/plot/color/#lettrade.plot.color.PlotColor.AMBER","title":"AMBER  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>AMBER = '#fa0'\n</code></pre>"},{"location":"reference/plot/color/#lettrade.plot.color.PlotColor.BLUE","title":"BLUE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>BLUE = '#4287ff'\n</code></pre>"},{"location":"reference/plot/color/#lettrade.plot.color.PlotColor.CYAN","title":"CYAN  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>CYAN = '#00bad6'\n</code></pre>"},{"location":"reference/plot/color/#lettrade.plot.color.PlotColor.DEEP_ORANGE","title":"DEEP_ORANGE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>DEEP_ORANGE = '#ff6e42'\n</code></pre>"},{"location":"reference/plot/color/#lettrade.plot.color.PlotColor.DEEP_PURPLE","title":"DEEP_PURPLE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>DEEP_PURPLE = '#7c4dff'\n</code></pre>"},{"location":"reference/plot/color/#lettrade.plot.color.PlotColor.GREEN","title":"GREEN  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>GREEN = '#00c753'\n</code></pre>"},{"location":"reference/plot/color/#lettrade.plot.color.PlotColor.INDIGO","title":"INDIGO  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>INDIGO = '#526cfe'\n</code></pre>"},{"location":"reference/plot/color/#lettrade.plot.color.PlotColor.LIGHT_BLUE","title":"LIGHT_BLUE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LIGHT_BLUE = '#0091eb'\n</code></pre>"},{"location":"reference/plot/color/#lettrade.plot.color.PlotColor.LIGHT_GREEN","title":"LIGHT_GREEN  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LIGHT_GREEN = '#63de17'\n</code></pre>"},{"location":"reference/plot/color/#lettrade.plot.color.PlotColor.LIGHT_PINK","title":"LIGHT_PINK  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LIGHT_PINK = '#f06292'\n</code></pre>"},{"location":"reference/plot/color/#lettrade.plot.color.PlotColor.LIGHT_RED","title":"LIGHT_RED  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LIGHT_RED = '#e6695b'\n</code></pre>"},{"location":"reference/plot/color/#lettrade.plot.color.PlotColor.LIGHT_YELLOW","title":"LIGHT_YELLOW  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LIGHT_YELLOW = '#fff176'\n</code></pre>"},{"location":"reference/plot/color/#lettrade.plot.color.PlotColor.LIME","title":"LIME  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LIME = '#b0eb00'\n</code></pre>"},{"location":"reference/plot/color/#lettrade.plot.color.PlotColor.ORANGE","title":"ORANGE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ORANGE = '#ff9100'\n</code></pre>"},{"location":"reference/plot/color/#lettrade.plot.color.PlotColor.PINK","title":"PINK  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>PINK = '#f50056'\n</code></pre>"},{"location":"reference/plot/color/#lettrade.plot.color.PlotColor.PURPLE","title":"PURPLE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>PURPLE = '#df41fb'\n</code></pre>"},{"location":"reference/plot/color/#lettrade.plot.color.PlotColor.RED","title":"RED  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>RED = '#ff1947'\n</code></pre>"},{"location":"reference/plot/color/#lettrade.plot.color.PlotColor.TEAL","title":"TEAL  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>TEAL = '#00bda4'\n</code></pre>"},{"location":"reference/plot/color/#lettrade.plot.color.PlotColor.YELLOW","title":"YELLOW  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>YELLOW = '#ffd500'\n</code></pre>"},{"location":"reference/plot/helper/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> helper","text":""},{"location":"reference/plot/helper/#lettrade.plot.helper","title":"helper","text":""},{"location":"reference/plot/helper/#lettrade.plot.helper.plot_merge","title":"plot_merge","text":"<pre><code>plot_merge(\n    source: dict,\n    *updates: list[dict],\n    recursive: int = 0,\n    recursive_max: int = 1\n) -&gt; dict\n</code></pre> <p>Merge multiple update plot config to source config</p> <p>Parameters:</p> <ul> <li> <code>source</code>               (<code>dict</code>)           \u2013            <p>description</p> </li> <li> <code>*updates</code>               (<code>list[dict]</code>, default:                   <code>()</code> )           \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict</code> (              <code>dict</code> )          \u2013            <p>Merged config</p> </li> </ul> Source code in <code>lettrade/plot/helper.py</code> <pre><code>def plot_merge(\n    source: dict,\n    *updates: list[dict],\n    recursive: int = 0,\n    recursive_max: int = 1,\n) -&gt; dict:\n    \"\"\"Merge multiple update plot config to source config\n\n    Args:\n        source (dict): _description_\n        *updates (list[dict]): _description_\n\n    Returns:\n        dict: Merged config\n    \"\"\"\n    for update in updates:\n        for key, value in update.items():\n            if key not in source:\n                source[key] = value\n                continue\n\n            if isinstance(source[key], list):\n                source[key].extend(value)\n                continue\n            if isinstance(source[key], dict):\n                if recursive &gt;= recursive_max:\n                    source[key] = value\n                    continue\n\n                sub = source[key]\n                plot_merge(\n                    sub,\n                    value,\n                    recursive=recursive + 1,\n                    recursive_max=recursive_max,\n                )\n                continue\n    return source\n</code></pre>"},{"location":"reference/plot/plot/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> plot","text":""},{"location":"reference/plot/plot/#lettrade.plot.plot","title":"plot","text":""},{"location":"reference/plot/plot/#lettrade.plot.plot.Plotter","title":"Plotter","text":"<p>               Bases: <code>ABC</code></p> <p>Base class help to plot strategy</p>"},{"location":"reference/plot/plot/#lettrade.plot.plot.Plotter.load","title":"load  <code>abstractmethod</code>","text":"<pre><code>load()\n</code></pre> <p>Load plot config from <code>Strategy.plot()</code> and setup candlestick/equity</p> Source code in <code>lettrade/plot/plot.py</code> <pre><code>@abstractmethod\ndef load(self):\n    \"\"\"Load plot config from `Strategy.plot()` and setup candlestick/equity\"\"\"\n</code></pre>"},{"location":"reference/plot/plot/#lettrade.plot.plot.Plotter.plot","title":"plot  <code>abstractmethod</code>","text":"<pre><code>plot(**kwargs)\n</code></pre> <p>Plot <code>equity</code>, <code>orders</code>, and <code>positions</code> then show</p> Source code in <code>lettrade/plot/plot.py</code> <pre><code>@abstractmethod\ndef plot(self, **kwargs):\n    \"\"\"Plot `equity`, `orders`, and `positions` then show\"\"\"\n</code></pre>"},{"location":"reference/plot/plot/#lettrade.plot.plot.Plotter.stop","title":"stop  <code>abstractmethod</code>","text":"<pre><code>stop()\n</code></pre> <p>stop plotter</p> Source code in <code>lettrade/plot/plot.py</code> <pre><code>@abstractmethod\ndef stop(self):\n    \"\"\"stop plotter\"\"\"\n</code></pre>"},{"location":"reference/plot/plotly/","title":"Index","text":""},{"location":"reference/plot/plotly/#lettrade.plot.plotly","title":"plotly","text":""},{"location":"reference/plot/plotly/indicator/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> indicator","text":""},{"location":"reference/plot/plotly/indicator/#lettrade.plot.plotly.indicator","title":"indicator","text":""},{"location":"reference/plot/plotly/indicator/#lettrade.plot.plotly.indicator.plot_bollinger_bands","title":"plot_bollinger_bands","text":"<pre><code>plot_bollinger_bands(\n    dataframe: DataFrame,\n    upper: str | None = \"upper\",\n    basis: str | None = \"basis\",\n    lower: str | None = \"lower\",\n    width: int = 1,\n    upper_color: str = \"#33BDFF\",\n    basis_color: str = \"#D105F5\",\n    lower_color: str = \"#33BDFF\",\n    filter: Series | None = None,\n) -&gt; dict\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>dataframe</code>               (<code>DataFrame</code>)           \u2013            <p>description</p> </li> <li> <code>upper</code>               (<code>str</code>, default:                   <code>'upper'</code> )           \u2013            <p>Column name. <code>None</code> mean skip plot. Defaults to \"upper\".</p> </li> <li> <code>basis</code>               (<code>str</code>, default:                   <code>'basis'</code> )           \u2013            <p>Column name. <code>None</code> mean skip plot. Defaults to \"basis\".</p> </li> <li> <code>lower</code>               (<code>str</code>, default:                   <code>'lower'</code> )           \u2013            <p>Column name. <code>None</code> mean skip plot. Defaults to \"lower\".</p> </li> <li> <code>width</code>               (<code>int</code>, default:                   <code>1</code> )           \u2013            <p>description. Defaults to 1.</p> </li> <li> <code>upper_color</code>               (<code>str</code>, default:                   <code>'#33BDFF'</code> )           \u2013            <p>Color code. Defaults to \"#33BDFF\".</p> </li> <li> <code>lower_color</code>               (<code>str</code>, default:                   <code>'#33BDFF'</code> )           \u2013            <p>Color code. Defaults to \"#33BDFF\".</p> </li> <li> <code>basis_color</code>               (<code>str</code>, default:                   <code>'#D105F5'</code> )           \u2013            <p>Color code. Defaults to \"#D105F5\".</p> </li> <li> <code>filter</code>               (<code>Series | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict</code> (              <code>dict</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/plot/plotly/indicator.py</code> <pre><code>def plot_bollinger_bands(\n    dataframe: pd.DataFrame,\n    upper: str | None = \"upper\",\n    basis: str | None = \"basis\",\n    lower: str | None = \"lower\",\n    width: int = 1,\n    upper_color: str = \"#33BDFF\",\n    basis_color: str = \"#D105F5\",\n    lower_color: str = \"#33BDFF\",\n    filter: pd.Series | None = None,\n) -&gt; dict:\n    \"\"\"_summary_\n\n    Args:\n        dataframe (pd.DataFrame): _description_\n        upper (str, optional): Column name. `None` mean skip plot. Defaults to \"upper\".\n        basis (str, optional): Column name. `None` mean skip plot. Defaults to \"basis\".\n        lower (str, optional): Column name. `None` mean skip plot. Defaults to \"lower\".\n        width (int, optional): _description_. Defaults to 1.\n        upper_color (str, optional): Color code. Defaults to \"#33BDFF\".\n        lower_color (str, optional): Color code. Defaults to \"#33BDFF\".\n        basis_color (str, optional): Color code. Defaults to \"#D105F5\".\n        filter (pd.Series | None, optional): _description_. Defaults to None.\n\n    Returns:\n        dict: _description_\n    \"\"\"\n    if filter is not None:\n        df_name = dataframe.name\n        dataframe = dataframe.loc[filter]\n        object.__setattr__(dataframe, \"name\", df_name)\n\n    items = []\n\n    if upper is not None:\n        items.append(\n            dict(\n                type=\"scatter\",\n                x=dataframe.index,\n                y=dataframe[upper],\n                name=upper,\n                mode=\"lines\",\n                line=dict(color=upper_color, width=width),\n            )\n        )\n    if basis is not None:\n        items.append(\n            dict(\n                type=\"scatter\",\n                x=dataframe.index,\n                y=dataframe[basis],\n                name=basis,\n                mode=\"lines\",\n                line=dict(color=basis_color, width=width),\n            )\n        )\n    if lower is not None:\n        items.append(\n            dict(\n                type=\"scatter\",\n                x=dataframe.index,\n                y=dataframe[lower],\n                name=lower,\n                mode=\"lines\",\n                line=dict(color=lower_color, width=width),\n            )\n        )\n    return {f\"{dataframe.name}\": dict(items=items)}\n</code></pre>"},{"location":"reference/plot/plotly/indicator/#lettrade.plot.plotly.indicator.plot_candlestick","title":"plot_candlestick","text":"<pre><code>plot_candlestick(\n    dataframe: DataFrame,\n    name: str = \"Candlestick\",\n    width: int = 1,\n    increasing_line_color=\"#26c6da\",\n    decreasing_line_color=\"#ab47bc\",\n    row: int = 1,\n    col: int = 1,\n    filter: Series | None = None,\n    **kwargs\n) -&gt; dict\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>dataframe</code>               (<code>DataFrame</code>)           \u2013            <p>description</p> </li> <li> <code>name</code>               (<code>str</code>, default:                   <code>'Candlestick'</code> )           \u2013            <p>description. Defaults to \"Candlestick\".</p> </li> <li> <code>width</code>               (<code>int</code>, default:                   <code>1</code> )           \u2013            <p>description. Defaults to 1.</p> </li> <li> <code>increasing_line_color</code>               (<code>str</code>, default:                   <code>'#26c6da'</code> )           \u2013            <p>description. Defaults to \"#26c6da\".</p> </li> <li> <code>decreasing_line_color</code>               (<code>str</code>, default:                   <code>'#ab47bc'</code> )           \u2013            <p>description. Defaults to \"#ab47bc\".</p> </li> <li> <code>row</code>               (<code>int</code>, default:                   <code>1</code> )           \u2013            <p>description. Defaults to 1.</p> </li> <li> <code>col</code>               (<code>int</code>, default:                   <code>1</code> )           \u2013            <p>description. Defaults to 1.</p> </li> <li> <code>filter</code>               (<code>Series | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict</code> (              <code>dict</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/plot/plotly/indicator.py</code> <pre><code>def plot_candlestick(\n    dataframe: pd.DataFrame,\n    name: str = \"Candlestick\",\n    width: int = 1,\n    increasing_line_color=\"#26c6da\",\n    decreasing_line_color=\"#ab47bc\",\n    row: int = 1,\n    col: int = 1,\n    filter: pd.Series | None = None,\n    **kwargs,\n) -&gt; dict:\n    \"\"\"_summary_\n\n    Args:\n        dataframe (pd.DataFrame): _description_\n        name (str, optional): _description_. Defaults to \"Candlestick\".\n        width (int, optional): _description_. Defaults to 1.\n        increasing_line_color (str, optional): _description_. Defaults to \"#26c6da\".\n        decreasing_line_color (str, optional): _description_. Defaults to \"#ab47bc\".\n        row (int, optional): _description_. Defaults to 1.\n        col (int, optional): _description_. Defaults to 1.\n        filter (pd.Series | None, optional): _description_. Defaults to None.\n\n    Returns:\n        dict: _description_\n    \"\"\"\n    if filter is not None:\n        df_name = dataframe.name\n        dataframe = dataframe.loc[filter]\n        object.__setattr__(dataframe, \"name\", df_name)\n\n    config = dict(\n        items=[\n            dict(\n                type=\"candlestick\",\n                x=dataframe.index,\n                open=dataframe[\"open\"],\n                high=dataframe[\"high\"],\n                low=dataframe[\"low\"],\n                close=dataframe[\"close\"],\n                name=name,\n                line=dict(width=width),\n                increasing_line_color=increasing_line_color,\n                decreasing_line_color=decreasing_line_color,\n                hoverinfo=\"text\",\n                hovertext=name,\n                row=row,\n                col=col,\n                **kwargs,\n            ),\n        ]\n    )\n\n    return {f\"{dataframe.name}\": config}\n</code></pre>"},{"location":"reference/plot/plotly/indicator/#lettrade.plot.plotly.indicator.plot_ichimoku","title":"plot_ichimoku","text":"<pre><code>plot_ichimoku(\n    dataframe: DataFrame,\n    tenkan_sen=\"tenkan_sen\",\n    kijun_sen=\"kijun_sen\",\n    senkou_span_a=\"senkou_span_a\",\n    senkou_span_b=\"senkou_span_b\",\n    chikou_span=\"chikou_span\",\n    width=1,\n    tenkan_sen_color=\"#33BDFF\",\n    kijun_sen_color=\"#D105F5\",\n    senkou_span_a_color=\"#228B22\",\n    senkou_span_b_color=\"#FF3342\",\n    chikou_span_color=\"#F1F316\",\n    filter: Series | None = None,\n) -&gt; dict\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>dataframe</code>               (<code>DataFrame</code>)           \u2013            <p>description</p> </li> <li> <code>tenkan_sen</code>               (<code>str</code>, default:                   <code>'tenkan_sen'</code> )           \u2013            <p>description. Defaults to \"tenkan_sen\".</p> </li> <li> <code>kijun_sen</code>               (<code>str</code>, default:                   <code>'kijun_sen'</code> )           \u2013            <p>description. Defaults to \"kijun_sen\".</p> </li> <li> <code>senkou_span_a</code>               (<code>str</code>, default:                   <code>'senkou_span_a'</code> )           \u2013            <p>description. Defaults to \"senkou_span_a\".</p> </li> <li> <code>senkou_span_b</code>               (<code>str</code>, default:                   <code>'senkou_span_b'</code> )           \u2013            <p>description. Defaults to \"senkou_span_b\".</p> </li> <li> <code>chikou_span</code>               (<code>str</code>, default:                   <code>'chikou_span'</code> )           \u2013            <p>description. Defaults to \"chikou_span\".</p> </li> <li> <code>width</code>               (<code>int</code>, default:                   <code>1</code> )           \u2013            <p>description. Defaults to 1.</p> </li> <li> <code>tenkan_sen_color</code>               (<code>str</code>, default:                   <code>'#33BDFF'</code> )           \u2013            <p>description. Defaults to \"#33BDFF\".</p> </li> <li> <code>kijun_sen_color</code>               (<code>str</code>, default:                   <code>'#D105F5'</code> )           \u2013            <p>description. Defaults to \"#D105F5\".</p> </li> <li> <code>senkou_span_a_color</code>               (<code>str</code>, default:                   <code>'#228B22'</code> )           \u2013            <p>description. Defaults to \"#228B22\".</p> </li> <li> <code>senkou_span_b_color</code>               (<code>str</code>, default:                   <code>'#FF3342'</code> )           \u2013            <p>description. Defaults to \"#FF3342\".</p> </li> <li> <code>chikou_span_color</code>               (<code>str</code>, default:                   <code>'#F1F316'</code> )           \u2013            <p>description. Defaults to \"#F1F316\".</p> </li> <li> <code>filter</code>               (<code>Series | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict</code> (              <code>dict</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/plot/plotly/indicator.py</code> <pre><code>def plot_ichimoku(\n    dataframe: pd.DataFrame,\n    tenkan_sen=\"tenkan_sen\",\n    kijun_sen=\"kijun_sen\",\n    senkou_span_a=\"senkou_span_a\",\n    senkou_span_b=\"senkou_span_b\",\n    chikou_span=\"chikou_span\",\n    width=1,\n    tenkan_sen_color=\"#33BDFF\",\n    kijun_sen_color=\"#D105F5\",\n    senkou_span_a_color=\"#228B22\",\n    senkou_span_b_color=\"#FF3342\",\n    chikou_span_color=\"#F1F316\",\n    filter: pd.Series | None = None,\n) -&gt; dict:\n    \"\"\"_summary_\n\n    Args:\n        dataframe (pd.DataFrame): _description_\n        tenkan_sen (str, optional): _description_. Defaults to \"tenkan_sen\".\n        kijun_sen (str, optional): _description_. Defaults to \"kijun_sen\".\n        senkou_span_a (str, optional): _description_. Defaults to \"senkou_span_a\".\n        senkou_span_b (str, optional): _description_. Defaults to \"senkou_span_b\".\n        chikou_span (str, optional): _description_. Defaults to \"chikou_span\".\n        width (int, optional): _description_. Defaults to 1.\n        tenkan_sen_color (str, optional): _description_. Defaults to \"#33BDFF\".\n        kijun_sen_color (str, optional): _description_. Defaults to \"#D105F5\".\n        senkou_span_a_color (str, optional): _description_. Defaults to \"#228B22\".\n        senkou_span_b_color (str, optional): _description_. Defaults to \"#FF3342\".\n        chikou_span_color (str, optional): _description_. Defaults to \"#F1F316\".\n        filter (pd.Series | None, optional): _description_. Defaults to None.\n\n    Returns:\n        dict: _description_\n    \"\"\"\n    if filter is not None:\n        df_name = dataframe.name\n        dataframe = dataframe.loc[filter]\n        object.__setattr__(dataframe, \"name\", df_name)\n\n    items = []\n\n    if tenkan_sen is not None:\n        items.append(\n            dict(\n                type=\"scatter\",\n                x=dataframe.index,\n                y=dataframe[tenkan_sen],\n                name=tenkan_sen,\n                mode=\"lines\",\n                line=dict(color=tenkan_sen_color, width=width),\n            )\n        )\n    if kijun_sen is not None:\n        items.append(\n            dict(\n                type=\"scatter\",\n                x=dataframe.index,\n                y=dataframe[kijun_sen],\n                name=kijun_sen,\n                mode=\"lines\",\n                line=dict(color=kijun_sen_color, width=width),\n            )\n        )\n    if senkou_span_a is not None:\n        items.append(\n            dict(\n                type=\"scatter\",\n                x=dataframe.index,\n                y=dataframe[senkou_span_a],\n                name=senkou_span_a,\n                mode=\"lines\",\n                line=dict(color=senkou_span_a_color, width=width),\n            )\n        )\n    if senkou_span_b is not None:\n        items.append(\n            dict(\n                type=\"scatter\",\n                x=dataframe.index,\n                y=dataframe[senkou_span_b],\n                name=senkou_span_b,\n                mode=\"lines\",\n                fill=\"tonexty\",\n                line=dict(color=senkou_span_b_color, width=width),\n            )\n        )\n    if chikou_span is not None:\n        items.append(\n            dict(\n                type=\"scatter\",\n                x=dataframe.index,\n                y=dataframe[chikou_span],\n                name=chikou_span,\n                mode=\"lines\",\n                line=dict(color=chikou_span_color, width=width),\n            )\n        )\n\n    return {f\"{dataframe.name}\": dict(items=items)}\n</code></pre>"},{"location":"reference/plot/plotly/indicator/#lettrade.plot.plotly.indicator.plot_line","title":"plot_line","text":"<pre><code>plot_line(\n    series: Series | str,\n    color: str = \"#ffee58\",\n    width: int = 1,\n    name: str | None = None,\n    mode: str = \"lines\",\n    fullfill: bool = False,\n    dataframe: DataFrame | None = None,\n    filter: Series | None = None,\n    **kwargs\n) -&gt; dict\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>series</code>               (<code>Series | str</code>)           \u2013            <p>description</p> </li> <li> <code>color</code>               (<code>str</code>, default:                   <code>'#ffee58'</code> )           \u2013            <p>description. Defaults to \"#ffee58\".</p> </li> <li> <code>width</code>               (<code>int</code>, default:                   <code>1</code> )           \u2013            <p>description. Defaults to 1.</p> </li> <li> <code>name</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>mode</code>               (<code>str</code>, default:                   <code>'lines'</code> )           \u2013            <p>description. Defaults to \"lines\".</p> </li> <li> <code>fullfill</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>description. Defaults to False.</p> </li> <li> <code>dataframe</code>               (<code>DataFrame | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>filter</code>               (<code>Series | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict</code> (              <code>dict</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/plot/plotly/indicator.py</code> <pre><code>def plot_line(\n    series: pd.Series | str,\n    color: str = \"#ffee58\",\n    width: int = 1,\n    name: str | None = None,\n    mode: str = \"lines\",\n    fullfill: bool = False,\n    dataframe: pd.DataFrame | None = None,\n    filter: pd.Series | None = None,\n    **kwargs,\n) -&gt; dict:\n    \"\"\"_summary_\n\n    Args:\n        series (pd.Series | str): _description_\n        color (str, optional): _description_. Defaults to \"#ffee58\".\n        width (int, optional): _description_. Defaults to 1.\n        name (str | None, optional): _description_. Defaults to None.\n        mode (str, optional): _description_. Defaults to \"lines\".\n        fullfill (bool, optional): _description_. Defaults to False.\n        dataframe (pd.DataFrame | None, optional): _description_. Defaults to None.\n        filter (pd.Series | None, optional): _description_. Defaults to None.\n\n    Returns:\n        dict: _description_\n    \"\"\"\n    if isinstance(series, str):\n        series = dataframe[series]\n\n    if filter is not None:\n        series = series.loc[filter]\n\n    config = dict(\n        items=[\n            dict(\n                type=\"scatter\",\n                x=series.index,\n                y=series,\n                line=dict(color=color, width=width),\n                name=name or series.name,\n                mode=mode,\n                fullfill=fullfill,\n                **kwargs,\n            )\n        ]\n    )\n    if dataframe is None:\n        return config\n\n    return {f\"{dataframe.name}\": config}\n</code></pre>"},{"location":"reference/plot/plotly/indicator/#lettrade.plot.plotly.indicator.plot_lines","title":"plot_lines","text":"<pre><code>plot_lines(\n    *serieses: list[Series | str],\n    color: str = \"#ffee58\",\n    width: int = 1,\n    name: str | None = None,\n    mode: str = \"lines\",\n    fullfill: bool = False,\n    dataframe: DataFrame | None = None,\n    **kwargs\n) -&gt; dict\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>color</code>               (<code>str</code>, default:                   <code>'#ffee58'</code> )           \u2013            <p>description. Defaults to \"#ffee58\".</p> </li> <li> <code>width</code>               (<code>int</code>, default:                   <code>1</code> )           \u2013            <p>description. Defaults to 1.</p> </li> <li> <code>name</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>mode</code>               (<code>str</code>, default:                   <code>'lines'</code> )           \u2013            <p>description. Defaults to \"lines\".</p> </li> <li> <code>fullfill</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>description. Defaults to False.</p> </li> <li> <code>dataframe</code>               (<code>DataFrame | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict</code> (              <code>dict</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/plot/plotly/indicator.py</code> <pre><code>def plot_lines(\n    *serieses: list[pd.Series | str],\n    color: str = \"#ffee58\",\n    width: int = 1,\n    name: str | None = None,\n    mode: str = \"lines\",\n    fullfill: bool = False,\n    dataframe: pd.DataFrame | None = None,\n    **kwargs,\n) -&gt; dict:\n    \"\"\"_summary_\n\n    Args:\n        color (str, optional): _description_. Defaults to \"#ffee58\".\n        width (int, optional): _description_. Defaults to 1.\n        name (str | None, optional): _description_. Defaults to None.\n        mode (str, optional): _description_. Defaults to \"lines\".\n        fullfill (bool, optional): _description_. Defaults to False.\n        dataframe (pd.DataFrame | None, optional): _description_. Defaults to None.\n\n    Returns:\n        dict: _description_\n    \"\"\"\n    result = {}\n    for series in serieses:\n        plot_merge(\n            result,\n            plot_line(\n                series=series,\n                color=color,\n                width=width,\n                name=name,\n                mode=mode,\n                fullfill=fullfill,\n                dataframe=dataframe,\n                **kwargs,\n            ),\n        )\n    return result\n</code></pre>"},{"location":"reference/plot/plotly/indicator/#lettrade.plot.plotly.indicator.plot_mark","title":"plot_mark","text":"<pre><code>plot_mark(\n    series: Series | str,\n    color: str = \"#ffee58\",\n    width: int = 1,\n    mode: str = \"markers\",\n    name: str | None = None,\n    fullfill: bool = False,\n    dataframe: DataFrame | None = None,\n    filter: Series | None = None,\n    **kwargs\n) -&gt; dict\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>series</code>               (<code>Series | str</code>)           \u2013            <p>description</p> </li> <li> <code>color</code>               (<code>str</code>, default:                   <code>'#ffee58'</code> )           \u2013            <p>description. Defaults to \"#ffee58\".</p> </li> <li> <code>width</code>               (<code>int</code>, default:                   <code>1</code> )           \u2013            <p>description. Defaults to 1.</p> </li> <li> <code>mode</code>               (<code>str</code>, default:                   <code>'markers'</code> )           \u2013            <p>description. Defaults to \"markers\".</p> </li> <li> <code>name</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>fullfill</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>description. Defaults to False.</p> </li> <li> <code>dataframe</code>               (<code>DataFrame | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>filter</code>               (<code>Series | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict</code> (              <code>dict</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/plot/plotly/indicator.py</code> <pre><code>def plot_mark(\n    series: pd.Series | str,\n    color: str = \"#ffee58\",\n    width: int = 1,\n    mode: str = \"markers\",\n    name: str | None = None,\n    fullfill: bool = False,\n    dataframe: pd.DataFrame | None = None,\n    filter: pd.Series | None = None,\n    **kwargs,\n) -&gt; dict:\n    \"\"\"_summary_\n\n    Args:\n        series (pd.Series | str): _description_\n        color (str, optional): _description_. Defaults to \"#ffee58\".\n        width (int, optional): _description_. Defaults to 1.\n        mode (str, optional): _description_. Defaults to \"markers\".\n        name (str | None, optional): _description_. Defaults to None.\n        fullfill (bool, optional): _description_. Defaults to False.\n        dataframe (pd.DataFrame | None, optional): _description_. Defaults to None.\n        filter (pd.Series | None, optional): _description_. Defaults to None.\n\n    Returns:\n        dict: _description_\n    \"\"\"\n\n    return plot_line(\n        series=series,\n        color=color,\n        width=width,\n        mode=mode,\n        name=name,\n        fullfill=fullfill,\n        dataframe=dataframe,\n        filter=filter,\n        **kwargs,\n    )\n</code></pre>"},{"location":"reference/plot/plotly/indicator/#lettrade.plot.plotly.indicator.plot_parabolic_sar","title":"plot_parabolic_sar","text":"<pre><code>plot_parabolic_sar(\n    dataframe: DataFrame,\n    long: str | None = \"long\",\n    short: str | None = \"short\",\n    width: int = 1,\n    long_color: str = \"#33BDFF\",\n    short_color: str = \"#D105F5\",\n    filter: Series | None = None,\n) -&gt; dict\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>dataframe</code>               (<code>DataFrame</code>)           \u2013            <p>description</p> </li> <li> <code>long</code>               (<code>str | None</code>, default:                   <code>'long'</code> )           \u2013            <p>description. Defaults to \"long\".</p> </li> <li> <code>short</code>               (<code>str | None</code>, default:                   <code>'short'</code> )           \u2013            <p>description. Defaults to \"short\".</p> </li> <li> <code>width</code>               (<code>int</code>, default:                   <code>1</code> )           \u2013            <p>description. Defaults to 1.</p> </li> <li> <code>long_color</code>               (<code>str</code>, default:                   <code>'#33BDFF'</code> )           \u2013            <p>description. Defaults to \"#33BDFF\".</p> </li> <li> <code>short_color</code>               (<code>str</code>, default:                   <code>'#D105F5'</code> )           \u2013            <p>description. Defaults to \"#D105F5\".</p> </li> <li> <code>filter</code>               (<code>Series | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict</code> (              <code>dict</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/plot/plotly/indicator.py</code> <pre><code>def plot_parabolic_sar(\n    dataframe: pd.DataFrame,\n    long: str | None = \"long\",\n    short: str | None = \"short\",\n    width: int = 1,\n    long_color: str = \"#33BDFF\",\n    short_color: str = \"#D105F5\",\n    filter: pd.Series | None = None,\n) -&gt; dict:\n    \"\"\"_summary_\n\n    Args:\n        dataframe (pd.DataFrame): _description_\n        long (str | None, optional): _description_. Defaults to \"long\".\n        short (str | None, optional): _description_. Defaults to \"short\".\n        width (int, optional): _description_. Defaults to 1.\n        long_color (str, optional): _description_. Defaults to \"#33BDFF\".\n        short_color (str, optional): _description_. Defaults to \"#D105F5\".\n        filter (pd.Series | None, optional): _description_. Defaults to None.\n\n    Returns:\n        dict: _description_\n    \"\"\"\n    if filter is not None:\n        df_name = dataframe.name\n        dataframe = dataframe.loc[filter]\n        object.__setattr__(dataframe, \"name\", df_name)\n\n    config = dict()\n\n    if long is not None:\n        plot_merge(\n            config,\n            plot_mark(\n                series=long,\n                color=long_color,\n                name=\"psar_long\",\n                width=width,\n                dataframe=dataframe,\n            ),\n        )\n    if short is not None:\n        plot_merge(\n            config,\n            plot_mark(\n                series=short,\n                color=short_color,\n                name=\"psar_short\",\n                width=width,\n                dataframe=dataframe,\n            ),\n        )\n    return config\n</code></pre>"},{"location":"reference/plot/plotly/plotly/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> plotly","text":""},{"location":"reference/plot/plotly/plotly/#lettrade.plot.plotly.plotly","title":"plotly","text":""},{"location":"reference/plot/plotly/plotly/#lettrade.plot.plotly.plotly.PlotlyBotPlotter","title":"PlotlyBotPlotter","text":"<pre><code>PlotlyBotPlotter(bot: LetTradeBot)\n</code></pre> <p>               Bases: <code>BotPlotter</code></p> <p>Class help to plot <code>lettrade</code></p> Source code in <code>lettrade/plot/bot.py</code> <pre><code>def __init__(self, bot: \"LetTradeBot\") -&gt; None:\n    self.bot = bot\n    self.feeder = bot.feeder\n    self.exchange = bot.exchange\n    self.account = bot.account\n    self.strategy = bot.strategy\n\n    self.datas = self.feeder.datas\n</code></pre>"},{"location":"reference/plot/plotly/plotly/#lettrade.plot.plotly.plotly.PlotlyBotPlotter.data","title":"data  <code>property</code> <code>writable</code>","text":"<pre><code>data: DataFeed\n</code></pre> <p>Get plotting main datafeed</p> <p>Returns:</p> <ul> <li> <code>DataFeed</code> (              <code>DataFeed</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/plot/plotly/plotly/#lettrade.plot.plotly.plotly.PlotlyBotPlotter.datas","title":"datas  <code>instance-attribute</code>","text":"<pre><code>datas: list[DataFeed] = datas\n</code></pre> <p>All plotting datafeeds</p>"},{"location":"reference/plot/plotly/plotly/#lettrade.plot.plotly.plotly.PlotlyBotPlotter.jump","title":"jump","text":"<pre><code>jump(\n    since: int | str | Timestamp | None = None,\n    order_id: str | None = None,\n    position_id: str | None = None,\n    range: int = 300,\n    name: str | None = None,\n)\n</code></pre> <p>Jump to place on datefeed</p> <p>Parameters:</p> <ul> <li> <code>since</code>               (<code>int | str | Timestamp | None</code>, default:                   <code>None</code> )           \u2013            <p>Jump to index/datetime. Defaults to None.</p> </li> <li> <code>order_id</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>Jump to order id. Defaults to None.</p> </li> <li> <code>position_id</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>Jump to position id. Defaults to None.</p> </li> <li> <code>range</code>               (<code>int</code>, default:                   <code>300</code> )           \u2013            <p>number of candle plot. Defaults to 300.</p> </li> <li> <code>name</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/plot/bot.py</code> <pre><code>def jump(\n    self,\n    since: int | str | pd.Timestamp | None = None,\n    order_id: str | None = None,\n    position_id: str | None = None,\n    range: int = 300,\n    name: str | None = None,\n):\n    \"\"\"Jump to place on datefeed\n\n    Args:\n        since (int | str | pd.Timestamp | None, optional): Jump to index/datetime. Defaults to None.\n        order_id (str | None, optional): Jump to order id. Defaults to None.\n        position_id (str | None, optional): Jump to position id. Defaults to None.\n        range (int, optional): number of candle plot. Defaults to 300.\n        name (str | None, optional): _description_. Defaults to None.\n\n    Raises:\n        RuntimeError: _description_\n    \"\"\"\n    if self._datas_stored is None:\n        self._datas_stored = self.datas.copy()\n\n    if since is None:\n        if order_id is not None:  # Jump to order id\n            if not isinstance(order_id, str):\n                order_id = str(order_id)\n\n            if order_id in self.exchange.orders:\n                order = self.exchange.orders[order_id]\n            elif order_id in self.exchange.history_orders:\n                order = self.exchange.history_orders[order_id]\n            else:\n                raise RuntimeError(f\"Order id {order_id} not found\")\n\n            loc = self._data_stored.l.index.get_loc(order.placed_at)\n            since = loc - int(range / 2)\n\n        elif position_id is not None:  # Jump to position id\n            if not isinstance(position_id, str):\n                position_id = str(position_id)\n\n            if position_id in self.exchange.positions:\n                position = self.exchange.positions[position_id]\n            elif position_id in self.exchange.history_positions:\n                position = self.exchange.history_positions[position_id]\n            else:\n                raise RuntimeError(f\"Position id {position_id} not found\")\n\n            loc = self._data_stored.l.index.get_loc(position.entry_at)\n            since = loc - int(range / 2)\n        else:  # Reset\n            self.jump_reset()\n            return\n\n    elif isinstance(since, str):  # Parse string to pd.Timestamp, then since=index\n        since = pd.to_datetime(since, utc=True)\n        since = self._data_stored.l.index.get_loc(since)\n    elif isinstance(since, pd.Timestamp):  # Get index of Timestamp\n        since = self._data_stored.l.index.get_loc(since)\n\n    if name is None:\n        name = self._data_stored.name\n\n    # Since min at pointer_start\n    if since &lt; self._data_stored.l.pointer_start:\n        since = self._data_stored.l.pointer_start\n    # Since max at pointer_stop\n    if since &gt; self._data_stored.l.pointer_stop - range:\n        since = self._data_stored.l.pointer_stop - range\n\n    # Jump\n    jump_start_dt = None\n    jump_stop_dt = None\n    for i, data in enumerate(self._datas_stored):\n        if i == 0:\n            self.datas[i] = data.__class__(\n                data=data.l[since : since + range],\n                name=data.name,\n                timeframe=data.timeframe,\n            )\n            jump_start_dt = self.data.index[0]\n            jump_stop_dt = self.data.index[-1]\n        else:\n            self.datas[i] = data.__class__(\n                data=data.loc[\n                    (data.index &gt;= jump_start_dt) &amp; (data.index &lt;= jump_stop_dt)\n                ],\n                name=data.name,\n                timeframe=data.timeframe,\n            )\n\n        if hasattr(data, DATAFRAME_PLOTTERS_NAME):\n            object.__setattr__(\n                self.datas[i],\n                DATAFRAME_PLOTTERS_NAME,\n                getattr(data, DATAFRAME_PLOTTERS_NAME),\n            )\n\n    # Reload data\n    self.load()\n</code></pre>"},{"location":"reference/plot/plotly/plotly/#lettrade.plot.plotly.plotly.PlotlyBotPlotter.jump_reset","title":"jump_reset","text":"<pre><code>jump_reset() -&gt; bool\n</code></pre> <p>Reset jump datafeeds back to bot datafeeds</p> Source code in <code>lettrade/plot/bot.py</code> <pre><code>def jump_reset(self) -&gt; bool:\n    \"\"\"Reset jump datafeeds back to bot datafeeds\"\"\"\n    if not self._datas_stored or self.data is self._data_stored:\n        return False\n\n    self.datas = self._datas_stored.copy()\n    return True\n</code></pre>"},{"location":"reference/plot/plotly/plotly/#lettrade.plot.plotly.plotly.PlotlyBotPlotter.load","title":"load","text":"<pre><code>load()\n</code></pre> <p>Load plot config from <code>Strategy.plot()</code> and setup candlestick/equity</p> Source code in <code>lettrade/plot/plotly/plotly.py</code> <pre><code>def load(self):\n    \"\"\"Load plot config from `Strategy.plot()` and setup candlestick/equity\"\"\"\n\n    config = self._config_default()\n    config = self._config_strategy(config)\n    config = self._config_standard(config)\n\n    params: dict = config.setdefault(\"params\", dict())\n    self.figure = make_subplots(**params)\n\n    self._plot_config(config)\n\n    self.figure.update_layout(**config[\"layout\"])\n</code></pre>"},{"location":"reference/plot/plotly/plotly/#lettrade.plot.plotly.plotly.PlotlyBotPlotter.plot","title":"plot","text":"<pre><code>plot(jump: dict | None = None, **kwargs)\n</code></pre> <p>Plotly show figure</p> <p>Parameters:</p> <ul> <li> <code>jump</code>               (<code>dict | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> Source code in <code>lettrade/plot/plotly/plotly.py</code> <pre><code>def plot(self, jump: dict | None = None, **kwargs):\n    \"\"\"Plotly show figure\n\n    Args:\n        jump (dict | None, optional): _description_. Defaults to None.\n    \"\"\"\n    if jump is not None:\n        self.jump(**jump)\n    elif self.figure is None:\n        self.load()\n    else:\n        if self.jump_reset():\n            self.load()\n\n    params = dict(layout_xaxis_rangeslider_visible=False)\n    params.update(**kwargs)\n    self.figure.update(**params)\n\n    self.figure.show()\n</code></pre>"},{"location":"reference/plot/plotly/plotly/#lettrade.plot.plotly.plotly.PlotlyBotPlotter.stop","title":"stop","text":"<pre><code>stop()\n</code></pre> <p>stop plotter</p> Source code in <code>lettrade/plot/plotly/plotly.py</code> <pre><code>def stop(self):\n    \"\"\"stop plotter\"\"\"\n</code></pre>"},{"location":"reference/stats/","title":"Index","text":""},{"location":"reference/stats/#lettrade.stats","title":"stats","text":""},{"location":"reference/stats/stats/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> stats","text":""},{"location":"reference/stats/stats/#lettrade.stats.stats","title":"stats","text":""},{"location":"reference/stats/stats/#lettrade.stats.stats.BotStatistic","title":"BotStatistic","text":"<pre><code>BotStatistic(\n    feeder: DataFeeder,\n    exchange: Exchange,\n    strategy: Strategy,\n)\n</code></pre> <p>Compute strategy result</p> Source code in <code>lettrade/stats/stats.py</code> <pre><code>def __init__(\n    self,\n    feeder: DataFeeder,\n    exchange: Exchange,\n    strategy: Strategy,\n) -&gt; None:\n    self.feeder: DataFeeder = feeder\n    self.exchange: Exchange = exchange\n    self.strategy: Strategy = strategy\n    self.account: Account = strategy.account\n</code></pre>"},{"location":"reference/stats/stats/#lettrade.stats.stats.BotStatistic.compute","title":"compute","text":"<pre><code>compute()\n</code></pre> <p>Calculate strategy report</p> Source code in <code>lettrade/stats/stats.py</code> <pre><code>def compute(self):\n    \"\"\"Calculate strategy report\"\"\"\n    data = self.feeder.data\n\n    ### Stats\n    self.result = result = pd.Series(dtype=object)\n\n    result.loc[\"strategy\"] = str(self.strategy.__class__)\n    result.loc[\"start\"] = data.index[0]\n    result.loc[\"end\"] = data.index[-1]\n    result.loc[\"duration\"] = result.end - result.start\n\n    ### Equity\n    equities_index = pd.DatetimeIndex(self.account._equities.keys())\n    equities = pd.Series(self.account._equities.values(), index=equities_index)\n    dd = 1 - equities / np.maximum.accumulate(equities)\n    dd_dur, dd_peaks = _compute_drawdown_duration_peaks(\n        pd.Series(dd, index=equities_index)\n    )\n\n    result.loc[\"start_balance\"] = round(equities.iloc[0], 2)\n    result.loc[\"equity\"] = round(equities.iloc[-1], 2)\n    result.loc[\"equity_peak\"] = round(equities.max(), 2)\n\n    pl = equities.iloc[-1] - equities.iloc[0]\n    result.loc[\"pl\"] = round(pl, 2)\n    result.loc[\"pl_percent\"] = round(pl / equities.iloc[0] * 100, 2)\n\n    c = data.close.values\n    result.loc[\"buy_hold_pl_percent\"] = round(\n        (c[-1] - c[0]) / c[0] * 100, 2\n    )  # long-only return\n\n    max_dd = -np.nan_to_num(dd.max())\n    result.loc[\"max_drawdown_percent\"] = round(max_dd * 100, 2)\n    result.loc[\"avg_drawdown_percent\"] = round(-dd_peaks.mean() * 100, 2)\n    result.loc[\"max_drawdown_duration\"] = _round_timedelta(\n        dd_dur.max(), data.timeframe\n    )\n    result.loc[\"avg_drawdown_duration\"] = _round_timedelta(\n        dd_dur.mean(), data.timeframe\n    )\n\n    # Separator\n    result.loc[\"\"] = \"\"\n\n    ### Positions\n    positions = list(self.exchange.history_positions.values()) + list(\n        self.exchange.positions.values()\n    )\n    positions_columns = (\n        \"size\",\n        \"entry_at\",\n        \"exit_at\",\n        \"entry_price\",\n        \"exit_price\",\n        \"pl\",\n        \"fee\",\n    )\n    positions_df = pd.DataFrame(columns=positions_columns)\n    for position in positions:\n        positions_df.at[position.id, positions_columns] = (\n            position.size,\n            position.entry_at,\n            position.exit_at,\n            position.entry_price,\n            position.exit_price,\n            position.pl,\n            position.fee,\n        )\n    positions_df[\"duration\"] = positions_df[\"entry_at\"] - positions_df[\"exit_at\"]\n    positions_total = len(positions)\n    pl = positions_df[\"pl\"]\n\n    result.loc[\"positions\"] = positions_total\n\n    win_rate = np.nan if not positions_total else (pl &gt; 0).mean()\n    result.loc[\"win_rate\"] = round(win_rate, 2)\n    result.loc[\"fee\"] = round(positions_df.fee.sum(), 2)\n    result.loc[\"best_trade_percent\"] = round(pl.max(), 2)\n    result.loc[\"worst_trade_percent\"] = round(pl.min(), 2)\n    result.loc[\"sqn\"] = round(\n        np.sqrt(positions_total) * pl.mean() / (pl.std() or np.nan),\n        2,\n    )\n    result.loc[\"kelly_criterion\"] = win_rate - (1 - win_rate) / (\n        pl[pl &gt; 0].mean() / -pl[pl &lt; 0].mean()\n    )\n    result.loc[\"profit_factor\"] = pl[pl &gt; 0].sum() / (\n        abs(pl[pl &lt; 0].sum()) or np.nan\n    )\n\n    return self.result\n</code></pre>"},{"location":"reference/stats/stats/#lettrade.stats.stats.BotStatistic.show","title":"show","text":"<pre><code>show()\n</code></pre> <p>Show statistic report</p> Source code in <code>lettrade/stats/stats.py</code> <pre><code>def show(self):\n    \"\"\"\n    Show statistic report\n    \"\"\"\n    if \"Start\" not in self.result:\n        logger.warning(\"call compute() before show()\")\n        self.compute()\n\n    # Show result inside docs session\n    if __debug__:\n        from lettrade.utils.docs import is_docs_session\n\n        if is_docs_session():\n            print(str(self))\n            return\n\n    logger.info(\n        \"\\n============= Statistic result =============\\n%s\\n\",\n        str(self),\n    )\n</code></pre>"},{"location":"reference/strategy/","title":"Index","text":""},{"location":"reference/strategy/#lettrade.strategy","title":"strategy","text":""},{"location":"reference/strategy/strategy/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> strategy","text":""},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy","title":"strategy","text":""},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy","title":"Strategy","text":"<pre><code>Strategy(\n    feeder: DataFeeder,\n    exchange: Exchange,\n    account: Account,\n    commander: Commander,\n    is_optimize: bool = False,\n    **kwargs\n)\n</code></pre> <p>Base class to implement a strategy</p> <p>Parameters:</p> <ul> <li> <code>feeder</code>               (<code>DataFeeder</code>)           \u2013            <p>DataFeeder for strategy</p> </li> <li> <code>exchange</code>               (<code>Exchange</code>)           \u2013            <p>Trading exchange</p> </li> <li> <code>account</code>               (<code>Account</code>)           \u2013            <p>Account manager</p> </li> <li> <code>commander</code>               (<code>Commander</code>)           \u2013            <p>Event/Command manager</p> </li> <li> <code>is_optimize</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>flag validate optimize condiction. Defaults to False.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>Validate valid is_optimize flag</p> </li> </ul> Source code in <code>lettrade/strategy/strategy.py</code> <pre><code>def __init__(\n    self,\n    feeder: DataFeeder,\n    exchange: Exchange,\n    account: Account,\n    commander: Commander,\n    is_optimize: bool = False,\n    **kwargs,\n):\n    \"\"\"_summary_\n\n    Args:\n        feeder (DataFeeder): DataFeeder for strategy\n        exchange (Exchange): Trading exchange\n        account (Account): Account manager\n        commander (Commander): Event/Command manager\n        is_optimize (bool, optional): flag validate optimize condiction. Defaults to False.\n\n    Raises:\n        RuntimeError: Validate valid is_optimize flag\n    \"\"\"\n    self.__feeder: DataFeeder = feeder\n    self.__exchange: Exchange = exchange\n    self.__account: Account = account\n    self.__commander: Commander = commander\n\n    self.__datas: list[DataFeed] = self.__feeder.datas\n    self.__data: DataFeed = self.__feeder.data\n\n    if is_optimize and self.is_live:\n        raise RuntimeError(\"Optimize a live datafeeder\")\n    self.__is_optimize: bool = is_optimize\n\n    # Set parameters\n    if kwargs:\n        logger.info(\"Update strategy parameters %s\", kwargs)\n        for k, v in kwargs.items():\n            setattr(self, k, v)\n</code></pre>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.account","title":"account  <code>property</code>","text":"<pre><code>account: Account\n</code></pre> <p>Getter of <code>Account</code></p> <p>Returns:</p> <ul> <li> <code>Account</code> (              <code>Account</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.commander","title":"commander  <code>property</code>","text":"<pre><code>commander: Commander\n</code></pre> <p>Getter of <code>Commander</code></p> <p>Returns:</p> <ul> <li> <code>Commander</code> (              <code>Commander</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.data","title":"data  <code>property</code>","text":"<pre><code>data: DataFeed\n</code></pre> <p>Getter of main DataFeed</p> <p>Returns:</p> <ul> <li> <code>DataFeed</code> (              <code>DataFeed</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.datas","title":"datas  <code>property</code>","text":"<pre><code>datas: list[DataFeed]\n</code></pre> <p>Getter of all DataFeed</p> <p>Returns:</p> <ul> <li> <code>list[DataFeed]</code>           \u2013            <p>list[DataFeed]: description</p> </li> </ul>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.exchange","title":"exchange  <code>property</code>","text":"<pre><code>exchange: Exchange\n</code></pre> <p>Getter of <code>Exchange</code></p> <p>Returns:</p> <ul> <li> <code>Exchange</code> (              <code>Exchange</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.feeder","title":"feeder  <code>property</code>","text":"<pre><code>feeder: DataFeeder\n</code></pre> <p>Getter of <code>DataFeeder</code></p> <p>Returns:</p> <ul> <li> <code>DataFeeder</code> (              <code>DataFeeder</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.history_orders","title":"history_orders  <code>property</code>","text":"<pre><code>history_orders: dict[str, Order]\n</code></pre> <p>Getter of history <code>Order</code> dict</p> <p>Returns:</p> <ul> <li> <code>dict[str, Order]</code>           \u2013            <p>dict[str, Order]: description</p> </li> </ul>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.history_positions","title":"history_positions  <code>property</code>","text":"<pre><code>history_positions: dict[str, Position]\n</code></pre> <p>Getter of history <code>Position</code> dict</p> <p>Returns:</p> <ul> <li> <code>dict[str, Position]</code>           \u2013            <p>dict[str, Position]: description</p> </li> </ul>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.is_backtest","title":"is_backtest  <code>property</code>","text":"<pre><code>is_backtest: bool\n</code></pre> <p>Flag to check strategy is running in backtest DataFeeder</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.is_live","title":"is_live  <code>property</code>","text":"<pre><code>is_live: bool\n</code></pre> <p>Flag to check strategy is running in live DataFeeder</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.is_optimize","title":"is_optimize  <code>property</code>","text":"<pre><code>is_optimize: bool\n</code></pre> <p>Flag to check strategy is running in optimize session</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.now","title":"now  <code>property</code>","text":"<pre><code>now: datetime\n</code></pre> <p>Getter of current datetime</p> <p>Returns:</p> <ul> <li> <code>datetime</code> (              <code>datetime</code> )          \u2013            <p>current datetime of bar</p> </li> </ul>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.orders","title":"orders  <code>property</code>","text":"<pre><code>orders: dict[str, Order]\n</code></pre> <p>Getter of <code>Order</code> dict</p> <p>Returns:</p> <ul> <li> <code>dict[str, Order]</code>           \u2013            <p>dict[str, Order]: description</p> </li> </ul>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.positions","title":"positions  <code>property</code>","text":"<pre><code>positions: dict[str, Position]\n</code></pre> <p>Getter of <code>Position</code> dict</p> <p>Returns:</p> <ul> <li> <code>dict[str, Position]</code>           \u2013            <p>dict[str, Position]: description</p> </li> </ul>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.indicators","title":"indicators","text":"<pre><code>indicators(df: DataFeed) -&gt; None\n</code></pre> <p>All indicator and signal should implement here to cacheable. Because of <code>lettrade</code> will cache/pre-load all <code>DataFeed</code>.</p> <p>To add indicators for a special DataFeed, define a new function name <code>indicators_&lt;DataFeed name&gt;</code>.</p> Usage <pre><code>df_eurusd = DataFeed(name=\"eurusd\")\ndf_gbpusd = DataFeed(name=\"gbpusd\")\n\n# This function will load indicators for df_eurusd\ndef indicators(self, df: DataFeed):\n    df['ema'] = df.i.ema(window=21)\n\n# This function will load indicators for df_gbpusd\ndef indicators_gbpusd(self, df: DataFeed):\n    df['ema'] = df.i.ema(window=25)\n</code></pre> <p>Parameters:</p> <ul> <li> <code>df</code>               (<code>DataFeed</code>)           \u2013            <p>DataFeed need to load indicators value</p> </li> </ul> Source code in <code>lettrade/strategy/strategy.py</code> <pre><code>def indicators(self, df: DataFeed) -&gt; None:\n    \"\"\"All indicator and signal should implement here to cacheable.\n    Because of `lettrade` will cache/pre-load all `DataFeed`.\n\n    To add indicators for a special DataFeed, define a new function name\n    `indicators_&lt;DataFeed name&gt;`.\n\n    Usage:\n        ```python\n        df_eurusd = DataFeed(name=\"eurusd\")\n        df_gbpusd = DataFeed(name=\"gbpusd\")\n\n        # This function will load indicators for df_eurusd\n        def indicators(self, df: DataFeed):\n            df['ema'] = df.i.ema(window=21)\n\n        # This function will load indicators for df_gbpusd\n        def indicators_gbpusd(self, df: DataFeed):\n            df['ema'] = df.i.ema(window=25)\n        ```\n\n    Args:\n        df (DataFeed): DataFeed need to load indicators value\n    \"\"\"\n</code></pre>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.init","title":"init","text":"<pre><code>init() -&gt; None\n</code></pre> <p>Init strategy variables</p> Source code in <code>lettrade/strategy/strategy.py</code> <pre><code>def init(self) -&gt; None:\n    \"\"\"Init strategy variables\"\"\"\n</code></pre>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.next","title":"next","text":"<pre><code>next(df: DataFeed, *others: list[DataFeed]) -&gt; None\n</code></pre> <p>Next bar event</p> Source code in <code>lettrade/strategy/strategy.py</code> <pre><code>def next(self, df: DataFeed, *others: list[DataFeed]) -&gt; None:\n    \"\"\"Next bar event\"\"\"\n</code></pre>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.on_executions","title":"on_executions","text":"<pre><code>on_executions(executions: list[Execution])\n</code></pre> <p>Listen for <code>Execution</code> event since <code>next()</code> begin</p> <p>Parameters:</p> <ul> <li> <code>executions</code>               (<code>list[Execution]</code>)           \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/strategy/strategy.py</code> <pre><code>def on_executions(self, executions: list[Execution]):\n    \"\"\"Listen for `Execution` event since `next()` begin\n\n    Args:\n        executions (list[Execution]): _description_\n    \"\"\"\n    if hasattr(self, \"on_execution\"):\n        for execution in executions:\n            self.on_execution(execution)\n</code></pre>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.on_notify","title":"on_notify","text":"<pre><code>on_notify(*args, **kwargs) -&gt; None\n</code></pre> <p>Listen for <code>notify</code> event since <code>next()</code> begin</p> <p>Returns:</p> <ul> <li> <code>_type_</code> (              <code>None</code> )          \u2013            <p><code>None</code></p> </li> </ul> Source code in <code>lettrade/strategy/strategy.py</code> <pre><code>def on_notify(self, *args, **kwargs) -&gt; None:\n    \"\"\"Listen for `notify` event since `next()` begin\n\n    Returns:\n        _type_: `None`\n    \"\"\"\n</code></pre>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.on_orders","title":"on_orders","text":"<pre><code>on_orders(orders: list[Order])\n</code></pre> <p>Listen for <code>Order</code> event</p> <p>Parameters:</p> <ul> <li> <code>orders</code>               (<code>list[Order]</code>)           \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/strategy/strategy.py</code> <pre><code>def on_orders(self, orders: list[Order]):\n    \"\"\"Listen for `Order` event\n\n    Args:\n        orders (list[Order]): _description_\n    \"\"\"\n    if hasattr(self, \"on_order\"):\n        for order in orders:\n            self.on_order(order)\n</code></pre>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.on_positions","title":"on_positions","text":"<pre><code>on_positions(positions: list[Position])\n</code></pre> <p>Listen for <code>Position</code> event since <code>next()</code> begin</p> <p>Parameters:</p> <ul> <li> <code>positions</code>               (<code>list[Position]</code>)           \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/strategy/strategy.py</code> <pre><code>def on_positions(self, positions: list[Position]):\n    \"\"\"Listen for `Position` event since `next()` begin\n\n    Args:\n        positions (list[Position]): _description_\n    \"\"\"\n    if hasattr(self, \"on_position\"):\n        for position in positions:\n            self.on_position(position)\n</code></pre>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.on_transactions","title":"on_transactions","text":"<pre><code>on_transactions(trans: list[Execution | Order | Position])\n</code></pre> <p>Listen for transaction events since <code>next()</code> begin</p> <p>Parameters:</p> <ul> <li> <code>trans</code>               (<code>list[Execution | Order | Position]</code>)           \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/strategy/strategy.py</code> <pre><code>def on_transactions(self, trans: list[Execution | Order | Position]):\n    \"\"\"Listen for transaction events since `next()` begin\n\n    Args:\n        trans (list[Execution  |  Order  |  Position]): _description_\n    \"\"\"\n    if hasattr(self, \"on_transaction\"):\n        for tran in trans:\n            self.on_transaction(tran)\n</code></pre>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.order_buy","title":"order_buy","text":"<pre><code>order_buy(\n    size: float | None = None,\n    limit: float | None = None,\n    stop: float | None = None,\n    sl: float | None = None,\n    tp: float | None = None,\n    tag: str | None = None,\n    **kwargs\n) -&gt; OrderResult\n</code></pre> <p>Place a new long order.</p> <p>Parameters:</p> <ul> <li> <code>size</code>               (<code>float | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>limit</code>               (<code>float | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>stop</code>               (<code>float | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>sl</code>               (<code>float | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>tp</code>               (<code>float | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>tag</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>**kwargs</code>               (<code>dict | None</code>, default:                   <code>{}</code> )           \u2013            <p>Extra-parameters send to <code>Exchange.new_order</code></p> </li> </ul> <p>Returns:</p> <ul> <li> <code>OrderResult</code> (              <code>OrderResult</code> )          \u2013            <p>order result information</p> </li> </ul> Source code in <code>lettrade/strategy/strategy.py</code> <pre><code>@final\ndef order_buy(\n    self,\n    size: float | None = None,\n    limit: float | None = None,\n    stop: float | None = None,\n    sl: float | None = None,\n    tp: float | None = None,\n    tag: str | None = None,\n    **kwargs,\n) -&gt; OrderResult:\n    \"\"\"Place a new long order.\n\n    Args:\n        size (float | None, optional): _description_. Defaults to None.\n        limit (float | None, optional): _description_. Defaults to None.\n        stop (float | None, optional): _description_. Defaults to None.\n        sl (float | None, optional): _description_. Defaults to None.\n        tp (float | None, optional): _description_. Defaults to None.\n        tag (str | None, optional): _description_. Defaults to None.\n        **kwargs (dict | None, optional): Extra-parameters send to `Exchange.new_order`\n\n    Returns:\n        OrderResult: order result information\n    \"\"\"\n    return self.order_place(\n        side=TradeSide.Buy,\n        size=size,\n        limit=limit,\n        stop=stop,\n        sl=sl,\n        tp=tp,\n        tag=tag,\n        **kwargs,\n    )\n</code></pre>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.order_place","title":"order_place","text":"<pre><code>order_place(\n    side: TradeSide,\n    size: float | None = None,\n    limit: float | None = None,\n    stop: float | None = None,\n    sl: float | None = None,\n    tp: float | None = None,\n    tag: str | None = None,\n    **kwargs\n) -&gt; OrderResult\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>side</code>               (<code>TradeSide</code>)           \u2013            <p>description</p> </li> <li> <code>size</code>               (<code>float | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>limit</code>               (<code>float | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>stop</code>               (<code>float | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>sl</code>               (<code>float | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>tp</code>               (<code>float | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>tag</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>OrderResult</code> (              <code>OrderResult</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/strategy/strategy.py</code> <pre><code>@final\ndef order_place(\n    self,\n    side: TradeSide,\n    size: float | None = None,\n    limit: float | None = None,\n    stop: float | None = None,\n    sl: float | None = None,\n    tp: float | None = None,\n    tag: str | None = None,\n    **kwargs,\n) -&gt; OrderResult:\n    \"\"\"_summary_\n\n    Args:\n        side (TradeSide): _description_\n        size (float | None, optional): _description_. Defaults to None.\n        limit (float | None, optional): _description_. Defaults to None.\n        stop (float | None, optional): _description_. Defaults to None.\n        sl (float | None, optional): _description_. Defaults to None.\n        tp (float | None, optional): _description_. Defaults to None.\n        tag (str | None, optional): _description_. Defaults to None.\n\n    Returns:\n        OrderResult: _description_\n    \"\"\"\n    params = dict(\n        size=size,\n        limit=limit,\n        stop=stop,\n        sl=sl,\n        tp=tp,\n        tag=tag,\n        **kwargs,\n    )\n    params[\"size\"] = side * abs(self.__account.risk(side=side, **params))\n    return self.__exchange.new_order(**params)\n</code></pre>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.order_sell","title":"order_sell","text":"<pre><code>order_sell(\n    size: float | None = None,\n    limit: float | None = None,\n    stop: float | None = None,\n    sl: float | None = None,\n    tp: float | None = None,\n    tag: str | None = None,\n    **kwargs\n) -&gt; OrderResult\n</code></pre> <p>Place a new short order.</p> <p>Parameters:</p> <ul> <li> <code>size</code>               (<code>float | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>limit</code>               (<code>float | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>stop</code>               (<code>float | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>sl</code>               (<code>float | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>tp</code>               (<code>float | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>tag</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>**kwargs</code>               (<code>dict | None</code>, default:                   <code>{}</code> )           \u2013            <p>Extra-parameters send to <code>Exchange.new_order</code></p> </li> </ul> <p>Returns:</p> <ul> <li> <code>OrderResult</code> (              <code>OrderResult</code> )          \u2013            <p>order result information</p> </li> </ul> Source code in <code>lettrade/strategy/strategy.py</code> <pre><code>@final\ndef order_sell(\n    self,\n    size: float | None = None,\n    limit: float | None = None,\n    stop: float | None = None,\n    sl: float | None = None,\n    tp: float | None = None,\n    tag: str | None = None,\n    **kwargs,\n) -&gt; OrderResult:\n    \"\"\"Place a new short order.\n\n    Args:\n        size (float | None, optional): _description_. Defaults to None.\n        limit (float | None, optional): _description_. Defaults to None.\n        stop (float | None, optional): _description_. Defaults to None.\n        sl (float | None, optional): _description_. Defaults to None.\n        tp (float | None, optional): _description_. Defaults to None.\n        tag (str | None, optional): _description_. Defaults to None.\n        **kwargs (dict | None, optional): Extra-parameters send to `Exchange.new_order`\n\n    Returns:\n        OrderResult: order result information\n    \"\"\"\n    return self.order_place(\n        side=TradeSide.Sell,\n        size=size,\n        limit=limit,\n        stop=stop,\n        sl=sl,\n        tp=tp,\n        tag=tag,\n        **kwargs,\n    )\n</code></pre>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.plot","title":"plot","text":"<pre><code>plot(\n    config: dict, df: DataFeed, *others: list[DataFeed]\n) -&gt; dict\n</code></pre> <p>Custom config of plot</p> Example <pre><code>{\n    # Global items is main datafeed item\n    \"items\": [],\n\n    # DataFeed plot config\n    \"datafeed_name_eurusd\": {\n        \"items\": [\n            {\n                \"type\": \"scatter\",\n                \"x\": dataframe.index,\n                \"y\": dataframe[\"close\"],\n                \"name\": \"EMA\",\n                \"mode\": \"lines\",\n                \"line\": { \"color\": '#00bad6', \"width\": 1 },\n            }\n        ]\n    },\n\n    # Layout config\n    {\n        \"hovermode\": \"x unified\"\n    }\n}\n</code></pre> <p>Parameters:</p> <ul> <li> <code>df</code>               (<code>DataFeed</code>)           \u2013            <p>plot DataFeed</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict</code> (              <code>dict</code> )          \u2013            <p>config</p> </li> </ul> Source code in <code>lettrade/strategy/strategy.py</code> <pre><code>def plot(self, config: dict, df: DataFeed, *others: list[DataFeed]) -&gt; dict:\n    \"\"\"Custom config of plot\n\n    Example:\n        ```json\n        {\n            # Global items is main datafeed item\n            \"items\": [],\n\n            # DataFeed plot config\n            \"datafeed_name_eurusd\": {\n                \"items\": [\n                    {\n                        \"type\": \"scatter\",\n                        \"x\": dataframe.index,\n                        \"y\": dataframe[\"close\"],\n                        \"name\": \"EMA\",\n                        \"mode\": \"lines\",\n                        \"line\": { \"color\": '#00bad6', \"width\": 1 },\n                    }\n                ]\n            },\n\n            # Layout config\n            {\n                \"hovermode\": \"x unified\"\n            }\n        }\n        ```\n\n    Args:\n        df (DataFeed): plot DataFeed\n\n    Returns:\n        dict: config\n    \"\"\"\n    return config\n</code></pre>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.send","title":"send","text":"<pre><code>send(msg: str, **kwargs) -&gt; Any\n</code></pre> <p>Send message to commander</p> <p>Parameters:</p> <ul> <li> <code>msg</code>               (<code>str</code>)           \u2013            <p>message string</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Any</code> (              <code>Any</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/strategy/strategy.py</code> <pre><code>@final\ndef send(self, msg: str, **kwargs) -&gt; Any:\n    \"\"\"Send message to commander\n\n    Args:\n        msg (str): message string\n\n    Returns:\n        Any: _description_\n    \"\"\"\n    return self.commander.send_message(msg=msg, **kwargs)\n</code></pre>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.start","title":"start","text":"<pre><code>start(df: DataFeed, *others: list[DataFeed]) -&gt; None\n</code></pre> <p>call after <code>init()</code> and before first <code>next()</code> is called</p> <p>Parameters:</p> <ul> <li> <code>df</code>               (<code>DataFeed</code>)           \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>_type_</code> (              <code>None</code> )          \u2013            <p><code>None</code></p> </li> </ul> Source code in <code>lettrade/strategy/strategy.py</code> <pre><code>def start(self, df: DataFeed, *others: list[DataFeed]) -&gt; None:\n    \"\"\"call after `init()` and before first `next()` is called\n\n    Args:\n        df (DataFeed): _description_\n\n    Returns:\n        _type_: `None`\n    \"\"\"\n</code></pre>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.stop","title":"stop","text":"<pre><code>stop(df: DataFeed, *others: list[DataFeed]) -&gt; None\n</code></pre> <p>Call when strategy run completed</p> <p>Parameters:</p> <ul> <li> <code>df</code>               (<code>DataFeed</code>)           \u2013            <p>main data of strategy</p> </li> </ul> Source code in <code>lettrade/strategy/strategy.py</code> <pre><code>def stop(self, df: DataFeed, *others: list[DataFeed]) -&gt; None:\n    \"\"\"Call when strategy run completed\n\n    Args:\n        df (DataFeed): main data of strategy\n    \"\"\"\n</code></pre>"},{"location":"reference/utils/","title":"Index","text":""},{"location":"reference/utils/#lettrade.utils","title":"utils","text":""},{"location":"reference/utils/docs/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> docs","text":""},{"location":"reference/utils/docs/#lettrade.utils.docs","title":"docs","text":""},{"location":"reference/utils/notebook/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> notebook","text":""},{"location":"reference/utils/notebook/#lettrade.utils.notebook","title":"notebook","text":""},{"location":"tutorial/tut-001/","title":"Tutorial 001","text":"<p>This tutorial tend to help understand basic of <code>lettrade</code></p>"},{"location":"tutorial/tut-001/#main-object","title":"Main object","text":"<ul> <li>DataFeed: is data for your bot to running, this is a implement of <code>pandas.DataFrame</code>, so it have all <code>pandas.DataFrame</code> feature</li> <li>Strategy: is base Strategy of your bot, implement your bot with this as base class</li> <li>Exchange: is base Exchange of your bot, where control trading event and logic</li> <li>Account: is base class, where your bot will control account balance, equity, risk, size, commission...</li> <li>Commander: is base class, where your bot will communicate with you in realtime</li> <li>Brain: is brain of your bot, it just internal object, so don't need to care about it</li> </ul>"},{"location":"tutorial/tut-001/#init-your-bot","title":"Init your bot","text":""},{"location":"tutorial/tut-001/#init-datafeed","title":"Init DataFeed","text":"<p><pre><code>from lettrade import DataFeed\nimport yfinance as yf\n\n# Your pandas.Dataframe\nmsft = yf.Ticker(\"MSFT\")\ndf = msft.history(period=\"1mo\")\n\nprint(\"pandas DataFrame:\\n\", df.tail())\n\ndata = DataFeed(data=df, name=\"MSFT\")\n\nprint(\"LetTrade DataFeed:\\n\", data.tail())\n</code></pre> <pre><code>pandas DataFrame:\n                                  Open        High         Low       Close    Volume  Dividends  Stock Splits\nDate                                                                                                        \n2024-05-15 00:00:00-04:00  417.899994  423.809998  417.269989  423.079987  22239500       0.75           0.0\n2024-05-16 00:00:00-04:00  421.799988  425.420013  420.350006  420.989990  17530100       0.00           0.0\n2024-05-17 00:00:00-04:00  422.540009  422.920013  418.029999  420.209991  15352200       0.00           0.0\n2024-05-20 00:00:00-04:00  420.209991  426.769989  419.989990  425.339996  16272100       0.00           0.0\n2024-05-21 00:00:00-04:00  426.829987  432.970001  424.850006  429.040009  21428700       0.00           0.0\nLetTrade DataFeed:\n                         Date        Open        High         Low       Close    Volume  Dividends  Stock Splits\n17 2024-05-15 00:00:00-04:00  417.899994  423.809998  417.269989  423.079987  22239500       0.75           0.0\n18 2024-05-16 00:00:00-04:00  421.799988  425.420013  420.350006  420.989990  17530100       0.00           0.0\n19 2024-05-17 00:00:00-04:00  422.540009  422.920013  418.029999  420.209991  15352200       0.00           0.0\n20 2024-05-20 00:00:00-04:00  420.209991  426.769989  419.989990  425.339996  16272100       0.00           0.0\n21 2024-05-21 00:00:00-04:00  426.829987  432.970001  424.850006  429.040009  21428700       0.00           0.0\n</code></pre></p>"},{"location":"tutorial/tut-001/#strategy-implement","title":"Strategy implement","text":"<pre><code>class SmaCross(Strategy):\n    ema1_window = 9\n    ema2_window = 21\n</code></pre>"},{"location":"tutorial/tut-001/#indicatorsignal-implement","title":"Indicator/signal implement","text":"<pre><code>import talib.abstract as ta\nfrom lettrade import DataFeed, indicator as i\n\ndef indicators(self, df: DataFeed):\n    df[\"ema1\"] = ta.EMA(df, timeperiod=self.ema1_window)\n    df[\"ema2\"] = ta.EMA(df, timeperiod=self.ema2_window)\n\n    df[\"signal_ema_crossover\"] = i.crossover(df.ema1, df.ema2)\n    df[\"signal_ema_crossunder\"] = i.crossunder(df.ema1, df.ema2)\n</code></pre>"},{"location":"tutorial/data/csv/","title":"CSVDataFeed for backtesting","text":"In\u00a0[1]: Copied! <pre>from lettrade.exchange.backtest import CSVBackTestDataFeed\n\ndf = CSVBackTestDataFeed(\n    \"example/data/data/DAT_ASCII_AUDUSD_M1_2022.csv\",\n    csv=dict(\n        # skiprows=[0],\n        names=[\"datetime\", \"open\", \"high\", \"low\", \"close\", \"volumn\"],\n        header=None,\n        delimiter=\";\",\n        parse_dates=[0],\n        date_format=\"%Y%m%d %H%M%S\",\n    ),\n    name=\"AUDUSD\",\n    timeframe=\"1m\",\n)\n\n# df = df[df.high != df.low]\n\ndf\n</pre> from lettrade.exchange.backtest import CSVBackTestDataFeed  df = CSVBackTestDataFeed(     \"example/data/data/DAT_ASCII_AUDUSD_M1_2022.csv\",     csv=dict(         # skiprows=[0],         names=[\"datetime\", \"open\", \"high\", \"low\", \"close\", \"volumn\"],         header=None,         delimiter=\";\",         parse_dates=[0],         date_format=\"%Y%m%d %H%M%S\",     ),     name=\"AUDUSD\",     timeframe=\"1m\", )  # df = df[df.high != df.low]  df Out[1]: open high low close volumn datetime 2022-01-02 17:10:00 0.72538 0.72545 0.72538 0.72545 0 2022-01-02 17:11:00 0.72545 0.72553 0.72545 0.72553 0 2022-01-02 17:12:00 0.72553 0.72553 0.72542 0.72547 0 2022-01-02 17:13:00 0.72547 0.72550 0.72547 0.72547 0 2022-01-02 17:14:00 0.72547 0.72547 0.72547 0.72547 0 ... ... ... ... ... ... 2022-01-11 17:30:00 0.72105 0.72105 0.72105 0.72105 0 2022-01-11 17:31:00 0.72105 0.72105 0.72079 0.72091 0 2022-01-11 17:32:00 0.72091 0.72091 0.72090 0.72090 0 2022-01-11 17:33:00 0.72079 0.72089 0.72079 0.72089 0 2022-01-11 17:34:00 0.72089 0.72089 0.72089 0.72089 0 <p>10000 rows \u00d7 5 columns</p> In\u00a0[2]: Copied! <pre>import plotly.io as pio\n\npio.renderers.default = \"notebook\"\npio.templates.default = \"plotly_dark\"\n</pre> import plotly.io as pio  pio.renderers.default = \"notebook\" pio.templates.default = \"plotly_dark\" In\u00a0[3]: Copied! <pre>import plotly.graph_objects as go\n\nfig = go.Figure(\n    data=[\n        go.Candlestick(\n            x=df.index,\n            open=df.open,\n            high=df.high,\n            low=df.low,\n            close=df.close,\n        )\n    ]\n)\n\nfig.show()\n</pre> import plotly.graph_objects as go  fig = go.Figure(     data=[         go.Candlestick(             x=df.index,             open=df.open,             high=df.high,             low=df.low,             close=df.close,         )     ] )  fig.show()"},{"location":"tutorial/data/csv/#csvdatafeed-for-backtesting","title":"CSVDataFeed for backtesting\u00b6","text":""},{"location":"tutorial/data/csv/#load-csv","title":"Load CSV\u00b6","text":"<p><code>csv</code> parameters is reflect of <code>pandas.read_csv()</code> parameters</p>"},{"location":"tutorial/data/csv/#plot","title":"Plot\u00b6","text":""},{"location":"tutorial/data/csv/#init-plotly-environment","title":"Init Plotly environment\u00b6","text":""},{"location":"tutorial/data/csv/#show","title":"Show\u00b6","text":""},{"location":"tutorial/plot/candlestick/","title":"Plot EMA and Candlestick","text":"In\u00a0[1]: Copied! <pre>import talib.abstract as ta\nimport pandas_ta as pdta\n\nfrom lettrade import DataFeed, Strategy, indicator as i\nfrom lettrade.exchange.backtest import ForexBackTestAccount, let_backtest\n\n\nclass SmaCross(Strategy):\n    ema1_window = 9\n    ema2_window = 21\n\n    def indicators(self, df: DataFeed):\n        df[\"ema1\"] = ta.EMA(df, timeperiod=self.ema1_window)\n        df[\"ema2\"] = ta.EMA(df, timeperiod=self.ema2_window)\n\n        df[\"signal_ema_crossover\"] = i.crossover(df.ema1, df.ema2)\n        df[\"signal_ema_crossunder\"] = i.crossunder(df.ema1, df.ema2)\n\n        df[\"cdl_doji\"] = pdta.cdl_doji(df.open, df.high, df.low, df.close)\n\n    def next(self, df: DataFeed):\n        if len(self.orders) &gt; 0 or len(self.positions) &gt; 0:\n            return\n\n        if df.l.signal_ema_crossover[-1]:\n            price = df.l.close[-1]\n            self.buy(size=0.1, sl=price - 0.001, tp=price + 0.001)\n        elif df.l.signal_ema_crossunder[-1]:\n            price = df.l.close[-1]\n            self.sell(size=0.1, sl=price + 0.001, tp=price - 0.001)\n\n    def plot(self, df: DataFeed) -&gt; dict:\n        from lettrade.plot import PlotColor\n        from lettrade.plot.plotly import (\n            plot_candlestick,\n            plot_line,\n            plot_merge,\n        )\n\n        plot_ema1 = plot_line(df[\"ema1\"], color=\"yellow\")\n        plot_ema2 = plot_line(df[\"ema2\"], color=\"green\")\n        plot_cdl_doji = plot_candlestick(\n            df[df[\"cdl_doji\"] != 0],\n            name=f\"Doji {df.name}\",\n            width=3,\n        )\n        return plot_merge(\n            plot_ema1,\n            plot_ema2,\n            plot_cdl_doji,\n        )\n\n\nlt = let_backtest(\n    strategy=SmaCross,\n    datas=\"example/data/data/EURUSD_5m-0_1000.csv\",\n    account=ForexBackTestAccount,\n    # plotter=None,\n)\n</pre> import talib.abstract as ta import pandas_ta as pdta  from lettrade import DataFeed, Strategy, indicator as i from lettrade.exchange.backtest import ForexBackTestAccount, let_backtest   class SmaCross(Strategy):     ema1_window = 9     ema2_window = 21      def indicators(self, df: DataFeed):         df[\"ema1\"] = ta.EMA(df, timeperiod=self.ema1_window)         df[\"ema2\"] = ta.EMA(df, timeperiod=self.ema2_window)          df[\"signal_ema_crossover\"] = i.crossover(df.ema1, df.ema2)         df[\"signal_ema_crossunder\"] = i.crossunder(df.ema1, df.ema2)          df[\"cdl_doji\"] = pdta.cdl_doji(df.open, df.high, df.low, df.close)      def next(self, df: DataFeed):         if len(self.orders) &gt; 0 or len(self.positions) &gt; 0:             return          if df.l.signal_ema_crossover[-1]:             price = df.l.close[-1]             self.buy(size=0.1, sl=price - 0.001, tp=price + 0.001)         elif df.l.signal_ema_crossunder[-1]:             price = df.l.close[-1]             self.sell(size=0.1, sl=price + 0.001, tp=price - 0.001)      def plot(self, df: DataFeed) -&gt; dict:         from lettrade.plot import PlotColor         from lettrade.plot.plotly import (             plot_candlestick,             plot_line,             plot_merge,         )          plot_ema1 = plot_line(df[\"ema1\"], color=\"yellow\")         plot_ema2 = plot_line(df[\"ema2\"], color=\"green\")         plot_cdl_doji = plot_candlestick(             df[df[\"cdl_doji\"] != 0],             name=f\"Doji {df.name}\",             width=3,         )         return plot_merge(             plot_ema1,             plot_ema2,             plot_cdl_doji,         )   lt = let_backtest(     strategy=SmaCross,     datas=\"example/data/data/EURUSD_5m-0_1000.csv\",     account=ForexBackTestAccount,     # plotter=None, ) In\u00a0[2]: Copied! <pre>lt.run()\n</pre> lt.run() <pre># Strategy                &lt;class '__main__.SmaCross'&gt;\nStart                       2024-05-13 21:15:00+00:00\nEnd                         2024-05-17 08:30:00+00:00\nDuration                              3 days 11:15:00\nStart Balance                                 10000.0\nEquity [$]                                    9975.32\nEquity Peak [$]                              10002.22\nPL [$]                                         -24.68\nPL [%]                                          -0.25\nBuy &amp; Hold PL [%]                                0.63\nMax. Drawdown [%]                               -0.46\nAvg. Drawdown [%]                               -0.12\nMax. Drawdown Duration                2 days 05:30:00\nAvg. Drawdown Duration                0 days 12:30:00\n                                                     \n# Positions                                        15\nWin Rate [%]                                      0.4\nFee [$]                                         -0.58\nBest Trade [%]                                  10.06\nWorst Trade [%]                                -10.14\nSQN                                             -0.64\nKelly Criterion                             -0.164918\nProfit Factor                                0.708067\n</pre> In\u00a0[3]: Copied! <pre>lt.plot(layout=dict(height=2_000))\n</pre> lt.plot(layout=dict(height=2_000))"},{"location":"tutorial/plot/candlestick/#plot-ema-and-candlestick","title":"Plot EMA and Candlestick\u00b6","text":""},{"location":"tutorial/plot/candlestick/#strategy","title":"Strategy\u00b6","text":""},{"location":"tutorial/plot/candlestick/#run","title":"Run\u00b6","text":""},{"location":"tutorial/plot/candlestick/#plot","title":"Plot\u00b6","text":""}]}