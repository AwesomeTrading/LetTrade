{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"LetTrade","text":"<p>A lightweight trading framework compatible with Stock, Forex, Crypto... markets</p> <p>Find more at Documentation</p>"},{"location":"#installation","title":"Installation","text":"<p>[!WARNING] LetTrade is under heavy construction, features and functions may be changed.</p> <p>Using Developing version to get latest update.</p> <p>Stable version</p> <pre><code>pip install lettrade[all]\n</code></pre> <p>Developing version</p> <pre><code>pip install 'lettrade[all] @ git+https://git@github.com/AwesomeTrading/LetTrade.git@main'\n</code></pre>"},{"location":"#example","title":"Example","text":"<pre><code>import talib.abstract as ta\n\nfrom lettrade import indicator as i\nfrom lettrade.all import DataFeed, ForexBackTestAccount, Strategy, let_backtest\n\n\nclass SmaCross(Strategy):\n    ema1_period = 9\n    ema2_period = 21\n\n    def indicators(self, df: DataFeed):\n        df[\"ema1\"] = ta.EMA(df, timeperiod=self.ema1_period)\n        df[\"ema2\"] = ta.EMA(df, timeperiod=self.ema2_period)\n\n        df[\"crossover\"] = i.crossover(df.ema1, df.ema2)\n        df[\"crossunder\"] = i.crossunder(df.ema1, df.ema2)\n\n    def next(self, df: DataFeed):\n        if df.l.crossover[-1]:\n            self.positions_exit()\n            self.buy(size=0.1)\n        elif df.l.crossunder[-1]:\n            self.positions_exit()\n            self.sell(size=0.1)\n\n\nlt = let_backtest(\n    strategy=SmaCross,\n    datas=\"example/data/data/EURUSD_5m_0_1000.csv\",\n    account=ForexBackTestAccount,\n)\n\nlt.run()\nlt.plot()\n</code></pre> <pre><code># Strategy                       &lt;class 'SmaCross'&gt;\nStart                     2024-05-13 21:15:00+00:00\nEnd                       2024-05-17 08:30:00+00:00\nDuration                            3 days 11:15:00\nStart Balance [$]                             10000\nEquity [$]                                  10000.0\nPL [$]                                          0.0\nPL [%]                                          0.0\nBuy &amp; Hold PL [%]                               2.0\nMax. Drawdown [%]                            -33.08\nAvg. Drawdown [%]                             -5.58\nMax. Drawdown Duration            688 days 00:00:00\nAvg. Drawdown Duration             41 days 00:00:00\n\n# Trades                                         34\nBest Trade [%]                               0.0007\nWorst Trade [%]                           -0.000732\nProfit Factor                                  2.13\nSQN                                            1.78\n</code></pre>"},{"location":"#start-a-strategy","title":"Start a strategy","text":"<p>More examples can be found in <code>example/</code></p>"},{"location":"#download-data","title":"Download data","text":"<pre><code>python -m example.data.yfinance\n</code></pre>"},{"location":"#backtest-strategy","title":"Backtest strategy","text":"<pre><code>python -m example.strategy.backtest_sma_cross\n</code></pre> <pre><code># Strategy                &lt;class '__main__.SmaCross'&gt;\nStart                       2023-01-02 00:00:00+00:00\nEnd                         2023-12-29 21:00:00+00:00\nDuration                            361 days 21:00:00\nStart Balance                                    1000\nEquity [$]                                    1497.29\nPL [$]                                         497.29\nPL [%]                                          49.73\nBuy &amp; Hold PL [%]                                 2.0\nMax. Drawdown [%]                              -33.08\nAvg. Drawdown [%]                               -5.58\nMax. Drawdown Duration              688 days 00:00:00\nAvg. Drawdown Duration               41 days 00:00:00\n\n# Trades                                          248\nWin Rate [%]                                     50.0\nFee [$]                                         -4.96\nBest Trade [%]                             554.825333\nWorst Trade [%]                           -525.077316\nProfit Factor                                    2.13\nSQN                                              1.78\n</code></pre>"},{"location":"#live-trading","title":"Live Trading","text":""},{"location":"#official","title":"Official","text":"<ul> <li><code>MetaTrader</code>: Support MetaTrader 5 Terminal trading</li> <li><code>CCXT</code>: [WIP] Support most of cryptocurrency exchange from CCXT library</li> </ul>"},{"location":"#development","title":"Development","text":"<p>Set up conda environment</p> <pre><code>conda create -y -n LetTrade python=3.12\nconda activate LetTrade\npip install -r requirements-dev.txt\n</code></pre>"},{"location":"dev/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p>"},{"location":"dev/#development","title":"Development","text":"<p>Guide for developer to install <code>lettrade</code></p>"},{"location":"dev/#environment-setup","title":"Environment setup","text":"<p>Set up conda environment</p> <pre><code>conda create -y -n LetTrade python=3.12\nconda activate LetTrade\npip install -r requirements-dev.txt\n</code></pre>"},{"location":"dev/#document","title":"Document","text":"<p>Building <code>lettrade</code> document guide</p>"},{"location":"dev/#dependencies","title":"Dependencies","text":"<p>Install <code>lettrade</code> as module</p> <pre><code>pip install .\n</code></pre> <p>Install python document requirements</p> <pre><code>pip install -r docs/requirements-docs.txt\n</code></pre>"},{"location":"dev/#view-document","title":"View document","text":"<p>Start mkdocs local server</p> <pre><code>mkdocs serve\n</code></pre>"},{"location":"docker/","title":"Docker","text":""},{"location":"docker/#build","title":"Build","text":"<p>Build new <code>lettrade/lettrade:stable</code> runtime image</p> <pre><code>docker compose build\n</code></pre>"},{"location":"docker/#start","title":"Start","text":"<p>Start docker from <code>lettrade/lettrade:stable</code> runtime image</p> <pre><code>docker compose up\n</code></pre>"},{"location":"indicator/1.talib/","title":"TA-Lib","text":"<p>Home | Indicators</p>"},{"location":"indicator/1.talib/#installation","title":"Installation","text":""},{"location":"indicator/1.talib/#build-from-source","title":"Build from source","text":"<p>Download ta-lib from github ta-lib-0.4.0-src.tar.gz</p> <pre><code>tar zxvf ta-lib-0.4.0-src.tar.gz\ncd ta-lib\n./configure --prefix=/usr\nmake\nsudo make install\n</code></pre> <p>Full install tutorial from TA-Lib</p>"},{"location":"indicator/1.talib/#conda-forge","title":"Conda-Forge","text":"<pre><code>conda install -c conda-forge libta-lib\n</code></pre>"},{"location":"indicator/1.talib/#python-library","title":"Python library","text":"<pre><code>pip install TA-Lib\n</code></pre>"},{"location":"indicator/1.talib/#example","title":"Example","text":"<pre><code>import talib.abstract as ta\n\nfrom lettrade import DataFeed, Strategy\nfrom lettrade import indicator as i\nfrom lettrade.exchange.backtest import ForexBackTestAccount, let_backtest\n\n\nclass SmaCross(Strategy):\n    ema1_period = 9\n    ema2_period = 21\n\n    def indicators(self, df: DataFeed):\n        df[\"ema1\"] = ta.EMA(df, timeperiod=self.ema1_period)\n        df[\"ema2\"] = ta.EMA(df, timeperiod=self.ema2_period)\n\n        df[\"signal_ema_crossover\"] = i.crossover(df.ema1, df.ema2)\n        df[\"signal_ema_crossunder\"] = i.crossunder(df.ema1, df.ema2)\n\n    def next(self, df: DataFeed):\n        if len(self.orders) &gt; 0 or len(self.positions) &gt; 0:\n            return\n\n        if df.l.signal_ema_crossover[-1]:\n            price = df.l.close[-1]\n            self.buy(size=0.1, sl=price - 0.01, tp=price + 0.01)\n        elif df.l.signal_ema_crossunder[-1]:\n            price = df.l.close[-1]\n            self.sell(size=0.1, sl=price + 0.01, tp=price - 0.01)\n\n    def plot(self, df: DataFeed):\n        from lettrade.plot.plotly import PlotColor, plot_line, plot_merge\n\n        plot_ema1 = plot_line(df[\"ema1\"], color=PlotColor.AMBER)\n        plot_ema2 = plot_line(df[\"ema2\"], color=PlotColor.CYAN)\n        return plot_merge(plot_ema1, plot_ema2)\n\n\nlt = let_backtest(\n    strategy=SmaCross,\n    datas=\"example/data/data/EURUSD_5m-0_1000.csv\",\n    account=ForexBackTestAccount,\n)\n\nlt.run()\nlt.plot()\n</code></pre>"},{"location":"indicator/2.freqtrade_technical/","title":"Freqtrade Technical","text":"<p>Home</p>"},{"location":"indicator/2.freqtrade_technical/#installation","title":"Installation","text":"<pre><code>pip install technical\n</code></pre>"},{"location":"indicator/2.freqtrade_technical/#examples","title":"Examples","text":"<pre><code>from technical.indicators import ema\n\nfrom lettrade import DataFeed, Strategy\nfrom lettrade import indicator as i\nfrom lettrade.exchange.backtest import ForexBackTestAccount, let_backtest\n\n\nclass SmaCross(Strategy):\n    ema1_period = 9\n    ema2_period = 21\n\n    def indicators(self, df: DataFeed):\n        df[\"ema1\"] = ema(df, period=self.ema1_period)\n        df[\"ema2\"] = ema(df, period=self.ema2_period)\n\n        df[\"signal_ema_crossover\"] = i.crossover(df.ema1, df.ema2)\n        df[\"signal_ema_crossunder\"] = i.crossunder(df.ema1, df.ema2)\n\n    def next(self, df: DataFeed):\n        if len(self.orders) &gt; 0 or len(self.positions) &gt; 0:\n            return\n\n        if df.l.signal_ema_crossover[-1]:\n            price = df.l.close[-1]\n            self.buy(size=0.1, sl=price - 0.01, tp=price + 0.01)\n        elif df.l.signal_ema_crossunder[-1]:\n            price = df.l.close[-1]\n            self.sell(size=0.1, sl=price + 0.01, tp=price - 0.01)\n\n    def plot(self, df: DataFeed):\n        from lettrade.plot.plotly import PlotColor, plot_line, plot_merge\n\n        plot_ema1 = plot_line(df[\"ema1\"], color=PlotColor.AMBER)\n        plot_ema2 = plot_line(df[\"ema2\"], color=PlotColor.CYAN)\n        return plot_merge(plot_ema1, plot_ema2)\n\n\nlt = let_backtest(\n    strategy=SmaCross,\n    datas=\"example/data/data/EURUSD_5m-0_1000.csv\",\n    account=ForexBackTestAccount,\n)\n\nlt.run()\nlt.plot()\n</code></pre>"},{"location":"indicator/3.pandas_ta/","title":"Pandas-TA","text":"<p>Home | Indicators</p>"},{"location":"indicator/3.pandas_ta/#installation","title":"Installation","text":"<pre><code>pip install pandas_ta\n</code></pre>"},{"location":"indicator/3.pandas_ta/#examples","title":"Examples","text":"<pre><code>import pandas_ta as ta\n\nfrom lettrade import DataFeed, Strategy\nfrom lettrade import indicator as i\nfrom lettrade.exchange.backtest import ForexBackTestAccount, let_backtest\n\n\nclass SmaCross(Strategy):\n    ema1_period = 9\n    ema2_period = 21\n\n    def indicators(self, df: DataFeed):\n        df[\"ema1\"] = ta.ema(df.close, length=self.ema1_period)\n        df[\"ema2\"] = ta.ema(df.close, length=self.ema2_period)\n\n        df[\"signal_ema_crossover\"] = i.crossover(df.ema1, df.ema2)\n        df[\"signal_ema_crossunder\"] = i.crossunder(df.ema1, df.ema2)\n\n    def next(self, df: DataFeed):\n        if len(self.orders) &gt; 0 or len(self.positions) &gt; 0:\n            return\n\n        if df.l.signal_ema_crossover[-1]:\n            price = df.l.close[-1]\n            self.buy(size=0.1, sl=price - 0.01, tp=price + 0.01)\n        elif df.l.signal_ema_crossunder[-1]:\n            price = df.l.close[-1]\n            self.sell(size=0.1, sl=price + 0.01, tp=price - 0.01)\n\n    def plot(self, df: DataFeed):\n        from lettrade.plot.plotly import PlotColor, plot_line, plot_merge\n\n        plot_ema1 = plot_line(df[\"ema1\"], color=PlotColor.AMBER)\n        plot_ema2 = plot_line(df[\"ema2\"], color=PlotColor.CYAN)\n        return plot_merge(plot_ema1, plot_ema2)\n\n\nlt = let_backtest(\n    strategy=SmaCross,\n    datas=\"example/data/data/EURUSD_5m-0_1000.csv\",\n    account=ForexBackTestAccount,\n)\n\nlt.run()\nlt.plot()\n</code></pre>"},{"location":"indicator/9.bukosabino_ta/","title":"Bukosabino Technical Analysis","text":"<p>Home | Indicators</p>"},{"location":"indicator/9.bukosabino_ta/#installation","title":"Installation","text":"<pre><code>pip install --upgrade ta\n</code></pre>"},{"location":"indicator/9.bukosabino_ta/#examples","title":"Examples","text":"<pre><code>from ta.trend import EMAIndicator\n\nfrom lettrade import DataFeed, Strategy\nfrom lettrade import indicator as i\nfrom lettrade.exchange.backtest import ForexBackTestAccount, let_backtest\n\n\nclass SmaCross(Strategy):\n    ema1_period = 9\n    ema2_period = 21\n\n    def indicators(self, df: DataFeed):\n        df[\"ema1\"] = EMAIndicator(df.close, window=self.ema1_period).ema_indicator()\n        df[\"ema2\"] = EMAIndicator(df.close, window=self.ema2_period).ema_indicator()\n\n        df[\"signal_ema_crossover\"] = i.crossover(df.ema1, df.ema2)\n        df[\"signal_ema_crossunder\"] = i.crossunder(df.ema1, df.ema2)\n\n    def next(self, df: DataFeed):\n        if len(self.orders) &gt; 0 or len(self.positions) &gt; 0:\n            return\n\n        if df.l.signal_ema_crossover[-1]:\n            price = df.l.close[-1]\n            self.buy(size=0.1, sl=price - 0.01, tp=price + 0.01)\n        elif df.l.signal_ema_crossunder[-1]:\n            price = df.l.close[-1]\n            self.sell(size=0.1, sl=price + 0.01, tp=price - 0.01)\n\n    def plot(self, df: DataFeed):\n        from lettrade.plot.plotly import PlotColor, plot_line, plot_merge\n\n        plot_ema1 = plot_line(df[\"ema1\"], color=PlotColor.AMBER)\n        plot_ema2 = plot_line(df[\"ema2\"], color=PlotColor.CYAN)\n        return plot_merge(plot_ema1, plot_ema2)\n\n\nlt = let_backtest(\n    strategy=SmaCross,\n    datas=\"example/data/data/EURUSD_5m-0_1000.csv\",\n    account=ForexBackTestAccount,\n)\n\nlt.run()\nlt.plot()\n</code></pre>"},{"location":"indicator/lettrade/","title":"LetTrade indicators","text":""},{"location":"indicator/lettrade/#installation","title":"Installation","text":"<p>LetTrade indicator requires TA-Lib</p>"},{"location":"indicator/lettrade/#example","title":"Example","text":"<pre><code>from lettrade import DataFeed, Strategy\nfrom lettrade.exchange.backtest import ForexBackTestAccount, let_backtest\n\n\nclass SmaCross(Strategy):\n    ema1_period = 9\n    ema2_period = 21\n\n    def indicators(self, df: DataFeed):\n        df[\"ema1\"] = df.i.ema(period=self.ema1_period)\n        df[\"ema2\"] = df.i.ema(period=self.ema2_period)\n\n        df[\"signal_ema_crossover\"] = df.i.crossover(df.ema1, df.ema2)\n        df[\"signal_ema_crossunder\"] = df.i.crossunder(df.ema1, df.ema2)\n\n    def next(self, df: DataFeed):\n        if len(self.orders) &gt; 0 or len(self.positions) &gt; 0:\n            return\n\n        if df.l.signal_ema_crossover[-1]:\n            price = df.l.close[-1]\n            self.buy(size=0.1, sl=price - 0.01, tp=price + 0.01)\n        elif df.l.signal_ema_crossunder[-1]:\n            price = df.l.close[-1]\n            self.sell(size=0.1, sl=price + 0.01, tp=price - 0.01)\n\n    def plot(self, df: DataFeed):\n        from lettrade.plot.plotly import PlotColor, plot_line, plot_merge\n\n        plot_ema1 = plot_line(df[\"ema1\"], color=PlotColor.AMBER)\n        plot_ema2 = plot_line(df[\"ema2\"], color=PlotColor.CYAN)\n        return plot_merge(plot_ema1, plot_ema2)\n\n\nlt = let_backtest(\n    strategy=SmaCross,\n    datas=\"example/data/data/EURUSD_5m-0_1000.csv\",\n    account=ForexBackTestAccount,\n)\n\nlt.run()\nlt.plot()\n</code></pre>"},{"location":"indicator/vendor/1.qtpylib/","title":"QTPyLib","text":"<p>Home | Indicator | FreqTrade</p>"},{"location":"indicator/vendor/1.qtpylib/#example-1","title":"Example 1","text":"<p>Call QTPyLib indicator</p> <pre><code>from lettrade import DataFeed, Strategy\nfrom lettrade import indicator as i\nfrom lettrade.exchange.backtest import ForexBackTestAccount, let_backtest\nfrom lettrade.indicator.vendor.qtpylib import ema\n\n\nclass SmaCross(Strategy):\n    ema1_period = 9\n    ema2_period = 21\n\n    def indicators(self, df: DataFeed):\n        # QTPyLib function call\n        df[\"ema1\"] = ema(df.close, window=self.ema1_period)\n        df[\"ema2\"] = ema(df.close, window=self.ema2_period)\n\n        df[\"signal_ema_crossover\"] = i.crossover(df.ema1, df.ema2)\n        df[\"signal_ema_crossunder\"] = i.crossunder(df.ema1, df.ema2)\n\n    def next(self, df: DataFeed):\n        if len(self.orders) &gt; 0 or len(self.positions) &gt; 0:\n            return\n\n        if df.l.signal_ema_crossover[-1]:\n            price = df.l.close[-1]\n            self.buy(size=0.1, sl=price - 0.01, tp=price + 0.01)\n        elif df.l.signal_ema_crossunder[-1]:\n            price = df.l.close[-1]\n            self.sell(size=0.1, sl=price + 0.01, tp=price - 0.01)\n\n    def plot(self, df: DataFeed):\n        from lettrade.plot.plotly import PlotColor, plot_line, plot_merge\n\n        plot_ema1 = plot_line(df[\"ema1\"], color=PlotColor.AMBER)\n        plot_ema2 = plot_line(df[\"ema2\"], color=PlotColor.CYAN)\n        return plot_merge(plot_ema1, plot_ema2)\n\n\nlt = let_backtest(\n    strategy=SmaCross,\n    datas=\"example/data/data/EURUSD_5m-0_1000.csv\",\n    account=ForexBackTestAccount,\n)\n\nlt.run()\nlt.plot()\n</code></pre>"},{"location":"indicator/vendor/1.qtpylib/#example-2","title":"Example 2","text":"<p>Inject QTPyLib to Pandas.DataFrame</p> <pre><code>from lettrade import DataFeed, Strategy\nfrom lettrade import indicator as i\nfrom lettrade.exchange.backtest import ForexBackTestAccount, let_backtest\nfrom lettrade.indicator.vendor.qtpylib import inject_indicators\n\n# Inject QTPyLib\ninject_indicators()\n\n\nclass SmaCross(Strategy):\n    ema1_period = 9\n    ema2_period = 21\n\n    def indicators(self, df: DataFeed):\n        # QTPyLib injected function call\n        df[\"ema1\"] = df.close.ema(window=self.ema1_period)\n        df[\"ema2\"] = df.close.ema(window=self.ema2_period)\n\n        df[\"signal_ema_crossover\"] = i.crossover(df.ema1, df.ema2)\n        df[\"signal_ema_crossunder\"] = i.crossunder(df.ema1, df.ema2)\n\n    def next(self, df: DataFeed):\n        if len(self.orders) &gt; 0 or len(self.positions) &gt; 0:\n            return\n\n        if df.l.signal_ema_crossover[-1]:\n            price = df.l.close[-1]\n            self.buy(size=0.1, sl=price - 0.01, tp=price + 0.01)\n        elif df.l.signal_ema_crossunder[-1]:\n            price = df.l.close[-1]\n            self.sell(size=0.1, sl=price + 0.01, tp=price - 0.01)\n\n    def plot(self, df: DataFeed):\n        from lettrade.plot.plotly import PlotColor, plot_line, plot_merge\n\n        plot_ema1 = plot_line(df[\"ema1\"], color=PlotColor.AMBER)\n        plot_ema2 = plot_line(df[\"ema2\"], color=PlotColor.CYAN)\n        return plot_merge(plot_ema1, plot_ema2)\n\n\nlt = let_backtest(\n    strategy=SmaCross,\n    datas=\"example/data/data/EURUSD_5m-0_1000.csv\",\n    account=ForexBackTestAccount,\n)\n\nlt.run()\nlt.plot()\n</code></pre>"},{"location":"install/","title":"LetTrade install","text":"<p>Guide to quick install <code>lettrade</code></p>"},{"location":"install/#installation","title":"Installation","text":"<p>Stable version</p> <pre><code>pip install lettrade\n</code></pre> <p>Developing version</p> <pre><code>pip install git+https://git@github.com/AwesomeTrading/lettrade.git@main\n</code></pre>"},{"location":"install/metatrader/","title":"MetaTrader 5 Install","text":"<p><code>MetaTrader 5</code> is exchange server of module MetaTrader</p>"},{"location":"install/metatrader/#ubuntu","title":"Ubuntu","text":""},{"location":"install/metatrader/#wine","title":"Wine","text":"<pre><code>wget https://download.mql5.com/cdn/web/metaquotes.software.corp/mt5/mt5ubuntu.sh ; chmod +x mt5ubuntu.sh ; ./mt5ubuntu.sh\n</code></pre>"},{"location":"install/metatrader/#python","title":"Python","text":"<pre><code>wget https://www.python.org/ftp/python/3.10.11/python-3.10.11.exe\n\nexport WINEPREFIX=$HOME/.mt5\nwine python-3.10.11.exe\n</code></pre>"},{"location":"install/metatrader/#python-requirements","title":"Python requirements","text":"<pre><code>export WINEPREFIX=$HOME/.mt5\n\ncd $HOME/.mt5/dosdevices/c:/users/$USER/AppData/Local/Programs/Python/Python310-32/\n\nwine python.exe -m pip install --upgrade pip\nwine python.exe -m pip install MetaTrader5\nwine python.exe -m pip install https://github.com/AwesomeTrading/mt5linux/archive/master.zip\n</code></pre>"},{"location":"install/metatrader/#start-server","title":"Start Server","text":"<pre><code>export WINEPREFIX=$HOME/.mt5\n\npython -m mt5linux \"$HOME/.mt5/dosdevices/c:/users/$USER/AppData/Local/Programs/Python/Python310-32/python.exe\"\n</code></pre>"},{"location":"install/metatrader/#metatrader-terminal","title":"MetaTrader Terminal","text":""},{"location":"install/metatrader/#load-broker-information","title":"Load broker information","text":"<p>Load broker information before start by steps:</p> <ul> <li><code>File</code> menu</li> <li><code>Open an Account</code> action</li> <li>Search your broker (ex: <code>Tickmill</code>, <code>Roboforex</code>...)</li> <li><code>Enter</code> to load</li> <li><code>Cancel</code> (Done)</li> </ul>"},{"location":"install/metatrader/#enable-automatic-algo-trading","title":"Enable Automatic Algo Trading","text":"<ul> <li><code>Tools</code> menu</li> <li><code>Options</code> menu</li> <li><code>Expert Advisors</code> tab</li> <li><code>Allow Auto Trading</code> checkbox</li> <li>Uncheck <code>Disable automated trading when switching accounts</code> and <code>Disable automated trading when switching profiles</code></li> </ul>"},{"location":"live/ccxt/","title":"CCXT exchange","text":""},{"location":"live/ccxt/#installation","title":"Installation","text":"<pre><code>pip install lettrade[exchange-ccxt]\n</code></pre>"},{"location":"live/ccxt/#default-config","title":"Default config","text":"<pre><code>from lettrade.exchange.ccxt import let_ccxt\n\nlt = let_ccxt(\n    strategy=SmaCross,\n    datas=[(\"BTC/USD\", \"1m\", \"BTCUSD_1m\")],\n    ccxt_exchange=os.getenv(\"CCXT_EXCHANGE\"),\n    ccxt_type=os.getenv(\"CCXT_TYPE\"),\n    ccxt_key=os.getenv(\"CCXT_KEY\"),\n    ccxt_secret=os.getenv(\"CCXT_SECRET\"),\n    ccxt_verbose=os.getenv(\"CCXT_VERBOSE\", \"\").lower() in [\"true\", \"1\"],\n)\n</code></pre>"},{"location":"live/ccxt/#example","title":"Example","text":"<pre><code>import logging\nimport os\n\nimport pandas as pd\nfrom dotenv import load_dotenv\n\nimport example.logger\nfrom lettrade import DataFeed, Strategy\nfrom lettrade.exchange.ccxt import let_ccxt\n\nload_dotenv()\n\nlogger = logging.getLogger(__name__)\n\n\nclass SmaCross(Strategy):\n    ema1_period = 9\n    ema2_period = 21\n    _now: pd.Timestamp\n\n    def indicators(self, df: DataFeed):\n        df[\"ema1\"] = df.i.ema(period=self.ema1_period)\n        df[\"ema2\"] = df.i.ema(period=self.ema2_period)\n\n        df[\"signal_ema_crossover\"] = df.i.crossover(df.ema1, df.ema2)\n        df[\"signal_ema_crossunder\"] = df.i.crossunder(df.ema1, df.ema2)\n\n    def start(self, df: DataFeed):\n        if self.is_live:\n            self._now = df.now\n\n    def next(self, df: DataFeed):\n        if self.is_live:\n            # Filter start of new bar\n            if self._now == df.now:\n                return\n\n            self._now = df.now\n            logger.info(\"New bar: %s\", self._now)\n\n        if len(self.orders) &gt; 0 or len(self.positions) &gt; 0:\n            return\n\n        if df.l.signal_ema_crossover[-1]:\n            price = self.data.l.close[-1]\n            self.buy(size=0.1, sl=price - 1000, tp=price + 1000)\n        elif df.l.signal_ema_crossunder[-1]:\n            price = self.data.l.close[-1]\n            self.sell(size=0.1, sl=price + 1000, tp=price - 1000)\n\n    def stop(self, df: DataFeed):\n        print(df)\n        print(self.orders)\n\n    def plot(self, df: DataFeed):\n        return dict(\n            scatters=[\n                dict(\n                    x=df.index,\n                    y=df[\"ema1\"],\n                    line=dict(color=\"blue\", width=1),\n                    name=\"ema1\",\n                ),\n                dict(\n                    x=df.index,\n                    y=df[\"ema2\"],\n                    line=dict(color=\"green\", width=1),\n                    name=\"ema2\",\n                ),\n            ]\n        )\n\n\nif __name__ == \"__main__\":\n    lt = let_ccxt(\n        strategy=SmaCross,\n        datas=[(\"BTC/USD\", \"1m\", \"BTCUSD_1m\")],\n        ccxt_exchange=os.getenv(\"CCXT_EXCHANGE\"),\n        ccxt_type=os.getenv(\"CCXT_TYPE\"),\n        ccxt_key=os.getenv(\"CCXT_KEY\"),\n        ccxt_secret=os.getenv(\"CCXT_SECRET\"),\n        ccxt_verbose=os.getenv(\"CCXT_VERBOSE\", \"\").lower() in [\"true\", \"1\"],\n    )\n\n    lt.run()\n    # lt.plot()\n</code></pre>"},{"location":"live/metatrader/","title":"MetaTrader exchange","text":""},{"location":"live/metatrader/#installation","title":"Installation","text":"<pre><code>pip install lettrade[exchange-metatrader]\n</code></pre>"},{"location":"live/metatrader/#default-config","title":"Default config","text":"<pre><code>from lettrade.exchange.metatrader import let_metatrader\n\n\nlt = let_metatrader(\n    strategy=SmaCross,\n    datas=[(\"EURUSD\", \"1m\")],\n    mt5_login=int(os.environ[\"MT5_LOGIN\"]),\n    mt5_password=os.environ[\"MT5_PASSWORD\"],\n    mt5_server=os.environ[\"MT5_SERVER\"],\n    mt5_wine=os.getenv(\"MT5_WINE\", None),\n)\n</code></pre>"},{"location":"live/metatrader/#example","title":"Example","text":"<pre><code>import os\n\nimport talib.abstract as ta\nfrom dotenv import load_dotenv\n\nimport example.logger\nfrom lettrade import DataFeed, Strategy\nfrom lettrade.exchange.metatrader import let_metatrader\n\nload_dotenv()\n\n\nclass SmaCross(Strategy):\n    ema1_period = 9\n    ema2_period = 21\n\n    def indicators(self, df: DataFeed):\n        df[\"ema1\"] = ta.EMA(df, timeperiod=self.ema1_period)\n        df[\"ema2\"] = ta.EMA(df, timeperiod=self.ema2_period)\n\n        df[\"signal_ema_crossover\"] = df.i.crossover(df.ema1, df.ema2)\n        df[\"signal_ema_crossunder\"] = df.i.crossunder(df.ema1, df.ema2)\n        return df\n\n    def next(self, df: DataFeed):\n        if len(self.orders) &gt; 0 or len(self.positions) &gt; 0:\n            return\n\n        if df.l.signal_ema_crossover[-1]:\n            price = self.data.l.close[-1]\n            self.buy(size=0.1, sl=price - 0.01, tp=price + 0.01)\n        elif df.l.signal_ema_crossunder[-1]:\n            price = self.data.l.close[-1]\n            self.sell(size=0.1, sl=price + 0.01, tp=price - 0.01)\n\n    # def on_transaction(self, transaction):\n    #     print(\"Transaction\", transaction)\n\n    def stop(self, df: DataFeed):\n        print(df)\n        print(self.orders)\n\n    def plot(self, df: DataFeed):\n        return dict(\n            scatters=[\n                dict(\n                    x=df.index,\n                    y=df[\"ema1\"],\n                    line=dict(color=\"blue\", width=1),\n                    name=\"ema1\",\n                ),\n                dict(\n                    x=df.index,\n                    y=df[\"ema2\"],\n                    line=dict(color=\"green\", width=1),\n                    name=\"ema2\",\n                ),\n            ]\n        )\n\n\nif __name__ == \"__main__\":\n    lt = let_metatrader(\n        strategy=SmaCross,\n        datas=[(\"EURUSD\", \"1m\")],\n        # datas=[[(\"EURUSD\", \"1m\")], [(\"GBPUSD\", \"1m\")]],\n        mt5_login=int(os.environ[\"MT5_LOGIN\"]),\n        mt5_password=os.environ[\"MT5_PASSWORD\"],\n        mt5_server=os.environ[\"MT5_SERVER\"],\n        mt5_wine=os.getenv(\"MT5_WINE\", None),\n    )\n\n    lt.run()\n    # lt.plot()\n</code></pre>"},{"location":"live/metatrader/feeder/","title":"Interactive with MetaTraderDataFeeder","text":"In\u00a0[1]: Copied! <pre>from dotenv import load_dotenv\nimport os\nfrom lettrade.exchange.metatrader import MetaTraderDataFeeder\n\nload_dotenv()\n\nfeeder = MetaTraderDataFeeder.instance(\n    api_kwargs=dict(\n        login=int(os.environ[\"MT5_LOGIN\"]),\n        password=os.environ[\"MT5_PASSWORD\"],\n        server=os.environ[\"MT5_SERVER\"],\n        # wine=os.getenv(\"MT5_WINE\", None),\n    )\n)\n</pre> from dotenv import load_dotenv import os from lettrade.exchange.metatrader import MetaTraderDataFeeder  load_dotenv()  feeder = MetaTraderDataFeeder.instance(     api_kwargs=dict(         login=int(os.environ[\"MT5_LOGIN\"]),         password=os.environ[\"MT5_PASSWORD\"],         server=os.environ[\"MT5_SERVER\"],         # wine=os.getenv(\"MT5_WINE\", None),     ) ) In\u00a0[2]: Copied! <pre>data = feeder.data_new(symbol=\"EURUSD\", timeframe=\"1h\")\ndata\n</pre> data = feeder.data_new(symbol=\"EURUSD\", timeframe=\"1h\") data Out[2]: open high low close volume datetime In\u00a0[3]: Copied! <pre>data.bars_load(since=0, to=1000)\ndata\n</pre> data.bars_load(since=0, to=1000) data Out[3]: open high low close volume datetime 2024-04-10 16:00:00+00:00 1.07808 1.07813 1.07496 1.0751 8742 2024-04-10 17:00:00+00:00 1.07511 1.07671 1.07457 1.07534 6100 2024-04-10 18:00:00+00:00 1.07534 1.07548 1.07335 1.07368 3773 2024-04-10 19:00:00+00:00 1.07368 1.07375 1.07288 1.0736 2439 2024-04-10 20:00:00+00:00 1.07362 1.07544 1.07292 1.07504 5373 ... ... ... ... ... ... 2024-06-07 03:00:00+00:00 1.08918 1.08925 1.08869 1.08896 1113 2024-06-07 04:00:00+00:00 1.08896 1.08959 1.08872 1.08958 1487 2024-06-07 05:00:00+00:00 1.08958 1.08979 1.08945 1.0897 858 2024-06-07 06:00:00+00:00 1.0897 1.08979 1.08937 1.08946 782 2024-06-07 07:00:00+00:00 1.08946 1.08969 1.08936 1.08961 427 <p>1000 rows \u00d7 5 columns</p> In\u00a0[4]: Copied! <pre>import plotly.io as pio\n\npio.renderers.default = \"notebook\"\npio.templates.default = \"plotly_dark\"\n</pre> import plotly.io as pio  pio.renderers.default = \"notebook\" pio.templates.default = \"plotly_dark\" In\u00a0[5]: Copied! <pre>import plotly.graph_objects as go\n\nfig = go.Figure(\n    data=[\n        go.Candlestick(\n            x=data.index,\n            open=data.open,\n            high=data.high,\n            low=data.low,\n            close=data.close,\n        )\n    ]\n)\n\nfig.show()\n</pre> import plotly.graph_objects as go  fig = go.Figure(     data=[         go.Candlestick(             x=data.index,             open=data.open,             high=data.high,             low=data.low,             close=data.close,         )     ] )  fig.show() In\u00a0[6]: Copied! <pre>markets = feeder.markets(\"*EUR*\")\n</pre> markets = feeder.markets(\"*EUR*\") In\u00a0[7]: Copied! <pre>for s in markets:\n    print(s._asdict())\n</pre> for s in markets:     print(s._asdict()) <pre>{'custom': False, 'chart_mode': 0, 'select': False, 'visible': False, 'session_deals': 0, 'session_buy_orders': 0, 'session_sell_orders': 0, 'volume': 0, 'volumehigh': 0, 'volumelow': 0, 'time': 0, 'digits': 3, 'spread': 0, 'spread_float': True, 'ticks_bookdepth': 0, 'trade_calc_mode': 2, 'trade_mode': 4, 'start_time': 0, 'expiration_time': 0, 'trade_stops_level': 0, 'trade_freeze_level': 0, 'trade_exemode': 2, 'swap_mode': 5, 'swap_rollover3days': 5, 'margin_hedged_use_leg': False, 'expiration_mode': 15, 'filling_mode': 2, 'order_mode': 127, 'order_gtc_mode': 0, 'option_mode': 0, 'option_right': 0, 'bid': 0.0, 'bidhigh': 0.0, 'bidlow': 0.0, 'ask': 0.0, 'askhigh': 0.0, 'asklow': 0.0, 'last': 0.0, 'lasthigh': 0.0, 'lastlow': 0.0, 'volume_real': 0.0, 'volumehigh_real': 0.0, 'volumelow_real': 0.0, 'option_strike': 0.0, 'point': 0.001, 'trade_tick_value': 0.001, 'trade_tick_value_profit': 0.001, 'trade_tick_value_loss': 0.001, 'trade_tick_size': 0.001, 'trade_contract_size': 1.0, 'trade_accrued_interest': 0.0, 'trade_face_value': 0.0, 'trade_liquidity_rate': 0.0, 'volume_min': 1.0, 'volume_max': 10000.0, 'volume_step': 1.0, 'volume_limit': 0.0, 'swap_long': -1.18, 'swap_short': -4.07, 'margin_initial': 0.0, 'margin_maintenance': 0.0, 'session_volume': 0.0, 'session_turnover': 0.0, 'session_interest': 0.0, 'session_buy_orders_volume': 0.0, 'session_sell_orders_volume': 0.0, 'session_open': 0.0, 'session_close': 0.0, 'session_aw': 0.0, 'session_price_settlement': 0.0, 'session_price_limit_min': 0.0, 'session_price_limit_max': 0.0, 'margin_hedged': 0.0, 'price_change': 0.0, 'price_volatility': 0.0, 'price_theoretical': 0.0, 'price_greeks_delta': 0.0, 'price_greeks_theta': 0.0, 'price_greeks_gamma': 0.0, 'price_greeks_vega': 0.0, 'price_greeks_rho': 0.0, 'price_greeks_omega': 0.0, 'price_sensitivity': 0.0, 'basis': '', 'category': '', 'currency_base': 'EUR', 'currency_profit': 'EUR', 'currency_margin': 'EUR', 'bank': '', 'description': 'Euro Bobl Cash - FGBM', 'exchange': '', 'formula': '', 'isin': '', 'name': '#EURBOBL', 'page': '', 'path': 'Treasuries\\\\#EURBOBL'}\n{'custom': False, 'chart_mode': 0, 'select': False, 'visible': False, 'session_deals': 0, 'session_buy_orders': 0, 'session_sell_orders': 0, 'volume': 0, 'volumehigh': 0, 'volumelow': 0, 'time': 0, 'digits': 3, 'spread': 0, 'spread_float': True, 'ticks_bookdepth': 0, 'trade_calc_mode': 2, 'trade_mode': 4, 'start_time': 0, 'expiration_time': 0, 'trade_stops_level': 0, 'trade_freeze_level': 0, 'trade_exemode': 2, 'swap_mode': 5, 'swap_rollover3days': 5, 'margin_hedged_use_leg': False, 'expiration_mode': 15, 'filling_mode': 2, 'order_mode': 127, 'order_gtc_mode': 0, 'option_mode': 0, 'option_right': 0, 'bid': 0.0, 'bidhigh': 0.0, 'bidlow': 0.0, 'ask': 0.0, 'askhigh': 0.0, 'asklow': 0.0, 'last': 0.0, 'lasthigh': 0.0, 'lastlow': 0.0, 'volume_real': 0.0, 'volumehigh_real': 0.0, 'volumelow_real': 0.0, 'option_strike': 0.0, 'point': 0.001, 'trade_tick_value': 0.001, 'trade_tick_value_profit': 0.001, 'trade_tick_value_loss': 0.001, 'trade_tick_size': 0.001, 'trade_contract_size': 1.0, 'trade_accrued_interest': 0.0, 'trade_face_value': 0.0, 'trade_liquidity_rate': 0.0, 'volume_min': 1.0, 'volume_max': 10000.0, 'volume_step': 1.0, 'volume_limit': 0.0, 'swap_long': -4.53, 'swap_short': -0.72, 'margin_initial': 0.0, 'margin_maintenance': 0.0, 'session_volume': 0.0, 'session_turnover': 0.0, 'session_interest': 0.0, 'session_buy_orders_volume': 0.0, 'session_sell_orders_volume': 0.0, 'session_open': 0.0, 'session_close': 0.0, 'session_aw': 0.0, 'session_price_settlement': 0.0, 'session_price_limit_min': 0.0, 'session_price_limit_max': 0.0, 'margin_hedged': 0.0, 'price_change': 0.0, 'price_volatility': 0.0, 'price_theoretical': 0.0, 'price_greeks_delta': 0.0, 'price_greeks_theta': 0.0, 'price_greeks_gamma': 0.0, 'price_greeks_vega': 0.0, 'price_greeks_rho': 0.0, 'price_greeks_omega': 0.0, 'price_sensitivity': 0.0, 'basis': '', 'category': '', 'currency_base': 'EUR', 'currency_profit': 'EUR', 'currency_margin': 'EUR', 'bank': '', 'description': 'Euro Bund Cash - FGBL', 'exchange': '', 'formula': '', 'isin': '', 'name': '#EURBUND', 'page': '', 'path': 'Treasuries\\\\#EURBUND'}\n{'custom': False, 'chart_mode': 0, 'select': False, 'visible': False, 'session_deals': 0, 'session_buy_orders': 0, 'session_sell_orders': 0, 'volume': 0, 'volumehigh': 0, 'volumelow': 0, 'time': 0, 'digits': 3, 'spread': 0, 'spread_float': True, 'ticks_bookdepth': 0, 'trade_calc_mode': 2, 'trade_mode': 4, 'start_time': 0, 'expiration_time': 0, 'trade_stops_level': 0, 'trade_freeze_level': 0, 'trade_exemode': 2, 'swap_mode': 5, 'swap_rollover3days': 5, 'margin_hedged_use_leg': False, 'expiration_mode': 15, 'filling_mode': 2, 'order_mode': 127, 'order_gtc_mode': 0, 'option_mode': 0, 'option_right': 0, 'bid': 0.0, 'bidhigh': 0.0, 'bidlow': 0.0, 'ask': 0.0, 'askhigh': 0.0, 'asklow': 0.0, 'last': 0.0, 'lasthigh': 0.0, 'lastlow': 0.0, 'volume_real': 0.0, 'volumehigh_real': 0.0, 'volumelow_real': 0.0, 'option_strike': 0.0, 'point': 0.001, 'trade_tick_value': 0.001, 'trade_tick_value_profit': 0.001, 'trade_tick_value_loss': 0.001, 'trade_tick_size': 0.001, 'trade_contract_size': 1.0, 'trade_accrued_interest': 0.0, 'trade_face_value': 0.0, 'trade_liquidity_rate': 0.0, 'volume_min': 1.0, 'volume_max': 10000.0, 'volume_step': 1.0, 'volume_limit': 0.0, 'swap_long': -7.59, 'swap_short': 2.12, 'margin_initial': 0.0, 'margin_maintenance': 0.0, 'session_volume': 0.0, 'session_turnover': 0.0, 'session_interest': 0.0, 'session_buy_orders_volume': 0.0, 'session_sell_orders_volume': 0.0, 'session_open': 0.0, 'session_close': 0.0, 'session_aw': 0.0, 'session_price_settlement': 0.0, 'session_price_limit_min': 0.0, 'session_price_limit_max': 0.0, 'margin_hedged': 0.0, 'price_change': 0.0, 'price_volatility': 0.0, 'price_theoretical': 0.0, 'price_greeks_delta': 0.0, 'price_greeks_theta': 0.0, 'price_greeks_gamma': 0.0, 'price_greeks_vega': 0.0, 'price_greeks_rho': 0.0, 'price_greeks_omega': 0.0, 'price_sensitivity': 0.0, 'basis': '', 'category': '', 'currency_base': 'EUR', 'currency_profit': 'EUR', 'currency_margin': 'EUR', 'bank': '', 'description': 'Euro Buxl Cash - FGBX', 'exchange': '', 'formula': '', 'isin': '', 'name': '#EURBUXL', 'page': '', 'path': 'Treasuries\\\\#EURBUXL'}\n{'custom': False, 'chart_mode': 0, 'select': False, 'visible': False, 'session_deals': 0, 'session_buy_orders': 0, 'session_sell_orders': 0, 'volume': 0, 'volumehigh': 0, 'volumelow': 0, 'time': 0, 'digits': 3, 'spread': 0, 'spread_float': True, 'ticks_bookdepth': 0, 'trade_calc_mode': 2, 'trade_mode': 4, 'start_time': 0, 'expiration_time': 0, 'trade_stops_level': 0, 'trade_freeze_level': 0, 'trade_exemode': 2, 'swap_mode': 5, 'swap_rollover3days': 5, 'margin_hedged_use_leg': False, 'expiration_mode': 15, 'filling_mode': 2, 'order_mode': 127, 'order_gtc_mode': 0, 'option_mode': 0, 'option_right': 0, 'bid': 0.0, 'bidhigh': 0.0, 'bidlow': 0.0, 'ask': 0.0, 'askhigh': 0.0, 'asklow': 0.0, 'last': 0.0, 'lasthigh': 0.0, 'lastlow': 0.0, 'volume_real': 0.0, 'volumehigh_real': 0.0, 'volumelow_real': 0.0, 'option_strike': 0.0, 'point': 0.001, 'trade_tick_value': 0.001, 'trade_tick_value_profit': 0.001, 'trade_tick_value_loss': 0.001, 'trade_tick_size': 0.001, 'trade_contract_size': 1.0, 'trade_accrued_interest': 0.0, 'trade_face_value': 0.0, 'trade_liquidity_rate': 0.0, 'volume_min': 1.0, 'volume_max': 10000.0, 'volume_step': 1.0, 'volume_limit': 0.0, 'swap_long': -3.68, 'swap_short': -1.5699999999999998, 'margin_initial': 0.0, 'margin_maintenance': 0.0, 'session_volume': 0.0, 'session_turnover': 0.0, 'session_interest': 0.0, 'session_buy_orders_volume': 0.0, 'session_sell_orders_volume': 0.0, 'session_open': 0.0, 'session_close': 0.0, 'session_aw': 0.0, 'session_price_settlement': 0.0, 'session_price_limit_min': 0.0, 'session_price_limit_max': 0.0, 'margin_hedged': 0.0, 'price_change': 0.0, 'price_volatility': 0.0, 'price_theoretical': 0.0, 'price_greeks_delta': 0.0, 'price_greeks_theta': 0.0, 'price_greeks_gamma': 0.0, 'price_greeks_vega': 0.0, 'price_greeks_rho': 0.0, 'price_greeks_omega': 0.0, 'price_sensitivity': 0.0, 'basis': '', 'category': '', 'currency_base': 'EUR', 'currency_profit': 'EUR', 'currency_margin': 'EUR', 'bank': '', 'description': 'Euro Schatz Cash - FGBS', 'exchange': '', 'formula': '', 'isin': '', 'name': '#EURSCHA', 'page': '', 'path': 'Treasuries\\\\#EURSCHA'}\n{'custom': False, 'chart_mode': 0, 'select': True, 'visible': True, 'session_deals': 0, 'session_buy_orders': 0, 'session_sell_orders': 0, 'volume': 0, 'volumehigh': 0, 'volumelow': 0, 'time': 1717745820, 'digits': 5, 'spread': 16, 'spread_float': True, 'ticks_bookdepth': 0, 'trade_calc_mode': 0, 'trade_mode': 4, 'start_time': 0, 'expiration_time': 0, 'trade_stops_level': 0, 'trade_freeze_level': 0, 'trade_exemode': 2, 'swap_mode': 1, 'swap_rollover3days': 3, 'margin_hedged_use_leg': False, 'expiration_mode': 15, 'filling_mode': 2, 'order_mode': 127, 'order_gtc_mode': 0, 'option_mode': 0, 'option_right': 0, 'bid': 1.0895299999999999, 'bidhigh': 1.08971, 'bidlow': 1.08861, 'ask': 1.08969, 'askhigh': 1.08987, 'asklow': 1.08877, 'last': 0.0, 'lasthigh': 0.0, 'lastlow': 0.0, 'volume_real': 0.0, 'volumehigh_real': 0.0, 'volumelow_real': 0.0, 'option_strike': 0.0, 'point': 1e-05, 'trade_tick_value': 1.0, 'trade_tick_value_profit': 1.0, 'trade_tick_value_loss': 1.0, 'trade_tick_size': 1e-05, 'trade_contract_size': 100000.0, 'trade_accrued_interest': 0.0, 'trade_face_value': 0.0, 'trade_liquidity_rate': 0.0, 'volume_min': 0.01, 'volume_max': 100.0, 'volume_step': 0.01, 'volume_limit': 0.0, 'swap_long': -5.64, 'swap_short': 2.79, 'margin_initial': 0.0, 'margin_maintenance': 0.0, 'session_volume': 0.0, 'session_turnover': 0.0, 'session_interest': 0.0, 'session_buy_orders_volume': 0.0, 'session_sell_orders_volume': 0.0, 'session_open': 1.0887, 'session_close': 1.08878, 'session_aw': 0.0, 'session_price_settlement': 0.0, 'session_price_limit_min': 0.0, 'session_price_limit_max': 0.0, 'margin_hedged': 0.0, 'price_change': 0.0762, 'price_volatility': 0.0, 'price_theoretical': 0.0, 'price_greeks_delta': 0.0, 'price_greeks_theta': 0.0, 'price_greeks_gamma': 0.0, 'price_greeks_vega': 0.0, 'price_greeks_rho': 0.0, 'price_greeks_omega': 0.0, 'price_sensitivity': 0.0, 'basis': '', 'category': '', 'currency_base': 'EUR', 'currency_profit': 'USD', 'currency_margin': 'EUR', 'bank': 'Tickmill', 'description': 'Euro vs US Dollar', 'exchange': '', 'formula': '', 'isin': '', 'name': 'EURUSD', 'page': '', 'path': 'Forex\\\\EURUSD'}\n{'custom': False, 'chart_mode': 0, 'select': False, 'visible': False, 'session_deals': 0, 'session_buy_orders': 0, 'session_sell_orders': 0, 'volume': 0, 'volumehigh': 0, 'volumelow': 0, 'time': 0, 'digits': 5, 'spread': 0, 'spread_float': True, 'ticks_bookdepth': 0, 'trade_calc_mode': 0, 'trade_mode': 4, 'start_time': 0, 'expiration_time': 0, 'trade_stops_level': 0, 'trade_freeze_level': 0, 'trade_exemode': 2, 'swap_mode': 1, 'swap_rollover3days': 3, 'margin_hedged_use_leg': False, 'expiration_mode': 15, 'filling_mode': 2, 'order_mode': 127, 'order_gtc_mode': 0, 'option_mode': 0, 'option_right': 0, 'bid': 0.0, 'bidhigh': 0.0, 'bidlow': 0.0, 'ask': 0.0, 'askhigh': 0.0, 'asklow': 0.0, 'last': 0.0, 'lasthigh': 0.0, 'lastlow': 0.0, 'volume_real': 0.0, 'volumehigh_real': 0.0, 'volumelow_real': 0.0, 'option_strike': 0.0, 'point': 1e-05, 'trade_tick_value': 0.66758, 'trade_tick_value_profit': 0.66758, 'trade_tick_value_loss': 0.6677700000000001, 'trade_tick_size': 1e-05, 'trade_contract_size': 100000.0, 'trade_accrued_interest': 0.0, 'trade_face_value': 0.0, 'trade_liquidity_rate': 0.0, 'volume_min': 0.01, 'volume_max': 100.0, 'volume_step': 0.01, 'volume_limit': 0.0, 'swap_long': -4.83, 'swap_short': -1.79, 'margin_initial': 0.0, 'margin_maintenance': 0.0, 'session_volume': 0.0, 'session_turnover': 0.0, 'session_interest': 0.0, 'session_buy_orders_volume': 0.0, 'session_sell_orders_volume': 0.0, 'session_open': 0.0, 'session_close': 0.0, 'session_aw': 0.0, 'session_price_settlement': 0.0, 'session_price_limit_min': 0.0, 'session_price_limit_max': 0.0, 'margin_hedged': 0.0, 'price_change': 0.0, 'price_volatility': 0.0, 'price_theoretical': 0.0, 'price_greeks_delta': 0.0, 'price_greeks_theta': 0.0, 'price_greeks_gamma': 0.0, 'price_greeks_vega': 0.0, 'price_greeks_rho': 0.0, 'price_greeks_omega': 0.0, 'price_sensitivity': 0.0, 'basis': '', 'category': '', 'currency_base': 'EUR', 'currency_profit': 'AUD', 'currency_margin': 'EUR', 'bank': '', 'description': 'Euro vs Australian Dollar', 'exchange': '', 'formula': '', 'isin': '', 'name': 'EURAUD', 'page': '', 'path': 'Forex\\\\EURAUD'}\n{'custom': False, 'chart_mode': 0, 'select': False, 'visible': False, 'session_deals': 0, 'session_buy_orders': 0, 'session_sell_orders': 0, 'volume': 0, 'volumehigh': 0, 'volumelow': 0, 'time': 0, 'digits': 5, 'spread': 0, 'spread_float': True, 'ticks_bookdepth': 0, 'trade_calc_mode': 0, 'trade_mode': 4, 'start_time': 0, 'expiration_time': 0, 'trade_stops_level': 0, 'trade_freeze_level': 0, 'trade_exemode': 2, 'swap_mode': 1, 'swap_rollover3days': 3, 'margin_hedged_use_leg': False, 'expiration_mode': 15, 'filling_mode': 2, 'order_mode': 127, 'order_gtc_mode': 0, 'option_mode': 0, 'option_right': 0, 'bid': 0.0, 'bidhigh': 0.0, 'bidlow': 0.0, 'ask': 0.0, 'askhigh': 0.0, 'asklow': 0.0, 'last': 0.0, 'lasthigh': 0.0, 'lastlow': 0.0, 'volume_real': 0.0, 'volumehigh_real': 0.0, 'volumelow_real': 0.0, 'option_strike': 0.0, 'point': 1e-05, 'trade_tick_value': 0.7317215945676988, 'trade_tick_value_profit': 0.7317215945676988, 'trade_tick_value_loss': 0.7318179822314596, 'trade_tick_size': 1e-05, 'trade_contract_size': 100000.0, 'trade_accrued_interest': 0.0, 'trade_face_value': 0.0, 'trade_liquidity_rate': 0.0, 'volume_min': 0.01, 'volume_max': 100.0, 'volume_step': 0.01, 'volume_limit': 0.0, 'swap_long': -5.67, 'swap_short': -0.11, 'margin_initial': 0.0, 'margin_maintenance': 0.0, 'session_volume': 0.0, 'session_turnover': 0.0, 'session_interest': 0.0, 'session_buy_orders_volume': 0.0, 'session_sell_orders_volume': 0.0, 'session_open': 0.0, 'session_close': 0.0, 'session_aw': 0.0, 'session_price_settlement': 0.0, 'session_price_limit_min': 0.0, 'session_price_limit_max': 0.0, 'margin_hedged': 0.0, 'price_change': 0.0, 'price_volatility': 0.0, 'price_theoretical': 0.0, 'price_greeks_delta': 0.0, 'price_greeks_theta': 0.0, 'price_greeks_gamma': 0.0, 'price_greeks_vega': 0.0, 'price_greeks_rho': 0.0, 'price_greeks_omega': 0.0, 'price_sensitivity': 0.0, 'basis': '', 'category': '', 'currency_base': 'EUR', 'currency_profit': 'CAD', 'currency_margin': 'EUR', 'bank': '', 'description': 'Euro vs Canadian Dollar', 'exchange': '', 'formula': '', 'isin': '', 'name': 'EURCAD', 'page': '', 'path': 'Forex\\\\EURCAD'}\n{'custom': False, 'chart_mode': 0, 'select': False, 'visible': False, 'session_deals': 0, 'session_buy_orders': 0, 'session_sell_orders': 0, 'volume': 0, 'volumehigh': 0, 'volumelow': 0, 'time': 0, 'digits': 5, 'spread': 0, 'spread_float': True, 'ticks_bookdepth': 0, 'trade_calc_mode': 0, 'trade_mode': 4, 'start_time': 0, 'expiration_time': 0, 'trade_stops_level': 0, 'trade_freeze_level': 0, 'trade_exemode': 2, 'swap_mode': 1, 'swap_rollover3days': 3, 'margin_hedged_use_leg': False, 'expiration_mode': 15, 'filling_mode': 2, 'order_mode': 127, 'order_gtc_mode': 0, 'option_mode': 0, 'option_right': 0, 'bid': 0.0, 'bidhigh': 0.0, 'bidlow': 0.0, 'ask': 0.0, 'askhigh': 0.0, 'asklow': 0.0, 'last': 0.0, 'lasthigh': 0.0, 'lastlow': 0.0, 'volume_real': 0.0, 'volumehigh_real': 0.0, 'volumelow_real': 0.0, 'option_strike': 0.0, 'point': 1e-05, 'trade_tick_value': 1.1238227956215865, 'trade_tick_value_profit': 1.1238227956215865, 'trade_tick_value_loss': 1.1240880835422264, 'trade_tick_size': 1e-05, 'trade_contract_size': 100000.0, 'trade_accrued_interest': 0.0, 'trade_face_value': 0.0, 'trade_liquidity_rate': 0.0, 'volume_min': 0.01, 'volume_max': 100.0, 'volume_step': 0.01, 'volume_limit': 0.0, 'swap_long': 4.9399999999999995, 'swap_short': -9.24, 'margin_initial': 0.0, 'margin_maintenance': 0.0, 'session_volume': 0.0, 'session_turnover': 0.0, 'session_interest': 0.0, 'session_buy_orders_volume': 0.0, 'session_sell_orders_volume': 0.0, 'session_open': 0.0, 'session_close': 0.0, 'session_aw': 0.0, 'session_price_settlement': 0.0, 'session_price_limit_min': 0.0, 'session_price_limit_max': 0.0, 'margin_hedged': 0.0, 'price_change': 0.0, 'price_volatility': 0.0, 'price_theoretical': 0.0, 'price_greeks_delta': 0.0, 'price_greeks_theta': 0.0, 'price_greeks_gamma': 0.0, 'price_greeks_vega': 0.0, 'price_greeks_rho': 0.0, 'price_greeks_omega': 0.0, 'price_sensitivity': 0.0, 'basis': '', 'category': '', 'currency_base': 'EUR', 'currency_profit': 'CHF', 'currency_margin': 'EUR', 'bank': '', 'description': 'Euro vs Swiss Franc', 'exchange': '', 'formula': '', 'isin': '', 'name': 'EURCHF', 'page': '', 'path': 'Forex\\\\EURCHF'}\n{'custom': False, 'chart_mode': 0, 'select': False, 'visible': False, 'session_deals': 0, 'session_buy_orders': 0, 'session_sell_orders': 0, 'volume': 0, 'volumehigh': 0, 'volumelow': 0, 'time': 0, 'digits': 3, 'spread': 0, 'spread_float': True, 'ticks_bookdepth': 0, 'trade_calc_mode': 0, 'trade_mode': 4, 'start_time': 0, 'expiration_time': 0, 'trade_stops_level': 0, 'trade_freeze_level': 0, 'trade_exemode': 2, 'swap_mode': 1, 'swap_rollover3days': 3, 'margin_hedged_use_leg': False, 'expiration_mode': 15, 'filling_mode': 2, 'order_mode': 127, 'order_gtc_mode': 0, 'option_mode': 0, 'option_right': 0, 'bid': 0.0, 'bidhigh': 0.0, 'bidlow': 0.0, 'ask': 0.0, 'askhigh': 0.0, 'asklow': 0.0, 'last': 0.0, 'lasthigh': 0.0, 'lastlow': 0.0, 'volume_real': 0.0, 'volumehigh_real': 0.0, 'volumelow_real': 0.0, 'option_strike': 0.0, 'point': 0.001, 'trade_tick_value': 0.0, 'trade_tick_value_profit': 0.0, 'trade_tick_value_loss': 0.0, 'trade_tick_size': 0.001, 'trade_contract_size': 100000.0, 'trade_accrued_interest': 0.0, 'trade_face_value': 0.0, 'trade_liquidity_rate': 0.0, 'volume_min': 0.01, 'volume_max': 100.0, 'volume_step': 0.01, 'volume_limit': 0.0, 'swap_long': -1.16, 'swap_short': 0.52, 'margin_initial': 0.0, 'margin_maintenance': 0.0, 'session_volume': 0.0, 'session_turnover': 0.0, 'session_interest': 0.0, 'session_buy_orders_volume': 0.0, 'session_sell_orders_volume': 0.0, 'session_open': 0.0, 'session_close': 0.0, 'session_aw': 0.0, 'session_price_settlement': 0.0, 'session_price_limit_min': 0.0, 'session_price_limit_max': 0.0, 'margin_hedged': 0.0, 'price_change': 0.0, 'price_volatility': 0.0, 'price_theoretical': 0.0, 'price_greeks_delta': 0.0, 'price_greeks_theta': 0.0, 'price_greeks_gamma': 0.0, 'price_greeks_vega': 0.0, 'price_greeks_rho': 0.0, 'price_greeks_omega': 0.0, 'price_sensitivity': 0.0, 'basis': '', 'category': '', 'currency_base': 'EUR', 'currency_profit': 'CZK', 'currency_margin': 'EUR', 'bank': '', 'description': 'Euro vs Czech Koruna', 'exchange': '', 'formula': '', 'isin': '', 'name': 'EURCZK', 'page': '', 'path': 'Forex\\\\EURCZK'}\n{'custom': False, 'chart_mode': 0, 'select': False, 'visible': False, 'session_deals': 0, 'session_buy_orders': 0, 'session_sell_orders': 0, 'volume': 0, 'volumehigh': 0, 'volumelow': 0, 'time': 0, 'digits': 5, 'spread': 0, 'spread_float': True, 'ticks_bookdepth': 0, 'trade_calc_mode': 0, 'trade_mode': 4, 'start_time': 0, 'expiration_time': 0, 'trade_stops_level': 0, 'trade_freeze_level': 0, 'trade_exemode': 2, 'swap_mode': 1, 'swap_rollover3days': 3, 'margin_hedged_use_leg': False, 'expiration_mode': 15, 'filling_mode': 2, 'order_mode': 127, 'order_gtc_mode': 0, 'option_mode': 0, 'option_right': 0, 'bid': 0.0, 'bidhigh': 0.0, 'bidlow': 0.0, 'ask': 0.0, 'askhigh': 0.0, 'asklow': 0.0, 'last': 0.0, 'lasthigh': 0.0, 'lastlow': 0.0, 'volume_real': 0.0, 'volumehigh_real': 0.0, 'volumelow_real': 0.0, 'option_strike': 0.0, 'point': 1e-05, 'trade_tick_value': 0.0, 'trade_tick_value_profit': 0.0, 'trade_tick_value_loss': 0.0, 'trade_tick_size': 1e-05, 'trade_contract_size': 100000.0, 'trade_accrued_interest': 0.0, 'trade_face_value': 0.0, 'trade_liquidity_rate': 0.0, 'volume_min': 0.01, 'volume_max': 100.0, 'volume_step': 0.01, 'volume_limit': 0.0, 'swap_long': 2.91, 'swap_short': -22.86, 'margin_initial': 0.0, 'margin_maintenance': 0.0, 'session_volume': 0.0, 'session_turnover': 0.0, 'session_interest': 0.0, 'session_buy_orders_volume': 0.0, 'session_sell_orders_volume': 0.0, 'session_open': 0.0, 'session_close': 0.0, 'session_aw': 0.0, 'session_price_settlement': 0.0, 'session_price_limit_min': 0.0, 'session_price_limit_max': 0.0, 'margin_hedged': 0.0, 'price_change': 0.0, 'price_volatility': 0.0, 'price_theoretical': 0.0, 'price_greeks_delta': 0.0, 'price_greeks_theta': 0.0, 'price_greeks_gamma': 0.0, 'price_greeks_vega': 0.0, 'price_greeks_rho': 0.0, 'price_greeks_omega': 0.0, 'price_sensitivity': 0.0, 'basis': '', 'category': '', 'currency_base': 'EUR', 'currency_profit': 'DKK', 'currency_margin': 'EUR', 'bank': '', 'description': 'Euro vs Danish Krone', 'exchange': '', 'formula': '', 'isin': '', 'name': 'EURDKK', 'page': '', 'path': 'Forex\\\\EURDKK'}\n{'custom': False, 'chart_mode': 0, 'select': True, 'visible': True, 'session_deals': 0, 'session_buy_orders': 0, 'session_sell_orders': 0, 'volume': 0, 'volumehigh': 0, 'volumelow': 0, 'time': 1717745822, 'digits': 5, 'spread': 16, 'spread_float': True, 'ticks_bookdepth': 0, 'trade_calc_mode': 0, 'trade_mode': 4, 'start_time': 0, 'expiration_time': 0, 'trade_stops_level': 0, 'trade_freeze_level': 0, 'trade_exemode': 2, 'swap_mode': 1, 'swap_rollover3days': 3, 'margin_hedged_use_leg': False, 'expiration_mode': 15, 'filling_mode': 2, 'order_mode': 127, 'order_gtc_mode': 0, 'option_mode': 0, 'option_right': 0, 'bid': 0.85178, 'bidhigh': 0.85197, 'bidlow': 0.85026, 'ask': 0.85194, 'askhigh': 0.85236, 'asklow': 0.85139, 'last': 0.0, 'lasthigh': 0.0, 'lastlow': 0.0, 'volume_real': 0.0, 'volumehigh_real': 0.0, 'volumelow_real': 0.0, 'option_strike': 0.0, 'point': 1e-05, 'trade_tick_value': 1.27898, 'trade_tick_value_profit': 1.27898, 'trade_tick_value_loss': 1.2791400000000002, 'trade_tick_size': 1e-05, 'trade_contract_size': 100000.0, 'trade_accrued_interest': 0.0, 'trade_face_value': 0.0, 'trade_liquidity_rate': 0.0, 'volume_min': 0.01, 'volume_max': 100.0, 'volume_step': 0.01, 'volume_limit': 0.0, 'swap_long': -3.7800000000000002, 'swap_short': 1.62, 'margin_initial': 0.0, 'margin_maintenance': 0.0, 'session_volume': 0.0, 'session_turnover': 0.0, 'session_interest': 0.0, 'session_buy_orders_volume': 0.0, 'session_sell_orders_volume': 0.0, 'session_open': 0.85105, 'session_close': 0.85117, 'session_aw': 0.0, 'session_price_settlement': 0.0, 'session_price_limit_min': 0.0, 'session_price_limit_max': 0.0, 'margin_hedged': 0.0, 'price_change': 0.0811, 'price_volatility': 0.0, 'price_theoretical': 0.0, 'price_greeks_delta': 0.0, 'price_greeks_theta': 0.0, 'price_greeks_gamma': 0.0, 'price_greeks_vega': 0.0, 'price_greeks_rho': 0.0, 'price_greeks_omega': 0.0, 'price_sensitivity': 0.0, 'basis': '', 'category': '', 'currency_base': 'EUR', 'currency_profit': 'GBP', 'currency_margin': 'EUR', 'bank': 'Tickmill', 'description': 'Euro vs Great Britain Pound ', 'exchange': '', 'formula': '', 'isin': '', 'name': 'EURGBP', 'page': '', 'path': 'Forex\\\\EURGBP'}\n{'custom': False, 'chart_mode': 0, 'select': False, 'visible': False, 'session_deals': 0, 'session_buy_orders': 0, 'session_sell_orders': 0, 'volume': 0, 'volumehigh': 0, 'volumelow': 0, 'time': 0, 'digits': 5, 'spread': 0, 'spread_float': True, 'ticks_bookdepth': 0, 'trade_calc_mode': 0, 'trade_mode': 4, 'start_time': 0, 'expiration_time': 0, 'trade_stops_level': 0, 'trade_freeze_level': 0, 'trade_exemode': 2, 'swap_mode': 1, 'swap_rollover3days': 3, 'margin_hedged_use_leg': False, 'expiration_mode': 15, 'filling_mode': 2, 'order_mode': 127, 'order_gtc_mode': 0, 'option_mode': 0, 'option_right': 0, 'bid': 0.0, 'bidhigh': 0.0, 'bidlow': 0.0, 'ask': 0.0, 'askhigh': 0.0, 'asklow': 0.0, 'last': 0.0, 'lasthigh': 0.0, 'lastlow': 0.0, 'volume_real': 0.0, 'volumehigh_real': 0.0, 'volumelow_real': 0.0, 'option_strike': 0.0, 'point': 1e-05, 'trade_tick_value': 0.0, 'trade_tick_value_profit': 0.0, 'trade_tick_value_loss': 0.0, 'trade_tick_size': 1e-05, 'trade_contract_size': 100000.0, 'trade_accrued_interest': 0.0, 'trade_face_value': 0.0, 'trade_liquidity_rate': 0.0, 'volume_min': 0.01, 'volume_max': 100.0, 'volume_step': 0.01, 'volume_limit': 0.0, 'swap_long': -18.27, 'swap_short': -17.01, 'margin_initial': 0.0, 'margin_maintenance': 0.0, 'session_volume': 0.0, 'session_turnover': 0.0, 'session_interest': 0.0, 'session_buy_orders_volume': 0.0, 'session_sell_orders_volume': 0.0, 'session_open': 0.0, 'session_close': 0.0, 'session_aw': 0.0, 'session_price_settlement': 0.0, 'session_price_limit_min': 0.0, 'session_price_limit_max': 0.0, 'margin_hedged': 0.0, 'price_change': 0.0, 'price_volatility': 0.0, 'price_theoretical': 0.0, 'price_greeks_delta': 0.0, 'price_greeks_theta': 0.0, 'price_greeks_gamma': 0.0, 'price_greeks_vega': 0.0, 'price_greeks_rho': 0.0, 'price_greeks_omega': 0.0, 'price_sensitivity': 0.0, 'basis': '', 'category': '', 'currency_base': 'EUR', 'currency_profit': 'HKD', 'currency_margin': 'EUR', 'bank': '', 'description': 'Euro vs Hong Kong Dollar', 'exchange': '', 'formula': '', 'isin': '', 'name': 'EURHKD', 'page': '', 'path': 'Forex\\\\EURHKD'}\n{'custom': False, 'chart_mode': 0, 'select': False, 'visible': False, 'session_deals': 0, 'session_buy_orders': 0, 'session_sell_orders': 0, 'volume': 0, 'volumehigh': 0, 'volumelow': 0, 'time': 0, 'digits': 3, 'spread': 0, 'spread_float': True, 'ticks_bookdepth': 0, 'trade_calc_mode': 0, 'trade_mode': 4, 'start_time': 0, 'expiration_time': 0, 'trade_stops_level': 0, 'trade_freeze_level': 0, 'trade_exemode': 2, 'swap_mode': 1, 'swap_rollover3days': 3, 'margin_hedged_use_leg': False, 'expiration_mode': 15, 'filling_mode': 2, 'order_mode': 127, 'order_gtc_mode': 0, 'option_mode': 0, 'option_right': 0, 'bid': 0.0, 'bidhigh': 0.0, 'bidlow': 0.0, 'ask': 0.0, 'askhigh': 0.0, 'asklow': 0.0, 'last': 0.0, 'lasthigh': 0.0, 'lastlow': 0.0, 'volume_real': 0.0, 'volumehigh_real': 0.0, 'volumelow_real': 0.0, 'option_strike': 0.0, 'point': 0.001, 'trade_tick_value': 0.0, 'trade_tick_value_profit': 0.0, 'trade_tick_value_loss': 0.0, 'trade_tick_size': 0.001, 'trade_contract_size': 100000.0, 'trade_accrued_interest': 0.0, 'trade_face_value': 0.0, 'trade_liquidity_rate': 0.0, 'volume_min': 0.01, 'volume_max': 100.0, 'volume_step': 0.01, 'volume_limit': 0.0, 'swap_long': -39.76, 'swap_short': 27.71, 'margin_initial': 0.0, 'margin_maintenance': 0.0, 'session_volume': 0.0, 'session_turnover': 0.0, 'session_interest': 0.0, 'session_buy_orders_volume': 0.0, 'session_sell_orders_volume': 0.0, 'session_open': 0.0, 'session_close': 0.0, 'session_aw': 0.0, 'session_price_settlement': 0.0, 'session_price_limit_min': 0.0, 'session_price_limit_max': 0.0, 'margin_hedged': 0.0, 'price_change': 0.0, 'price_volatility': 0.0, 'price_theoretical': 0.0, 'price_greeks_delta': 0.0, 'price_greeks_theta': 0.0, 'price_greeks_gamma': 0.0, 'price_greeks_vega': 0.0, 'price_greeks_rho': 0.0, 'price_greeks_omega': 0.0, 'price_sensitivity': 0.0, 'basis': '', 'category': '', 'currency_base': 'EUR', 'currency_profit': 'HUF', 'currency_margin': 'EUR', 'bank': '', 'description': 'Euro vs Hungarian Forint', 'exchange': '', 'formula': '', 'isin': '', 'name': 'EURHUF', 'page': '', 'path': 'Forex\\\\EURHUF'}\n{'custom': False, 'chart_mode': 0, 'select': False, 'visible': False, 'session_deals': 0, 'session_buy_orders': 0, 'session_sell_orders': 0, 'volume': 0, 'volumehigh': 0, 'volumelow': 0, 'time': 0, 'digits': 3, 'spread': 0, 'spread_float': True, 'ticks_bookdepth': 0, 'trade_calc_mode': 0, 'trade_mode': 4, 'start_time': 0, 'expiration_time': 0, 'trade_stops_level': 0, 'trade_freeze_level': 0, 'trade_exemode': 2, 'swap_mode': 1, 'swap_rollover3days': 3, 'margin_hedged_use_leg': False, 'expiration_mode': 15, 'filling_mode': 2, 'order_mode': 127, 'order_gtc_mode': 0, 'option_mode': 0, 'option_right': 0, 'bid': 0.0, 'bidhigh': 0.0, 'bidlow': 0.0, 'ask': 0.0, 'askhigh': 0.0, 'asklow': 0.0, 'last': 0.0, 'lasthigh': 0.0, 'lastlow': 0.0, 'volume_real': 0.0, 'volumehigh_real': 0.0, 'volumelow_real': 0.0, 'option_strike': 0.0, 'point': 0.001, 'trade_tick_value': 0.6428098504181479, 'trade_tick_value_profit': 0.6428098504181479, 'trade_tick_value_loss': 0.6428842358356531, 'trade_tick_size': 0.001, 'trade_contract_size': 100000.0, 'trade_accrued_interest': 0.0, 'trade_face_value': 0.0, 'trade_liquidity_rate': 0.0, 'volume_min': 0.01, 'volume_max': 100.0, 'volume_step': 0.01, 'volume_limit': 0.0, 'swap_long': 8.71, 'swap_short': -23.1, 'margin_initial': 0.0, 'margin_maintenance': 0.0, 'session_volume': 0.0, 'session_turnover': 0.0, 'session_interest': 0.0, 'session_buy_orders_volume': 0.0, 'session_sell_orders_volume': 0.0, 'session_open': 0.0, 'session_close': 0.0, 'session_aw': 0.0, 'session_price_settlement': 0.0, 'session_price_limit_min': 0.0, 'session_price_limit_max': 0.0, 'margin_hedged': 0.0, 'price_change': 0.0, 'price_volatility': 0.0, 'price_theoretical': 0.0, 'price_greeks_delta': 0.0, 'price_greeks_theta': 0.0, 'price_greeks_gamma': 0.0, 'price_greeks_vega': 0.0, 'price_greeks_rho': 0.0, 'price_greeks_omega': 0.0, 'price_sensitivity': 0.0, 'basis': '', 'category': '', 'currency_base': 'EUR', 'currency_profit': 'JPY', 'currency_margin': 'EUR', 'bank': '', 'description': 'Euro vs Japanese Yen', 'exchange': '', 'formula': '', 'isin': '', 'name': 'EURJPY', 'page': '', 'path': 'Forex\\\\EURJPY'}\n{'custom': False, 'chart_mode': 0, 'select': False, 'visible': False, 'session_deals': 0, 'session_buy_orders': 0, 'session_sell_orders': 0, 'volume': 0, 'volumehigh': 0, 'volumelow': 0, 'time': 0, 'digits': 5, 'spread': 0, 'spread_float': True, 'ticks_bookdepth': 0, 'trade_calc_mode': 0, 'trade_mode': 4, 'start_time': 0, 'expiration_time': 0, 'trade_stops_level': 0, 'trade_freeze_level': 0, 'trade_exemode': 2, 'swap_mode': 1, 'swap_rollover3days': 3, 'margin_hedged_use_leg': False, 'expiration_mode': 15, 'filling_mode': 2, 'order_mode': 127, 'order_gtc_mode': 0, 'option_mode': 0, 'option_right': 0, 'bid': 0.0, 'bidhigh': 0.0, 'bidlow': 0.0, 'ask': 0.0, 'askhigh': 0.0, 'asklow': 0.0, 'last': 0.0, 'lasthigh': 0.0, 'lastlow': 0.0, 'volume_real': 0.0, 'volumehigh_real': 0.0, 'volumelow_real': 0.0, 'option_strike': 0.0, 'point': 1e-05, 'trade_tick_value': 0.0, 'trade_tick_value_profit': 0.0, 'trade_tick_value_loss': 0.0, 'trade_tick_size': 1e-05, 'trade_contract_size': 100000.0, 'trade_accrued_interest': 0.0, 'trade_face_value': 0.0, 'trade_liquidity_rate': 0.0, 'volume_min': 0.01, 'volume_max': 100.0, 'volume_step': 0.01, 'volume_limit': 0.0, 'swap_long': -457.24, 'swap_short': 307.77, 'margin_initial': 0.0, 'margin_maintenance': 0.0, 'session_volume': 0.0, 'session_turnover': 0.0, 'session_interest': 0.0, 'session_buy_orders_volume': 0.0, 'session_sell_orders_volume': 0.0, 'session_open': 0.0, 'session_close': 0.0, 'session_aw': 0.0, 'session_price_settlement': 0.0, 'session_price_limit_min': 0.0, 'session_price_limit_max': 0.0, 'margin_hedged': 0.0, 'price_change': 0.0, 'price_volatility': 0.0, 'price_theoretical': 0.0, 'price_greeks_delta': 0.0, 'price_greeks_theta': 0.0, 'price_greeks_gamma': 0.0, 'price_greeks_vega': 0.0, 'price_greeks_rho': 0.0, 'price_greeks_omega': 0.0, 'price_sensitivity': 0.0, 'basis': '', 'category': '', 'currency_base': 'EUR', 'currency_profit': 'MXN', 'currency_margin': 'EUR', 'bank': '', 'description': 'Euro vs Mexican Pesos', 'exchange': '', 'formula': '', 'isin': '', 'name': 'EURMXN', 'page': '', 'path': 'Forex\\\\EURMXN'}\n{'custom': False, 'chart_mode': 0, 'select': False, 'visible': False, 'session_deals': 0, 'session_buy_orders': 0, 'session_sell_orders': 0, 'volume': 0, 'volumehigh': 0, 'volumelow': 0, 'time': 0, 'digits': 5, 'spread': 0, 'spread_float': True, 'ticks_bookdepth': 0, 'trade_calc_mode': 0, 'trade_mode': 4, 'start_time': 0, 'expiration_time': 0, 'trade_stops_level': 0, 'trade_freeze_level': 0, 'trade_exemode': 2, 'swap_mode': 1, 'swap_rollover3days': 3, 'margin_hedged_use_leg': False, 'expiration_mode': 15, 'filling_mode': 2, 'order_mode': 127, 'order_gtc_mode': 0, 'option_mode': 0, 'option_right': 0, 'bid': 0.0, 'bidhigh': 0.0, 'bidlow': 0.0, 'ask': 0.0, 'askhigh': 0.0, 'asklow': 0.0, 'last': 0.0, 'lasthigh': 0.0, 'lastlow': 0.0, 'volume_real': 0.0, 'volumehigh_real': 0.0, 'volumelow_real': 0.0, 'option_strike': 0.0, 'point': 1e-05, 'trade_tick_value': 0.0, 'trade_tick_value_profit': 0.0, 'trade_tick_value_loss': 0.0, 'trade_tick_size': 1e-05, 'trade_contract_size': 100000.0, 'trade_accrued_interest': 0.0, 'trade_face_value': 0.0, 'trade_liquidity_rate': 0.0, 'volume_min': 0.01, 'volume_max': 100.0, 'volume_step': 0.01, 'volume_limit': 0.0, 'swap_long': -30.52, 'swap_short': 3.33, 'margin_initial': 0.0, 'margin_maintenance': 0.0, 'session_volume': 0.0, 'session_turnover': 0.0, 'session_interest': 0.0, 'session_buy_orders_volume': 0.0, 'session_sell_orders_volume': 0.0, 'session_open': 0.0, 'session_close': 0.0, 'session_aw': 0.0, 'session_price_settlement': 0.0, 'session_price_limit_min': 0.0, 'session_price_limit_max': 0.0, 'margin_hedged': 0.0, 'price_change': 0.0, 'price_volatility': 0.0, 'price_theoretical': 0.0, 'price_greeks_delta': 0.0, 'price_greeks_theta': 0.0, 'price_greeks_gamma': 0.0, 'price_greeks_vega': 0.0, 'price_greeks_rho': 0.0, 'price_greeks_omega': 0.0, 'price_sensitivity': 0.0, 'basis': '', 'category': '', 'currency_base': 'EUR', 'currency_profit': 'NOK', 'currency_margin': 'EUR', 'bank': '', 'description': 'Euro vs Norwegian Kroner', 'exchange': '', 'formula': '', 'isin': '', 'name': 'EURNOK', 'page': '', 'path': 'Forex\\\\EURNOK'}\n{'custom': False, 'chart_mode': 0, 'select': False, 'visible': False, 'session_deals': 0, 'session_buy_orders': 0, 'session_sell_orders': 0, 'volume': 0, 'volumehigh': 0, 'volumelow': 0, 'time': 0, 'digits': 5, 'spread': 0, 'spread_float': True, 'ticks_bookdepth': 0, 'trade_calc_mode': 0, 'trade_mode': 4, 'start_time': 0, 'expiration_time': 0, 'trade_stops_level': 0, 'trade_freeze_level': 0, 'trade_exemode': 2, 'swap_mode': 1, 'swap_rollover3days': 3, 'margin_hedged_use_leg': False, 'expiration_mode': 15, 'filling_mode': 2, 'order_mode': 127, 'order_gtc_mode': 0, 'option_mode': 0, 'option_right': 0, 'bid': 0.0, 'bidhigh': 0.0, 'bidlow': 0.0, 'ask': 0.0, 'askhigh': 0.0, 'asklow': 0.0, 'last': 0.0, 'lasthigh': 0.0, 'lastlow': 0.0, 'volume_real': 0.0, 'volumehigh_real': 0.0, 'volumelow_real': 0.0, 'option_strike': 0.0, 'point': 1e-05, 'trade_tick_value': 0.62005, 'trade_tick_value_profit': 0.62005, 'trade_tick_value_loss': 0.62023, 'trade_tick_size': 1e-05, 'trade_contract_size': 100000.0, 'trade_accrued_interest': 0.0, 'trade_face_value': 0.0, 'trade_liquidity_rate': 0.0, 'volume_min': 0.01, 'volume_max': 100.0, 'volume_step': 0.01, 'volume_limit': 0.0, 'swap_long': -8.58, 'swap_short': 4.05, 'margin_initial': 0.0, 'margin_maintenance': 0.0, 'session_volume': 0.0, 'session_turnover': 0.0, 'session_interest': 0.0, 'session_buy_orders_volume': 0.0, 'session_sell_orders_volume': 0.0, 'session_open': 0.0, 'session_close': 0.0, 'session_aw': 0.0, 'session_price_settlement': 0.0, 'session_price_limit_min': 0.0, 'session_price_limit_max': 0.0, 'margin_hedged': 0.0, 'price_change': 0.0, 'price_volatility': 0.0, 'price_theoretical': 0.0, 'price_greeks_delta': 0.0, 'price_greeks_theta': 0.0, 'price_greeks_gamma': 0.0, 'price_greeks_vega': 0.0, 'price_greeks_rho': 0.0, 'price_greeks_omega': 0.0, 'price_sensitivity': 0.0, 'basis': '', 'category': '', 'currency_base': 'EUR', 'currency_profit': 'NZD', 'currency_margin': 'EUR', 'bank': '', 'description': 'Euro vs New Zealand Dollar', 'exchange': '', 'formula': '', 'isin': '', 'name': 'EURNZD', 'page': '', 'path': 'Forex\\\\EURNZD'}\n{'custom': False, 'chart_mode': 0, 'select': False, 'visible': False, 'session_deals': 0, 'session_buy_orders': 0, 'session_sell_orders': 0, 'volume': 0, 'volumehigh': 0, 'volumelow': 0, 'time': 0, 'digits': 5, 'spread': 0, 'spread_float': True, 'ticks_bookdepth': 0, 'trade_calc_mode': 0, 'trade_mode': 4, 'start_time': 0, 'expiration_time': 0, 'trade_stops_level': 0, 'trade_freeze_level': 0, 'trade_exemode': 2, 'swap_mode': 1, 'swap_rollover3days': 3, 'margin_hedged_use_leg': False, 'expiration_mode': 15, 'filling_mode': 2, 'order_mode': 127, 'order_gtc_mode': 0, 'option_mode': 0, 'option_right': 0, 'bid': 0.0, 'bidhigh': 0.0, 'bidlow': 0.0, 'ask': 0.0, 'askhigh': 0.0, 'asklow': 0.0, 'last': 0.0, 'lasthigh': 0.0, 'lastlow': 0.0, 'volume_real': 0.0, 'volumehigh_real': 0.0, 'volumelow_real': 0.0, 'option_strike': 0.0, 'point': 1e-05, 'trade_tick_value': 0.0, 'trade_tick_value_profit': 0.0, 'trade_tick_value_loss': 0.0, 'trade_tick_size': 1e-05, 'trade_contract_size': 100000.0, 'trade_accrued_interest': 0.0, 'trade_face_value': 0.0, 'trade_liquidity_rate': 0.0, 'volume_min': 0.01, 'volume_max': 100.0, 'volume_step': 0.01, 'volume_limit': 0.0, 'swap_long': -25.69, 'swap_short': 14.16, 'margin_initial': 0.0, 'margin_maintenance': 0.0, 'session_volume': 0.0, 'session_turnover': 0.0, 'session_interest': 0.0, 'session_buy_orders_volume': 0.0, 'session_sell_orders_volume': 0.0, 'session_open': 0.0, 'session_close': 0.0, 'session_aw': 0.0, 'session_price_settlement': 0.0, 'session_price_limit_min': 0.0, 'session_price_limit_max': 0.0, 'margin_hedged': 0.0, 'price_change': 0.0, 'price_volatility': 0.0, 'price_theoretical': 0.0, 'price_greeks_delta': 0.0, 'price_greeks_theta': 0.0, 'price_greeks_gamma': 0.0, 'price_greeks_vega': 0.0, 'price_greeks_rho': 0.0, 'price_greeks_omega': 0.0, 'price_sensitivity': 0.0, 'basis': '', 'category': '', 'currency_base': 'EUR', 'currency_profit': 'PLN', 'currency_margin': 'EUR', 'bank': '', 'description': 'Euro vs Polish Zloty', 'exchange': '', 'formula': '', 'isin': '', 'name': 'EURPLN', 'page': '', 'path': 'Forex\\\\EURPLN'}\n{'custom': False, 'chart_mode': 0, 'select': False, 'visible': False, 'session_deals': 0, 'session_buy_orders': 0, 'session_sell_orders': 0, 'volume': 0, 'volumehigh': 0, 'volumelow': 0, 'time': 0, 'digits': 5, 'spread': 0, 'spread_float': True, 'ticks_bookdepth': 0, 'trade_calc_mode': 0, 'trade_mode': 4, 'start_time': 0, 'expiration_time': 0, 'trade_stops_level': 0, 'trade_freeze_level': 0, 'trade_exemode': 2, 'swap_mode': 1, 'swap_rollover3days': 3, 'margin_hedged_use_leg': False, 'expiration_mode': 15, 'filling_mode': 2, 'order_mode': 127, 'order_gtc_mode': 0, 'option_mode': 0, 'option_right': 0, 'bid': 0.0, 'bidhigh': 0.0, 'bidlow': 0.0, 'ask': 0.0, 'askhigh': 0.0, 'asklow': 0.0, 'last': 0.0, 'lasthigh': 0.0, 'lastlow': 0.0, 'volume_real': 0.0, 'volumehigh_real': 0.0, 'volumelow_real': 0.0, 'option_strike': 0.0, 'point': 1e-05, 'trade_tick_value': 0.0, 'trade_tick_value_profit': 0.0, 'trade_tick_value_loss': 0.0, 'trade_tick_size': 1e-05, 'trade_contract_size': 100000.0, 'trade_accrued_interest': 0.0, 'trade_face_value': 0.0, 'trade_liquidity_rate': 0.0, 'volume_min': 0.01, 'volume_max': 100.0, 'volume_step': 0.01, 'volume_limit': 0.0, 'swap_long': -3.4699999999999998, 'swap_short': -22.89, 'margin_initial': 0.0, 'margin_maintenance': 0.0, 'session_volume': 0.0, 'session_turnover': 0.0, 'session_interest': 0.0, 'session_buy_orders_volume': 0.0, 'session_sell_orders_volume': 0.0, 'session_open': 0.0, 'session_close': 0.0, 'session_aw': 0.0, 'session_price_settlement': 0.0, 'session_price_limit_min': 0.0, 'session_price_limit_max': 0.0, 'margin_hedged': 0.0, 'price_change': 0.0, 'price_volatility': 0.0, 'price_theoretical': 0.0, 'price_greeks_delta': 0.0, 'price_greeks_theta': 0.0, 'price_greeks_gamma': 0.0, 'price_greeks_vega': 0.0, 'price_greeks_rho': 0.0, 'price_greeks_omega': 0.0, 'price_sensitivity': 0.0, 'basis': '', 'category': '', 'currency_base': 'EUR', 'currency_profit': 'SEK', 'currency_margin': 'EUR', 'bank': '', 'description': 'Euro vs Swedish Kroner', 'exchange': '', 'formula': '', 'isin': '', 'name': 'EURSEK', 'page': '', 'path': 'Forex\\\\EURSEK'}\n{'custom': False, 'chart_mode': 0, 'select': False, 'visible': False, 'session_deals': 0, 'session_buy_orders': 0, 'session_sell_orders': 0, 'volume': 0, 'volumehigh': 0, 'volumelow': 0, 'time': 0, 'digits': 5, 'spread': 0, 'spread_float': True, 'ticks_bookdepth': 0, 'trade_calc_mode': 0, 'trade_mode': 4, 'start_time': 0, 'expiration_time': 0, 'trade_stops_level': 0, 'trade_freeze_level': 0, 'trade_exemode': 2, 'swap_mode': 1, 'swap_rollover3days': 3, 'margin_hedged_use_leg': False, 'expiration_mode': 15, 'filling_mode': 2, 'order_mode': 127, 'order_gtc_mode': 0, 'option_mode': 0, 'option_right': 0, 'bid': 0.0, 'bidhigh': 0.0, 'bidlow': 0.0, 'ask': 0.0, 'askhigh': 0.0, 'asklow': 0.0, 'last': 0.0, 'lasthigh': 0.0, 'lastlow': 0.0, 'volume_real': 0.0, 'volumehigh_real': 0.0, 'volumelow_real': 0.0, 'option_strike': 0.0, 'point': 1e-05, 'trade_tick_value': 0.0, 'trade_tick_value_profit': 0.0, 'trade_tick_value_loss': 0.0, 'trade_tick_size': 1e-05, 'trade_contract_size': 100000.0, 'trade_accrued_interest': 0.0, 'trade_face_value': 0.0, 'trade_liquidity_rate': 0.0, 'volume_min': 0.01, 'volume_max': 100.0, 'volume_step': 0.01, 'volume_limit': 0.0, 'swap_long': -0.81, 'swap_short': -2.63, 'margin_initial': 0.0, 'margin_maintenance': 0.0, 'session_volume': 0.0, 'session_turnover': 0.0, 'session_interest': 0.0, 'session_buy_orders_volume': 0.0, 'session_sell_orders_volume': 0.0, 'session_open': 0.0, 'session_close': 0.0, 'session_aw': 0.0, 'session_price_settlement': 0.0, 'session_price_limit_min': 0.0, 'session_price_limit_max': 0.0, 'margin_hedged': 0.0, 'price_change': 0.0, 'price_volatility': 0.0, 'price_theoretical': 0.0, 'price_greeks_delta': 0.0, 'price_greeks_theta': 0.0, 'price_greeks_gamma': 0.0, 'price_greeks_vega': 0.0, 'price_greeks_rho': 0.0, 'price_greeks_omega': 0.0, 'price_sensitivity': 0.0, 'basis': '', 'category': '', 'currency_base': 'EUR', 'currency_profit': 'SGD', 'currency_margin': 'EUR', 'bank': '', 'description': 'Euro vs Singapore Dollar', 'exchange': '', 'formula': '', 'isin': '', 'name': 'EURSGD', 'page': '', 'path': 'Forex\\\\EURSGD'}\n{'custom': False, 'chart_mode': 0, 'select': False, 'visible': False, 'session_deals': 0, 'session_buy_orders': 0, 'session_sell_orders': 0, 'volume': 0, 'volumehigh': 0, 'volumelow': 0, 'time': 0, 'digits': 5, 'spread': 0, 'spread_float': True, 'ticks_bookdepth': 0, 'trade_calc_mode': 0, 'trade_mode': 3, 'start_time': 0, 'expiration_time': 0, 'trade_stops_level': 0, 'trade_freeze_level': 0, 'trade_exemode': 2, 'swap_mode': 1, 'swap_rollover3days': 3, 'margin_hedged_use_leg': False, 'expiration_mode': 15, 'filling_mode': 2, 'order_mode': 127, 'order_gtc_mode': 0, 'option_mode': 0, 'option_right': 0, 'bid': 0.0, 'bidhigh': 0.0, 'bidlow': 0.0, 'ask': 0.0, 'askhigh': 0.0, 'asklow': 0.0, 'last': 0.0, 'lasthigh': 0.0, 'lastlow': 0.0, 'volume_real': 0.0, 'volumehigh_real': 0.0, 'volumelow_real': 0.0, 'option_strike': 0.0, 'point': 1e-05, 'trade_tick_value': 0.0, 'trade_tick_value_profit': 0.0, 'trade_tick_value_loss': 0.0, 'trade_tick_size': 1e-05, 'trade_contract_size': 100000.0, 'trade_accrued_interest': 0.0, 'trade_face_value': 0.0, 'trade_liquidity_rate': 0.0, 'volume_min': 0.01, 'volume_max': 100.0, 'volume_step': 0.01, 'volume_limit': 0.0, 'swap_long': -4647.43, 'swap_short': 2448.19, 'margin_initial': 0.0, 'margin_maintenance': 0.0, 'session_volume': 0.0, 'session_turnover': 0.0, 'session_interest': 0.0, 'session_buy_orders_volume': 0.0, 'session_sell_orders_volume': 0.0, 'session_open': 0.0, 'session_close': 0.0, 'session_aw': 0.0, 'session_price_settlement': 0.0, 'session_price_limit_min': 0.0, 'session_price_limit_max': 0.0, 'margin_hedged': 0.0, 'price_change': 0.0, 'price_volatility': 0.0, 'price_theoretical': 0.0, 'price_greeks_delta': 0.0, 'price_greeks_theta': 0.0, 'price_greeks_gamma': 0.0, 'price_greeks_vega': 0.0, 'price_greeks_rho': 0.0, 'price_greeks_omega': 0.0, 'price_sensitivity': 0.0, 'basis': '', 'category': '', 'currency_base': 'EUR', 'currency_profit': 'TRY', 'currency_margin': 'EUR', 'bank': '', 'description': 'Euro vs Turkish Lira', 'exchange': '', 'formula': '', 'isin': '', 'name': 'EURTRY', 'page': '', 'path': 'Forex\\\\EURTRY'}\n{'custom': False, 'chart_mode': 0, 'select': False, 'visible': False, 'session_deals': 0, 'session_buy_orders': 0, 'session_sell_orders': 0, 'volume': 0, 'volumehigh': 0, 'volumelow': 0, 'time': 0, 'digits': 5, 'spread': 0, 'spread_float': True, 'ticks_bookdepth': 0, 'trade_calc_mode': 0, 'trade_mode': 4, 'start_time': 0, 'expiration_time': 0, 'trade_stops_level': 0, 'trade_freeze_level': 0, 'trade_exemode': 2, 'swap_mode': 1, 'swap_rollover3days': 3, 'margin_hedged_use_leg': False, 'expiration_mode': 15, 'filling_mode': 2, 'order_mode': 127, 'order_gtc_mode': 0, 'option_mode': 0, 'option_right': 0, 'bid': 0.0, 'bidhigh': 0.0, 'bidlow': 0.0, 'ask': 0.0, 'askhigh': 0.0, 'asklow': 0.0, 'last': 0.0, 'lasthigh': 0.0, 'lastlow': 0.0, 'volume_real': 0.0, 'volumehigh_real': 0.0, 'volumelow_real': 0.0, 'option_strike': 0.0, 'point': 1e-05, 'trade_tick_value': 0.0, 'trade_tick_value_profit': 0.0, 'trade_tick_value_loss': 0.0, 'trade_tick_size': 1e-05, 'trade_contract_size': 100000.0, 'trade_accrued_interest': 0.0, 'trade_face_value': 0.0, 'trade_liquidity_rate': 0.0, 'volume_min': 0.01, 'volume_max': 100.0, 'volume_step': 0.01, 'volume_limit': 0.0, 'swap_long': -298.06, 'swap_short': 161.72, 'margin_initial': 0.0, 'margin_maintenance': 0.0, 'session_volume': 0.0, 'session_turnover': 0.0, 'session_interest': 0.0, 'session_buy_orders_volume': 0.0, 'session_sell_orders_volume': 0.0, 'session_open': 0.0, 'session_close': 0.0, 'session_aw': 0.0, 'session_price_settlement': 0.0, 'session_price_limit_min': 0.0, 'session_price_limit_max': 0.0, 'margin_hedged': 0.0, 'price_change': 0.0, 'price_volatility': 0.0, 'price_theoretical': 0.0, 'price_greeks_delta': 0.0, 'price_greeks_theta': 0.0, 'price_greeks_gamma': 0.0, 'price_greeks_vega': 0.0, 'price_greeks_rho': 0.0, 'price_greeks_omega': 0.0, 'price_sensitivity': 0.0, 'basis': '', 'category': '', 'currency_base': 'EUR', 'currency_profit': 'ZAR', 'currency_margin': 'EUR', 'bank': '', 'description': 'Euro vs South African Rand', 'exchange': '', 'formula': '', 'isin': '', 'name': 'EURZAR', 'page': '', 'path': 'Forex\\\\EURZAR'}\n{'custom': False, 'chart_mode': 0, 'select': False, 'visible': False, 'session_deals': 0, 'session_buy_orders': 0, 'session_sell_orders': 0, 'volume': 0, 'volumehigh': 0, 'volumelow': 0, 'time': 0, 'digits': 2, 'spread': 0, 'spread_float': True, 'ticks_bookdepth': 0, 'trade_calc_mode': 0, 'trade_mode': 4, 'start_time': 0, 'expiration_time': 0, 'trade_stops_level': 0, 'trade_freeze_level': 0, 'trade_exemode': 2, 'swap_mode': 1, 'swap_rollover3days': 3, 'margin_hedged_use_leg': False, 'expiration_mode': 15, 'filling_mode': 2, 'order_mode': 127, 'order_gtc_mode': 0, 'option_mode': 0, 'option_right': 0, 'bid': 0.0, 'bidhigh': 0.0, 'bidlow': 0.0, 'ask': 0.0, 'askhigh': 0.0, 'asklow': 0.0, 'last': 0.0, 'lasthigh': 0.0, 'lastlow': 0.0, 'volume_real': 0.0, 'volumehigh_real': 0.0, 'volumelow_real': 0.0, 'option_strike': 0.0, 'point': 0.01, 'trade_tick_value': 1.0895299999999999, 'trade_tick_value_profit': 1.0895299999999999, 'trade_tick_value_loss': 1.08969, 'trade_tick_size': 0.01, 'trade_contract_size': 100.0, 'trade_accrued_interest': 0.0, 'trade_face_value': 0.0, 'trade_liquidity_rate': 0.0, 'volume_min': 0.01, 'volume_max': 100.0, 'volume_step': 0.01, 'volume_limit': 0.0, 'swap_long': -33.68, 'swap_short': 15.68, 'margin_initial': 0.0, 'margin_maintenance': 0.0, 'session_volume': 0.0, 'session_turnover': 0.0, 'session_interest': 0.0, 'session_buy_orders_volume': 0.0, 'session_sell_orders_volume': 0.0, 'session_open': 0.0, 'session_close': 0.0, 'session_aw': 0.0, 'session_price_settlement': 0.0, 'session_price_limit_min': 0.0, 'session_price_limit_max': 0.0, 'margin_hedged': 0.0, 'price_change': 0.0, 'price_volatility': 0.0, 'price_theoretical': 0.0, 'price_greeks_delta': 0.0, 'price_greeks_theta': 0.0, 'price_greeks_gamma': 0.0, 'price_greeks_vega': 0.0, 'price_greeks_rho': 0.0, 'price_greeks_omega': 0.0, 'price_sensitivity': 0.0, 'basis': '', 'category': '', 'currency_base': 'XAU', 'currency_profit': 'EUR', 'currency_margin': 'XAU', 'bank': '', 'description': 'Gold vs. Euro', 'exchange': '', 'formula': '', 'isin': '', 'name': 'XAUEUR', 'page': '', 'path': 'Forex\\\\XAUEUR'}\n</pre>"},{"location":"live/metatrader/feeder/#interactive-with-metatraderdatafeeder","title":"Interactive with MetaTraderDataFeeder\u00b6","text":""},{"location":"live/metatrader/feeder/#metatraderdatafeeder-init","title":"MetaTraderDataFeeder init\u00b6","text":""},{"location":"live/metatrader/feeder/#build-a-datafeed","title":"Build a DataFeed\u00b6","text":""},{"location":"live/metatrader/feeder/#load-datafeed-data","title":"Load DataFeed data\u00b6","text":""},{"location":"live/metatrader/feeder/#plot","title":"Plot\u00b6","text":""},{"location":"live/metatrader/feeder/#init-plotly-environment","title":"Init Plotly environment\u00b6","text":""},{"location":"live/metatrader/feeder/#show","title":"Show\u00b6","text":""},{"location":"live/metatrader/feeder/#load-markets","title":"Load markets\u00b6","text":""},{"location":"live/metatrader/trade/","title":"MetaTrader Trade","text":"In\u00a0[1]: Copied! <pre>from lettrade.exchange.metatrader import MetaTraderAPI\nfrom dotenv import load_dotenv\nimport os\n\nload_dotenv()\n\napi = MetaTraderAPI(\n    login=int(os.environ[\"MT5_LOGIN\"]),\n    password=os.environ[\"MT5_PASSWORD\"],\n    server=os.environ[\"MT5_SERVER\"],\n    # wine=os.getenv(\"MT5_WINE\", None),\n)\n</pre> from lettrade.exchange.metatrader import MetaTraderAPI from dotenv import load_dotenv import os  load_dotenv()  api = MetaTraderAPI(     login=int(os.environ[\"MT5_LOGIN\"]),     password=os.environ[\"MT5_PASSWORD\"],     server=os.environ[\"MT5_SERVER\"],     # wine=os.getenv(\"MT5_WINE\", None), ) In\u00a0[\u00a0]: Copied! <pre>from lettrade.exchange.metatrader import MetaTraderDataFeed\n\ndata = MetaTraderDataFeed(symbol=\"USDCAD\", timeframe=\"5m\", api=api)\ndata.bars_load(since=0, to=10)\ndata\n</pre> from lettrade.exchange.metatrader import MetaTraderDataFeed  data = MetaTraderDataFeed(symbol=\"USDCAD\", timeframe=\"5m\", api=api) data.bars_load(since=0, to=10) data In\u00a0[\u00a0]: Copied! <pre>info = data.symbol_info()\ninfo._asdict()\n</pre> info = data.symbol_info() info._asdict() In\u00a0[\u00a0]: Copied! <pre>from lettrade.exchange.metatrader import MetaTraderOrder, OrderType\nfrom unittest.mock import MagicMock\n\norder = MetaTraderOrder(\n    id=\"\",\n    data=data,\n    exchange=MagicMock(),\n    type=OrderType.Market,\n    size=0.1,\n    api=api,\n)\norder.place()\n</pre> from lettrade.exchange.metatrader import MetaTraderOrder, OrderType from unittest.mock import MagicMock  order = MetaTraderOrder(     id=\"\",     data=data,     exchange=MagicMock(),     type=OrderType.Market,     size=0.1,     api=api, ) order.place() In\u00a0[2]: Copied! <pre>order = api.orders_history_get(id=44222563)\norder\n</pre> order = api.orders_history_get(id=44222563) order <pre>TradeOrder(ticket=44222563, time_setup=1718898785, time_setup_msc=1718898785172, time_done=1718898785, time_done_msc=1718898785172, time_expiration=0, type=0, type_time=0, type_filling=1, state=4, magic=88888888, position_id=44222563, position_by_id=0, reason=3, volume_initial=0.01, volume_current=0.0, price_open=0.0, sl=0.0, tp=0.0, price_current=1.37025, price_stoplimit=0.0, symbol='USDCAD', comment='', external_id='')\n</pre> Out[2]: <pre>[Box({'ticket': 44222563, 'time_setup': 1718898785, 'time_setup_msc': 1718898785172, 'time_done': 1718898785, 'time_done_msc': 1718898785172, 'time_expiration': 0, 'type': 0, 'type_time': 0, 'type_filling': 1, 'state': 4, 'magic': 88888888, 'position_id': 44222563, 'position_by_id': 0, 'reason': 3, 'volume_initial': 0.01, 'volume_current': 0.0, 'price_open': 0.0, 'sl': 0.0, 'tp': 0.0, 'price_current': 1.37025, 'price_stoplimit': 0.0, 'symbol': 'USDCAD', 'comment': '', 'external_id': '', 'fees': 0.0})]</pre> In\u00a0[\u00a0]: Copied! <pre>from lettrade.exchange.metatrader import MetaTraderPosition\n\napi.positions_get(id=\"44209922\")\n</pre> from lettrade.exchange.metatrader import MetaTraderPosition  api.positions_get(id=\"44209922\") In\u00a0[\u00a0]: Copied! <pre>result = api.do_position_update(id=44209922, sl=1.370)\nresult\n</pre> result = api.do_position_update(id=44209922, sl=1.370) result In\u00a0[\u00a0]: Copied! <pre>tick = api.tick_get(symbol=\"USDCAD\")\nprice = tick.ask if True else tick.bid\n\nresult = api.do_position_close(\n    id=44209922, symbol=\"USDCAD\", price=price, size=0.1, type=1\n)\nresult\n</pre> tick = api.tick_get(symbol=\"USDCAD\") price = tick.ask if True else tick.bid  result = api.do_position_close(     id=44209922, symbol=\"USDCAD\", price=price, size=0.1, type=1 ) result In\u00a0[3]: Copied! <pre>result = api.executions_get(id=36461502)\n# result = api.executions_get(position_id=44222563)\nresult\n</pre> result = api.executions_get(id=36461502) # result = api.executions_get(position_id=44222563) result Out[3]: <pre>[Box({'ticket': 36461502, 'order': 44185981, 'time': 1718871570, 'time_msc': 1718871570304, 'type': 1, 'entry': 1, 'magic': 88888888, 'position_id': 44176376, 'reason': 5, 'volume': 0.01, 'price': 1.37144, 'commission': 0.0, 'swap': 0.0, 'profit': 0.06, 'fee': 0.0, 'symbol': 'USDCAD', 'comment': '[tp 1.37144]', 'external_id': '', 'fees': 0.0})]</pre>"},{"location":"live/metatrader/trade/#metatrader-trade","title":"MetaTrader Trade\u00b6","text":""},{"location":"live/metatrader/trade/#init-api","title":"Init API\u00b6","text":""},{"location":"live/metatrader/trade/#init-datafeed","title":"Init DataFeed\u00b6","text":""},{"location":"live/metatrader/trade/#place-new-order","title":"Place new order\u00b6","text":""},{"location":"live/metatrader/trade/#get-order-by-id","title":"Get order by id\u00b6","text":""},{"location":"live/metatrader/trade/#position","title":"Position\u00b6","text":""},{"location":"live/metatrader/trade/#get-position-by-id","title":"Get position by id\u00b6","text":""},{"location":"live/metatrader/trade/#update-position","title":"Update position\u00b6","text":""},{"location":"live/metatrader/trade/#close-position","title":"Close position\u00b6","text":""},{"location":"live/metatrader/trade/#execution","title":"Execution\u00b6","text":""},{"location":"optimize/0.lettrade/","title":"Optimize with LetTrade Grid Search","text":"In\u00a0[1]: Copied! <pre>from lettrade import DataFeed, Strategy\nfrom lettrade.exchange.backtest import ForexBackTestAccount, let_backtest\n\n\nclass SmaCross(Strategy):\n    ema1_period = 9\n    ema2_period = 21\n\n    def indicators(self, df: DataFeed):\n        df[\"ema1\"] = df.i.ema(period=self.ema1_period)\n        df[\"ema2\"] = df.i.ema(period=self.ema2_period)\n\n        df[\"signal_ema_crossover\"] = df.i.crossover(df.ema1, df.ema2)\n        df[\"signal_ema_crossunder\"] = df.i.crossunder(df.ema1, df.ema2)\n\n    def next(self, df: DataFeed):\n        if len(self.orders) &gt; 0 or len(self.positions) &gt; 0:\n            return\n\n        if df.l.signal_ema_crossover[-1]:\n            price = df.l.close[-1]\n            self.buy(size=0.1, sl=price - 0.001, tp=price + 0.001)\n        elif df.l.signal_ema_crossunder[-1]:\n            price = df.l.close[-1]\n            self.sell(size=0.1, sl=price + 0.001, tp=price - 0.001)\n\n\nlt = let_backtest(\n    strategy=SmaCross,\n    datas=\"example/data/data/EURUSD_5m_0_10000.csv\",\n    account=ForexBackTestAccount,\n    # plotter=None,\n)\n</pre> from lettrade import DataFeed, Strategy from lettrade.exchange.backtest import ForexBackTestAccount, let_backtest   class SmaCross(Strategy):     ema1_period = 9     ema2_period = 21      def indicators(self, df: DataFeed):         df[\"ema1\"] = df.i.ema(period=self.ema1_period)         df[\"ema2\"] = df.i.ema(period=self.ema2_period)          df[\"signal_ema_crossover\"] = df.i.crossover(df.ema1, df.ema2)         df[\"signal_ema_crossunder\"] = df.i.crossunder(df.ema1, df.ema2)      def next(self, df: DataFeed):         if len(self.orders) &gt; 0 or len(self.positions) &gt; 0:             return          if df.l.signal_ema_crossover[-1]:             price = df.l.close[-1]             self.buy(size=0.1, sl=price - 0.001, tp=price + 0.001)         elif df.l.signal_ema_crossunder[-1]:             price = df.l.close[-1]             self.sell(size=0.1, sl=price + 0.001, tp=price - 0.001)   lt = let_backtest(     strategy=SmaCross,     datas=\"example/data/data/EURUSD_5m_0_10000.csv\",     account=ForexBackTestAccount,     # plotter=None, ) In\u00a0[2]: Copied! <pre>lt.optimize(ema1_period=[5, 6, 7, 8, 9, 10], ema2_period=range(10, 50, 1))\n</pre> lt.optimize(ema1_period=[5, 6, 7, 8, 9, 10], ema2_period=range(10, 50, 1)) <pre>  Optimizing \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 100% [240/240] 0:00:00 0:00:00m 0:00:0000:00\n</pre> <p>Rerun Optimize will reuse optimize result cached</p> In\u00a0[3]: Copied! <pre>lt.optimize(ema1_period=range(5, 25), ema2_period=range(10, 50, 1))\n</pre> lt.optimize(ema1_period=range(5, 25), ema2_period=range(10, 50, 1)) <pre>  Optimizing \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 100% [800/800] 0:00:00 0:00:01m 0:00:0100:01\n</pre> In\u00a0[4]: Copied! <pre>lt.plotter.heatmap(x=\"ema1_period\", y=\"ema2_period\", z=\"equity\")\n</pre> lt.plotter.heatmap(x=\"ema1_period\", y=\"ema2_period\", z=\"equity\") In\u00a0[5]: Copied! <pre>lt.plotter.contour(x=\"ema1_period\", y=\"ema2_period\", z=\"equity\")\n</pre> lt.plotter.contour(x=\"ema1_period\", y=\"ema2_period\", z=\"equity\") In\u00a0[6]: Copied! <pre>lt.optimize_cache()\n</pre> lt.optimize_cache() <pre>Load caches from: data/optimize\nLoaded 799 caches\n</pre> In\u00a0[7]: Copied! <pre>lt.plotter.heatmap()\n</pre> lt.plotter.heatmap() In\u00a0[8]: Copied! <pre>lt.plotter.contour()\n</pre> lt.plotter.contour()"},{"location":"optimize/0.lettrade/#optimize-with-lettrade-grid-search","title":"Optimize with LetTrade Grid Search\u00b6","text":""},{"location":"optimize/0.lettrade/#grid-search","title":"Grid Search\u00b6","text":""},{"location":"optimize/0.lettrade/#sample-strategy","title":"Sample Strategy\u00b6","text":""},{"location":"optimize/0.lettrade/#optimize","title":"Optimize\u00b6","text":"<p><code>LetTrade</code> will auto cache optimize result</p>"},{"location":"optimize/0.lettrade/#plot","title":"Plot\u00b6","text":""},{"location":"optimize/0.lettrade/#optimize-from-cache","title":"Optimize from cache\u00b6","text":"<p>Load optimize result from cache</p>"},{"location":"optimize/0.lettrade/#plot","title":"Plot\u00b6","text":""},{"location":"optimize/1.optuna/","title":"Optimize with Optuna","text":"In\u00a0[\u00a0]: Copied! <pre>!pip install optuna\n</pre> !pip install optuna In\u00a0[1]: Copied! <pre># import talib.abstract as ta\n\nfrom lettrade import DataFeed, Strategy, indicator as i\nfrom lettrade.exchange.backtest import ForexBackTestAccount, let_backtest\nfrom lettrade.indicator.vendor.qtpylib import inject_indicators\n\ninject_indicators()\n\n\nclass SmaCross(Strategy):\n    ema1_period = 9\n    ema2_period = 21\n\n    def indicators(self, df: DataFeed):\n        # df[\"ema1\"] = ta.EMA(df, timeperiod=self.ema1_period)\n        # df[\"ema2\"] = ta.EMA(df, timeperiod=self.ema2_period)\n        df[\"ema1\"] = df.close.ema(window=self.ema1_period)\n        df[\"ema2\"] = df.close.ema(window=self.ema2_period)\n\n        df[\"signal_ema_crossover\"] = i.crossover(df.ema1, df.ema2)\n        df[\"signal_ema_crossunder\"] = i.crossunder(df.ema1, df.ema2)\n\n    def next(self, df: DataFeed):\n        if len(self.orders) &gt; 0 or len(self.positions) &gt; 0:\n            return\n\n        if df.l.signal_ema_crossover[-1]:\n            price = df.l.close[-1]\n            self.buy(size=0.1, sl=price - 0.001, tp=price + 0.001)\n        elif df.l.signal_ema_crossunder[-1]:\n            price = df.l.close[-1]\n            self.sell(size=0.1, sl=price + 0.001, tp=price - 0.001)\n\n\nlt = let_backtest(\n    strategy=SmaCross,\n    datas=\"example/data/data/EURUSD_5m_0_10000.csv\",\n    account=ForexBackTestAccount,\n    # plotter=None,\n)\n</pre> # import talib.abstract as ta  from lettrade import DataFeed, Strategy, indicator as i from lettrade.exchange.backtest import ForexBackTestAccount, let_backtest from lettrade.indicator.vendor.qtpylib import inject_indicators  inject_indicators()   class SmaCross(Strategy):     ema1_period = 9     ema2_period = 21      def indicators(self, df: DataFeed):         # df[\"ema1\"] = ta.EMA(df, timeperiod=self.ema1_period)         # df[\"ema2\"] = ta.EMA(df, timeperiod=self.ema2_period)         df[\"ema1\"] = df.close.ema(window=self.ema1_period)         df[\"ema2\"] = df.close.ema(window=self.ema2_period)          df[\"signal_ema_crossover\"] = i.crossover(df.ema1, df.ema2)         df[\"signal_ema_crossunder\"] = i.crossunder(df.ema1, df.ema2)      def next(self, df: DataFeed):         if len(self.orders) &gt; 0 or len(self.positions) &gt; 0:             return          if df.l.signal_ema_crossover[-1]:             price = df.l.close[-1]             self.buy(size=0.1, sl=price - 0.001, tp=price + 0.001)         elif df.l.signal_ema_crossunder[-1]:             price = df.l.close[-1]             self.sell(size=0.1, sl=price + 0.001, tp=price - 0.001)   lt = let_backtest(     strategy=SmaCross,     datas=\"example/data/data/EURUSD_5m_0_10000.csv\",     account=ForexBackTestAccount,     # plotter=None, ) In\u00a0[2]: Copied! <pre>import optuna\n\nlettrade_model = lt.optimize_model()\n\n\ndef train_model(trial):\n    params = {\n        \"ema1_period\": trial.suggest_int(\"ema1_period\", 5, 25, step=1),\n        \"ema2_period\": trial.suggest_int(\"ema2_period\", 10, 50, step=1),\n    }\n\n    # Model\n    result = lettrade_model(params)\n\n    # Score\n    return result[\"equity\"]\n\n\nstudy = optuna.create_study(\n    study_name=\"example-study\",\n    direction=\"maximize\",\n    # storage='sqlite:///example.db',\n    load_if_exists=True,\n)\n\nstudy.optimize(train_model, n_trials=1_000)\n</pre> import optuna  lettrade_model = lt.optimize_model()   def train_model(trial):     params = {         \"ema1_period\": trial.suggest_int(\"ema1_period\", 5, 25, step=1),         \"ema2_period\": trial.suggest_int(\"ema2_period\", 10, 50, step=1),     }      # Model     result = lettrade_model(params)      # Score     return result[\"equity\"]   study = optuna.create_study(     study_name=\"example-study\",     direction=\"maximize\",     # storage='sqlite:///example.db',     load_if_exists=True, )  study.optimize(train_model, n_trials=1_000) <pre>[I 2024-06-26 12:42:07,574] A new study created in memory with name: example-study\n[I 2024-06-26 12:42:07,778] Trial 0 finished with value: 981.08 and parameters: {'ema1_period': 17, 'ema2_period': 37}. Best is trial 0 with value: 981.08.\n[I 2024-06-26 12:42:08,042] Trial 1 finished with value: 1032.88 and parameters: {'ema1_period': 22, 'ema2_period': 48}. Best is trial 1 with value: 1032.88.\n[I 2024-06-26 12:42:08,249] Trial 2 finished with value: 935.78 and parameters: {'ema1_period': 10, 'ema2_period': 39}. Best is trial 1 with value: 1032.88.\n[I 2024-06-26 12:42:08,467] Trial 3 finished with value: 1065.02 and parameters: {'ema1_period': 21, 'ema2_period': 18}. Best is trial 3 with value: 1065.02.\n[I 2024-06-26 12:42:08,665] Trial 4 finished with value: 923.96 and parameters: {'ema1_period': 22, 'ema2_period': 41}. Best is trial 3 with value: 1065.02.\n[I 2024-06-26 12:42:08,928] Trial 5 finished with value: 922.52 and parameters: {'ema1_period': 5, 'ema2_period': 13}. Best is trial 3 with value: 1065.02.\n[I 2024-06-26 12:42:09,122] Trial 6 finished with value: 974.7 and parameters: {'ema1_period': 22, 'ema2_period': 42}. Best is trial 3 with value: 1065.02.\n[I 2024-06-26 12:42:09,337] Trial 7 finished with value: 884.96 and parameters: {'ema1_period': 9, 'ema2_period': 35}. Best is trial 3 with value: 1065.02.\n[I 2024-06-26 12:42:09,561] Trial 8 finished with value: 914.5 and parameters: {'ema1_period': 18, 'ema2_period': 20}. Best is trial 3 with value: 1065.02.\n[I 2024-06-26 12:42:09,774] Trial 9 finished with value: 994.5 and parameters: {'ema1_period': 19, 'ema2_period': 22}. Best is trial 3 with value: 1065.02.\n[I 2024-06-26 12:42:10,011] Trial 10 finished with value: 1121.98 and parameters: {'ema1_period': 25, 'ema2_period': 10}. Best is trial 10 with value: 1121.98.\n[I 2024-06-26 12:42:10,258] Trial 11 finished with value: 1153.36 and parameters: {'ema1_period': 25, 'ema2_period': 11}. Best is trial 11 with value: 1153.36.\n[I 2024-06-26 12:42:10,265] Trial 12 finished with value: 1121.98 and parameters: {'ema1_period': 25, 'ema2_period': 10}. Best is trial 11 with value: 1153.36.\n[I 2024-06-26 12:42:10,476] Trial 13 finished with value: 908.24 and parameters: {'ema1_period': 25, 'ema2_period': 27}. Best is trial 11 with value: 1153.36.\n[I 2024-06-26 12:42:10,725] Trial 14 finished with value: 933.1 and parameters: {'ema1_period': 12, 'ema2_period': 14}. Best is trial 11 with value: 1153.36.\n[I 2024-06-26 12:42:11,013] Trial 15 finished with value: 966.86 and parameters: {'ema1_period': 25, 'ema2_period': 26}. Best is trial 11 with value: 1153.36.\n[I 2024-06-26 12:42:11,262] Trial 16 finished with value: 1113.68 and parameters: {'ema1_period': 15, 'ema2_period': 10}. Best is trial 11 with value: 1153.36.\n[I 2024-06-26 12:42:11,504] Trial 17 finished with value: 975.46 and parameters: {'ema1_period': 14, 'ema2_period': 16}. Best is trial 11 with value: 1153.36.\n[I 2024-06-26 12:42:11,719] Trial 18 finished with value: 986.6 and parameters: {'ema1_period': 19, 'ema2_period': 31}. Best is trial 11 with value: 1153.36.\n[I 2024-06-26 12:42:11,939] Trial 19 finished with value: 846.76 and parameters: {'ema1_period': 23, 'ema2_period': 24}. Best is trial 11 with value: 1153.36.\n[I 2024-06-26 12:42:12,151] Trial 20 finished with value: 937.0 and parameters: {'ema1_period': 20, 'ema2_period': 31}. Best is trial 11 with value: 1153.36.\n[I 2024-06-26 12:42:12,378] Trial 21 finished with value: 1154.16 and parameters: {'ema1_period': 25, 'ema2_period': 12}. Best is trial 21 with value: 1154.16.\n[I 2024-06-26 12:42:12,606] Trial 22 finished with value: 1123.8 and parameters: {'ema1_period': 24, 'ema2_period': 13}. Best is trial 21 with value: 1154.16.\n[I 2024-06-26 12:42:12,825] Trial 23 finished with value: 1015.24 and parameters: {'ema1_period': 23, 'ema2_period': 17}. Best is trial 21 with value: 1154.16.\n[I 2024-06-26 12:42:13,058] Trial 24 finished with value: 1095.32 and parameters: {'ema1_period': 23, 'ema2_period': 14}. Best is trial 21 with value: 1154.16.\n[I 2024-06-26 12:42:13,283] Trial 25 finished with value: 894.58 and parameters: {'ema1_period': 16, 'ema2_period': 21}. Best is trial 21 with value: 1154.16.\n[I 2024-06-26 12:42:13,512] Trial 26 finished with value: 1163.5 and parameters: {'ema1_period': 23, 'ema2_period': 13}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:13,785] Trial 27 finished with value: 1025.12 and parameters: {'ema1_period': 20, 'ema2_period': 19}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:14,015] Trial 28 finished with value: 1143.02 and parameters: {'ema1_period': 21, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:14,235] Trial 29 finished with value: 1015.04 and parameters: {'ema1_period': 24, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:14,453] Trial 30 finished with value: 1123.36 and parameters: {'ema1_period': 24, 'ema2_period': 23}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:14,685] Trial 31 finished with value: 1091.24 and parameters: {'ema1_period': 21, 'ema2_period': 12}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:14,886] Trial 32 finished with value: 925.06 and parameters: {'ema1_period': 17, 'ema2_period': 50}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:15,115] Trial 33 finished with value: 1163.2 and parameters: {'ema1_period': 21, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:15,345] Trial 34 finished with value: 1085.04 and parameters: {'ema1_period': 22, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:15,565] Trial 35 finished with value: 975.6 and parameters: {'ema1_period': 23, 'ema2_period': 18}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:15,802] Trial 36 finished with value: 1110.66 and parameters: {'ema1_period': 20, 'ema2_period': 12}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:16,007] Trial 37 finished with value: 964.56 and parameters: {'ema1_period': 22, 'ema2_period': 45}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:16,240] Trial 38 finished with value: 1112.54 and parameters: {'ema1_period': 24, 'ema2_period': 10}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:16,469] Trial 39 finished with value: 906.36 and parameters: {'ema1_period': 7, 'ema2_period': 35}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:16,477] Trial 40 finished with value: 914.5 and parameters: {'ema1_period': 18, 'ema2_period': 20}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:16,484] Trial 41 finished with value: 1163.2 and parameters: {'ema1_period': 21, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:16,490] Trial 42 finished with value: 1091.24 and parameters: {'ema1_period': 21, 'ema2_period': 12}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:16,712] Trial 43 finished with value: 1085.04 and parameters: {'ema1_period': 23, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:16,719] Trial 44 finished with value: 1154.16 and parameters: {'ema1_period': 25, 'ema2_period': 12}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:16,989] Trial 45 finished with value: 1005.18 and parameters: {'ema1_period': 22, 'ema2_period': 18}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:17,221] Trial 46 finished with value: 1162.72 and parameters: {'ema1_period': 19, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:17,340] Trial 47 finished with value: 1000.0 and parameters: {'ema1_period': 19, 'ema2_period': 19}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:17,556] Trial 48 finished with value: 956.62 and parameters: {'ema1_period': 18, 'ema2_period': 28}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:17,771] Trial 49 finished with value: 975.92 and parameters: {'ema1_period': 20, 'ema2_period': 24}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:17,779] Trial 50 finished with value: 1163.2 and parameters: {'ema1_period': 21, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:17,786] Trial 51 finished with value: 1163.2 and parameters: {'ema1_period': 21, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:17,793] Trial 52 finished with value: 1162.72 and parameters: {'ema1_period': 19, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:18,020] Trial 53 finished with value: 1084.94 and parameters: {'ema1_period': 21, 'ema2_period': 17}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:18,248] Trial 54 finished with value: 904.54 and parameters: {'ema1_period': 17, 'ema2_period': 21}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:18,480] Trial 55 finished with value: 1142.64 and parameters: {'ema1_period': 20, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:18,674] Trial 56 finished with value: 917.52 and parameters: {'ema1_period': 22, 'ema2_period': 39}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:18,909] Trial 57 finished with value: 965.22 and parameters: {'ema1_period': 13, 'ema2_period': 17}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:18,917] Trial 58 finished with value: 1162.72 and parameters: {'ema1_period': 19, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:19,128] Trial 59 finished with value: 1005.28 and parameters: {'ema1_period': 21, 'ema2_period': 19}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:19,346] Trial 60 finished with value: 964.78 and parameters: {'ema1_period': 18, 'ema2_period': 22}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:19,355] Trial 61 finished with value: 1162.72 and parameters: {'ema1_period': 19, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:19,590] Trial 62 finished with value: 1000.94 and parameters: {'ema1_period': 16, 'ema2_period': 13}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:19,895] Trial 63 finished with value: 961.8 and parameters: {'ema1_period': 20, 'ema2_period': 11}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:19,903] Trial 64 finished with value: 1085.04 and parameters: {'ema1_period': 22, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:20,130] Trial 65 finished with value: 1160.68 and parameters: {'ema1_period': 19, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:20,138] Trial 66 finished with value: 1084.94 and parameters: {'ema1_period': 21, 'ema2_period': 17}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:20,248] Trial 67 finished with value: 1000.0 and parameters: {'ema1_period': 10, 'ema2_period': 10}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:20,256] Trial 68 finished with value: 1000.94 and parameters: {'ema1_period': 16, 'ema2_period': 13}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:20,493] Trial 69 finished with value: 1160.48 and parameters: {'ema1_period': 18, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:20,710] Trial 70 finished with value: 894.68 and parameters: {'ema1_period': 17, 'ema2_period': 20}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:20,933] Trial 71 finished with value: 1094.6 and parameters: {'ema1_period': 19, 'ema2_period': 18}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:21,160] Trial 72 finished with value: 1142.82 and parameters: {'ema1_period': 20, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:21,400] Trial 73 finished with value: 1122.48 and parameters: {'ema1_period': 23, 'ema2_period': 11}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:21,630] Trial 74 finished with value: 1142.84 and parameters: {'ema1_period': 22, 'ema2_period': 13}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:21,864] Trial 75 finished with value: 1162.82 and parameters: {'ema1_period': 19, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:21,872] Trial 76 finished with value: 1084.94 and parameters: {'ema1_period': 21, 'ema2_period': 17}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:21,880] Trial 77 finished with value: 1015.04 and parameters: {'ema1_period': 24, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:21,887] Trial 78 finished with value: 1142.64 and parameters: {'ema1_period': 20, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:22,155] Trial 79 finished with value: 1074.08 and parameters: {'ema1_period': 15, 'ema2_period': 11}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:22,364] Trial 80 finished with value: 978.3 and parameters: {'ema1_period': 18, 'ema2_period': 35}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:22,372] Trial 81 finished with value: 1162.72 and parameters: {'ema1_period': 19, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:22,380] Trial 82 finished with value: 1005.28 and parameters: {'ema1_period': 21, 'ema2_period': 19}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:22,613] Trial 83 finished with value: 1110.74 and parameters: {'ema1_period': 19, 'ema2_period': 13}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:22,840] Trial 84 finished with value: 1133.72 and parameters: {'ema1_period': 20, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:22,848] Trial 85 finished with value: 975.6 and parameters: {'ema1_period': 23, 'ema2_period': 18}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:22,856] Trial 86 finished with value: 1143.02 and parameters: {'ema1_period': 21, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:23,139] Trial 87 finished with value: 1162.48 and parameters: {'ema1_period': 22, 'ema2_period': 12}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:23,358] Trial 88 finished with value: 904.62 and parameters: {'ema1_period': 18, 'ema2_period': 21}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:23,592] Trial 89 finished with value: 1110.94 and parameters: {'ema1_period': 17, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:23,600] Trial 90 finished with value: 922.52 and parameters: {'ema1_period': 5, 'ema2_period': 13}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:23,607] Trial 91 finished with value: 1162.82 and parameters: {'ema1_period': 19, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:23,831] Trial 92 finished with value: 1124.06 and parameters: {'ema1_period': 19, 'ema2_period': 17}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:23,840] Trial 93 finished with value: 1133.72 and parameters: {'ema1_period': 20, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:23,847] Trial 94 finished with value: 1142.64 and parameters: {'ema1_period': 20, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:23,855] Trial 95 finished with value: 1005.18 and parameters: {'ema1_period': 22, 'ema2_period': 18}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:24,098] Trial 96 finished with value: 1000.94 and parameters: {'ema1_period': 18, 'ema2_period': 11}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:24,107] Trial 97 finished with value: 1091.24 and parameters: {'ema1_period': 21, 'ema2_period': 12}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:24,115] Trial 98 finished with value: 1124.06 and parameters: {'ema1_period': 19, 'ema2_period': 17}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:24,378] Trial 99 finished with value: 944.7 and parameters: {'ema1_period': 6, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:24,593] Trial 100 finished with value: 954.2 and parameters: {'ema1_period': 23, 'ema2_period': 20}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:24,601] Trial 101 finished with value: 1162.72 and parameters: {'ema1_period': 19, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:24,837] Trial 102 finished with value: 1011.86 and parameters: {'ema1_period': 16, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:24,846] Trial 103 finished with value: 1162.82 and parameters: {'ema1_period': 19, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:25,073] Trial 104 finished with value: 1162.62 and parameters: {'ema1_period': 18, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:25,275] Trial 105 finished with value: 897.54 and parameters: {'ema1_period': 17, 'ema2_period': 44}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:25,283] Trial 106 finished with value: 1065.02 and parameters: {'ema1_period': 21, 'ema2_period': 18}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:25,513] Trial 107 finished with value: 1120.88 and parameters: {'ema1_period': 20, 'ema2_period': 13}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:25,750] Trial 108 finished with value: 1001.7 and parameters: {'ema1_period': 21, 'ema2_period': 10}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:25,759] Trial 109 finished with value: 1025.12 and parameters: {'ema1_period': 20, 'ema2_period': 19}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:26,025] Trial 110 finished with value: 985.34 and parameters: {'ema1_period': 24, 'ema2_period': 17}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:26,034] Trial 111 finished with value: 1162.72 and parameters: {'ema1_period': 19, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:26,042] Trial 112 finished with value: 1162.82 and parameters: {'ema1_period': 19, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:26,050] Trial 113 finished with value: 1162.62 and parameters: {'ema1_period': 18, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:26,057] Trial 114 finished with value: 1160.68 and parameters: {'ema1_period': 19, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:26,065] Trial 115 finished with value: 1120.88 and parameters: {'ema1_period': 20, 'ema2_period': 13}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:26,273] Trial 116 finished with value: 956.72 and parameters: {'ema1_period': 22, 'ema2_period': 29}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:26,282] Trial 117 finished with value: 1162.62 and parameters: {'ema1_period': 18, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:26,290] Trial 118 finished with value: 1124.06 and parameters: {'ema1_period': 19, 'ema2_period': 17}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:26,502] Trial 119 finished with value: 935.92 and parameters: {'ema1_period': 20, 'ema2_period': 25}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:26,511] Trial 120 finished with value: 1065.02 and parameters: {'ema1_period': 21, 'ema2_period': 18}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:26,519] Trial 121 finished with value: 1162.72 and parameters: {'ema1_period': 19, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:26,758] Trial 122 finished with value: 1001.62 and parameters: {'ema1_period': 18, 'ema2_period': 12}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:26,969] Trial 123 finished with value: 967.06 and parameters: {'ema1_period': 19, 'ema2_period': 33}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:26,977] Trial 124 finished with value: 1142.64 and parameters: {'ema1_period': 20, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:26,986] Trial 125 finished with value: 1110.94 and parameters: {'ema1_period': 17, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:27,233] Trial 126 finished with value: 953.82 and parameters: {'ema1_period': 11, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:27,242] Trial 127 finished with value: 1142.84 and parameters: {'ema1_period': 22, 'ema2_period': 13}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:27,483] Trial 128 finished with value: 1000.1 and parameters: {'ema1_period': 19, 'ema2_period': 12}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:27,706] Trial 129 finished with value: 1074.98 and parameters: {'ema1_period': 21, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:27,715] Trial 130 finished with value: 1015.24 and parameters: {'ema1_period': 23, 'ema2_period': 17}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:27,723] Trial 131 finished with value: 1162.72 and parameters: {'ema1_period': 19, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:27,959] Trial 132 finished with value: 1110.84 and parameters: {'ema1_period': 18, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:28,190] Trial 133 finished with value: 986.24 and parameters: {'ema1_period': 14, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:28,199] Trial 134 finished with value: 1142.64 and parameters: {'ema1_period': 20, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:28,414] Trial 135 finished with value: 894.8 and parameters: {'ema1_period': 18, 'ema2_period': 19}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:28,423] Trial 136 finished with value: 1110.74 and parameters: {'ema1_period': 19, 'ema2_period': 13}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:28,431] Trial 137 finished with value: 961.8 and parameters: {'ema1_period': 20, 'ema2_period': 11}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:28,439] Trial 138 finished with value: 1065.02 and parameters: {'ema1_period': 21, 'ema2_period': 18}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:28,446] Trial 139 finished with value: 1162.82 and parameters: {'ema1_period': 19, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:28,454] Trial 140 finished with value: 1133.72 and parameters: {'ema1_period': 20, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:28,462] Trial 141 finished with value: 1124.06 and parameters: {'ema1_period': 19, 'ema2_period': 17}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:28,471] Trial 142 finished with value: 1160.48 and parameters: {'ema1_period': 18, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:28,478] Trial 143 finished with value: 1162.82 and parameters: {'ema1_period': 19, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:28,708] Trial 144 finished with value: 1160.48 and parameters: {'ema1_period': 17, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:28,717] Trial 145 finished with value: 1124.06 and parameters: {'ema1_period': 19, 'ema2_period': 17}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:28,725] Trial 146 finished with value: 1142.64 and parameters: {'ema1_period': 20, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:28,739] Trial 147 finished with value: 914.5 and parameters: {'ema1_period': 18, 'ema2_period': 20}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:28,749] Trial 148 finished with value: 1074.98 and parameters: {'ema1_period': 21, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:28,757] Trial 149 finished with value: 1162.72 and parameters: {'ema1_period': 19, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:29,048] Trial 150 finished with value: 954.22 and parameters: {'ema1_period': 25, 'ema2_period': 18}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:29,060] Trial 151 finished with value: 1160.68 and parameters: {'ema1_period': 19, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:29,298] Trial 152 finished with value: 1020.16 and parameters: {'ema1_period': 18, 'ema2_period': 13}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:29,307] Trial 153 finished with value: 1162.72 and parameters: {'ema1_period': 19, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:29,316] Trial 154 finished with value: 1142.82 and parameters: {'ema1_period': 20, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:29,534] Trial 155 finished with value: 1074.88 and parameters: {'ema1_period': 20, 'ema2_period': 17}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:29,543] Trial 156 finished with value: 1085.04 and parameters: {'ema1_period': 22, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:29,551] Trial 157 finished with value: 1160.68 and parameters: {'ema1_period': 19, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:29,753] Trial 158 finished with value: 899.16 and parameters: {'ema1_period': 18, 'ema2_period': 40}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:29,990] Trial 159 finished with value: 1152.6 and parameters: {'ema1_period': 21, 'ema2_period': 13}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:30,235] Trial 160 finished with value: 798.22 and parameters: {'ema1_period': 8, 'ema2_period': 17}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:30,244] Trial 161 finished with value: 1162.72 and parameters: {'ema1_period': 19, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:30,252] Trial 162 finished with value: 1133.72 and parameters: {'ema1_period': 20, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:30,260] Trial 163 finished with value: 1162.72 and parameters: {'ema1_period': 19, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:30,268] Trial 164 finished with value: 1110.84 and parameters: {'ema1_period': 18, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:30,276] Trial 165 finished with value: 1162.82 and parameters: {'ema1_period': 19, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:30,284] Trial 166 finished with value: 1133.72 and parameters: {'ema1_period': 20, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:30,293] Trial 167 finished with value: 1000.0 and parameters: {'ema1_period': 19, 'ema2_period': 19}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:30,531] Trial 168 finished with value: 806.22 and parameters: {'ema1_period': 16, 'ema2_period': 18}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:30,541] Trial 169 finished with value: 1000.1 and parameters: {'ema1_period': 19, 'ema2_period': 12}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:30,651] Trial 170 finished with value: 1000.0 and parameters: {'ema1_period': 17, 'ema2_period': 17}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:30,659] Trial 171 finished with value: 1142.82 and parameters: {'ema1_period': 20, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:30,670] Trial 172 finished with value: 1110.74 and parameters: {'ema1_period': 19, 'ema2_period': 13}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:30,679] Trial 173 finished with value: 1160.48 and parameters: {'ema1_period': 18, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:30,687] Trial 174 finished with value: 1160.68 and parameters: {'ema1_period': 19, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:30,695] Trial 175 finished with value: 1133.72 and parameters: {'ema1_period': 20, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:30,703] Trial 176 finished with value: 1163.2 and parameters: {'ema1_period': 21, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:30,711] Trial 177 finished with value: 1074.98 and parameters: {'ema1_period': 21, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:30,935] Trial 178 finished with value: 1153.36 and parameters: {'ema1_period': 22, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:30,946] Trial 179 finished with value: 1084.94 and parameters: {'ema1_period': 21, 'ema2_period': 17}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:30,955] Trial 180 finished with value: 1005.18 and parameters: {'ema1_period': 22, 'ema2_period': 18}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:30,963] Trial 181 finished with value: 1162.72 and parameters: {'ema1_period': 19, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:30,972] Trial 182 finished with value: 1133.72 and parameters: {'ema1_period': 20, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:30,980] Trial 183 finished with value: 1160.48 and parameters: {'ema1_period': 18, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:30,989] Trial 184 finished with value: 1160.68 and parameters: {'ema1_period': 19, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:30,997] Trial 185 finished with value: 1152.6 and parameters: {'ema1_period': 21, 'ema2_period': 13}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:31,186] Trial 186 finished with value: 992.76 and parameters: {'ema1_period': 23, 'ema2_period': 49}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:31,410] Trial 187 finished with value: 1162.32 and parameters: {'ema1_period': 18, 'ema2_period': 17}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:31,420] Trial 188 finished with value: 1142.82 and parameters: {'ema1_period': 20, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:31,638] Trial 189 finished with value: 1085.04 and parameters: {'ema1_period': 24, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:31,647] Trial 190 finished with value: 1162.82 and parameters: {'ema1_period': 19, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:31,656] Trial 191 finished with value: 1162.82 and parameters: {'ema1_period': 19, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:31,664] Trial 192 finished with value: 1162.82 and parameters: {'ema1_period': 19, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:31,673] Trial 193 finished with value: 1162.82 and parameters: {'ema1_period': 19, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:31,681] Trial 194 finished with value: 1162.82 and parameters: {'ema1_period': 19, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:31,690] Trial 195 finished with value: 1162.82 and parameters: {'ema1_period': 19, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:31,699] Trial 196 finished with value: 1074.88 and parameters: {'ema1_period': 20, 'ema2_period': 17}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:31,707] Trial 197 finished with value: 1094.6 and parameters: {'ema1_period': 19, 'ema2_period': 18}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:31,716] Trial 198 finished with value: 1162.62 and parameters: {'ema1_period': 18, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:31,724] Trial 199 finished with value: 1074.88 and parameters: {'ema1_period': 20, 'ema2_period': 17}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:31,929] Trial 200 finished with value: 900.46 and parameters: {'ema1_period': 19, 'ema2_period': 37}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:31,938] Trial 201 finished with value: 1162.82 and parameters: {'ema1_period': 19, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:31,947] Trial 202 finished with value: 1162.82 and parameters: {'ema1_period': 19, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:31,956] Trial 203 finished with value: 1162.82 and parameters: {'ema1_period': 19, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:31,964] Trial 204 finished with value: 1162.62 and parameters: {'ema1_period': 18, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:31,973] Trial 205 finished with value: 1074.88 and parameters: {'ema1_period': 20, 'ema2_period': 17}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:31,982] Trial 206 finished with value: 1162.82 and parameters: {'ema1_period': 19, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:31,990] Trial 207 finished with value: 1094.6 and parameters: {'ema1_period': 19, 'ema2_period': 18}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:31,999] Trial 208 finished with value: 1084.94 and parameters: {'ema1_period': 21, 'ema2_period': 17}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:32,008] Trial 209 finished with value: 1162.62 and parameters: {'ema1_period': 18, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:32,016] Trial 210 finished with value: 1025.12 and parameters: {'ema1_period': 20, 'ema2_period': 19}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:32,025] Trial 211 finished with value: 1162.82 and parameters: {'ema1_period': 19, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:32,034] Trial 212 finished with value: 1162.82 and parameters: {'ema1_period': 19, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:32,042] Trial 213 finished with value: 1124.06 and parameters: {'ema1_period': 19, 'ema2_period': 17}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:32,051] Trial 214 finished with value: 1162.72 and parameters: {'ema1_period': 19, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:32,273] Trial 215 finished with value: 1074.9 and parameters: {'ema1_period': 20, 'ema2_period': 18}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:32,282] Trial 216 finished with value: 1162.62 and parameters: {'ema1_period': 18, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:32,291] Trial 217 finished with value: 1124.06 and parameters: {'ema1_period': 19, 'ema2_period': 17}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:32,548] Trial 218 finished with value: 946.4 and parameters: {'ema1_period': 21, 'ema2_period': 27}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:32,558] Trial 219 finished with value: 1162.72 and parameters: {'ema1_period': 19, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:32,567] Trial 220 finished with value: 1133.72 and parameters: {'ema1_period': 20, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:32,576] Trial 221 finished with value: 1162.82 and parameters: {'ema1_period': 19, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:32,584] Trial 222 finished with value: 1162.32 and parameters: {'ema1_period': 18, 'ema2_period': 17}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:32,593] Trial 223 finished with value: 1162.72 and parameters: {'ema1_period': 19, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:32,602] Trial 224 finished with value: 1162.82 and parameters: {'ema1_period': 19, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:32,611] Trial 225 finished with value: 1160.48 and parameters: {'ema1_period': 18, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:32,619] Trial 226 finished with value: 1153.36 and parameters: {'ema1_period': 22, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:32,628] Trial 227 finished with value: 1162.82 and parameters: {'ema1_period': 19, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:32,637] Trial 228 finished with value: 1074.88 and parameters: {'ema1_period': 20, 'ema2_period': 17}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:32,646] Trial 229 finished with value: 1110.84 and parameters: {'ema1_period': 18, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:32,655] Trial 230 finished with value: 1094.6 and parameters: {'ema1_period': 19, 'ema2_period': 18}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:32,666] Trial 231 finished with value: 1162.82 and parameters: {'ema1_period': 19, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:32,677] Trial 232 finished with value: 1162.82 and parameters: {'ema1_period': 19, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:32,687] Trial 233 finished with value: 1142.82 and parameters: {'ema1_period': 20, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:32,696] Trial 234 finished with value: 1162.82 and parameters: {'ema1_period': 19, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:32,705] Trial 235 finished with value: 1124.06 and parameters: {'ema1_period': 19, 'ema2_period': 17}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:32,714] Trial 236 finished with value: 1074.98 and parameters: {'ema1_period': 21, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:32,723] Trial 237 finished with value: 1160.48 and parameters: {'ema1_period': 18, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:32,732] Trial 238 finished with value: 1074.88 and parameters: {'ema1_period': 20, 'ema2_period': 17}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:32,741] Trial 239 finished with value: 1162.72 and parameters: {'ema1_period': 19, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:32,750] Trial 240 finished with value: 1133.72 and parameters: {'ema1_period': 20, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:32,759] Trial 241 finished with value: 1162.82 and parameters: {'ema1_period': 19, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:32,768] Trial 242 finished with value: 1162.72 and parameters: {'ema1_period': 19, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:32,777] Trial 243 finished with value: 1162.82 and parameters: {'ema1_period': 19, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:32,786] Trial 244 finished with value: 1160.68 and parameters: {'ema1_period': 19, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:32,795] Trial 245 finished with value: 1162.32 and parameters: {'ema1_period': 18, 'ema2_period': 17}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:32,804] Trial 246 finished with value: 1074.9 and parameters: {'ema1_period': 20, 'ema2_period': 18}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:32,814] Trial 247 finished with value: 1162.72 and parameters: {'ema1_period': 19, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:32,823] Trial 248 finished with value: 1162.62 and parameters: {'ema1_period': 18, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:32,832] Trial 249 finished with value: 1160.68 and parameters: {'ema1_period': 19, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:32,841] Trial 250 finished with value: 1124.06 and parameters: {'ema1_period': 19, 'ema2_period': 17}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:32,851] Trial 251 finished with value: 1163.2 and parameters: {'ema1_period': 21, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:33,075] Trial 252 finished with value: 1075.0 and parameters: {'ema1_period': 22, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:33,085] Trial 253 finished with value: 1143.02 and parameters: {'ema1_period': 21, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:33,094] Trial 254 finished with value: 1163.2 and parameters: {'ema1_period': 21, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:33,104] Trial 255 finished with value: 1163.2 and parameters: {'ema1_period': 21, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:33,113] Trial 256 finished with value: 1152.6 and parameters: {'ema1_period': 21, 'ema2_period': 13}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:33,122] Trial 257 finished with value: 1143.02 and parameters: {'ema1_period': 21, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:33,315] Trial 258 finished with value: 964.46 and parameters: {'ema1_period': 21, 'ema2_period': 46}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:33,325] Trial 259 finished with value: 1075.0 and parameters: {'ema1_period': 22, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:33,334] Trial 260 finished with value: 1163.2 and parameters: {'ema1_period': 21, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:33,343] Trial 261 finished with value: 1153.36 and parameters: {'ema1_period': 22, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:33,353] Trial 262 finished with value: 1163.2 and parameters: {'ema1_period': 21, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:33,362] Trial 263 finished with value: 1143.02 and parameters: {'ema1_period': 21, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:33,372] Trial 264 finished with value: 1152.6 and parameters: {'ema1_period': 21, 'ema2_period': 13}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:33,387] Trial 265 finished with value: 1163.2 and parameters: {'ema1_period': 21, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:33,403] Trial 266 finished with value: 1075.0 and parameters: {'ema1_period': 22, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:33,414] Trial 267 finished with value: 1163.2 and parameters: {'ema1_period': 21, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:33,425] Trial 268 finished with value: 1152.6 and parameters: {'ema1_period': 21, 'ema2_period': 13}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:33,436] Trial 269 finished with value: 1143.02 and parameters: {'ema1_period': 21, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:33,448] Trial 270 finished with value: 1075.0 and parameters: {'ema1_period': 22, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:33,461] Trial 271 finished with value: 1091.24 and parameters: {'ema1_period': 21, 'ema2_period': 12}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:33,472] Trial 272 finished with value: 1163.2 and parameters: {'ema1_period': 21, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:33,482] Trial 273 finished with value: 1143.02 and parameters: {'ema1_period': 21, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:33,492] Trial 274 finished with value: 1163.2 and parameters: {'ema1_period': 21, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:33,501] Trial 275 finished with value: 1091.24 and parameters: {'ema1_period': 21, 'ema2_period': 12}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:33,511] Trial 276 finished with value: 1075.0 and parameters: {'ema1_period': 22, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:33,520] Trial 277 finished with value: 1152.6 and parameters: {'ema1_period': 21, 'ema2_period': 13}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:33,530] Trial 278 finished with value: 1163.2 and parameters: {'ema1_period': 21, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:33,539] Trial 279 finished with value: 1075.0 and parameters: {'ema1_period': 22, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:33,549] Trial 280 finished with value: 1143.02 and parameters: {'ema1_period': 21, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:33,558] Trial 281 finished with value: 1152.6 and parameters: {'ema1_period': 21, 'ema2_period': 13}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:33,568] Trial 282 finished with value: 1153.36 and parameters: {'ema1_period': 22, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:33,577] Trial 283 finished with value: 1085.04 and parameters: {'ema1_period': 23, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:33,586] Trial 284 finished with value: 1163.2 and parameters: {'ema1_period': 21, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:33,795] Trial 285 finished with value: 948.18 and parameters: {'ema1_period': 21, 'ema2_period': 31}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:33,805] Trial 286 finished with value: 1143.02 and parameters: {'ema1_period': 21, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:33,815] Trial 287 finished with value: 1075.0 and parameters: {'ema1_period': 22, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:33,824] Trial 288 finished with value: 1152.6 and parameters: {'ema1_period': 21, 'ema2_period': 13}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:33,834] Trial 289 finished with value: 1163.2 and parameters: {'ema1_period': 21, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:33,843] Trial 290 finished with value: 1163.2 and parameters: {'ema1_period': 21, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:33,853] Trial 291 finished with value: 1143.02 and parameters: {'ema1_period': 21, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:33,863] Trial 292 finished with value: 1075.0 and parameters: {'ema1_period': 22, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:33,872] Trial 293 finished with value: 1143.02 and parameters: {'ema1_period': 21, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:33,882] Trial 294 finished with value: 1152.6 and parameters: {'ema1_period': 21, 'ema2_period': 13}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:33,892] Trial 295 finished with value: 1075.0 and parameters: {'ema1_period': 22, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:34,103] Trial 296 finished with value: 1033.92 and parameters: {'ema1_period': 23, 'ema2_period': 22}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:34,113] Trial 297 finished with value: 1163.2 and parameters: {'ema1_period': 21, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:34,326] Trial 298 finished with value: 936.12 and parameters: {'ema1_period': 21, 'ema2_period': 24}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:34,337] Trial 299 finished with value: 1143.02 and parameters: {'ema1_period': 21, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:34,347] Trial 300 finished with value: 1163.2 and parameters: {'ema1_period': 21, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:34,356] Trial 301 finished with value: 1091.24 and parameters: {'ema1_period': 21, 'ema2_period': 12}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:34,366] Trial 302 finished with value: 1152.6 and parameters: {'ema1_period': 21, 'ema2_period': 13}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:34,376] Trial 303 finished with value: 1153.36 and parameters: {'ema1_period': 22, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:34,386] Trial 304 finished with value: 1163.2 and parameters: {'ema1_period': 21, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:34,395] Trial 305 finished with value: 1163.2 and parameters: {'ema1_period': 21, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:34,405] Trial 306 finished with value: 1075.0 and parameters: {'ema1_period': 22, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:34,415] Trial 307 finished with value: 1143.02 and parameters: {'ema1_period': 21, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:34,425] Trial 308 finished with value: 1152.6 and parameters: {'ema1_period': 21, 'ema2_period': 13}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:34,435] Trial 309 finished with value: 1163.2 and parameters: {'ema1_period': 21, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:34,445] Trial 310 finished with value: 1163.2 and parameters: {'ema1_period': 21, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:34,455] Trial 311 finished with value: 1143.02 and parameters: {'ema1_period': 21, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:34,687] Trial 312 finished with value: 1090.94 and parameters: {'ema1_period': 22, 'ema2_period': 11}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:34,698] Trial 313 finished with value: 1163.2 and parameters: {'ema1_period': 21, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:34,708] Trial 314 finished with value: 1163.2 and parameters: {'ema1_period': 21, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:34,717] Trial 315 finished with value: 1163.2 and parameters: {'ema1_period': 21, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:34,727] Trial 316 finished with value: 1153.36 and parameters: {'ema1_period': 22, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:34,737] Trial 317 finished with value: 1152.6 and parameters: {'ema1_period': 21, 'ema2_period': 13}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:34,746] Trial 318 finished with value: 1153.36 and parameters: {'ema1_period': 22, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:34,756] Trial 319 finished with value: 1163.2 and parameters: {'ema1_period': 21, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:34,766] Trial 320 finished with value: 974.7 and parameters: {'ema1_period': 22, 'ema2_period': 42}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:34,775] Trial 321 finished with value: 1163.2 and parameters: {'ema1_period': 21, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:34,785] Trial 322 finished with value: 1091.24 and parameters: {'ema1_period': 21, 'ema2_period': 12}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:34,795] Trial 323 finished with value: 1142.64 and parameters: {'ema1_period': 20, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:34,907] Trial 324 finished with value: 1000.0 and parameters: {'ema1_period': 13, 'ema2_period': 13}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:35,127] Trial 325 finished with value: 1014.94 and parameters: {'ema1_period': 25, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:35,139] Trial 326 finished with value: 1153.36 and parameters: {'ema1_period': 22, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:35,149] Trial 327 finished with value: 1163.2 and parameters: {'ema1_period': 21, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:35,159] Trial 328 finished with value: 1142.82 and parameters: {'ema1_period': 20, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:35,169] Trial 329 finished with value: 1152.6 and parameters: {'ema1_period': 21, 'ema2_period': 13}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:35,179] Trial 330 finished with value: 1075.0 and parameters: {'ema1_period': 22, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:35,383] Trial 331 finished with value: 900.04 and parameters: {'ema1_period': 24, 'ema2_period': 33}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:35,394] Trial 332 finished with value: 1142.64 and parameters: {'ema1_period': 20, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:35,405] Trial 333 finished with value: 1163.2 and parameters: {'ema1_period': 21, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:35,415] Trial 334 finished with value: 1143.02 and parameters: {'ema1_period': 21, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:35,425] Trial 335 finished with value: 1142.84 and parameters: {'ema1_period': 22, 'ema2_period': 13}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:35,435] Trial 336 finished with value: 1142.82 and parameters: {'ema1_period': 20, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:35,444] Trial 337 finished with value: 1163.2 and parameters: {'ema1_period': 21, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:35,454] Trial 338 finished with value: 1143.02 and parameters: {'ema1_period': 21, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:35,464] Trial 339 finished with value: 1074.88 and parameters: {'ema1_period': 20, 'ema2_period': 17}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:35,475] Trial 340 finished with value: 1090.94 and parameters: {'ema1_period': 22, 'ema2_period': 11}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:35,485] Trial 341 finished with value: 1143.02 and parameters: {'ema1_period': 21, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:35,495] Trial 342 finished with value: 1074.98 and parameters: {'ema1_period': 21, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:35,505] Trial 343 finished with value: 1162.48 and parameters: {'ema1_period': 22, 'ema2_period': 12}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:35,516] Trial 344 finished with value: 1152.6 and parameters: {'ema1_period': 21, 'ema2_period': 13}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:35,526] Trial 345 finished with value: 1142.82 and parameters: {'ema1_period': 20, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:35,536] Trial 346 finished with value: 1074.98 and parameters: {'ema1_period': 21, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:35,546] Trial 347 finished with value: 1153.36 and parameters: {'ema1_period': 22, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:35,556] Trial 348 finished with value: 1163.2 and parameters: {'ema1_period': 21, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:35,569] Trial 349 finished with value: 1074.88 and parameters: {'ema1_period': 20, 'ema2_period': 17}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:35,775] Trial 350 finished with value: 907.76 and parameters: {'ema1_period': 23, 'ema2_period': 38}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:35,787] Trial 351 finished with value: 1152.6 and parameters: {'ema1_period': 21, 'ema2_period': 13}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:35,798] Trial 352 finished with value: 1085.04 and parameters: {'ema1_period': 22, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:35,808] Trial 353 finished with value: 1142.82 and parameters: {'ema1_period': 20, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:35,819] Trial 354 finished with value: 1143.02 and parameters: {'ema1_period': 21, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:35,830] Trial 355 finished with value: 1074.98 and parameters: {'ema1_period': 21, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:35,840] Trial 356 finished with value: 1074.88 and parameters: {'ema1_period': 20, 'ema2_period': 17}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:35,851] Trial 357 finished with value: 1075.0 and parameters: {'ema1_period': 22, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:35,862] Trial 358 finished with value: 1143.02 and parameters: {'ema1_period': 21, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:36,110] Trial 359 finished with value: 849.0 and parameters: {'ema1_period': 9, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:36,121] Trial 360 finished with value: 1091.24 and parameters: {'ema1_period': 21, 'ema2_period': 12}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:36,132] Trial 361 finished with value: 956.72 and parameters: {'ema1_period': 22, 'ema2_period': 29}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:36,143] Trial 362 finished with value: 1142.82 and parameters: {'ema1_period': 20, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:36,153] Trial 363 finished with value: 1074.98 and parameters: {'ema1_period': 21, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:36,164] Trial 364 finished with value: 1142.84 and parameters: {'ema1_period': 22, 'ema2_period': 13}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:36,175] Trial 365 finished with value: 1163.2 and parameters: {'ema1_period': 21, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:36,387] Trial 366 finished with value: 936.22 and parameters: {'ema1_period': 20, 'ema2_period': 26}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:36,662] Trial 367 finished with value: 1064.82 and parameters: {'ema1_period': 23, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:36,674] Trial 368 finished with value: 1001.7 and parameters: {'ema1_period': 21, 'ema2_period': 10}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:36,685] Trial 369 finished with value: 1084.94 and parameters: {'ema1_period': 21, 'ema2_period': 17}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:36,696] Trial 370 finished with value: 1143.02 and parameters: {'ema1_period': 21, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:36,707] Trial 371 finished with value: 1075.0 and parameters: {'ema1_period': 22, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:36,717] Trial 372 finished with value: 1133.72 and parameters: {'ema1_period': 20, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:36,728] Trial 373 finished with value: 1143.02 and parameters: {'ema1_period': 21, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:36,742] Trial 374 finished with value: 1075.0 and parameters: {'ema1_period': 22, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:36,755] Trial 375 finished with value: 1120.88 and parameters: {'ema1_period': 20, 'ema2_period': 13}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:36,875] Trial 376 finished with value: 1000.0 and parameters: {'ema1_period': 15, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:36,887] Trial 377 finished with value: 1084.94 and parameters: {'ema1_period': 21, 'ema2_period': 17}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:36,897] Trial 378 finished with value: 1074.98 and parameters: {'ema1_period': 21, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:36,908] Trial 379 finished with value: 1142.64 and parameters: {'ema1_period': 20, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:36,918] Trial 380 finished with value: 1085.04 and parameters: {'ema1_period': 24, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:36,928] Trial 381 finished with value: 1085.04 and parameters: {'ema1_period': 23, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:36,939] Trial 382 finished with value: 1091.24 and parameters: {'ema1_period': 21, 'ema2_period': 12}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:36,950] Trial 383 finished with value: 1085.04 and parameters: {'ema1_period': 22, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:36,960] Trial 384 finished with value: 1163.2 and parameters: {'ema1_period': 21, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:36,971] Trial 385 finished with value: 1142.84 and parameters: {'ema1_period': 22, 'ema2_period': 13}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:36,982] Trial 386 finished with value: 1074.88 and parameters: {'ema1_period': 20, 'ema2_period': 17}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:36,995] Trial 387 finished with value: 1143.02 and parameters: {'ema1_period': 21, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:37,007] Trial 388 finished with value: 1074.98 and parameters: {'ema1_period': 21, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:37,018] Trial 389 finished with value: 1075.0 and parameters: {'ema1_period': 22, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:37,029] Trial 390 finished with value: 1133.72 and parameters: {'ema1_period': 20, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:37,040] Trial 391 finished with value: 1143.02 and parameters: {'ema1_period': 21, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:37,051] Trial 392 finished with value: 1163.2 and parameters: {'ema1_period': 21, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:37,062] Trial 393 finished with value: 1142.84 and parameters: {'ema1_period': 22, 'ema2_period': 13}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:37,072] Trial 394 finished with value: 1074.88 and parameters: {'ema1_period': 20, 'ema2_period': 17}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:37,083] Trial 395 finished with value: 1143.02 and parameters: {'ema1_period': 21, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:37,093] Trial 396 finished with value: 1075.0 and parameters: {'ema1_period': 22, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:37,104] Trial 397 finished with value: 953.82 and parameters: {'ema1_period': 11, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:37,115] Trial 398 finished with value: 1091.24 and parameters: {'ema1_period': 21, 'ema2_period': 12}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:37,126] Trial 399 finished with value: 1142.64 and parameters: {'ema1_period': 20, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:37,137] Trial 400 finished with value: 1065.02 and parameters: {'ema1_period': 21, 'ema2_period': 18}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:37,147] Trial 401 finished with value: 1074.98 and parameters: {'ema1_period': 21, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:37,158] Trial 402 finished with value: 1085.04 and parameters: {'ema1_period': 23, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:37,169] Trial 403 finished with value: 1120.88 and parameters: {'ema1_period': 20, 'ema2_period': 13}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:37,180] Trial 404 finished with value: 1074.98 and parameters: {'ema1_period': 21, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:37,396] Trial 405 finished with value: 1064.92 and parameters: {'ema1_period': 22, 'ema2_period': 17}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:37,602] Trial 406 finished with value: 890.22 and parameters: {'ema1_period': 21, 'ema2_period': 34}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:37,613] Trial 407 finished with value: 1075.0 and parameters: {'ema1_period': 22, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:37,624] Trial 408 finished with value: 1143.02 and parameters: {'ema1_period': 21, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:37,635] Trial 409 finished with value: 1120.88 and parameters: {'ema1_period': 20, 'ema2_period': 13}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:37,646] Trial 410 finished with value: 1075.0 and parameters: {'ema1_period': 22, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:37,657] Trial 411 finished with value: 1163.2 and parameters: {'ema1_period': 21, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:37,909] Trial 412 finished with value: 838.88 and parameters: {'ema1_period': 7, 'ema2_period': 17}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:37,920] Trial 413 finished with value: 975.46 and parameters: {'ema1_period': 14, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:37,931] Trial 414 finished with value: 1153.36 and parameters: {'ema1_period': 25, 'ema2_period': 11}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:37,942] Trial 415 finished with value: 1142.64 and parameters: {'ema1_period': 20, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:37,953] Trial 416 finished with value: 1074.98 and parameters: {'ema1_period': 21, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:37,964] Trial 417 finished with value: 1143.02 and parameters: {'ema1_period': 21, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:38,157] Trial 418 finished with value: 1004.86 and parameters: {'ema1_period': 22, 'ema2_period': 47}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:38,169] Trial 419 finished with value: 1152.6 and parameters: {'ema1_period': 21, 'ema2_period': 13}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:38,180] Trial 420 finished with value: 1142.82 and parameters: {'ema1_period': 20, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:38,191] Trial 421 finished with value: 1084.94 and parameters: {'ema1_period': 21, 'ema2_period': 17}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:38,201] Trial 422 finished with value: 1075.0 and parameters: {'ema1_period': 22, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:38,416] Trial 423 finished with value: 975.92 and parameters: {'ema1_period': 21, 'ema2_period': 23}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:38,429] Trial 424 finished with value: 1142.64 and parameters: {'ema1_period': 20, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:38,441] Trial 425 finished with value: 1074.98 and parameters: {'ema1_period': 21, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:38,453] Trial 426 finished with value: 1075.0 and parameters: {'ema1_period': 22, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:38,464] Trial 427 finished with value: 1142.64 and parameters: {'ema1_period': 20, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:38,475] Trial 428 finished with value: 1074.98 and parameters: {'ema1_period': 21, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:38,486] Trial 429 finished with value: 1091.24 and parameters: {'ema1_period': 21, 'ema2_period': 12}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:38,690] Trial 430 finished with value: 1002.6 and parameters: {'ema1_period': 22, 'ema2_period': 50}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:38,702] Trial 431 finished with value: 1074.9 and parameters: {'ema1_period': 20, 'ema2_period': 18}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:38,713] Trial 432 finished with value: 1163.2 and parameters: {'ema1_period': 21, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:38,725] Trial 433 finished with value: 1153.36 and parameters: {'ema1_period': 22, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:38,736] Trial 434 finished with value: 1074.98 and parameters: {'ema1_period': 21, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:38,747] Trial 435 finished with value: 1152.6 and parameters: {'ema1_period': 21, 'ema2_period': 13}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:38,759] Trial 436 finished with value: 1142.82 and parameters: {'ema1_period': 20, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:38,770] Trial 437 finished with value: 1015.24 and parameters: {'ema1_period': 23, 'ema2_period': 17}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:38,782] Trial 438 finished with value: 1142.64 and parameters: {'ema1_period': 20, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:39,006] Trial 439 finished with value: 1054.78 and parameters: {'ema1_period': 24, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:39,019] Trial 440 finished with value: 1142.84 and parameters: {'ema1_period': 22, 'ema2_period': 13}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:39,030] Trial 441 finished with value: 1074.98 and parameters: {'ema1_period': 21, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:39,226] Trial 442 finished with value: 944.86 and parameters: {'ema1_period': 21, 'ema2_period': 44}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:39,238] Trial 443 finished with value: 1163.2 and parameters: {'ema1_period': 21, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:39,249] Trial 444 finished with value: 1153.36 and parameters: {'ema1_period': 22, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:39,261] Trial 445 finished with value: 1074.88 and parameters: {'ema1_period': 20, 'ema2_period': 17}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:39,272] Trial 446 finished with value: 1074.98 and parameters: {'ema1_period': 21, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:39,518] Trial 447 finished with value: 933.94 and parameters: {'ema1_period': 13, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:39,530] Trial 448 finished with value: 1163.2 and parameters: {'ema1_period': 21, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:39,542] Trial 449 finished with value: 1142.84 and parameters: {'ema1_period': 22, 'ema2_period': 13}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:39,554] Trial 450 finished with value: 1133.72 and parameters: {'ema1_period': 20, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:39,568] Trial 451 finished with value: 1163.2 and parameters: {'ema1_period': 21, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:39,580] Trial 452 finished with value: 1065.02 and parameters: {'ema1_period': 21, 'ema2_period': 18}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:39,591] Trial 453 finished with value: 1152.6 and parameters: {'ema1_period': 21, 'ema2_period': 13}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:39,602] Trial 454 finished with value: 1095.32 and parameters: {'ema1_period': 23, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:39,614] Trial 455 finished with value: 937.0 and parameters: {'ema1_period': 20, 'ema2_period': 31}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:39,625] Trial 456 finished with value: 1064.92 and parameters: {'ema1_period': 22, 'ema2_period': 17}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:39,636] Trial 457 finished with value: 1091.24 and parameters: {'ema1_period': 21, 'ema2_period': 12}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:39,648] Trial 458 finished with value: 1085.04 and parameters: {'ema1_period': 22, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:39,659] Trial 459 finished with value: 1142.82 and parameters: {'ema1_period': 20, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:39,671] Trial 460 finished with value: 1143.02 and parameters: {'ema1_period': 21, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:39,682] Trial 461 finished with value: 1074.98 and parameters: {'ema1_period': 21, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:39,694] Trial 462 finished with value: 1142.82 and parameters: {'ema1_period': 20, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:39,705] Trial 463 finished with value: 1153.36 and parameters: {'ema1_period': 22, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:39,717] Trial 464 finished with value: 1074.98 and parameters: {'ema1_period': 21, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:39,728] Trial 465 finished with value: 1163.2 and parameters: {'ema1_period': 21, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:39,740] Trial 466 finished with value: 1142.84 and parameters: {'ema1_period': 22, 'ema2_period': 13}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:39,751] Trial 467 finished with value: 1074.88 and parameters: {'ema1_period': 20, 'ema2_period': 17}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:39,955] Trial 468 finished with value: 927.68 and parameters: {'ema1_period': 21, 'ema2_period': 40}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:39,968] Trial 469 finished with value: 1163.2 and parameters: {'ema1_period': 21, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:39,979] Trial 470 finished with value: 1153.36 and parameters: {'ema1_period': 22, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:40,196] Trial 471 finished with value: 994.5 and parameters: {'ema1_period': 20, 'ema2_period': 21}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:40,207] Trial 472 finished with value: 1163.2 and parameters: {'ema1_period': 21, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:40,219] Trial 473 finished with value: 1085.04 and parameters: {'ema1_period': 22, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:40,230] Trial 474 finished with value: 1065.02 and parameters: {'ema1_period': 21, 'ema2_period': 18}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:40,242] Trial 475 finished with value: 1120.88 and parameters: {'ema1_period': 20, 'ema2_period': 13}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:40,256] Trial 476 finished with value: 1153.36 and parameters: {'ema1_period': 22, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:40,270] Trial 477 finished with value: 1074.98 and parameters: {'ema1_period': 21, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:40,507] Trial 478 finished with value: 1049.8 and parameters: {'ema1_period': 16, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:40,520] Trial 479 finished with value: 1074.88 and parameters: {'ema1_period': 20, 'ema2_period': 17}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:40,531] Trial 480 finished with value: 1091.24 and parameters: {'ema1_period': 21, 'ema2_period': 12}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:40,543] Trial 481 finished with value: 1143.02 and parameters: {'ema1_period': 21, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:40,554] Trial 482 finished with value: 1005.28 and parameters: {'ema1_period': 21, 'ema2_period': 19}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:40,566] Trial 483 finished with value: 1075.0 and parameters: {'ema1_period': 22, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:40,578] Trial 484 finished with value: 1064.82 and parameters: {'ema1_period': 23, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:40,590] Trial 485 finished with value: 1142.64 and parameters: {'ema1_period': 20, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:40,905] Trial 486 finished with value: 935.46 and parameters: {'ema1_period': 5, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:40,919] Trial 487 finished with value: 1152.6 and parameters: {'ema1_period': 21, 'ema2_period': 13}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:40,931] Trial 488 finished with value: 1014.94 and parameters: {'ema1_period': 25, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:40,944] Trial 489 finished with value: 1084.94 and parameters: {'ema1_period': 21, 'ema2_period': 17}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:40,956] Trial 490 finished with value: 1142.64 and parameters: {'ema1_period': 20, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:40,968] Trial 491 finished with value: 1075.0 and parameters: {'ema1_period': 22, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:40,980] Trial 492 finished with value: 1142.84 and parameters: {'ema1_period': 22, 'ema2_period': 13}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:40,993] Trial 493 finished with value: 1074.98 and parameters: {'ema1_period': 21, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:41,005] Trial 494 finished with value: 1163.2 and parameters: {'ema1_period': 21, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:41,218] Trial 495 finished with value: 936.54 and parameters: {'ema1_period': 21, 'ema2_period': 28}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:41,230] Trial 496 finished with value: 1142.64 and parameters: {'ema1_period': 20, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:41,481] Trial 497 finished with value: 1090.6 and parameters: {'ema1_period': 21, 'ema2_period': 11}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:41,495] Trial 498 finished with value: 1084.94 and parameters: {'ema1_period': 21, 'ema2_period': 17}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:41,507] Trial 499 finished with value: 1133.72 and parameters: {'ema1_period': 20, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:41,519] Trial 500 finished with value: 1075.0 and parameters: {'ema1_period': 22, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:41,724] Trial 501 finished with value: 888.78 and parameters: {'ema1_period': 22, 'ema2_period': 36}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:41,737] Trial 502 finished with value: 1054.78 and parameters: {'ema1_period': 24, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:42,001] Trial 503 finished with value: 935.36 and parameters: {'ema1_period': 6, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:42,014] Trial 504 finished with value: 1074.98 and parameters: {'ema1_period': 21, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:42,026] Trial 505 finished with value: 1163.2 and parameters: {'ema1_period': 21, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:42,038] Trial 506 finished with value: 1142.84 and parameters: {'ema1_period': 22, 'ema2_period': 13}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:42,050] Trial 507 finished with value: 933.1 and parameters: {'ema1_period': 12, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:42,296] Trial 508 finished with value: 1033.02 and parameters: {'ema1_period': 15, 'ema2_period': 12}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:42,310] Trial 509 finished with value: 1074.88 and parameters: {'ema1_period': 20, 'ema2_period': 17}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:42,322] Trial 510 finished with value: 1133.72 and parameters: {'ema1_period': 20, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:42,334] Trial 511 finished with value: 1163.2 and parameters: {'ema1_period': 21, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:42,346] Trial 512 finished with value: 1065.02 and parameters: {'ema1_period': 21, 'ema2_period': 18}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:42,358] Trial 513 finished with value: 1142.64 and parameters: {'ema1_period': 20, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:42,370] Trial 514 finished with value: 1152.6 and parameters: {'ema1_period': 21, 'ema2_period': 13}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:42,382] Trial 515 finished with value: 1085.04 and parameters: {'ema1_period': 22, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:42,396] Trial 516 finished with value: 1163.2 and parameters: {'ema1_period': 21, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:42,416] Trial 517 finished with value: 1095.32 and parameters: {'ema1_period': 23, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:42,431] Trial 518 finished with value: 1084.94 and parameters: {'ema1_period': 21, 'ema2_period': 17}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:42,447] Trial 519 finished with value: 1075.0 and parameters: {'ema1_period': 22, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:42,461] Trial 520 finished with value: 1133.72 and parameters: {'ema1_period': 20, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:42,475] Trial 521 finished with value: 1143.02 and parameters: {'ema1_period': 21, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:42,489] Trial 522 finished with value: 1152.6 and parameters: {'ema1_period': 21, 'ema2_period': 13}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:42,509] Trial 523 finished with value: 1085.04 and parameters: {'ema1_period': 22, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:42,524] Trial 524 finished with value: 1163.2 and parameters: {'ema1_period': 21, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:42,538] Trial 525 finished with value: 1074.88 and parameters: {'ema1_period': 20, 'ema2_period': 17}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:42,552] Trial 526 finished with value: 1075.0 and parameters: {'ema1_period': 22, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:42,565] Trial 527 finished with value: 1091.24 and parameters: {'ema1_period': 21, 'ema2_period': 12}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:42,578] Trial 528 finished with value: 1143.02 and parameters: {'ema1_period': 21, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:42,592] Trial 529 finished with value: 1153.36 and parameters: {'ema1_period': 22, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:42,605] Trial 530 finished with value: 1133.72 and parameters: {'ema1_period': 20, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:42,618] Trial 531 finished with value: 1001.7 and parameters: {'ema1_period': 21, 'ema2_period': 10}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:42,632] Trial 532 finished with value: 1163.2 and parameters: {'ema1_period': 21, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:42,645] Trial 533 finished with value: 1133.72 and parameters: {'ema1_period': 20, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:42,658] Trial 534 finished with value: 1064.92 and parameters: {'ema1_period': 22, 'ema2_period': 17}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:42,672] Trial 535 finished with value: 1143.02 and parameters: {'ema1_period': 21, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:42,686] Trial 536 finished with value: 1152.6 and parameters: {'ema1_period': 21, 'ema2_period': 13}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:42,699] Trial 537 finished with value: 1074.9 and parameters: {'ema1_period': 20, 'ema2_period': 18}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:42,713] Trial 538 finished with value: 1085.04 and parameters: {'ema1_period': 23, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:42,726] Trial 539 finished with value: 1074.98 and parameters: {'ema1_period': 21, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:42,739] Trial 540 finished with value: 1075.0 and parameters: {'ema1_period': 22, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:42,752] Trial 541 finished with value: 1143.02 and parameters: {'ema1_period': 21, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:42,766] Trial 542 finished with value: 1162.48 and parameters: {'ema1_period': 22, 'ema2_period': 12}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:42,779] Trial 543 finished with value: 1120.88 and parameters: {'ema1_period': 20, 'ema2_period': 13}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:42,792] Trial 544 finished with value: 1142.82 and parameters: {'ema1_period': 20, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:42,813] Trial 545 finished with value: 1074.98 and parameters: {'ema1_period': 21, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:42,829] Trial 546 finished with value: 1153.36 and parameters: {'ema1_period': 22, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:42,843] Trial 547 finished with value: 1163.2 and parameters: {'ema1_period': 21, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:43,065] Trial 548 finished with value: 836.72 and parameters: {'ema1_period': 21, 'ema2_period': 26}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:43,080] Trial 549 finished with value: 985.34 and parameters: {'ema1_period': 24, 'ema2_period': 17}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:43,093] Trial 550 finished with value: 1142.64 and parameters: {'ema1_period': 20, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:43,106] Trial 551 finished with value: 975.46 and parameters: {'ema1_period': 14, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:43,119] Trial 552 finished with value: 1142.84 and parameters: {'ema1_period': 22, 'ema2_period': 13}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:43,132] Trial 553 finished with value: 1163.2 and parameters: {'ema1_period': 21, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:43,145] Trial 554 finished with value: 1074.98 and parameters: {'ema1_period': 21, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:43,158] Trial 555 finished with value: 1142.64 and parameters: {'ema1_period': 20, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:43,171] Trial 556 finished with value: 1085.04 and parameters: {'ema1_period': 23, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:43,185] Trial 557 finished with value: 1005.18 and parameters: {'ema1_period': 22, 'ema2_period': 18}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:43,198] Trial 558 finished with value: 1074.98 and parameters: {'ema1_period': 21, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:43,211] Trial 559 finished with value: 1084.94 and parameters: {'ema1_period': 21, 'ema2_period': 17}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:43,225] Trial 560 finished with value: 1152.6 and parameters: {'ema1_period': 21, 'ema2_period': 13}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:43,344] Trial 561 finished with value: 1000.0 and parameters: {'ema1_period': 20, 'ema2_period': 20}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:43,358] Trial 562 finished with value: 1075.0 and parameters: {'ema1_period': 22, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:43,372] Trial 563 finished with value: 1143.02 and parameters: {'ema1_period': 21, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:43,386] Trial 564 finished with value: 1142.82 and parameters: {'ema1_period': 20, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:43,400] Trial 565 finished with value: 1064.92 and parameters: {'ema1_period': 22, 'ema2_period': 17}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:43,417] Trial 566 finished with value: 1074.98 and parameters: {'ema1_period': 21, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:43,434] Trial 567 finished with value: 1163.2 and parameters: {'ema1_period': 21, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:43,702] Trial 568 finished with value: 809.16 and parameters: {'ema1_period': 10, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:43,717] Trial 569 finished with value: 1090.94 and parameters: {'ema1_period': 22, 'ema2_period': 11}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:43,732] Trial 570 finished with value: 1133.72 and parameters: {'ema1_period': 20, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:43,746] Trial 571 finished with value: 1143.02 and parameters: {'ema1_period': 21, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:43,759] Trial 572 finished with value: 1091.24 and parameters: {'ema1_period': 21, 'ema2_period': 12}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:43,774] Trial 573 finished with value: 1163.2 and parameters: {'ema1_period': 21, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:43,788] Trial 574 finished with value: 1085.04 and parameters: {'ema1_period': 22, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:43,802] Trial 575 finished with value: 1120.88 and parameters: {'ema1_period': 20, 'ema2_period': 13}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:43,816] Trial 576 finished with value: 1143.02 and parameters: {'ema1_period': 21, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:44,041] Trial 577 finished with value: 936.12 and parameters: {'ema1_period': 22, 'ema2_period': 23}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:44,055] Trial 578 finished with value: 1142.82 and parameters: {'ema1_period': 20, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:44,069] Trial 579 finished with value: 1084.94 and parameters: {'ema1_period': 21, 'ema2_period': 17}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:44,081] Trial 580 finished with value: 1074.98 and parameters: {'ema1_period': 21, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:44,292] Trial 581 finished with value: 974.12 and parameters: {'ema1_period': 25, 'ema2_period': 19}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:44,305] Trial 582 finished with value: 1153.36 and parameters: {'ema1_period': 22, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:44,318] Trial 583 finished with value: 1163.2 and parameters: {'ema1_period': 21, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:44,331] Trial 584 finished with value: 1120.88 and parameters: {'ema1_period': 20, 'ema2_period': 13}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:44,344] Trial 585 finished with value: 1074.98 and parameters: {'ema1_period': 21, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:44,358] Trial 586 finished with value: 1075.0 and parameters: {'ema1_period': 22, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:44,371] Trial 587 finished with value: 1142.64 and parameters: {'ema1_period': 20, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:44,387] Trial 588 finished with value: 1064.82 and parameters: {'ema1_period': 23, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:44,407] Trial 589 finished with value: 1163.2 and parameters: {'ema1_period': 21, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:44,421] Trial 590 finished with value: 1143.02 and parameters: {'ema1_period': 21, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:44,435] Trial 591 finished with value: 1074.88 and parameters: {'ema1_period': 20, 'ema2_period': 17}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:44,448] Trial 592 finished with value: 1142.84 and parameters: {'ema1_period': 22, 'ema2_period': 13}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:44,461] Trial 593 finished with value: 1163.2 and parameters: {'ema1_period': 21, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:44,474] Trial 594 finished with value: 1074.98 and parameters: {'ema1_period': 21, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:44,488] Trial 595 finished with value: 1074.9 and parameters: {'ema1_period': 20, 'ema2_period': 18}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:44,501] Trial 596 finished with value: 1152.6 and parameters: {'ema1_period': 21, 'ema2_period': 13}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:44,514] Trial 597 finished with value: 1075.0 and parameters: {'ema1_period': 22, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:44,527] Trial 598 finished with value: 1084.94 and parameters: {'ema1_period': 21, 'ema2_period': 17}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:44,541] Trial 599 finished with value: 1143.02 and parameters: {'ema1_period': 21, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:44,554] Trial 600 finished with value: 1133.72 and parameters: {'ema1_period': 20, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:44,567] Trial 601 finished with value: 1153.36 and parameters: {'ema1_period': 22, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:44,580] Trial 602 finished with value: 1163.2 and parameters: {'ema1_period': 21, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:44,593] Trial 603 finished with value: 1075.0 and parameters: {'ema1_period': 22, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:44,606] Trial 604 finished with value: 1143.02 and parameters: {'ema1_period': 21, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:44,619] Trial 605 finished with value: 1110.66 and parameters: {'ema1_period': 20, 'ema2_period': 12}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:44,633] Trial 606 finished with value: 1084.94 and parameters: {'ema1_period': 21, 'ema2_period': 17}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:44,650] Trial 607 finished with value: 935.92 and parameters: {'ema1_period': 20, 'ema2_period': 25}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:44,680] Trial 608 finished with value: 1152.6 and parameters: {'ema1_period': 21, 'ema2_period': 13}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:44,705] Trial 609 finished with value: 1085.04 and parameters: {'ema1_period': 22, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:44,728] Trial 610 finished with value: 1163.2 and parameters: {'ema1_period': 21, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:44,749] Trial 611 finished with value: 1085.04 and parameters: {'ema1_period': 23, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:44,764] Trial 612 finished with value: 1160.48 and parameters: {'ema1_period': 17, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:44,778] Trial 613 finished with value: 1143.02 and parameters: {'ema1_period': 21, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:44,793] Trial 614 finished with value: 1133.72 and parameters: {'ema1_period': 20, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:44,807] Trial 615 finished with value: 1162.48 and parameters: {'ema1_period': 22, 'ema2_period': 12}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:44,821] Trial 616 finished with value: 1143.02 and parameters: {'ema1_period': 21, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:44,836] Trial 617 finished with value: 1049.8 and parameters: {'ema1_period': 16, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:44,850] Trial 618 finished with value: 1074.88 and parameters: {'ema1_period': 20, 'ema2_period': 17}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:44,864] Trial 619 finished with value: 1143.02 and parameters: {'ema1_period': 21, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:44,879] Trial 620 finished with value: 1075.0 and parameters: {'ema1_period': 22, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:44,893] Trial 621 finished with value: 1152.6 and parameters: {'ema1_period': 21, 'ema2_period': 13}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:44,907] Trial 622 finished with value: 1133.72 and parameters: {'ema1_period': 20, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:44,921] Trial 623 finished with value: 1074.98 and parameters: {'ema1_period': 21, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:44,936] Trial 624 finished with value: 1142.84 and parameters: {'ema1_period': 22, 'ema2_period': 13}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:44,950] Trial 625 finished with value: 1065.02 and parameters: {'ema1_period': 21, 'ema2_period': 18}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:44,969] Trial 626 finished with value: 1054.78 and parameters: {'ema1_period': 24, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:44,986] Trial 627 finished with value: 1153.36 and parameters: {'ema1_period': 22, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:45,203] Trial 628 finished with value: 928.24 and parameters: {'ema1_period': 21, 'ema2_period': 32}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:45,219] Trial 629 finished with value: 1074.88 and parameters: {'ema1_period': 20, 'ema2_period': 17}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:45,234] Trial 630 finished with value: 1163.2 and parameters: {'ema1_period': 21, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:45,249] Trial 631 finished with value: 1085.04 and parameters: {'ema1_period': 22, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:45,264] Trial 632 finished with value: 1143.02 and parameters: {'ema1_period': 21, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:45,279] Trial 633 finished with value: 1142.82 and parameters: {'ema1_period': 20, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:45,294] Trial 634 finished with value: 1152.6 and parameters: {'ema1_period': 21, 'ema2_period': 13}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:45,308] Trial 635 finished with value: 1085.04 and parameters: {'ema1_period': 22, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:45,324] Trial 636 finished with value: 1085.04 and parameters: {'ema1_period': 23, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:45,644] Trial 637 finished with value: 803.24 and parameters: {'ema1_period': 8, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:45,659] Trial 638 finished with value: 1074.98 and parameters: {'ema1_period': 21, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:45,673] Trial 639 finished with value: 961.8 and parameters: {'ema1_period': 20, 'ema2_period': 11}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:45,687] Trial 640 finished with value: 1084.94 and parameters: {'ema1_period': 21, 'ema2_period': 17}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:45,701] Trial 641 finished with value: 1153.36 and parameters: {'ema1_period': 22, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:45,715] Trial 642 finished with value: 1152.6 and parameters: {'ema1_period': 21, 'ema2_period': 13}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:45,729] Trial 643 finished with value: 1142.82 and parameters: {'ema1_period': 20, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:45,743] Trial 644 finished with value: 1163.2 and parameters: {'ema1_period': 21, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:45,761] Trial 645 finished with value: 1084.94 and parameters: {'ema1_period': 21, 'ema2_period': 17}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:45,778] Trial 646 finished with value: 1142.64 and parameters: {'ema1_period': 20, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:45,792] Trial 647 finished with value: 1085.04 and parameters: {'ema1_period': 22, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:45,806] Trial 648 finished with value: 1163.2 and parameters: {'ema1_period': 21, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:45,819] Trial 649 finished with value: 1110.66 and parameters: {'ema1_period': 20, 'ema2_period': 12}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:45,833] Trial 650 finished with value: 1005.28 and parameters: {'ema1_period': 21, 'ema2_period': 19}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:46,038] Trial 651 finished with value: 879.18 and parameters: {'ema1_period': 25, 'ema2_period': 29}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:46,232] Trial 652 finished with value: 964.66 and parameters: {'ema1_period': 22, 'ema2_period': 43}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:46,247] Trial 653 finished with value: 1084.94 and parameters: {'ema1_period': 21, 'ema2_period': 17}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:46,446] Trial 654 finished with value: 923.68 and parameters: {'ema1_period': 22, 'ema2_period': 38}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:46,463] Trial 655 finished with value: 1142.64 and parameters: {'ema1_period': 20, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:46,478] Trial 656 finished with value: 1163.2 and parameters: {'ema1_period': 21, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:46,680] Trial 657 finished with value: 984.46 and parameters: {'ema1_period': 21, 'ema2_period': 48}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:46,696] Trial 658 finished with value: 1085.04 and parameters: {'ema1_period': 22, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:46,711] Trial 659 finished with value: 1143.02 and parameters: {'ema1_period': 21, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:46,725] Trial 660 finished with value: 1133.72 and parameters: {'ema1_period': 20, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:46,740] Trial 661 finished with value: 1163.2 and parameters: {'ema1_period': 21, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:46,756] Trial 662 finished with value: 1142.84 and parameters: {'ema1_period': 22, 'ema2_period': 13}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:46,773] Trial 663 finished with value: 975.6 and parameters: {'ema1_period': 23, 'ema2_period': 18}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:46,791] Trial 664 finished with value: 1143.02 and parameters: {'ema1_period': 21, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:46,806] Trial 665 finished with value: 1133.72 and parameters: {'ema1_period': 20, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:46,821] Trial 666 finished with value: 1163.2 and parameters: {'ema1_period': 21, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:46,836] Trial 667 finished with value: 1085.04 and parameters: {'ema1_period': 22, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:46,851] Trial 668 finished with value: 1143.02 and parameters: {'ema1_period': 21, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:46,866] Trial 669 finished with value: 1142.82 and parameters: {'ema1_period': 20, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:46,882] Trial 670 finished with value: 1152.6 and parameters: {'ema1_period': 21, 'ema2_period': 13}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:46,897] Trial 671 finished with value: 1163.2 and parameters: {'ema1_period': 21, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:46,913] Trial 672 finished with value: 994.5 and parameters: {'ema1_period': 20, 'ema2_period': 21}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:46,929] Trial 673 finished with value: 1064.92 and parameters: {'ema1_period': 22, 'ema2_period': 17}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:47,153] Trial 674 finished with value: 898.72 and parameters: {'ema1_period': 23, 'ema2_period': 35}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:47,170] Trial 675 finished with value: 1153.36 and parameters: {'ema1_period': 22, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:47,186] Trial 676 finished with value: 1163.2 and parameters: {'ema1_period': 21, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:47,201] Trial 677 finished with value: 1110.66 and parameters: {'ema1_period': 20, 'ema2_period': 12}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:47,216] Trial 678 finished with value: 1074.98 and parameters: {'ema1_period': 21, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:47,232] Trial 679 finished with value: 1152.6 and parameters: {'ema1_period': 21, 'ema2_period': 13}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:47,247] Trial 680 finished with value: 1064.92 and parameters: {'ema1_period': 22, 'ema2_period': 17}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:47,265] Trial 681 finished with value: 1143.02 and parameters: {'ema1_period': 21, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:47,283] Trial 682 finished with value: 1133.72 and parameters: {'ema1_period': 20, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:47,299] Trial 683 finished with value: 1163.2 and parameters: {'ema1_period': 21, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:47,315] Trial 684 finished with value: 1153.36 and parameters: {'ema1_period': 22, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:47,331] Trial 685 finished with value: 1120.88 and parameters: {'ema1_period': 20, 'ema2_period': 13}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:47,346] Trial 686 finished with value: 1090.6 and parameters: {'ema1_period': 21, 'ema2_period': 11}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:47,362] Trial 687 finished with value: 1054.78 and parameters: {'ema1_period': 24, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:47,378] Trial 688 finished with value: 1074.98 and parameters: {'ema1_period': 21, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:47,398] Trial 689 finished with value: 965.22 and parameters: {'ema1_period': 13, 'ema2_period': 17}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:47,420] Trial 690 finished with value: 1075.0 and parameters: {'ema1_period': 22, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:47,438] Trial 691 finished with value: 1143.02 and parameters: {'ema1_period': 21, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:47,458] Trial 692 finished with value: 1074.9 and parameters: {'ema1_period': 20, 'ema2_period': 18}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:47,477] Trial 693 finished with value: 1143.02 and parameters: {'ema1_period': 21, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:47,728] Trial 694 finished with value: 1030.54 and parameters: {'ema1_period': 22, 'ema2_period': 10}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:47,745] Trial 695 finished with value: 1074.98 and parameters: {'ema1_period': 21, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:47,761] Trial 696 finished with value: 1163.2 and parameters: {'ema1_period': 21, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:47,776] Trial 697 finished with value: 1133.72 and parameters: {'ema1_period': 20, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:47,792] Trial 698 finished with value: 1162.48 and parameters: {'ema1_period': 22, 'ema2_period': 12}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:47,810] Trial 699 finished with value: 1152.6 and parameters: {'ema1_period': 21, 'ema2_period': 13}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:47,827] Trial 700 finished with value: 1142.82 and parameters: {'ema1_period': 20, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:47,843] Trial 701 finished with value: 1074.98 and parameters: {'ema1_period': 21, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:48,069] Trial 702 finished with value: 966.88 and parameters: {'ema1_period': 23, 'ema2_period': 27}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:48,086] Trial 703 finished with value: 1064.92 and parameters: {'ema1_period': 22, 'ema2_period': 17}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:48,102] Trial 704 finished with value: 933.1 and parameters: {'ema1_period': 12, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:48,327] Trial 705 finished with value: 956.92 and parameters: {'ema1_period': 21, 'ema2_period': 30}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:48,344] Trial 706 finished with value: 1142.82 and parameters: {'ema1_period': 20, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:48,359] Trial 707 finished with value: 1142.84 and parameters: {'ema1_period': 22, 'ema2_period': 13}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:48,375] Trial 708 finished with value: 1163.2 and parameters: {'ema1_period': 21, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:48,392] Trial 709 finished with value: 1074.98 and parameters: {'ema1_period': 21, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:48,407] Trial 710 finished with value: 1143.02 and parameters: {'ema1_period': 21, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:48,423] Trial 711 finished with value: 1074.88 and parameters: {'ema1_period': 20, 'ema2_period': 17}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:48,439] Trial 712 finished with value: 1153.36 and parameters: {'ema1_period': 22, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:48,454] Trial 713 finished with value: 1163.2 and parameters: {'ema1_period': 21, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:48,470] Trial 714 finished with value: 1133.72 and parameters: {'ema1_period': 20, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:48,486] Trial 715 finished with value: 1143.02 and parameters: {'ema1_period': 21, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:48,507] Trial 716 finished with value: 1142.84 and parameters: {'ema1_period': 22, 'ema2_period': 13}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:48,525] Trial 717 finished with value: 1163.2 and parameters: {'ema1_period': 21, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:48,541] Trial 718 finished with value: 953.82 and parameters: {'ema1_period': 11, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:48,774] Trial 719 finished with value: 1045.48 and parameters: {'ema1_period': 20, 'ema2_period': 22}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:48,790] Trial 720 finished with value: 1163.2 and parameters: {'ema1_period': 21, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:48,805] Trial 721 finished with value: 1064.92 and parameters: {'ema1_period': 22, 'ema2_period': 17}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:48,821] Trial 722 finished with value: 1065.02 and parameters: {'ema1_period': 21, 'ema2_period': 18}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:48,836] Trial 723 finished with value: 1143.02 and parameters: {'ema1_period': 21, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:48,851] Trial 724 finished with value: 923.96 and parameters: {'ema1_period': 22, 'ema2_period': 41}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:48,867] Trial 725 finished with value: 1120.88 and parameters: {'ema1_period': 20, 'ema2_period': 13}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:48,882] Trial 726 finished with value: 1143.02 and parameters: {'ema1_period': 21, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:48,898] Trial 727 finished with value: 1142.82 and parameters: {'ema1_period': 20, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:48,914] Trial 728 finished with value: 1091.24 and parameters: {'ema1_period': 21, 'ema2_period': 12}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:48,931] Trial 729 finished with value: 1085.04 and parameters: {'ema1_period': 22, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:48,946] Trial 730 finished with value: 1133.72 and parameters: {'ema1_period': 20, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:48,962] Trial 731 finished with value: 1085.04 and parameters: {'ema1_period': 23, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:48,984] Trial 732 finished with value: 1084.94 and parameters: {'ema1_period': 21, 'ema2_period': 17}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:49,005] Trial 733 finished with value: 1153.36 and parameters: {'ema1_period': 22, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:49,022] Trial 734 finished with value: 1054.78 and parameters: {'ema1_period': 24, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:49,279] Trial 735 finished with value: 1002.86 and parameters: {'ema1_period': 15, 'ema2_period': 13}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:49,507] Trial 736 finished with value: 975.7 and parameters: {'ema1_period': 21, 'ema2_period': 20}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:49,524] Trial 737 finished with value: 1074.98 and parameters: {'ema1_period': 21, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:49,540] Trial 738 finished with value: 1133.72 and parameters: {'ema1_period': 20, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:49,557] Trial 739 finished with value: 1163.2 and parameters: {'ema1_period': 21, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:49,574] Trial 740 finished with value: 1153.36 and parameters: {'ema1_period': 22, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:49,589] Trial 741 finished with value: 1084.94 and parameters: {'ema1_period': 21, 'ema2_period': 17}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:49,605] Trial 742 finished with value: 1075.0 and parameters: {'ema1_period': 22, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:49,620] Trial 743 finished with value: 1142.64 and parameters: {'ema1_period': 20, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:49,636] Trial 744 finished with value: 1163.2 and parameters: {'ema1_period': 21, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:49,903] Trial 745 finished with value: 853.78 and parameters: {'ema1_period': 6, 'ema2_period': 18}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:49,921] Trial 746 finished with value: 1152.6 and parameters: {'ema1_period': 21, 'ema2_period': 13}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:49,936] Trial 747 finished with value: 1064.82 and parameters: {'ema1_period': 23, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:50,171] Trial 748 finished with value: 985.34 and parameters: {'ema1_period': 25, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:50,189] Trial 749 finished with value: 1142.64 and parameters: {'ema1_period': 20, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:50,204] Trial 750 finished with value: 1163.2 and parameters: {'ema1_period': 21, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:50,222] Trial 751 finished with value: 1075.0 and parameters: {'ema1_period': 22, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:50,246] Trial 752 finished with value: 1110.66 and parameters: {'ema1_period': 20, 'ema2_period': 12}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:50,265] Trial 753 finished with value: 1084.94 and parameters: {'ema1_period': 21, 'ema2_period': 17}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:50,285] Trial 754 finished with value: 1142.84 and parameters: {'ema1_period': 22, 'ema2_period': 13}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:50,307] Trial 755 finished with value: 1143.02 and parameters: {'ema1_period': 21, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:50,325] Trial 756 finished with value: 1074.98 and parameters: {'ema1_period': 21, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:50,341] Trial 757 finished with value: 1142.82 and parameters: {'ema1_period': 20, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:50,357] Trial 758 finished with value: 1152.6 and parameters: {'ema1_period': 21, 'ema2_period': 13}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:50,373] Trial 759 finished with value: 1153.36 and parameters: {'ema1_period': 22, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:50,389] Trial 760 finished with value: 1090.6 and parameters: {'ema1_period': 21, 'ema2_period': 11}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:50,405] Trial 761 finished with value: 1133.72 and parameters: {'ema1_period': 20, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:50,420] Trial 762 finished with value: 1143.02 and parameters: {'ema1_period': 21, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:50,513] Trial 763 finished with value: 1075.0 and parameters: {'ema1_period': 22, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:50,537] Trial 764 finished with value: 1064.92 and parameters: {'ema1_period': 22, 'ema2_period': 17}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:50,555] Trial 765 finished with value: 1163.2 and parameters: {'ema1_period': 21, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:50,573] Trial 766 finished with value: 1005.28 and parameters: {'ema1_period': 21, 'ema2_period': 19}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:50,591] Trial 767 finished with value: 1142.64 and parameters: {'ema1_period': 20, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:50,608] Trial 768 finished with value: 1133.72 and parameters: {'ema1_period': 20, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:50,624] Trial 769 finished with value: 1074.98 and parameters: {'ema1_period': 21, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:50,641] Trial 770 finished with value: 1162.48 and parameters: {'ema1_period': 22, 'ema2_period': 12}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:50,895] Trial 771 finished with value: 862.88 and parameters: {'ema1_period': 9, 'ema2_period': 17}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:50,914] Trial 772 finished with value: 1143.02 and parameters: {'ema1_period': 21, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:50,933] Trial 773 finished with value: 1163.2 and parameters: {'ema1_period': 21, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:50,952] Trial 774 finished with value: 1110.94 and parameters: {'ema1_period': 17, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:50,973] Trial 775 finished with value: 1120.88 and parameters: {'ema1_period': 20, 'ema2_period': 13}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:50,994] Trial 776 finished with value: 1153.36 and parameters: {'ema1_period': 22, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:51,014] Trial 777 finished with value: 1065.02 and parameters: {'ema1_period': 21, 'ema2_period': 18}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:51,033] Trial 778 finished with value: 1084.94 and parameters: {'ema1_period': 21, 'ema2_period': 17}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:51,053] Trial 779 finished with value: 975.46 and parameters: {'ema1_period': 14, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:51,079] Trial 780 finished with value: 1085.04 and parameters: {'ema1_period': 23, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:51,099] Trial 781 finished with value: 1133.72 and parameters: {'ema1_period': 20, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:51,116] Trial 782 finished with value: 1163.2 and parameters: {'ema1_period': 21, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:51,133] Trial 783 finished with value: 964.56 and parameters: {'ema1_period': 22, 'ema2_period': 45}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:51,150] Trial 784 finished with value: 1143.02 and parameters: {'ema1_period': 21, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:51,166] Trial 785 finished with value: 803.24 and parameters: {'ema1_period': 8, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:51,378] Trial 786 finished with value: 948.26 and parameters: {'ema1_period': 20, 'ema2_period': 33}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:51,396] Trial 787 finished with value: 1142.84 and parameters: {'ema1_period': 22, 'ema2_period': 13}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:51,412] Trial 788 finished with value: 1142.82 and parameters: {'ema1_period': 20, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:51,428] Trial 789 finished with value: 1074.98 and parameters: {'ema1_period': 21, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:51,644] Trial 790 finished with value: 926.06 and parameters: {'ema1_period': 21, 'ema2_period': 25}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:51,661] Trial 791 finished with value: 1075.0 and parameters: {'ema1_period': 22, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:51,678] Trial 792 finished with value: 1152.6 and parameters: {'ema1_period': 21, 'ema2_period': 13}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:51,695] Trial 793 finished with value: 1074.98 and parameters: {'ema1_period': 21, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:51,711] Trial 794 finished with value: 1064.92 and parameters: {'ema1_period': 22, 'ema2_period': 17}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:51,727] Trial 795 finished with value: 1054.78 and parameters: {'ema1_period': 24, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:51,744] Trial 796 finished with value: 1142.64 and parameters: {'ema1_period': 20, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:51,765] Trial 797 finished with value: 1091.24 and parameters: {'ema1_period': 21, 'ema2_period': 12}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:51,784] Trial 798 finished with value: 1074.98 and parameters: {'ema1_period': 21, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:51,801] Trial 799 finished with value: 1153.36 and parameters: {'ema1_period': 22, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:51,817] Trial 800 finished with value: 1074.88 and parameters: {'ema1_period': 20, 'ema2_period': 17}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:51,833] Trial 801 finished with value: 1163.2 and parameters: {'ema1_period': 21, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:51,851] Trial 802 finished with value: 1120.88 and parameters: {'ema1_period': 20, 'ema2_period': 13}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:51,867] Trial 803 finished with value: 1163.2 and parameters: {'ema1_period': 21, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:51,884] Trial 804 finished with value: 1095.32 and parameters: {'ema1_period': 23, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:51,901] Trial 805 finished with value: 1085.04 and parameters: {'ema1_period': 22, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:51,917] Trial 806 finished with value: 1163.2 and parameters: {'ema1_period': 21, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:51,934] Trial 807 finished with value: 1085.04 and parameters: {'ema1_period': 22, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:51,950] Trial 808 finished with value: 1074.88 and parameters: {'ema1_period': 20, 'ema2_period': 17}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:51,967] Trial 809 finished with value: 1143.02 and parameters: {'ema1_period': 21, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:51,984] Trial 810 finished with value: 1152.6 and parameters: {'ema1_period': 21, 'ema2_period': 13}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:52,007] Trial 811 finished with value: 1065.02 and parameters: {'ema1_period': 21, 'ema2_period': 18}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:52,030] Trial 812 finished with value: 1142.82 and parameters: {'ema1_period': 20, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:52,051] Trial 813 finished with value: 1153.36 and parameters: {'ema1_period': 22, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:52,071] Trial 814 finished with value: 1074.98 and parameters: {'ema1_period': 21, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:52,091] Trial 815 finished with value: 1163.2 and parameters: {'ema1_period': 21, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:52,111] Trial 816 finished with value: 1153.36 and parameters: {'ema1_period': 22, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:52,130] Trial 817 finished with value: 961.8 and parameters: {'ema1_period': 20, 'ema2_period': 11}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:52,147] Trial 818 finished with value: 1152.6 and parameters: {'ema1_period': 21, 'ema2_period': 13}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:52,164] Trial 819 finished with value: 1085.04 and parameters: {'ema1_period': 22, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:52,181] Trial 820 finished with value: 936.12 and parameters: {'ema1_period': 21, 'ema2_period': 24}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:52,391] Trial 821 finished with value: 949.32 and parameters: {'ema1_period': 20, 'ema2_period': 34}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:52,409] Trial 822 finished with value: 1163.2 and parameters: {'ema1_period': 21, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:52,425] Trial 823 finished with value: 1074.98 and parameters: {'ema1_period': 21, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:52,442] Trial 824 finished with value: 1074.88 and parameters: {'ema1_period': 20, 'ema2_period': 17}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:52,458] Trial 825 finished with value: 1143.02 and parameters: {'ema1_period': 21, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:52,483] Trial 826 finished with value: 1075.0 and parameters: {'ema1_period': 22, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:52,501] Trial 827 finished with value: 1065.02 and parameters: {'ema1_period': 21, 'ema2_period': 18}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:52,518] Trial 828 finished with value: 1162.48 and parameters: {'ema1_period': 22, 'ema2_period': 12}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:52,534] Trial 829 finished with value: 1152.6 and parameters: {'ema1_period': 21, 'ema2_period': 13}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:52,551] Trial 830 finished with value: 1064.82 and parameters: {'ema1_period': 23, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:52,568] Trial 831 finished with value: 1142.82 and parameters: {'ema1_period': 20, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:52,585] Trial 832 finished with value: 1143.02 and parameters: {'ema1_period': 21, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:52,601] Trial 833 finished with value: 1074.88 and parameters: {'ema1_period': 20, 'ema2_period': 17}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:52,618] Trial 834 finished with value: 1075.0 and parameters: {'ema1_period': 22, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:52,634] Trial 835 finished with value: 1074.98 and parameters: {'ema1_period': 21, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:52,651] Trial 836 finished with value: 1143.02 and parameters: {'ema1_period': 21, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:52,667] Trial 837 finished with value: 1142.82 and parameters: {'ema1_period': 20, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:52,683] Trial 838 finished with value: 1142.84 and parameters: {'ema1_period': 22, 'ema2_period': 13}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:52,700] Trial 839 finished with value: 1074.98 and parameters: {'ema1_period': 21, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:52,716] Trial 840 finished with value: 1143.02 and parameters: {'ema1_period': 21, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:52,739] Trial 841 finished with value: 1074.88 and parameters: {'ema1_period': 20, 'ema2_period': 17}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:52,759] Trial 842 finished with value: 1014.94 and parameters: {'ema1_period': 25, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:52,776] Trial 843 finished with value: 1153.36 and parameters: {'ema1_period': 22, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:52,793] Trial 844 finished with value: 1152.6 and parameters: {'ema1_period': 21, 'ema2_period': 13}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:52,810] Trial 845 finished with value: 1074.98 and parameters: {'ema1_period': 21, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:52,827] Trial 846 finished with value: 1075.0 and parameters: {'ema1_period': 22, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:52,844] Trial 847 finished with value: 1085.04 and parameters: {'ema1_period': 23, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:52,860] Trial 848 finished with value: 1133.72 and parameters: {'ema1_period': 20, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:52,877] Trial 849 finished with value: 1143.02 and parameters: {'ema1_period': 21, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:52,894] Trial 850 finished with value: 1152.6 and parameters: {'ema1_period': 21, 'ema2_period': 13}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:52,911] Trial 851 finished with value: 1074.88 and parameters: {'ema1_period': 20, 'ema2_period': 17}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:52,929] Trial 852 finished with value: 1075.0 and parameters: {'ema1_period': 22, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:52,946] Trial 853 finished with value: 1074.98 and parameters: {'ema1_period': 21, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:52,965] Trial 854 finished with value: 1011.86 and parameters: {'ema1_period': 16, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:52,983] Trial 855 finished with value: 1163.2 and parameters: {'ema1_period': 21, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:53,002] Trial 856 finished with value: 1064.92 and parameters: {'ema1_period': 22, 'ema2_period': 17}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:53,020] Trial 857 finished with value: 1110.66 and parameters: {'ema1_period': 20, 'ema2_period': 12}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:53,042] Trial 858 finished with value: 1163.2 and parameters: {'ema1_period': 21, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:53,062] Trial 859 finished with value: 1074.98 and parameters: {'ema1_period': 21, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:53,080] Trial 860 finished with value: 1005.18 and parameters: {'ema1_period': 22, 'ema2_period': 18}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:53,098] Trial 861 finished with value: 1001.7 and parameters: {'ema1_period': 21, 'ema2_period': 10}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:53,115] Trial 862 finished with value: 1142.64 and parameters: {'ema1_period': 20, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:53,134] Trial 863 finished with value: 1085.04 and parameters: {'ema1_period': 24, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:53,151] Trial 864 finished with value: 1085.04 and parameters: {'ema1_period': 22, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:53,168] Trial 865 finished with value: 1163.2 and parameters: {'ema1_period': 21, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:53,185] Trial 866 finished with value: 1152.6 and parameters: {'ema1_period': 21, 'ema2_period': 13}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:53,201] Trial 867 finished with value: 1085.04 and parameters: {'ema1_period': 22, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:53,218] Trial 868 finished with value: 1142.64 and parameters: {'ema1_period': 20, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:53,242] Trial 869 finished with value: 1091.24 and parameters: {'ema1_period': 21, 'ema2_period': 12}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:53,272] Trial 870 finished with value: 1142.82 and parameters: {'ema1_period': 20, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:53,299] Trial 871 finished with value: 1084.94 and parameters: {'ema1_period': 21, 'ema2_period': 17}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:53,327] Trial 872 finished with value: 1163.2 and parameters: {'ema1_period': 21, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:53,348] Trial 873 finished with value: 1133.72 and parameters: {'ema1_period': 20, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:53,367] Trial 874 finished with value: 1153.36 and parameters: {'ema1_period': 22, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:53,584] Trial 875 finished with value: 918.74 and parameters: {'ema1_period': 21, 'ema2_period': 37}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:53,603] Trial 876 finished with value: 1075.0 and parameters: {'ema1_period': 22, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:53,621] Trial 877 finished with value: 1120.88 and parameters: {'ema1_period': 20, 'ema2_period': 13}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:53,640] Trial 878 finished with value: 1074.98 and parameters: {'ema1_period': 21, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:53,658] Trial 879 finished with value: 1095.32 and parameters: {'ema1_period': 23, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:53,676] Trial 880 finished with value: 1163.2 and parameters: {'ema1_period': 21, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:53,695] Trial 881 finished with value: 1163.2 and parameters: {'ema1_period': 21, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:53,713] Trial 882 finished with value: 1064.92 and parameters: {'ema1_period': 22, 'ema2_period': 17}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:53,731] Trial 883 finished with value: 1133.72 and parameters: {'ema1_period': 20, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:53,753] Trial 884 finished with value: 1152.6 and parameters: {'ema1_period': 21, 'ema2_period': 13}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:53,777] Trial 885 finished with value: 1143.02 and parameters: {'ema1_period': 21, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:53,797] Trial 886 finished with value: 1153.36 and parameters: {'ema1_period': 22, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:53,816] Trial 887 finished with value: 1065.02 and parameters: {'ema1_period': 21, 'ema2_period': 18}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:53,835] Trial 888 finished with value: 1142.82 and parameters: {'ema1_period': 20, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:53,853] Trial 889 finished with value: 936.54 and parameters: {'ema1_period': 21, 'ema2_period': 28}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:53,873] Trial 890 finished with value: 1085.04 and parameters: {'ema1_period': 22, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:53,892] Trial 891 finished with value: 1074.88 and parameters: {'ema1_period': 20, 'ema2_period': 17}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:54,137] Trial 892 finished with value: 845.26 and parameters: {'ema1_period': 17, 'ema2_period': 19}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:54,157] Trial 893 finished with value: 1163.2 and parameters: {'ema1_period': 21, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:54,175] Trial 894 finished with value: 1142.84 and parameters: {'ema1_period': 22, 'ema2_period': 13}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:54,194] Trial 895 finished with value: 1095.32 and parameters: {'ema1_period': 23, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:54,213] Trial 896 finished with value: 1133.72 and parameters: {'ema1_period': 20, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:54,231] Trial 897 finished with value: 1090.6 and parameters: {'ema1_period': 21, 'ema2_period': 11}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:54,250] Trial 898 finished with value: 1163.2 and parameters: {'ema1_period': 21, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:54,274] Trial 899 finished with value: 1153.36 and parameters: {'ema1_period': 22, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:54,295] Trial 900 finished with value: 1015.04 and parameters: {'ema1_period': 24, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:54,314] Trial 901 finished with value: 1091.24 and parameters: {'ema1_period': 21, 'ema2_period': 12}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:54,333] Trial 902 finished with value: 1142.64 and parameters: {'ema1_period': 20, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:54,352] Trial 903 finished with value: 965.22 and parameters: {'ema1_period': 13, 'ema2_period': 17}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:54,371] Trial 904 finished with value: 1152.6 and parameters: {'ema1_period': 21, 'ema2_period': 13}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:54,389] Trial 905 finished with value: 1075.0 and parameters: {'ema1_period': 22, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:54,408] Trial 906 finished with value: 1142.82 and parameters: {'ema1_period': 20, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:54,675] Trial 907 finished with value: 852.9 and parameters: {'ema1_period': 10, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:54,695] Trial 908 finished with value: 1143.02 and parameters: {'ema1_period': 21, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:54,713] Trial 909 finished with value: 1084.94 and parameters: {'ema1_period': 21, 'ema2_period': 17}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:54,730] Trial 910 finished with value: 1085.04 and parameters: {'ema1_period': 22, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:54,748] Trial 911 finished with value: 1163.2 and parameters: {'ema1_period': 21, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:54,766] Trial 912 finished with value: 1143.02 and parameters: {'ema1_period': 21, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:54,784] Trial 913 finished with value: 1120.88 and parameters: {'ema1_period': 20, 'ema2_period': 13}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:54,807] Trial 914 finished with value: 1163.2 and parameters: {'ema1_period': 21, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:55,018] Trial 915 finished with value: 1002.92 and parameters: {'ema1_period': 22, 'ema2_period': 49}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:55,039] Trial 916 finished with value: 953.82 and parameters: {'ema1_period': 11, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:55,057] Trial 917 finished with value: 1152.6 and parameters: {'ema1_period': 21, 'ema2_period': 13}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:55,075] Trial 918 finished with value: 1142.82 and parameters: {'ema1_period': 20, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:55,094] Trial 919 finished with value: 1085.04 and parameters: {'ema1_period': 22, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:55,113] Trial 920 finished with value: 809.16 and parameters: {'ema1_period': 10, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:55,377] Trial 921 finished with value: 986.54 and parameters: {'ema1_period': 12, 'ema2_period': 17}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:55,396] Trial 922 finished with value: 1163.2 and parameters: {'ema1_period': 21, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:55,414] Trial 923 finished with value: 1074.9 and parameters: {'ema1_period': 20, 'ema2_period': 18}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:55,660] Trial 924 finished with value: 1152.78 and parameters: {'ema1_period': 23, 'ema2_period': 12}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:55,914] Trial 925 finished with value: 1000.84 and parameters: {'ema1_period': 15, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:55,934] Trial 926 finished with value: 1163.2 and parameters: {'ema1_period': 21, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:55,956] Trial 927 finished with value: 1074.98 and parameters: {'ema1_period': 21, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:55,976] Trial 928 finished with value: 1085.04 and parameters: {'ema1_period': 22, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:55,994] Trial 929 finished with value: 1142.64 and parameters: {'ema1_period': 20, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:56,013] Trial 930 finished with value: 1075.0 and parameters: {'ema1_period': 22, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:56,031] Trial 931 finished with value: 1143.02 and parameters: {'ema1_period': 21, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:56,049] Trial 932 finished with value: 1084.94 and parameters: {'ema1_period': 21, 'ema2_period': 17}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:56,067] Trial 933 finished with value: 946.4 and parameters: {'ema1_period': 21, 'ema2_period': 27}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:56,086] Trial 934 finished with value: 1110.74 and parameters: {'ema1_period': 19, 'ema2_period': 13}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:56,105] Trial 935 finished with value: 1142.82 and parameters: {'ema1_period': 20, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:56,123] Trial 936 finished with value: 1074.98 and parameters: {'ema1_period': 21, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:56,142] Trial 937 finished with value: 1162.48 and parameters: {'ema1_period': 22, 'ema2_period': 12}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:56,160] Trial 938 finished with value: 1014.94 and parameters: {'ema1_period': 25, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:56,181] Trial 939 finished with value: 1143.02 and parameters: {'ema1_period': 21, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:56,412] Trial 940 finished with value: 1016.0 and parameters: {'ema1_period': 20, 'ema2_period': 23}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:56,685] Trial 941 finished with value: 924.46 and parameters: {'ema1_period': 21, 'ema2_period': 39}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:56,705] Trial 942 finished with value: 1085.04 and parameters: {'ema1_period': 22, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:56,724] Trial 943 finished with value: 1152.6 and parameters: {'ema1_period': 21, 'ema2_period': 13}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:56,743] Trial 944 finished with value: 1142.82 and parameters: {'ema1_period': 20, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:56,762] Trial 945 finished with value: 1064.92 and parameters: {'ema1_period': 22, 'ema2_period': 17}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:57,015] Trial 946 finished with value: 1016.0 and parameters: {'ema1_period': 21, 'ema2_period': 22}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:57,036] Trial 947 finished with value: 1143.02 and parameters: {'ema1_period': 21, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:57,057] Trial 948 finished with value: 1133.72 and parameters: {'ema1_period': 20, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:57,079] Trial 949 finished with value: 1095.32 and parameters: {'ema1_period': 23, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:57,099] Trial 950 finished with value: 1005.18 and parameters: {'ema1_period': 22, 'ema2_period': 18}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:57,118] Trial 951 finished with value: 1163.2 and parameters: {'ema1_period': 21, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:57,137] Trial 952 finished with value: 1152.6 and parameters: {'ema1_period': 21, 'ema2_period': 13}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:57,160] Trial 953 finished with value: 1074.88 and parameters: {'ema1_period': 20, 'ema2_period': 17}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:57,180] Trial 954 finished with value: 1075.0 and parameters: {'ema1_period': 22, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:57,200] Trial 955 finished with value: 1074.98 and parameters: {'ema1_period': 21, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:57,220] Trial 956 finished with value: 1163.2 and parameters: {'ema1_period': 21, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:57,444] Trial 957 finished with value: 976.46 and parameters: {'ema1_period': 20, 'ema2_period': 30}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:57,465] Trial 958 finished with value: 1143.02 and parameters: {'ema1_period': 21, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:57,485] Trial 959 finished with value: 1085.04 and parameters: {'ema1_period': 22, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:57,505] Trial 960 finished with value: 1142.82 and parameters: {'ema1_period': 20, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:57,525] Trial 961 finished with value: 1143.02 and parameters: {'ema1_period': 21, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:57,545] Trial 962 finished with value: 1084.94 and parameters: {'ema1_period': 21, 'ema2_period': 17}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:57,564] Trial 963 finished with value: 1162.82 and parameters: {'ema1_period': 19, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:57,584] Trial 964 finished with value: 1142.84 and parameters: {'ema1_period': 22, 'ema2_period': 13}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:57,608] Trial 965 finished with value: 1142.82 and parameters: {'ema1_period': 20, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:57,826] Trial 966 finished with value: 890.02 and parameters: {'ema1_period': 21, 'ema2_period': 36}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:57,847] Trial 967 finished with value: 923.96 and parameters: {'ema1_period': 22, 'ema2_period': 41}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:58,126] Trial 968 finished with value: 847.6 and parameters: {'ema1_period': 7, 'ema2_period': 18}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:58,147] Trial 969 finished with value: 1091.24 and parameters: {'ema1_period': 21, 'ema2_period': 12}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:58,167] Trial 970 finished with value: 1005.28 and parameters: {'ema1_period': 21, 'ema2_period': 19}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:58,187] Trial 971 finished with value: 1142.64 and parameters: {'ema1_period': 20, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:58,206] Trial 972 finished with value: 1075.0 and parameters: {'ema1_period': 22, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:58,226] Trial 973 finished with value: 1064.82 and parameters: {'ema1_period': 23, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:58,245] Trial 974 finished with value: 1090.6 and parameters: {'ema1_period': 21, 'ema2_period': 11}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:58,265] Trial 975 finished with value: 1152.6 and parameters: {'ema1_period': 21, 'ema2_period': 13}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:58,285] Trial 976 finished with value: 1142.82 and parameters: {'ema1_period': 20, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:58,309] Trial 977 finished with value: 1153.36 and parameters: {'ema1_period': 22, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:58,329] Trial 978 finished with value: 1084.94 and parameters: {'ema1_period': 21, 'ema2_period': 17}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:58,349] Trial 979 finished with value: 1143.02 and parameters: {'ema1_period': 21, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:58,368] Trial 980 finished with value: 1133.72 and parameters: {'ema1_period': 20, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:58,388] Trial 981 finished with value: 1142.84 and parameters: {'ema1_period': 22, 'ema2_period': 13}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:58,408] Trial 982 finished with value: 1163.2 and parameters: {'ema1_period': 21, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:58,427] Trial 983 finished with value: 1133.72 and parameters: {'ema1_period': 20, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:58,446] Trial 984 finished with value: 1163.2 and parameters: {'ema1_period': 21, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:58,465] Trial 985 finished with value: 1075.0 and parameters: {'ema1_period': 22, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:58,485] Trial 986 finished with value: 1084.94 and parameters: {'ema1_period': 21, 'ema2_period': 17}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:58,505] Trial 987 finished with value: 1143.02 and parameters: {'ema1_period': 21, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:58,525] Trial 988 finished with value: 1133.72 and parameters: {'ema1_period': 20, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:58,755] Trial 989 finished with value: 976.82 and parameters: {'ema1_period': 19, 'ema2_period': 32}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:58,777] Trial 990 finished with value: 1142.84 and parameters: {'ema1_period': 22, 'ema2_period': 13}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:58,797] Trial 991 finished with value: 1143.02 and parameters: {'ema1_period': 21, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:58,817] Trial 992 finished with value: 1054.78 and parameters: {'ema1_period': 24, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:58,837] Trial 993 finished with value: 1085.04 and parameters: {'ema1_period': 22, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:58,858] Trial 994 finished with value: 964.46 and parameters: {'ema1_period': 21, 'ema2_period': 46}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:58,878] Trial 995 finished with value: 1142.64 and parameters: {'ema1_period': 20, 'ema2_period': 14}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:58,898] Trial 996 finished with value: 1085.04 and parameters: {'ema1_period': 23, 'ema2_period': 15}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:58,918] Trial 997 finished with value: 1084.94 and parameters: {'ema1_period': 21, 'ema2_period': 17}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:58,938] Trial 998 finished with value: 1091.24 and parameters: {'ema1_period': 21, 'ema2_period': 12}. Best is trial 26 with value: 1163.5.\n[I 2024-06-26 12:42:58,959] Trial 999 finished with value: 1133.72 and parameters: {'ema1_period': 20, 'ema2_period': 16}. Best is trial 26 with value: 1163.5.\n</pre> In\u00a0[3]: Copied! <pre>study.best_params\n</pre> study.best_params Out[3]: <pre>{'ema1_period': 23, 'ema2_period': 13}</pre> In\u00a0[4]: Copied! <pre>lt.plotter.heatmap(x=\"ema1_period\", y=\"ema2_period\", z=\"equity\")\n</pre> lt.plotter.heatmap(x=\"ema1_period\", y=\"ema2_period\", z=\"equity\") In\u00a0[5]: Copied! <pre>lt.plotter.contour(x=\"ema1_period\", y=\"ema2_period\", z=\"equity\")\n</pre> lt.plotter.contour(x=\"ema1_period\", y=\"ema2_period\", z=\"equity\") In\u00a0[6]: Copied! <pre>fig = optuna.visualization.plot_optimization_history(study)\nfig.show()\n</pre> fig = optuna.visualization.plot_optimization_history(study) fig.show() In\u00a0[7]: Copied! <pre>fig = optuna.visualization.plot_contour(study, params=[\"ema1_period\", \"ema2_period\"])\nfig.show()\n</pre> fig = optuna.visualization.plot_contour(study, params=[\"ema1_period\", \"ema2_period\"]) fig.show() In\u00a0[8]: Copied! <pre>import plotly.io as pio\n\npio.renderers.default = \"notebook\"\npio.templates.default = \"plotly_dark\"\n</pre> import plotly.io as pio  pio.renderers.default = \"notebook\" pio.templates.default = \"plotly_dark\" In\u00a0[9]: Copied! <pre>study.trials\n</pre> study.trials Out[9]: <pre>[FrozenTrial(number=0, state=1, values=[981.08], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 7, 575318), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 7, 777950), params={'ema1_period': 17, 'ema2_period': 37}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=0, value=None),\n FrozenTrial(number=1, state=1, values=[1032.88], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 7, 778856), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 8, 42188), params={'ema1_period': 22, 'ema2_period': 48}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=1, value=None),\n FrozenTrial(number=2, state=1, values=[935.78], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 8, 43000), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 8, 249829), params={'ema1_period': 10, 'ema2_period': 39}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=2, value=None),\n FrozenTrial(number=3, state=1, values=[1065.02], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 8, 250915), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 8, 467196), params={'ema1_period': 21, 'ema2_period': 18}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=3, value=None),\n FrozenTrial(number=4, state=1, values=[923.96], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 8, 468239), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 8, 664970), params={'ema1_period': 22, 'ema2_period': 41}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=4, value=None),\n FrozenTrial(number=5, state=1, values=[922.52], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 8, 665880), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 8, 928383), params={'ema1_period': 5, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=5, value=None),\n FrozenTrial(number=6, state=1, values=[974.7], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 8, 929374), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 9, 122110), params={'ema1_period': 22, 'ema2_period': 42}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=6, value=None),\n FrozenTrial(number=7, state=1, values=[884.96], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 9, 122978), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 9, 337104), params={'ema1_period': 9, 'ema2_period': 35}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=7, value=None),\n FrozenTrial(number=8, state=1, values=[914.5], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 9, 338007), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 9, 561884), params={'ema1_period': 18, 'ema2_period': 20}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=8, value=None),\n FrozenTrial(number=9, state=1, values=[994.5], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 9, 562725), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 9, 773972), params={'ema1_period': 19, 'ema2_period': 22}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=9, value=None),\n FrozenTrial(number=10, state=1, values=[1121.98], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 9, 774904), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 10, 11689), params={'ema1_period': 25, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=10, value=None),\n FrozenTrial(number=11, state=1, values=[1153.36], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 10, 12658), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 10, 258803), params={'ema1_period': 25, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=11, value=None),\n FrozenTrial(number=12, state=1, values=[1121.98], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 10, 259809), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 10, 265622), params={'ema1_period': 25, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=12, value=None),\n FrozenTrial(number=13, state=1, values=[908.24], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 10, 266212), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 10, 476780), params={'ema1_period': 25, 'ema2_period': 27}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=13, value=None),\n FrozenTrial(number=14, state=1, values=[933.1], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 10, 477565), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 10, 725658), params={'ema1_period': 12, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=14, value=None),\n FrozenTrial(number=15, state=1, values=[966.86], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 10, 726602), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 11, 13270), params={'ema1_period': 25, 'ema2_period': 26}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=15, value=None),\n FrozenTrial(number=16, state=1, values=[1113.68], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 11, 14108), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 11, 262719), params={'ema1_period': 15, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=16, value=None),\n FrozenTrial(number=17, state=1, values=[975.46], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 11, 263737), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 11, 504567), params={'ema1_period': 14, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=17, value=None),\n FrozenTrial(number=18, state=1, values=[986.6], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 11, 505516), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 11, 719694), params={'ema1_period': 19, 'ema2_period': 31}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=18, value=None),\n FrozenTrial(number=19, state=1, values=[846.76], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 11, 720419), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 11, 939847), params={'ema1_period': 23, 'ema2_period': 24}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=19, value=None),\n FrozenTrial(number=20, state=1, values=[937.0], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 11, 940765), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 12, 151572), params={'ema1_period': 20, 'ema2_period': 31}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=20, value=None),\n FrozenTrial(number=21, state=1, values=[1154.16], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 12, 152327), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 12, 378041), params={'ema1_period': 25, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=21, value=None),\n FrozenTrial(number=22, state=1, values=[1123.8], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 12, 378935), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 12, 605940), params={'ema1_period': 24, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=22, value=None),\n FrozenTrial(number=23, state=1, values=[1015.24], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 12, 606744), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 12, 825202), params={'ema1_period': 23, 'ema2_period': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=23, value=None),\n FrozenTrial(number=24, state=1, values=[1095.32], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 12, 826062), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 13, 58107), params={'ema1_period': 23, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=24, value=None),\n FrozenTrial(number=25, state=1, values=[894.58], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 13, 58893), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 13, 283593), params={'ema1_period': 16, 'ema2_period': 21}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=25, value=None),\n FrozenTrial(number=26, state=1, values=[1163.5], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 13, 284516), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 13, 512707), params={'ema1_period': 23, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=26, value=None),\n FrozenTrial(number=27, state=1, values=[1025.12], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 13, 513547), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 13, 785107), params={'ema1_period': 20, 'ema2_period': 19}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=27, value=None),\n FrozenTrial(number=28, state=1, values=[1143.02], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 13, 786079), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 14, 15192), params={'ema1_period': 21, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=28, value=None),\n FrozenTrial(number=29, state=1, values=[1015.04], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 14, 16141), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 14, 235627), params={'ema1_period': 24, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=29, value=None),\n FrozenTrial(number=30, state=1, values=[1123.36], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 14, 236588), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 14, 453459), params={'ema1_period': 24, 'ema2_period': 23}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=30, value=None),\n FrozenTrial(number=31, state=1, values=[1091.24], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 14, 454377), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 14, 685401), params={'ema1_period': 21, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=31, value=None),\n FrozenTrial(number=32, state=1, values=[925.06], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 14, 686476), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 14, 885958), params={'ema1_period': 17, 'ema2_period': 50}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=32, value=None),\n FrozenTrial(number=33, state=1, values=[1163.2], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 14, 886889), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 15, 115127), params={'ema1_period': 21, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=33, value=None),\n FrozenTrial(number=34, state=1, values=[1085.04], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 15, 115859), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 15, 345055), params={'ema1_period': 22, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=34, value=None),\n FrozenTrial(number=35, state=1, values=[975.6], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 15, 345810), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 15, 564928), params={'ema1_period': 23, 'ema2_period': 18}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=35, value=None),\n FrozenTrial(number=36, state=1, values=[1110.66], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 15, 565989), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 15, 802146), params={'ema1_period': 20, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=36, value=None),\n FrozenTrial(number=37, state=1, values=[964.56], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 15, 803027), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 16, 7436), params={'ema1_period': 22, 'ema2_period': 45}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=37, value=None),\n FrozenTrial(number=38, state=1, values=[1112.54], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 16, 8151), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 16, 240744), params={'ema1_period': 24, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=38, value=None),\n FrozenTrial(number=39, state=1, values=[906.36], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 16, 241638), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 16, 469714), params={'ema1_period': 7, 'ema2_period': 35}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=39, value=None),\n FrozenTrial(number=40, state=1, values=[914.5], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 16, 470600), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 16, 477126), params={'ema1_period': 18, 'ema2_period': 20}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=40, value=None),\n FrozenTrial(number=41, state=1, values=[1163.2], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 16, 477795), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 16, 483953), params={'ema1_period': 21, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=41, value=None),\n FrozenTrial(number=42, state=1, values=[1091.24], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 16, 484662), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 16, 490873), params={'ema1_period': 21, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=42, value=None),\n FrozenTrial(number=43, state=1, values=[1085.04], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 16, 491540), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 16, 712244), params={'ema1_period': 23, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=43, value=None),\n FrozenTrial(number=44, state=1, values=[1154.16], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 16, 713072), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 16, 719679), params={'ema1_period': 25, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=44, value=None),\n FrozenTrial(number=45, state=1, values=[1005.18], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 16, 720318), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 16, 989086), params={'ema1_period': 22, 'ema2_period': 18}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=45, value=None),\n FrozenTrial(number=46, state=1, values=[1162.72], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 16, 990053), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 17, 221673), params={'ema1_period': 19, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=46, value=None),\n FrozenTrial(number=47, state=1, values=[1000.0], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 17, 222595), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 17, 340178), params={'ema1_period': 19, 'ema2_period': 19}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=47, value=None),\n FrozenTrial(number=48, state=1, values=[956.62], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 17, 341125), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 17, 556564), params={'ema1_period': 18, 'ema2_period': 28}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=48, value=None),\n FrozenTrial(number=49, state=1, values=[975.92], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 17, 557469), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 17, 771689), params={'ema1_period': 20, 'ema2_period': 24}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=49, value=None),\n FrozenTrial(number=50, state=1, values=[1163.2], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 17, 772789), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 17, 779540), params={'ema1_period': 21, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=50, value=None),\n FrozenTrial(number=51, state=1, values=[1163.2], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 17, 780241), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 17, 786612), params={'ema1_period': 21, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=51, value=None),\n FrozenTrial(number=52, state=1, values=[1162.72], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 17, 787338), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 17, 793466), params={'ema1_period': 19, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=52, value=None),\n FrozenTrial(number=53, state=1, values=[1084.94], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 17, 794352), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 18, 20598), params={'ema1_period': 21, 'ema2_period': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=53, value=None),\n FrozenTrial(number=54, state=1, values=[904.54], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 18, 21489), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 18, 248640), params={'ema1_period': 17, 'ema2_period': 21}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=54, value=None),\n FrozenTrial(number=55, state=1, values=[1142.64], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 18, 249494), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 18, 480639), params={'ema1_period': 20, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=55, value=None),\n FrozenTrial(number=56, state=1, values=[917.52], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 18, 481348), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 18, 674216), params={'ema1_period': 22, 'ema2_period': 39}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=56, value=None),\n FrozenTrial(number=57, state=1, values=[965.22], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 18, 674751), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 18, 909568), params={'ema1_period': 13, 'ema2_period': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=57, value=None),\n FrozenTrial(number=58, state=1, values=[1162.72], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 18, 910100), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 18, 917441), params={'ema1_period': 19, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=58, value=None),\n FrozenTrial(number=59, state=1, values=[1005.28], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 18, 918185), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 19, 128592), params={'ema1_period': 21, 'ema2_period': 19}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=59, value=None),\n FrozenTrial(number=60, state=1, values=[964.78], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 19, 129103), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 19, 346453), params={'ema1_period': 18, 'ema2_period': 22}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=60, value=None),\n FrozenTrial(number=61, state=1, values=[1162.72], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 19, 347195), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 19, 355584), params={'ema1_period': 19, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=61, value=None),\n FrozenTrial(number=62, state=1, values=[1000.94], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 19, 356280), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 19, 590719), params={'ema1_period': 16, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=62, value=None),\n FrozenTrial(number=63, state=1, values=[961.8], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 19, 591218), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 19, 895850), params={'ema1_period': 20, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=63, value=None),\n FrozenTrial(number=64, state=1, values=[1085.04], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 19, 896545), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 19, 903399), params={'ema1_period': 22, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=64, value=None),\n FrozenTrial(number=65, state=1, values=[1160.68], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 19, 903885), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 20, 130614), params={'ema1_period': 19, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=65, value=None),\n FrozenTrial(number=66, state=1, values=[1084.94], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 20, 131125), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 20, 137942), params={'ema1_period': 21, 'ema2_period': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=66, value=None),\n FrozenTrial(number=67, state=1, values=[1000.0], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 20, 138468), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 20, 248472), params={'ema1_period': 10, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=67, value=None),\n FrozenTrial(number=68, state=1, values=[1000.94], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 20, 248997), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 20, 256442), params={'ema1_period': 16, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=68, value=None),\n FrozenTrial(number=69, state=1, values=[1160.48], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 20, 256964), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 20, 493807), params={'ema1_period': 18, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=69, value=None),\n FrozenTrial(number=70, state=1, values=[894.68], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 20, 494473), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 20, 710070), params={'ema1_period': 17, 'ema2_period': 20}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=70, value=None),\n FrozenTrial(number=71, state=1, values=[1094.6], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 20, 710726), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 20, 933109), params={'ema1_period': 19, 'ema2_period': 18}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=71, value=None),\n FrozenTrial(number=72, state=1, values=[1142.82], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 20, 934288), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 21, 160788), params={'ema1_period': 20, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=72, value=None),\n FrozenTrial(number=73, state=1, values=[1122.48], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 21, 161487), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 21, 400844), params={'ema1_period': 23, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=73, value=None),\n FrozenTrial(number=74, state=1, values=[1142.84], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 21, 401585), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 21, 630414), params={'ema1_period': 22, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=74, value=None),\n FrozenTrial(number=75, state=1, values=[1162.82], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 21, 631130), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 21, 864425), params={'ema1_period': 19, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=75, value=None),\n FrozenTrial(number=76, state=1, values=[1084.94], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 21, 865054), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 21, 872740), params={'ema1_period': 21, 'ema2_period': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=76, value=None),\n FrozenTrial(number=77, state=1, values=[1015.04], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 21, 873422), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 21, 880026), params={'ema1_period': 24, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=77, value=None),\n FrozenTrial(number=78, state=1, values=[1142.64], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 21, 880695), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 21, 887495), params={'ema1_period': 20, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=78, value=None),\n FrozenTrial(number=79, state=1, values=[1074.08], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 21, 888116), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 22, 155025), params={'ema1_period': 15, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=79, value=None),\n FrozenTrial(number=80, state=1, values=[978.3], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 22, 156036), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 22, 364586), params={'ema1_period': 18, 'ema2_period': 35}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=80, value=None),\n FrozenTrial(number=81, state=1, values=[1162.72], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 22, 365222), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 22, 372719), params={'ema1_period': 19, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=81, value=None),\n FrozenTrial(number=82, state=1, values=[1005.28], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 22, 373531), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 22, 380255), params={'ema1_period': 21, 'ema2_period': 19}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=82, value=None),\n FrozenTrial(number=83, state=1, values=[1110.74], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 22, 380983), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 22, 613586), params={'ema1_period': 19, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=83, value=None),\n FrozenTrial(number=84, state=1, values=[1133.72], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 22, 614265), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 22, 840277), params={'ema1_period': 20, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=84, value=None),\n FrozenTrial(number=85, state=1, values=[975.6], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 22, 841025), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 22, 848655), params={'ema1_period': 23, 'ema2_period': 18}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=85, value=None),\n FrozenTrial(number=86, state=1, values=[1143.02], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 22, 849436), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 22, 856228), params={'ema1_period': 21, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=86, value=None),\n FrozenTrial(number=87, state=1, values=[1162.48], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 22, 856736), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 23, 138925), params={'ema1_period': 22, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=87, value=None),\n FrozenTrial(number=88, state=1, values=[904.62], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 23, 139699), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 23, 358567), params={'ema1_period': 18, 'ema2_period': 21}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=88, value=None),\n FrozenTrial(number=89, state=1, values=[1110.94], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 23, 359770), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 23, 592086), params={'ema1_period': 17, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=89, value=None),\n FrozenTrial(number=90, state=1, values=[922.52], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 23, 593028), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 23, 600299), params={'ema1_period': 5, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=90, value=None),\n FrozenTrial(number=91, state=1, values=[1162.82], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 23, 601026), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 23, 607772), params={'ema1_period': 19, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=91, value=None),\n FrozenTrial(number=92, state=1, values=[1124.06], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 23, 608597), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 23, 831795), params={'ema1_period': 19, 'ema2_period': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=92, value=None),\n FrozenTrial(number=93, state=1, values=[1133.72], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 23, 832567), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 23, 840320), params={'ema1_period': 20, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=93, value=None),\n FrozenTrial(number=94, state=1, values=[1142.64], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 23, 841019), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 23, 847911), params={'ema1_period': 20, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=94, value=None),\n FrozenTrial(number=95, state=1, values=[1005.18], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 23, 848513), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 23, 855626), params={'ema1_period': 22, 'ema2_period': 18}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=95, value=None),\n FrozenTrial(number=96, state=1, values=[1000.94], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 23, 856293), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 24, 98856), params={'ema1_period': 18, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=96, value=None),\n FrozenTrial(number=97, state=1, values=[1091.24], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 24, 99732), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 24, 107173), params={'ema1_period': 21, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=97, value=None),\n FrozenTrial(number=98, state=1, values=[1124.06], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 24, 107925), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 24, 115021), params={'ema1_period': 19, 'ema2_period': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=98, value=None),\n FrozenTrial(number=99, state=1, values=[944.7], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 24, 115734), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 24, 378756), params={'ema1_period': 6, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=99, value=None),\n FrozenTrial(number=100, state=1, values=[954.2], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 24, 379929), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 24, 593283), params={'ema1_period': 23, 'ema2_period': 20}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=100, value=None),\n FrozenTrial(number=101, state=1, values=[1162.72], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 24, 594404), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 24, 601748), params={'ema1_period': 19, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=101, value=None),\n FrozenTrial(number=102, state=1, values=[1011.86], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 24, 602535), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 24, 837529), params={'ema1_period': 16, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=102, value=None),\n FrozenTrial(number=103, state=1, values=[1162.82], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 24, 838743), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 24, 846173), params={'ema1_period': 19, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=103, value=None),\n FrozenTrial(number=104, state=1, values=[1162.62], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 24, 846956), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 25, 73673), params={'ema1_period': 18, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=104, value=None),\n FrozenTrial(number=105, state=1, values=[897.54], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 25, 74496), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 25, 274962), params={'ema1_period': 17, 'ema2_period': 44}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=105, value=None),\n FrozenTrial(number=106, state=1, values=[1065.02], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 25, 275817), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 25, 283393), params={'ema1_period': 21, 'ema2_period': 18}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=106, value=None),\n FrozenTrial(number=107, state=1, values=[1120.88], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 25, 284070), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 25, 512927), params={'ema1_period': 20, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=107, value=None),\n FrozenTrial(number=108, state=1, values=[1001.7], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 25, 513737), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 25, 750373), params={'ema1_period': 21, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=108, value=None),\n FrozenTrial(number=109, state=1, values=[1025.12], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 25, 751330), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 25, 759020), params={'ema1_period': 20, 'ema2_period': 19}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=109, value=None),\n FrozenTrial(number=110, state=1, values=[985.34], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 25, 759662), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 26, 25738), params={'ema1_period': 24, 'ema2_period': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=110, value=None),\n FrozenTrial(number=111, state=1, values=[1162.72], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 26, 26541), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 26, 34346), params={'ema1_period': 19, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=111, value=None),\n FrozenTrial(number=112, state=1, values=[1162.82], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 26, 34969), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 26, 42179), params={'ema1_period': 19, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=112, value=None),\n FrozenTrial(number=113, state=1, values=[1162.62], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 26, 42837), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 26, 49962), params={'ema1_period': 18, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=113, value=None),\n FrozenTrial(number=114, state=1, values=[1160.68], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 26, 50584), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 26, 57793), params={'ema1_period': 19, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=114, value=None),\n FrozenTrial(number=115, state=1, values=[1120.88], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 26, 58443), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 26, 65540), params={'ema1_period': 20, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=115, value=None),\n FrozenTrial(number=116, state=1, values=[956.72], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 26, 66141), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 26, 273879), params={'ema1_period': 22, 'ema2_period': 29}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=116, value=None),\n FrozenTrial(number=117, state=1, values=[1162.62], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 26, 274756), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 26, 282481), params={'ema1_period': 18, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=117, value=None),\n FrozenTrial(number=118, state=1, values=[1124.06], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 26, 283075), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 26, 290264), params={'ema1_period': 19, 'ema2_period': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=118, value=None),\n FrozenTrial(number=119, state=1, values=[935.92], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 26, 290951), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 26, 502827), params={'ema1_period': 20, 'ema2_period': 25}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=119, value=None),\n FrozenTrial(number=120, state=1, values=[1065.02], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 26, 503677), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 26, 511644), params={'ema1_period': 21, 'ema2_period': 18}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=120, value=None),\n FrozenTrial(number=121, state=1, values=[1162.72], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 26, 512277), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 26, 519580), params={'ema1_period': 19, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=121, value=None),\n FrozenTrial(number=122, state=1, values=[1001.62], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 26, 520184), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 26, 758142), params={'ema1_period': 18, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=122, value=None),\n FrozenTrial(number=123, state=1, values=[967.06], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 26, 758942), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 26, 969084), params={'ema1_period': 19, 'ema2_period': 33}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=123, value=None),\n FrozenTrial(number=124, state=1, values=[1142.64], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 26, 969979), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 26, 977836), params={'ema1_period': 20, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=124, value=None),\n FrozenTrial(number=125, state=1, values=[1110.94], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 26, 978259), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 26, 986306), params={'ema1_period': 17, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=125, value=None),\n FrozenTrial(number=126, state=1, values=[953.82], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 26, 986870), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 27, 232957), params={'ema1_period': 11, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=126, value=None),\n FrozenTrial(number=127, state=1, values=[1142.84], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 27, 233882), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 27, 241969), params={'ema1_period': 22, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=127, value=None),\n FrozenTrial(number=128, state=1, values=[1000.1], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 27, 242637), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 27, 483594), params={'ema1_period': 19, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=128, value=None),\n FrozenTrial(number=129, state=1, values=[1074.98], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 27, 484594), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 27, 706180), params={'ema1_period': 21, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=129, value=None),\n FrozenTrial(number=130, state=1, values=[1015.24], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 27, 707121), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 27, 715047), params={'ema1_period': 23, 'ema2_period': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=130, value=None),\n FrozenTrial(number=131, state=1, values=[1162.72], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 27, 715704), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 27, 723033), params={'ema1_period': 19, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=131, value=None),\n FrozenTrial(number=132, state=1, values=[1110.84], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 27, 723711), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 27, 959487), params={'ema1_period': 18, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=132, value=None),\n FrozenTrial(number=133, state=1, values=[986.24], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 27, 960398), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 28, 190055), params={'ema1_period': 14, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=133, value=None),\n FrozenTrial(number=134, state=1, values=[1142.64], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 28, 191094), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 28, 198955), params={'ema1_period': 20, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=134, value=None),\n FrozenTrial(number=135, state=1, values=[894.8], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 28, 199544), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 28, 414302), params={'ema1_period': 18, 'ema2_period': 19}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=135, value=None),\n FrozenTrial(number=136, state=1, values=[1110.74], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 28, 415082), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 28, 423053), params={'ema1_period': 19, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=136, value=None),\n FrozenTrial(number=137, state=1, values=[961.8], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 28, 423419), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 28, 431162), params={'ema1_period': 20, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=137, value=None),\n FrozenTrial(number=138, state=1, values=[1065.02], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 28, 431484), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 28, 439068), params={'ema1_period': 21, 'ema2_period': 18}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=138, value=None),\n FrozenTrial(number=139, state=1, values=[1162.82], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 28, 439566), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 28, 446911), params={'ema1_period': 19, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=139, value=None),\n FrozenTrial(number=140, state=1, values=[1133.72], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 28, 447561), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 28, 454851), params={'ema1_period': 20, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=140, value=None),\n FrozenTrial(number=141, state=1, values=[1124.06], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 28, 455188), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 28, 462886), params={'ema1_period': 19, 'ema2_period': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=141, value=None),\n FrozenTrial(number=142, state=1, values=[1160.48], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 28, 463207), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 28, 470993), params={'ema1_period': 18, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=142, value=None),\n FrozenTrial(number=143, state=1, values=[1162.82], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 28, 471491), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 28, 478855), params={'ema1_period': 19, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=143, value=None),\n FrozenTrial(number=144, state=1, values=[1160.48], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 28, 479362), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 28, 708446), params={'ema1_period': 17, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=144, value=None),\n FrozenTrial(number=145, state=1, values=[1124.06], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 28, 709490), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 28, 717267), params={'ema1_period': 19, 'ema2_period': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=145, value=None),\n FrozenTrial(number=146, state=1, values=[1142.64], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 28, 717911), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 28, 725717), params={'ema1_period': 20, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=146, value=None),\n FrozenTrial(number=147, state=1, values=[914.5], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 28, 726567), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 28, 739681), params={'ema1_period': 18, 'ema2_period': 20}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=147, value=None),\n FrozenTrial(number=148, state=1, values=[1074.98], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 28, 740603), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 28, 749084), params={'ema1_period': 21, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=148, value=None),\n FrozenTrial(number=149, state=1, values=[1162.72], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 28, 749962), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 28, 757734), params={'ema1_period': 19, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=149, value=None),\n FrozenTrial(number=150, state=1, values=[954.22], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 28, 758402), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 29, 48359), params={'ema1_period': 25, 'ema2_period': 18}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=150, value=None),\n FrozenTrial(number=151, state=1, values=[1160.68], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 29, 49337), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 29, 60889), params={'ema1_period': 19, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=151, value=None),\n FrozenTrial(number=152, state=1, values=[1020.16], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 29, 61628), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 29, 298546), params={'ema1_period': 18, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=152, value=None),\n FrozenTrial(number=153, state=1, values=[1162.72], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 29, 299141), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 29, 307811), params={'ema1_period': 19, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=153, value=None),\n FrozenTrial(number=154, state=1, values=[1142.82], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 29, 308349), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 29, 316112), params={'ema1_period': 20, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=154, value=None),\n FrozenTrial(number=155, state=1, values=[1074.88], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 29, 316545), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 29, 534080), params={'ema1_period': 20, 'ema2_period': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=155, value=None),\n FrozenTrial(number=156, state=1, values=[1085.04], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 29, 534907), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 29, 543091), params={'ema1_period': 22, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=156, value=None),\n FrozenTrial(number=157, state=1, values=[1160.68], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 29, 543639), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 29, 551327), params={'ema1_period': 19, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=157, value=None),\n FrozenTrial(number=158, state=1, values=[899.16], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 29, 551801), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 29, 753222), params={'ema1_period': 18, 'ema2_period': 40}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=158, value=None),\n FrozenTrial(number=159, state=1, values=[1152.6], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 29, 754663), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 29, 990233), params={'ema1_period': 21, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=159, value=None),\n FrozenTrial(number=160, state=1, values=[798.22], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 29, 991068), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 30, 235574), params={'ema1_period': 8, 'ema2_period': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=160, value=None),\n FrozenTrial(number=161, state=1, values=[1162.72], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 30, 236310), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 30, 244327), params={'ema1_period': 19, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=161, value=None),\n FrozenTrial(number=162, state=1, values=[1133.72], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 30, 244886), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 30, 252451), params={'ema1_period': 20, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=162, value=None),\n FrozenTrial(number=163, state=1, values=[1162.72], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 30, 252959), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 30, 260556), params={'ema1_period': 19, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=163, value=None),\n FrozenTrial(number=164, state=1, values=[1110.84], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 30, 261044), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 30, 268719), params={'ema1_period': 18, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=164, value=None),\n FrozenTrial(number=165, state=1, values=[1162.82], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 30, 269221), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 30, 276847), params={'ema1_period': 19, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=165, value=None),\n FrozenTrial(number=166, state=1, values=[1133.72], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 30, 277370), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 30, 284919), params={'ema1_period': 20, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=166, value=None),\n FrozenTrial(number=167, state=1, values=[1000.0], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 30, 285426), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 30, 293121), params={'ema1_period': 19, 'ema2_period': 19}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=167, value=None),\n FrozenTrial(number=168, state=1, values=[806.22], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 30, 293657), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 30, 531818), params={'ema1_period': 16, 'ema2_period': 18}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=168, value=None),\n FrozenTrial(number=169, state=1, values=[1000.1], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 30, 532631), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 30, 541047), params={'ema1_period': 19, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=169, value=None),\n FrozenTrial(number=170, state=1, values=[1000.0], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 30, 541613), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 30, 651204), params={'ema1_period': 17, 'ema2_period': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=170, value=None),\n FrozenTrial(number=171, state=1, values=[1142.82], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 30, 651862), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 30, 659797), params={'ema1_period': 20, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=171, value=None),\n FrozenTrial(number=172, state=1, values=[1110.74], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 30, 662206), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 30, 670646), params={'ema1_period': 19, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=172, value=None),\n FrozenTrial(number=173, state=1, values=[1160.48], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 30, 671232), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 30, 678940), params={'ema1_period': 18, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=173, value=None),\n FrozenTrial(number=174, state=1, values=[1160.68], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 30, 679516), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 30, 687142), params={'ema1_period': 19, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=174, value=None),\n FrozenTrial(number=175, state=1, values=[1133.72], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 30, 687682), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 30, 695257), params={'ema1_period': 20, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=175, value=None),\n FrozenTrial(number=176, state=1, values=[1163.2], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 30, 695806), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 30, 703494), params={'ema1_period': 21, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=176, value=None),\n FrozenTrial(number=177, state=1, values=[1074.98], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 30, 704041), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 30, 711850), params={'ema1_period': 21, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=177, value=None),\n FrozenTrial(number=178, state=1, values=[1153.36], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 30, 712393), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 30, 935830), params={'ema1_period': 22, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=178, value=None),\n FrozenTrial(number=179, state=1, values=[1084.94], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 30, 936666), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 30, 946081), params={'ema1_period': 21, 'ema2_period': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=179, value=None),\n FrozenTrial(number=180, state=1, values=[1005.18], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 30, 946863), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 30, 954961), params={'ema1_period': 22, 'ema2_period': 18}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=180, value=None),\n FrozenTrial(number=181, state=1, values=[1162.72], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 30, 955557), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 30, 963489), params={'ema1_period': 19, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=181, value=None),\n FrozenTrial(number=182, state=1, values=[1133.72], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 30, 964202), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 30, 972152), params={'ema1_period': 20, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=182, value=None),\n FrozenTrial(number=183, state=1, values=[1160.48], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 30, 972721), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 30, 980598), params={'ema1_period': 18, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=183, value=None),\n FrozenTrial(number=184, state=1, values=[1160.68], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 30, 981221), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 30, 989303), params={'ema1_period': 19, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=184, value=None),\n FrozenTrial(number=185, state=1, values=[1152.6], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 30, 989823), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 30, 997700), params={'ema1_period': 21, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=185, value=None),\n FrozenTrial(number=186, state=1, values=[992.76], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 30, 998289), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 31, 186727), params={'ema1_period': 23, 'ema2_period': 49}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=186, value=None),\n FrozenTrial(number=187, state=1, values=[1162.32], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 31, 187563), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 31, 410384), params={'ema1_period': 18, 'ema2_period': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=187, value=None),\n FrozenTrial(number=188, state=1, values=[1142.82], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 31, 411080), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 31, 419923), params={'ema1_period': 20, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=188, value=None),\n FrozenTrial(number=189, state=1, values=[1085.04], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 31, 420444), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 31, 638008), params={'ema1_period': 24, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=189, value=None),\n FrozenTrial(number=190, state=1, values=[1162.82], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 31, 638919), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 31, 647471), params={'ema1_period': 19, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=190, value=None),\n FrozenTrial(number=191, state=1, values=[1162.82], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 31, 648108), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 31, 656070), params={'ema1_period': 19, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=191, value=None),\n FrozenTrial(number=192, state=1, values=[1162.82], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 31, 656612), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 31, 664589), params={'ema1_period': 19, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=192, value=None),\n FrozenTrial(number=193, state=1, values=[1162.82], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 31, 665164), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 31, 673091), params={'ema1_period': 19, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=193, value=None),\n FrozenTrial(number=194, state=1, values=[1162.82], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 31, 673621), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 31, 681622), params={'ema1_period': 19, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=194, value=None),\n FrozenTrial(number=195, state=1, values=[1162.82], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 31, 682249), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 31, 690247), params={'ema1_period': 19, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=195, value=None),\n FrozenTrial(number=196, state=1, values=[1074.88], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 31, 690948), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 31, 699021), params={'ema1_period': 20, 'ema2_period': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=196, value=None),\n FrozenTrial(number=197, state=1, values=[1094.6], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 31, 699598), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 31, 707702), params={'ema1_period': 19, 'ema2_period': 18}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=197, value=None),\n FrozenTrial(number=198, state=1, values=[1162.62], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 31, 708261), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 31, 716096), params={'ema1_period': 18, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=198, value=None),\n FrozenTrial(number=199, state=1, values=[1074.88], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 31, 716683), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 31, 724670), params={'ema1_period': 20, 'ema2_period': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=199, value=None),\n FrozenTrial(number=200, state=1, values=[900.46], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 31, 725283), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 31, 928959), params={'ema1_period': 19, 'ema2_period': 37}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=200, value=None),\n FrozenTrial(number=201, state=1, values=[1162.82], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 31, 929836), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 31, 938509), params={'ema1_period': 19, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=201, value=None),\n FrozenTrial(number=202, state=1, values=[1162.82], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 31, 939079), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 31, 947137), params={'ema1_period': 19, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=202, value=None),\n FrozenTrial(number=203, state=1, values=[1162.82], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 31, 947767), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 31, 955921), params={'ema1_period': 19, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=203, value=None),\n FrozenTrial(number=204, state=1, values=[1162.62], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 31, 956567), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 31, 964684), params={'ema1_period': 18, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=204, value=None),\n FrozenTrial(number=205, state=1, values=[1074.88], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 31, 965288), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 31, 973369), params={'ema1_period': 20, 'ema2_period': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=205, value=None),\n FrozenTrial(number=206, state=1, values=[1162.82], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 31, 973831), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 31, 982099), params={'ema1_period': 19, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=206, value=None),\n FrozenTrial(number=207, state=1, values=[1094.6], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 31, 982748), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 31, 990717), params={'ema1_period': 19, 'ema2_period': 18}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=207, value=None),\n FrozenTrial(number=208, state=1, values=[1084.94], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 31, 991276), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 31, 999367), params={'ema1_period': 21, 'ema2_period': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=208, value=None),\n FrozenTrial(number=209, state=1, values=[1162.62], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 32, 4), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 32, 7948), params={'ema1_period': 18, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=209, value=None),\n FrozenTrial(number=210, state=1, values=[1025.12], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 32, 8486), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 32, 16619), params={'ema1_period': 20, 'ema2_period': 19}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=210, value=None),\n FrozenTrial(number=211, state=1, values=[1162.82], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 32, 17169), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 32, 25287), params={'ema1_period': 19, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=211, value=None),\n FrozenTrial(number=212, state=1, values=[1162.82], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 32, 25872), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 32, 34136), params={'ema1_period': 19, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=212, value=None),\n FrozenTrial(number=213, state=1, values=[1124.06], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 32, 34631), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 32, 42718), params={'ema1_period': 19, 'ema2_period': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=213, value=None),\n FrozenTrial(number=214, state=1, values=[1162.72], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 32, 43257), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 32, 51365), params={'ema1_period': 19, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=214, value=None),\n FrozenTrial(number=215, state=1, values=[1074.9], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 32, 51963), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 32, 273059), params={'ema1_period': 20, 'ema2_period': 18}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=215, value=None),\n FrozenTrial(number=216, state=1, values=[1162.62], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 32, 273689), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 32, 282289), params={'ema1_period': 18, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=216, value=None),\n FrozenTrial(number=217, state=1, values=[1124.06], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 32, 282819), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 32, 291061), params={'ema1_period': 19, 'ema2_period': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=217, value=None),\n FrozenTrial(number=218, state=1, values=[946.4], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 32, 291712), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 32, 548737), params={'ema1_period': 21, 'ema2_period': 27}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=218, value=None),\n FrozenTrial(number=219, state=1, values=[1162.72], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 32, 549550), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 32, 558258), params={'ema1_period': 19, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=219, value=None),\n FrozenTrial(number=220, state=1, values=[1133.72], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 32, 558953), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 32, 567301), params={'ema1_period': 20, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=220, value=None),\n FrozenTrial(number=221, state=1, values=[1162.82], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 32, 567891), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 32, 576020), params={'ema1_period': 19, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=221, value=None),\n FrozenTrial(number=222, state=1, values=[1162.32], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 32, 576584), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 32, 584802), params={'ema1_period': 18, 'ema2_period': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=222, value=None),\n FrozenTrial(number=223, state=1, values=[1162.72], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 32, 585334), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 32, 593567), params={'ema1_period': 19, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=223, value=None),\n FrozenTrial(number=224, state=1, values=[1162.82], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 32, 594065), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 32, 602278), params={'ema1_period': 19, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=224, value=None),\n FrozenTrial(number=225, state=1, values=[1160.48], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 32, 602744), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 32, 610931), params={'ema1_period': 18, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=225, value=None),\n FrozenTrial(number=226, state=1, values=[1153.36], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 32, 611512), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 32, 619807), params={'ema1_period': 22, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=226, value=None),\n FrozenTrial(number=227, state=1, values=[1162.82], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 32, 620322), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 32, 628578), params={'ema1_period': 19, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=227, value=None),\n FrozenTrial(number=228, state=1, values=[1074.88], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 32, 629108), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 32, 637340), params={'ema1_period': 20, 'ema2_period': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=228, value=None),\n FrozenTrial(number=229, state=1, values=[1110.84], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 32, 637883), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 32, 646155), params={'ema1_period': 18, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=229, value=None),\n FrozenTrial(number=230, state=1, values=[1094.6], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 32, 646700), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 32, 655090), params={'ema1_period': 19, 'ema2_period': 18}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=230, value=None),\n FrozenTrial(number=231, state=1, values=[1162.82], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 32, 655908), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 32, 666572), params={'ema1_period': 19, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=231, value=None),\n FrozenTrial(number=232, state=1, values=[1162.82], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 32, 667333), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 32, 677264), params={'ema1_period': 19, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=232, value=None),\n FrozenTrial(number=233, state=1, values=[1142.82], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 32, 678065), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 32, 687071), params={'ema1_period': 20, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=233, value=None),\n FrozenTrial(number=234, state=1, values=[1162.82], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 32, 687666), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 32, 696065), params={'ema1_period': 19, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=234, value=None),\n FrozenTrial(number=235, state=1, values=[1124.06], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 32, 696610), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 32, 705065), params={'ema1_period': 19, 'ema2_period': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=235, value=None),\n FrozenTrial(number=236, state=1, values=[1074.98], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 32, 705625), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 32, 714185), params={'ema1_period': 21, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=236, value=None),\n FrozenTrial(number=237, state=1, values=[1160.48], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 32, 714695), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 32, 723108), params={'ema1_period': 18, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=237, value=None),\n FrozenTrial(number=238, state=1, values=[1074.88], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 32, 723654), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 32, 732087), params={'ema1_period': 20, 'ema2_period': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=238, value=None),\n FrozenTrial(number=239, state=1, values=[1162.72], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 32, 732695), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 32, 741128), params={'ema1_period': 19, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=239, value=None),\n FrozenTrial(number=240, state=1, values=[1133.72], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 32, 741701), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 32, 750249), params={'ema1_period': 20, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=240, value=None),\n FrozenTrial(number=241, state=1, values=[1162.82], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 32, 750884), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 32, 759409), params={'ema1_period': 19, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=241, value=None),\n FrozenTrial(number=242, state=1, values=[1162.72], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 32, 759989), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 32, 768473), params={'ema1_period': 19, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=242, value=None),\n FrozenTrial(number=243, state=1, values=[1162.82], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 32, 769028), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 32, 777576), params={'ema1_period': 19, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=243, value=None),\n FrozenTrial(number=244, state=1, values=[1160.68], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 32, 778130), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 32, 786629), params={'ema1_period': 19, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=244, value=None),\n FrozenTrial(number=245, state=1, values=[1162.32], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 32, 787288), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 32, 795704), params={'ema1_period': 18, 'ema2_period': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=245, value=None),\n FrozenTrial(number=246, state=1, values=[1074.9], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 32, 796440), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 32, 804864), params={'ema1_period': 20, 'ema2_period': 18}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=246, value=None),\n FrozenTrial(number=247, state=1, values=[1162.72], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 32, 805461), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 32, 814204), params={'ema1_period': 19, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=247, value=None),\n FrozenTrial(number=248, state=1, values=[1162.62], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 32, 814763), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 32, 823384), params={'ema1_period': 18, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=248, value=None),\n FrozenTrial(number=249, state=1, values=[1160.68], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 32, 824042), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 32, 832686), params={'ema1_period': 19, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=249, value=None),\n FrozenTrial(number=250, state=1, values=[1124.06], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 32, 833287), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 32, 841709), params={'ema1_period': 19, 'ema2_period': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=250, value=None),\n FrozenTrial(number=251, state=1, values=[1163.2], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 32, 842265), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 32, 850958), params={'ema1_period': 21, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=251, value=None),\n FrozenTrial(number=252, state=1, values=[1075.0], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 32, 851522), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 33, 75537), params={'ema1_period': 22, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=252, value=None),\n FrozenTrial(number=253, state=1, values=[1143.02], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 33, 76390), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 33, 85647), params={'ema1_period': 21, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=253, value=None),\n FrozenTrial(number=254, state=1, values=[1163.2], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 33, 86245), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 33, 94808), params={'ema1_period': 21, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=254, value=None),\n FrozenTrial(number=255, state=1, values=[1163.2], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 33, 95394), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 33, 103985), params={'ema1_period': 21, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=255, value=None),\n FrozenTrial(number=256, state=1, values=[1152.6], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 33, 104493), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 33, 113285), params={'ema1_period': 21, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=256, value=None),\n FrozenTrial(number=257, state=1, values=[1143.02], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 33, 113861), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 33, 122396), params={'ema1_period': 21, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=257, value=None),\n FrozenTrial(number=258, state=1, values=[964.46], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 33, 122982), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 33, 315470), params={'ema1_period': 21, 'ema2_period': 46}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=258, value=None),\n FrozenTrial(number=259, state=1, values=[1075.0], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 33, 316049), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 33, 325131), params={'ema1_period': 22, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=259, value=None),\n FrozenTrial(number=260, state=1, values=[1163.2], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 33, 325683), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 33, 334373), params={'ema1_period': 21, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=260, value=None),\n FrozenTrial(number=261, state=1, values=[1153.36], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 33, 334943), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 33, 343547), params={'ema1_period': 22, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=261, value=None),\n FrozenTrial(number=262, state=1, values=[1163.2], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 33, 344093), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 33, 352943), params={'ema1_period': 21, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=262, value=None),\n FrozenTrial(number=263, state=1, values=[1143.02], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 33, 353504), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 33, 362386), params={'ema1_period': 21, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=263, value=None),\n FrozenTrial(number=264, state=1, values=[1152.6], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 33, 363049), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 33, 372817), params={'ema1_period': 21, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=264, value=None),\n FrozenTrial(number=265, state=1, values=[1163.2], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 33, 373457), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 33, 387082), params={'ema1_period': 21, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=265, value=None),\n FrozenTrial(number=266, state=1, values=[1075.0], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 33, 388497), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 33, 403876), params={'ema1_period': 22, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=266, value=None),\n FrozenTrial(number=267, state=1, values=[1163.2], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 33, 404678), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 33, 414887), params={'ema1_period': 21, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=267, value=None),\n FrozenTrial(number=268, state=1, values=[1152.6], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 33, 415674), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 33, 425418), params={'ema1_period': 21, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=268, value=None),\n FrozenTrial(number=269, state=1, values=[1143.02], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 33, 426200), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 33, 435949), params={'ema1_period': 21, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=269, value=None),\n FrozenTrial(number=270, state=1, values=[1075.0], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 33, 436642), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 33, 447994), params={'ema1_period': 22, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=270, value=None),\n FrozenTrial(number=271, state=1, values=[1091.24], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 33, 449264), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 33, 461479), params={'ema1_period': 21, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=271, value=None),\n FrozenTrial(number=272, state=1, values=[1163.2], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 33, 462253), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 33, 471943), params={'ema1_period': 21, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=272, value=None),\n FrozenTrial(number=273, state=1, values=[1143.02], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 33, 472785), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 33, 482152), params={'ema1_period': 21, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=273, value=None),\n FrozenTrial(number=274, state=1, values=[1163.2], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 33, 482751), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 33, 492070), params={'ema1_period': 21, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=274, value=None),\n FrozenTrial(number=275, state=1, values=[1091.24], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 33, 492693), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 33, 501717), params={'ema1_period': 21, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=275, value=None),\n FrozenTrial(number=276, state=1, values=[1075.0], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 33, 502215), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 33, 511200), params={'ema1_period': 22, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=276, value=None),\n FrozenTrial(number=277, state=1, values=[1152.6], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 33, 511719), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 33, 520734), params={'ema1_period': 21, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=277, value=None),\n FrozenTrial(number=278, state=1, values=[1163.2], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 33, 521240), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 33, 530176), params={'ema1_period': 21, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=278, value=None),\n FrozenTrial(number=279, state=1, values=[1075.0], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 33, 530645), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 33, 539639), params={'ema1_period': 22, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=279, value=None),\n FrozenTrial(number=280, state=1, values=[1143.02], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 33, 540130), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 33, 549054), params={'ema1_period': 21, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=280, value=None),\n FrozenTrial(number=281, state=1, values=[1152.6], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 33, 549556), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 33, 558444), params={'ema1_period': 21, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=281, value=None),\n FrozenTrial(number=282, state=1, values=[1153.36], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 33, 558802), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 33, 568063), params={'ema1_period': 22, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=282, value=None),\n FrozenTrial(number=283, state=1, values=[1085.04], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 33, 568572), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 33, 577529), params={'ema1_period': 23, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=283, value=None),\n FrozenTrial(number=284, state=1, values=[1163.2], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 33, 577886), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 33, 586856), params={'ema1_period': 21, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=284, value=None),\n FrozenTrial(number=285, state=1, values=[948.18], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 33, 587229), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 33, 795132), params={'ema1_period': 21, 'ema2_period': 31}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=285, value=None),\n FrozenTrial(number=286, state=1, values=[1143.02], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 33, 795632), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 33, 805497), params={'ema1_period': 21, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=286, value=None),\n FrozenTrial(number=287, state=1, values=[1075.0], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 33, 806033), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 33, 815058), params={'ema1_period': 22, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=287, value=None),\n FrozenTrial(number=288, state=1, values=[1152.6], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 33, 815577), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 33, 824744), params={'ema1_period': 21, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=288, value=None),\n FrozenTrial(number=289, state=1, values=[1163.2], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 33, 825123), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 33, 834342), params={'ema1_period': 21, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=289, value=None),\n FrozenTrial(number=290, state=1, values=[1163.2], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 33, 834846), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 33, 843803), params={'ema1_period': 21, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=290, value=None),\n FrozenTrial(number=291, state=1, values=[1143.02], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 33, 844164), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 33, 853565), params={'ema1_period': 21, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=291, value=None),\n FrozenTrial(number=292, state=1, values=[1075.0], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 33, 854052), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 33, 863287), params={'ema1_period': 22, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=292, value=None),\n FrozenTrial(number=293, state=1, values=[1143.02], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 33, 863648), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 33, 872791), params={'ema1_period': 21, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=293, value=None),\n FrozenTrial(number=294, state=1, values=[1152.6], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 33, 873234), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 33, 882257), params={'ema1_period': 21, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=294, value=None),\n FrozenTrial(number=295, state=1, values=[1075.0], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 33, 882857), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 33, 892089), params={'ema1_period': 22, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=295, value=None),\n FrozenTrial(number=296, state=1, values=[1033.92], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 33, 892560), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 34, 103557), params={'ema1_period': 23, 'ema2_period': 22}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=296, value=None),\n FrozenTrial(number=297, state=1, values=[1163.2], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 34, 104022), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 34, 113844), params={'ema1_period': 21, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=297, value=None),\n FrozenTrial(number=298, state=1, values=[936.12], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 34, 114348), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 34, 326516), params={'ema1_period': 21, 'ema2_period': 24}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=298, value=None),\n FrozenTrial(number=299, state=1, values=[1143.02], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 34, 327343), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 34, 337219), params={'ema1_period': 21, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=299, value=None),\n FrozenTrial(number=300, state=1, values=[1163.2], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 34, 337571), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 34, 346958), params={'ema1_period': 21, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=300, value=None),\n FrozenTrial(number=301, state=1, values=[1091.24], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 34, 347349), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 34, 356817), params={'ema1_period': 21, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=301, value=None),\n FrozenTrial(number=302, state=1, values=[1152.6], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 34, 357346), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 34, 366506), params={'ema1_period': 21, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=302, value=None),\n FrozenTrial(number=303, state=1, values=[1153.36], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 34, 366993), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 34, 376177), params={'ema1_period': 22, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=303, value=None),\n FrozenTrial(number=304, state=1, values=[1163.2], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 34, 376713), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 34, 386005), params={'ema1_period': 21, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=304, value=None),\n FrozenTrial(number=305, state=1, values=[1163.2], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 34, 386459), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 34, 395836), params={'ema1_period': 21, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=305, value=None),\n FrozenTrial(number=306, state=1, values=[1075.0], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 34, 396361), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 34, 405828), params={'ema1_period': 22, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=306, value=None),\n FrozenTrial(number=307, state=1, values=[1143.02], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 34, 406339), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 34, 415600), params={'ema1_period': 21, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=307, value=None),\n FrozenTrial(number=308, state=1, values=[1152.6], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 34, 416094), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 34, 425501), params={'ema1_period': 21, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=308, value=None),\n FrozenTrial(number=309, state=1, values=[1163.2], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 34, 425992), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 34, 435282), params={'ema1_period': 21, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=309, value=None),\n FrozenTrial(number=310, state=1, values=[1163.2], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 34, 435671), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 34, 445242), params={'ema1_period': 21, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=310, value=None),\n FrozenTrial(number=311, state=1, values=[1143.02], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 34, 445734), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 34, 455020), params={'ema1_period': 21, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=311, value=None),\n FrozenTrial(number=312, state=1, values=[1090.94], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 34, 455361), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 34, 687822), params={'ema1_period': 22, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=312, value=None),\n FrozenTrial(number=313, state=1, values=[1163.2], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 34, 688490), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 34, 698280), params={'ema1_period': 21, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=313, value=None),\n FrozenTrial(number=314, state=1, values=[1163.2], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 34, 698806), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 34, 707996), params={'ema1_period': 21, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=314, value=None),\n FrozenTrial(number=315, state=1, values=[1163.2], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 34, 708555), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 34, 717711), params={'ema1_period': 21, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=315, value=None),\n FrozenTrial(number=316, state=1, values=[1153.36], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 34, 718195), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 34, 727486), params={'ema1_period': 22, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=316, value=None),\n FrozenTrial(number=317, state=1, values=[1152.6], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 34, 728011), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 34, 736999), params={'ema1_period': 21, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=317, value=None),\n FrozenTrial(number=318, state=1, values=[1153.36], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 34, 737431), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 34, 746613), params={'ema1_period': 22, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=318, value=None),\n FrozenTrial(number=319, state=1, values=[1163.2], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 34, 747146), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 34, 756217), params={'ema1_period': 21, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=319, value=None),\n FrozenTrial(number=320, state=1, values=[974.7], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 34, 756695), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 34, 766015), params={'ema1_period': 22, 'ema2_period': 42}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=320, value=None),\n FrozenTrial(number=321, state=1, values=[1163.2], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 34, 766523), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 34, 775759), params={'ema1_period': 21, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=321, value=None),\n FrozenTrial(number=322, state=1, values=[1091.24], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 34, 776220), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 34, 785641), params={'ema1_period': 21, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=322, value=None),\n FrozenTrial(number=323, state=1, values=[1142.64], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 34, 786131), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 34, 795482), params={'ema1_period': 20, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=323, value=None),\n FrozenTrial(number=324, state=1, values=[1000.0], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 34, 795981), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 34, 907004), params={'ema1_period': 13, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=324, value=None),\n FrozenTrial(number=325, state=1, values=[1014.94], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 34, 907648), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 35, 127623), params={'ema1_period': 25, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=325, value=None),\n FrozenTrial(number=326, state=1, values=[1153.36], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 35, 128342), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 35, 138963), params={'ema1_period': 22, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=326, value=None),\n FrozenTrial(number=327, state=1, values=[1163.2], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 35, 139474), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 35, 149125), params={'ema1_period': 21, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=327, value=None),\n FrozenTrial(number=328, state=1, values=[1142.82], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 35, 149670), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 35, 159322), params={'ema1_period': 20, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=328, value=None),\n FrozenTrial(number=329, state=1, values=[1152.6], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 35, 159832), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 35, 169524), params={'ema1_period': 21, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=329, value=None),\n FrozenTrial(number=330, state=1, values=[1075.0], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 35, 170032), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 35, 179551), params={'ema1_period': 22, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=330, value=None),\n FrozenTrial(number=331, state=1, values=[900.04], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 35, 180075), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 35, 383655), params={'ema1_period': 24, 'ema2_period': 33}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=331, value=None),\n FrozenTrial(number=332, state=1, values=[1142.64], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 35, 384355), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 35, 394857), params={'ema1_period': 20, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=332, value=None),\n FrozenTrial(number=333, state=1, values=[1163.2], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 35, 395420), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 35, 404994), params={'ema1_period': 21, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=333, value=None),\n FrozenTrial(number=334, state=1, values=[1143.02], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 35, 405537), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 35, 415137), params={'ema1_period': 21, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=334, value=None),\n FrozenTrial(number=335, state=1, values=[1142.84], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 35, 415690), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 35, 425081), params={'ema1_period': 22, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=335, value=None),\n FrozenTrial(number=336, state=1, values=[1142.82], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 35, 425557), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 35, 435107), params={'ema1_period': 20, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=336, value=None),\n FrozenTrial(number=337, state=1, values=[1163.2], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 35, 435620), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 35, 444887), params={'ema1_period': 21, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=337, value=None),\n FrozenTrial(number=338, state=1, values=[1143.02], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 35, 445383), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 35, 454824), params={'ema1_period': 21, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=338, value=None),\n FrozenTrial(number=339, state=1, values=[1074.88], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 35, 455363), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 35, 464909), params={'ema1_period': 20, 'ema2_period': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=339, value=None),\n FrozenTrial(number=340, state=1, values=[1090.94], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 35, 465571), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 35, 475212), params={'ema1_period': 22, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=340, value=None),\n FrozenTrial(number=341, state=1, values=[1143.02], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 35, 475763), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 35, 485517), params={'ema1_period': 21, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=341, value=None),\n FrozenTrial(number=342, state=1, values=[1074.98], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 35, 486033), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 35, 495588), params={'ema1_period': 21, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=342, value=None),\n FrozenTrial(number=343, state=1, values=[1162.48], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 35, 495987), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 35, 505685), params={'ema1_period': 22, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=343, value=None),\n FrozenTrial(number=344, state=1, values=[1152.6], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 35, 506245), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 35, 515938), params={'ema1_period': 21, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=344, value=None),\n FrozenTrial(number=345, state=1, values=[1142.82], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 35, 516449), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 35, 526112), params={'ema1_period': 20, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=345, value=None),\n FrozenTrial(number=346, state=1, values=[1074.98], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 35, 526583), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 35, 536255), params={'ema1_period': 21, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=346, value=None),\n FrozenTrial(number=347, state=1, values=[1153.36], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 35, 536764), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 35, 546306), params={'ema1_period': 22, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=347, value=None),\n FrozenTrial(number=348, state=1, values=[1163.2], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 35, 546828), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 35, 556388), params={'ema1_period': 21, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=348, value=None),\n FrozenTrial(number=349, state=1, values=[1074.88], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 35, 556777), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 35, 569032), params={'ema1_period': 20, 'ema2_period': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=349, value=None),\n FrozenTrial(number=350, state=1, values=[907.76], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 35, 570215), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 35, 775863), params={'ema1_period': 23, 'ema2_period': 38}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=350, value=None),\n FrozenTrial(number=351, state=1, values=[1152.6], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 35, 776564), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 35, 787292), params={'ema1_period': 21, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=351, value=None),\n FrozenTrial(number=352, state=1, values=[1085.04], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 35, 787808), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 35, 798110), params={'ema1_period': 22, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=352, value=None),\n FrozenTrial(number=353, state=1, values=[1142.82], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 35, 798628), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 35, 808848), params={'ema1_period': 20, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=353, value=None),\n FrozenTrial(number=354, state=1, values=[1143.02], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 35, 809344), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 35, 819484), params={'ema1_period': 21, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=354, value=None),\n FrozenTrial(number=355, state=1, values=[1074.98], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 35, 819857), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 35, 829924), params={'ema1_period': 21, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=355, value=None),\n FrozenTrial(number=356, state=1, values=[1074.88], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 35, 830519), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 35, 840758), params={'ema1_period': 20, 'ema2_period': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=356, value=None),\n FrozenTrial(number=357, state=1, values=[1075.0], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 35, 841224), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 35, 851292), params={'ema1_period': 22, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=357, value=None),\n FrozenTrial(number=358, state=1, values=[1143.02], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 35, 851644), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 35, 862335), params={'ema1_period': 21, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=358, value=None),\n FrozenTrial(number=359, state=1, values=[849.0], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 35, 862715), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 36, 110501), params={'ema1_period': 9, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=359, value=None),\n FrozenTrial(number=360, state=1, values=[1091.24], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 36, 111294), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 36, 121908), params={'ema1_period': 21, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=360, value=None),\n FrozenTrial(number=361, state=1, values=[956.72], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 36, 122260), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 36, 132826), params={'ema1_period': 22, 'ema2_period': 29}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=361, value=None),\n FrozenTrial(number=362, state=1, values=[1142.82], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 36, 133306), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 36, 143266), params={'ema1_period': 20, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=362, value=None),\n FrozenTrial(number=363, state=1, values=[1074.98], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 36, 143602), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 36, 153716), params={'ema1_period': 21, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=363, value=None),\n FrozenTrial(number=364, state=1, values=[1142.84], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 36, 154182), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 36, 164460), params={'ema1_period': 22, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=364, value=None),\n FrozenTrial(number=365, state=1, values=[1163.2], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 36, 164907), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 36, 175237), params={'ema1_period': 21, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=365, value=None),\n FrozenTrial(number=366, state=1, values=[936.22], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 36, 175744), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 36, 387320), params={'ema1_period': 20, 'ema2_period': 26}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=366, value=None),\n FrozenTrial(number=367, state=1, values=[1064.82], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 36, 388064), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 36, 662884), params={'ema1_period': 23, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=367, value=None),\n FrozenTrial(number=368, state=1, values=[1001.7], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 36, 663610), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 36, 674288), params={'ema1_period': 21, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=368, value=None),\n FrozenTrial(number=369, state=1, values=[1084.94], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 36, 674809), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 36, 685270), params={'ema1_period': 21, 'ema2_period': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=369, value=None),\n FrozenTrial(number=370, state=1, values=[1143.02], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 36, 685681), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 36, 696286), params={'ema1_period': 21, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=370, value=None),\n FrozenTrial(number=371, state=1, values=[1075.0], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 36, 696841), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 36, 707007), params={'ema1_period': 22, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=371, value=None),\n FrozenTrial(number=372, state=1, values=[1133.72], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 36, 707472), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 36, 717611), params={'ema1_period': 20, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=372, value=None),\n FrozenTrial(number=373, state=1, values=[1143.02], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 36, 718067), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 36, 728645), params={'ema1_period': 21, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=373, value=None),\n FrozenTrial(number=374, state=1, values=[1075.0], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 36, 729695), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 36, 742240), params={'ema1_period': 22, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=374, value=None),\n FrozenTrial(number=375, state=1, values=[1120.88], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 36, 743086), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 36, 755082), params={'ema1_period': 20, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=375, value=None),\n FrozenTrial(number=376, state=1, values=[1000.0], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 36, 755886), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 36, 875372), params={'ema1_period': 15, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=376, value=None),\n FrozenTrial(number=377, state=1, values=[1084.94], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 36, 876223), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 36, 886986), params={'ema1_period': 21, 'ema2_period': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=377, value=None),\n FrozenTrial(number=378, state=1, values=[1074.98], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 36, 887501), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 36, 897658), params={'ema1_period': 21, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=378, value=None),\n FrozenTrial(number=379, state=1, values=[1142.64], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 36, 898236), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 36, 908120), params={'ema1_period': 20, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=379, value=None),\n FrozenTrial(number=380, state=1, values=[1085.04], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 36, 908652), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 36, 918416), params={'ema1_period': 24, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=380, value=None),\n FrozenTrial(number=381, state=1, values=[1085.04], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 36, 918925), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 36, 928657), params={'ema1_period': 23, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=381, value=None),\n FrozenTrial(number=382, state=1, values=[1091.24], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 36, 929350), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 36, 939427), params={'ema1_period': 21, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=382, value=None),\n FrozenTrial(number=383, state=1, values=[1085.04], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 36, 939915), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 36, 950208), params={'ema1_period': 22, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=383, value=None),\n FrozenTrial(number=384, state=1, values=[1163.2], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 36, 950580), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 36, 960897), params={'ema1_period': 21, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=384, value=None),\n FrozenTrial(number=385, state=1, values=[1142.84], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 36, 961394), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 36, 971563), params={'ema1_period': 22, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=385, value=None),\n FrozenTrial(number=386, state=1, values=[1074.88], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 36, 971919), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 36, 982405), params={'ema1_period': 20, 'ema2_period': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=386, value=None),\n FrozenTrial(number=387, state=1, values=[1143.02], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 36, 982891), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 36, 995612), params={'ema1_period': 21, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=387, value=None),\n FrozenTrial(number=388, state=1, values=[1074.98], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 36, 996406), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 37, 7278), params={'ema1_period': 21, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=388, value=None),\n FrozenTrial(number=389, state=1, values=[1075.0], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 37, 7839), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 37, 18642), params={'ema1_period': 22, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=389, value=None),\n FrozenTrial(number=390, state=1, values=[1133.72], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 37, 19110), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 37, 29658), params={'ema1_period': 20, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=390, value=None),\n FrozenTrial(number=391, state=1, values=[1143.02], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 37, 30191), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 37, 40285), params={'ema1_period': 21, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=391, value=None),\n FrozenTrial(number=392, state=1, values=[1163.2], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 37, 40858), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 37, 51060), params={'ema1_period': 21, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=392, value=None),\n FrozenTrial(number=393, state=1, values=[1142.84], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 37, 51718), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 37, 61913), params={'ema1_period': 22, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=393, value=None),\n FrozenTrial(number=394, state=1, values=[1074.88], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 37, 62458), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 37, 72426), params={'ema1_period': 20, 'ema2_period': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=394, value=None),\n FrozenTrial(number=395, state=1, values=[1143.02], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 37, 72882), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 37, 83036), params={'ema1_period': 21, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=395, value=None),\n FrozenTrial(number=396, state=1, values=[1075.0], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 37, 83516), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 37, 93700), params={'ema1_period': 22, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=396, value=None),\n FrozenTrial(number=397, state=1, values=[953.82], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 37, 94387), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 37, 104527), params={'ema1_period': 11, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=397, value=None),\n FrozenTrial(number=398, state=1, values=[1091.24], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 37, 105024), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 37, 115449), params={'ema1_period': 21, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=398, value=None),\n FrozenTrial(number=399, state=1, values=[1142.64], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 37, 115984), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 37, 126255), params={'ema1_period': 20, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=399, value=None),\n FrozenTrial(number=400, state=1, values=[1065.02], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 37, 126811), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 37, 137110), params={'ema1_period': 21, 'ema2_period': 18}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=400, value=None),\n FrozenTrial(number=401, state=1, values=[1074.98], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 37, 137578), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 37, 147665), params={'ema1_period': 21, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=401, value=None),\n FrozenTrial(number=402, state=1, values=[1085.04], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 37, 148181), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 37, 158395), params={'ema1_period': 23, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=402, value=None),\n FrozenTrial(number=403, state=1, values=[1120.88], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 37, 158861), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 37, 169214), params={'ema1_period': 20, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=403, value=None),\n FrozenTrial(number=404, state=1, values=[1074.98], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 37, 169761), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 37, 179979), params={'ema1_period': 21, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=404, value=None),\n FrozenTrial(number=405, state=1, values=[1064.92], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 37, 180517), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 37, 396536), params={'ema1_period': 22, 'ema2_period': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=405, value=None),\n FrozenTrial(number=406, state=1, values=[890.22], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 37, 397309), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 37, 602070), params={'ema1_period': 21, 'ema2_period': 34}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=406, value=None),\n FrozenTrial(number=407, state=1, values=[1075.0], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 37, 602806), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 37, 613882), params={'ema1_period': 22, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=407, value=None),\n FrozenTrial(number=408, state=1, values=[1143.02], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 37, 614476), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 37, 624721), params={'ema1_period': 21, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=408, value=None),\n FrozenTrial(number=409, state=1, values=[1120.88], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 37, 625263), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 37, 635412), params={'ema1_period': 20, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=409, value=None),\n FrozenTrial(number=410, state=1, values=[1075.0], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 37, 635900), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 37, 646200), params={'ema1_period': 22, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=410, value=None),\n FrozenTrial(number=411, state=1, values=[1163.2], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 37, 646728), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 37, 656934), params={'ema1_period': 21, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=411, value=None),\n FrozenTrial(number=412, state=1, values=[838.88], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 37, 657330), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 37, 909018), params={'ema1_period': 7, 'ema2_period': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=412, value=None),\n FrozenTrial(number=413, state=1, values=[975.46], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 37, 909830), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 37, 920772), params={'ema1_period': 14, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=413, value=None),\n FrozenTrial(number=414, state=1, values=[1153.36], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 37, 921348), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 37, 931764), params={'ema1_period': 25, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=414, value=None),\n FrozenTrial(number=415, state=1, values=[1142.64], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 37, 932253), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 37, 942527), params={'ema1_period': 20, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=415, value=None),\n FrozenTrial(number=416, state=1, values=[1074.98], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 37, 943044), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 37, 953237), params={'ema1_period': 21, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=416, value=None),\n FrozenTrial(number=417, state=1, values=[1143.02], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 37, 953730), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 37, 963985), params={'ema1_period': 21, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=417, value=None),\n FrozenTrial(number=418, state=1, values=[1004.86], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 37, 964518), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 38, 157873), params={'ema1_period': 22, 'ema2_period': 47}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=418, value=None),\n FrozenTrial(number=419, state=1, values=[1152.6], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 38, 158348), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 38, 169267), params={'ema1_period': 21, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=419, value=None),\n FrozenTrial(number=420, state=1, values=[1142.82], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 38, 169811), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 38, 180117), params={'ema1_period': 20, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=420, value=None),\n FrozenTrial(number=421, state=1, values=[1084.94], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 38, 180655), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 38, 190976), params={'ema1_period': 21, 'ema2_period': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=421, value=None),\n FrozenTrial(number=422, state=1, values=[1075.0], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 38, 191457), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 38, 201824), params={'ema1_period': 22, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=422, value=None),\n FrozenTrial(number=423, state=1, values=[975.92], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 38, 202294), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 38, 416320), params={'ema1_period': 21, 'ema2_period': 23}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=423, value=None),\n FrozenTrial(number=424, state=1, values=[1142.64], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 38, 417105), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 38, 429375), params={'ema1_period': 20, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=424, value=None),\n FrozenTrial(number=425, state=1, values=[1074.98], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 38, 430034), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 38, 441551), params={'ema1_period': 21, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=425, value=None),\n FrozenTrial(number=426, state=1, values=[1075.0], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 38, 442322), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 38, 453133), params={'ema1_period': 22, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=426, value=None),\n FrozenTrial(number=427, state=1, values=[1142.64], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 38, 453683), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 38, 464271), params={'ema1_period': 20, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=427, value=None),\n FrozenTrial(number=428, state=1, values=[1074.98], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 38, 464810), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 38, 475329), params={'ema1_period': 21, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=428, value=None),\n FrozenTrial(number=429, state=1, values=[1091.24], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 38, 475855), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 38, 486338), params={'ema1_period': 21, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=429, value=None),\n FrozenTrial(number=430, state=1, values=[1002.6], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 38, 486820), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 38, 690418), params={'ema1_period': 22, 'ema2_period': 50}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=430, value=None),\n FrozenTrial(number=431, state=1, values=[1074.9], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 38, 691163), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 38, 702730), params={'ema1_period': 20, 'ema2_period': 18}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=431, value=None),\n FrozenTrial(number=432, state=1, values=[1163.2], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 38, 703254), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 38, 713824), params={'ema1_period': 21, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=432, value=None),\n FrozenTrial(number=433, state=1, values=[1153.36], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 38, 714334), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 38, 725203), params={'ema1_period': 22, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=433, value=None),\n FrozenTrial(number=434, state=1, values=[1074.98], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 38, 725659), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 38, 736448), params={'ema1_period': 21, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=434, value=None),\n FrozenTrial(number=435, state=1, values=[1152.6], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 38, 736918), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 38, 747822), params={'ema1_period': 21, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=435, value=None),\n FrozenTrial(number=436, state=1, values=[1142.82], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 38, 748293), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 38, 759653), params={'ema1_period': 20, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=436, value=None),\n FrozenTrial(number=437, state=1, values=[1015.24], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 38, 760133), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 38, 770747), params={'ema1_period': 23, 'ema2_period': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=437, value=None),\n FrozenTrial(number=438, state=1, values=[1142.64], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 38, 771161), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 38, 781990), params={'ema1_period': 20, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=438, value=None),\n FrozenTrial(number=439, state=1, values=[1054.78], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 38, 782345), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 39, 5921), params={'ema1_period': 24, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=439, value=None),\n FrozenTrial(number=440, state=1, values=[1142.84], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 39, 6711), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 39, 18952), params={'ema1_period': 22, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=440, value=None),\n FrozenTrial(number=441, state=1, values=[1074.98], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 39, 19487), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 39, 30206), params={'ema1_period': 21, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=441, value=None),\n FrozenTrial(number=442, state=1, values=[944.86], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 39, 30573), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 39, 226658), params={'ema1_period': 21, 'ema2_period': 44}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=442, value=None),\n FrozenTrial(number=443, state=1, values=[1163.2], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 39, 227273), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 39, 238554), params={'ema1_period': 21, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=443, value=None),\n FrozenTrial(number=444, state=1, values=[1153.36], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 39, 238922), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 39, 249690), params={'ema1_period': 22, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=444, value=None),\n FrozenTrial(number=445, state=1, values=[1074.88], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 39, 250237), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 39, 261168), params={'ema1_period': 20, 'ema2_period': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=445, value=None),\n FrozenTrial(number=446, state=1, values=[1074.98], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 39, 261682), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 39, 272569), params={'ema1_period': 21, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=446, value=None),\n FrozenTrial(number=447, state=1, values=[933.94], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 39, 272968), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 39, 517988), params={'ema1_period': 13, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=447, value=None),\n FrozenTrial(number=448, state=1, values=[1163.2], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 39, 518860), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 39, 530718), params={'ema1_period': 21, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=448, value=None),\n FrozenTrial(number=449, state=1, values=[1142.84], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 39, 531256), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 39, 542307), params={'ema1_period': 22, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=449, value=None),\n FrozenTrial(number=450, state=1, values=[1133.72], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 39, 542675), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 39, 554092), params={'ema1_period': 20, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=450, value=None),\n FrozenTrial(number=451, state=1, values=[1163.2], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 39, 555055), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 39, 567989), params={'ema1_period': 21, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=451, value=None),\n FrozenTrial(number=452, state=1, values=[1065.02], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 39, 568638), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 39, 579934), params={'ema1_period': 21, 'ema2_period': 18}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=452, value=None),\n FrozenTrial(number=453, state=1, values=[1152.6], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 39, 580428), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 39, 591131), params={'ema1_period': 21, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=453, value=None),\n FrozenTrial(number=454, state=1, values=[1095.32], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 39, 591547), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 39, 602641), params={'ema1_period': 23, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=454, value=None),\n FrozenTrial(number=455, state=1, values=[937.0], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 39, 603078), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 39, 614038), params={'ema1_period': 20, 'ema2_period': 31}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=455, value=None),\n FrozenTrial(number=456, state=1, values=[1064.92], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 39, 614486), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 39, 625439), params={'ema1_period': 22, 'ema2_period': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=456, value=None),\n FrozenTrial(number=457, state=1, values=[1091.24], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 39, 625931), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 39, 636774), params={'ema1_period': 21, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=457, value=None),\n FrozenTrial(number=458, state=1, values=[1085.04], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 39, 637259), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 39, 648044), params={'ema1_period': 22, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=458, value=None),\n FrozenTrial(number=459, state=1, values=[1142.82], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 39, 648548), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 39, 659690), params={'ema1_period': 20, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=459, value=None),\n FrozenTrial(number=460, state=1, values=[1143.02], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 39, 660121), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 39, 671173), params={'ema1_period': 21, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=460, value=None),\n FrozenTrial(number=461, state=1, values=[1074.98], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 39, 671632), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 39, 682504), params={'ema1_period': 21, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=461, value=None),\n FrozenTrial(number=462, state=1, values=[1142.82], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 39, 683184), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 39, 694072), params={'ema1_period': 20, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=462, value=None),\n FrozenTrial(number=463, state=1, values=[1153.36], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 39, 694569), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 39, 705574), params={'ema1_period': 22, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=463, value=None),\n FrozenTrial(number=464, state=1, values=[1074.98], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 39, 705956), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 39, 717149), params={'ema1_period': 21, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=464, value=None),\n FrozenTrial(number=465, state=1, values=[1163.2], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 39, 717642), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 39, 728579), params={'ema1_period': 21, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=465, value=None),\n FrozenTrial(number=466, state=1, values=[1142.84], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 39, 728956), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 39, 740178), params={'ema1_period': 22, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=466, value=None),\n FrozenTrial(number=467, state=1, values=[1074.88], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 39, 740665), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 39, 751712), params={'ema1_period': 20, 'ema2_period': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=467, value=None),\n FrozenTrial(number=468, state=1, values=[927.68], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 39, 752237), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 39, 955622), params={'ema1_period': 21, 'ema2_period': 40}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=468, value=None),\n FrozenTrial(number=469, state=1, values=[1163.2], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 39, 956363), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 39, 968532), params={'ema1_period': 21, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=469, value=None),\n FrozenTrial(number=470, state=1, values=[1153.36], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 39, 969074), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 39, 979841), params={'ema1_period': 22, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=470, value=None),\n FrozenTrial(number=471, state=1, values=[994.5], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 39, 980353), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 40, 195927), params={'ema1_period': 20, 'ema2_period': 21}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=471, value=None),\n FrozenTrial(number=472, state=1, values=[1163.2], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 40, 196510), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 40, 207792), params={'ema1_period': 21, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=472, value=None),\n FrozenTrial(number=473, state=1, values=[1085.04], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 40, 208254), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 40, 219158), params={'ema1_period': 22, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=473, value=None),\n FrozenTrial(number=474, state=1, values=[1065.02], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 40, 219635), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 40, 230576), params={'ema1_period': 21, 'ema2_period': 18}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=474, value=None),\n FrozenTrial(number=475, state=1, values=[1120.88], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 40, 231009), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 40, 242229), params={'ema1_period': 20, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=475, value=None),\n FrozenTrial(number=476, state=1, values=[1153.36], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 40, 242709), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 40, 256156), params={'ema1_period': 22, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=476, value=None),\n FrozenTrial(number=477, state=1, values=[1074.98], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 40, 257027), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 40, 270075), params={'ema1_period': 21, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=477, value=None),\n FrozenTrial(number=478, state=1, values=[1049.8], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 40, 270668), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 40, 507654), params={'ema1_period': 16, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=478, value=None),\n FrozenTrial(number=479, state=1, values=[1074.88], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 40, 508439), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 40, 520278), params={'ema1_period': 20, 'ema2_period': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=479, value=None),\n FrozenTrial(number=480, state=1, values=[1091.24], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 40, 520663), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 40, 531867), params={'ema1_period': 21, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=480, value=None),\n FrozenTrial(number=481, state=1, values=[1143.02], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 40, 532230), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 40, 543338), params={'ema1_period': 21, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=481, value=None),\n FrozenTrial(number=482, state=1, values=[1005.28], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 40, 543783), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 40, 554843), params={'ema1_period': 21, 'ema2_period': 19}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=482, value=None),\n FrozenTrial(number=483, state=1, values=[1075.0], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 40, 555355), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 40, 566494), params={'ema1_period': 22, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=483, value=None),\n FrozenTrial(number=484, state=1, values=[1064.82], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 40, 567011), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 40, 578514), params={'ema1_period': 23, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=484, value=None),\n FrozenTrial(number=485, state=1, values=[1142.64], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 40, 579020), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 40, 590557), params={'ema1_period': 20, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=485, value=None),\n FrozenTrial(number=486, state=1, values=[935.46], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 40, 590939), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 40, 905592), params={'ema1_period': 5, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=486, value=None),\n FrozenTrial(number=487, state=1, values=[1152.6], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 40, 906241), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 40, 919369), params={'ema1_period': 21, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=487, value=None),\n FrozenTrial(number=488, state=1, values=[1014.94], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 40, 919950), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 40, 931852), params={'ema1_period': 25, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=488, value=None),\n FrozenTrial(number=489, state=1, values=[1084.94], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 40, 932432), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 40, 944069), params={'ema1_period': 21, 'ema2_period': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=489, value=None),\n FrozenTrial(number=490, state=1, values=[1142.64], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 40, 944583), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 40, 956264), params={'ema1_period': 20, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=490, value=None),\n FrozenTrial(number=491, state=1, values=[1075.0], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 40, 956824), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 40, 968400), params={'ema1_period': 22, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=491, value=None),\n FrozenTrial(number=492, state=1, values=[1142.84], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 40, 969100), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 40, 980310), params={'ema1_period': 22, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=492, value=None),\n FrozenTrial(number=493, state=1, values=[1074.98], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 40, 980843), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 40, 993438), params={'ema1_period': 21, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=493, value=None),\n FrozenTrial(number=494, state=1, values=[1163.2], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 40, 994029), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 41, 5643), params={'ema1_period': 21, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=494, value=None),\n FrozenTrial(number=495, state=1, values=[936.54], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 41, 6103), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 41, 218231), params={'ema1_period': 21, 'ema2_period': 28}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=495, value=None),\n FrozenTrial(number=496, state=1, values=[1142.64], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 41, 218885), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 41, 230482), params={'ema1_period': 20, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=496, value=None),\n FrozenTrial(number=497, state=1, values=[1090.6], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 41, 230947), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 41, 481654), params={'ema1_period': 21, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=497, value=None),\n FrozenTrial(number=498, state=1, values=[1084.94], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 41, 482515), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 41, 495189), params={'ema1_period': 21, 'ema2_period': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=498, value=None),\n FrozenTrial(number=499, state=1, values=[1133.72], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 41, 495752), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 41, 507256), params={'ema1_period': 20, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=499, value=None),\n FrozenTrial(number=500, state=1, values=[1075.0], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 41, 507764), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 41, 519252), params={'ema1_period': 22, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=500, value=None),\n FrozenTrial(number=501, state=1, values=[888.78], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 41, 519765), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 41, 724423), params={'ema1_period': 22, 'ema2_period': 36}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=501, value=None),\n FrozenTrial(number=502, state=1, values=[1054.78], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 41, 725269), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 41, 737538), params={'ema1_period': 24, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=502, value=None),\n FrozenTrial(number=503, state=1, values=[935.36], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 41, 737981), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 42, 1569), params={'ema1_period': 6, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=503, value=None),\n FrozenTrial(number=504, state=1, values=[1074.98], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 42, 2277), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 42, 14723), params={'ema1_period': 21, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=504, value=None),\n FrozenTrial(number=505, state=1, values=[1163.2], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 42, 15259), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 42, 26860), params={'ema1_period': 21, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=505, value=None),\n FrozenTrial(number=506, state=1, values=[1142.84], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 42, 27336), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 42, 38807), params={'ema1_period': 22, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=506, value=None),\n FrozenTrial(number=507, state=1, values=[933.1], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 42, 39308), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 42, 50745), params={'ema1_period': 12, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=507, value=None),\n FrozenTrial(number=508, state=1, values=[1033.02], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 42, 51143), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 42, 296830), params={'ema1_period': 15, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=508, value=None),\n FrozenTrial(number=509, state=1, values=[1074.88], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 42, 297352), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 42, 309930), params={'ema1_period': 20, 'ema2_period': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=509, value=None),\n FrozenTrial(number=510, state=1, values=[1133.72], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 42, 310407), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 42, 322010), params={'ema1_period': 20, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=510, value=None),\n FrozenTrial(number=511, state=1, values=[1163.2], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 42, 322538), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 42, 334039), params={'ema1_period': 21, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=511, value=None),\n FrozenTrial(number=512, state=1, values=[1065.02], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 42, 334541), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 42, 346140), params={'ema1_period': 21, 'ema2_period': 18}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=512, value=None),\n FrozenTrial(number=513, state=1, values=[1142.64], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 42, 346634), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 42, 358185), params={'ema1_period': 20, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=513, value=None),\n FrozenTrial(number=514, state=1, values=[1152.6], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 42, 358688), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 42, 370324), params={'ema1_period': 21, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=514, value=None),\n FrozenTrial(number=515, state=1, values=[1085.04], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 42, 370705), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 42, 382239), params={'ema1_period': 22, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=515, value=None),\n FrozenTrial(number=516, state=1, values=[1163.2], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 42, 382690), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 42, 395793), params={'ema1_period': 21, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=516, value=None),\n FrozenTrial(number=517, state=1, values=[1095.32], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 42, 398031), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 42, 416568), params={'ema1_period': 23, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=517, value=None),\n FrozenTrial(number=518, state=1, values=[1084.94], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 42, 417346), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 42, 431819), params={'ema1_period': 21, 'ema2_period': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=518, value=None),\n FrozenTrial(number=519, state=1, values=[1075.0], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 42, 432546), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 42, 447489), params={'ema1_period': 22, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=519, value=None),\n FrozenTrial(number=520, state=1, values=[1133.72], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 42, 448149), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 42, 461099), params={'ema1_period': 20, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=520, value=None),\n FrozenTrial(number=521, state=1, values=[1143.02], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 42, 461912), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 42, 475870), params={'ema1_period': 21, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=521, value=None),\n FrozenTrial(number=522, state=1, values=[1152.6], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 42, 476682), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 42, 489505), params={'ema1_period': 21, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=522, value=None),\n FrozenTrial(number=523, state=1, values=[1085.04], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 42, 490244), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 42, 509324), params={'ema1_period': 22, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=523, value=None),\n FrozenTrial(number=524, state=1, values=[1163.2], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 42, 510175), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 42, 524827), params={'ema1_period': 21, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=524, value=None),\n FrozenTrial(number=525, state=1, values=[1074.88], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 42, 525462), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 42, 538613), params={'ema1_period': 20, 'ema2_period': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=525, value=None),\n FrozenTrial(number=526, state=1, values=[1075.0], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 42, 539267), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 42, 552188), params={'ema1_period': 22, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=526, value=None),\n FrozenTrial(number=527, state=1, values=[1091.24], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 42, 552790), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 42, 565541), params={'ema1_period': 21, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=527, value=None),\n FrozenTrial(number=528, state=1, values=[1143.02], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 42, 566140), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 42, 578679), params={'ema1_period': 21, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=528, value=None),\n FrozenTrial(number=529, state=1, values=[1153.36], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 42, 579341), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 42, 592053), params={'ema1_period': 22, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=529, value=None),\n FrozenTrial(number=530, state=1, values=[1133.72], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 42, 592738), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 42, 605437), params={'ema1_period': 20, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=530, value=None),\n FrozenTrial(number=531, state=1, values=[1001.7], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 42, 606056), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 42, 618841), params={'ema1_period': 21, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=531, value=None),\n FrozenTrial(number=532, state=1, values=[1163.2], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 42, 619442), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 42, 632110), params={'ema1_period': 21, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=532, value=None),\n FrozenTrial(number=533, state=1, values=[1133.72], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 42, 632735), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 42, 645356), params={'ema1_period': 20, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=533, value=None),\n FrozenTrial(number=534, state=1, values=[1064.92], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 42, 645952), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 42, 658611), params={'ema1_period': 22, 'ema2_period': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=534, value=None),\n FrozenTrial(number=535, state=1, values=[1143.02], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 42, 659228), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 42, 672274), params={'ema1_period': 21, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=535, value=None),\n FrozenTrial(number=536, state=1, values=[1152.6], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 42, 672740), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 42, 685943), params={'ema1_period': 21, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=536, value=None),\n FrozenTrial(number=537, state=1, values=[1074.9], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 42, 686599), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 42, 699477), params={'ema1_period': 20, 'ema2_period': 18}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=537, value=None),\n FrozenTrial(number=538, state=1, values=[1085.04], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 42, 699875), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 42, 713151), params={'ema1_period': 23, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=538, value=None),\n FrozenTrial(number=539, state=1, values=[1074.98], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 42, 713761), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 42, 726503), params={'ema1_period': 21, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=539, value=None),\n FrozenTrial(number=540, state=1, values=[1075.0], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 42, 727150), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 42, 739589), params={'ema1_period': 22, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=540, value=None),\n FrozenTrial(number=541, state=1, values=[1143.02], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 42, 740196), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 42, 752850), params={'ema1_period': 21, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=541, value=None),\n FrozenTrial(number=542, state=1, values=[1162.48], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 42, 753540), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 42, 765977), params={'ema1_period': 22, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=542, value=None),\n FrozenTrial(number=543, state=1, values=[1120.88], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 42, 766682), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 42, 779470), params={'ema1_period': 20, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=543, value=None),\n FrozenTrial(number=544, state=1, values=[1142.82], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 42, 780177), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 42, 792890), params={'ema1_period': 20, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=544, value=None),\n FrozenTrial(number=545, state=1, values=[1074.98], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 42, 793367), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 42, 813364), params={'ema1_period': 21, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=545, value=None),\n FrozenTrial(number=546, state=1, values=[1153.36], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 42, 814250), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 42, 829453), params={'ema1_period': 22, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=546, value=None),\n FrozenTrial(number=547, state=1, values=[1163.2], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 42, 830118), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 42, 843179), params={'ema1_period': 21, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=547, value=None),\n FrozenTrial(number=548, state=1, values=[836.72], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 42, 843838), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 43, 65542), params={'ema1_period': 21, 'ema2_period': 26}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=548, value=None),\n FrozenTrial(number=549, state=1, values=[985.34], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 43, 66412), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 43, 80062), params={'ema1_period': 24, 'ema2_period': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=549, value=None),\n FrozenTrial(number=550, state=1, values=[1142.64], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 43, 80511), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 43, 93225), params={'ema1_period': 20, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=550, value=None),\n FrozenTrial(number=551, state=1, values=[975.46], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 43, 93762), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 43, 106337), params={'ema1_period': 14, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=551, value=None),\n FrozenTrial(number=552, state=1, values=[1142.84], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 43, 106747), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 43, 119401), params={'ema1_period': 22, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=552, value=None),\n FrozenTrial(number=553, state=1, values=[1163.2], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 43, 119960), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 43, 132388), params={'ema1_period': 21, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=553, value=None),\n FrozenTrial(number=554, state=1, values=[1074.98], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 43, 132799), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 43, 145522), params={'ema1_period': 21, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=554, value=None),\n FrozenTrial(number=555, state=1, values=[1142.64], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 43, 145931), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 43, 158600), params={'ema1_period': 20, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=555, value=None),\n FrozenTrial(number=556, state=1, values=[1085.04], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 43, 159168), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 43, 171778), params={'ema1_period': 23, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=556, value=None),\n FrozenTrial(number=557, state=1, values=[1005.18], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 43, 172341), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 43, 185234), params={'ema1_period': 22, 'ema2_period': 18}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=557, value=None),\n FrozenTrial(number=558, state=1, values=[1074.98], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 43, 185791), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 43, 198812), params={'ema1_period': 21, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=558, value=None),\n FrozenTrial(number=559, state=1, values=[1084.94], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 43, 199329), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 43, 211899), params={'ema1_period': 21, 'ema2_period': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=559, value=None),\n FrozenTrial(number=560, state=1, values=[1152.6], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 43, 212571), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 43, 225170), params={'ema1_period': 21, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=560, value=None),\n FrozenTrial(number=561, state=1, values=[1000.0], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 43, 225780), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 43, 344156), params={'ema1_period': 20, 'ema2_period': 20}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=561, value=None),\n FrozenTrial(number=562, state=1, values=[1075.0], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 43, 344928), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 43, 358603), params={'ema1_period': 22, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=562, value=None),\n FrozenTrial(number=563, state=1, values=[1143.02], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 43, 359169), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 43, 372379), params={'ema1_period': 21, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=563, value=None),\n FrozenTrial(number=564, state=1, values=[1142.82], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 43, 372835), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 43, 386627), params={'ema1_period': 20, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=564, value=None),\n FrozenTrial(number=565, state=1, values=[1064.92], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 43, 387250), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 43, 400346), params={'ema1_period': 22, 'ema2_period': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=565, value=None),\n FrozenTrial(number=566, state=1, values=[1074.98], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 43, 400952), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 43, 417692), params={'ema1_period': 21, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=566, value=None),\n FrozenTrial(number=567, state=1, values=[1163.2], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 43, 418892), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 43, 434603), params={'ema1_period': 21, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=567, value=None),\n FrozenTrial(number=568, state=1, values=[809.16], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 43, 435407), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 43, 702289), params={'ema1_period': 10, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=568, value=None),\n FrozenTrial(number=569, state=1, values=[1090.94], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 43, 703074), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 43, 717648), params={'ema1_period': 22, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=569, value=None),\n FrozenTrial(number=570, state=1, values=[1133.72], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 43, 718308), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 43, 732235), params={'ema1_period': 20, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=570, value=None),\n FrozenTrial(number=571, state=1, values=[1143.02], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 43, 732822), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 43, 745946), params={'ema1_period': 21, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=571, value=None),\n FrozenTrial(number=572, state=1, values=[1091.24], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 43, 746581), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 43, 759851), params={'ema1_period': 21, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=572, value=None),\n FrozenTrial(number=573, state=1, values=[1163.2], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 43, 760476), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 43, 773920), params={'ema1_period': 21, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=573, value=None),\n FrozenTrial(number=574, state=1, values=[1085.04], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 43, 774519), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 43, 788154), params={'ema1_period': 22, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=574, value=None),\n FrozenTrial(number=575, state=1, values=[1120.88], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 43, 788735), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 43, 802371), params={'ema1_period': 20, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=575, value=None),\n FrozenTrial(number=576, state=1, values=[1143.02], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 43, 802944), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 43, 816468), params={'ema1_period': 21, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=576, value=None),\n FrozenTrial(number=577, state=1, values=[936.12], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 43, 816938), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 44, 41163), params={'ema1_period': 22, 'ema2_period': 23}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=577, value=None),\n FrozenTrial(number=578, state=1, values=[1142.82], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 44, 41922), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 44, 55845), params={'ema1_period': 20, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=578, value=None),\n FrozenTrial(number=579, state=1, values=[1084.94], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 44, 56601), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 44, 68962), params={'ema1_period': 21, 'ema2_period': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=579, value=None),\n FrozenTrial(number=580, state=1, values=[1074.98], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 44, 69617), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 44, 81675), params={'ema1_period': 21, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=580, value=None),\n FrozenTrial(number=581, state=1, values=[974.12], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 44, 82324), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 44, 292275), params={'ema1_period': 25, 'ema2_period': 19}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=581, value=None),\n FrozenTrial(number=582, state=1, values=[1153.36], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 44, 293012), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 44, 305331), params={'ema1_period': 22, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=582, value=None),\n FrozenTrial(number=583, state=1, values=[1163.2], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 44, 305931), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 44, 318245), params={'ema1_period': 21, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=583, value=None),\n FrozenTrial(number=584, state=1, values=[1120.88], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 44, 318892), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 44, 331186), params={'ema1_period': 20, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=584, value=None),\n FrozenTrial(number=585, state=1, values=[1074.98], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 44, 332058), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 44, 344509), params={'ema1_period': 21, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=585, value=None),\n FrozenTrial(number=586, state=1, values=[1075.0], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 44, 345417), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 44, 357962), params={'ema1_period': 22, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=586, value=None),\n FrozenTrial(number=587, state=1, values=[1142.64], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 44, 358679), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 44, 371097), params={'ema1_period': 20, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=587, value=None),\n FrozenTrial(number=588, state=1, values=[1064.82], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 44, 371619), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 44, 387853), params={'ema1_period': 23, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=588, value=None),\n FrozenTrial(number=589, state=1, values=[1163.2], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 44, 389031), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 44, 407476), params={'ema1_period': 21, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=589, value=None),\n FrozenTrial(number=590, state=1, values=[1143.02], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 44, 408353), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 44, 421756), params={'ema1_period': 21, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=590, value=None),\n FrozenTrial(number=591, state=1, values=[1074.88], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 44, 422302), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 44, 435308), params={'ema1_period': 20, 'ema2_period': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=591, value=None),\n FrozenTrial(number=592, state=1, values=[1142.84], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 44, 435851), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 44, 448278), params={'ema1_period': 22, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=592, value=None),\n FrozenTrial(number=593, state=1, values=[1163.2], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 44, 448802), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 44, 461324), params={'ema1_period': 21, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=593, value=None),\n FrozenTrial(number=594, state=1, values=[1074.98], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 44, 461725), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 44, 474616), params={'ema1_period': 21, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=594, value=None),\n FrozenTrial(number=595, state=1, values=[1074.9], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 44, 475176), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 44, 488444), params={'ema1_period': 20, 'ema2_period': 18}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=595, value=None),\n FrozenTrial(number=596, state=1, values=[1152.6], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 44, 488967), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 44, 501800), params={'ema1_period': 21, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=596, value=None),\n FrozenTrial(number=597, state=1, values=[1075.0], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 44, 502327), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 44, 514805), params={'ema1_period': 22, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=597, value=None),\n FrozenTrial(number=598, state=1, values=[1084.94], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 44, 515319), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 44, 527729), params={'ema1_period': 21, 'ema2_period': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=598, value=None),\n FrozenTrial(number=599, state=1, values=[1143.02], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 44, 528251), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 44, 540925), params={'ema1_period': 21, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=599, value=None),\n FrozenTrial(number=600, state=1, values=[1133.72], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 44, 541430), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 44, 554061), params={'ema1_period': 20, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=600, value=None),\n FrozenTrial(number=601, state=1, values=[1153.36], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 44, 554573), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 44, 567115), params={'ema1_period': 22, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=601, value=None),\n FrozenTrial(number=602, state=1, values=[1163.2], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 44, 567653), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 44, 580196), params={'ema1_period': 21, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=602, value=None),\n FrozenTrial(number=603, state=1, values=[1075.0], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 44, 580567), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 44, 593344), params={'ema1_period': 22, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=603, value=None),\n FrozenTrial(number=604, state=1, values=[1143.02], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 44, 593705), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 44, 606498), params={'ema1_period': 21, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=604, value=None),\n FrozenTrial(number=605, state=1, values=[1110.66], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 44, 607032), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 44, 619732), params={'ema1_period': 20, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=605, value=None),\n FrozenTrial(number=606, state=1, values=[1084.94], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 44, 620235), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 44, 633025), params={'ema1_period': 21, 'ema2_period': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=606, value=None),\n FrozenTrial(number=607, state=1, values=[935.92], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 44, 633566), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 44, 650756), params={'ema1_period': 20, 'ema2_period': 25}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=607, value=None),\n FrozenTrial(number=608, state=1, values=[1152.6], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 44, 654797), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 44, 680356), params={'ema1_period': 21, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=608, value=None),\n FrozenTrial(number=609, state=1, values=[1085.04], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 44, 681668), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 44, 705225), params={'ema1_period': 22, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=609, value=None),\n FrozenTrial(number=610, state=1, values=[1163.2], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 44, 706296), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 44, 728022), params={'ema1_period': 21, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=610, value=None),\n FrozenTrial(number=611, state=1, values=[1085.04], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 44, 729257), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 44, 749359), params={'ema1_period': 23, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=611, value=None),\n FrozenTrial(number=612, state=1, values=[1160.48], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 44, 750077), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 44, 764365), params={'ema1_period': 17, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=612, value=None),\n FrozenTrial(number=613, state=1, values=[1143.02], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 44, 765055), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 44, 778883), params={'ema1_period': 21, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=613, value=None),\n FrozenTrial(number=614, state=1, values=[1133.72], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 44, 779565), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 44, 793327), params={'ema1_period': 20, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=614, value=None),\n FrozenTrial(number=615, state=1, values=[1162.48], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 44, 794163), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 44, 807483), params={'ema1_period': 22, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=615, value=None),\n FrozenTrial(number=616, state=1, values=[1143.02], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 44, 808185), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 44, 821584), params={'ema1_period': 21, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=616, value=None),\n FrozenTrial(number=617, state=1, values=[1049.8], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 44, 822249), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 44, 835922), params={'ema1_period': 16, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=617, value=None),\n FrozenTrial(number=618, state=1, values=[1074.88], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 44, 836642), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 44, 850060), params={'ema1_period': 20, 'ema2_period': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=618, value=None),\n FrozenTrial(number=619, state=1, values=[1143.02], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 44, 850786), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 44, 864156), params={'ema1_period': 21, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=619, value=None),\n FrozenTrial(number=620, state=1, values=[1075.0], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 44, 865332), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 44, 879208), params={'ema1_period': 22, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=620, value=None),\n FrozenTrial(number=621, state=1, values=[1152.6], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 44, 879975), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 44, 893327), params={'ema1_period': 21, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=621, value=None),\n FrozenTrial(number=622, state=1, values=[1133.72], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 44, 894035), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 44, 907539), params={'ema1_period': 20, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=622, value=None),\n FrozenTrial(number=623, state=1, values=[1074.98], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 44, 908273), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 44, 921870), params={'ema1_period': 21, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=623, value=None),\n FrozenTrial(number=624, state=1, values=[1142.84], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 44, 922727), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 44, 936429), params={'ema1_period': 22, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=624, value=None),\n FrozenTrial(number=625, state=1, values=[1065.02], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 44, 937125), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 44, 950821), params={'ema1_period': 21, 'ema2_period': 18}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=625, value=None),\n FrozenTrial(number=626, state=1, values=[1054.78], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 44, 951619), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 44, 969227), params={'ema1_period': 24, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=626, value=None),\n FrozenTrial(number=627, state=1, values=[1153.36], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 44, 970371), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 44, 986436), params={'ema1_period': 22, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=627, value=None),\n FrozenTrial(number=628, state=1, values=[928.24], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 44, 987559), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 45, 203576), params={'ema1_period': 21, 'ema2_period': 32}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=628, value=None),\n FrozenTrial(number=629, state=1, values=[1074.88], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 45, 204347), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 45, 219264), params={'ema1_period': 20, 'ema2_period': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=629, value=None),\n FrozenTrial(number=630, state=1, values=[1163.2], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 45, 219937), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 45, 234880), params={'ema1_period': 21, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=630, value=None),\n FrozenTrial(number=631, state=1, values=[1085.04], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 45, 235299), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 45, 249131), params={'ema1_period': 22, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=631, value=None),\n FrozenTrial(number=632, state=1, values=[1143.02], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 45, 249734), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 45, 264226), params={'ema1_period': 21, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=632, value=None),\n FrozenTrial(number=633, state=1, values=[1142.82], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 45, 264877), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 45, 279189), params={'ema1_period': 20, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=633, value=None),\n FrozenTrial(number=634, state=1, values=[1152.6], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 45, 279788), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 45, 294486), params={'ema1_period': 21, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=634, value=None),\n FrozenTrial(number=635, state=1, values=[1085.04], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 45, 295150), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 45, 308598), params={'ema1_period': 22, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=635, value=None),\n FrozenTrial(number=636, state=1, values=[1085.04], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 45, 309157), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 45, 324082), params={'ema1_period': 23, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=636, value=None),\n FrozenTrial(number=637, state=1, values=[803.24], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 45, 324657), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 45, 644541), params={'ema1_period': 8, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=637, value=None),\n FrozenTrial(number=638, state=1, values=[1074.98], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 45, 645327), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 45, 659605), params={'ema1_period': 21, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=638, value=None),\n FrozenTrial(number=639, state=1, values=[961.8], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 45, 660206), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 45, 673763), params={'ema1_period': 20, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=639, value=None),\n FrozenTrial(number=640, state=1, values=[1084.94], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 45, 674333), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 45, 687808), params={'ema1_period': 21, 'ema2_period': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=640, value=None),\n FrozenTrial(number=641, state=1, values=[1153.36], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 45, 688369), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 45, 701800), params={'ema1_period': 22, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=641, value=None),\n FrozenTrial(number=642, state=1, values=[1152.6], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 45, 702373), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 45, 715826), params={'ema1_period': 21, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=642, value=None),\n FrozenTrial(number=643, state=1, values=[1142.82], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 45, 716412), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 45, 729709), params={'ema1_period': 20, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=643, value=None),\n FrozenTrial(number=644, state=1, values=[1163.2], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 45, 730264), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 45, 743581), params={'ema1_period': 21, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=644, value=None),\n FrozenTrial(number=645, state=1, values=[1084.94], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 45, 744178), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 45, 761067), params={'ema1_period': 21, 'ema2_period': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=645, value=None),\n FrozenTrial(number=646, state=1, values=[1142.64], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 45, 761899), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 45, 778239), params={'ema1_period': 20, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=646, value=None),\n FrozenTrial(number=647, state=1, values=[1085.04], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 45, 778903), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 45, 792648), params={'ema1_period': 22, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=647, value=None),\n FrozenTrial(number=648, state=1, values=[1163.2], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 45, 793204), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 45, 806288), params={'ema1_period': 21, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=648, value=None),\n FrozenTrial(number=649, state=1, values=[1110.66], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 45, 806764), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 45, 819777), params={'ema1_period': 20, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=649, value=None),\n FrozenTrial(number=650, state=1, values=[1005.28], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 45, 820174), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 45, 833589), params={'ema1_period': 21, 'ema2_period': 19}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=650, value=None),\n FrozenTrial(number=651, state=1, values=[879.18], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 45, 833978), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 46, 38518), params={'ema1_period': 25, 'ema2_period': 29}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=651, value=None),\n FrozenTrial(number=652, state=1, values=[964.66], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 46, 39244), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 46, 232128), params={'ema1_period': 22, 'ema2_period': 43}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=652, value=None),\n FrozenTrial(number=653, state=1, values=[1084.94], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 46, 232724), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 46, 247012), params={'ema1_period': 21, 'ema2_period': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=653, value=None),\n FrozenTrial(number=654, state=1, values=[923.68], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 46, 247584), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 46, 446644), params={'ema1_period': 22, 'ema2_period': 38}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=654, value=None),\n FrozenTrial(number=655, state=1, values=[1142.64], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 46, 447780), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 46, 463154), params={'ema1_period': 20, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=655, value=None),\n FrozenTrial(number=656, state=1, values=[1163.2], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 46, 463938), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 46, 477982), params={'ema1_period': 21, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=656, value=None),\n FrozenTrial(number=657, state=1, values=[984.46], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 46, 478653), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 46, 679953), params={'ema1_period': 21, 'ema2_period': 48}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=657, value=None),\n FrozenTrial(number=658, state=1, values=[1085.04], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 46, 680718), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 46, 696451), params={'ema1_period': 22, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=658, value=None),\n FrozenTrial(number=659, state=1, values=[1143.02], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 46, 697199), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 46, 711207), params={'ema1_period': 21, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=659, value=None),\n FrozenTrial(number=660, state=1, values=[1133.72], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 46, 711922), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 46, 725883), params={'ema1_period': 20, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=660, value=None),\n FrozenTrial(number=661, state=1, values=[1163.2], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 46, 726701), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 46, 740860), params={'ema1_period': 21, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=661, value=None),\n FrozenTrial(number=662, state=1, values=[1142.84], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 46, 742010), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 46, 756400), params={'ema1_period': 22, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=662, value=None),\n FrozenTrial(number=663, state=1, values=[975.6], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 46, 757135), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 46, 773660), params={'ema1_period': 23, 'ema2_period': 18}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=663, value=None),\n FrozenTrial(number=664, state=1, values=[1143.02], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 46, 775012), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 46, 790994), params={'ema1_period': 21, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=664, value=None),\n FrozenTrial(number=665, state=1, values=[1133.72], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 46, 792049), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 46, 806449), params={'ema1_period': 20, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=665, value=None),\n FrozenTrial(number=666, state=1, values=[1163.2], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 46, 807265), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 46, 821383), params={'ema1_period': 21, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=666, value=None),\n FrozenTrial(number=667, state=1, values=[1085.04], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 46, 822131), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 46, 836536), params={'ema1_period': 22, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=667, value=None),\n FrozenTrial(number=668, state=1, values=[1143.02], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 46, 837396), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 46, 851722), params={'ema1_period': 21, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=668, value=None),\n FrozenTrial(number=669, state=1, values=[1142.82], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 46, 852246), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 46, 866875), params={'ema1_period': 20, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=669, value=None),\n FrozenTrial(number=670, state=1, values=[1152.6], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 46, 867624), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 46, 882140), params={'ema1_period': 21, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=670, value=None),\n FrozenTrial(number=671, state=1, values=[1163.2], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 46, 882943), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 46, 897891), params={'ema1_period': 21, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=671, value=None),\n FrozenTrial(number=672, state=1, values=[994.5], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 46, 898849), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 46, 913610), params={'ema1_period': 20, 'ema2_period': 21}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=672, value=None),\n FrozenTrial(number=673, state=1, values=[1064.92], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 46, 914479), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 46, 929571), params={'ema1_period': 22, 'ema2_period': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=673, value=None),\n FrozenTrial(number=674, state=1, values=[898.72], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 46, 930527), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 47, 153680), params={'ema1_period': 23, 'ema2_period': 35}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=674, value=None),\n FrozenTrial(number=675, state=1, values=[1153.36], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 47, 154465), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 47, 170767), params={'ema1_period': 22, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=675, value=None),\n FrozenTrial(number=676, state=1, values=[1163.2], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 47, 171692), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 47, 186374), params={'ema1_period': 21, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=676, value=None),\n FrozenTrial(number=677, state=1, values=[1110.66], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 47, 187264), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 47, 201589), params={'ema1_period': 20, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=677, value=None),\n FrozenTrial(number=678, state=1, values=[1074.98], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 47, 202216), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 47, 216628), params={'ema1_period': 21, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=678, value=None),\n FrozenTrial(number=679, state=1, values=[1152.6], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 47, 217533), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 47, 231983), params={'ema1_period': 21, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=679, value=None),\n FrozenTrial(number=680, state=1, values=[1064.92], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 47, 232596), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 47, 246996), params={'ema1_period': 22, 'ema2_period': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=680, value=None),\n FrozenTrial(number=681, state=1, values=[1143.02], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 47, 247618), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 47, 265400), params={'ema1_period': 21, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=681, value=None),\n FrozenTrial(number=682, state=1, values=[1133.72], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 47, 266677), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 47, 283025), params={'ema1_period': 20, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=682, value=None),\n FrozenTrial(number=683, state=1, values=[1163.2], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 47, 284059), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 47, 299537), params={'ema1_period': 21, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=683, value=None),\n FrozenTrial(number=684, state=1, values=[1153.36], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 47, 300375), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 47, 315303), params={'ema1_period': 22, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=684, value=None),\n FrozenTrial(number=685, state=1, values=[1120.88], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 47, 316170), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 47, 330956), params={'ema1_period': 20, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=685, value=None),\n FrozenTrial(number=686, state=1, values=[1090.6], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 47, 331853), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 47, 346894), params={'ema1_period': 21, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=686, value=None),\n FrozenTrial(number=687, state=1, values=[1054.78], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 47, 347748), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 47, 362583), params={'ema1_period': 24, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=687, value=None),\n FrozenTrial(number=688, state=1, values=[1074.98], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 47, 363472), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 47, 378077), params={'ema1_period': 21, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=688, value=None),\n FrozenTrial(number=689, state=1, values=[965.22], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 47, 379404), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 47, 398144), params={'ema1_period': 13, 'ema2_period': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=689, value=None),\n FrozenTrial(number=690, state=1, values=[1075.0], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 47, 399635), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 47, 420512), params={'ema1_period': 22, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=690, value=None),\n FrozenTrial(number=691, state=1, values=[1143.02], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 47, 421385), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 47, 438577), params={'ema1_period': 21, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=691, value=None),\n FrozenTrial(number=692, state=1, values=[1074.9], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 47, 439490), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 47, 457999), params={'ema1_period': 20, 'ema2_period': 18}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=692, value=None),\n FrozenTrial(number=693, state=1, values=[1143.02], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 47, 458798), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 47, 477001), params={'ema1_period': 21, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=693, value=None),\n FrozenTrial(number=694, state=1, values=[1030.54], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 47, 477914), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 47, 728764), params={'ema1_period': 22, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=694, value=None),\n FrozenTrial(number=695, state=1, values=[1074.98], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 47, 729673), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 47, 745822), params={'ema1_period': 21, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=695, value=None),\n FrozenTrial(number=696, state=1, values=[1163.2], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 47, 746424), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 47, 761130), params={'ema1_period': 21, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=696, value=None),\n FrozenTrial(number=697, state=1, values=[1133.72], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 47, 761747), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 47, 776893), params={'ema1_period': 20, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=697, value=None),\n FrozenTrial(number=698, state=1, values=[1162.48], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 47, 777537), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 47, 792594), params={'ema1_period': 22, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=698, value=None),\n FrozenTrial(number=699, state=1, values=[1152.6], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 47, 793264), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 47, 810574), params={'ema1_period': 21, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=699, value=None),\n FrozenTrial(number=700, state=1, values=[1142.82], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 47, 811395), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 47, 827283), params={'ema1_period': 20, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=700, value=None),\n FrozenTrial(number=701, state=1, values=[1074.98], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 47, 828043), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 47, 843377), params={'ema1_period': 21, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=701, value=None),\n FrozenTrial(number=702, state=1, values=[966.88], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 47, 843954), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 48, 69122), params={'ema1_period': 23, 'ema2_period': 27}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=702, value=None),\n FrozenTrial(number=703, state=1, values=[1064.92], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 48, 70089), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 48, 86159), params={'ema1_period': 22, 'ema2_period': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=703, value=None),\n FrozenTrial(number=704, state=1, values=[933.1], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 48, 86826), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 48, 101942), params={'ema1_period': 12, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=704, value=None),\n FrozenTrial(number=705, state=1, values=[956.92], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 48, 102510), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 48, 327010), params={'ema1_period': 21, 'ema2_period': 30}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=705, value=None),\n FrozenTrial(number=706, state=1, values=[1142.82], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 48, 327879), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 48, 344093), params={'ema1_period': 20, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=706, value=None),\n FrozenTrial(number=707, state=1, values=[1142.84], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 48, 344656), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 48, 359511), params={'ema1_period': 22, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=707, value=None),\n FrozenTrial(number=708, state=1, values=[1163.2], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 48, 360144), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 48, 375815), params={'ema1_period': 21, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=708, value=None),\n FrozenTrial(number=709, state=1, values=[1074.98], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 48, 376468), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 48, 392098), params={'ema1_period': 21, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=709, value=None),\n FrozenTrial(number=710, state=1, values=[1143.02], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 48, 392713), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 48, 407666), params={'ema1_period': 21, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=710, value=None),\n FrozenTrial(number=711, state=1, values=[1074.88], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 48, 408440), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 48, 423469), params={'ema1_period': 20, 'ema2_period': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=711, value=None),\n FrozenTrial(number=712, state=1, values=[1153.36], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 48, 424055), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 48, 439258), params={'ema1_period': 22, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=712, value=None),\n FrozenTrial(number=713, state=1, values=[1163.2], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 48, 439837), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 48, 454500), params={'ema1_period': 21, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=713, value=None),\n FrozenTrial(number=714, state=1, values=[1133.72], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 48, 455095), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 48, 469941), params={'ema1_period': 20, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=714, value=None),\n FrozenTrial(number=715, state=1, values=[1143.02], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 48, 470511), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 48, 486170), params={'ema1_period': 21, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=715, value=None),\n FrozenTrial(number=716, state=1, values=[1142.84], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 48, 486825), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 48, 507186), params={'ema1_period': 22, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=716, value=None),\n FrozenTrial(number=717, state=1, values=[1163.2], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 48, 507936), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 48, 525005), params={'ema1_period': 21, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=717, value=None),\n FrozenTrial(number=718, state=1, values=[953.82], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 48, 525614), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 48, 541343), params={'ema1_period': 11, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=718, value=None),\n FrozenTrial(number=719, state=1, values=[1045.48], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 48, 542042), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 48, 774110), params={'ema1_period': 20, 'ema2_period': 22}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=719, value=None),\n FrozenTrial(number=720, state=1, values=[1163.2], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 48, 774946), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 48, 790751), params={'ema1_period': 21, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=720, value=None),\n FrozenTrial(number=721, state=1, values=[1064.92], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 48, 791202), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 48, 805785), params={'ema1_period': 22, 'ema2_period': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=721, value=None),\n FrozenTrial(number=722, state=1, values=[1065.02], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 48, 806338), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 48, 821102), params={'ema1_period': 21, 'ema2_period': 18}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=722, value=None),\n FrozenTrial(number=723, state=1, values=[1143.02], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 48, 821663), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 48, 836630), params={'ema1_period': 21, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=723, value=None),\n FrozenTrial(number=724, state=1, values=[923.96], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 48, 837189), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 48, 851820), params={'ema1_period': 22, 'ema2_period': 41}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=724, value=None),\n FrozenTrial(number=725, state=1, values=[1120.88], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 48, 852378), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 48, 867134), params={'ema1_period': 20, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=725, value=None),\n FrozenTrial(number=726, state=1, values=[1143.02], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 48, 867716), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 48, 882746), params={'ema1_period': 21, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=726, value=None),\n FrozenTrial(number=727, state=1, values=[1142.82], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 48, 883361), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 48, 898477), params={'ema1_period': 20, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=727, value=None),\n FrozenTrial(number=728, state=1, values=[1091.24], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 48, 899117), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 48, 914743), params={'ema1_period': 21, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=728, value=None),\n FrozenTrial(number=729, state=1, values=[1085.04], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 48, 915434), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 48, 931124), params={'ema1_period': 22, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=729, value=None),\n FrozenTrial(number=730, state=1, values=[1133.72], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 48, 931826), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 48, 946676), params={'ema1_period': 20, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=730, value=None),\n FrozenTrial(number=731, state=1, values=[1085.04], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 48, 947266), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 48, 962123), params={'ema1_period': 23, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=731, value=None),\n FrozenTrial(number=732, state=1, values=[1084.94], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 48, 962771), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 48, 984876), params={'ema1_period': 21, 'ema2_period': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=732, value=None),\n FrozenTrial(number=733, state=1, values=[1153.36], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 48, 985692), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 49, 5453), params={'ema1_period': 22, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=733, value=None),\n FrozenTrial(number=734, state=1, values=[1054.78], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 49, 6518), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 49, 22431), params={'ema1_period': 24, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=734, value=None),\n FrozenTrial(number=735, state=1, values=[1002.86], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 49, 23032), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 49, 279835), params={'ema1_period': 15, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=735, value=None),\n FrozenTrial(number=736, state=1, values=[975.7], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 49, 280511), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 49, 507385), params={'ema1_period': 21, 'ema2_period': 20}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=736, value=None),\n FrozenTrial(number=737, state=1, values=[1074.98], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 49, 508190), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 49, 524627), params={'ema1_period': 21, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=737, value=None),\n FrozenTrial(number=738, state=1, values=[1133.72], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 49, 525259), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 49, 540818), params={'ema1_period': 20, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=738, value=None),\n FrozenTrial(number=739, state=1, values=[1163.2], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 49, 541639), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 49, 557869), params={'ema1_period': 21, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=739, value=None),\n FrozenTrial(number=740, state=1, values=[1153.36], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 49, 558575), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 49, 574023), params={'ema1_period': 22, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=740, value=None),\n FrozenTrial(number=741, state=1, values=[1084.94], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 49, 574634), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 49, 589445), params={'ema1_period': 21, 'ema2_period': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=741, value=None),\n FrozenTrial(number=742, state=1, values=[1075.0], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 49, 590051), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 49, 605270), params={'ema1_period': 22, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=742, value=None),\n FrozenTrial(number=743, state=1, values=[1142.64], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 49, 605713), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 49, 620839), params={'ema1_period': 20, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=743, value=None),\n FrozenTrial(number=744, state=1, values=[1163.2], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 49, 621326), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 49, 636330), params={'ema1_period': 21, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=744, value=None),\n FrozenTrial(number=745, state=1, values=[853.78], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 49, 636914), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 49, 903654), params={'ema1_period': 6, 'ema2_period': 18}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=745, value=None),\n FrozenTrial(number=746, state=1, values=[1152.6], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 49, 904307), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 49, 920963), params={'ema1_period': 21, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=746, value=None),\n FrozenTrial(number=747, state=1, values=[1064.82], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 49, 921519), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 49, 936887), params={'ema1_period': 23, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=747, value=None),\n FrozenTrial(number=748, state=1, values=[985.34], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 49, 937309), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 50, 171612), params={'ema1_period': 25, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=748, value=None),\n FrozenTrial(number=749, state=1, values=[1142.64], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 50, 172445), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 50, 189113), params={'ema1_period': 20, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=749, value=None),\n FrozenTrial(number=750, state=1, values=[1163.2], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 50, 189679), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 50, 204633), params={'ema1_period': 21, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=750, value=None),\n FrozenTrial(number=751, state=1, values=[1075.0], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 50, 205041), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 50, 222536), params={'ema1_period': 22, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=751, value=None),\n FrozenTrial(number=752, state=1, values=[1110.66], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 50, 224788), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 50, 245989), params={'ema1_period': 20, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=752, value=None),\n FrozenTrial(number=753, state=1, values=[1084.94], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 50, 246812), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 50, 264969), params={'ema1_period': 21, 'ema2_period': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=753, value=None),\n FrozenTrial(number=754, state=1, values=[1142.84], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 50, 265853), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 50, 284914), params={'ema1_period': 22, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=754, value=None),\n FrozenTrial(number=755, state=1, values=[1143.02], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 50, 286423), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 50, 307481), params={'ema1_period': 21, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=755, value=None),\n FrozenTrial(number=756, state=1, values=[1074.98], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 50, 308324), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 50, 325106), params={'ema1_period': 21, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=756, value=None),\n FrozenTrial(number=757, state=1, values=[1142.82], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 50, 325750), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 50, 341523), params={'ema1_period': 20, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=757, value=None),\n FrozenTrial(number=758, state=1, values=[1152.6], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 50, 342128), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 50, 357722), params={'ema1_period': 21, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=758, value=None),\n FrozenTrial(number=759, state=1, values=[1153.36], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 50, 358296), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 50, 373388), params={'ema1_period': 22, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=759, value=None),\n FrozenTrial(number=760, state=1, values=[1090.6], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 50, 374023), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 50, 389149), params={'ema1_period': 21, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=760, value=None),\n FrozenTrial(number=761, state=1, values=[1133.72], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 50, 389701), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 50, 404939), params={'ema1_period': 20, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=761, value=None),\n FrozenTrial(number=762, state=1, values=[1143.02], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 50, 405562), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 50, 420499), params={'ema1_period': 21, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=762, value=None),\n FrozenTrial(number=763, state=1, values=[1075.0], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 50, 488967), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 50, 513112), params={'ema1_period': 22, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=763, value=None),\n FrozenTrial(number=764, state=1, values=[1064.92], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 50, 513962), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 50, 537179), params={'ema1_period': 22, 'ema2_period': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=764, value=None),\n FrozenTrial(number=765, state=1, values=[1163.2], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 50, 537966), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 50, 555151), params={'ema1_period': 21, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=765, value=None),\n FrozenTrial(number=766, state=1, values=[1005.28], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 50, 555844), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 50, 573116), params={'ema1_period': 21, 'ema2_period': 19}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=766, value=None),\n FrozenTrial(number=767, state=1, values=[1142.64], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 50, 573818), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 50, 591324), params={'ema1_period': 20, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=767, value=None),\n FrozenTrial(number=768, state=1, values=[1133.72], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 50, 591958), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 50, 608386), params={'ema1_period': 20, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=768, value=None),\n FrozenTrial(number=769, state=1, values=[1074.98], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 50, 609035), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 50, 624560), params={'ema1_period': 21, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=769, value=None),\n FrozenTrial(number=770, state=1, values=[1162.48], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 50, 625219), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 50, 641063), params={'ema1_period': 22, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=770, value=None),\n FrozenTrial(number=771, state=1, values=[862.88], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 50, 641748), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 50, 895603), params={'ema1_period': 9, 'ema2_period': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=771, value=None),\n FrozenTrial(number=772, state=1, values=[1143.02], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 50, 896553), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 50, 914181), params={'ema1_period': 21, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=772, value=None),\n FrozenTrial(number=773, state=1, values=[1163.2], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 50, 915042), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 50, 933303), params={'ema1_period': 21, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=773, value=None),\n FrozenTrial(number=774, state=1, values=[1110.94], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 50, 934142), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 50, 952889), params={'ema1_period': 17, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=774, value=None),\n FrozenTrial(number=775, state=1, values=[1120.88], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 50, 953725), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 50, 973380), params={'ema1_period': 20, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=775, value=None),\n FrozenTrial(number=776, state=1, values=[1153.36], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 50, 974474), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 50, 994623), params={'ema1_period': 22, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=776, value=None),\n FrozenTrial(number=777, state=1, values=[1065.02], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 50, 995533), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 51, 14303), params={'ema1_period': 21, 'ema2_period': 18}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=777, value=None),\n FrozenTrial(number=778, state=1, values=[1084.94], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 51, 15097), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 51, 33559), params={'ema1_period': 21, 'ema2_period': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=778, value=None),\n FrozenTrial(number=779, state=1, values=[975.46], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 51, 34657), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 51, 53789), params={'ema1_period': 14, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=779, value=None),\n FrozenTrial(number=780, state=1, values=[1085.04], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 51, 57797), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 51, 79139), params={'ema1_period': 23, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=780, value=None),\n FrozenTrial(number=781, state=1, values=[1133.72], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 51, 80102), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 51, 99322), params={'ema1_period': 20, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=781, value=None),\n FrozenTrial(number=782, state=1, values=[1163.2], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 51, 100154), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 51, 116731), params={'ema1_period': 21, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=782, value=None),\n FrozenTrial(number=783, state=1, values=[964.56], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 51, 117454), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 51, 133672), params={'ema1_period': 22, 'ema2_period': 45}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=783, value=None),\n FrozenTrial(number=784, state=1, values=[1143.02], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 51, 134578), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 51, 150299), params={'ema1_period': 21, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=784, value=None),\n FrozenTrial(number=785, state=1, values=[803.24], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 51, 151074), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 51, 166733), params={'ema1_period': 8, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=785, value=None),\n FrozenTrial(number=786, state=1, values=[948.26], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 51, 167479), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 51, 378425), params={'ema1_period': 20, 'ema2_period': 33}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=786, value=None),\n FrozenTrial(number=787, state=1, values=[1142.84], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 51, 379388), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 51, 396243), params={'ema1_period': 22, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=787, value=None),\n FrozenTrial(number=788, state=1, values=[1142.82], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 51, 397055), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 51, 412656), params={'ema1_period': 20, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=788, value=None),\n FrozenTrial(number=789, state=1, values=[1074.98], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 51, 413385), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 51, 428842), params={'ema1_period': 21, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=789, value=None),\n FrozenTrial(number=790, state=1, values=[926.06], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 51, 429612), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 51, 643948), params={'ema1_period': 21, 'ema2_period': 25}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=790, value=None),\n FrozenTrial(number=791, state=1, values=[1075.0], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 51, 645036), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 51, 661847), params={'ema1_period': 22, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=791, value=None),\n FrozenTrial(number=792, state=1, values=[1152.6], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 51, 662600), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 51, 678536), params={'ema1_period': 21, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=792, value=None),\n FrozenTrial(number=793, state=1, values=[1074.98], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 51, 679326), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 51, 695078), params={'ema1_period': 21, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=793, value=None),\n FrozenTrial(number=794, state=1, values=[1064.92], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 51, 695792), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 51, 711400), params={'ema1_period': 22, 'ema2_period': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=794, value=None),\n FrozenTrial(number=795, state=1, values=[1054.78], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 51, 712131), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 51, 727775), params={'ema1_period': 24, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=795, value=None),\n FrozenTrial(number=796, state=1, values=[1142.64], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 51, 728633), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 51, 744410), params={'ema1_period': 20, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=796, value=None),\n FrozenTrial(number=797, state=1, values=[1091.24], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 51, 745142), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 51, 765276), params={'ema1_period': 21, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=797, value=None),\n FrozenTrial(number=798, state=1, values=[1074.98], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 51, 766618), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 51, 784138), params={'ema1_period': 21, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=798, value=None),\n FrozenTrial(number=799, state=1, values=[1153.36], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 51, 784932), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 51, 801152), params={'ema1_period': 22, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=799, value=None),\n FrozenTrial(number=800, state=1, values=[1074.88], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 51, 801811), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 51, 817328), params={'ema1_period': 20, 'ema2_period': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=800, value=None),\n FrozenTrial(number=801, state=1, values=[1163.2], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 51, 818012), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 51, 833742), params={'ema1_period': 21, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=801, value=None),\n FrozenTrial(number=802, state=1, values=[1120.88], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 51, 834936), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 51, 851202), params={'ema1_period': 20, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=802, value=None),\n FrozenTrial(number=803, state=1, values=[1163.2], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 51, 851860), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 51, 867736), params={'ema1_period': 21, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=803, value=None),\n FrozenTrial(number=804, state=1, values=[1095.32], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 51, 868384), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 51, 884492), params={'ema1_period': 23, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=804, value=None),\n FrozenTrial(number=805, state=1, values=[1085.04], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 51, 885167), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 51, 901130), params={'ema1_period': 22, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=805, value=None),\n FrozenTrial(number=806, state=1, values=[1163.2], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 51, 901845), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 51, 917580), params={'ema1_period': 21, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=806, value=None),\n FrozenTrial(number=807, state=1, values=[1085.04], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 51, 918258), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 51, 934362), params={'ema1_period': 22, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=807, value=None),\n FrozenTrial(number=808, state=1, values=[1074.88], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 51, 935075), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 51, 950732), params={'ema1_period': 20, 'ema2_period': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=808, value=None),\n FrozenTrial(number=809, state=1, values=[1143.02], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 51, 951491), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 51, 967040), params={'ema1_period': 21, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=809, value=None),\n FrozenTrial(number=810, state=1, values=[1152.6], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 51, 967657), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 51, 983982), params={'ema1_period': 21, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=810, value=None),\n FrozenTrial(number=811, state=1, values=[1065.02], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 51, 984946), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 52, 7083), params={'ema1_period': 21, 'ema2_period': 18}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=811, value=None),\n FrozenTrial(number=812, state=1, values=[1142.82], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 52, 8139), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 52, 30508), params={'ema1_period': 20, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=812, value=None),\n FrozenTrial(number=813, state=1, values=[1153.36], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 52, 31911), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 52, 51688), params={'ema1_period': 22, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=813, value=None),\n FrozenTrial(number=814, state=1, values=[1074.98], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 52, 52698), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 52, 71463), params={'ema1_period': 21, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=814, value=None),\n FrozenTrial(number=815, state=1, values=[1163.2], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 52, 72423), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 52, 91226), params={'ema1_period': 21, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=815, value=None),\n FrozenTrial(number=816, state=1, values=[1153.36], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 52, 92155), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 52, 111517), params={'ema1_period': 22, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=816, value=None),\n FrozenTrial(number=817, state=1, values=[961.8], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 52, 113931), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 52, 130841), params={'ema1_period': 20, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=817, value=None),\n FrozenTrial(number=818, state=1, values=[1152.6], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 52, 131579), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 52, 147849), params={'ema1_period': 21, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=818, value=None),\n FrozenTrial(number=819, state=1, values=[1085.04], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 52, 148538), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 52, 164308), params={'ema1_period': 22, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=819, value=None),\n FrozenTrial(number=820, state=1, values=[936.12], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 52, 164952), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 52, 181146), params={'ema1_period': 21, 'ema2_period': 24}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=820, value=None),\n FrozenTrial(number=821, state=1, values=[949.32], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 52, 181807), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 52, 391694), params={'ema1_period': 20, 'ema2_period': 34}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=821, value=None),\n FrozenTrial(number=822, state=1, values=[1163.2], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 52, 392578), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 52, 409229), params={'ema1_period': 21, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=822, value=None),\n FrozenTrial(number=823, state=1, values=[1074.98], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 52, 409874), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 52, 425679), params={'ema1_period': 21, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=823, value=None),\n FrozenTrial(number=824, state=1, values=[1074.88], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 52, 426307), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 52, 441917), params={'ema1_period': 20, 'ema2_period': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=824, value=None),\n FrozenTrial(number=825, state=1, values=[1143.02], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 52, 442688), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 52, 458166), params={'ema1_period': 21, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=825, value=None),\n FrozenTrial(number=826, state=1, values=[1075.0], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 52, 459051), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 52, 483781), params={'ema1_period': 22, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=826, value=None),\n FrozenTrial(number=827, state=1, values=[1065.02], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 52, 484718), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 52, 501406), params={'ema1_period': 21, 'ema2_period': 18}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=827, value=None),\n FrozenTrial(number=828, state=1, values=[1162.48], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 52, 501991), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 52, 518234), params={'ema1_period': 22, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=828, value=None),\n FrozenTrial(number=829, state=1, values=[1152.6], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 52, 518876), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 52, 534687), params={'ema1_period': 21, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=829, value=None),\n FrozenTrial(number=830, state=1, values=[1064.82], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 52, 535374), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 52, 551580), params={'ema1_period': 23, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=830, value=None),\n FrozenTrial(number=831, state=1, values=[1142.82], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 52, 552421), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 52, 568480), params={'ema1_period': 20, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=831, value=None),\n FrozenTrial(number=832, state=1, values=[1143.02], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 52, 569233), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 52, 585183), params={'ema1_period': 21, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=832, value=None),\n FrozenTrial(number=833, state=1, values=[1074.88], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 52, 585668), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 52, 601678), params={'ema1_period': 20, 'ema2_period': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=833, value=None),\n FrozenTrial(number=834, state=1, values=[1075.0], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 52, 602376), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 52, 618239), params={'ema1_period': 22, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=834, value=None),\n FrozenTrial(number=835, state=1, values=[1074.98], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 52, 618902), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 52, 634676), params={'ema1_period': 21, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=835, value=None),\n FrozenTrial(number=836, state=1, values=[1143.02], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 52, 635227), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 52, 650929), params={'ema1_period': 21, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=836, value=None),\n FrozenTrial(number=837, state=1, values=[1142.82], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 52, 651405), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 52, 667490), params={'ema1_period': 20, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=837, value=None),\n FrozenTrial(number=838, state=1, values=[1142.84], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 52, 668090), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 52, 683693), params={'ema1_period': 22, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=838, value=None),\n FrozenTrial(number=839, state=1, values=[1074.98], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 52, 684309), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 52, 700069), params={'ema1_period': 21, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=839, value=None),\n FrozenTrial(number=840, state=1, values=[1143.02], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 52, 700724), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 52, 716873), params={'ema1_period': 21, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=840, value=None),\n FrozenTrial(number=841, state=1, values=[1074.88], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 52, 717567), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 52, 739539), params={'ema1_period': 20, 'ema2_period': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=841, value=None),\n FrozenTrial(number=842, state=1, values=[1014.94], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 52, 740572), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 52, 759634), params={'ema1_period': 25, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=842, value=None),\n FrozenTrial(number=843, state=1, values=[1153.36], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 52, 760511), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 52, 776893), params={'ema1_period': 22, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=843, value=None),\n FrozenTrial(number=844, state=1, values=[1152.6], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 52, 777565), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 52, 793720), params={'ema1_period': 21, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=844, value=None),\n FrozenTrial(number=845, state=1, values=[1074.98], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 52, 794275), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 52, 810200), params={'ema1_period': 21, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=845, value=None),\n FrozenTrial(number=846, state=1, values=[1075.0], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 52, 810917), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 52, 826960), params={'ema1_period': 22, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=846, value=None),\n FrozenTrial(number=847, state=1, values=[1085.04], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 52, 827708), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 52, 843924), params={'ema1_period': 23, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=847, value=None),\n FrozenTrial(number=848, state=1, values=[1133.72], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 52, 844798), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 52, 860888), params={'ema1_period': 20, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=848, value=None),\n FrozenTrial(number=849, state=1, values=[1143.02], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 52, 861597), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 52, 877431), params={'ema1_period': 21, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=849, value=None),\n FrozenTrial(number=850, state=1, values=[1152.6], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 52, 877988), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 52, 894084), params={'ema1_period': 21, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=850, value=None),\n FrozenTrial(number=851, state=1, values=[1074.88], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 52, 894908), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 52, 911380), params={'ema1_period': 20, 'ema2_period': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=851, value=None),\n FrozenTrial(number=852, state=1, values=[1075.0], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 52, 912161), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 52, 929267), params={'ema1_period': 22, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=852, value=None),\n FrozenTrial(number=853, state=1, values=[1074.98], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 52, 930013), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 52, 946846), params={'ema1_period': 21, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=853, value=None),\n FrozenTrial(number=854, state=1, values=[1011.86], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 52, 947605), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 52, 965425), params={'ema1_period': 16, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=854, value=None),\n FrozenTrial(number=855, state=1, values=[1163.2], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 52, 966240), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 52, 983879), params={'ema1_period': 21, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=855, value=None),\n FrozenTrial(number=856, state=1, values=[1064.92], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 52, 984846), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 53, 2079), params={'ema1_period': 22, 'ema2_period': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=856, value=None),\n FrozenTrial(number=857, state=1, values=[1110.66], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 53, 2825), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 53, 20186), params={'ema1_period': 20, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=857, value=None),\n FrozenTrial(number=858, state=1, values=[1163.2], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 53, 21187), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 53, 41929), params={'ema1_period': 21, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=858, value=None),\n FrozenTrial(number=859, state=1, values=[1074.98], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 53, 43333), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 53, 62866), params={'ema1_period': 21, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=859, value=None),\n FrozenTrial(number=860, state=1, values=[1005.18], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 53, 63571), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 53, 80598), params={'ema1_period': 22, 'ema2_period': 18}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=860, value=None),\n FrozenTrial(number=861, state=1, values=[1001.7], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 53, 81287), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 53, 98031), params={'ema1_period': 21, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=861, value=None),\n FrozenTrial(number=862, state=1, values=[1142.64], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 53, 98736), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 53, 115333), params={'ema1_period': 20, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=862, value=None),\n FrozenTrial(number=863, state=1, values=[1085.04], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 53, 117436), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 53, 134080), params={'ema1_period': 24, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=863, value=None),\n FrozenTrial(number=864, state=1, values=[1085.04], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 53, 134831), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 53, 151189), params={'ema1_period': 22, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=864, value=None),\n FrozenTrial(number=865, state=1, values=[1163.2], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 53, 151865), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 53, 168031), params={'ema1_period': 21, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=865, value=None),\n FrozenTrial(number=866, state=1, values=[1152.6], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 53, 168639), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 53, 184989), params={'ema1_period': 21, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=866, value=None),\n FrozenTrial(number=867, state=1, values=[1085.04], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 53, 185608), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 53, 201754), params={'ema1_period': 22, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=867, value=None),\n FrozenTrial(number=868, state=1, values=[1142.64], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 53, 202347), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 53, 218401), params={'ema1_period': 20, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=868, value=None),\n FrozenTrial(number=869, state=1, values=[1091.24], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 53, 219006), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 53, 242323), params={'ema1_period': 21, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=869, value=None),\n FrozenTrial(number=870, state=1, values=[1142.82], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 53, 243681), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 53, 272510), params={'ema1_period': 20, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=870, value=None),\n FrozenTrial(number=871, state=1, values=[1084.94], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 53, 273614), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 53, 299738), params={'ema1_period': 21, 'ema2_period': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=871, value=None),\n FrozenTrial(number=872, state=1, values=[1163.2], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 53, 301065), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 53, 326841), params={'ema1_period': 21, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=872, value=None),\n FrozenTrial(number=873, state=1, values=[1133.72], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 53, 328380), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 53, 348326), params={'ema1_period': 20, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=873, value=None),\n FrozenTrial(number=874, state=1, values=[1153.36], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 53, 349120), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 53, 367357), params={'ema1_period': 22, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=874, value=None),\n FrozenTrial(number=875, state=1, values=[918.74], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 53, 368104), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 53, 583905), params={'ema1_period': 21, 'ema2_period': 37}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=875, value=None),\n FrozenTrial(number=876, state=1, values=[1075.0], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 53, 585108), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 53, 603438), params={'ema1_period': 22, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=876, value=None),\n FrozenTrial(number=877, state=1, values=[1120.88], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 53, 604210), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 53, 621801), params={'ema1_period': 20, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=877, value=None),\n FrozenTrial(number=878, state=1, values=[1074.98], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 53, 622358), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 53, 640465), params={'ema1_period': 21, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=878, value=None),\n FrozenTrial(number=879, state=1, values=[1095.32], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 53, 641272), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 53, 658431), params={'ema1_period': 23, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=879, value=None),\n FrozenTrial(number=880, state=1, values=[1163.2], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 53, 659252), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 53, 676752), params={'ema1_period': 21, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=880, value=None),\n FrozenTrial(number=881, state=1, values=[1163.2], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 53, 677619), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 53, 695180), params={'ema1_period': 21, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=881, value=None),\n FrozenTrial(number=882, state=1, values=[1064.92], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 53, 696054), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 53, 713261), params={'ema1_period': 22, 'ema2_period': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=882, value=None),\n FrozenTrial(number=883, state=1, values=[1133.72], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 53, 713725), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 53, 731574), params={'ema1_period': 20, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=883, value=None),\n FrozenTrial(number=884, state=1, values=[1152.6], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 53, 732108), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 53, 753416), params={'ema1_period': 21, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=884, value=None),\n FrozenTrial(number=885, state=1, values=[1143.02], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 53, 754327), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 53, 777608), params={'ema1_period': 21, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=885, value=None),\n FrozenTrial(number=886, state=1, values=[1153.36], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 53, 778725), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 53, 797576), params={'ema1_period': 22, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=886, value=None),\n FrozenTrial(number=887, state=1, values=[1065.02], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 53, 798332), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 53, 816446), params={'ema1_period': 21, 'ema2_period': 18}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=887, value=None),\n FrozenTrial(number=888, state=1, values=[1142.82], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 53, 816976), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 53, 835266), params={'ema1_period': 20, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=888, value=None),\n FrozenTrial(number=889, state=1, values=[936.54], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 53, 836094), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 53, 853808), params={'ema1_period': 21, 'ema2_period': 28}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=889, value=None),\n FrozenTrial(number=890, state=1, values=[1085.04], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 53, 855136), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 53, 873517), params={'ema1_period': 22, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=890, value=None),\n FrozenTrial(number=891, state=1, values=[1074.88], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 53, 874410), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 53, 892869), params={'ema1_period': 20, 'ema2_period': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=891, value=None),\n FrozenTrial(number=892, state=1, values=[845.26], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 53, 893623), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 54, 137759), params={'ema1_period': 17, 'ema2_period': 19}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=892, value=None),\n FrozenTrial(number=893, state=1, values=[1163.2], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 54, 138464), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 54, 157466), params={'ema1_period': 21, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=893, value=None),\n FrozenTrial(number=894, state=1, values=[1142.84], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 54, 158258), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 54, 175843), params={'ema1_period': 22, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=894, value=None),\n FrozenTrial(number=895, state=1, values=[1095.32], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 54, 176746), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 54, 194887), params={'ema1_period': 23, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=895, value=None),\n FrozenTrial(number=896, state=1, values=[1133.72], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 54, 195439), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 54, 213122), params={'ema1_period': 20, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=896, value=None),\n FrozenTrial(number=897, state=1, values=[1090.6], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 54, 213644), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 54, 231553), params={'ema1_period': 21, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=897, value=None),\n FrozenTrial(number=898, state=1, values=[1163.2], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 54, 232299), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 54, 250193), params={'ema1_period': 21, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=898, value=None),\n FrozenTrial(number=899, state=1, values=[1153.36], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 54, 251117), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 54, 274697), params={'ema1_period': 22, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=899, value=None),\n FrozenTrial(number=900, state=1, values=[1015.04], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 54, 275630), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 54, 295205), params={'ema1_period': 24, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=900, value=None),\n FrozenTrial(number=901, state=1, values=[1091.24], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 54, 295891), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 54, 314762), params={'ema1_period': 21, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=901, value=None),\n FrozenTrial(number=902, state=1, values=[1142.64], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 54, 315431), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 54, 333777), params={'ema1_period': 20, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=902, value=None),\n FrozenTrial(number=903, state=1, values=[965.22], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 54, 334652), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 54, 352547), params={'ema1_period': 13, 'ema2_period': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=903, value=None),\n FrozenTrial(number=904, state=1, values=[1152.6], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 54, 353184), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 54, 370988), params={'ema1_period': 21, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=904, value=None),\n FrozenTrial(number=905, state=1, values=[1075.0], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 54, 371657), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 54, 389537), params={'ema1_period': 22, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=905, value=None),\n FrozenTrial(number=906, state=1, values=[1142.82], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 54, 390246), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 54, 408166), params={'ema1_period': 20, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=906, value=None),\n FrozenTrial(number=907, state=1, values=[852.9], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 54, 408852), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 54, 675254), params={'ema1_period': 10, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=907, value=None),\n FrozenTrial(number=908, state=1, values=[1143.02], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 54, 676218), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 54, 695170), params={'ema1_period': 21, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=908, value=None),\n FrozenTrial(number=909, state=1, values=[1084.94], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 54, 695783), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 54, 713106), params={'ema1_period': 21, 'ema2_period': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=909, value=None),\n FrozenTrial(number=910, state=1, values=[1085.04], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 54, 713676), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 54, 730834), params={'ema1_period': 22, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=910, value=None),\n FrozenTrial(number=911, state=1, values=[1163.2], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 54, 731402), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 54, 748366), params={'ema1_period': 21, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=911, value=None),\n FrozenTrial(number=912, state=1, values=[1143.02], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 54, 748919), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 54, 766264), params={'ema1_period': 21, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=912, value=None),\n FrozenTrial(number=913, state=1, values=[1120.88], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 54, 766871), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 54, 784632), params={'ema1_period': 20, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=913, value=None),\n FrozenTrial(number=914, state=1, values=[1163.2], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 54, 785395), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 54, 807691), params={'ema1_period': 21, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=914, value=None),\n FrozenTrial(number=915, state=1, values=[1002.92], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 54, 808528), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 55, 18371), params={'ema1_period': 22, 'ema2_period': 49}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=915, value=None),\n FrozenTrial(number=916, state=1, values=[953.82], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 55, 19347), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 55, 38945), params={'ema1_period': 11, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=916, value=None),\n FrozenTrial(number=917, state=1, values=[1152.6], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 55, 39622), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 55, 57180), params={'ema1_period': 21, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=917, value=None),\n FrozenTrial(number=918, state=1, values=[1142.82], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 55, 57776), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 55, 75255), params={'ema1_period': 20, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=918, value=None),\n FrozenTrial(number=919, state=1, values=[1085.04], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 55, 76031), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 55, 94775), params={'ema1_period': 22, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=919, value=None),\n FrozenTrial(number=920, state=1, values=[809.16], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 55, 95476), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 55, 113834), params={'ema1_period': 10, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=920, value=None),\n FrozenTrial(number=921, state=1, values=[986.54], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 55, 114663), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 55, 376988), params={'ema1_period': 12, 'ema2_period': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=921, value=None),\n FrozenTrial(number=922, state=1, values=[1163.2], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 55, 377841), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 55, 396590), params={'ema1_period': 21, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=922, value=None),\n FrozenTrial(number=923, state=1, values=[1074.9], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 55, 397250), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 55, 414806), params={'ema1_period': 20, 'ema2_period': 18}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=923, value=None),\n FrozenTrial(number=924, state=1, values=[1152.78], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 55, 415382), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 55, 660173), params={'ema1_period': 23, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=924, value=None),\n FrozenTrial(number=925, state=1, values=[1000.84], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 55, 661034), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 55, 914548), params={'ema1_period': 15, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=925, value=None),\n FrozenTrial(number=926, state=1, values=[1163.2], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 55, 915370), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 55, 934357), params={'ema1_period': 21, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=926, value=None),\n FrozenTrial(number=927, state=1, values=[1074.98], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 55, 935578), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 55, 956701), params={'ema1_period': 21, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=927, value=None),\n FrozenTrial(number=928, state=1, values=[1085.04], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 55, 957561), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 55, 976329), params={'ema1_period': 22, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=928, value=None),\n FrozenTrial(number=929, state=1, values=[1142.64], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 55, 976984), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 55, 994852), params={'ema1_period': 20, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=929, value=None),\n FrozenTrial(number=930, state=1, values=[1075.0], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 55, 995489), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 56, 13015), params={'ema1_period': 22, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=930, value=None),\n FrozenTrial(number=931, state=1, values=[1143.02], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 56, 13638), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 56, 31004), params={'ema1_period': 21, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=931, value=None),\n FrozenTrial(number=932, state=1, values=[1084.94], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 56, 31572), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 56, 49051), params={'ema1_period': 21, 'ema2_period': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=932, value=None),\n FrozenTrial(number=933, state=1, values=[946.4], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 56, 49867), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 56, 67608), params={'ema1_period': 21, 'ema2_period': 27}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=933, value=None),\n FrozenTrial(number=934, state=1, values=[1110.74], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 56, 68145), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 56, 86561), params={'ema1_period': 19, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=934, value=None),\n FrozenTrial(number=935, state=1, values=[1142.82], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 56, 87352), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 56, 105308), params={'ema1_period': 20, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=935, value=None),\n FrozenTrial(number=936, state=1, values=[1074.98], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 56, 106119), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 56, 123857), params={'ema1_period': 21, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=936, value=None),\n FrozenTrial(number=937, state=1, values=[1162.48], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 56, 124472), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 56, 141932), params={'ema1_period': 22, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=937, value=None),\n FrozenTrial(number=938, state=1, values=[1014.94], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 56, 142513), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 56, 160245), params={'ema1_period': 25, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=938, value=None),\n FrozenTrial(number=939, state=1, values=[1143.02], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 56, 160903), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 56, 181550), params={'ema1_period': 21, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=939, value=None),\n FrozenTrial(number=940, state=1, values=[1016.0], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 56, 182704), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 56, 412871), params={'ema1_period': 20, 'ema2_period': 23}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=940, value=None),\n FrozenTrial(number=941, state=1, values=[924.46], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 56, 413695), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 56, 685664), params={'ema1_period': 21, 'ema2_period': 39}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=941, value=None),\n FrozenTrial(number=942, state=1, values=[1085.04], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 56, 686561), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 56, 705608), params={'ema1_period': 22, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=942, value=None),\n FrozenTrial(number=943, state=1, values=[1152.6], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 56, 706346), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 56, 724571), params={'ema1_period': 21, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=943, value=None),\n FrozenTrial(number=944, state=1, values=[1142.82], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 56, 725410), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 56, 743511), params={'ema1_period': 20, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=944, value=None),\n FrozenTrial(number=945, state=1, values=[1064.92], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 56, 744310), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 56, 762527), params={'ema1_period': 22, 'ema2_period': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=945, value=None),\n FrozenTrial(number=946, state=1, values=[1016.0], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 56, 763214), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 57, 15179), params={'ema1_period': 21, 'ema2_period': 22}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=946, value=None),\n FrozenTrial(number=947, state=1, values=[1143.02], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 57, 16226), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 57, 36507), params={'ema1_period': 21, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=947, value=None),\n FrozenTrial(number=948, state=1, values=[1133.72], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 57, 37225), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 57, 57209), params={'ema1_period': 20, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=948, value=None),\n FrozenTrial(number=949, state=1, values=[1095.32], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 57, 58335), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 57, 79366), params={'ema1_period': 23, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=949, value=None),\n FrozenTrial(number=950, state=1, values=[1005.18], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 57, 80025), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 57, 98989), params={'ema1_period': 22, 'ema2_period': 18}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=950, value=None),\n FrozenTrial(number=951, state=1, values=[1163.2], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 57, 99699), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 57, 118394), params={'ema1_period': 21, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=951, value=None),\n FrozenTrial(number=952, state=1, values=[1152.6], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 57, 119118), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 57, 137647), params={'ema1_period': 21, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=952, value=None),\n FrozenTrial(number=953, state=1, values=[1074.88], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 57, 138425), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 57, 159971), params={'ema1_period': 20, 'ema2_period': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=953, value=None),\n FrozenTrial(number=954, state=1, values=[1075.0], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 57, 160762), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 57, 180514), params={'ema1_period': 22, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=954, value=None),\n FrozenTrial(number=955, state=1, values=[1074.98], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 57, 181233), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 57, 200663), params={'ema1_period': 21, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=955, value=None),\n FrozenTrial(number=956, state=1, values=[1163.2], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 57, 201284), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 57, 220113), params={'ema1_period': 21, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=956, value=None),\n FrozenTrial(number=957, state=1, values=[976.46], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 57, 220784), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 57, 444584), params={'ema1_period': 20, 'ema2_period': 30}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=957, value=None),\n FrozenTrial(number=958, state=1, values=[1143.02], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 57, 445457), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 57, 465698), params={'ema1_period': 21, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=958, value=None),\n FrozenTrial(number=959, state=1, values=[1085.04], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 57, 466513), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 57, 485558), params={'ema1_period': 22, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=959, value=None),\n FrozenTrial(number=960, state=1, values=[1142.82], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 57, 486278), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 57, 505446), params={'ema1_period': 20, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=960, value=None),\n FrozenTrial(number=961, state=1, values=[1143.02], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 57, 506179), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 57, 525299), params={'ema1_period': 21, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=961, value=None),\n FrozenTrial(number=962, state=1, values=[1084.94], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 57, 526076), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 57, 545491), params={'ema1_period': 21, 'ema2_period': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=962, value=None),\n FrozenTrial(number=963, state=1, values=[1162.82], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 57, 546203), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 57, 564892), params={'ema1_period': 19, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=963, value=None),\n FrozenTrial(number=964, state=1, values=[1142.84], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 57, 565560), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 57, 584805), params={'ema1_period': 22, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=964, value=None),\n FrozenTrial(number=965, state=1, values=[1142.82], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 57, 585503), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 57, 608025), params={'ema1_period': 20, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=965, value=None),\n FrozenTrial(number=966, state=1, values=[890.02], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 57, 609429), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 57, 826624), params={'ema1_period': 21, 'ema2_period': 36}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=966, value=None),\n FrozenTrial(number=967, state=1, values=[923.96], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 57, 827590), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 57, 847172), params={'ema1_period': 22, 'ema2_period': 41}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=967, value=None),\n FrozenTrial(number=968, state=1, values=[847.6], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 57, 847848), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 58, 126838), params={'ema1_period': 7, 'ema2_period': 18}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=968, value=None),\n FrozenTrial(number=969, state=1, values=[1091.24], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 58, 127758), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 58, 147142), params={'ema1_period': 21, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=969, value=None),\n FrozenTrial(number=970, state=1, values=[1005.28], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 58, 147932), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 58, 167370), params={'ema1_period': 21, 'ema2_period': 19}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=970, value=None),\n FrozenTrial(number=971, state=1, values=[1142.64], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 58, 168041), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 58, 187210), params={'ema1_period': 20, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=971, value=None),\n FrozenTrial(number=972, state=1, values=[1075.0], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 58, 187958), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 58, 206753), params={'ema1_period': 22, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=972, value=None),\n FrozenTrial(number=973, state=1, values=[1064.82], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 58, 207521), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 58, 226075), params={'ema1_period': 23, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=973, value=None),\n FrozenTrial(number=974, state=1, values=[1090.6], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 58, 226736), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 58, 245217), params={'ema1_period': 21, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=974, value=None),\n FrozenTrial(number=975, state=1, values=[1152.6], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 58, 246226), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 58, 265069), params={'ema1_period': 21, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=975, value=None),\n FrozenTrial(number=976, state=1, values=[1142.82], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 58, 265751), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 58, 285796), params={'ema1_period': 20, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=976, value=None),\n FrozenTrial(number=977, state=1, values=[1153.36], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 58, 287761), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 58, 309639), params={'ema1_period': 22, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=977, value=None),\n FrozenTrial(number=978, state=1, values=[1084.94], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 58, 310397), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 58, 329444), params={'ema1_period': 21, 'ema2_period': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=978, value=None),\n FrozenTrial(number=979, state=1, values=[1143.02], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 58, 330161), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 58, 349088), params={'ema1_period': 21, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=979, value=None),\n FrozenTrial(number=980, state=1, values=[1133.72], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 58, 349783), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 58, 368603), params={'ema1_period': 20, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=980, value=None),\n FrozenTrial(number=981, state=1, values=[1142.84], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 58, 369243), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 58, 388177), params={'ema1_period': 22, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=981, value=None),\n FrozenTrial(number=982, state=1, values=[1163.2], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 58, 388917), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 58, 407960), params={'ema1_period': 21, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=982, value=None),\n FrozenTrial(number=983, state=1, values=[1133.72], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 58, 408643), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 58, 426915), params={'ema1_period': 20, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=983, value=None),\n FrozenTrial(number=984, state=1, values=[1163.2], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 58, 427419), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 58, 446161), params={'ema1_period': 21, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=984, value=None),\n FrozenTrial(number=985, state=1, values=[1075.0], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 58, 446963), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 58, 465740), params={'ema1_period': 22, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=985, value=None),\n FrozenTrial(number=986, state=1, values=[1084.94], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 58, 466368), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 58, 485513), params={'ema1_period': 21, 'ema2_period': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=986, value=None),\n FrozenTrial(number=987, state=1, values=[1143.02], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 58, 486146), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 58, 504957), params={'ema1_period': 21, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=987, value=None),\n FrozenTrial(number=988, state=1, values=[1133.72], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 58, 505607), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 58, 525681), params={'ema1_period': 20, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=988, value=None),\n FrozenTrial(number=989, state=1, values=[976.82], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 58, 528585), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 58, 755687), params={'ema1_period': 19, 'ema2_period': 32}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=989, value=None),\n FrozenTrial(number=990, state=1, values=[1142.84], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 58, 756863), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 58, 777296), params={'ema1_period': 22, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=990, value=None),\n FrozenTrial(number=991, state=1, values=[1143.02], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 58, 778166), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 58, 797801), params={'ema1_period': 21, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=991, value=None),\n FrozenTrial(number=992, state=1, values=[1054.78], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 58, 798627), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 58, 817776), params={'ema1_period': 24, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=992, value=None),\n FrozenTrial(number=993, state=1, values=[1085.04], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 58, 818562), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 58, 837728), params={'ema1_period': 22, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=993, value=None),\n FrozenTrial(number=994, state=1, values=[964.46], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 58, 838433), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 58, 858221), params={'ema1_period': 21, 'ema2_period': 46}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=994, value=None),\n FrozenTrial(number=995, state=1, values=[1142.64], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 58, 859031), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 58, 878450), params={'ema1_period': 20, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=995, value=None),\n FrozenTrial(number=996, state=1, values=[1085.04], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 58, 879231), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 58, 898472), params={'ema1_period': 23, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=996, value=None),\n FrozenTrial(number=997, state=1, values=[1084.94], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 58, 899306), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 58, 918809), params={'ema1_period': 21, 'ema2_period': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=997, value=None),\n FrozenTrial(number=998, state=1, values=[1091.24], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 58, 919635), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 58, 938804), params={'ema1_period': 21, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=998, value=None),\n FrozenTrial(number=999, state=1, values=[1133.72], datetime_start=datetime.datetime(2024, 6, 26, 12, 42, 58, 939541), datetime_complete=datetime.datetime(2024, 6, 26, 12, 42, 58, 959652), params={'ema1_period': 20, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=999, value=None)]</pre> In\u00a0[10]: Copied! <pre>import pandas as pd\n\ndf = pd.DataFrame(columns=[\"ema1_period\", \"ema2_period\", \"score\"])\nfor trial in study.trials:\n    df.loc[trial.number] = [\n        trial.params[\"ema1_period\"],\n        trial.params[\"ema2_period\"],\n        trial.values[0],\n    ]\n\n\ndf\n</pre> import pandas as pd  df = pd.DataFrame(columns=[\"ema1_period\", \"ema2_period\", \"score\"]) for trial in study.trials:     df.loc[trial.number] = [         trial.params[\"ema1_period\"],         trial.params[\"ema2_period\"],         trial.values[0],     ]   df Out[10]: ema1_period ema2_period score 0 17.0 37.0 981.08 1 22.0 48.0 1032.88 2 10.0 39.0 935.78 3 21.0 18.0 1065.02 4 22.0 41.0 923.96 ... ... ... ... 995 20.0 14.0 1142.64 996 23.0 15.0 1085.04 997 21.0 17.0 1084.94 998 21.0 12.0 1091.24 999 20.0 16.0 1133.72 <p>1000 rows \u00d7 3 columns</p> In\u00a0[11]: Copied! <pre>from plotly import express as px\n\nfig = px.scatter(df, x=df.index, y=\"score\")\nfig.show()\n</pre> from plotly import express as px  fig = px.scatter(df, x=df.index, y=\"score\") fig.show() In\u00a0[12]: Copied! <pre>import plotly.express as px\n\n\nfig = px.density_contour(\n    df,\n    x=\"ema1_period\",\n    y=\"ema2_period\",\n    z=\"score\",\n    histfunc=\"max\",\n)\nfig.update_traces(contours_coloring=\"fill\", contours_showlabels=True)\nfig.show()\n</pre> import plotly.express as px   fig = px.density_contour(     df,     x=\"ema1_period\",     y=\"ema2_period\",     z=\"score\",     histfunc=\"max\", ) fig.update_traces(contours_coloring=\"fill\", contours_showlabels=True) fig.show() In\u00a0[13]: Copied! <pre>import plotly.express as px\n\nfig = px.density_heatmap(\n    df,\n    x=\"ema1_period\",\n    y=\"ema2_period\",\n    z=\"score\",\n    nbinsx=20,\n    nbinsy=40,\n    histfunc=\"max\",\n    color_continuous_scale=\"Viridis\",\n)\nfig.show()\n</pre> import plotly.express as px  fig = px.density_heatmap(     df,     x=\"ema1_period\",     y=\"ema2_period\",     z=\"score\",     nbinsx=20,     nbinsy=40,     histfunc=\"max\",     color_continuous_scale=\"Viridis\", ) fig.show()"},{"location":"optimize/1.optuna/#optimize-with-optuna","title":"Optimize with Optuna\u00b6","text":"<p>Home | Document</p>"},{"location":"optimize/1.optuna/#installation","title":"Installation\u00b6","text":""},{"location":"optimize/1.optuna/#sample-strategy","title":"Sample Strategy\u00b6","text":""},{"location":"optimize/1.optuna/#optimize","title":"Optimize\u00b6","text":""},{"location":"optimize/1.optuna/#plot","title":"Plot\u00b6","text":""},{"location":"optimize/1.optuna/#plot-by-optuna","title":"Plot by Optuna\u00b6","text":"<p>API</p>"},{"location":"optimize/1.optuna/#plot-plotly","title":"Plot plotly\u00b6","text":"<p>Tutorial</p>"},{"location":"optimize/1.optuna/#init-plotly-environment","title":"Init Plotly environment\u00b6","text":""},{"location":"optimize/1.optuna/#type-1","title":"Type 1\u00b6","text":""},{"location":"optimize/1.optuna/#type-2","title":"Type 2\u00b6","text":""},{"location":"optimize/1.optuna/#type-3","title":"Type 3\u00b6","text":""},{"location":"optimize/2.hyperopt/","title":"Optimize with Hyperopt","text":"In\u00a0[\u00a0]: Copied! <pre>!pip install hyperopt\n</pre> !pip install hyperopt In\u00a0[1]: Copied! <pre># import talib.abstract as ta\n\nfrom lettrade import DataFeed, Strategy, indicator as i\nfrom lettrade.exchange.backtest import ForexBackTestAccount, let_backtest\nfrom lettrade.indicator.vendor.qtpylib import inject_indicators\n\ninject_indicators()\n\n\nclass SmaCross(Strategy):\n    ema1_period = 9\n    ema2_period = 21\n\n    def indicators(self, df: DataFeed):\n        # df[\"ema1\"] = ta.EMA(df, timeperiod=self.ema1_period)\n        # df[\"ema2\"] = ta.EMA(df, timeperiod=self.ema2_period)\n        df[\"ema1\"] = df.close.ema(window=self.ema1_period)\n        df[\"ema2\"] = df.close.ema(window=self.ema2_period)\n\n        df[\"signal_ema_crossover\"] = i.crossover(df.ema1, df.ema2)\n        df[\"signal_ema_crossunder\"] = i.crossunder(df.ema1, df.ema2)\n\n    def next(self, df: DataFeed):\n        if len(self.orders) &gt; 0 or len(self.positions) &gt; 0:\n            return\n\n        if df.l.signal_ema_crossover[-1]:\n            price = df.l.close[-1]\n            self.buy(size=0.1, sl=price - 0.001, tp=price + 0.001)\n        elif df.l.signal_ema_crossunder[-1]:\n            price = df.l.close[-1]\n            self.sell(size=0.1, sl=price + 0.001, tp=price - 0.001)\n\n\nlt = let_backtest(\n    strategy=SmaCross,\n    datas=\"example/data/data/EURUSD_5m_0_10000.csv\",\n    account=ForexBackTestAccount,\n    # plotter=None,\n)\n</pre> # import talib.abstract as ta  from lettrade import DataFeed, Strategy, indicator as i from lettrade.exchange.backtest import ForexBackTestAccount, let_backtest from lettrade.indicator.vendor.qtpylib import inject_indicators  inject_indicators()   class SmaCross(Strategy):     ema1_period = 9     ema2_period = 21      def indicators(self, df: DataFeed):         # df[\"ema1\"] = ta.EMA(df, timeperiod=self.ema1_period)         # df[\"ema2\"] = ta.EMA(df, timeperiod=self.ema2_period)         df[\"ema1\"] = df.close.ema(window=self.ema1_period)         df[\"ema2\"] = df.close.ema(window=self.ema2_period)          df[\"signal_ema_crossover\"] = i.crossover(df.ema1, df.ema2)         df[\"signal_ema_crossunder\"] = i.crossunder(df.ema1, df.ema2)      def next(self, df: DataFeed):         if len(self.orders) &gt; 0 or len(self.positions) &gt; 0:             return          if df.l.signal_ema_crossover[-1]:             price = df.l.close[-1]             self.buy(size=0.1, sl=price - 0.001, tp=price + 0.001)         elif df.l.signal_ema_crossunder[-1]:             price = df.l.close[-1]             self.sell(size=0.1, sl=price + 0.001, tp=price - 0.001)   lt = let_backtest(     strategy=SmaCross,     datas=\"example/data/data/EURUSD_5m_0_10000.csv\",     account=ForexBackTestAccount,     # plotter=None, ) In\u00a0[2]: Copied! <pre># define a search space\nfrom hyperopt import fmin, tpe, space_eval, Trials\nfrom hyperopt import hp\n\n\nlettrade_model = lt.optimize_model()\n\n\ndef train_model(params):\n    # Model\n    result = lettrade_model(params)\n\n    # Score\n    return -result[\"equity\"]\n\n\n# Hyperopt\nsearch_space = {\n    \"ema1_period\": hp.uniformint(\"ema1_period\", 5, 25, q=1),\n    \"ema2_period\": hp.uniformint(\"ema2_period\", 5, 50, q=1),\n}\n\ntrials = Trials()\nbest_params = fmin(\n    train_model,\n    search_space,\n    algo=tpe.suggest,\n    max_evals=1_000,\n    trials=trials,\n)\n</pre> # define a search space from hyperopt import fmin, tpe, space_eval, Trials from hyperopt import hp   lettrade_model = lt.optimize_model()   def train_model(params):     # Model     result = lettrade_model(params)      # Score     return -result[\"equity\"]   # Hyperopt search_space = {     \"ema1_period\": hp.uniformint(\"ema1_period\", 5, 25, q=1),     \"ema2_period\": hp.uniformint(\"ema2_period\", 5, 50, q=1), }  trials = Trials() best_params = fmin(     train_model,     search_space,     algo=tpe.suggest,     max_evals=1_000,     trials=trials, ) <pre>100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1000/1000 [00:41&lt;00:00, 24.10trial/s, best loss: -1196.58]\n</pre> In\u00a0[3]: Copied! <pre>hyperparams = space_eval(search_space, best_params)\n\nprint(best_params)\nprint(hyperparams)\n</pre> hyperparams = space_eval(search_space, best_params)  print(best_params) print(hyperparams) <pre>{'ema1_period': 17.0, 'ema2_period': 8.0}\n{'ema1_period': 17, 'ema2_period': 8}\n</pre> In\u00a0[4]: Copied! <pre>lt.plotter.heatmap(x=\"ema1_period\", y=\"ema2_period\", z=\"equity\")\n</pre> lt.plotter.heatmap(x=\"ema1_period\", y=\"ema2_period\", z=\"equity\") In\u00a0[5]: Copied! <pre>lt.plotter.contour(x=\"ema1_period\", y=\"ema2_period\", z=\"equity\")\n</pre> lt.plotter.contour(x=\"ema1_period\", y=\"ema2_period\", z=\"equity\") In\u00a0[6]: Copied! <pre>import plotly.io as pio\n\npio.renderers.default = \"notebook\"\npio.templates.default = \"plotly_dark\"\n</pre> import plotly.io as pio  pio.renderers.default = \"notebook\" pio.templates.default = \"plotly_dark\" In\u00a0[7]: Copied! <pre>import pandas as pd\nimport numpy as np\n\n\ndef unpack(x):\n    if x:\n        return x[0]\n    return np.nan\n\n\n# We'll first turn each trial into a series and then stack those series together as a dataframe.\ndf = pd.DataFrame([pd.Series(t[\"misc\"][\"vals\"]).apply(unpack) for t in trials])\n# Then we'll add other relevant bits of information to the correct rows and perform a couple of\n# mappings for convenience\ndf[\"loss\"] = [t[\"result\"][\"loss\"] for t in trials]\ndf[\"trial_number\"] = df.index\n\n\ndf[\"win\"] = -df[\"loss\"]\ndf\n</pre> import pandas as pd import numpy as np   def unpack(x):     if x:         return x[0]     return np.nan   # We'll first turn each trial into a series and then stack those series together as a dataframe. df = pd.DataFrame([pd.Series(t[\"misc\"][\"vals\"]).apply(unpack) for t in trials]) # Then we'll add other relevant bits of information to the correct rows and perform a couple of # mappings for convenience df[\"loss\"] = [t[\"result\"][\"loss\"] for t in trials] df[\"trial_number\"] = df.index   df[\"win\"] = -df[\"loss\"] df Out[7]: ema1_period ema2_period loss trial_number win 0 17.0 42.0 -903.38 0 903.38 1 20.0 6.0 -1096.68 1 1096.68 2 20.0 42.0 -928.18 2 928.18 3 10.0 16.0 -859.38 3 859.38 4 6.0 7.0 -872.28 4 872.28 ... ... ... ... ... ... 995 16.0 17.0 -813.68 995 813.68 996 18.0 7.0 -1147.08 996 1147.08 997 14.0 8.0 -1171.68 997 1171.68 998 15.0 12.0 -1039.58 998 1039.58 999 8.0 13.0 -832.18 999 832.18 <p>1000 rows \u00d7 5 columns</p> In\u00a0[8]: Copied! <pre>from plotly import express as px\n\nfig = px.scatter(df, x=\"trial_number\", y=\"win\")\nfig.show()\n</pre> from plotly import express as px  fig = px.scatter(df, x=\"trial_number\", y=\"win\") fig.show() In\u00a0[9]: Copied! <pre>import plotly.express as px\n\n\nfig = px.density_contour(\n    df,\n    x=\"ema1_period\",\n    y=\"ema2_period\",\n    z=\"win\",\n    histfunc=\"max\",\n)\nfig.update_traces(contours_coloring=\"fill\", contours_showlabels=True)\nfig.show()\n</pre> import plotly.express as px   fig = px.density_contour(     df,     x=\"ema1_period\",     y=\"ema2_period\",     z=\"win\",     histfunc=\"max\", ) fig.update_traces(contours_coloring=\"fill\", contours_showlabels=True) fig.show() In\u00a0[10]: Copied! <pre>import plotly.express as px\n\nfig = px.density_heatmap(\n    df,\n    x=\"ema1_period\",\n    y=\"ema2_period\",\n    z=\"win\",\n    nbinsx=20,\n    nbinsy=40,\n    histfunc=\"max\",\n    color_continuous_scale=\"Viridis\",\n)\nfig.show()\n</pre> import plotly.express as px  fig = px.density_heatmap(     df,     x=\"ema1_period\",     y=\"ema2_period\",     z=\"win\",     nbinsx=20,     nbinsy=40,     histfunc=\"max\",     color_continuous_scale=\"Viridis\", ) fig.show()"},{"location":"optimize/2.hyperopt/#optimize-with-hyperopt","title":"Optimize with Hyperopt\u00b6","text":"<p>Home | Document</p>"},{"location":"optimize/2.hyperopt/#installation","title":"Installation\u00b6","text":""},{"location":"optimize/2.hyperopt/#sample-strategy","title":"Sample Strategy\u00b6","text":""},{"location":"optimize/2.hyperopt/#optimize","title":"Optimize\u00b6","text":""},{"location":"optimize/2.hyperopt/#plot","title":"Plot\u00b6","text":""},{"location":"optimize/2.hyperopt/#plot-plotly","title":"Plot plotly\u00b6","text":"<p>Tutorial</p>"},{"location":"optimize/2.hyperopt/#init-plotly-environment","title":"Init Plotly environment\u00b6","text":""},{"location":"optimize/2.hyperopt/#type-1","title":"Type 1\u00b6","text":""},{"location":"optimize/2.hyperopt/#type-2","title":"Type 2\u00b6","text":""},{"location":"optimize/2.hyperopt/#type-3","title":"Type 3\u00b6","text":""},{"location":"optimize/3.ray/","title":"Optimize with RAY","text":"In\u00a0[\u00a0]: Copied! <pre>!pip install \"ray[tune,client]\"\n!pip install optuna\n</pre> !pip install \"ray[tune,client]\" !pip install optuna In\u00a0[1]: Copied! <pre>import talib.abstract as ta\n\nfrom lettrade import DataFeed, Strategy, indicator as i\nfrom lettrade.exchange.backtest import ForexBackTestAccount, let_backtest\n\n# from lettrade.indicator.vendor.qtpylib import inject_indicators\n\n# inject_indicators()\n\n\nclass SmaCross(Strategy):\n    ema1_period = 9\n    ema2_period = 21\n\n    def indicators(self, df: DataFeed):\n        df[\"ema1\"] = ta.EMA(df, timeperiod=self.ema1_period)\n        df[\"ema2\"] = ta.EMA(df, timeperiod=self.ema2_period)\n        # df[\"ema1\"] = df.close.ema(window=self.ema1_period)\n        # df[\"ema2\"] = df.close.ema(window=self.ema2_period)\n\n        df[\"signal_ema_crossover\"] = i.crossover(df.ema1, df.ema2)\n        df[\"signal_ema_crossunder\"] = i.crossunder(df.ema1, df.ema2)\n\n    def next(self, df: DataFeed):\n        if len(self.orders) &gt; 0 or len(self.positions) &gt; 0:\n            return\n\n        if df.l.signal_ema_crossover[-1]:\n            price = df.l.close[-1]\n            self.buy(size=0.1, sl=price - 0.001, tp=price + 0.001)\n        elif df.l.signal_ema_crossunder[-1]:\n            price = df.l.close[-1]\n            self.sell(size=0.1, sl=price + 0.001, tp=price - 0.001)\n\n\nlt = let_backtest(\n    strategy=SmaCross,\n    datas=\"example/data/data/EURUSD_5m_0_10000.csv\",\n    account=ForexBackTestAccount,\n    # plotter=None,\n)\n</pre> import talib.abstract as ta  from lettrade import DataFeed, Strategy, indicator as i from lettrade.exchange.backtest import ForexBackTestAccount, let_backtest  # from lettrade.indicator.vendor.qtpylib import inject_indicators  # inject_indicators()   class SmaCross(Strategy):     ema1_period = 9     ema2_period = 21      def indicators(self, df: DataFeed):         df[\"ema1\"] = ta.EMA(df, timeperiod=self.ema1_period)         df[\"ema2\"] = ta.EMA(df, timeperiod=self.ema2_period)         # df[\"ema1\"] = df.close.ema(window=self.ema1_period)         # df[\"ema2\"] = df.close.ema(window=self.ema2_period)          df[\"signal_ema_crossover\"] = i.crossover(df.ema1, df.ema2)         df[\"signal_ema_crossunder\"] = i.crossunder(df.ema1, df.ema2)      def next(self, df: DataFeed):         if len(self.orders) &gt; 0 or len(self.positions) &gt; 0:             return          if df.l.signal_ema_crossover[-1]:             price = df.l.close[-1]             self.buy(size=0.1, sl=price - 0.001, tp=price + 0.001)         elif df.l.signal_ema_crossunder[-1]:             price = df.l.close[-1]             self.sell(size=0.1, sl=price + 0.001, tp=price - 0.001)   lt = let_backtest(     strategy=SmaCross,     datas=\"example/data/data/EURUSD_5m_0_10000.csv\",     account=ForexBackTestAccount,     # plotter=None, ) In\u00a0[2]: Copied! <pre>from ray import tune, train\nfrom ray.tune.search.optuna import OptunaSearch\nfrom lettrade.exchange.backtest.extra.ray import LetOptimizeRay\nimport logging\n\nlogging.getLogger(\"ray.tune.tune\").setLevel(logging.WARNING)\n\nletray = LetOptimizeRay()\nlettrade_model = lt.optimize_model(dumper=letray.dumps)\n\n\ndef train_model(config, data):\n    params = {\n        \"ema1_period\": config[\"ema1_period\"],\n        \"ema2_period\": config[\"ema2_period\"],\n    }\n\n    # Model\n    result = lettrade_model(params, optimizer_kwargs=data)\n\n    # Score\n    return {\"score\": result[\"equity\"]}\n\n\nsearch_space = {\n    \"ema1_period\": tune.qrandint(5, 25, q=1),\n    \"ema2_period\": tune.qrandint(10, 50, q=1),\n}\n\nalgo = OptunaSearch()\n# algo = tune.search.ConcurrencyLimiter(algo, max_concurrent=4)\n\ntuner = tune.Tuner(\n    tune.with_parameters(train_model, data=letray.data),\n    tune_config=tune.TuneConfig(\n        metric=\"score\",\n        mode=\"max\",\n        search_alg=algo,\n        num_samples=100,\n    ),\n    # run_config=train.RunConfig(verbose=0),\n    param_space=search_space,\n)\nresults = tuner.fit()\n\nlt.optimize_done()\n</pre> from ray import tune, train from ray.tune.search.optuna import OptunaSearch from lettrade.exchange.backtest.extra.ray import LetOptimizeRay import logging  logging.getLogger(\"ray.tune.tune\").setLevel(logging.WARNING)  letray = LetOptimizeRay() lettrade_model = lt.optimize_model(dumper=letray.dumps)   def train_model(config, data):     params = {         \"ema1_period\": config[\"ema1_period\"],         \"ema2_period\": config[\"ema2_period\"],     }      # Model     result = lettrade_model(params, optimizer_kwargs=data)      # Score     return {\"score\": result[\"equity\"]}   search_space = {     \"ema1_period\": tune.qrandint(5, 25, q=1),     \"ema2_period\": tune.qrandint(10, 50, q=1), }  algo = OptunaSearch() # algo = tune.search.ConcurrencyLimiter(algo, max_concurrent=4)  tuner = tune.Tuner(     tune.with_parameters(train_model, data=letray.data),     tune_config=tune.TuneConfig(         metric=\"score\",         mode=\"max\",         search_alg=algo,         num_samples=100,     ),     # run_config=train.RunConfig(verbose=0),     param_space=search_space, ) results = tuner.fit()  lt.optimize_done() Tune Status Current time:2024-06-15 09:31:24 Running for: 00:01:31.89         Memory:      9.4/62.7 GiB        System Info       Using FIFO scheduling algorithm.Logical resource usage: 1.0/32 CPUs, 0/1 GPUs (0.0/1.0 accelerator_type:G)      Trial Status Trial name          status    loc                 ema1_period  ema2_period  iter  total time (s)  score train_model_567e8489TERMINATED192.168.1.84:15993           17           14     1        0.3941291056.08 train_model_0b9c709fTERMINATED192.168.1.84:16129            7           46     1        0.219453 920.68 train_model_15f951e4TERMINATED192.168.1.84:16203           18           14     1        0.1871651116.68 train_model_1054961cTERMINATED192.168.1.84:16275            9           24     1        0.197212 893.48 train_model_aceac61dTERMINATED192.168.1.84:16341           24           38     1        0.205062 931.48 train_model_ce105e0cTERMINATED192.168.1.84:16413           23           17     1        0.1831841020.28 train_model_a5ec8f89TERMINATED192.168.1.84:16511           20           41     1        0.206701 962.68 train_model_e1ead9ceTERMINATED192.168.1.84:16577            6           35     1        0.189952 960.68 train_model_9b0198caTERMINATED192.168.1.84:16644           22           49     1        0.1967411006.88 train_model_b22a89bcTERMINATED192.168.1.84:16711            5           24     1        0.19996  852.58 train_model_b0438800TERMINATED192.168.1.84:16782            8           21     1        0.196432 962.68 train_model_aa0e7c19TERMINATED192.168.1.84:16850           13           12     1        0.1902391150.28 train_model_5efdbdc2TERMINATED192.168.1.84:16928           16           10     1        0.20991 1140.58 train_model_15871df1TERMINATED192.168.1.84:16996           12           11     1        0.2018341153.88 train_model_3b28c8c8TERMINATED192.168.1.84:17063           13           10     1        0.2007651153.78 train_model_9925dbecTERMINATED192.168.1.84:17129           13           29     1        0.1899931029.18 train_model_b2764cd3TERMINATED192.168.1.84:17195           12           29     1        0.20041  979.58 train_model_15993c9dTERMINATED192.168.1.84:17261           11           19     1        0.2256851012.48 train_model_ce4d58deTERMINATED192.168.1.84:17327           10           18     1        0.205284 950.48 train_model_2c7e1a4eTERMINATED192.168.1.84:17395           10           10     1        0.2089171000    train_model_ba0b19e2TERMINATED192.168.1.84:17461           14           10     1        0.21732 1183.88 train_model_d04dbfdaTERMINATED192.168.1.84:17547           14           25     1        0.254303 900.18 train_model_591bbf70TERMINATED192.168.1.84:17632           14           15     1        0.288824 992.68 train_model_c6e477f3TERMINATED192.168.1.84:17711           15           13     1        0.24678 1009.38 train_model_96bd7001TERMINATED192.168.1.84:17792           15           10     1        0.2216371120.48 train_model_4d4d03cdTERMINATED192.168.1.84:17876           19           21     1        0.247008 969.68 train_model_72dbb93dTERMINATED192.168.1.84:17953           12           17     1        0.184375 992.78 train_model_ef05b46bTERMINATED192.168.1.84:18020           12           16     1        0.206489 980.68 train_model_49e81eb3TERMINATED192.168.1.84:18086           17           15     1        0.1820671118.58 train_model_16349ae4TERMINATED192.168.1.84:18153           17           12     1        0.2004321006.98 train_model_43578958TERMINATED192.168.1.84:18226           17           13     1        0.1807151028.38 train_model_a74e8eb3TERMINATED192.168.1.84:18292            9           33     1        0.176146 899.68 train_model_03e41eecTERMINATED192.168.1.84:18358           13           10     1        0.1722161153.78 train_model_fa885682TERMINATED192.168.1.84:18431           13           12     1        0.18103 1150.28 train_model_80f1f623TERMINATED192.168.1.84:18497           14           10     1        0.1705971183.88 train_model_8e51adfbTERMINATED192.168.1.84:18564           11           10     1        0.1913771177.58 train_model_30471d3fTERMINATED192.168.1.84:18657           15           20     1        0.185873 851.58 train_model_fd89af7dTERMINATED192.168.1.84:18723           11           20     1        0.1741  1031.88 train_model_912afd24TERMINATED192.168.1.84:18789            8           14     1        0.179255 810.48 train_model_60db4bd0TERMINATED192.168.1.84:18855            9           14     1        0.19334  856.08 train_model_81f9d953TERMINATED192.168.1.84:18921           19           41     1        0.180821 946.88 train_model_37878487TERMINATED192.168.1.84:18987           20           26     1        0.20723  941.18 train_model_e7b0b313TERMINATED192.168.1.84:19055           11           10     1        0.2037641177.58 train_model_8298fcd9TERMINATED192.168.1.84:19121           11           11     1        0.1924591000    train_model_a61dbe0aTERMINATED192.168.1.84:19193           11           12     1        0.239823 826.08 train_model_dbf37334TERMINATED192.168.1.84:19259            7           17     1        0.204537 846.08 train_model_bae0e248TERMINATED192.168.1.84:19325            7           16     1        0.184754 850.98 train_model_b6d4bc96TERMINATED192.168.1.84:19391           14           15     1        0.170364 992.68 train_model_0be6d479TERMINATED192.168.1.84:19457           14           50     1        0.168588 951.68 train_model_8ba14f88TERMINATED192.168.1.84:19523           16           13     1        0.1873831007.38 train_model_4a7aa781TERMINATED192.168.1.84:19590           25           23     1        0.1986821049.28 train_model_9d13b950TERMINATED192.168.1.84:19656           10           47     1        0.191259 912.48 train_model_05946552TERMINATED192.168.1.84:19722           10           10     1        0.1837011000    train_model_bdc8be88TERMINATED192.168.1.84:19788           12           10     1        0.1670251139.08 train_model_cd9ef040TERMINATED192.168.1.84:19854           12           11     1        0.1717951153.88 train_model_0832acefTERMINATED192.168.1.84:19921           13           12     1        0.1826171150.28 train_model_bcea84baTERMINATED192.168.1.84:19990           13           12     1        0.1769341150.28 train_model_8478f2b2TERMINATED192.168.1.84:20056           16           14     1        0.2193771018.18 train_model_ffaab6d9TERMINATED192.168.1.84:20125           16           14     1        0.1829411018.18 train_model_641cc62cTERMINATED192.168.1.84:20207            9           11     1        0.202532 901.88 train_model_3bd484eeTERMINATED192.168.1.84:20279           11           18     1        0.207438 992.38 train_model_77212f0fTERMINATED192.168.1.84:20346           12           18     1        0.197155 991.98 train_model_20deba80TERMINATED192.168.1.84:20414           12           11     1        0.1977361153.88 train_model_263b7f9eTERMINATED192.168.1.84:20488           14           10     1        0.2021251183.88 train_model_52395f8eTERMINATED192.168.1.84:20557           14           11     1        0.2024521170.48 train_model_ed3c0fddTERMINATED192.168.1.84:20627           14           13     1        0.1947071059.38 train_model_482e6539TERMINATED192.168.1.84:20693           14           13     1        0.1918171059.38 train_model_99a3604aTERMINATED192.168.1.84:20766           15           16     1        0.188537 944.08 train_model_9962248dTERMINATED192.168.1.84:20832           15           16     1        0.201938 944.08 train_model_39a0dea5TERMINATED192.168.1.84:20904           10           10     1        0.2230731000    train_model_13d09268TERMINATED192.168.1.84:20972           13           35     1        0.2005461001.28 train_model_c9fc7cd6TERMINATED192.168.1.84:21040           13           42     1        0.197765 913.68 train_model_ebaa73f9TERMINATED192.168.1.84:21106           12           11     1        0.2162981153.88 train_model_c89fd048TERMINATED192.168.1.84:21175           11           11     1        0.2050031000    train_model_210abe74TERMINATED192.168.1.84:21258           11           11     1        0.1949781000    train_model_19a22c6eTERMINATED192.168.1.84:21328           14           12     1        0.1929421060.38 train_model_3ecca919TERMINATED192.168.1.84:21394           14           13     1        0.2062011059.38 train_model_8e85dfc0TERMINATED192.168.1.84:21494           15           15     1        0.2196321000    train_model_5601e16aTERMINATED192.168.1.84:21561           12           15     1        0.183326 960.38 train_model_4b260a19TERMINATED192.168.1.84:21631           12           10     1        0.1869711139.08 train_model_258cb360TERMINATED192.168.1.84:21697           16           10     1        0.1971861140.58 train_model_6c38c970TERMINATED192.168.1.84:21764           13           10     1        0.1888381153.78 train_model_fccdeabdTERMINATED192.168.1.84:21830           12           11     1        0.1801421153.88 train_model_3bb0fd66TERMINATED192.168.1.84:21896           12           12     1        0.2181961000    train_model_7789984eTERMINATED192.168.1.84:21962           10           13     1        0.182172 826.18 train_model_9970c744TERMINATED192.168.1.84:22029           10           13     1        0.204211 826.18 train_model_a3055312TERMINATED192.168.1.84:22095            9           11     1        0.200074 901.88 train_model_abab1cb7TERMINATED192.168.1.84:22167           22           14     1        0.2055251158.88 train_model_369f6fabTERMINATED192.168.1.84:22270           13           28     1        0.1903611000.18 train_model_d7d815b3TERMINATED192.168.1.84:22336           18           14     1        0.1943111116.68 train_model_9940ae96TERMINATED192.168.1.84:22403           22           32     1        0.194089 923.28 train_model_b6a41835TERMINATED192.168.1.84:22469           22           12     1        0.1832991168.28 train_model_38cbd8dbTERMINATED192.168.1.84:22535           15           12     1        0.1909191039.58 train_model_9e2cb1efTERMINATED192.168.1.84:22601           22           12     1        0.2091931168.28 train_model_381afd88TERMINATED192.168.1.84:22667           23           11     1        0.20926 1128.28 train_model_b587a096TERMINATED192.168.1.84:22733           23           14     1        0.1838361100.68 train_model_0db4c953TERMINATED192.168.1.84:22801           21           14     1        0.1964571148.58 train_model_a6b16ae2TERMINATED192.168.1.84:22867           21           10     1        0.2037721007.98 train_model_ce670b25TERMINATED192.168.1.84:22935           22           12     1        0.21155 1168.28 train_model_b9da7392TERMINATED192.168.1.84:23002           24           12     1        0.1976471168.98 In\u00a0[3]: Copied! <pre>lt.plotter.heatmap(x=\"ema1_period\", y=\"ema2_period\", z=\"equity\")\n</pre> lt.plotter.heatmap(x=\"ema1_period\", y=\"ema2_period\", z=\"equity\") In\u00a0[4]: Copied! <pre>lt.plotter.contour(x=\"ema1_period\", y=\"ema2_period\", z=\"equity\")\n</pre> lt.plotter.contour(x=\"ema1_period\", y=\"ema2_period\", z=\"equity\") In\u00a0[5]: Copied! <pre>import plotly.io as pio\n\npio.renderers.default = \"notebook\"\npio.templates.default = \"plotly_dark\"\n</pre> import plotly.io as pio  pio.renderers.default = \"notebook\" pio.templates.default = \"plotly_dark\" In\u00a0[6]: Copied! <pre>df = results.get_dataframe()\ndf\n</pre> df = results.get_dataframe() df Out[6]: score timestamp checkpoint_dir_name done training_iteration trial_id date time_this_iter_s time_total_s pid hostname node_ip time_since_restore iterations_since_restore config/ema1_period config/ema2_period logdir 0 1056.08 1718418594 None False 1 567e8489 2024-06-15_09-29-54 0.394129 0.394129 15993 pc 192.168.1.84 0.394129 1 17 14 567e8489 1 920.68 1718418594 None False 1 0b9c709f 2024-06-15_09-29-54 0.219453 0.219453 16129 pc 192.168.1.84 0.219453 1 7 46 0b9c709f 2 1116.68 1718418595 None False 1 15f951e4 2024-06-15_09-29-55 0.187165 0.187165 16203 pc 192.168.1.84 0.187165 1 18 14 15f951e4 3 893.48 1718418596 None False 1 1054961c 2024-06-15_09-29-56 0.197212 0.197212 16275 pc 192.168.1.84 0.197212 1 9 24 1054961c 4 931.48 1718418597 None False 1 aceac61d 2024-06-15_09-29-57 0.205062 0.205062 16341 pc 192.168.1.84 0.205062 1 24 38 aceac61d ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... 95 1100.68 1718418680 None False 1 b587a096 2024-06-15_09-31-20 0.183836 0.183836 22733 pc 192.168.1.84 0.183836 1 23 14 b587a096 96 1148.58 1718418681 None False 1 0db4c953 2024-06-15_09-31-21 0.196457 0.196457 22801 pc 192.168.1.84 0.196457 1 21 14 0db4c953 97 1007.98 1718418682 None False 1 a6b16ae2 2024-06-15_09-31-22 0.203772 0.203772 22867 pc 192.168.1.84 0.203772 1 21 10 a6b16ae2 98 1168.28 1718418683 None False 1 ce670b25 2024-06-15_09-31-23 0.211550 0.211550 22935 pc 192.168.1.84 0.211550 1 22 12 ce670b25 99 1168.98 1718418684 None False 1 b9da7392 2024-06-15_09-31-24 0.197647 0.197647 23002 pc 192.168.1.84 0.197647 1 24 12 b9da7392 <p>100 rows \u00d7 17 columns</p> In\u00a0[7]: Copied! <pre>import pandas as pd\n\ndf.rename(\n    columns={\n        \"config/ema1_period\": \"ema1_period\",\n        \"config/ema2_period\": \"ema2_period\",\n    },\n    inplace=True,\n)\ndf\n</pre> import pandas as pd  df.rename(     columns={         \"config/ema1_period\": \"ema1_period\",         \"config/ema2_period\": \"ema2_period\",     },     inplace=True, ) df Out[7]: score timestamp checkpoint_dir_name done training_iteration trial_id date time_this_iter_s time_total_s pid hostname node_ip time_since_restore iterations_since_restore ema1_period ema2_period logdir 0 1056.08 1718418594 None False 1 567e8489 2024-06-15_09-29-54 0.394129 0.394129 15993 pc 192.168.1.84 0.394129 1 17 14 567e8489 1 920.68 1718418594 None False 1 0b9c709f 2024-06-15_09-29-54 0.219453 0.219453 16129 pc 192.168.1.84 0.219453 1 7 46 0b9c709f 2 1116.68 1718418595 None False 1 15f951e4 2024-06-15_09-29-55 0.187165 0.187165 16203 pc 192.168.1.84 0.187165 1 18 14 15f951e4 3 893.48 1718418596 None False 1 1054961c 2024-06-15_09-29-56 0.197212 0.197212 16275 pc 192.168.1.84 0.197212 1 9 24 1054961c 4 931.48 1718418597 None False 1 aceac61d 2024-06-15_09-29-57 0.205062 0.205062 16341 pc 192.168.1.84 0.205062 1 24 38 aceac61d ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... 95 1100.68 1718418680 None False 1 b587a096 2024-06-15_09-31-20 0.183836 0.183836 22733 pc 192.168.1.84 0.183836 1 23 14 b587a096 96 1148.58 1718418681 None False 1 0db4c953 2024-06-15_09-31-21 0.196457 0.196457 22801 pc 192.168.1.84 0.196457 1 21 14 0db4c953 97 1007.98 1718418682 None False 1 a6b16ae2 2024-06-15_09-31-22 0.203772 0.203772 22867 pc 192.168.1.84 0.203772 1 21 10 a6b16ae2 98 1168.28 1718418683 None False 1 ce670b25 2024-06-15_09-31-23 0.211550 0.211550 22935 pc 192.168.1.84 0.211550 1 22 12 ce670b25 99 1168.98 1718418684 None False 1 b9da7392 2024-06-15_09-31-24 0.197647 0.197647 23002 pc 192.168.1.84 0.197647 1 24 12 b9da7392 <p>100 rows \u00d7 17 columns</p> In\u00a0[8]: Copied! <pre>from plotly import express as px\n\nfig = px.scatter(df, x=df.index, y=\"score\")\nfig.show()\n</pre> from plotly import express as px  fig = px.scatter(df, x=df.index, y=\"score\") fig.show() In\u00a0[9]: Copied! <pre>import plotly.express as px\n\n\nfig = px.density_contour(\n    df,\n    x=\"ema1_period\",\n    y=\"ema2_period\",\n    z=\"score\",\n    histfunc=\"max\",\n)\nfig.update_traces(contours_coloring=\"fill\", contours_showlabels=True)\nfig.show()\n</pre> import plotly.express as px   fig = px.density_contour(     df,     x=\"ema1_period\",     y=\"ema2_period\",     z=\"score\",     histfunc=\"max\", ) fig.update_traces(contours_coloring=\"fill\", contours_showlabels=True) fig.show() In\u00a0[10]: Copied! <pre>import plotly.express as px\n\nfig = px.density_heatmap(\n    df,\n    x=\"ema1_period\",\n    y=\"ema2_period\",\n    z=\"score\",\n    nbinsx=20,\n    nbinsy=40,\n    histfunc=\"max\",\n    color_continuous_scale=\"Viridis\",\n)\nfig.show()\n</pre> import plotly.express as px  fig = px.density_heatmap(     df,     x=\"ema1_period\",     y=\"ema2_period\",     z=\"score\",     nbinsx=20,     nbinsy=40,     histfunc=\"max\",     color_continuous_scale=\"Viridis\", ) fig.show()"},{"location":"optimize/3.ray/#optimize-with-ray","title":"Optimize with RAY\u00b6","text":"<p>Home | Document | Github</p>"},{"location":"optimize/3.ray/#installation","title":"Installation\u00b6","text":"<p>At time of this tutorial, RAY support python &lt;= 3.11, read more at Installation</p>"},{"location":"optimize/3.ray/#sample-strategy","title":"Sample Strategy\u00b6","text":""},{"location":"optimize/3.ray/#optimize","title":"Optimize\u00b6","text":""},{"location":"optimize/3.ray/#plot","title":"Plot\u00b6","text":""},{"location":"optimize/3.ray/#plot-plotly","title":"Plot plotly\u00b6","text":"<p>Tutorial</p>"},{"location":"optimize/3.ray/#init-plotly-environment","title":"Init Plotly environment\u00b6","text":""},{"location":"optimize/3.ray/#type-1","title":"Type 1\u00b6","text":""},{"location":"optimize/3.ray/#type-2","title":"Type 2\u00b6","text":""},{"location":"optimize/3.ray/#type-3","title":"Type 3\u00b6","text":""},{"location":"optimize/7.bayesopt/","title":"Optimize with BayesOpt","text":"In\u00a0[\u00a0]: Copied! <pre>!pip install bayesian-optimization\n</pre> !pip install bayesian-optimization In\u00a0[1]: Copied! <pre># import talib.abstract as ta\n\nfrom lettrade import DataFeed, Strategy, indicator as i\nfrom lettrade.exchange.backtest import ForexBackTestAccount, let_backtest\nfrom lettrade.indicator.vendor.qtpylib import inject_indicators\n\ninject_indicators()\n\n\nclass SmaCross(Strategy):\n    ema1_period = 9\n    ema2_period = 21\n\n    def indicators(self, df: DataFeed):\n        # df[\"ema1\"] = ta.EMA(df, timeperiod=self.ema1_period)\n        # df[\"ema2\"] = ta.EMA(df, timeperiod=self.ema2_period)\n        df[\"ema1\"] = df.close.ema(window=self.ema1_period)\n        df[\"ema2\"] = df.close.ema(window=self.ema2_period)\n\n        df[\"signal_ema_crossover\"] = i.crossover(df.ema1, df.ema2)\n        df[\"signal_ema_crossunder\"] = i.crossunder(df.ema1, df.ema2)\n\n    def next(self, df: DataFeed):\n        if len(self.orders) &gt; 0 or len(self.positions) &gt; 0:\n            return\n\n        if df.l.signal_ema_crossover[-1]:\n            price = df.l.close[-1]\n            self.buy(size=0.1, sl=price - 0.001, tp=price + 0.001)\n        elif df.l.signal_ema_crossunder[-1]:\n            price = df.l.close[-1]\n            self.sell(size=0.1, sl=price + 0.001, tp=price - 0.001)\n\n\nlt = let_backtest(\n    strategy=SmaCross,\n    datas=\"example/data/data/EURUSD_5m_0_10000.csv\",\n    account=ForexBackTestAccount,\n    # plotter=None,\n)\n</pre> # import talib.abstract as ta  from lettrade import DataFeed, Strategy, indicator as i from lettrade.exchange.backtest import ForexBackTestAccount, let_backtest from lettrade.indicator.vendor.qtpylib import inject_indicators  inject_indicators()   class SmaCross(Strategy):     ema1_period = 9     ema2_period = 21      def indicators(self, df: DataFeed):         # df[\"ema1\"] = ta.EMA(df, timeperiod=self.ema1_period)         # df[\"ema2\"] = ta.EMA(df, timeperiod=self.ema2_period)         df[\"ema1\"] = df.close.ema(window=self.ema1_period)         df[\"ema2\"] = df.close.ema(window=self.ema2_period)          df[\"signal_ema_crossover\"] = i.crossover(df.ema1, df.ema2)         df[\"signal_ema_crossunder\"] = i.crossunder(df.ema1, df.ema2)      def next(self, df: DataFeed):         if len(self.orders) &gt; 0 or len(self.positions) &gt; 0:             return          if df.l.signal_ema_crossover[-1]:             price = df.l.close[-1]             self.buy(size=0.1, sl=price - 0.001, tp=price + 0.001)         elif df.l.signal_ema_crossunder[-1]:             price = df.l.close[-1]             self.sell(size=0.1, sl=price + 0.001, tp=price - 0.001)   lt = let_backtest(     strategy=SmaCross,     datas=\"example/data/data/EURUSD_5m_0_10000.csv\",     account=ForexBackTestAccount,     # plotter=None, ) In\u00a0[3]: Copied! <pre>from bayes_opt import BayesianOptimization\n\nlettrade_model = lt.optimize_model()\n\n\ndef train_model(**params):\n    params = {\n        \"ema1_period\": int(params[\"ema1_period\"]),\n        \"ema2_period\": int(params[\"ema2_period\"]),\n    }\n    # Model\n    result = lettrade_model(params)\n\n    # Score\n    return result[\"equity\"]\n\n\npbounds = {\"ema1_period\": (5, 25), \"ema2_period\": (10, 50)}\n\noptimizer = BayesianOptimization(\n    f=train_model,\n    pbounds=pbounds,\n    random_state=1,\n)\n\noptimizer.maximize(\n    init_points=2,\n    n_iter=200,\n)\n</pre> from bayes_opt import BayesianOptimization  lettrade_model = lt.optimize_model()   def train_model(**params):     params = {         \"ema1_period\": int(params[\"ema1_period\"]),         \"ema2_period\": int(params[\"ema2_period\"]),     }     # Model     result = lettrade_model(params)      # Score     return result[\"equity\"]   pbounds = {\"ema1_period\": (5, 25), \"ema2_period\": (10, 50)}  optimizer = BayesianOptimization(     f=train_model,     pbounds=pbounds,     random_state=1, )  optimizer.maximize(     init_points=2,     n_iter=200, ) <pre>|   iter    |  target   | ema1_p... | ema2_p... |\n-------------------------------------------------\n| 1         | 922.0     | 13.34     | 38.81     |\n| 2         | 875.4     | 5.002     | 22.09     |\n| 3         | 921.0     | 13.3      | 39.0      |\n| 4         | 971.3     | 18.52     | 33.86     |\n| 5         | 864.5     | 25.0      | 30.34     |\n| 6         | 1.031e+03 | 15.36     | 31.85     |\n| 7         | 1.05e+03  | 14.5      | 28.01     |\n| 8         | 909.8     | 17.22     | 21.41     |\n| 9         | 919.6     | 10.73     | 30.04     |\n| 10        | 1.011e+03 | 17.12     | 28.92     |\n| 11        | 989.6     | 13.57     | 25.4      |\n| 12        | 1.01e+03  | 25.0      | 50.0      |\n| 13        | 1e+03     | 20.13     | 50.0      |\n| 14        | 1.008e+03 | 23.5      | 45.25     |\n| 15        | 971.5     | 13.03     | 49.99     |\n| 16        | 1.118e+03 | 24.91     | 10.16     |\n| 17        | 1.008e+03 | 21.38     | 10.4      |\n| 18        | 1.169e+03 | 24.99     | 12.98     |\n| 19        | 990.6     | 25.0      | 16.16     |\n| 20        | 1.158e+03 | 23.87     | 12.29     |\n| 21        | 1.148e+03 | 24.79     | 11.96     |\n| 22        | 1.159e+03 | 22.27     | 14.03     |\n| 23        | 1.117e+03 | 18.79     | 14.72     |\n| 24        | 1.059e+03 | 14.08     | 13.05     |\n| 25        | 923.6     | 8.15      | 10.0      |\n| 26        | 905.5     | 5.0       | 50.0      |\n| 27        | 931.9     | 5.0       | 38.91     |\n| 28        | 1.001e+03 | 25.0      | 39.59     |\n| 29        | 1.139e+03 | 20.65     | 16.19     |\n| 30        | 980.7     | 12.11     | 16.74     |\n| 31        | 1.12e+03  | 15.66     | 10.0      |\n| 32        | 1.059e+03 | 17.29     | 11.85     |\n| 33        | 1.154e+03 | 13.36     | 10.19     |\n| 34        | 958.8     | 18.21     | 44.02     |\n| 35        | 1.169e+03 | 23.68     | 13.74     |\n| 36        | 1.148e+03 | 20.63     | 14.68     |\n| 37        | 1.169e+03 | 23.13     | 13.15     |\n| 38        | 1.129e+03 | 24.16     | 13.11     |\n| 39        | 1.168e+03 | 18.55     | 17.01     |\n| 40        | 1e+03     | 16.67     | 16.31     |\n| 41        | 1.1e+03   | 19.84     | 18.24     |\n| 42        | 1e+03     | 11.9      | 11.48     |\n| 43        | 1.184e+03 | 14.49     | 10.92     |\n| 44        | 1.159e+03 | 25.0      | 22.99     |\n| 45        | 941.1     | 22.97     | 23.43     |\n| 46        | 1.049e+03 | 25.0      | 21.12     |\n| 47        | 1e+03     | 24.94     | 24.76     |\n| 48        | 1.08e+03  | 22.61     | 15.52     |\n| 49        | 1.168e+03 | 19.31     | 16.32     |\n| 50        | 832.2     | 5.0       | 31.88     |\n| 51        | 990.6     | 9.272     | 44.54     |\n| 52        | 940.6     | 5.0       | 15.35     |\n| 53        | 903.3     | 20.28     | 38.8      |\n| 54        | 1.117e+03 | 20.74     | 12.74     |\n| 55        | 851.4     | 5.0       | 44.28     |\n| 56        | 991.8     | 10.69     | 21.4      |\n| 57        | 983.1     | 13.37     | 45.28     |\n| 58        | 1.128e+03 | 23.3      | 11.13     |\n| 59        | 920.4     | 25.0      | 35.58     |\n| 60        | 889.9     | 9.795     | 35.56     |\n| 61        | 951.9     | 8.697     | 25.63     |\n| 62        | 1.184e+03 | 14.27     | 10.07     |\n| 63        | 989.0     | 16.82     | 48.69     |\n| 64        | 966.4     | 9.206     | 49.78     |\n| 65        | 991.4     | 25.0      | 42.71     |\n| 66        | 1.09e+03  | 24.98     | 14.45     |\n| 67        | 805.2     | 8.466     | 17.84     |\n| 68        | 1.02e+03  | 18.29     | 25.92     |\n| 69        | 941.2     | 20.6      | 29.15     |\n| 70        | 901.6     | 5.0       | 10.0      |\n| 71        | 961.5     | 14.86     | 34.82     |\n| 72        | 931.4     | 20.66     | 46.99     |\n| 73        | 1.08e+03  | 15.34     | 11.78     |\n| 74        | 1e+03     | 18.08     | 18.34     |\n| 75        | 1.01e+03  | 22.07     | 18.61     |\n| 76        | 880.2     | 9.328     | 40.89     |\n| 77        | 1.049e+03 | 18.56     | 10.05     |\n| 78        | 882.6     | 5.0       | 26.96     |\n| 79        | 1.164e+03 | 13.78     | 11.11     |\n| 80        | 1.129e+03 | 19.37     | 17.16     |\n| 81        | 1.168e+03 | 18.14     | 16.05     |\n| 82        | 1.016e+03 | 25.0      | 47.21     |\n| 83        | 1.168e+03 | 22.34     | 12.15     |\n| 84        | 974.0     | 16.34     | 41.14     |\n| 85        | 821.7     | 13.49     | 21.54     |\n| 86        | 918.2     | 21.74     | 42.48     |\n| 87        | 1.158e+03 | 21.96     | 13.07     |\n| 88        | 923.7     | 10.85     | 46.89     |\n| 89        | 1.101e+03 | 23.06     | 14.07     |\n| 90        | 1.006e+03 | 19.01     | 12.76     |\n| 91        | 1.149e+03 | 21.56     | 14.85     |\n| 92        | 923.2     | 21.72     | 33.55     |\n| 93        | 1.158e+03 | 21.29     | 13.86     |\n| 94        | 1e+03     | 20.49     | 20.64     |\n| 95        | 1.01e+03  | 13.94     | 30.14     |\n| 96        | 1.009e+03 | 16.0      | 26.27     |\n| 97        | 841.1     | 9.332     | 13.73     |\n| 98        | 985.5     | 17.17     | 37.25     |\n| 99        | 1.01e+03  | 22.63     | 50.0      |\n| 100       | 880.7     | 5.143     | 35.8      |\n| 101       | 913.7     | 13.63     | 42.64     |\n| 102       | 1.168e+03 | 19.58     | 15.44     |\n| 103       | 932.0     | 15.93     | 46.05     |\n| 104       | 840.4     | 11.58     | 26.91     |\n| 105       | 1.01e+03  | 12.79     | 32.74     |\n| 106       | 1.158e+03 | 23.05     | 12.15     |\n| 107       | 961.2     | 17.78     | 31.3      |\n| 108       | 1.023e+03 | 8.636     | 22.57     |\n| 109       | 941.2     | 20.78     | 26.03     |\n| 110       | 1.166e+03 | 18.79     | 15.91     |\n| 111       | 1.007e+03 | 16.62     | 13.95     |\n| 112       | 1.184e+03 | 14.1      | 10.57     |\n| 113       | 940.8     | 7.458     | 47.12     |\n| 114       | 1.184e+03 | 14.89     | 10.32     |\n| 115       | 999.5     | 18.99     | 23.66     |\n| 116       | 949.5     | 24.97     | 18.99     |\n| 117       | 1.049e+03 | 24.5      | 22.33     |\n| 118       | 1.116e+03 | 23.73     | 10.0      |\n| 119       | 1.168e+03 | 18.5      | 16.46     |\n| 120       | 911.5     | 8.835     | 32.3      |\n| 121       | 880.0     | 5.046     | 18.56     |\n| 122       | 1.148e+03 | 24.21     | 11.24     |\n| 123       | 962.2     | 15.41     | 50.0      |\n| 124       | 1.097e+03 | 21.39     | 11.92     |\n| 125       | 1.178e+03 | 11.87     | 10.0      |\n| 126       | 1e+03     | 10.56     | 10.18     |\n| 127       | 1.139e+03 | 12.7      | 10.04     |\n| 128       | 990.6     | 13.53     | 15.0      |\n| 129       | 1.08e+03  | 21.78     | 16.77     |\n| 130       | 947.8     | 23.09     | 37.81     |\n| 131       | 863.8     | 10.61     | 23.71     |\n| 132       | 959.9     | 16.52     | 24.21     |\n| 133       | 1.148e+03 | 20.36     | 15.5      |\n| 134       | 1.011e+03 | 5.0       | 12.84     |\n| 135       | 1.184e+03 | 14.74     | 10.0      |\n| 136       | 1.184e+03 | 14.52     | 10.43     |\n| 137       | 960.3     | 7.708     | 28.99     |\n| 138       | 1.166e+03 | 17.95     | 16.78     |\n| 139       | 940.7     | 18.11     | 50.0      |\n| 140       | 1.017e+03 | 25.0      | 45.27     |\n| 141       | 1.168e+03 | 22.49     | 12.67     |\n| 142       | 961.8     | 19.81     | 35.99     |\n| 143       | 879.5     | 8.582     | 20.84     |\n| 144       | 1.033e+03 | 7.081     | 24.03     |\n| 145       | 996.9     | 23.18     | 47.91     |\n| 146       | 1.127e+03 | 20.13     | 13.88     |\n| 147       | 1.17e+03  | 14.2      | 11.49     |\n| 148       | 923.5     | 18.7      | 41.33     |\n| 149       | 1.049e+03 | 25.0      | 23.51     |\n| 150       | 981.4     | 24.98     | 27.02     |\n| 151       | 973.7     | 13.96     | 18.19     |\n| 152       | 1.08e+03  | 20.63     | 17.45     |\n| 153       | 970.6     | 15.55     | 29.6      |\n| 154       | 961.4     | 14.02     | 47.71     |\n| 155       | 1.049e+03 | 24.98     | 22.57     |\n| 156       | 959.1     | 23.3      | 20.83     |\n| 157       | 881.3     | 7.992     | 38.11     |\n| 158       | 1.08e+03  | 17.09     | 10.3      |\n| 159       | 922.5     | 5.0       | 41.39     |\n| 160       | 970.8     | 12.59     | 35.8      |\n| 161       | 960.8     | 18.53     | 27.76     |\n| 162       | 941.3     | 11.17     | 43.54     |\n| 163       | 1.119e+03 | 17.77     | 15.05     |\n| 164       | 940.8     | 22.92     | 27.71     |\n| 165       | 1.012e+03 | 11.51     | 19.26     |\n| 166       | 884.8     | 24.8      | 33.0      |\n| 167       | 971.5     | 15.79     | 38.79     |\n| 168       | 911.3     | 5.035     | 47.45     |\n| 169       | 937.9     | 23.42     | 40.72     |\n| 170       | 961.7     | 16.58     | 33.52     |\n| 171       | 1.148e+03 | 24.98     | 11.13     |\n| 172       | 1.129e+03 | 24.97     | 13.62     |\n| 173       | 941.5     | 20.15     | 31.63     |\n| 174       | 928.6     | 18.3      | 46.82     |\n| 175       | 1.169e+03 | 21.41     | 15.7      |\n| 176       | 891.0     | 7.671     | 42.85     |\n| 177       | 900.6     | 6.871     | 12.27     |\n| 178       | 1.15e+03  | 13.45     | 12.11     |\n| 179       | 849.7     | 12.57     | 13.27     |\n| 180       | 852.6     | 5.0       | 24.54     |\n| 181       | 949.0     | 21.04     | 44.71     |\n| 182       | 1.09e+03  | 24.07     | 14.53     |\n| 183       | 1.141e+03 | 16.05     | 10.99     |\n| 184       | 950.0     | 10.93     | 38.37     |\n| 185       | 1.12e+03  | 15.24     | 10.87     |\n| 186       | 952.7     | 11.13     | 50.0      |\n| 187       | 1.05e+03  | 20.6      | 22.67     |\n| 188       | 913.5     | 16.03     | 43.42     |\n| 189       | 987.5     | 19.71     | 11.13     |\n| 190       | 1.166e+03 | 19.73     | 14.75     |\n| 191       | 969.9     | 11.15     | 33.38     |\n| 192       | 1.097e+03 | 22.32     | 11.42     |\n| 193       | 1.06e+03  | 14.14     | 12.22     |\n| 194       | 1.007e+03 | 15.01     | 14.48     |\n| 195       | 974.5     | 7.309     | 49.96     |\n| 196       | 1.164e+03 | 13.04     | 11.62     |\n| 197       | 813.7     | 15.88     | 18.95     |\n| 198       | 1e+03     | 19.4      | 19.51     |\n| 199       | 1.139e+03 | 12.18     | 10.46     |\n| 200       | 971.1     | 15.01     | 36.88     |\n| 201       | 1.128e+03 | 24.51     | 23.1      |\n| 202       | 990.2     | 16.04     | 27.8      |\n=================================================\n</pre> In\u00a0[4]: Copied! <pre>optimizer.max\n</pre> optimizer.max Out[4]: <pre>{'target': 1183.88,\n 'params': {'ema1_period': 14.491292925643293,\n  'ema2_period': 10.915994213005602}}</pre> In\u00a0[5]: Copied! <pre>lt.plotter.heatmap(x=\"ema1_period\", y=\"ema2_period\", z=\"equity\")\n</pre> lt.plotter.heatmap(x=\"ema1_period\", y=\"ema2_period\", z=\"equity\") In\u00a0[6]: Copied! <pre>lt.plotter.contour(x=\"ema1_period\", y=\"ema2_period\", z=\"equity\")\n</pre> lt.plotter.contour(x=\"ema1_period\", y=\"ema2_period\", z=\"equity\") In\u00a0[7]: Copied! <pre>import plotly.io as pio\n\npio.renderers.default = \"notebook\"\npio.templates.default = \"plotly_dark\"\n</pre> import plotly.io as pio  pio.renderers.default = \"notebook\" pio.templates.default = \"plotly_dark\" In\u00a0[8]: Copied! <pre>optimizer.res\n</pre> optimizer.res Out[8]: <pre>[{'target': 921.98,\n  'params': {'ema1_period': 13.34044009405148,\n   'ema2_period': 38.81297973768632}},\n {'target': 875.38,\n  'params': {'ema1_period': 5.002287496346898,\n   'ema2_period': 22.09330290527359}},\n {'target': 920.98,\n  'params': {'ema1_period': 13.3001407276959,\n   'ema2_period': 39.00039537269421}},\n {'target': 971.28,\n  'params': {'ema1_period': 18.52065437272396,\n   'ema2_period': 33.863457550993026}},\n {'target': 864.48,\n  'params': {'ema1_period': 25.0, 'ema2_period': 30.33928758479602}},\n {'target': 1031.18,\n  'params': {'ema1_period': 15.357337759328532,\n   'ema2_period': 31.848048898351127}},\n {'target': 1049.68,\n  'params': {'ema1_period': 14.50054591701167,\n   'ema2_period': 28.014062012896545}},\n {'target': 909.78,\n  'params': {'ema1_period': 17.22182187422121,\n   'ema2_period': 21.409928335006267}},\n {'target': 919.58,\n  'params': {'ema1_period': 10.73144001218241,\n   'ema2_period': 30.04066974540485}},\n {'target': 1010.88,\n  'params': {'ema1_period': 17.115149925746156,\n   'ema2_period': 28.917781696081047}},\n {'target': 989.58,\n  'params': {'ema1_period': 13.570348096696343,\n   'ema2_period': 25.404096691580644}},\n {'target': 1010.28, 'params': {'ema1_period': 25.0, 'ema2_period': 50.0}},\n {'target': 1000.18,\n  'params': {'ema1_period': 20.13399772503066, 'ema2_period': 50.0}},\n {'target': 1008.28,\n  'params': {'ema1_period': 23.495361736035818,\n   'ema2_period': 45.25289027522756}},\n {'target': 971.48,\n  'params': {'ema1_period': 13.029692423735854,\n   'ema2_period': 49.99334297246561}},\n {'target': 1118.38,\n  'params': {'ema1_period': 24.906030330322487,\n   'ema2_period': 10.157182041157764}},\n {'target': 1007.98,\n  'params': {'ema1_period': 21.37923376276011,\n   'ema2_period': 10.395845348298236}},\n {'target': 1168.98,\n  'params': {'ema1_period': 24.99158812480974,\n   'ema2_period': 12.98307192822218}},\n {'target': 990.58,\n  'params': {'ema1_period': 25.0, 'ema2_period': 16.160763482984994}},\n {'target': 1158.38,\n  'params': {'ema1_period': 23.86634900198165,\n   'ema2_period': 12.294075748068922}},\n {'target': 1148.18,\n  'params': {'ema1_period': 24.790930666853647,\n   'ema2_period': 11.963961085904518}},\n {'target': 1158.88,\n  'params': {'ema1_period': 22.265459234415193,\n   'ema2_period': 14.030698582520076}},\n {'target': 1116.68,\n  'params': {'ema1_period': 18.787132211610984,\n   'ema2_period': 14.716136499573038}},\n {'target': 1059.38,\n  'params': {'ema1_period': 14.075693848032216,\n   'ema2_period': 13.051766130408804}},\n {'target': 923.58,\n  'params': {'ema1_period': 8.149890181902189, 'ema2_period': 10.0}},\n {'target': 905.48, 'params': {'ema1_period': 5.0, 'ema2_period': 50.0}},\n {'target': 931.88,\n  'params': {'ema1_period': 5.0, 'ema2_period': 38.90563746761259}},\n {'target': 1001.38,\n  'params': {'ema1_period': 25.0, 'ema2_period': 39.5881538636381}},\n {'target': 1139.08,\n  'params': {'ema1_period': 20.651108713610626,\n   'ema2_period': 16.189379061835858}},\n {'target': 980.68,\n  'params': {'ema1_period': 12.111792096067155,\n   'ema2_period': 16.738731828066545}},\n {'target': 1120.48,\n  'params': {'ema1_period': 15.659039064119396, 'ema2_period': 10.0}},\n {'target': 1059.08,\n  'params': {'ema1_period': 17.294894350267416,\n   'ema2_period': 11.854171255613114}},\n {'target': 1153.78,\n  'params': {'ema1_period': 13.358213084249549,\n   'ema2_period': 10.194642176893609}},\n {'target': 958.78,\n  'params': {'ema1_period': 18.205943303763114,\n   'ema2_period': 44.0207020913403}},\n {'target': 1168.98,\n  'params': {'ema1_period': 23.680446326785688,\n   'ema2_period': 13.735838545453007}},\n {'target': 1148.28,\n  'params': {'ema1_period': 20.62613055844256,\n   'ema2_period': 14.675593400394167}},\n {'target': 1168.98,\n  'params': {'ema1_period': 23.125098159210452,\n   'ema2_period': 13.152688839392106}},\n {'target': 1129.28,\n  'params': {'ema1_period': 24.15750803502253,\n   'ema2_period': 13.106871154420155}},\n {'target': 1167.88,\n  'params': {'ema1_period': 18.55024818513378,\n   'ema2_period': 17.011813859705974}},\n {'target': 1000.0,\n  'params': {'ema1_period': 16.666731907272982,\n   'ema2_period': 16.309972709233975}},\n {'target': 1099.88,\n  'params': {'ema1_period': 19.84295688106342,\n   'ema2_period': 18.236897349447002}},\n {'target': 1000.0,\n  'params': {'ema1_period': 11.900884939383173,\n   'ema2_period': 11.476046863358087}},\n {'target': 1183.88,\n  'params': {'ema1_period': 14.491292925643293,\n   'ema2_period': 10.915994213005602}},\n {'target': 1158.78,\n  'params': {'ema1_period': 25.0, 'ema2_period': 22.986776489537558}},\n {'target': 941.08,\n  'params': {'ema1_period': 22.970213360673686,\n   'ema2_period': 23.43067442492127}},\n {'target': 1049.48,\n  'params': {'ema1_period': 25.0, 'ema2_period': 21.120811610972957}},\n {'target': 1000.0,\n  'params': {'ema1_period': 24.939170556250275,\n   'ema2_period': 24.758736450266717}},\n {'target': 1080.28,\n  'params': {'ema1_period': 22.613003726990616,\n   'ema2_period': 15.523232440237472}},\n {'target': 1168.38,\n  'params': {'ema1_period': 19.312482131471945,\n   'ema2_period': 16.32229609405573}},\n {'target': 832.18,\n  'params': {'ema1_period': 5.0, 'ema2_period': 31.88471517572175}},\n {'target': 990.58,\n  'params': {'ema1_period': 9.272240873628983,\n   'ema2_period': 44.5393963067013}},\n {'target': 940.58,\n  'params': {'ema1_period': 5.0, 'ema2_period': 15.34896487959813}},\n {'target': 903.28,\n  'params': {'ema1_period': 20.276612482728982,\n   'ema2_period': 38.802859770958676}},\n {'target': 1116.58,\n  'params': {'ema1_period': 20.738429168660833,\n   'ema2_period': 12.743828231186654}},\n {'target': 851.38,\n  'params': {'ema1_period': 5.0, 'ema2_period': 44.276967827437716}},\n {'target': 991.78,\n  'params': {'ema1_period': 10.690654560087063,\n   'ema2_period': 21.404388749369588}},\n {'target': 983.08,\n  'params': {'ema1_period': 13.368519031692625,\n   'ema2_period': 45.275890440218625}},\n {'target': 1128.28,\n  'params': {'ema1_period': 23.296772689935423,\n   'ema2_period': 11.13050045962189}},\n {'target': 920.38,\n  'params': {'ema1_period': 25.0, 'ema2_period': 35.58095956641047}},\n {'target': 889.88,\n  'params': {'ema1_period': 9.794725854384458,\n   'ema2_period': 35.55888935465831}},\n {'target': 951.88,\n  'params': {'ema1_period': 8.697028538956616,\n   'ema2_period': 25.627089941494667}},\n {'target': 1183.88,\n  'params': {'ema1_period': 14.27298082987814,\n   'ema2_period': 10.071930578041508}},\n {'target': 988.98,\n  'params': {'ema1_period': 16.820702126430202,\n   'ema2_period': 48.6940519873581}},\n {'target': 966.38,\n  'params': {'ema1_period': 9.206078675429975,\n   'ema2_period': 49.78446663997862}},\n {'target': 991.38,\n  'params': {'ema1_period': 25.0, 'ema2_period': 42.70969192180956}},\n {'target': 1090.28,\n  'params': {'ema1_period': 24.98343902319946,\n   'ema2_period': 14.445692015199473}},\n {'target': 805.18,\n  'params': {'ema1_period': 8.465575456828407,\n   'ema2_period': 17.83907197048665}},\n {'target': 1020.38,\n  'params': {'ema1_period': 18.28572833853306,\n   'ema2_period': 25.91540798373051}},\n {'target': 941.18,\n  'params': {'ema1_period': 20.59592668849432,\n   'ema2_period': 29.152119970740372}},\n {'target': 901.58, 'params': {'ema1_period': 5.0, 'ema2_period': 10.0}},\n {'target': 961.48,\n  'params': {'ema1_period': 14.856341812857364,\n   'ema2_period': 34.81561054038492}},\n {'target': 931.38,\n  'params': {'ema1_period': 20.659653888798854,\n   'ema2_period': 46.9855277271525}},\n {'target': 1080.48,\n  'params': {'ema1_period': 15.341335454006565,\n   'ema2_period': 11.781981561761237}},\n {'target': 1000.0,\n  'params': {'ema1_period': 18.077082576210326,\n   'ema2_period': 18.33988948568267}},\n {'target': 1010.18,\n  'params': {'ema1_period': 22.07265091346131,\n   'ema2_period': 18.609541618500053}},\n {'target': 880.18,\n  'params': {'ema1_period': 9.327668638894496,\n   'ema2_period': 40.892176646963904}},\n {'target': 1049.28,\n  'params': {'ema1_period': 18.5640244586111,\n   'ema2_period': 10.053659091807896}},\n {'target': 882.58,\n  'params': {'ema1_period': 5.0, 'ema2_period': 26.95944923164176}},\n {'target': 1163.58,\n  'params': {'ema1_period': 13.779746700052113,\n   'ema2_period': 11.108478766994596}},\n {'target': 1129.38,\n  'params': {'ema1_period': 19.366662459104866,\n   'ema2_period': 17.15760802939098}},\n {'target': 1168.18,\n  'params': {'ema1_period': 18.141950282456357,\n   'ema2_period': 16.051442329052637}},\n {'target': 1015.88,\n  'params': {'ema1_period': 25.0, 'ema2_period': 47.205351989665026}},\n {'target': 1168.28,\n  'params': {'ema1_period': 22.33630108241034,\n   'ema2_period': 12.1509516793809}},\n {'target': 973.98,\n  'params': {'ema1_period': 16.337543318886247,\n   'ema2_period': 41.13613021117229}},\n {'target': 821.68,\n  'params': {'ema1_period': 13.488166159661178,\n   'ema2_period': 21.536572495154157}},\n {'target': 918.18,\n  'params': {'ema1_period': 21.7369805141657,\n   'ema2_period': 42.47618105130706}},\n {'target': 1158.28,\n  'params': {'ema1_period': 21.9637823599262,\n   'ema2_period': 13.065836896481148}},\n {'target': 923.68,\n  'params': {'ema1_period': 10.854437512173494,\n   'ema2_period': 46.892927403890354}},\n {'target': 1100.68,\n  'params': {'ema1_period': 23.057012354070434,\n   'ema2_period': 14.073291499922789}},\n {'target': 1006.38,\n  'params': {'ema1_period': 19.006923921610003,\n   'ema2_period': 12.76269782337687}},\n {'target': 1148.58,\n  'params': {'ema1_period': 21.56482060049935,\n   'ema2_period': 14.8467780066263}},\n {'target': 923.18,\n  'params': {'ema1_period': 21.718941415777536,\n   'ema2_period': 33.54896502833806}},\n {'target': 1158.28,\n  'params': {'ema1_period': 21.289861701159634,\n   'ema2_period': 13.862726058792687}},\n {'target': 1000.0,\n  'params': {'ema1_period': 20.48510748382018,\n   'ema2_period': 20.640945825948357}},\n {'target': 1009.68,\n  'params': {'ema1_period': 13.936427380371146,\n   'ema2_period': 30.140490342646068}},\n {'target': 1009.08,\n  'params': {'ema1_period': 16.00206694681906,\n   'ema2_period': 26.266958206870296}},\n {'target': 841.08,\n  'params': {'ema1_period': 9.331635608795109,\n   'ema2_period': 13.726008184167034}},\n {'target': 985.48,\n  'params': {'ema1_period': 17.172182918252197,\n   'ema2_period': 37.249656668023086}},\n {'target': 1010.28,\n  'params': {'ema1_period': 22.63126543309579, 'ema2_period': 50.0}},\n {'target': 880.68,\n  'params': {'ema1_period': 5.142508234294967,\n   'ema2_period': 35.795516922231}},\n {'target': 913.68,\n  'params': {'ema1_period': 13.632341450872602,\n   'ema2_period': 42.63769158021708}},\n {'target': 1168.28,\n  'params': {'ema1_period': 19.584294442327476,\n   'ema2_period': 15.444791845246}},\n {'target': 931.98,\n  'params': {'ema1_period': 15.928785931082647,\n   'ema2_period': 46.05208119901655}},\n {'target': 840.38,\n  'params': {'ema1_period': 11.582325005508874,\n   'ema2_period': 26.912621319171105}},\n {'target': 1009.68,\n  'params': {'ema1_period': 12.793390235089392,\n   'ema2_period': 32.74133683328118}},\n {'target': 1158.38,\n  'params': {'ema1_period': 23.047933535470055,\n   'ema2_period': 12.150724459158972}},\n {'target': 961.18,\n  'params': {'ema1_period': 17.778300558960947,\n   'ema2_period': 31.297158759923438}},\n {'target': 1023.18,\n  'params': {'ema1_period': 8.635771418318257,\n   'ema2_period': 22.567712574377}},\n {'target': 941.18,\n  'params': {'ema1_period': 20.784284037917093,\n   'ema2_period': 26.030595536998288}},\n {'target': 1166.28,\n  'params': {'ema1_period': 18.794000816623786,\n   'ema2_period': 15.910464691478818}},\n {'target': 1007.38,\n  'params': {'ema1_period': 16.618130761689574,\n   'ema2_period': 13.954332553326969}},\n {'target': 1183.88,\n  'params': {'ema1_period': 14.095958885138787,\n   'ema2_period': 10.566009341781415}},\n {'target': 940.78,\n  'params': {'ema1_period': 7.457500499869645,\n   'ema2_period': 47.11754540315395}},\n {'target': 1183.88,\n  'params': {'ema1_period': 14.888567396985707,\n   'ema2_period': 10.316376491239119}},\n {'target': 999.48,\n  'params': {'ema1_period': 18.98835128471946,\n   'ema2_period': 23.662395858781387}},\n {'target': 949.48,\n  'params': {'ema1_period': 24.971109348412657,\n   'ema2_period': 18.98760036604802}},\n {'target': 1048.78,\n  'params': {'ema1_period': 24.497526989814848,\n   'ema2_period': 22.333652519220212}},\n {'target': 1116.18,\n  'params': {'ema1_period': 23.73256370723252, 'ema2_period': 10.0}},\n {'target': 1168.18,\n  'params': {'ema1_period': 18.50478834011814,\n   'ema2_period': 16.46397043290822}},\n {'target': 911.48,\n  'params': {'ema1_period': 8.835371518774815,\n   'ema2_period': 32.30291546362748}},\n {'target': 879.98,\n  'params': {'ema1_period': 5.0459487202167335,\n   'ema2_period': 18.56001336792902}},\n {'target': 1148.18,\n  'params': {'ema1_period': 24.21178223892833,\n   'ema2_period': 11.244789923844554}},\n {'target': 962.18,\n  'params': {'ema1_period': 15.410286575620907, 'ema2_period': 50.0}},\n {'target': 1096.68,\n  'params': {'ema1_period': 21.390181027727948,\n   'ema2_period': 11.92155540786963}},\n {'target': 1177.58,\n  'params': {'ema1_period': 11.869915591258794, 'ema2_period': 10.0}},\n {'target': 1000.0,\n  'params': {'ema1_period': 10.556307816364255,\n   'ema2_period': 10.181803416334873}},\n {'target': 1139.08,\n  'params': {'ema1_period': 12.70110494601057,\n   'ema2_period': 10.041751179915543}},\n {'target': 990.58,\n  'params': {'ema1_period': 13.533095676211609,\n   'ema2_period': 15.00458335103823}},\n {'target': 1080.18,\n  'params': {'ema1_period': 21.78285238427478,\n   'ema2_period': 16.765673288377663}},\n {'target': 947.78,\n  'params': {'ema1_period': 23.09329064098076,\n   'ema2_period': 37.80910107711412}},\n {'target': 863.78,\n  'params': {'ema1_period': 10.612258262076857,\n   'ema2_period': 23.71125217656028}},\n {'target': 959.88,\n  'params': {'ema1_period': 16.51684378123409,\n   'ema2_period': 24.209438295633422}},\n {'target': 1148.38,\n  'params': {'ema1_period': 20.360446903741124,\n   'ema2_period': 15.499116298711595}},\n {'target': 1010.68,\n  'params': {'ema1_period': 5.0, 'ema2_period': 12.844194652925767}},\n {'target': 1183.88,\n  'params': {'ema1_period': 14.741470537934276, 'ema2_period': 10.0}},\n {'target': 1183.88,\n  'params': {'ema1_period': 14.521934917946664,\n   'ema2_period': 10.433183075499748}},\n {'target': 960.28,\n  'params': {'ema1_period': 7.707940930238135,\n   'ema2_period': 28.987389623243452}},\n {'target': 1166.28,\n  'params': {'ema1_period': 17.954898075058626,\n   'ema2_period': 16.777581161834227}},\n {'target': 940.68,\n  'params': {'ema1_period': 18.108759882883813, 'ema2_period': 50.0}},\n {'target': 1016.88,\n  'params': {'ema1_period': 24.995807903356926,\n   'ema2_period': 45.27022570656085}},\n {'target': 1168.28,\n  'params': {'ema1_period': 22.48599997993239,\n   'ema2_period': 12.666054955008148}},\n {'target': 961.78,\n  'params': {'ema1_period': 19.810223957364684,\n   'ema2_period': 35.986763861293554}},\n {'target': 879.48,\n  'params': {'ema1_period': 8.58158165054128,\n   'ema2_period': 20.8404704658319}},\n {'target': 1033.28,\n  'params': {'ema1_period': 7.081364568924475,\n   'ema2_period': 24.033222271818524}},\n {'target': 996.88,\n  'params': {'ema1_period': 23.181479709260866,\n   'ema2_period': 47.91322054242905}},\n {'target': 1126.68,\n  'params': {'ema1_period': 20.126724633772042,\n   'ema2_period': 13.884560506154262}},\n {'target': 1170.48,\n  'params': {'ema1_period': 14.201390971553254,\n   'ema2_period': 11.485030342380202}},\n {'target': 923.48,\n  'params': {'ema1_period': 18.697284612918192,\n   'ema2_period': 41.33003729581113}},\n {'target': 1049.28,\n  'params': {'ema1_period': 25.0, 'ema2_period': 23.51459613194142}},\n {'target': 981.38,\n  'params': {'ema1_period': 24.983844076917126,\n   'ema2_period': 27.02267723731231}},\n {'target': 973.68,\n  'params': {'ema1_period': 13.964468683441117,\n   'ema2_period': 18.19329855403838}},\n {'target': 1080.08,\n  'params': {'ema1_period': 20.631826022379315,\n   'ema2_period': 17.453539083824424}},\n {'target': 970.58,\n  'params': {'ema1_period': 15.549722003124293,\n   'ema2_period': 29.602369703146575}},\n {'target': 961.38,\n  'params': {'ema1_period': 14.021460240129553,\n   'ema2_period': 47.70673886808691}},\n {'target': 1048.78,\n  'params': {'ema1_period': 24.977641943727175,\n   'ema2_period': 22.5679194673917}},\n {'target': 959.08,\n  'params': {'ema1_period': 23.30005193476663,\n   'ema2_period': 20.831122632655585}},\n {'target': 881.28,\n  'params': {'ema1_period': 7.9924398456315355,\n   'ema2_period': 38.106256484478465}},\n {'target': 1080.38,\n  'params': {'ema1_period': 17.08849767634066,\n   'ema2_period': 10.300420612152127}},\n {'target': 922.48,\n  'params': {'ema1_period': 5.0, 'ema2_period': 41.38821206164775}},\n {'target': 970.78,\n  'params': {'ema1_period': 12.594980313696764,\n   'ema2_period': 35.79539803251298}},\n {'target': 960.78,\n  'params': {'ema1_period': 18.52578259660658,\n   'ema2_period': 27.763131747624527}},\n {'target': 941.28,\n  'params': {'ema1_period': 11.169236834394445,\n   'ema2_period': 43.53722828056012}},\n {'target': 1118.58,\n  'params': {'ema1_period': 17.7676151298498,\n   'ema2_period': 15.045610682755894}},\n {'target': 940.78,\n  'params': {'ema1_period': 22.916244659368047,\n   'ema2_period': 27.713663247300477}},\n {'target': 1012.48,\n  'params': {'ema1_period': 11.514894035162913,\n   'ema2_period': 19.25533486006794}},\n {'target': 884.78,\n  'params': {'ema1_period': 24.797039824516364,\n   'ema2_period': 32.99550711728038}},\n {'target': 971.48,\n  'params': {'ema1_period': 15.787031084425767,\n   'ema2_period': 38.78878866008513}},\n {'target': 911.28,\n  'params': {'ema1_period': 5.034567903783698,\n   'ema2_period': 47.44685386552452}},\n {'target': 937.88,\n  'params': {'ema1_period': 23.421709203727367,\n   'ema2_period': 40.7231379428959}},\n {'target': 961.68,\n  'params': {'ema1_period': 16.577777252596135,\n   'ema2_period': 33.518558781275914}},\n {'target': 1148.18,\n  'params': {'ema1_period': 24.9780060324738,\n   'ema2_period': 11.13199810215114}},\n {'target': 1129.28,\n  'params': {'ema1_period': 24.9717596883115,\n   'ema2_period': 13.618048612634816}},\n {'target': 941.48,\n  'params': {'ema1_period': 20.152864093244883,\n   'ema2_period': 31.625879906904622}},\n {'target': 928.58,\n  'params': {'ema1_period': 18.295557713041728,\n   'ema2_period': 46.82376892904847}},\n {'target': 1168.68,\n  'params': {'ema1_period': 21.413811957680675,\n   'ema2_period': 15.70259995201595}},\n {'target': 890.98,\n  'params': {'ema1_period': 7.6711687975527765,\n   'ema2_period': 42.850069122818006}},\n {'target': 900.58,\n  'params': {'ema1_period': 6.870747444125074,\n   'ema2_period': 12.274723529743445}},\n {'target': 1150.28,\n  'params': {'ema1_period': 13.445409774891743,\n   'ema2_period': 12.106809771766308}},\n {'target': 849.68,\n  'params': {'ema1_period': 12.56535553102565,\n   'ema2_period': 13.269968387488962}},\n {'target': 852.58,\n  'params': {'ema1_period': 5.0, 'ema2_period': 24.538432936213617}},\n {'target': 948.98,\n  'params': {'ema1_period': 21.044991487156803,\n   'ema2_period': 44.71046724949366}},\n {'target': 1090.28,\n  'params': {'ema1_period': 24.067855786527993,\n   'ema2_period': 14.5277997743446}},\n {'target': 1140.58,\n  'params': {'ema1_period': 16.054388687470038,\n   'ema2_period': 10.988825690014368}},\n {'target': 949.98,\n  'params': {'ema1_period': 10.932257528973008,\n   'ema2_period': 38.372194576556154}},\n {'target': 1120.48,\n  'params': {'ema1_period': 15.243512674609635,\n   'ema2_period': 10.867858090414622}},\n {'target': 952.68,\n  'params': {'ema1_period': 11.128967860553141, 'ema2_period': 50.0}},\n {'target': 1050.48,\n  'params': {'ema1_period': 20.596292065546145,\n   'ema2_period': 22.67189753618319}},\n {'target': 913.48,\n  'params': {'ema1_period': 16.0256009531971,\n   'ema2_period': 43.422958994508335}},\n {'target': 987.48,\n  'params': {'ema1_period': 19.710801504408934,\n   'ema2_period': 11.126231854305356}},\n {'target': 1166.48,\n  'params': {'ema1_period': 19.731788301467354,\n   'ema2_period': 14.753197199748268}},\n {'target': 969.88,\n  'params': {'ema1_period': 11.15466734923657,\n   'ema2_period': 33.379964144972256}},\n {'target': 1096.78,\n  'params': {'ema1_period': 22.322296626351495,\n   'ema2_period': 11.41829262088201}},\n {'target': 1060.38,\n  'params': {'ema1_period': 14.140943725768357,\n   'ema2_period': 12.218265556787987}},\n {'target': 1007.28,\n  'params': {'ema1_period': 15.011751608101356,\n   'ema2_period': 14.48384836568843}},\n {'target': 974.48,\n  'params': {'ema1_period': 7.309166472100912,\n   'ema2_period': 49.95728089364002}},\n {'target': 1163.58,\n  'params': {'ema1_period': 13.036866406643677,\n   'ema2_period': 11.618876689970365}},\n {'target': 813.68,\n  'params': {'ema1_period': 15.875952021946377,\n   'ema2_period': 18.945529780098042}},\n {'target': 1000.0,\n  'params': {'ema1_period': 19.396318495854057,\n   'ema2_period': 19.509340069043986}},\n {'target': 1139.08,\n  'params': {'ema1_period': 12.183151647729268,\n   'ema2_period': 10.455214390028633}},\n {'target': 971.08,\n  'params': {'ema1_period': 15.014676280285737,\n   'ema2_period': 36.878499830844966}},\n {'target': 1128.28,\n  'params': {'ema1_period': 24.51447729012598,\n   'ema2_period': 23.095740953349818}},\n {'target': 990.18,\n  'params': {'ema1_period': 16.039640016653433,\n   'ema2_period': 27.79675829919071}}]</pre> In\u00a0[9]: Copied! <pre>import pandas as pd\n\ndf = pd.DataFrame(columns=[\"ema1_period\", \"ema2_period\", \"score\"])\nfor i, trial in enumerate(optimizer.res):\n    df.loc[i] = [\n        int(trial[\"params\"][\"ema1_period\"]),\n        int(trial[\"params\"][\"ema2_period\"]),\n        trial[\"target\"],\n    ]\n\ndf\n</pre> import pandas as pd  df = pd.DataFrame(columns=[\"ema1_period\", \"ema2_period\", \"score\"]) for i, trial in enumerate(optimizer.res):     df.loc[i] = [         int(trial[\"params\"][\"ema1_period\"]),         int(trial[\"params\"][\"ema2_period\"]),         trial[\"target\"],     ]  df Out[9]: ema1_period ema2_period score 0 13.0 38.0 921.98 1 5.0 22.0 875.38 2 13.0 39.0 920.98 3 18.0 33.0 971.28 4 25.0 30.0 864.48 ... ... ... ... 197 19.0 19.0 1000.00 198 12.0 10.0 1139.08 199 15.0 36.0 971.08 200 24.0 23.0 1128.28 201 16.0 27.0 990.18 <p>202 rows \u00d7 3 columns</p> In\u00a0[10]: Copied! <pre>from plotly import express as px\n\nfig = px.scatter(df, x=df.index, y=\"score\")\nfig.show()\n</pre> from plotly import express as px  fig = px.scatter(df, x=df.index, y=\"score\") fig.show() In\u00a0[11]: Copied! <pre>import plotly.express as px\n\n\nfig = px.density_contour(\n    df,\n    x=\"ema1_period\",\n    y=\"ema2_period\",\n    z=\"score\",\n    histfunc=\"max\",\n)\nfig.update_traces(contours_coloring=\"fill\", contours_showlabels=True)\nfig.show()\n</pre> import plotly.express as px   fig = px.density_contour(     df,     x=\"ema1_period\",     y=\"ema2_period\",     z=\"score\",     histfunc=\"max\", ) fig.update_traces(contours_coloring=\"fill\", contours_showlabels=True) fig.show() In\u00a0[12]: Copied! <pre>import plotly.express as px\n\nfig = px.density_heatmap(\n    df,\n    x=\"ema1_period\",\n    y=\"ema2_period\",\n    z=\"score\",\n    nbinsx=20,\n    nbinsy=40,\n    histfunc=\"max\",\n    color_continuous_scale=\"Viridis\",\n)\nfig.show()\n</pre> import plotly.express as px  fig = px.density_heatmap(     df,     x=\"ema1_period\",     y=\"ema2_period\",     z=\"score\",     nbinsx=20,     nbinsy=40,     histfunc=\"max\",     color_continuous_scale=\"Viridis\", ) fig.show()"},{"location":"optimize/7.bayesopt/#optimize-with-bayesopt","title":"Optimize with BayesOpt\u00b6","text":"<p>Home | Document</p>"},{"location":"optimize/7.bayesopt/#installation","title":"Installation\u00b6","text":""},{"location":"optimize/7.bayesopt/#sample-strategy","title":"Sample Strategy\u00b6","text":""},{"location":"optimize/7.bayesopt/#optimize","title":"Optimize\u00b6","text":""},{"location":"optimize/7.bayesopt/#plot","title":"Plot\u00b6","text":""},{"location":"optimize/7.bayesopt/#plot-plotly","title":"Plot plotly\u00b6","text":""},{"location":"optimize/7.bayesopt/#init-plotly-environment","title":"Init Plotly environment\u00b6","text":""},{"location":"optimize/7.bayesopt/#type-1","title":"Type 1\u00b6","text":""},{"location":"optimize/7.bayesopt/#type-2","title":"Type 2\u00b6","text":""},{"location":"optimize/7.bayesopt/#type-3","title":"Type 3\u00b6","text":""},{"location":"optimize/8.blackbox/","title":"Optimize with blackbox","text":"In\u00a0[\u00a0]: Copied! <pre>!pip install git+https://github.com/paulknysh/blackbox.git@master\n</pre> !pip install git+https://github.com/paulknysh/blackbox.git@master In\u00a0[1]: Copied! <pre>import talib.abstract as ta\n\nfrom lettrade import DataFeed, Strategy, indicator as i\nfrom lettrade.exchange.backtest import ForexBackTestAccount, let_backtest\n\n\nclass SmaCross(Strategy):\n    ema1_period = 9\n    ema2_period = 21\n\n    def indicators(self, df: DataFeed):\n        df[\"ema1\"] = ta.EMA(df, timeperiod=self.ema1_period)\n        df[\"ema2\"] = ta.EMA(df, timeperiod=self.ema2_period)\n\n        df[\"signal_ema_crossover\"] = i.crossover(df.ema1, df.ema2)\n        df[\"signal_ema_crossunder\"] = i.crossunder(df.ema1, df.ema2)\n\n    def next(self, df: DataFeed):\n        if len(self.orders) &gt; 0 or len(self.positionsons) &gt; 0:\n            return\n\n        if df.l.signal_ema_crossover[-1]:\n            price = self.data.l.close[-1]\n            self.buy(size=0.1, sl=price - 0.001, tp=price + 0.001)\n        elif df.l.signal_ema_crossunder[-1]:\n            price = self.data.l.close[-1]\n            self.sell(size=0.1, sl=price + 0.001, tp=price - 0.001)\n\n\nlt = let_backtest(\n    strategy=SmaCross,\n    datas=\"example/data/data/EURUSD_5m_0_10000.csv\",\n    account=ForexBackTestAccount,\n)\n</pre> import talib.abstract as ta  from lettrade import DataFeed, Strategy, indicator as i from lettrade.exchange.backtest import ForexBackTestAccount, let_backtest   class SmaCross(Strategy):     ema1_period = 9     ema2_period = 21      def indicators(self, df: DataFeed):         df[\"ema1\"] = ta.EMA(df, timeperiod=self.ema1_period)         df[\"ema2\"] = ta.EMA(df, timeperiod=self.ema2_period)          df[\"signal_ema_crossover\"] = i.crossover(df.ema1, df.ema2)         df[\"signal_ema_crossunder\"] = i.crossunder(df.ema1, df.ema2)      def next(self, df: DataFeed):         if len(self.orders) &gt; 0 or len(self.positionsons) &gt; 0:             return          if df.l.signal_ema_crossover[-1]:             price = self.data.l.close[-1]             self.buy(size=0.1, sl=price - 0.001, tp=price + 0.001)         elif df.l.signal_ema_crossunder[-1]:             price = self.data.l.close[-1]             self.sell(size=0.1, sl=price + 0.001, tp=price - 0.001)   lt = let_backtest(     strategy=SmaCross,     datas=\"example/data/data/EURUSD_5m_0_10000.csv\",     account=ForexBackTestAccount, ) In\u00a0[2]: Copied! <pre>import blackbox as bb\n\n\ndef params_parser(args):\n    return {\"ema1_period\": int(args[0]), \"ema2_period\": int(args[1])}\n\n\ndef result_parser(result):\n    return result[\"equity\"]\n\n\nresult = bb.minimize(\n    f=lt.optimize_model(\n        params_parser=params_parser,\n        result_parser=result_parser,\n    ),\n    domain=[[5, 25, 1], [10, 50, 1]],  # ranges of each parameter\n    budget=300,  # total number of function calls available\n    batch=12,  # number of calls that will be evaluated in parallel\n)\n\nlt.optimize_done()\n</pre> import blackbox as bb   def params_parser(args):     return {\"ema1_period\": int(args[0]), \"ema2_period\": int(args[1])}   def result_parser(result):     return result[\"equity\"]   result = bb.minimize(     f=lt.optimize_model(         params_parser=params_parser,         result_parser=result_parser,     ),     domain=[[5, 25, 1], [10, 50, 1]],  # ranges of each parameter     budget=300,  # total number of function calls available     batch=12,  # number of calls that will be evaluated in parallel )  lt.optimize_done() <pre>INFO     evaluating batch 1/25 (samples 1..12/300) 06-13 05:59:26\nINFO     evaluating batch 2/25 (samples 13..24/300) 06-13 05:59:26\nINFO     evaluating batch 3/25 (samples 25..36/300) 06-13 05:59:27\nINFO     evaluating batch 4/25 (samples 37..48/300) 06-13 05:59:27\nINFO     evaluating batch 5/25 (samples 49..60/300) 06-13 05:59:27\nINFO     evaluating batch 6/25 (samples 61..72/300) 06-13 05:59:27\nINFO     evaluating batch 7/25 (samples 73..84/300) 06-13 05:59:27\nINFO     evaluating batch 8/25 (samples 85..96/300) 06-13 05:59:27\nINFO     evaluating batch 9/25 (samples 97..108/300) 06-13 05:59:28\nINFO     evaluating batch 10/25 (samples 109..120/300) 06-13 05:59:28\nINFO     evaluating batch 11/25 (samples 121..132/300) 06-13 05:59:28\nINFO     evaluating batch 12/25 (samples 133..144/300) 06-13 05:59:28\nINFO     evaluating batch 13/25 (samples 145..156/300) 06-13 05:59:28\nINFO     evaluating batch 14/25 (samples 157..168/300) 06-13 05:59:28\nINFO     evaluating batch 15/25 (samples 169..180/300) 06-13 05:59:30\nINFO     evaluating batch 16/25 (samples 181..192/300) 06-13 05:59:32\nINFO     evaluating batch 17/25 (samples 193..204/300) 06-13 05:59:34\nINFO     evaluating batch 18/25 (samples 205..216/300) 06-13 05:59:37\nINFO     evaluating batch 19/25 (samples 217..228/300) 06-13 05:59:39\nINFO     evaluating batch 20/25 (samples 229..240/300) 06-13 05:59:41\nINFO     evaluating batch 21/25 (samples 241..252/300) 06-13 05:59:44\nINFO     evaluating batch 22/25 (samples 253..264/300) 06-13 05:59:47\nINFO     evaluating batch 23/25 (samples 265..276/300) 06-13 05:59:49\nINFO     evaluating batch 24/25 (samples 277..288/300) 06-13 05:59:52\nINFO     evaluating batch 25/25 (samples 289..300/300) 06-13 05:59:55\nINFO     DONE 06-13 05:59:59\n</pre> In\u00a0[3]: Copied! <pre>lt.plotter.heatmap(x=\"ema1_period\", y=\"ema2_period\")\n</pre> lt.plotter.heatmap(x=\"ema1_period\", y=\"ema2_period\") In\u00a0[4]: Copied! <pre>lt.plotter.contour(x=\"ema1_period\", y=\"ema2_period\")\n</pre> lt.plotter.contour(x=\"ema1_period\", y=\"ema2_period\") In\u00a0[5]: Copied! <pre>import plotly.io as pio\n\npio.renderers.default = \"notebook\"\npio.templates.default = \"plotly_dark\"\n</pre> import plotly.io as pio  pio.renderers.default = \"notebook\" pio.templates.default = \"plotly_dark\" In\u00a0[6]: Copied! <pre>import pandas as pd\n\ndf = pd.DataFrame(\n    {\n        \"ema1_period\": [r[0] for r in result[\"all_xs\"]],\n        \"ema2_period\": [r[1] for r in result[\"all_xs\"]],\n        \"equity\": result[\"all_fs\"],\n    }\n)\n\ndf.columns = [\"x\", \"y\", \"z\"]\ndf.x = df.x.astype(int)\ndf.y = df.y.astype(int)\n\ndf\n</pre> import pandas as pd  df = pd.DataFrame(     {         \"ema1_period\": [r[0] for r in result[\"all_xs\"]],         \"ema2_period\": [r[1] for r in result[\"all_xs\"]],         \"equity\": result[\"all_fs\"],     } )  df.columns = [\"x\", \"y\", \"z\"] df.x = df.x.astype(int) df.y = df.y.astype(int)  df Out[6]: x y z 0 10 12 840.88 1 5 35 880.68 2 20 18 1080.18 3 15 41 986.28 4 10 23 863.78 ... ... ... ... 295 8 45 940.58 296 18 47 918.98 297 8 45 940.58 298 19 11 987.48 299 16 32 932.08 <p>300 rows \u00d7 3 columns</p> In\u00a0[7]: Copied! <pre>import plotly.express as px\n\nfig = px.density_contour(\n    df,\n    x=\"x\",\n    y=\"y\",\n    z=\"z\",\n    histfunc=\"max\",\n)\nfig.update_traces(contours_coloring=\"fill\", contours_showlabels=True)\nfig.show()\n</pre> import plotly.express as px  fig = px.density_contour(     df,     x=\"x\",     y=\"y\",     z=\"z\",     histfunc=\"max\", ) fig.update_traces(contours_coloring=\"fill\", contours_showlabels=True) fig.show() In\u00a0[8]: Copied! <pre>import plotly.express as px\n\nfig = px.density_heatmap(\n    df,\n    x=\"x\",\n    y=\"y\",\n    z=\"z\",\n    nbinsx=20,\n    nbinsy=40,\n    histfunc=\"max\",\n    color_continuous_scale=\"Viridis\",\n)\nfig.show()\n</pre> import plotly.express as px  fig = px.density_heatmap(     df,     x=\"x\",     y=\"y\",     z=\"z\",     nbinsx=20,     nbinsy=40,     histfunc=\"max\",     color_continuous_scale=\"Viridis\", ) fig.show() In\u00a0[9]: Copied! <pre>import plotly.graph_objects as go\n\nfig = go.Figure(\n    go.Histogram2d(\n        x=df.x,\n        y=df.y,\n        z=df.z,\n        nbinsx=20,\n        nbinsy=40,\n        histfunc=\"max\",\n    )\n)\n\nfig.show()\n</pre> import plotly.graph_objects as go  fig = go.Figure(     go.Histogram2d(         x=df.x,         y=df.y,         z=df.z,         nbinsx=20,         nbinsy=40,         histfunc=\"max\",     ) )  fig.show()"},{"location":"optimize/8.blackbox/#optimize-with-blackbox","title":"Optimize with blackbox\u00b6","text":"<p>Home</p> <p>Install latest blackbox optimize from PyPi</p>"},{"location":"optimize/8.blackbox/#sample-strategy","title":"Sample strategy\u00b6","text":""},{"location":"optimize/8.blackbox/#run-optimize","title":"Run optimize\u00b6","text":""},{"location":"optimize/8.blackbox/#plot","title":"Plot\u00b6","text":""},{"location":"optimize/8.blackbox/#plot-plotly","title":"Plot Plotly\u00b6","text":""},{"location":"optimize/8.blackbox/#init-plotly-environment","title":"Init Plotly environment\u00b6","text":""},{"location":"optimize/8.blackbox/#clean-data","title":"Clean data\u00b6","text":""},{"location":"optimize/8.blackbox/#type-1","title":"Type 1\u00b6","text":""},{"location":"optimize/8.blackbox/#type-2","title":"Type 2\u00b6","text":""},{"location":"optimize/8.blackbox/#type-3","title":"Type 3\u00b6","text":""},{"location":"optimize/8.blackbox/#source","title":"Source\u00b6","text":"<pre>--8&lt;-- \"example/optimize/blackbox.py\"\n</pre>"},{"location":"optimize/9.hyperactive/","title":"Optimize with Hyperactive","text":"In\u00a0[\u00a0]: Copied! <pre>!pip install hyperactive\n# Re-install pandas 2.2\n!pip install --upgrade pandas\n</pre> !pip install hyperactive # Re-install pandas 2.2 !pip install --upgrade pandas In\u00a0[1]: Copied! <pre># import talib.abstract as ta\n\nfrom lettrade import DataFeed, Strategy, indicator as i\nfrom lettrade.exchange.backtest import ForexBackTestAccount, let_backtest\nfrom lettrade.indicator.vendor.qtpylib import inject_indicators\n\ninject_indicators()\n\n\nclass SmaCross(Strategy):\n    ema1_period = 9\n    ema2_period = 21\n\n    def indicators(self, df: DataFeed):\n        # df[\"ema1\"] = ta.EMA(df, timeperiod=self.ema1_period)\n        # df[\"ema2\"] = ta.EMA(df, timeperiod=self.ema2_period)\n        df[\"ema1\"] = df.close.ema(window=self.ema1_period)\n        df[\"ema2\"] = df.close.ema(window=self.ema2_period)\n\n        df[\"signal_ema_crossover\"] = i.crossover(df.ema1, df.ema2)\n        df[\"signal_ema_crossunder\"] = i.crossunder(df.ema1, df.ema2)\n\n    def next(self, df: DataFeed):\n        if len(self.orders) &gt; 0 or len(self.positionsons) &gt; 0:\n            return\n\n        if df.l.signal_ema_crossover[-1]:\n            price = df.l.close[-1]\n            self.buy(size=0.1, sl=price - 0.001, tp=price + 0.001)\n        elif df.l.signal_ema_crossunder[-1]:\n            price = df.l.close[-1]\n            self.sell(size=0.1, sl=price + 0.001, tp=price - 0.001)\n\n\nlt = let_backtest(\n    strategy=SmaCross,\n    datas=\"example/data/data/EURUSD_5m_0_10000.csv\",\n    account=ForexBackTestAccount,\n    # plotter=None,\n)\n</pre> # import talib.abstract as ta  from lettrade import DataFeed, Strategy, indicator as i from lettrade.exchange.backtest import ForexBackTestAccount, let_backtest from lettrade.indicator.vendor.qtpylib import inject_indicators  inject_indicators()   class SmaCross(Strategy):     ema1_period = 9     ema2_period = 21      def indicators(self, df: DataFeed):         # df[\"ema1\"] = ta.EMA(df, timeperiod=self.ema1_period)         # df[\"ema2\"] = ta.EMA(df, timeperiod=self.ema2_period)         df[\"ema1\"] = df.close.ema(window=self.ema1_period)         df[\"ema2\"] = df.close.ema(window=self.ema2_period)          df[\"signal_ema_crossover\"] = i.crossover(df.ema1, df.ema2)         df[\"signal_ema_crossunder\"] = i.crossunder(df.ema1, df.ema2)      def next(self, df: DataFeed):         if len(self.orders) &gt; 0 or len(self.positionsons) &gt; 0:             return          if df.l.signal_ema_crossover[-1]:             price = df.l.close[-1]             self.buy(size=0.1, sl=price - 0.001, tp=price + 0.001)         elif df.l.signal_ema_crossunder[-1]:             price = df.l.close[-1]             self.sell(size=0.1, sl=price + 0.001, tp=price - 0.001)   lt = let_backtest(     strategy=SmaCross,     datas=\"example/data/data/EURUSD_5m_0_10000.csv\",     account=ForexBackTestAccount,     # plotter=None, ) In\u00a0[2]: Copied! <pre>from hyperactive import Hyperactive\nfrom hyperactive.optimizers import HillClimbingOptimizer\n\n\n# define the model in a function\ndef params_parser(args):\n    return {\n        \"ema1_period\": args[\"ema1_period\"],\n        \"ema2_period\": args[\"ema2_period\"],\n    }\n\n\ndef result_parser(result):\n    return result[\"equity\"]\n\n\nmodel = lt.optimize_model(\n    params_parser=params_parser,\n    result_parser=result_parser,\n)\n\n# search space determines the ranges of parameters you want the optimizer to search through\nsearch_space = {\n    \"ema1_period\": list(range(5, 25, 1)),\n    \"ema2_period\": list(range(10, 50)),\n}\n\noptimizer = HillClimbingOptimizer(epsilon=0.1, distribution=\"laplace\", n_neighbours=4)\n\n# start the optimization run\nhyper = Hyperactive()\nhyper.add_search(model, search_space, optimizer=optimizer, n_iter=1000)\nhyper.run()\n</pre> from hyperactive import Hyperactive from hyperactive.optimizers import HillClimbingOptimizer   # define the model in a function def params_parser(args):     return {         \"ema1_period\": args[\"ema1_period\"],         \"ema2_period\": args[\"ema2_period\"],     }   def result_parser(result):     return result[\"equity\"]   model = lt.optimize_model(     params_parser=params_parser,     result_parser=result_parser, )  # search space determines the ranges of parameters you want the optimizer to search through search_space = {     \"ema1_period\": list(range(5, 25, 1)),     \"ema2_period\": list(range(10, 50)), }  optimizer = HillClimbingOptimizer(epsilon=0.1, distribution=\"laplace\", n_neighbours=4)  # start the optimization run hyper = Hyperactive() hyper.add_search(model, search_space, optimizer=optimizer, n_iter=1000) hyper.run() <pre>[0] _optimize_model (Hill Climbing): 100%|\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500| 1000/1000 [00:01&lt;00:00, 758.47it/s, best_iter=0, best_pos=[9 0], best_score=1183.88] \n</pre> <pre>\n\nResults: '_optimize_model'  \n   Best score: 1183.88  \n   Best parameter set:\n      'ema1_period' : 14.0  \n      'ema2_period' : 10.0  \n   Best iteration: 0  \n \n   Random seed: 1082602856  \n \n   Evaluation time   : 0.4881856441497803 sec    [83.53 %]\n   Optimization time : 0.09622955322265625 sec    [16.47 %]\n   Iteration time    : 0.5844151973724365 sec    [1711.11 iter/sec]\n \n</pre> In\u00a0[3]: Copied! <pre>df = hyper.search_data(model)\ndf\n</pre> df = hyper.search_data(model) df Out[3]: ema1_period ema2_period score 0 9 29 850.48 1 23 27 971.48 2 11 23 851.68 3 11 36 940.68 4 17 23 959.68 ... ... ... ... 995 11 24 831.78 996 8 20 879.48 997 21 11 1096.68 998 8 35 890.58 999 15 14 1007.28 <p>1000 rows \u00d7 3 columns</p> In\u00a0[4]: Copied! <pre>lt.plotter.heatmap()\n</pre> lt.plotter.heatmap() In\u00a0[5]: Copied! <pre>lt.plotter.contour(x=\"ema1_period\", y=\"ema2_period\", z=\"equity\")\n</pre> lt.plotter.contour(x=\"ema1_period\", y=\"ema2_period\", z=\"equity\") In\u00a0[6]: Copied! <pre>import plotly.io as pio\n\npio.renderers.default = \"notebook\"\npio.templates.default = \"plotly_dark\"\n</pre> import plotly.io as pio  pio.renderers.default = \"notebook\" pio.templates.default = \"plotly_dark\" In\u00a0[9]: Copied! <pre>import plotly.express as px\n\nfig = px.density_heatmap(\n    df,\n    x=\"ema1_period\",\n    y=\"ema2_period\",\n    z=\"score\",\n    nbinsx=20,\n    nbinsy=40,\n    histfunc=\"max\",\n    color_continuous_scale=\"Viridis\",\n)\nfig.show()\n</pre> import plotly.express as px  fig = px.density_heatmap(     df,     x=\"ema1_period\",     y=\"ema2_period\",     z=\"score\",     nbinsx=20,     nbinsy=40,     histfunc=\"max\",     color_continuous_scale=\"Viridis\", ) fig.show() In\u00a0[8]: Copied! <pre>import plotly.express as px\n\nfig = px.density_contour(\n    df,\n    x=\"ema1_period\",\n    y=\"ema2_period\",\n    z=\"score\",\n    histfunc=\"max\",\n)\nfig.update_traces(contours_coloring=\"fill\", contours_showlabels=True)\nfig.show()\n</pre> import plotly.express as px  fig = px.density_contour(     df,     x=\"ema1_period\",     y=\"ema2_period\",     z=\"score\",     histfunc=\"max\", ) fig.update_traces(contours_coloring=\"fill\", contours_showlabels=True) fig.show()"},{"location":"optimize/9.hyperactive/#optimize-with-hyperactive","title":"Optimize with Hyperactive\u00b6","text":"<p>Home</p>"},{"location":"optimize/9.hyperactive/#install","title":"Install\u00b6","text":""},{"location":"optimize/9.hyperactive/#sample-strategy","title":"Sample strategy\u00b6","text":""},{"location":"optimize/9.hyperactive/#example","title":"Example\u00b6","text":""},{"location":"optimize/9.hyperactive/#plot","title":"Plot\u00b6","text":""},{"location":"optimize/9.hyperactive/#plot-plotly","title":"Plot plotly\u00b6","text":""},{"location":"optimize/9.hyperactive/#init-plotly-environment","title":"Init Plotly environment\u00b6","text":""},{"location":"optimize/9.hyperactive/#type-1","title":"Type 1\u00b6","text":""},{"location":"optimize/9.hyperactive/#type-2","title":"Type 2\u00b6","text":""},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li> account<ul> <li> account</li> <li> error</li> </ul> </li> <li> all</li> <li> base<ul> <li> error</li> <li> flag</li> </ul> </li> <li> bot</li> <li> brain<ul> <li> brain</li> </ul> </li> <li> calendar<ul> <li> calendar</li> </ul> </li> <li> commander<ul> <li> commander</li> <li> telegram</li> </ul> </li> <li> data<ul> <li> data</li> <li> error</li> <li> extra<ul> <li> csv</li> </ul> </li> <li> feeder</li> <li> replay</li> <li> resample</li> <li> timeframe</li> <li> wrapper</li> </ul> </li> <li> exchange<ul> <li> backtest<ul> <li> account</li> <li> backtest</li> <li> commander</li> <li> data</li> <li> exchange</li> <li> extra<ul> <li> ray<ul> <li> ray</li> </ul> </li> <li> yfinance<ul> <li> yfinance</li> </ul> </li> </ul> </li> <li> feeder</li> <li> plot</li> <li> plotly<ul> <li> optimize</li> </ul> </li> <li> stats</li> <li> trade</li> </ul> </li> <li> base</li> <li> ccxt<ul> <li> api</li> <li> ccxt</li> <li> trade</li> </ul> </li> <li> error</li> <li> exchange</li> <li> execution</li> <li> live<ul> <li> account</li> <li> api</li> <li> data</li> <li> error</li> <li> exchange</li> <li> feeder</li> <li> live</li> <li> trade</li> </ul> </li> <li> metatrader<ul> <li> api</li> <li> metatrader</li> <li> trade</li> </ul> </li> <li> order</li> <li> position</li> </ul> </li> <li> indicator<ul> <li> candlestick<ul> <li> candlestick</li> <li> talib</li> </ul> </li> <li> dataframe</li> <li> series</li> <li> trend<ul> <li> ema</li> <li> ichimoku</li> </ul> </li> <li> vendor<ul> <li> qtpylib<ul> <li> inject</li> <li> qtpylib</li> </ul> </li> </ul> </li> <li> volatility<ul> <li> keltner_channel</li> </ul> </li> </ul> </li> <li> lettrade</li> <li> plot<ul> <li> bot</li> <li> color</li> <li> plot</li> <li> plotly<ul> <li> helper</li> <li> indicator</li> <li> plotly</li> </ul> </li> </ul> </li> <li> stats<ul> <li> stats</li> </ul> </li> <li> strategy<ul> <li> strategy</li> </ul> </li> <li> utils<ul> <li> docs</li> <li> notebook</li> </ul> </li> </ul>"},{"location":"reference/all/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> all","text":""},{"location":"reference/all/#lettrade.all","title":"all","text":"<p>Import everything in one. Import some unnecessary but convenient for everyone</p>"},{"location":"reference/bot/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> bot","text":""},{"location":"reference/bot/#lettrade.bot","title":"bot","text":""},{"location":"reference/bot/#lettrade.bot.LetTradeBot","title":"LetTradeBot","text":"<pre><code>LetTradeBot(\n    strategy: type[Strategy],\n    datas: DataFeed | list[DataFeed] | str | list[str],\n    feeder: type[DataFeeder],\n    exchange: type[Exchange],\n    account: type[Account],\n    commander: type[Commander] | None = None,\n    plotter: type[Plotter] | None = None,\n    stats: type[BotStatistic] | None = None,\n    name: str | None = None,\n    **kwargs\n)\n</code></pre> Source code in <code>lettrade/bot.py</code> <pre><code>def __init__(\n    self,\n    strategy: type[Strategy],\n    datas: DataFeed | list[DataFeed] | str | list[str],\n    feeder: type[DataFeeder],\n    exchange: type[Exchange],\n    account: type[Account],\n    commander: type[Commander] | None = None,\n    plotter: type[Plotter] | None = None,\n    stats: type[BotStatistic] | None = None,\n    name: str | None = None,\n    **kwargs,\n) -&gt; None:\n    logger.info(\"New bot: %s\", name)\n\n    self._strategy_cls = strategy\n    self._feeder_cls = feeder\n    self._exchange_cls = exchange\n    self._account_cls = account\n    self._commander_cls = commander\n    self._plotter_cls = plotter\n    self._stats_cls = stats\n\n    self._name = name\n    self._kwargs = kwargs\n\n    # DataFeeds\n    self.datas = datas\n    self.data = self.datas[0]\n</code></pre>"},{"location":"reference/bot/#lettrade.bot.LetTradeBot.account","title":"account  <code>instance-attribute</code>","text":"<pre><code>account: Account\n</code></pre> <p>Trading account handler</p>"},{"location":"reference/bot/#lettrade.bot.LetTradeBot.brain","title":"brain  <code>instance-attribute</code>","text":"<pre><code>brain: Brain\n</code></pre> <p>Brain of bot</p>"},{"location":"reference/bot/#lettrade.bot.LetTradeBot.commander","title":"commander  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>commander: Commander | None = None\n</code></pre> <p>Control the bot</p>"},{"location":"reference/bot/#lettrade.bot.LetTradeBot.data","title":"data  <code>instance-attribute</code>","text":"<pre><code>data: DataFeed = datas[0]\n</code></pre> <p>Main DataFeed for bot</p>"},{"location":"reference/bot/#lettrade.bot.LetTradeBot.datas","title":"datas  <code>instance-attribute</code>","text":"<pre><code>datas: list[DataFeed] = datas\n</code></pre> <p>DataFeed list for bot</p>"},{"location":"reference/bot/#lettrade.bot.LetTradeBot.exchange","title":"exchange  <code>instance-attribute</code>","text":"<pre><code>exchange: Exchange\n</code></pre> <p>Trading exchange and events</p>"},{"location":"reference/bot/#lettrade.bot.LetTradeBot.feeder","title":"feeder  <code>instance-attribute</code>","text":"<pre><code>feeder: DataFeeder\n</code></pre> <p>DataFeeder help to handle <code>datas</code></p>"},{"location":"reference/bot/#lettrade.bot.LetTradeBot.plotter","title":"plotter  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>plotter: Plotter | None = None\n</code></pre> <p>Plot graphic results</p>"},{"location":"reference/bot/#lettrade.bot.LetTradeBot.strategy","title":"strategy  <code>instance-attribute</code>","text":"<pre><code>strategy: Strategy\n</code></pre> <p>Strategy</p>"},{"location":"reference/bot/#lettrade.bot.LetTradeBot.plot","title":"plot","text":"<pre><code>plot(*args, **kwargs)\n</code></pre> <p>Plot strategy result</p> Source code in <code>lettrade/bot.py</code> <pre><code>def plot(self, *args, **kwargs):\n    \"\"\"Plot strategy result\"\"\"\n    if __debug__:\n        from .utils.docs import is_docs_session\n\n        if is_docs_session():\n            return\n\n    self.plotter.plot(*args, **kwargs)\n</code></pre>"},{"location":"reference/bot/#lettrade.bot.LetTradeBot.stop","title":"stop","text":"<pre><code>stop()\n</code></pre> <p>Stop strategy</p> Source code in <code>lettrade/bot.py</code> <pre><code>def stop(self):\n    \"\"\"Stop strategy\"\"\"\n    self.brain.stop()\n    if self.plotter is not None:\n        self.plotter.stop()\n</code></pre>"},{"location":"reference/lettrade/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> lettrade","text":""},{"location":"reference/lettrade/#lettrade.lettrade","title":"lettrade","text":""},{"location":"reference/lettrade/#lettrade.lettrade.LetTrade","title":"LetTrade","text":"<pre><code>LetTrade(\n    strategy: type[Strategy],\n    datas: DataFeed | list[DataFeed] | str | list[str],\n    feeder: type[DataFeeder],\n    exchange: type[Exchange],\n    account: type[Account],\n    commander: type[Commander] | None = None,\n    plotter: type[Plotter] | None = None,\n    stats: type[BotStatistic] | None = None,\n    name: str | None = None,\n    bot: type[LetTradeBot] | None = LetTradeBot,\n    **kwargs\n)\n</code></pre> <p>Building new bot object and handle multiprocessing</p> Source code in <code>lettrade/lettrade.py</code> <pre><code>def __init__(\n    self,\n    strategy: type[Strategy],\n    datas: DataFeed | list[DataFeed] | str | list[str],\n    feeder: type[DataFeeder],\n    exchange: type[Exchange],\n    account: type[Account],\n    commander: type[Commander] | None = None,\n    plotter: type[Plotter] | None = None,\n    stats: type[BotStatistic] | None = None,\n    name: str | None = None,\n    bot: type[LetTradeBot] | None = LetTradeBot,\n    **kwargs,\n) -&gt; None:\n    self._kwargs = kwargs\n    self._kwargs[\"strategy_cls\"] = strategy\n    self._kwargs[\"feeder_cls\"] = feeder\n    self._kwargs[\"exchange_cls\"] = exchange\n    self._kwargs[\"account_cls\"] = account\n    self._kwargs[\"commander_cls\"] = commander\n    self._kwargs[\"plotter_cls\"] = plotter\n    self._kwargs[\"stats_cls\"] = stats\n    self._kwargs[\"bot_cls\"] = bot\n    self._kwargs[\"name\"] = name\n\n    self._kwargs[\"datas\"] = self._init_datafeeds(datas)\n</code></pre>"},{"location":"reference/lettrade/#lettrade.lettrade.LetTrade.plot","title":"plot","text":"<pre><code>plot(*args, jump: dict | None = None, **kwargs)\n</code></pre> <p>Plot strategy/optimize result</p> BotPlotter <p>Miror of BotPlotter.plot(). Plotly implement PlotlyBotPlotter.plot().</p> <p>Args:     <code>jump</code> (dict | None, optional): Miror of BotPlotter.jump()</p> <p>Example:     - Jump to position_id         <pre><code>lt.plot(\n    jump=dict(position_id=1, range=300),\n    layout=dict(height=2000),\n)\n</code></pre></p> OptimizePlotter <p>Miror of OptimizePlotter.plot(). Plotly implement PlotlyOptimizePlotter.plot().</p> <p>Example:     -         <pre><code>lt.plot(layout=dict(height=2000))\n</code></pre></p> Source code in <code>lettrade/lettrade.py</code> <pre><code>def plot(self, *args, jump: dict | None = None, **kwargs):\n    \"\"\"Plot strategy/optimize result\n\n    BotPlotter:\n        Miror of [BotPlotter.plot()](site:/reference/plot/bot/#lettrade.plot.bot.BotPlotter.plot).\n        Plotly implement [PlotlyBotPlotter.plot()](site:/reference/plot/plotly/plotly/#lettrade.plot.plotly.plotly.PlotlyBotPlotter.plot).\n\n        Args:\n            `jump` (dict | None, optional): Miror of [BotPlotter.jump()](site:/reference/plot/bot/#lettrade.plot.bot.BotPlotter.jump)\n\n        Example:\n            - Jump to position_id\n                ```python\n                lt.plot(\n                    jump=dict(position_id=1, range=300),\n                    layout=dict(height=2000),\n                )\n                ```\n\n    OptimizePlotter:\n        Miror of [OptimizePlotter.plot()](site:/reference/plot/optimize/#lettrade.plot.optimize.OptimizePlotter.plot).\n        Plotly implement [PlotlyOptimizePlotter.plot()](site:/reference/exchange/backtest/plotly/optimize/#lettrade.exchange.backtest.plotly.optimize.PlotlyOptimizePlotter.plot).\n\n        Example:\n            -\n                ```python\n                lt.plot(layout=dict(height=2000))\n                ```\n    \"\"\"\n    if __debug__:\n        from .utils.docs import is_docs_session\n\n        if is_docs_session():\n            return\n\n    self.plotter.plot(*args, jump=jump, **kwargs)\n</code></pre>"},{"location":"reference/lettrade/#lettrade.lettrade.LetTrade.run","title":"run","text":"<pre><code>run(worker: int | None = None, **kwargs)\n</code></pre> <p>Run strategy in single or multiple processing</p> <p>Parameters:</p> <ul> <li> <code>worker</code>               (<code>int | None</code>, default:                   <code>None</code> )           \u2013            <p>Number of processing. Defaults to None.</p> </li> </ul> Source code in <code>lettrade/lettrade.py</code> <pre><code>def run(self, worker: int | None = None, **kwargs):\n    \"\"\"Run strategy in single or multiple processing\n\n    Args:\n        worker (int | None, optional): Number of processing. Defaults to None.\n    \"\"\"\n    if worker or isinstance(self.data, list):\n        if not isinstance(self.data, list):\n            # self.data = self.datas\n            self.datas = [self.data]\n\n        worker = self._max_workers(worker)\n\n        self._multiprocess()\n\n        datas_source = self._kwargs.pop(\"datas\")\n        with ProcessPoolExecutor(max_workers=worker) as executor:\n            futures = [\n                executor.submit(\n                    self._bot_cls.run_bot,\n                    datas=datas,\n                    id=i,\n                    result=\"str\",\n                    **self._kwargs,\n                )\n                for i, datas in enumerate(datas_source)\n            ]\n            for future in futures:\n                result = future.result()\n                print(result)\n    else:\n        self._bot = self._bot_cls.run_bot(\n            bot=self._bot,\n            result=\"bot\",\n            **self._kwargs,\n        )\n        print(str(self._bot.stats))\n</code></pre>"},{"location":"reference/lettrade/#lettrade.lettrade.LetTrade.stop","title":"stop","text":"<pre><code>stop()\n</code></pre> <p>Stop strategy</p> Source code in <code>lettrade/lettrade.py</code> <pre><code>def stop(self):\n    \"\"\"Stop strategy\"\"\"\n    if self._bot is not None:\n        return self._bot.stop()\n    if self.stats:\n        self.stats.stop()\n</code></pre>"},{"location":"reference/account/","title":"Index","text":""},{"location":"reference/account/#lettrade.account","title":"account","text":""},{"location":"reference/account/account/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> account","text":""},{"location":"reference/account/account/#lettrade.account.account","title":"account","text":""},{"location":"reference/account/account/#lettrade.account.account.Account","title":"Account","text":"<pre><code>Account(\n    risk: float = 0.02,\n    balance: float = 10000,\n    margin: float = 1.0,\n    leverage: float = 1.0,\n    type: AccountType = AccountType.Hedging,\n    **kwargs\n)\n</code></pre> <p>Manage account balance, leverage, commission. Risk calculate and control</p> <p>Parameters:</p> <ul> <li> <code>risk</code>               (<code>float</code>, default:                   <code>0.02</code> )           \u2013            <p>description. Defaults to 0.02.</p> </li> <li> <code>balance</code>               (<code>float</code>, default:                   <code>10000</code> )           \u2013            <p>description. Defaults to 10_000.</p> </li> <li> <code>margin</code>               (<code>float</code>, default:                   <code>1.0</code> )           \u2013            <p>description. Defaults to 1.0.</p> </li> <li> <code>leverage</code>               (<code>float</code>, default:                   <code>1.0</code> )           \u2013            <p>description. Defaults to 1.0.</p> </li> <li> <code>**kwargs</code>               (<code>dict</code>, default:                   <code>{}</code> )           \u2013            <p>Config of account. Defaults to {}.</p> </li> </ul> Source code in <code>lettrade/account/account.py</code> <pre><code>def __init__(\n    self,\n    risk: float = 0.02,\n    balance: float = 10_000,\n    margin: float = 1.0,\n    leverage: float = 1.0,\n    type: AccountType = AccountType.Hedging,\n    **kwargs,\n) -&gt; None:\n    \"\"\"_summary_\n\n    Args:\n        risk (float, optional): _description_. Defaults to 0.02.\n        balance (float, optional): _description_. Defaults to 10_000.\n        margin (float, optional): _description_. Defaults to 1.0.\n        leverage (float, optional): _description_. Defaults to 1.0.\n        **kwargs (dict, optional): Config of account. Defaults to {}.\n    \"\"\"\n    self._risk = risk\n    self._balance = balance\n    self._margin = margin\n    self._leverage = leverage\n    self._type = type\n    self._config = kwargs\n\n    self._equities = dict()\n\n    self._do_equity_snapshot = True  # Snapshot balance\n</code></pre>"},{"location":"reference/account/account/#lettrade.account.account.Account.balance","title":"balance  <code>property</code>","text":"<pre><code>balance: float\n</code></pre> <p>Balance of account</p> <p>Returns:</p> <ul> <li> <code>float</code> (              <code>float</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/account/account/#lettrade.account.account.Account.equity","title":"equity  <code>abstractmethod</code> <code>property</code>","text":"<pre><code>equity: float\n</code></pre> <p>Equity value of account</p> <p>Returns:</p> <ul> <li> <code>float</code> (              <code>float</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/account/account/#lettrade.account.account.Account.next","title":"next","text":"<pre><code>next()\n</code></pre> <p>Next account</p> Source code in <code>lettrade/account/account.py</code> <pre><code>def next(self):\n    \"\"\"Next account\"\"\"\n</code></pre>"},{"location":"reference/account/account/#lettrade.account.account.Account.next_next","title":"next_next","text":"<pre><code>next_next()\n</code></pre> <p>Call after strategy.next()</p> Source code in <code>lettrade/account/account.py</code> <pre><code>def next_next(self):\n    \"\"\"Call after strategy.next()\"\"\"\n    self._equity_snapshot()\n</code></pre>"},{"location":"reference/account/account/#lettrade.account.account.Account.on_positions","title":"on_positions","text":"<pre><code>on_positions(positions: list[Position])\n</code></pre> <p>Event positions updated</p> Source code in <code>lettrade/account/account.py</code> <pre><code>def on_positions(self, positions: list[\"Position\"]):\n    \"\"\"Event positions updated\"\"\"\n    if not self._do_equity_snapshot:\n        self._do_equity_snapshot = True\n</code></pre>"},{"location":"reference/account/account/#lettrade.account.account.Account.pl","title":"pl","text":"<pre><code>pl(size, entry_price: float, exit_price=None) -&gt; float\n</code></pre> <p>Estimate temporary profit and loss</p> Source code in <code>lettrade/account/account.py</code> <pre><code>def pl(self, size, entry_price: float, exit_price=None) -&gt; float:\n    \"\"\"Estimate temporary profit and loss\"\"\"\n    if exit_price is None:\n        exit_price = self._exchange.data.l.open[0]\n\n    return size * (exit_price - entry_price)\n</code></pre>"},{"location":"reference/account/account/#lettrade.account.account.Account.risk","title":"risk","text":"<pre><code>risk(side: TradeSide, size: float, **kwargs) -&gt; float\n</code></pre> <p>Risk calculation</p> Source code in <code>lettrade/account/account.py</code> <pre><code>def risk(self, side: \"TradeSide\", size: float, **kwargs) -&gt; float:\n    \"\"\"Risk calculation\"\"\"\n    if size is None:\n        return side * abs(self._risk)\n    return side * abs(size)\n</code></pre>"},{"location":"reference/account/account/#lettrade.account.account.Account.start","title":"start","text":"<pre><code>start()\n</code></pre> <p>Start account</p> Source code in <code>lettrade/account/account.py</code> <pre><code>def start(self):\n    \"\"\"Start account\"\"\"\n</code></pre>"},{"location":"reference/account/account/#lettrade.account.account.Account.stop","title":"stop","text":"<pre><code>stop()\n</code></pre> <p>Stop account</p> Source code in <code>lettrade/account/account.py</code> <pre><code>def stop(self):\n    \"\"\"Stop account\"\"\"\n    try:\n        self._equity_snapshot()\n    except LetAccountInsufficientException:\n        pass\n</code></pre>"},{"location":"reference/account/account/#lettrade.account.account.AccountType","title":"AccountType","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p>"},{"location":"reference/account/account/#lettrade.account.account.AccountType.Hedging","title":"Hedging  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Hedging = 'hedging'\n</code></pre>"},{"location":"reference/account/account/#lettrade.account.account.AccountType.Speculation","title":"Speculation  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Speculation = 'speculation'\n</code></pre>"},{"location":"reference/account/error/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> error","text":""},{"location":"reference/account/error/#lettrade.account.error","title":"error","text":""},{"location":"reference/account/error/#lettrade.account.error.LetAccountInsufficientException","title":"LetAccountInsufficientException","text":"<p>               Bases: <code>LetException</code></p> <p>Account is insufficient exception</p>"},{"location":"reference/base/","title":"Index","text":""},{"location":"reference/base/#lettrade.base","title":"base","text":""},{"location":"reference/base/error/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> error","text":""},{"location":"reference/base/error/#lettrade.base.error","title":"error","text":""},{"location":"reference/base/error/#lettrade.base.error.LetException","title":"LetException","text":"<p>               Bases: <code>Exception</code></p> <p>Base LetTrade exception</p>"},{"location":"reference/base/flag/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> flag","text":""},{"location":"reference/base/flag/#lettrade.base.flag","title":"flag","text":""},{"location":"reference/base/flag/#lettrade.base.flag.validate_data_getitem_pointer","title":"validate_data_getitem_pointer  <code>module-attribute</code>","text":"<pre><code>validate_data_getitem_pointer: bool = False\n</code></pre> <p>Flag to validate <code>DataFeed</code> get data by pointer but doesn't has prefix <code>DataFeed.l.</code></p>"},{"location":"reference/base/flag/#lettrade.base.flag.validate_strategy_trade","title":"validate_strategy_trade  <code>module-attribute</code>","text":"<pre><code>validate_strategy_trade: bool = False\n</code></pre> <p>Flag to validate trading object is not writing attribute from strategy</p>"},{"location":"reference/brain/","title":"Index","text":""},{"location":"reference/brain/#lettrade.brain","title":"brain","text":""},{"location":"reference/brain/brain/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> brain","text":""},{"location":"reference/brain/brain/#lettrade.brain.brain","title":"brain","text":""},{"location":"reference/brain/brain/#lettrade.brain.brain.Brain","title":"Brain","text":"<pre><code>Brain(\n    strategy: Strategy,\n    exchange: Exchange,\n    feeder: DataFeeder,\n    commander: Commander,\n    **kwargs\n)\n</code></pre> <p>Brain of bot</p> <p>Parameters:</p> <ul> <li> <code>strategy</code>               (<code>Strategy</code>)           \u2013            <p>description</p> </li> <li> <code>exchange</code>               (<code>Exchange</code>)           \u2013            <p>description</p> </li> <li> <code>feeder</code>               (<code>DataFeeder</code>)           \u2013            <p>description</p> </li> <li> <code>commander</code>               (<code>Commander</code>)           \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/brain/brain.py</code> <pre><code>def __init__(\n    self,\n    strategy: Strategy,\n    exchange: Exchange,\n    feeder: DataFeeder,\n    commander: Commander,\n    **kwargs,\n) -&gt; None:\n    \"\"\"_summary_\n\n    Args:\n        strategy (Strategy): _description_\n        exchange (Exchange): _description_\n        feeder (DataFeeder): _description_\n        commander (Commander): _description_\n    \"\"\"\n    self.strategy = strategy\n    self.exchange = exchange\n    self.feeder = feeder\n    self.commander = commander\n\n    # self.datas = self.feeder.datas\n    self.data = self.feeder.data\n</code></pre>"},{"location":"reference/brain/brain/#lettrade.brain.brain.Brain.on_executions","title":"on_executions","text":"<pre><code>on_executions(executions: list[Execution])\n</code></pre> <p>Receive new <code>Execution</code> event and send to <code>Strategy</code></p> Source code in <code>lettrade/brain/brain.py</code> <pre><code>def on_executions(self, executions: list[Execution]):\n    \"\"\"Receive new `Execution` event and send to `Strategy`\"\"\"\n    self.on_transactions(executions)\n    self.strategy.on_executions(executions)\n</code></pre>"},{"location":"reference/brain/brain/#lettrade.brain.brain.Brain.on_notify","title":"on_notify","text":"<pre><code>on_notify(*args, **kwargs)\n</code></pre> <p>Receive new notify and send to Strategy</p> Source code in <code>lettrade/brain/brain.py</code> <pre><code>def on_notify(self, *args, **kwargs):\n    \"\"\"Receive new notify and send to Strategy\"\"\"\n    self.strategy.on_notify(*args, **kwargs)\n</code></pre>"},{"location":"reference/brain/brain/#lettrade.brain.brain.Brain.on_orders","title":"on_orders","text":"<pre><code>on_orders(orders: list[Order])\n</code></pre> <p>Receive new <code>Order</code> event and send to <code>Strategy</code></p> Source code in <code>lettrade/brain/brain.py</code> <pre><code>def on_orders(self, orders: list[Order]):\n    \"\"\"Receive new `Order` event and send to `Strategy`\"\"\"\n    self.on_transactions(orders)\n    self.strategy.on_orders(orders)\n</code></pre>"},{"location":"reference/brain/brain/#lettrade.brain.brain.Brain.on_positions","title":"on_positions","text":"<pre><code>on_positions(positions: list[Position])\n</code></pre> <p>Receive new <code>Position</code> event and send to <code>Strategy</code></p> Source code in <code>lettrade/brain/brain.py</code> <pre><code>def on_positions(self, positions: list[Position]):\n    \"\"\"Receive new `Position` event and send to `Strategy`\"\"\"\n    self.on_transactions(positions)\n    self.strategy.on_positions(positions)\n</code></pre>"},{"location":"reference/brain/brain/#lettrade.brain.brain.Brain.on_transactions","title":"on_transactions","text":"<pre><code>on_transactions(transactions)\n</code></pre> <p>Receive new transaction event and send to <code>Strategy</code></p> Source code in <code>lettrade/brain/brain.py</code> <pre><code>def on_transactions(self, transactions):\n    \"\"\"Receive new transaction event and send to `Strategy`\"\"\"\n    if self.commander is not None:\n        # TODO: send message to commander when new transaction\n        self.commander.send_message(f\"New transactions: {str(transactions)}\")\n\n    self.strategy.on_transactions(transactions)\n</code></pre>"},{"location":"reference/brain/brain/#lettrade.brain.brain.Brain.run","title":"run","text":"<pre><code>run()\n</code></pre> <p>Run the trading bot</p> Source code in <code>lettrade/brain/brain.py</code> <pre><code>def run(self):\n    \"\"\"Run the trading bot\"\"\"\n\n    while self.feeder.alive():\n        # Load feeder next data\n        try:\n            self.feeder.next()\n            self.exchange.next()\n            self.strategy._next()\n            self.exchange.next_next()\n        except LetOrderValidateException as e:\n            logger.error(\n                \"[%s] Order validates exception\",\n                self.data.now,\n                exc_info=e,\n            )\n            continue\n        except LetAccountInsufficientException as e:\n            logger.error(\"Account equity is insufficient\", exc_info=e)\n            break\n        except LetNoMoreDataFeedException:\n            break\n        except Exception as e:\n            logger.exception(\"Bot running error\", exc_info=e)\n            break\n\n    self.strategy._stop()\n</code></pre>"},{"location":"reference/brain/brain/#lettrade.brain.brain.Brain.stop","title":"stop","text":"<pre><code>stop()\n</code></pre> <p>Stop the trading bot</p> Source code in <code>lettrade/brain/brain.py</code> <pre><code>def stop(self):\n    \"\"\"Stop the trading bot\"\"\"\n    self.feeder.stop()\n    self.exchange.stop()\n</code></pre>"},{"location":"reference/calendar/","title":"Index","text":""},{"location":"reference/calendar/#lettrade.calendar","title":"calendar","text":""},{"location":"reference/calendar/calendar/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> calendar","text":""},{"location":"reference/calendar/calendar/#lettrade.calendar.calendar","title":"calendar","text":""},{"location":"reference/commander/","title":"Index","text":""},{"location":"reference/commander/#lettrade.commander","title":"commander","text":""},{"location":"reference/commander/commander/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> commander","text":""},{"location":"reference/commander/commander/#lettrade.commander.commander","title":"commander","text":""},{"location":"reference/commander/commander/#lettrade.commander.commander.Commander","title":"Commander","text":"<p>               Bases: <code>ABC</code></p> <p>Abstract class for strategy commander. Help to manage and report strategy real-time</p>"},{"location":"reference/commander/commander/#lettrade.commander.commander.Commander.init","title":"init","text":"<pre><code>init(\n    bot: LetTradeBot,\n    brain: Brain,\n    exchange: Exchange,\n    strategy: Strategy,\n)\n</code></pre> <p>Init commander dependencies</p> <p>Parameters:</p> <ul> <li> <code>bot</code>               (<code>LetTradeBot</code>)           \u2013            <p>LetTradeBot object</p> </li> <li> <code>brain</code>               (<code>Brain</code>)           \u2013            <p>Brain of bot</p> </li> <li> <code>exchange</code>               (<code>Exchange</code>)           \u2013            <p>Manage bot trading</p> </li> <li> <code>strategy</code>               (<code>Strategy</code>)           \u2013            <p>Strategy of bot</p> </li> </ul> Source code in <code>lettrade/commander/commander.py</code> <pre><code>def init(\n    self,\n    bot: \"LetTradeBot\",\n    brain: \"Brain\",\n    exchange: \"Exchange\",\n    strategy: \"Strategy\",\n):\n    \"\"\"Init commander dependencies\n\n    Args:\n        bot (LetTradeBot): LetTradeBot object\n        brain (Brain): Brain of bot\n        exchange (Exchange): Manage bot trading\n        strategy (Strategy): Strategy of bot\n    \"\"\"\n    self.bot = bot\n    self.brain = brain\n    self.exchange = exchange\n    self.strategy = strategy\n\n    self._name = self.bot._name\n</code></pre>"},{"location":"reference/commander/telegram/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> telegram","text":""},{"location":"reference/commander/telegram/#lettrade.commander.telegram","title":"telegram","text":"<p>Module help LetTrade send notify and receive command from Telegram Bot</p>"},{"location":"reference/commander/telegram/#lettrade.commander.telegram--example","title":"Example","text":"Example <pre><code>import os\nfrom datetime import datetime\n\nimport talib.abstract as ta\nfrom dotenv import load_dotenv\n\nfrom lettrade import indicator as i\n\n# import example.logger\nfrom lettrade.all import DataFeed, Strategy, TelegramCommander, let_metatrader\n\nload_dotenv()\n\n\nclass SmaCross(Strategy):\n    ema1_period = 9\n    ema2_period = 21\n\n    _now: datetime\n\n    def indicators(self, df: DataFeed):\n        df[\"ema1\"] = ta.EMA(df, timeperiod=self.ema1_period)\n        df[\"ema2\"] = ta.EMA(df, timeperiod=self.ema2_period)\n\n        df[\"signal_ema_crossover\"] = i.crossover(df.ema1, df.ema2)\n        df[\"signal_ema_crossunder\"] = i.crossunder(df.ema1, df.ema2)\n        return df\n\n    def start(self, df: DataFeed):\n        self._now = df.now\n\n    def next(self, df: DataFeed):\n        if self.is_live:\n            # Filter start of new bar\n            if self._now == df.now:\n                return\n            self._now = df.now\n\n        if len(self.orders) &gt; 0 or len(self.positions) &gt; 0:\n            return\n\n        if df.l[\"signal_ema_crossover\"][-1]:\n            price = self.data.l[\"close\"][-1]\n            self.buy(size=0.1, sl=price - 0.01, tp=price + 0.01)\n        elif df.l[\"signal_ema_crossunder\"][-1]:\n            price = self.data.l[\"close\"][-1]\n            self.sell(size=0.1, sl=price + 0.01, tp=price - 0.01)\n\n    def stop(self, df: DataFeed):\n        print(df.tail())\n        print(self.orders)\n\n    def plot(self, df: DataFeed):\n        return dict(\n            scatters=[\n                dict(\n                    x=df.index,\n                    y=df[\"ema1\"],\n                    line=dict(color=\"blue\", width=1),\n                    name=\"ema1\",\n                ),\n                dict(\n                    x=df.index,\n                    y=df[\"ema2\"],\n                    line=dict(color=\"green\", width=1),\n                    name=\"ema2\",\n                ),\n            ]\n        )\n\n\nif __name__ == \"__main__\":\n    lt = let_metatrader(\n        strategy=SmaCross,\n        datas=[(\"EURGBP\", \"5m\")],\n        mt5_login=os.getenv(\"MT5_LOGIN\"),\n        mt5_password=os.getenv(\"MT5_PASSWORD\"),\n        mt5_server=os.getenv(\"MT5_SERVER\"),\n        mt5_wine=os.getenv(\"MT5_WINE\", None),\n        commander=TelegramCommander,\n        commander_kwargs=dict(\n            token=os.getenv(\"TELEGRAM_TOKEN\"),\n            chat_id=os.getenv(\"TELEGRAM_CHAT_ID\"),\n        ),\n    )\n\n    lt.run()\n</code></pre>"},{"location":"reference/commander/telegram/#lettrade.commander.telegram.TelegramAPI","title":"TelegramAPI","text":"<pre><code>TelegramAPI(token: str, chat_id: int, *args, **kwargs)\n</code></pre> <p>Singleton object communicate across multipprocessing</p> Source code in <code>lettrade/commander/telegram.py</code> <pre><code>def __init__(self, token: str, chat_id: int, *args, **kwargs) -&gt; None:\n    self._token: str = token\n    self._chat_id: int = int(chat_id)\n    self._bots_queue = dict()\n    self._bot_selected = None\n</code></pre>"},{"location":"reference/commander/telegram/#lettrade.commander.telegram.TelegramAPI.cleanup","title":"cleanup","text":"<pre><code>cleanup() -&gt; None\n</code></pre> <p>Stops all running telegram threads.</p> Source code in <code>lettrade/commander/telegram.py</code> <pre><code>def cleanup(self) -&gt; None:\n    \"\"\"Stops all running telegram threads.\"\"\"\n    # This can take up to `timeout` from the call to `start_polling`.\n    asyncio.run_coroutine_threadsafe(self._cleanup_telegram(), self._loop)\n    self._thread.join()\n</code></pre>"},{"location":"reference/commander/telegram/#lettrade.commander.telegram.TelegramAPI.send_message","title":"send_message","text":"<pre><code>send_message(msg: str, pname: str, **kwargs) -&gt; None\n</code></pre> <p>Send message to Telegram Bot</p> <p>Parameters:</p> <ul> <li> <code>msg</code>               (<code>str</code>)           \u2013            <p>Message</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>_type_</code> (              <code>None</code> )          \u2013            <p><code>None</code></p> </li> </ul> Source code in <code>lettrade/commander/telegram.py</code> <pre><code>def send_message(self, msg: str, pname: str, **kwargs) -&gt; None:\n    \"\"\"Send message to Telegram Bot\n\n    Args:\n        msg (str): Message\n\n    Returns:\n        _type_: `None`\n    \"\"\"\n    msg = f\"*[Process: {pname}]*\\n\\n{escape_markdown(msg)}\"\n    asyncio.run_coroutine_threadsafe(self._send_msg(msg, **kwargs), self._loop)\n</code></pre>"},{"location":"reference/commander/telegram/#lettrade.commander.telegram.TelegramAPI.start","title":"start","text":"<pre><code>start(pname: str, action_queue: Queue)\n</code></pre> <p>Start</p> Source code in <code>lettrade/commander/telegram.py</code> <pre><code>def start(self, pname: str, action_queue: Queue):\n    \"\"\"Start\"\"\"\n    if pname in self._bots_queue:\n        logger.warning(\"Process name %s override existed action queue\", pname)\n    self._bots_queue[pname] = action_queue\n\n    logger.info(\"New join process: %s\", pname)\n\n    # TODO: Lock for safe multipleprocessing\n    if hasattr(self, \"_keyboard\"):\n        return\n\n    self._init_keyboard()\n    self._start_thread()\n</code></pre>"},{"location":"reference/commander/telegram/#lettrade.commander.telegram.TelegramCommander","title":"TelegramCommander","text":"<pre><code>TelegramCommander(\n    token: str,\n    chat_id: int,\n    api: TelegramAPI | None = None,\n    *args,\n    **kwargs\n)\n</code></pre> <p>               Bases: <code>Commander</code></p> <p>Send notify and receive command from Telegram Bot</p> <p>Parameters:</p> <ul> <li> <code>token</code>               (<code>str</code>)           \u2013            <p>Telegram Bot token</p> </li> <li> <code>chat_id</code>               (<code>int</code>)           \u2013            <p>Telegram chat_id</p> </li> </ul> Source code in <code>lettrade/commander/telegram.py</code> <pre><code>def __init__(\n    self,\n    token: str,\n    chat_id: int,\n    api: TelegramAPI | None = None,\n    *args,\n    **kwargs,\n) -&gt; None:\n    \"\"\"_summary_\n\n    Args:\n        token (str): Telegram Bot token\n        chat_id (int): Telegram chat_id\n    \"\"\"\n    super().__init__(*args, **kwargs)\n    self._api = api or TelegramAPI(token=token, chat_id=chat_id)\n    self._is_running = True\n</code></pre>"},{"location":"reference/commander/telegram/#lettrade.commander.telegram.TelegramCommander.init","title":"init","text":"<pre><code>init(\n    bot: LetTradeBot,\n    brain: Brain,\n    exchange: Exchange,\n    strategy: Strategy,\n)\n</code></pre> <p>Init commander dependencies</p> <p>Parameters:</p> <ul> <li> <code>bot</code>               (<code>LetTradeBot</code>)           \u2013            <p>LetTradeBot object</p> </li> <li> <code>brain</code>               (<code>Brain</code>)           \u2013            <p>Brain of bot</p> </li> <li> <code>exchange</code>               (<code>Exchange</code>)           \u2013            <p>Manage bot trading</p> </li> <li> <code>strategy</code>               (<code>Strategy</code>)           \u2013            <p>Strategy of bot</p> </li> </ul> Source code in <code>lettrade/commander/commander.py</code> <pre><code>def init(\n    self,\n    bot: \"LetTradeBot\",\n    brain: \"Brain\",\n    exchange: \"Exchange\",\n    strategy: \"Strategy\",\n):\n    \"\"\"Init commander dependencies\n\n    Args:\n        bot (LetTradeBot): LetTradeBot object\n        brain (Brain): Brain of bot\n        exchange (Exchange): Manage bot trading\n        strategy (Strategy): Strategy of bot\n    \"\"\"\n    self.bot = bot\n    self.brain = brain\n    self.exchange = exchange\n    self.strategy = strategy\n\n    self._name = self.bot._name\n</code></pre>"},{"location":"reference/commander/telegram/#lettrade.commander.telegram.TelegramCommander.start","title":"start","text":"<pre><code>start()\n</code></pre> <p>Start</p> Source code in <code>lettrade/commander/telegram.py</code> <pre><code>def start(self):\n    \"\"\"Start\"\"\"\n    logger.info(\"TelegramCommander start %s\", self._name)\n    q = self._t_action()\n    self._api.start(pname=self._name, action_queue=q)\n</code></pre>"},{"location":"reference/commander/telegram/#lettrade.commander.telegram.TelegramCommander.stop","title":"stop","text":"<pre><code>stop()\n</code></pre> <p>Stop</p> Source code in <code>lettrade/commander/telegram.py</code> <pre><code>def stop(self):\n    \"\"\"Stop\"\"\"\n    logger.info(\"TelegramCommander stop %s\", self._name)\n    self._api.cleanup()\n    self._is_running = False\n</code></pre>"},{"location":"reference/commander/telegram/#lettrade.commander.telegram.authorized_only","title":"authorized_only","text":"<pre><code>authorized_only(\n    command_handler: Callable[\n        ..., Coroutine[Any, Any, None]\n    ]\n)\n</code></pre> <p>Decorator to check if the message comes from the correct chat_id</p> <p>Parameters:</p> <ul> <li> <code>command_handler</code>               (<code>Callable[..., Coroutine[Any, Any, None]]</code>)           \u2013            <p>Telegram CommandHandler</p> </li> </ul> Source code in <code>lettrade/commander/telegram.py</code> <pre><code>def authorized_only(command_handler: Callable[..., Coroutine[Any, Any, None]]):\n    \"\"\"Decorator to check if the message comes from the correct chat_id\n\n    Args:\n        command_handler (Callable[..., Coroutine[Any, Any, None]]): Telegram CommandHandler\n    \"\"\"\n\n    @wraps(command_handler)\n    async def wrapper(self: \"TelegramCommander\", *args, **kwargs):\n        \"\"\"Decorator logic\"\"\"\n        update = kwargs.get(\"update\") or args[0]\n\n        # Reject unauthorized messages\n        if update.callback_query:\n            cchat_id = int(update.callback_query.message.chat.id)\n        else:\n            cchat_id = int(update.message.chat_id)\n\n        if cchat_id != self._chat_id:\n            logger.info(f\"Rejected unauthorized message from: {update.message.chat_id}\")\n            return wrapper\n\n        logger.debug(\n            \"Executing handler: %s for chat_id: %s\",\n            command_handler.__name__,\n            self._chat_id,\n        )\n        try:\n            return await command_handler(self, *args, **kwargs)\n        except Exception as e:\n            await self._send_msg(str(e))\n            # except BaseException:\n            logger.exception(\"Exception occurred within Telegram module\", exc_info=e)\n\n    return wrapper\n</code></pre>"},{"location":"reference/data/","title":"Index","text":""},{"location":"reference/data/#lettrade.data","title":"data","text":""},{"location":"reference/data/data/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> data","text":""},{"location":"reference/data/data/#lettrade.data.data","title":"data","text":""},{"location":"reference/data/data/#lettrade.data.data.DataFeed","title":"DataFeed","text":"<pre><code>DataFeed(\n    *args,\n    name: str,\n    timeframe: TimeFrame,\n    meta: dict | None = None,\n    **kwargs\n)\n</code></pre> <p>               Bases: <code>DataFrame</code></p> <p>Data for Strategy. A implement of pandas.DataFrame</p> <p>Parameters:</p> <ul> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>description</p> </li> <li> <code>timeframe</code>               (<code>TimeFrame</code>)           \u2013            <p>description</p> </li> <li> <code>meta</code>               (<code>dict | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/data/data.py</code> <pre><code>def __init__(\n    self,\n    *args,\n    name: str,\n    timeframe: TimeFrame,\n    meta: dict | None = None,\n    **kwargs,\n) -&gt; None:\n    \"\"\"_summary_\n\n    Args:\n        name (str): _description_\n        timeframe (TimeFrame): _description_\n        meta (dict | None, optional): _description_. Defaults to None.\n\n    Raises:\n        RuntimeError: _description_\n    \"\"\"\n    # Validate\n    if not _data_name_pattern.match(name):\n        raise RuntimeError(\n            f\"Bot name {name} is not valid format {_data_name_pattern}\"\n        )\n\n    # Init\n    super().__init__(*args, **kwargs)\n    self._init_index()\n\n    # Metadata\n    if not meta:\n        meta = dict()\n    meta[\"name\"] = name\n    meta[\"timeframe\"] = TimeFrame(timeframe)\n    self.attrs = {\"lt_meta\": meta}\n\n    # LetWrapper\n    object.__setattr__(self, \"l\", LetDataFeedWrapper(self))\n</code></pre>"},{"location":"reference/data/data/#lettrade.data.data.DataFeed.i","title":"i  <code>property</code>","text":"<pre><code>i: indicator\n</code></pre> <p>Alias to <code>lettrade.indicator</code> and using in DataFeed by call: <code>DataFeed.i.indicator_name()</code></p>"},{"location":"reference/data/data/#lettrade.data.data.DataFeed.is_main","title":"is_main  <code>property</code>","text":"<pre><code>is_main: bool\n</code></pre> <p>Property to check DataFeed is main DataFeed or not</p>"},{"location":"reference/data/data/#lettrade.data.data.DataFeed.l","title":"l  <code>instance-attribute</code>","text":"<pre><code>l: LetDataFeedWrapper\n</code></pre> <p>LetTrade DataFeed wrapper using to manage index pointer of DataFeed</p>"},{"location":"reference/data/data/#lettrade.data.data.DataFeed.meta","title":"meta  <code>property</code>","text":"<pre><code>meta: dict\n</code></pre> <p>Property to get metadata of DataFeed</p>"},{"location":"reference/data/data/#lettrade.data.data.DataFeed.name","title":"name  <code>property</code>","text":"<pre><code>name: str\n</code></pre> <p>Property to get name of DataFeed</p>"},{"location":"reference/data/data/#lettrade.data.data.DataFeed.now","title":"now  <code>property</code>","text":"<pre><code>now: Timestamp\n</code></pre> <p>Property to get current index value of DataFeed</p>"},{"location":"reference/data/data/#lettrade.data.data.DataFeed.timeframe","title":"timeframe  <code>property</code>","text":"<pre><code>timeframe: TimeFrame\n</code></pre> <p>Property to get timeframe of DataFeed</p>"},{"location":"reference/data/data/#lettrade.data.data.DataFeed.bar","title":"bar","text":"<pre><code>bar(i: int = 0) -&gt; Timestamp\n</code></pre> <p>Get current pd.Timestamp value of DataFeed</p> <p>Parameters:</p> <ul> <li> <code>i</code>               (<code>int</code>, default:                   <code>0</code> )           \u2013            <p>Index. Defaults to 0.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Timestamp</code>           \u2013            <p>pd.Timestamp: description</p> </li> </ul> Source code in <code>lettrade/data/data.py</code> <pre><code>def bar(self, i: int = 0) -&gt; pd.Timestamp:\n    \"\"\"Get current pd.Timestamp value of DataFeed\n\n    Args:\n        i (int, optional): Index. Defaults to 0.\n\n    Returns:\n        pd.Timestamp: _description_\n    \"\"\"\n    return self.l.index[i]\n</code></pre>"},{"location":"reference/data/data/#lettrade.data.data.DataFeed.copy","title":"copy","text":"<pre><code>copy(deep: bool = False, **kwargs) -&gt; DataFeed\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>deep</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>description. Defaults to False.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>DataFeed</code> (              <code>DataFeed</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/data/data.py</code> <pre><code>def copy(self, deep: bool = False, **kwargs) -&gt; \"DataFeed\":\n    \"\"\"_summary_\n\n    Args:\n        deep (bool, optional): _description_. Defaults to False.\n\n    Returns:\n        DataFeed: _description_\n    \"\"\"\n    df = super().copy(deep=deep)\n    df = self.__class__(\n        data=df,\n        name=self.name,\n        timeframe=self.timeframe,\n        meta=self.meta.copy(),\n        **kwargs,\n    )\n    return df\n</code></pre>"},{"location":"reference/data/data/#lettrade.data.data.DataFeed.drop","title":"drop","text":"<pre><code>drop(\n    *args,\n    since: int | str | Timestamp | None = None,\n    to: int | str | Timestamp | None = None,\n    **kwargs\n) -&gt; None\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>since</code>               (<code>int | str | Timestamp | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>to</code>               (<code>int | str | Timestamp | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>description</p> </li> <li> <code>RuntimeError</code>             \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/data/data.py</code> <pre><code>def drop(\n    self,\n    *args,\n    since: int | str | pd.Timestamp | None = None,\n    to: int | str | pd.Timestamp | None = None,\n    **kwargs,\n) -&gt; None:\n    \"\"\"_summary_\n\n    Args:\n        since (int | str | pd.Timestamp | None, optional): _description_. Defaults to None.\n        to (int | str | pd.Timestamp | None, optional): _description_. Defaults to None.\n\n    Raises:\n        RuntimeError: _description_\n        RuntimeError: _description_\n    \"\"\"\n    if since is None and to is None:\n        super().drop(*args, **kwargs)\n        return\n\n    condiction = None\n\n    # Since\n    if since is not None:\n        if isinstance(since, int):\n            loc = self.l.index[since]\n        elif isinstance(since, str):\n            loc = pd.to_datetime(since, utc=True)\n        elif isinstance(since, pd.Timestamp):\n            loc = since\n        else:\n            raise RuntimeError(f\"DataFeed.drop since {since} is invalid\")\n        condiction = self.index &lt; loc\n\n    # To\n    if to is not None:\n        if isinstance(to, int):\n            loc = self.l.index[to]\n        elif isinstance(to, str):\n            loc = pd.to_datetime(to, utc=True)\n        elif isinstance(to, pd.Timestamp):\n            loc = to\n        else:\n            raise RuntimeError(f\"DataFeed.drop to {to} is invalid\")\n\n        if condiction is None:\n            condiction = self.index &gt; loc\n        else:\n            condiction = condiction | (self.index &gt; loc)\n\n    index = self[condiction].index\n    super().drop(index=index, inplace=True)\n    self.l.reset()\n\n    if __debug__:\n        logger.debug(\"BackTestDataFeed %s dropped %s rows\", self.name, len(index))\n</code></pre>"},{"location":"reference/data/data/#lettrade.data.data.DataFeed.next","title":"next","text":"<pre><code>next(size=1)\n</code></pre> <p>Load next data</p> <p>Parameters:</p> <ul> <li> <code>size</code>               (<code>int</code>, default:                   <code>1</code> )           \u2013            <p>description. Defaults to 1.</p> </li> </ul> Source code in <code>lettrade/data/data.py</code> <pre><code>def next(self, size=1):\n    \"\"\"Load next data\n\n    Args:\n        size (int, optional): _description_. Defaults to 1.\n    \"\"\"\n    self.l.next(size)\n</code></pre>"},{"location":"reference/data/data/#lettrade.data.data.DataFeed.push","title":"push","text":"<pre><code>push(\n    rows: list[list[int | float]],\n    unit: str | None = None,\n    utc: bool = True,\n    **kwargs\n)\n</code></pre> <p>Push new rows to DataFeed</p> <p>Parameters:</p> <ul> <li> <code>rows</code>               (<code>list[list[int | float]]</code>)           \u2013            <p>list of rows <code>[[\"timestamp\", \"open price\", \"high price\"...]]</code></p> </li> <li> <code>unit</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>pandas.Timestamp parsing unit. Defaults to None.</p> </li> <li> <code>utc</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>description. Defaults to True.</p> </li> </ul> Source code in <code>lettrade/data/data.py</code> <pre><code>def push(\n    self,\n    rows: list[list[int | float]],\n    unit: str | None = None,\n    utc: bool = True,\n    **kwargs,\n):\n    \"\"\"Push new rows to DataFeed\n\n    Args:\n        rows (list[list[int | float]]): list of rows `[[\"timestamp\", \"open price\", \"high price\"...]]`\n        unit (str | None, optional): pandas.Timestamp parsing unit. Defaults to None.\n        utc (bool, optional): _description_. Defaults to True.\n    \"\"\"\n    for row in rows:\n        dt = pd.to_datetime(row[0], unit=unit, utc=utc, **kwargs)\n        self.at[\n            dt,\n            (\n                \"open\",\n                \"high\",\n                \"low\",\n                \"close\",\n                \"volume\",\n            ),\n        ] = (\n            row[1],  # open\n            row[2],  # high\n            row[3],  # low\n            row[4],  # close\n            row[5],  # volume\n        )\n\n    if __debug__:\n        logger.debug(\"[%s] Update bar: \\n%s\", self.name, self.tail(len(rows)))\n</code></pre>"},{"location":"reference/data/error/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> error","text":""},{"location":"reference/data/error/#lettrade.data.error","title":"error","text":""},{"location":"reference/data/error/#lettrade.data.error.LetNoMoreDataFeedException","title":"LetNoMoreDataFeedException","text":"<p>               Bases: <code>LetException</code></p> <p>DataFeeder has no more data to feed</p>"},{"location":"reference/data/feeder/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> feeder","text":""},{"location":"reference/data/feeder/#lettrade.data.feeder","title":"feeder","text":""},{"location":"reference/data/feeder/#lettrade.data.feeder.DataFeeder","title":"DataFeeder","text":""},{"location":"reference/data/feeder/#lettrade.data.feeder.DataFeeder.is_continous","title":"is_continous  <code>property</code>","text":"<pre><code>is_continous\n</code></pre> <p>Flag check is realtime continous datafeeder</p>"},{"location":"reference/data/replay/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> replay","text":""},{"location":"reference/data/replay/#lettrade.data.replay","title":"replay","text":""},{"location":"reference/data/resample/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> resample","text":""},{"location":"reference/data/resample/#lettrade.data.resample","title":"resample","text":""},{"location":"reference/data/timeframe/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> timeframe","text":""},{"location":"reference/data/timeframe/#lettrade.data.timeframe","title":"timeframe","text":""},{"location":"reference/data/timeframe/#lettrade.data.timeframe.TimeFrame","title":"TimeFrame","text":"<pre><code>TimeFrame(tf: int | str | list | Timedelta | Self)\n</code></pre> <p>DataFeed TimeFrame</p> <p>Parameters:</p> <ul> <li> <code>tf</code>               (<code>int | str | list | Timedelta | TimeFrame</code>)           \u2013            <ul> <li><code>int</code>: TimeFrame in minutes. Example: TimeFrame(5) == TimeFrame(\"5m\")</li> <li><code>str</code>: string format of TimeFrame in <code>s</code>, <code>m</code>, <code>h</code>, <code>d</code>, <code>w</code>.</li> </ul> </li> </ul> <p>Raises:     RuntimeError: description</p> Source code in <code>lettrade/data/timeframe.py</code> <pre><code>def __init__(self, tf: int | str | list | pd.Timedelta | Self) -&gt; None:\n    \"\"\"_summary_\n\n    Args:\n        tf (int | str | list | pd.Timedelta | TimeFrame):\n            - `int`: TimeFrame in minutes. Example: TimeFrame(5) == TimeFrame(\"5m\")\n            - `str`: string format of TimeFrame in `s`, `m`, `h`, `d`, `w`.\n    Raises:\n        RuntimeError: _description_\n    \"\"\"\n    if isinstance(tf, TimeFrame):\n        self.value = tf.value\n        self.unit = tf.unit\n    elif isinstance(tf, str):\n        match = _pattern_timeframe_str.search(tf)\n        if not match:\n            raise RuntimeError(f\"TimeFrame value {tf} is invalid\")\n\n        self.value = int(match.group(1))\n        self.unit = match.group(2)\n    elif isinstance(tf, int):\n        self.value = tf\n        self.unit = \"m\"\n    elif isinstance(tf, list):\n        self.value = int(tf[0])\n        self.unit = tf[1]\n    elif isinstance(tf, pd.Timedelta):\n        map = TIMEFRAME_DELTA_2_STR[tf]\n        self.value = map[0]\n        self.unit = map[1]\n    else:\n        raise RuntimeError(f\"Timeframe {tf} is invalid format\")\n\n    # Validate\n    self._validate()\n\n    # Setup\n    self.unit_pandas = TIMEFRAME_UNIT_LET_2_PANDAS[self.unit]\n    self.delta = pd.Timedelta(self.value, self.unit_pandas)\n\n    # Warning\n    if self.delta not in TIMEFRAME_DELTA_2_STR:\n        if self.unit not in [\"s\", \"m\"]:\n            logger.warning(\n                \"Unsupport TimeFrame(%s), some function may not work floor()/ceil()...\",\n                self.delta,\n            )\n</code></pre>"},{"location":"reference/data/timeframe/#lettrade.data.timeframe.TimeFrame.string","title":"string  <code>property</code>","text":"<pre><code>string\n</code></pre> <p>TimeFrame as lettrade string</p>"},{"location":"reference/data/timeframe/#lettrade.data.timeframe.TimeFrame.string_pandas","title":"string_pandas  <code>property</code>","text":"<pre><code>string_pandas\n</code></pre> <p>TimeFrame as pandas string</p>"},{"location":"reference/data/timeframe/#lettrade.data.timeframe.TimeFrame.ceil","title":"ceil","text":"<pre><code>ceil(at: datetime | Timestamp) -&gt; Timestamp\n</code></pre> <p>Get ceil of TimeFrame</p> <p>Parameters:</p> <ul> <li> <code>at</code>               (<code>datetime | Timestamp</code>)           \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Timestamp</code>           \u2013            <p>pd.Timestamp: description</p> </li> </ul> Source code in <code>lettrade/data/timeframe.py</code> <pre><code>def ceil(self, at: datetime | pd.Timestamp) -&gt; pd.Timestamp:\n    \"\"\"Get ceil of TimeFrame\n\n    Args:\n        at (datetime | pd.Timestamp): _description_\n\n    Returns:\n        pd.Timestamp: _description_\n    \"\"\"\n    if isinstance(at, datetime):\n        at = pd.Timestamp(at)\n\n    freq = self.string_pandas\n    if self.unit == \"m\":\n        freq += \"in\"\n    return at.ceil(freq=freq)\n</code></pre>"},{"location":"reference/data/timeframe/#lettrade.data.timeframe.TimeFrame.floor","title":"floor","text":"<pre><code>floor(at: datetime | Timestamp) -&gt; Timestamp\n</code></pre> <p>Get floor of TimeFrame</p> <p>Parameters:</p> <ul> <li> <code>at</code>               (<code>datetime | Timestamp</code>)           \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Timestamp</code>           \u2013            <p>pd.Timestamp: description</p> </li> </ul> Source code in <code>lettrade/data/timeframe.py</code> <pre><code>def floor(self, at: datetime | pd.Timestamp) -&gt; pd.Timestamp:\n    \"\"\"Get floor of TimeFrame\n\n    Args:\n        at (datetime | pd.Timestamp): _description_\n\n    Returns:\n        pd.Timestamp: _description_\n    \"\"\"\n    if isinstance(at, datetime):\n        at = pd.Timestamp(at)\n\n    freq = self.string_pandas\n    if self.unit == \"m\":\n        freq += \"in\"\n    return at.floor(freq=freq)\n</code></pre>"},{"location":"reference/data/wrapper/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> wrapper","text":""},{"location":"reference/data/wrapper/#lettrade.data.wrapper","title":"wrapper","text":""},{"location":"reference/data/wrapper/#lettrade.data.wrapper.LetDataFeedWrapper","title":"LetDataFeedWrapper","text":"<pre><code>LetDataFeedWrapper(data: DataFrame)\n</code></pre> <p>Wrap DataFeed</p> <p>Parameters:</p> <ul> <li> <code>data</code>               (<code>DataFrame</code>)           \u2013            <p>DataFeed object</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/data/wrapper.py</code> <pre><code>def __init__(self, data: pd.DataFrame) -&gt; None:\n    \"\"\"_summary_\n\n    Args:\n        data (pd.DataFrame): DataFeed object\n\n    Raises:\n        RuntimeError: _description_\n    \"\"\"\n    # Validate new instance not load an existed wrapper\n    if hasattr(data.index, __LET_WRAPPER_KEY__):\n        raise RuntimeError(\"DataFeed.index reuses a loaded wrapper\")\n    for column in data.columns:\n        if hasattr(data[column], __LET_WRAPPER_KEY__):\n            raise RuntimeError(f\"DataFeed.{column} reuses a loaded wrapper\")\n\n    self._pointer = 0\n    self._data = data\n    self._iloc = LetILocWrapper(self._data, self)\n</code></pre>"},{"location":"reference/data/wrapper/#lettrade.data.wrapper.LetDataFeedWrapper.iloc","title":"iloc  <code>property</code>","text":"<pre><code>iloc: LetILocWrapper | _iLocIndexer\n</code></pre> <p>Get iloc wrapper of DataFeed</p>"},{"location":"reference/data/wrapper/#lettrade.data.wrapper.LetDataFeedWrapper.pointer","title":"pointer  <code>property</code>","text":"<pre><code>pointer\n</code></pre> <p>Get current pointer value</p>"},{"location":"reference/data/wrapper/#lettrade.data.wrapper.LetDataFeedWrapper.pointer_start","title":"pointer_start  <code>property</code>","text":"<pre><code>pointer_start\n</code></pre> <p>Get start pointer value</p>"},{"location":"reference/data/wrapper/#lettrade.data.wrapper.LetDataFeedWrapper.pointer_stop","title":"pointer_stop  <code>property</code>","text":"<pre><code>pointer_stop\n</code></pre> <p>Get stop pointer value</p>"},{"location":"reference/data/wrapper/#lettrade.data.wrapper.LetDataFeedWrapper.go_start","title":"go_start","text":"<pre><code>go_start() -&gt; None\n</code></pre> <p>Move pointer to begin</p> Source code in <code>lettrade/data/wrapper.py</code> <pre><code>def go_start(self) -&gt; None:\n    \"\"\"Move pointer to begin\"\"\"\n    self._pointer = 0\n</code></pre>"},{"location":"reference/data/wrapper/#lettrade.data.wrapper.LetDataFeedWrapper.go_stop","title":"go_stop","text":"<pre><code>go_stop() -&gt; None\n</code></pre> <p>Move pointer to end</p> Source code in <code>lettrade/data/wrapper.py</code> <pre><code>def go_stop(self) -&gt; None:\n    \"\"\"Move pointer to end\"\"\"\n    self._pointer = len(self._data) - 1\n</code></pre>"},{"location":"reference/data/wrapper/#lettrade.data.wrapper.LetDataFeedWrapper.next","title":"next","text":"<pre><code>next(size=1)\n</code></pre> <p>Move pointer to next</p> Source code in <code>lettrade/data/wrapper.py</code> <pre><code>def next(self, size=1):\n    \"\"\"Move pointer to next\"\"\"\n    self._pointer += size\n</code></pre>"},{"location":"reference/data/wrapper/#lettrade.data.wrapper.LetDataFeedWrapper.reset","title":"reset","text":"<pre><code>reset() -&gt; None\n</code></pre> <p>Reset pointer to begin</p> Source code in <code>lettrade/data/wrapper.py</code> <pre><code>def reset(self) -&gt; None:\n    \"\"\"Reset pointer to begin\"\"\"\n    self._pointer = 0\n</code></pre>"},{"location":"reference/data/wrapper/#lettrade.data.wrapper.LetILocWrapper","title":"LetILocWrapper","text":"<pre><code>LetILocWrapper(data, owner)\n</code></pre> <p>Wrap iloc object from DataFeed</p> <p>Parameters:</p> <ul> <li> <code>data</code>               (<code>_type_</code>)           \u2013            <p>DataFeed or pd.Series</p> </li> <li> <code>owner</code>               (<code>_type_</code>)           \u2013            <p>DataFeed object</p> </li> </ul> Source code in <code>lettrade/data/wrapper.py</code> <pre><code>def __init__(self, data, owner) -&gt; None:\n    \"\"\"_summary_\n\n    Args:\n        data (_type_): DataFeed or pd.Series\n        owner (_type_): DataFeed object\n    \"\"\"\n    self._data = data\n    self._owner = owner\n</code></pre>"},{"location":"reference/data/wrapper/#lettrade.data.wrapper.LetIndexWapper","title":"LetIndexWapper","text":"<pre><code>LetIndexWapper(data, owner)\n</code></pre> <p>Wrap DataFeed.index</p> <p>Parameters:</p> <ul> <li> <code>data</code>               (<code>_type_</code>)           \u2013            <p>pandas.DatetimeIndex</p> </li> <li> <code>owner</code>               (<code>_type_</code>)           \u2013            <p>DataFeed object</p> </li> </ul> Source code in <code>lettrade/data/wrapper.py</code> <pre><code>def __init__(self, data, owner) -&gt; None:\n    \"\"\"_summary_\n\n    Args:\n        data (_type_): pandas.DatetimeIndex\n        owner (_type_): DataFeed object\n    \"\"\"\n    self._data = data\n    self._owner = owner\n</code></pre>"},{"location":"reference/data/wrapper/#lettrade.data.wrapper.LetSeriesWapper","title":"LetSeriesWapper","text":"<pre><code>LetSeriesWapper(data, owner)\n</code></pre> <p>Wrap DataFeed column</p> Source code in <code>lettrade/data/wrapper.py</code> <pre><code>def __init__(self, data, owner) -&gt; None:\n    self._data = data\n    self._owner = owner\n    self._iloc = LetILocWrapper(self._data, self._owner)\n</code></pre>"},{"location":"reference/data/extra/","title":"Index","text":""},{"location":"reference/data/extra/#lettrade.data.extra","title":"extra","text":""},{"location":"reference/data/extra/csv/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> csv","text":""},{"location":"reference/data/extra/csv/#lettrade.data.extra.csv","title":"csv","text":""},{"location":"reference/data/extra/csv/#lettrade.data.extra.csv.csv_export","title":"csv_export","text":"<pre><code>csv_export(\n    dataframe: DataFrame,\n    path: str | Path = \"data/data.csv\",\n    tz: timezone = None,\n    round: int = 5,\n    **kwargs\n) -&gt; DataFrame\n</code></pre> <p>Dump DataFeed to csv file. Inject function <code>pandas.DataFrame.let_to_csv()</code></p> <p>Parameters:</p> <ul> <li> <code>dataframe</code>               (<code>DataFrame</code>)           \u2013            <p>description</p> </li> <li> <code>path</code>               (<code>str | Path</code>, default:                   <code>'data/data.csv'</code> )           \u2013            <p>description. Defaults to \"data/data.csv\".</p> </li> <li> <code>tz</code>               (<code>timezone</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>round</code>               (<code>int</code>, default:                   <code>5</code> )           \u2013            <p>description. Defaults to 5.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>DataFrame</code>           \u2013            <p>pd.DataFrame: description</p> </li> </ul> Source code in <code>lettrade/data/extra/csv.py</code> <pre><code>def csv_export(\n    dataframe: pd.DataFrame,\n    path: str | Path = \"data/data.csv\",\n    tz: timezone = None,\n    round: int = 5,\n    **kwargs,\n) -&gt; pd.DataFrame:\n    \"\"\"Dump DataFeed to csv file. Inject function `pandas.DataFrame.let_to_csv()`\n\n    Args:\n        dataframe (pd.DataFrame): _description_\n        path (str | Path, optional): _description_. Defaults to \"data/data.csv\".\n        tz (timezone, optional): _description_. Defaults to None.\n        round (int, optional): _description_. Defaults to 5.\n\n    Returns:\n        pd.DataFrame: _description_\n    \"\"\"\n    dataframe = dataframe.astype(\n        dtype={\n            \"open\": \"float\",\n            \"high\": \"float\",\n            \"low\": \"float\",\n            \"close\": \"float\",\n            \"volume\": \"float\",\n        }\n    )\n\n    if not isinstance(dataframe.index, pd.DatetimeIndex):\n        dataframe = dataframe.set_index(\"datetime\")\n\n    if tz is not None:\n        dataframe.index = dataframe.index.tz_convert(tz)\n\n    if round &gt; 0:\n        dataframe = dataframe.round(round)\n\n    if not isinstance(path, Path):\n        path = Path(path)\n\n    path.parent.mkdir(parents=True, exist_ok=True)\n    dataframe.to_csv(path, **kwargs)\n\n    logger.info(\"Saved data to %s\", path)\n    return dataframe\n</code></pre>"},{"location":"reference/exchange/","title":"Index","text":""},{"location":"reference/exchange/#lettrade.exchange","title":"exchange","text":"<p>Exchange implements</p>"},{"location":"reference/exchange/#lettrade.exchange--stable-exchanges","title":"Stable Exchanges","text":"<ul> <li>BackTest: Backtesting exchange</li> <li>MetaTrader: MetaTrader 5 live data and trading</li> <li>CCXT: CCXT CryptoCurrency live data and trading</li> </ul>"},{"location":"reference/exchange/base/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> base","text":""},{"location":"reference/exchange/base/#lettrade.exchange.base","title":"base","text":""},{"location":"reference/exchange/base/#lettrade.exchange.base.BaseTransaction","title":"BaseTransaction","text":"<pre><code>BaseTransaction(\n    id: str, exchange: Exchange, data: DataFeed, size: float\n)\n</code></pre> <p>Base class of Execution/Order/Position</p> <p>Parameters:</p> <ul> <li> <code>id</code>               (<code>str</code>)           \u2013            <p>description</p> </li> <li> <code>exchange</code>               (<code>Exchange</code>)           \u2013            <p>description</p> </li> <li> <code>data</code>               (<code>DataFeed</code>)           \u2013            <p>description</p> </li> <li> <code>size</code>               (<code>float</code>)           \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/base.py</code> <pre><code>def __init__(\n    self,\n    id: str,\n    exchange: \"Exchange\",\n    data: \"DataFeed\",\n    size: float,\n) -&gt; None:\n    \"\"\"_summary_\n\n    Args:\n        id (str): _description_\n        exchange (Exchange): _description_\n        data (DataFeed): _description_\n        size (float): _description_\n    \"\"\"\n    self.id: str = id\n    self.exchange: \"Exchange\" = exchange\n    self.data: \"DataFeed\" = data\n    self.size: float = size\n</code></pre>"},{"location":"reference/exchange/base/#lettrade.exchange.base.BaseTransaction.is_long","title":"is_long  <code>property</code>","text":"<pre><code>is_long: bool\n</code></pre> <p>True if side is long (size is positive).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True/False</p> </li> </ul>"},{"location":"reference/exchange/base/#lettrade.exchange.base.BaseTransaction.is_short","title":"is_short  <code>property</code>","text":"<pre><code>is_short: bool\n</code></pre> <p>True if side is short (size is negative).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/base/#lettrade.exchange.base.BaseTransaction.side","title":"side  <code>property</code>","text":"<pre><code>side: TradeSide\n</code></pre> <p>True if side is short (size is negative).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>TradeSide</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/base/#lettrade.exchange.base.OrderState","title":"OrderState","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>Order state</p>"},{"location":"reference/exchange/base/#lettrade.exchange.base.OrderState.Canceled","title":"Canceled  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Canceled = 'canceled'\n</code></pre> <p>Canceled</p>"},{"location":"reference/exchange/base/#lettrade.exchange.base.OrderState.Filled","title":"Filled  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Filled = 'filled'\n</code></pre> <p>Full filled</p>"},{"location":"reference/exchange/base/#lettrade.exchange.base.OrderState.Partial","title":"Partial  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Partial = 'partial'\n</code></pre> <p>Partial filled, still wait for full fill</p>"},{"location":"reference/exchange/base/#lettrade.exchange.base.OrderState.Pending","title":"Pending  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Pending = 'pending'\n</code></pre> <p>Pending order, wait for exchange accept</p>"},{"location":"reference/exchange/base/#lettrade.exchange.base.OrderState.Placed","title":"Placed  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Placed = 'place'\n</code></pre> <p>Placed order on exchange</p>"},{"location":"reference/exchange/base/#lettrade.exchange.base.OrderType","title":"OrderType","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>Order type</p>"},{"location":"reference/exchange/base/#lettrade.exchange.base.OrderType.Limit","title":"Limit  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Limit = 'limit'\n</code></pre> <p>Limit order</p>"},{"location":"reference/exchange/base/#lettrade.exchange.base.OrderType.Market","title":"Market  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Market = 'market'\n</code></pre> <p>Market order</p>"},{"location":"reference/exchange/base/#lettrade.exchange.base.OrderType.Stop","title":"Stop  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Stop = 'stop'\n</code></pre> <p>Stop order</p>"},{"location":"reference/exchange/base/#lettrade.exchange.base.OrderType.StopLimit","title":"StopLimit  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>StopLimit = 'stoplimit'\n</code></pre> <p>Stop-Limit order</p>"},{"location":"reference/exchange/base/#lettrade.exchange.base.PositionState","title":"PositionState","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>Position state</p>"},{"location":"reference/exchange/base/#lettrade.exchange.base.PositionState.Exit","title":"Exit  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Exit = 'exit'\n</code></pre> <p>Exited state</p>"},{"location":"reference/exchange/base/#lettrade.exchange.base.PositionState.Open","title":"Open  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Open = 'open'\n</code></pre> <p>Opening state</p>"},{"location":"reference/exchange/base/#lettrade.exchange.base.TradeSide","title":"TradeSide","text":"<p>               Bases: <code>int</code>, <code>Enum</code></p> <p>Side of Trade</p>"},{"location":"reference/exchange/base/#lettrade.exchange.base.TradeSide.Buy","title":"Buy  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Buy = 1\n</code></pre> <p>Buy/Long side</p>"},{"location":"reference/exchange/base/#lettrade.exchange.base.TradeSide.Sell","title":"Sell  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Sell = -1\n</code></pre> <p>Sell/Short side</p>"},{"location":"reference/exchange/error/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> error","text":""},{"location":"reference/exchange/error/#lettrade.exchange.error","title":"error","text":""},{"location":"reference/exchange/error/#lettrade.exchange.error.LetOrderException","title":"LetOrderException","text":"<p>               Bases: <code>LetException</code></p> <p>Base order exception</p>"},{"location":"reference/exchange/error/#lettrade.exchange.error.LetOrderInvalidException","title":"LetOrderInvalidException","text":"<p>               Bases: <code>LetOrderException</code></p> <p>Order place is invalid exception</p>"},{"location":"reference/exchange/error/#lettrade.exchange.error.LetOrderValidateException","title":"LetOrderValidateException","text":"<p>               Bases: <code>LetOrderException</code></p> <p>Order attribute validate exception</p>"},{"location":"reference/exchange/exchange/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> exchange","text":""},{"location":"reference/exchange/exchange/#lettrade.exchange.exchange","title":"exchange","text":""},{"location":"reference/exchange/exchange/#lettrade.exchange.exchange.Exchange","title":"Exchange","text":"<pre><code>Exchange(**kwargs)\n</code></pre> <p>Base Exchange class to handle trading</p> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def __init__(self, **kwargs):\n    self._config = kwargs\n\n    self.orders = dict()\n    self.history_orders = dict()\n    self.positions = dict()\n    self.history_positions = dict()\n    self.executions = dict()\n\n    self._state = ExchangeState.Init\n</code></pre>"},{"location":"reference/exchange/exchange/#lettrade.exchange.exchange.Exchange.data","title":"data  <code>instance-attribute</code>","text":"<pre><code>data: DataFeed\n</code></pre> <p>main DataFeed</p>"},{"location":"reference/exchange/exchange/#lettrade.exchange.exchange.Exchange.datas","title":"datas  <code>instance-attribute</code>","text":"<pre><code>datas: list[DataFeed]\n</code></pre> <p>List of all available DataFeed</p>"},{"location":"reference/exchange/exchange/#lettrade.exchange.exchange.Exchange.executions","title":"executions  <code>instance-attribute</code>","text":"<pre><code>executions: dict[str, Execution] = dict()\n</code></pre> <p>Execution dict by <code>Execution.id</code> key</p>"},{"location":"reference/exchange/exchange/#lettrade.exchange.exchange.Exchange.history_orders","title":"history_orders  <code>instance-attribute</code>","text":"<pre><code>history_orders: dict[str, Order] = dict()\n</code></pre> <p>History Order dict by <code>Order.id</code> key</p>"},{"location":"reference/exchange/exchange/#lettrade.exchange.exchange.Exchange.history_positions","title":"history_positions  <code>instance-attribute</code>","text":"<pre><code>history_positions: dict[str, Position] = dict()\n</code></pre> <p>History Position dict by <code>Position.id</code> key</p>"},{"location":"reference/exchange/exchange/#lettrade.exchange.exchange.Exchange.orders","title":"orders  <code>instance-attribute</code>","text":"<pre><code>orders: dict[str, Order] = dict()\n</code></pre> <p>Available Order dict by <code>Order.id</code> key</p>"},{"location":"reference/exchange/exchange/#lettrade.exchange.exchange.Exchange.positions","title":"positions  <code>instance-attribute</code>","text":"<pre><code>positions: dict[str, Position] = dict()\n</code></pre> <p>Available Position dict by <code>Position.id</code> key</p>"},{"location":"reference/exchange/exchange/#lettrade.exchange.exchange.Exchange.init","title":"init","text":"<pre><code>init(\n    brain: Brain,\n    feeder: DataFeeder,\n    account: Account,\n    commander: Commander,\n) -&gt; None\n</code></pre> <p>Init Exchange dependencies. Set data/datas from feeder. Set state to <code>ExchangeState.Start</code>.</p> <p>Parameters:</p> <ul> <li> <code>brain</code>               (<code>Brain</code>)           \u2013            <p>description</p> </li> <li> <code>feeder</code>               (<code>DataFeeder</code>)           \u2013            <p>description</p> </li> <li> <code>account</code>               (<code>Account</code>)           \u2013            <p>description</p> </li> <li> <code>commander</code>               (<code>Commander</code>)           \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def init(\n    self,\n    brain: \"Brain\",\n    feeder: DataFeeder,\n    account: Account,\n    commander: Commander,\n) -&gt; None:\n    \"\"\"Init Exchange dependencies.\n    Set data/datas from feeder.\n    Set state to `ExchangeState.Start`.\n\n    Args:\n        brain (Brain): _description_\n        feeder (DataFeeder): _description_\n        account (Account): _description_\n        commander (Commander): _description_\n    \"\"\"\n    self._brain = brain\n    self._feeder = feeder\n    self._account = account\n    self._commander = commander\n\n    self.data = self._feeder.data\n    self.datas = self._feeder.datas\n\n    self._account.init(exchange=self)\n\n    self._state = ExchangeState.Start\n</code></pre>"},{"location":"reference/exchange/exchange/#lettrade.exchange.exchange.Exchange.new_order","title":"new_order  <code>abstractmethod</code>","text":"<pre><code>new_order(\n    size: float,\n    limit: float | None = None,\n    stop: float | None = None,\n    sl: float | None = None,\n    tp: float | None = None,\n    tag: str | None = None,\n    *args,\n    **kwargs\n) -&gt; OrderResult\n</code></pre> <p>Place new <code>Order</code></p> <p>Parameters:</p> <ul> <li> <code>size</code>               (<code>float</code>)           \u2013            <p>description</p> </li> <li> <code>limit</code>               (<code>float | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>stop</code>               (<code>float | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>sl</code>               (<code>float | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>tp</code>               (<code>float | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>tag</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>OrderResult</code> (              <code>OrderResult</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>@abstractmethod\ndef new_order(\n    self,\n    size: float,\n    limit: float | None = None,\n    stop: float | None = None,\n    sl: float | None = None,\n    tp: float | None = None,\n    tag: str | None = None,\n    *args,\n    **kwargs,\n) -&gt; OrderResult:\n    \"\"\"Place new `Order`\n\n    Args:\n        size (float): _description_\n        limit (float | None, optional): _description_. Defaults to None.\n        stop (float | None, optional): _description_. Defaults to None.\n        sl (float | None, optional): _description_. Defaults to None.\n        tp (float | None, optional): _description_. Defaults to None.\n        tag (str | None, optional): _description_. Defaults to None.\n\n    Returns:\n        OrderResult: _description_\n    \"\"\"\n    raise NotImplementedError(\"Exchange.new_order not implement yet\")\n</code></pre>"},{"location":"reference/exchange/exchange/#lettrade.exchange.exchange.Exchange.next","title":"next","text":"<pre><code>next()\n</code></pre> <p>Call after data feeded and before strategy.next()</p> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def next(self):\n    \"\"\"Call after data feeded and before strategy.next()\"\"\"\n    self._account.next()\n</code></pre>"},{"location":"reference/exchange/exchange/#lettrade.exchange.exchange.Exchange.next_next","title":"next_next","text":"<pre><code>next_next()\n</code></pre> <p>Call after strategy.next()</p> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def next_next(self):\n    \"\"\"Call after strategy.next()\"\"\"\n    self._account.next_next()\n</code></pre>"},{"location":"reference/exchange/exchange/#lettrade.exchange.exchange.Exchange.on_execution","title":"on_execution","text":"<pre><code>on_execution(\n    execution: Execution,\n    broadcast: bool | None = True,\n    **kwargs\n) -&gt; None\n</code></pre> <p>Receive Execution event from exchange then store and notify Brain</p> <p>Parameters:</p> <ul> <li> <code>execution</code>               (<code>Execution</code>)           \u2013            <p>description</p> </li> <li> <code>broadcast</code>               (<code>bool | None</code>, default:                   <code>True</code> )           \u2013            <p>description. Defaults to True.</p> </li> </ul> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def on_execution(\n    self,\n    execution: Execution,\n    broadcast: bool | None = True,\n    **kwargs,\n) -&gt; None:\n    \"\"\"Receive Execution event from exchange then store and notify Brain\n\n    Args:\n        execution (Execution): _description_\n        broadcast (bool | None, optional): _description_. Defaults to True.\n    \"\"\"\n    self.on_executions(executions=[execution], broadcast=broadcast, **kwargs)\n</code></pre>"},{"location":"reference/exchange/exchange/#lettrade.exchange.exchange.Exchange.on_executions","title":"on_executions","text":"<pre><code>on_executions(\n    executions: list[Execution],\n    broadcast: bool | None = True,\n    **kwargs\n) -&gt; None\n</code></pre> <p>Receive Execution event from exchange then store and notify Brain</p> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def on_executions(\n    self,\n    executions: list[Execution],\n    broadcast: bool | None = True,\n    **kwargs,\n) -&gt; None:\n    \"\"\"\n    Receive Execution event from exchange then store and notify Brain\n    \"\"\"\n    for execution in executions:\n        if not isinstance(execution, Execution):\n            raise RuntimeError(f\"{execution} is not instance of type Execution\")\n\n        if execution.id in self.executions:\n            # Merge to keep Execution handler for strategy using\n            # when strategy want to store Execution object\n            # and object will be automatic update directly\n            self.executions[execution.id].merge(execution)\n            execution = self.executions[execution.id]\n        else:\n            self.executions[execution.id] = execution\n\n    if self._state != ExchangeState.Run:\n        return\n\n    if broadcast:\n        self._brain.on_executions(executions)\n</code></pre>"},{"location":"reference/exchange/exchange/#lettrade.exchange.exchange.Exchange.on_order","title":"on_order","text":"<pre><code>on_order(\n    order: Order, broadcast: bool | None = True, **kwargs\n) -&gt; None\n</code></pre> <p>Receive order event from exchange then store and notify Brain</p> <p>Parameters:</p> <ul> <li> <code>order</code>               (<code>Order</code>)           \u2013            <p>description</p> </li> <li> <code>broadcast</code>               (<code>bool | None</code>, default:                   <code>True</code> )           \u2013            <p>description. Defaults to True.</p> </li> </ul> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def on_order(\n    self,\n    order: Order,\n    broadcast: bool | None = True,\n    **kwargs,\n) -&gt; None:\n    \"\"\"Receive order event from exchange then store and notify Brain\n\n    Args:\n        order (Order): _description_\n        broadcast (bool | None, optional): _description_. Defaults to True.\n    \"\"\"\n    self.on_orders(orders=[order], broadcast=broadcast, **kwargs)\n</code></pre>"},{"location":"reference/exchange/exchange/#lettrade.exchange.exchange.Exchange.on_orders","title":"on_orders","text":"<pre><code>on_orders(\n    orders: list[Order],\n    broadcast: bool | None = True,\n    **kwargs\n) -&gt; None\n</code></pre> <p>Receive orders event from exchange then store and notify Brain</p> <p>Parameters:</p> <ul> <li> <code>orders</code>               (<code>list[Order]</code>)           \u2013            <p>description</p> </li> <li> <code>broadcast</code>               (<code>bool | None</code>, default:                   <code>True</code> )           \u2013            <p>description. Defaults to True.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def on_orders(\n    self,\n    orders: list[Order],\n    broadcast: bool | None = True,\n    **kwargs,\n) -&gt; None:\n    \"\"\"Receive orders event from exchange then store and notify Brain\n\n    Args:\n        orders (list[Order]): _description_\n        broadcast (bool | None, optional): _description_. Defaults to True.\n\n    Raises:\n        RuntimeError: _description_\n    \"\"\"\n    for order in orders:\n        if not isinstance(order, Order):\n            raise RuntimeError(f\"{order} is not instance of type Order\")\n\n        if order.is_closed:\n            if order.id in self.history_orders:\n                logger.warning(\"Order closed recall: %s\", order)\n\n            self.history_orders[order.id] = order\n            if order.id in self.orders:\n                del self.orders[order.id]\n        else:\n            if order.id in self.history_orders:\n                raise RuntimeError(f\"Order {order.id} closed\")\n\n            if order.id in self.orders:\n                # Merge to keep Order handler for strategy using\n                # when strategy want to store Order object\n                # and object will be automatic update directly\n                self.orders[order.id].merge(order)\n                order = self.orders[order.id]\n            else:\n                self.orders[order.id] = order\n\n    if self._state != ExchangeState.Run:\n        return\n\n    if broadcast:\n        self._brain.on_orders(orders)\n</code></pre>"},{"location":"reference/exchange/exchange/#lettrade.exchange.exchange.Exchange.on_position","title":"on_position","text":"<pre><code>on_position(\n    position: Position,\n    broadcast: bool | None = True,\n    **kwargs\n) -&gt; None\n</code></pre> <p>Receive Position event from exchange then store and notify Brain</p> <p>Parameters:</p> <ul> <li> <code>position</code>               (<code>Position</code>)           \u2013            <p>new comming <code>Position</code></p> </li> <li> <code>broadcast</code>               (<code>bool | None</code>, default:                   <code>True</code> )           \u2013            <p>Flag notify to Brain. Defaults to True.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>validate <code>Position</code> instance</p> </li> </ul> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def on_position(\n    self,\n    position: Position,\n    broadcast: bool | None = True,\n    **kwargs,\n) -&gt; None:\n    \"\"\"Receive Position event from exchange then store and notify Brain\n\n    Args:\n        position (Position): new comming `Position`\n        broadcast (bool | None, optional): Flag notify to Brain. Defaults to True.\n\n    Raises:\n        RuntimeError: validate `Position` instance\n    \"\"\"\n    self.on_positions(positions=[position], broadcast=broadcast, **kwargs)\n</code></pre>"},{"location":"reference/exchange/exchange/#lettrade.exchange.exchange.Exchange.on_positions","title":"on_positions","text":"<pre><code>on_positions(\n    positions: list[Position],\n    broadcast: bool | None = True,\n    **kwargs\n) -&gt; None\n</code></pre> <p>Receive Positions event from exchange then store and notify Brain</p> <p>Parameters:</p> <ul> <li> <code>positions</code>               (<code>list[Position]</code>)           \u2013            <p>list of new comming <code>Position</code></p> </li> <li> <code>broadcast</code>               (<code>bool | None</code>, default:                   <code>True</code> )           \u2013            <p>Flag notify to Brain. Defaults to True.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>validate <code>Position</code> instance</p> </li> </ul> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def on_positions(\n    self,\n    positions: list[Position],\n    broadcast: bool | None = True,\n    **kwargs,\n) -&gt; None:\n    \"\"\"Receive Positions event from exchange then store and notify Brain\n\n    Args:\n        positions (list[Position]): list of new comming `Position`\n        broadcast (bool | None, optional): Flag notify to Brain. Defaults to True.\n\n    Raises:\n        RuntimeError: validate `Position` instance\n    \"\"\"\n    for position in positions:\n        if not isinstance(position, Position):\n            raise RuntimeError(f\"{position} is not instance of type Position\")\n\n        if position.is_exited:\n            if position.id in self.history_positions:\n                logger.warning(\"Position exited recall: %s\", position)\n\n            self.history_positions[position.id] = position\n            if position.id in self.positions:\n                del self.positions[position.id]\n\n            # self._account._on_position_exit(position)\n        else:\n            if position.id in self.history_positions:\n                raise RuntimeError(f\"Position {position.id} closed: {position}\")\n            if position.id in self.positions:\n                # Merge to keep Position handler for strategy using\n                # when strategy want to store Position object\n                # and object will be automatic update directly\n                self.positions[position.id].merge(position)\n                position = self.positions[position.id]\n            else:\n                self.positions[position.id] = position\n                # self._account._on_position_entry(position)\n\n    self._account.on_positions(positions)\n\n    if self._state != ExchangeState.Run:\n        return\n\n    if broadcast:\n        self._brain.on_positions(positions)\n</code></pre>"},{"location":"reference/exchange/exchange/#lettrade.exchange.exchange.Exchange.start","title":"start","text":"<pre><code>start() -&gt; None\n</code></pre> <p>Start of Exchange by: - Start account. - Set state to <code>ExchangeState.Run</code> ready for next().</p> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def start(self) -&gt; None:\n    \"\"\"Start of Exchange by:\n    - Start account.\n    - Set state to `ExchangeState.Run` ready for next().\n    \"\"\"\n    self._account.start()\n    self._state = ExchangeState.Run\n</code></pre>"},{"location":"reference/exchange/exchange/#lettrade.exchange.exchange.Exchange.stop","title":"stop","text":"<pre><code>stop() -&gt; None\n</code></pre> <p>Stop Exchange</p> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def stop(self) -&gt; None:\n    \"\"\"Stop Exchange\"\"\"\n    self._state = ExchangeState.Stop\n    self._account.stop()\n</code></pre>"},{"location":"reference/exchange/execution/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> execution","text":""},{"location":"reference/exchange/execution/#lettrade.exchange.execution","title":"execution","text":""},{"location":"reference/exchange/execution/#lettrade.exchange.execution.Execution","title":"Execution","text":"<pre><code>Execution(\n    id: str,\n    exchange: Exchange,\n    data: DataFeed,\n    size: float,\n    price: float,\n    at: float,\n    order_id: str | None = None,\n    order: Order | None = None,\n    position_id: str | None = None,\n    position: Position | None = None,\n    **kwargs\n)\n</code></pre> <p>               Bases: <code>BaseTransaction</code></p> <p>Execution</p> Source code in <code>lettrade/exchange/execution.py</code> <pre><code>def __init__(\n    self,\n    id: str,\n    exchange: \"Exchange\",\n    data: \"DataFeed\",\n    size: float,\n    price: float,\n    at: float,\n    order_id: str | None = None,\n    order: \"Order | None\" = None,\n    position_id: str | None = None,\n    position: \"Position | None\" = None,\n    **kwargs,\n):\n    super().__init__(\n        id=id,\n        exchange=exchange,\n        data=data,\n        size=size,\n        **kwargs,\n    )\n    self.order_id = order_id\n    self.order: \"Order\" = order\n    self.position_id = position_id\n    self.position: \"Position\" = position\n    self.price = price\n    self.at = at\n</code></pre>"},{"location":"reference/exchange/execution/#lettrade.exchange.execution.Execution.is_long","title":"is_long  <code>property</code>","text":"<pre><code>is_long: bool\n</code></pre> <p>True if side is long (size is positive).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True/False</p> </li> </ul>"},{"location":"reference/exchange/execution/#lettrade.exchange.execution.Execution.is_short","title":"is_short  <code>property</code>","text":"<pre><code>is_short: bool\n</code></pre> <p>True if side is short (size is negative).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/execution/#lettrade.exchange.execution.Execution.side","title":"side  <code>property</code>","text":"<pre><code>side: TradeSide\n</code></pre> <p>True if side is short (size is negative).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>TradeSide</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/execution/#lettrade.exchange.execution.Execution.merge","title":"merge","text":"<pre><code>merge(other: Execution)\n</code></pre> <p>Merge to keep object handler but not overwrite for Strategy using when Strategy want to store object and object will be automatic update directly</p> Source code in <code>lettrade/exchange/execution.py</code> <pre><code>def merge(self, other: \"Execution\"):\n    \"\"\"\n    Merge to keep object handler but not overwrite for Strategy using when Strategy want to store object and object will be automatic update directly\n    \"\"\"\n    if other is self:\n        return\n\n    if self.id != other.id:\n        raise RuntimeError(f\"Merge difference id {self.id} != {other.id} execution\")\n\n    self.price = other.price\n    self.size = other.size\n\n    if other.at:\n        self.at = other.at\n    if other.order_id:\n        self.order_id = other.order_id\n    if other.order:\n        self.order = other.order\n    if other.position_id:\n        self.position_id = other.position_id\n    if other.position:\n        self.position = other.position\n</code></pre>"},{"location":"reference/exchange/order/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> order","text":""},{"location":"reference/exchange/order/#lettrade.exchange.order","title":"order","text":""},{"location":"reference/exchange/order/#lettrade.exchange.order.Order","title":"Order","text":"<pre><code>Order(\n    id: str,\n    exchange: Exchange,\n    data: DataFeed,\n    size: float,\n    state: OrderState = OrderState.Pending,\n    type: OrderType = OrderType.Market,\n    limit_price: float | None = None,\n    stop_price: float | None = None,\n    sl_price: float | None = None,\n    tp_price: float | None = None,\n    parent: Position | None = None,\n    tag: str | None = None,\n    placed_at: Timestamp | None = None,\n    **kwargs\n)\n</code></pre> <p>               Bases: <code>BaseTransaction</code></p> Source code in <code>lettrade/exchange/order.py</code> <pre><code>def __init__(\n    self,\n    id: str,\n    exchange: \"Exchange\",\n    data: \"DataFeed\",\n    size: float,\n    state: OrderState = OrderState.Pending,\n    type: OrderType = OrderType.Market,\n    limit_price: float | None = None,\n    stop_price: float | None = None,\n    sl_price: float | None = None,\n    tp_price: float | None = None,\n    parent: \"Position | None\" = None,\n    tag: str | None = None,\n    placed_at: pd.Timestamp | None = None,\n    **kwargs,\n):\n    super().__init__(\n        id=id,\n        exchange=exchange,\n        data=data,\n        size=size,\n        **kwargs,\n    )\n\n    self.type: OrderType = type\n    self.state: OrderState = state\n    self.limit_price: float | None = limit_price\n    self.stop_price: float | None = stop_price\n    self.sl_price: float | None = sl_price\n    self.tp_price: float | None = tp_price\n    self.parent: \"Position | None\" = parent\n    self.tag: str | None = tag\n    self.placed_at: pd.Timestamp | None = placed_at\n    self.filled_at: pd.Timestamp | None = None\n    self.filled_price: float | None = None\n</code></pre>"},{"location":"reference/exchange/order/#lettrade.exchange.order.Order.is_closed","title":"is_closed  <code>property</code>","text":"<pre><code>is_closed: bool\n</code></pre> <p>Flag to check <code>Order</code> closed</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True if <code>state</code> in [OrderState.Filled, OrderState.Canceled]</p> </li> </ul>"},{"location":"reference/exchange/order/#lettrade.exchange.order.Order.is_long","title":"is_long  <code>property</code>","text":"<pre><code>is_long: bool\n</code></pre> <p>True if side is long (size is positive).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True/False</p> </li> </ul>"},{"location":"reference/exchange/order/#lettrade.exchange.order.Order.is_opening","title":"is_opening  <code>property</code>","text":"<pre><code>is_opening: bool\n</code></pre> <p>Flag to check <code>Order</code> still alive</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True if <code>state</code> in [OrderState.Pending, OrderState.Placed, OrderState.Partial]</p> </li> </ul>"},{"location":"reference/exchange/order/#lettrade.exchange.order.Order.is_short","title":"is_short  <code>property</code>","text":"<pre><code>is_short: bool\n</code></pre> <p>True if side is short (size is negative).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/order/#lettrade.exchange.order.Order.is_sl_order","title":"is_sl_order  <code>property</code>","text":"<pre><code>is_sl_order: bool\n</code></pre> <p><code>Order</code> is stop-loss order of a <code>Position</code></p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/order/#lettrade.exchange.order.Order.is_tp_order","title":"is_tp_order  <code>property</code>","text":"<pre><code>is_tp_order: bool\n</code></pre> <p><code>Order</code> is take-profit order of a <code>Position</code></p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/order/#lettrade.exchange.order.Order.limit","title":"limit  <code>property</code>","text":"<pre><code>limit: float | None\n</code></pre> <p>Getter of limit_price</p> <p>Returns:</p> <ul> <li> <code>float | None</code>           \u2013            <p>float | None: <code>float</code> or <code>None</code></p> </li> </ul>"},{"location":"reference/exchange/order/#lettrade.exchange.order.Order.place_price","title":"place_price  <code>property</code>","text":"<pre><code>place_price: float | None\n</code></pre> <p>Getter of place_price</p> <p>Returns:</p> <ul> <li> <code>float | None</code>           \u2013            <p>float | None: <code>float</code> or <code>None</code></p> </li> </ul>"},{"location":"reference/exchange/order/#lettrade.exchange.order.Order.side","title":"side  <code>property</code>","text":"<pre><code>side: TradeSide\n</code></pre> <p>True if side is short (size is negative).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>TradeSide</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/order/#lettrade.exchange.order.Order.sl","title":"sl  <code>property</code>","text":"<pre><code>sl: float | None\n</code></pre> <p>Getter of sl_price</p> <p>Returns:</p> <ul> <li> <code>float | None</code>           \u2013            <p>float | None: <code>float</code> or <code>None</code></p> </li> </ul>"},{"location":"reference/exchange/order/#lettrade.exchange.order.Order.stop","title":"stop  <code>property</code>","text":"<pre><code>stop: float | None\n</code></pre> <p>Getter of stop_price</p> <p>Returns:</p> <ul> <li> <code>float | None</code>           \u2013            <p>float | None: <code>float</code> or <code>None</code></p> </li> </ul>"},{"location":"reference/exchange/order/#lettrade.exchange.order.Order.tp","title":"tp  <code>property</code>","text":"<pre><code>tp: float | None\n</code></pre> <p>Getter of tp_price</p> <p>Returns:</p> <ul> <li> <code>float | None</code>           \u2013            <p>float | None: <code>float</code> or <code>None</code></p> </li> </ul>"},{"location":"reference/exchange/order/#lettrade.exchange.order.Order.cancel","title":"cancel","text":"<pre><code>cancel(raw: object | None = None, **kwargs) -&gt; OrderResult\n</code></pre> <p>Cancel <code>Order</code> Set <code>status</code> to <code>OrderState.Canceled</code>. Send event to <code>Exchange</code></p> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>Validate state is <code>OrderState.Placed</code></p> </li> </ul> <p>Returns:</p> <ul> <li> <code>OrderResult</code> (              <code>OrderResult</code> )          \u2013            <p>result of <code>Order</code></p> </li> </ul> Source code in <code>lettrade/exchange/order.py</code> <pre><code>def cancel(self, raw: object | None = None, **kwargs) -&gt; \"OrderResult\":\n    \"\"\"Cancel `Order`\n    Set `status` to `OrderState.Canceled`.\n    Send event to `Exchange`\n\n    Raises:\n        RuntimeError: Validate state is `OrderState.Placed`\n\n    Returns:\n        OrderResult: result of `Order`\n    \"\"\"\n    if self.state != OrderState.Placed:\n        raise RuntimeError(f\"Order {self.id} state {self.state} is not Placed\")\n\n    self.state = OrderState.Canceled\n    self.exchange.on_order(self)\n    return OrderResultOk(order=self, raw=raw)\n</code></pre>"},{"location":"reference/exchange/order/#lettrade.exchange.order.Order.fill","title":"fill","text":"<pre><code>fill(\n    price: float, at: Timestamp, raw: object | None = None\n) -&gt; OrderResult\n</code></pre> <p>Fill <code>Order</code>. Set <code>status</code> to <code>OrderState.Executed</code>. Send event to <code>Exchange</code></p> <p>Parameters:</p> <ul> <li> <code>price</code>               (<code>float</code>)           \u2013            <p>Executed price</p> </li> <li> <code>at</code>               (<code>Timestamp</code>)           \u2013            <p>Executed bar</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>OrderResult</code> (              <code>OrderResult</code> )          \u2013            <p>result of <code>Order</code></p> </li> </ul> Source code in <code>lettrade/exchange/order.py</code> <pre><code>def fill(\n    self,\n    price: float,\n    at: pd.Timestamp,\n    raw: object | None = None,\n) -&gt; \"OrderResult\":\n    \"\"\"Fill `Order`.\n    Set `status` to `OrderState.Executed`.\n    Send event to `Exchange`\n\n    Args:\n        price (float): Executed price\n        at (pd.Timestamp): Executed bar\n\n    Raises:\n        RuntimeError: _description_\n\n    Returns:\n        OrderResult: result of `Order`\n    \"\"\"\n    if self.state != OrderState.Placed:\n        raise RuntimeError(f\"Order {self.id} state {self.state} is not Placed\")\n\n    self.filled_at = at\n    self.filled_price = price\n    self.state = OrderState.Filled\n    self.exchange.on_order(self)\n    return OrderResultOk(order=self, raw=raw)\n</code></pre>"},{"location":"reference/exchange/order/#lettrade.exchange.order.Order.merge","title":"merge","text":"<pre><code>merge(other: Order)\n</code></pre> <p>Update current <code>Order</code> variables by other <code>Order</code></p> <p>Parameters:</p> <ul> <li> <code>other</code>               (<code>Order</code>)           \u2013            <p>Merge source <code>Order</code></p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>Validate same id</p> </li> </ul> Source code in <code>lettrade/exchange/order.py</code> <pre><code>def merge(self, other: \"Order\"):\n    \"\"\"Update current `Order` variables by other `Order`\n\n    Args:\n        other (Order): Merge source `Order`\n\n    Raises:\n        RuntimeError: Validate same id\n    \"\"\"\n    if other is self:\n        return\n\n    if self.id != other.id:\n        raise RuntimeError(f\"Merge difference id {self.id} != {other.id} order\")\n\n    self.size = other.size\n    self.sl_price = other.sl_price\n    self.tp_price = other.tp_price\n\n    if other.limit_price:\n        self.limit_price = other.limit_price\n    if other.stop_price:\n        self.stop_price = other.stop_price\n    if other.placed_at:\n        self.placed_at = other.placed_at\n\n    if other.filled_price:\n        self.filled_price = other.filled_price\n    if other.filled_at:\n        self.filled_at = other.filled_at\n\n    if other.parent:\n        self.parent = other.parent\n</code></pre>"},{"location":"reference/exchange/order/#lettrade.exchange.order.Order.place","title":"place","text":"<pre><code>place(\n    at: Timestamp, raw: object | None = None\n) -&gt; OrderResult\n</code></pre> <p>Place <code>Order</code> Set <code>status</code> to <code>OrderState.Placed</code>. Send event to <code>Exchange</code></p> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>OrderResult</code> (              <code>OrderResult</code> )          \u2013            <p>result of <code>Order</code></p> </li> </ul> Source code in <code>lettrade/exchange/order.py</code> <pre><code>def place(\n    self,\n    at: pd.Timestamp,\n    raw: object | None = None,\n) -&gt; \"OrderResult\":\n    \"\"\"Place `Order`\n    Set `status` to `OrderState.Placed`.\n    Send event to `Exchange`\n\n    Raises:\n        RuntimeError: _description_\n\n    Returns:\n        OrderResult: result of `Order`\n    \"\"\"\n    self.validate()\n\n    if self.state != OrderState.Pending:\n        raise RuntimeError(f\"Order {self.id} state {self.state} is not Pending\")\n\n    self.state = OrderState.Placed\n    self.placed_at = at\n\n    logger.info(\"Placing new order: %s\", self)\n\n    self.exchange.on_order(self)\n    return OrderResultOk(order=self, raw=raw)\n</code></pre>"},{"location":"reference/exchange/order/#lettrade.exchange.order.Order.update","title":"update","text":"<pre><code>update(\n    limit_price: float | None = None,\n    stop_price: float | None = None,\n    sl: float | None = None,\n    tp: float | None = None,\n    raw: object | None = None,\n) -&gt; OrderResult\n</code></pre> <p>Update Order</p> <p>Parameters:</p> <ul> <li> <code>limit_price</code>               (<code>float</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>stop_price</code>               (<code>float</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>sl</code>               (<code>float</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>tp</code>               (<code>float</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/order.py</code> <pre><code>def update(\n    self,\n    limit_price: float | None = None,\n    stop_price: float | None = None,\n    sl: float | None = None,\n    tp: float | None = None,\n    raw: object | None = None,\n) -&gt; \"OrderResult\":\n    \"\"\"Update Order\n\n    Args:\n        limit_price (float, optional): _description_. Defaults to None.\n        stop_price (float, optional): _description_. Defaults to None.\n        sl (float, optional): _description_. Defaults to None.\n        tp (float, optional): _description_. Defaults to None.\n\n    Raises:\n        RuntimeError: _description_\n    \"\"\"\n    if self.is_closed:\n        raise RuntimeError(f\"Update a closed order {self}\")\n\n    # TODO: validate parameters\n    if limit_price is not None:\n        self.limit_price = limit_price\n    if stop_price is not None:\n        self.stop_price = stop_price\n\n    if sl is not None:\n        self.sl_price = sl\n    if tp is not None:\n        self.tp_price = tp\n\n    self.exchange.on_order(self)\n    return OrderResultOk(order=self, raw=raw)\n</code></pre>"},{"location":"reference/exchange/order/#lettrade.exchange.order.OrderResult","title":"OrderResult","text":"<pre><code>OrderResult(\n    ok: bool = True,\n    order: Order | None = None,\n    raw: object | None = None,\n)\n</code></pre> <p>Result of <code>Order</code></p> <p>Parameters:</p> <ul> <li> <code>ok</code>               (<code>bool | None</code>, default:                   <code>True</code> )           \u2013            <p>Flag to check <code>Order</code> is success or not. Defaults to True.</p> </li> <li> <code>order</code>               (<code>Order | None</code>, default:                   <code>None</code> )           \u2013            <p>Order own the result. Defaults to None.</p> </li> <li> <code>raw</code>               (<code>object | None</code>, default:                   <code>None</code> )           \u2013            <p>Raw object of <code>Order</code>. Defaults to None.</p> </li> </ul> Source code in <code>lettrade/exchange/order.py</code> <pre><code>def __init__(\n    self,\n    ok: bool = True,\n    order: \"Order | None\" = None,\n    raw: object | None = None,\n) -&gt; None:\n    \"\"\"_summary_\n\n    Args:\n        ok (bool | None, optional): Flag to check `Order` is success or not. Defaults to True.\n        order (Order | None, optional): Order own the result. Defaults to None.\n        raw (object | None, optional): Raw object of `Order`. Defaults to None.\n    \"\"\"\n    self.ok: bool = ok\n    self.order: \"Order | None\" = order\n    self.raw: object | None = raw\n</code></pre>"},{"location":"reference/exchange/order/#lettrade.exchange.order.OrderResultError","title":"OrderResultError","text":"<pre><code>OrderResultError(\n    error: str,\n    order: Order | None = None,\n    raw: object | None = None,\n)\n</code></pre> <p>               Bases: <code>OrderResult</code></p> <p>Result of a error <code>Order</code></p> <p>Parameters:</p> <ul> <li> <code>error</code>               (<code>str</code>)           \u2013            <p>Error message</p> </li> <li> <code>order</code>               (<code>Order | None</code>, default:                   <code>None</code> )           \u2013            <p>Order own the result. Defaults to None.</p> </li> <li> <code>raw</code>               (<code>object | None</code>, default:                   <code>None</code> )           \u2013            <p>Raw object of <code>Order</code>. Defaults to None.</p> </li> </ul> Source code in <code>lettrade/exchange/order.py</code> <pre><code>def __init__(\n    self,\n    error: str,\n    order: \"Order | None\" = None,\n    raw: object | None = None,\n) -&gt; None:\n    \"\"\"_summary_\n\n    Args:\n        error (str): Error message\n        order (Order | None, optional): Order own the result. Defaults to None.\n        raw (object | None, optional): Raw object of `Order`. Defaults to None.\n    \"\"\"\n    super().__init__(ok=False, order=order, raw=raw)\n    self.error: str = error\n</code></pre>"},{"location":"reference/exchange/order/#lettrade.exchange.order.OrderResultOk","title":"OrderResultOk","text":"<pre><code>OrderResultOk(\n    order: Order | None = None, raw: object | None = None\n)\n</code></pre> <p>               Bases: <code>OrderResult</code></p> <p>Result of a success <code>Order</code></p> <p>Parameters:</p> <ul> <li> <code>order</code>               (<code>Order | None</code>, default:                   <code>None</code> )           \u2013            <p>Order own the result. Defaults to None.</p> </li> <li> <code>raw</code>               (<code>object | None</code>, default:                   <code>None</code> )           \u2013            <p>Raw object of <code>Order</code>. Defaults to None.</p> </li> </ul> Source code in <code>lettrade/exchange/order.py</code> <pre><code>def __init__(\n    self,\n    order: \"Order | None\" = None,\n    raw: object | None = None,\n) -&gt; None:\n    \"\"\"_summary_\n\n    Args:\n        order (Order | None, optional): Order own the result. Defaults to None.\n        raw (object | None, optional): Raw object of `Order`. Defaults to None.\n    \"\"\"\n    super().__init__(ok=True, order=order, raw=raw)\n</code></pre>"},{"location":"reference/exchange/position/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> position","text":""},{"location":"reference/exchange/position/#lettrade.exchange.position","title":"position","text":""},{"location":"reference/exchange/position/#lettrade.exchange.position.Position","title":"Position","text":"<pre><code>Position(\n    id: str,\n    exchange: Exchange,\n    data: DataFeed,\n    size: float,\n    parent: Order,\n    state: PositionState = PositionState.Open,\n    entry_price: float | None = None,\n    entry_fee: float = 0.0,\n    entry_at: Timestamp | None = None,\n    sl_order: Order | None = None,\n    tp_order: Order | None = None,\n    tag: str | None = None,\n    **kwargs\n)\n</code></pre> <p>               Bases: <code>BaseTransaction</code></p> <p>When an <code>Order</code> is filled, it results in an active <code>Position</code>. Find active positions in <code>Strategy.positions</code> and closed, settled positions in <code>Strategy.closed_positions</code>.</p> Source code in <code>lettrade/exchange/position.py</code> <pre><code>def __init__(\n    self,\n    id: str,\n    exchange: \"Exchange\",\n    data: \"DataFeed\",\n    size: float,\n    parent: \"Order\",\n    state: PositionState = PositionState.Open,\n    entry_price: float | None = None,\n    entry_fee: float = 0.0,\n    entry_at: pd.Timestamp | None = None,\n    sl_order: Order | None = None,\n    tp_order: Order | None = None,\n    tag: str | None = None,\n    **kwargs,\n):\n    super().__init__(\n        id=id,\n        exchange=exchange,\n        data=data,\n        size=size,\n        **kwargs,\n    )\n    self._account: \"Account\" = self.exchange._account\n\n    self.state: PositionState = state\n    self.parent: \"Order\" = parent\n    self.tag: str | None = tag\n\n    self.entry_price: float | None = entry_price\n    self.entry_fee: float = entry_fee\n    self.entry_at: pd.Timestamp | None = entry_at\n\n    self.exit_price: float | None = None\n    self.exit_fee: float = 0.0\n    self.exit_at: pd.Timestamp | None = None\n    self.exit_pl: float | None = None\n\n    self.sl_order: Order | None = sl_order\n    self.tp_order: Order | None = tp_order\n</code></pre>"},{"location":"reference/exchange/position/#lettrade.exchange.position.Position.fee","title":"fee  <code>property</code>","text":"<pre><code>fee: float\n</code></pre> <p>Fee/Estimate Fee for trade</p> <p>Returns:</p> <ul> <li> <code>float</code> (              <code>float</code> )          \u2013            <p>Fee</p> </li> </ul>"},{"location":"reference/exchange/position/#lettrade.exchange.position.Position.is_exited","title":"is_exited  <code>property</code>","text":"<pre><code>is_exited: bool\n</code></pre> <p>Flag to check Position state.</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True if the trade exited</p> </li> </ul>"},{"location":"reference/exchange/position/#lettrade.exchange.position.Position.is_long","title":"is_long  <code>property</code>","text":"<pre><code>is_long: bool\n</code></pre> <p>True if side is long (size is positive).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True/False</p> </li> </ul>"},{"location":"reference/exchange/position/#lettrade.exchange.position.Position.is_opening","title":"is_opening  <code>property</code>","text":"<pre><code>is_opening: bool\n</code></pre> <p>Flag to check Position state.</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True if the trade opening</p> </li> </ul>"},{"location":"reference/exchange/position/#lettrade.exchange.position.Position.is_short","title":"is_short  <code>property</code>","text":"<pre><code>is_short: bool\n</code></pre> <p>True if side is short (size is negative).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/position/#lettrade.exchange.position.Position.pl","title":"pl  <code>property</code>","text":"<pre><code>pl: float\n</code></pre> <p>Estimate Profit or Loss of Position</p> <p>Returns:</p> <ul> <li> <code>float</code> (              <code>float</code> )          \u2013            <p>PnL</p> </li> </ul>"},{"location":"reference/exchange/position/#lettrade.exchange.position.Position.side","title":"side  <code>property</code>","text":"<pre><code>side: TradeSide\n</code></pre> <p>True if side is short (size is negative).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>TradeSide</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/position/#lettrade.exchange.position.Position.merge","title":"merge","text":"<pre><code>merge(other: Position) -&gt; bool\n</code></pre> <p>Merge position from another position has same id</p> <p>Parameters:</p> <ul> <li> <code>other</code>               (<code>Position</code>)           \u2013            <p>description</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/position.py</code> <pre><code>def merge(self, other: \"Position\") -&gt; bool:\n    \"\"\"Merge position from another position has same id\n\n    Args:\n        other (Position): _description_\n\n    Raises:\n        RuntimeError: _description_\n    \"\"\"\n    if other is self:\n        return False\n\n    if self.id != other.id:\n        raise RuntimeError(f\"Merge difference id {self.id} != {other.id} order\")\n\n    self.size = other.size\n\n    if other.sl_order is not None:\n        self.sl_order = other.sl_order\n        self.sl_order.parent = self\n    elif self.sl_order is not None:\n        self.sl_order.cancel()\n        self.sl_order = None\n\n    if other.tp_order is not None:\n        self.tp_order = other.tp_order\n        self.tp_order.parent = self\n    elif self.tp_order is not None:\n        self.tp_order.cancel()\n        self.tp_order = None\n\n    if other.entry_at:\n        self.entry_at = other.entry_at\n    if other.entry_price:\n        self.entry_price = other.entry_price\n\n    if other.exit_at:\n        self.exit_at = other.exit_at\n    if other.exit_price:\n        self.exit_price = other.exit_price\n    if other.exit_fee:\n        self.exit_fee = other.exit_fee\n    if other.exit_pl:\n        self.exit_pl = other.exit_pl\n\n    if other.parent:\n        self.parent = other.parent\n\n    return True\n</code></pre>"},{"location":"reference/exchange/position/#lettrade.exchange.position.PositionResult","title":"PositionResult","text":"<pre><code>PositionResult(\n    ok: bool = True,\n    position: Position | None = None,\n    raw: object | None = None,\n)\n</code></pre> <p>Result of <code>Position</code></p> <p>Parameters:</p> <ul> <li> <code>ok</code>               (<code>bool | None</code>, default:                   <code>True</code> )           \u2013            <p>Flag to check <code>Position</code> is success or not. Defaults to True.</p> </li> <li> <code>position</code>               (<code>Position | None</code>, default:                   <code>None</code> )           \u2013            <p>Position own the result. Defaults to None.</p> </li> <li> <code>raw</code>               (<code>object | None</code>, default:                   <code>None</code> )           \u2013            <p>Raw object of <code>Position</code>. Defaults to None.</p> </li> </ul> Source code in <code>lettrade/exchange/position.py</code> <pre><code>def __init__(\n    self,\n    ok: bool = True,\n    position: \"Position | None\" = None,\n    raw: object | None = None,\n) -&gt; None:\n    \"\"\"_summary_\n\n    Args:\n        ok (bool | None, optional): Flag to check `Position` is success or not. Defaults to True.\n        position (Position | None, optional): Position own the result. Defaults to None.\n        raw (object | None, optional): Raw object of `Position`. Defaults to None.\n    \"\"\"\n    self.ok: bool = ok\n    self.position: \"Position | None\" = position\n    self.raw: object | None = raw\n</code></pre>"},{"location":"reference/exchange/position/#lettrade.exchange.position.PositionResultError","title":"PositionResultError","text":"<pre><code>PositionResultError(\n    error: str,\n    position: Position | None = None,\n    raw: object | None = None,\n)\n</code></pre> <p>               Bases: <code>PositionResult</code></p> <p>Result of a error <code>Position</code></p> <p>Parameters:</p> <ul> <li> <code>error</code>               (<code>str</code>)           \u2013            <p>Error message</p> </li> <li> <code>position</code>               (<code>Position | None</code>, default:                   <code>None</code> )           \u2013            <p>Position own the result. Defaults to None.</p> </li> <li> <code>raw</code>               (<code>object | None</code>, default:                   <code>None</code> )           \u2013            <p>Raw object of <code>Position</code>. Defaults to None.</p> </li> </ul> Source code in <code>lettrade/exchange/position.py</code> <pre><code>def __init__(\n    self,\n    error: str,\n    position: \"Position | None\" = None,\n    raw: object | None = None,\n) -&gt; None:\n    \"\"\"_summary_\n\n    Args:\n        error (str): Error message\n        position (Position | None, optional): Position own the result. Defaults to None.\n        raw (object | None, optional): Raw object of `Position`. Defaults to None.\n    \"\"\"\n    super().__init__(ok=False, position=position, raw=raw)\n    self.error: str = error\n</code></pre>"},{"location":"reference/exchange/position/#lettrade.exchange.position.PositionResultOk","title":"PositionResultOk","text":"<pre><code>PositionResultOk(\n    position: Position | None = None,\n    raw: object | None = None,\n)\n</code></pre> <p>               Bases: <code>PositionResult</code></p> <p>Result of a success <code>Position</code></p> <p>Parameters:</p> <ul> <li> <code>position</code>               (<code>Position | None</code>, default:                   <code>None</code> )           \u2013            <p>Position own the result. Defaults to None.</p> </li> <li> <code>raw</code>               (<code>object | None</code>, default:                   <code>None</code> )           \u2013            <p>Raw object of <code>Position</code>. Defaults to None.</p> </li> </ul> Source code in <code>lettrade/exchange/position.py</code> <pre><code>def __init__(\n    self,\n    position: \"Position | None\" = None,\n    raw: object | None = None,\n) -&gt; None:\n    \"\"\"_summary_\n\n    Args:\n        position (Position | None, optional): Position own the result. Defaults to None.\n        raw (object | None, optional): Raw object of `Position`. Defaults to None.\n    \"\"\"\n    super().__init__(ok=True, position=position, raw=raw)\n</code></pre>"},{"location":"reference/exchange/backtest/","title":"Index","text":""},{"location":"reference/exchange/backtest/#lettrade.exchange.backtest","title":"backtest","text":""},{"location":"reference/exchange/backtest/account/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> account","text":""},{"location":"reference/exchange/backtest/account/#lettrade.exchange.backtest.account","title":"account","text":""},{"location":"reference/exchange/backtest/account/#lettrade.exchange.backtest.account.BackTestAccount","title":"BackTestAccount","text":"<pre><code>BackTestAccount(\n    risk: float = 0.02,\n    balance: float = 10000,\n    commission: float = 0.2,\n    margin: float = 1,\n    leverage: float = 1,\n    **kwargs\n)\n</code></pre> <p>               Bases: <code>Account</code></p> <p>Parameters:</p> <ul> <li> <code>risk</code>               (<code>float</code>, default:                   <code>0.02</code> )           \u2013            <p>description. Defaults to 0.02.</p> </li> <li> <code>balance</code>               (<code>float</code>, default:                   <code>10000</code> )           \u2013            <p>description. Defaults to 10_000.</p> </li> <li> <code>commission</code>               (<code>float</code>, default:                   <code>0.2</code> )           \u2013            <p>Commission fee is percent of size. Defaults to 0.2.</p> </li> <li> <code>margin</code>               (<code>float</code>, default:                   <code>1</code> )           \u2013            <p>description. Defaults to 1.</p> </li> <li> <code>leverage</code>               (<code>float</code>, default:                   <code>1</code> )           \u2013            <p>description. Defaults to 1.</p> </li> <li> <code>**kwargs</code>               (<code>dict</code>, default:                   <code>{}</code> )           \u2013            <p>Mirror of lettrade.account.Account().</p> </li> </ul> Source code in <code>lettrade/exchange/backtest/account.py</code> <pre><code>def __init__(\n    self,\n    risk: float = 0.02,\n    balance: float = 10_000,\n    commission: float = 0.2,\n    margin: float = 1,\n    leverage: float = 1,\n    **kwargs,\n) -&gt; None:\n    \"\"\"Account for backtest\n\n    Args:\n        risk (float, optional): _description_. Defaults to 0.02.\n        balance (float, optional): _description_. Defaults to 10_000.\n        commission (float, optional): Commission fee is percent of size. Defaults to 0.2.\n        margin (float, optional): _description_. Defaults to 1.\n        leverage (float, optional): _description_. Defaults to 1.\n        **kwargs (dict, optional): Mirror of [lettrade.account.Account()](site:/reference/account/account/#lettrade.account.account.Account).\n    \"\"\"\n    super().__init__(\n        risk=risk,\n        balance=balance,\n        margin=margin,\n        leverage=leverage,\n        **kwargs,\n    )\n    self._commission = commission\n</code></pre>"},{"location":"reference/exchange/backtest/account/#lettrade.exchange.backtest.account.BackTestAccount.balance","title":"balance  <code>property</code>","text":"<pre><code>balance: float\n</code></pre> <p>Balance of account</p> <p>Returns:</p> <ul> <li> <code>float</code> (              <code>float</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/backtest/account/#lettrade.exchange.backtest.account.BackTestAccount.next","title":"next","text":"<pre><code>next()\n</code></pre> <p>Next account</p> Source code in <code>lettrade/account/account.py</code> <pre><code>def next(self):\n    \"\"\"Next account\"\"\"\n</code></pre>"},{"location":"reference/exchange/backtest/account/#lettrade.exchange.backtest.account.BackTestAccount.next_next","title":"next_next","text":"<pre><code>next_next()\n</code></pre> <p>Call after strategy.next()</p> Source code in <code>lettrade/account/account.py</code> <pre><code>def next_next(self):\n    \"\"\"Call after strategy.next()\"\"\"\n    self._equity_snapshot()\n</code></pre>"},{"location":"reference/exchange/backtest/account/#lettrade.exchange.backtest.account.BackTestAccount.risk","title":"risk","text":"<pre><code>risk(side: TradeSide, size: float, **kwargs) -&gt; float\n</code></pre> <p>Risk calculation</p> Source code in <code>lettrade/account/account.py</code> <pre><code>def risk(self, side: \"TradeSide\", size: float, **kwargs) -&gt; float:\n    \"\"\"Risk calculation\"\"\"\n    if size is None:\n        return side * abs(self._risk)\n    return side * abs(size)\n</code></pre>"},{"location":"reference/exchange/backtest/account/#lettrade.exchange.backtest.account.BackTestAccount.start","title":"start","text":"<pre><code>start()\n</code></pre> <p>Start account</p> Source code in <code>lettrade/account/account.py</code> <pre><code>def start(self):\n    \"\"\"Start account\"\"\"\n</code></pre>"},{"location":"reference/exchange/backtest/account/#lettrade.exchange.backtest.account.BackTestAccount.stop","title":"stop","text":"<pre><code>stop()\n</code></pre> <p>Stop account</p> Source code in <code>lettrade/account/account.py</code> <pre><code>def stop(self):\n    \"\"\"Stop account\"\"\"\n    try:\n        self._equity_snapshot()\n    except LetAccountInsufficientException:\n        pass\n</code></pre>"},{"location":"reference/exchange/backtest/account/#lettrade.exchange.backtest.account.ForexBackTestAccount","title":"ForexBackTestAccount","text":"<pre><code>ForexBackTestAccount(\n    risk: float = 0.02,\n    balance: float = 10000,\n    commission: float = 0.2,\n    margin: float = 1,\n    leverage: float = 1,\n    **kwargs\n)\n</code></pre> <p>               Bases: <code>BackTestAccount</code></p> <p>Forex backtest account helps to handle lot size</p> <p>Parameters:</p> <ul> <li> <code>risk</code>               (<code>float</code>, default:                   <code>0.02</code> )           \u2013            <p>description. Defaults to 0.02.</p> </li> <li> <code>balance</code>               (<code>float</code>, default:                   <code>10000</code> )           \u2013            <p>description. Defaults to 10_000.</p> </li> <li> <code>commission</code>               (<code>float</code>, default:                   <code>0.2</code> )           \u2013            <p>Commission fee is percent of size. Defaults to 0.2.</p> </li> <li> <code>margin</code>               (<code>float</code>, default:                   <code>1</code> )           \u2013            <p>description. Defaults to 1.</p> </li> <li> <code>leverage</code>               (<code>float</code>, default:                   <code>1</code> )           \u2013            <p>description. Defaults to 1.</p> </li> <li> <code>**kwargs</code>               (<code>dict</code>, default:                   <code>{}</code> )           \u2013            <p>Mirror of lettrade.account.Account().</p> </li> </ul> Source code in <code>lettrade/exchange/backtest/account.py</code> <pre><code>def __init__(\n    self,\n    risk: float = 0.02,\n    balance: float = 10_000,\n    commission: float = 0.2,\n    margin: float = 1,\n    leverage: float = 1,\n    **kwargs,\n) -&gt; None:\n    \"\"\"Account for backtest\n\n    Args:\n        risk (float, optional): _description_. Defaults to 0.02.\n        balance (float, optional): _description_. Defaults to 10_000.\n        commission (float, optional): Commission fee is percent of size. Defaults to 0.2.\n        margin (float, optional): _description_. Defaults to 1.\n        leverage (float, optional): _description_. Defaults to 1.\n        **kwargs (dict, optional): Mirror of [lettrade.account.Account()](site:/reference/account/account/#lettrade.account.account.Account).\n    \"\"\"\n    super().__init__(\n        risk=risk,\n        balance=balance,\n        margin=margin,\n        leverage=leverage,\n        **kwargs,\n    )\n    self._commission = commission\n</code></pre>"},{"location":"reference/exchange/backtest/account/#lettrade.exchange.backtest.account.ForexBackTestAccount.balance","title":"balance  <code>property</code>","text":"<pre><code>balance: float\n</code></pre> <p>Balance of account</p> <p>Returns:</p> <ul> <li> <code>float</code> (              <code>float</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/backtest/account/#lettrade.exchange.backtest.account.ForexBackTestAccount.next","title":"next","text":"<pre><code>next()\n</code></pre> <p>Next account</p> Source code in <code>lettrade/account/account.py</code> <pre><code>def next(self):\n    \"\"\"Next account\"\"\"\n</code></pre>"},{"location":"reference/exchange/backtest/account/#lettrade.exchange.backtest.account.ForexBackTestAccount.next_next","title":"next_next","text":"<pre><code>next_next()\n</code></pre> <p>Call after strategy.next()</p> Source code in <code>lettrade/account/account.py</code> <pre><code>def next_next(self):\n    \"\"\"Call after strategy.next()\"\"\"\n    self._equity_snapshot()\n</code></pre>"},{"location":"reference/exchange/backtest/account/#lettrade.exchange.backtest.account.ForexBackTestAccount.risk","title":"risk","text":"<pre><code>risk(side: TradeSide, size: float, **kwargs) -&gt; float\n</code></pre> <p>Risk calculation</p> Source code in <code>lettrade/account/account.py</code> <pre><code>def risk(self, side: \"TradeSide\", size: float, **kwargs) -&gt; float:\n    \"\"\"Risk calculation\"\"\"\n    if size is None:\n        return side * abs(self._risk)\n    return side * abs(size)\n</code></pre>"},{"location":"reference/exchange/backtest/account/#lettrade.exchange.backtest.account.ForexBackTestAccount.start","title":"start","text":"<pre><code>start()\n</code></pre> <p>Start account</p> Source code in <code>lettrade/account/account.py</code> <pre><code>def start(self):\n    \"\"\"Start account\"\"\"\n</code></pre>"},{"location":"reference/exchange/backtest/account/#lettrade.exchange.backtest.account.ForexBackTestAccount.stop","title":"stop","text":"<pre><code>stop()\n</code></pre> <p>Stop account</p> Source code in <code>lettrade/account/account.py</code> <pre><code>def stop(self):\n    \"\"\"Stop account\"\"\"\n    try:\n        self._equity_snapshot()\n    except LetAccountInsufficientException:\n        pass\n</code></pre>"},{"location":"reference/exchange/backtest/backtest/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> backtest","text":""},{"location":"reference/exchange/backtest/backtest/#lettrade.exchange.backtest.backtest","title":"backtest","text":""},{"location":"reference/exchange/backtest/backtest/#lettrade.exchange.backtest.backtest.LetTradeBackTest","title":"LetTradeBackTest","text":"<pre><code>LetTradeBackTest(\n    strategy: type[Strategy],\n    datas: DataFeed | list[DataFeed] | str | list[str],\n    feeder: type[DataFeeder],\n    exchange: type[Exchange],\n    account: type[Account],\n    commander: type[Commander] | None = None,\n    plotter: type[Plotter] | None = None,\n    stats: type[BotStatistic] | None = None,\n    name: str | None = None,\n    bot: type[LetTradeBot] | None = LetTradeBot,\n    **kwargs\n)\n</code></pre> <p>               Bases: <code>LetTrade</code></p> Source code in <code>lettrade/lettrade.py</code> <pre><code>def __init__(\n    self,\n    strategy: type[Strategy],\n    datas: DataFeed | list[DataFeed] | str | list[str],\n    feeder: type[DataFeeder],\n    exchange: type[Exchange],\n    account: type[Account],\n    commander: type[Commander] | None = None,\n    plotter: type[Plotter] | None = None,\n    stats: type[BotStatistic] | None = None,\n    name: str | None = None,\n    bot: type[LetTradeBot] | None = LetTradeBot,\n    **kwargs,\n) -&gt; None:\n    self._kwargs = kwargs\n    self._kwargs[\"strategy_cls\"] = strategy\n    self._kwargs[\"feeder_cls\"] = feeder\n    self._kwargs[\"exchange_cls\"] = exchange\n    self._kwargs[\"account_cls\"] = account\n    self._kwargs[\"commander_cls\"] = commander\n    self._kwargs[\"plotter_cls\"] = plotter\n    self._kwargs[\"stats_cls\"] = stats\n    self._kwargs[\"bot_cls\"] = bot\n    self._kwargs[\"name\"] = name\n\n    self._kwargs[\"datas\"] = self._init_datafeeds(datas)\n</code></pre>"},{"location":"reference/exchange/backtest/backtest/#lettrade.exchange.backtest.backtest.LetTradeBackTest.optimize","title":"optimize","text":"<pre><code>optimize(\n    multiprocessing: Literal[\"auto\", \"fork\"] = \"auto\",\n    workers: int | None = None,\n    process_bar: bool = True,\n    cache: str = \"data/optimize\",\n    **kwargs\n)\n</code></pre> <p>Backtest optimization</p> <p>Parameters:</p> <ul> <li> <code>multiprocessing</code>               (<code>str | None</code>, default:                   <code>'auto'</code> )           \u2013            <p>description. Defaults to \"auto\".</p> </li> </ul> Source code in <code>lettrade/exchange/backtest/backtest.py</code> <pre><code>def optimize(\n    self,\n    multiprocessing: Literal[\"auto\", \"fork\"] = \"auto\",\n    workers: int | None = None,\n    process_bar: bool = True,\n    cache: str = \"data/optimize\",\n    **kwargs,\n):\n    \"\"\"Backtest optimization\n\n    Args:\n        multiprocessing (str | None, optional): _description_. Defaults to \"auto\".\n    \"\"\"\n    if self.data.l.pointer != 0:\n        # TODO: Can drop unnecessary columns by snapshort data.columns from init time\n        raise RuntimeError(\n            \"Optimize datas is not clean, don't run() backtest before optimize()\"\n        )\n\n    # optimizes = list(product(*(zip(repeat(k), v) for k, v in kwargs.items())))\n    optimizes = list(\n        dict(zip(kwargs.keys(), values)) for values in product(*kwargs.values())\n    )\n\n    self._optimize_init(cache=cache, total=len(optimizes), process_bar=process_bar)\n\n    # Run optimize in multiprocessing\n    self._optimizes_multiproccess(\n        optimizes=optimizes,\n        multiprocessing=multiprocessing,\n        workers=workers,\n    )\n\n    self.optimize_done()\n</code></pre>"},{"location":"reference/exchange/backtest/backtest/#lettrade.exchange.backtest.backtest.LetTradeBackTest.optimize_cache","title":"optimize_cache","text":"<pre><code>optimize_cache(cache: str = 'data/optimize')\n</code></pre> <p>Load optimize results from cache</p> <p>Parameters:</p> <ul> <li> <code>cache</code>               (<code>str</code>, default:                   <code>'data/optimize'</code> )           \u2013            <p>Cache directory. Defaults to \"data/optimize\".</p> </li> </ul> Source code in <code>lettrade/exchange/backtest/backtest.py</code> <pre><code>def optimize_cache(self, cache: str = \"data/optimize\"):\n    \"\"\"Load optimize results from cache\n\n    Args:\n        cache (str, optional): Cache directory. Defaults to \"data/optimize\".\n    \"\"\"\n    import json\n\n    self._optimize_init(cache=cache, total=0, process_bar=False)\n    cache_dir = self._kwargs[\"cache\"]\n    queue = self._kwargs[\"queue\"]\n\n    logger.warning(\"Load caches from: %s\", cache)\n\n    for cache_file in os.listdir(cache_dir):\n        if cache_file == \"info.json\":\n            continue\n\n        try:\n            cache_path = f\"{cache_dir}/{cache_file}\"\n            data = json.load(open(cache_path, encoding=\"utf-8\"))\n\n            queue.put(\n                dict(\n                    index=cache_file,\n                    optimize=data[\"optimize\"],\n                    result=data[\"result\"],\n                )\n            )\n        except Exception as e:\n            logger.warning(\"Loading cache %s error %s\", cache_path, e)\n\n    logger.warning(\"Loaded %s caches\", len(self._stats.results))\n</code></pre>"},{"location":"reference/exchange/backtest/backtest/#lettrade.exchange.backtest.backtest.LetTradeBackTest.optimize_done","title":"optimize_done","text":"<pre><code>optimize_done()\n</code></pre> <p>Clean and close optimize handlers</p> Source code in <code>lettrade/exchange/backtest/backtest.py</code> <pre><code>def optimize_done(self):\n    \"\"\"Clean and close optimize handlers\"\"\"\n    self._stats.done()\n</code></pre>"},{"location":"reference/exchange/backtest/backtest/#lettrade.exchange.backtest.backtest.LetTradeBackTest.optimize_model","title":"optimize_model","text":"<pre><code>optimize_model(\n    params_parser: Callable[\n        [Any], list[set[str, Any]]\n    ] = None,\n    result_parser: Callable[[Series], float] = None,\n    total: int = 0,\n    cache: str = \"data/optimize\",\n    process_bar: bool = False,\n    dumper: (\n        Callable[[dict, LetTradeBackTest], None] | None\n    ) = None,\n) -&gt; Callable[[Any], Any]\n</code></pre> <p>Optimize function help to integrated with external optimize trainer</p> <p>Parameters:</p> <ul> <li> <code>params_parser</code>               (<code>Callable[[Any], list[set[str, Any]]]</code>, default:                   <code>None</code> )           \u2013            <p>Parse external parameters to bot parameters dict. Defaults to None.</p> </li> <li> <code>result_parser</code>               (<code>Callable[[Series], float]</code>, default:                   <code>None</code> )           \u2013            <p>Parse bot result to external score. Defaults to None.</p> </li> <li> <code>total</code>               (<code>int</code>, default:                   <code>0</code> )           \u2013            <p>Total number of optimize if possible. Defaults to 0.</p> </li> <li> <code>cache</code>               (<code>str</code>, default:                   <code>'data/optimize'</code> )           \u2013            <p>Cache directory to store optimize result. Defaults to \"data/optimize\".</p> </li> <li> <code>process_bar</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Enable/Disable process bar. Defaults to False.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Callable[[Any], Any]</code>           \u2013            <p>Callable[[Any], Any]: Optimize model function</p> </li> </ul> Source code in <code>lettrade/exchange/backtest/backtest.py</code> <pre><code>def optimize_model(\n    self,\n    params_parser: Callable[[Any], list[set[str, Any]]] = None,\n    result_parser: Callable[[pd.Series], float] = None,\n    total: int = 0,\n    cache: str = \"data/optimize\",\n    process_bar: bool = False,\n    dumper: Callable[[dict, \"LetTradeBackTest\"], None] | None = None,\n) -&gt; Callable[[Any], Any]:\n    \"\"\"Optimize function help to integrated with external optimize trainer\n\n    Args:\n        params_parser (Callable[[Any], list[set[str, Any]]], optional): Parse external parameters to bot parameters dict. Defaults to None.\n        result_parser (Callable[[pd.Series], float], optional): Parse bot result to external score. Defaults to None.\n        total (int, optional): Total number of optimize if possible. Defaults to 0.\n        cache (str, optional): Cache directory to store optimize result. Defaults to \"data/optimize\".\n        process_bar (bool, optional): Enable/Disable process bar. Defaults to False.\n\n    Raises:\n        RuntimeError: _description_\n\n    Returns:\n        Callable[[Any], Any]: Optimize model function\n    \"\"\"\n    if self.data.l.pointer != 0:\n        raise RuntimeError(\n            \"Optimize datas is not clean, don't run() backtest before optimize()\"\n        )\n\n    self._optimize_init(cache=cache, total=total, process_bar=process_bar)\n\n    # Optimize parameters\n    optimizer_kwargs = dict(\n        main_pid=os.getpid(),\n        params_parser=params_parser,\n        result_parser=result_parser,\n        kwargs=self._kwargs,\n    )\n\n    if dumper is not None:\n        dumper(optimizer_kwargs, self)\n    else:\n        self.__class__._optimize_model_kwargs(optimizer_kwargs)\n\n    return self.__class__._optimize_model\n</code></pre>"},{"location":"reference/exchange/backtest/backtest/#lettrade.exchange.backtest.backtest.LetTradeBackTest.plot","title":"plot","text":"<pre><code>plot(*args, jump: dict | None = None, **kwargs)\n</code></pre> <p>Plot strategy/optimize result</p> BotPlotter <p>Miror of BotPlotter.plot(). Plotly implement PlotlyBotPlotter.plot().</p> <p>Args:     <code>jump</code> (dict | None, optional): Miror of BotPlotter.jump()</p> <p>Example:     - Jump to position_id         <pre><code>lt.plot(\n    jump=dict(position_id=1, range=300),\n    layout=dict(height=2000),\n)\n</code></pre></p> OptimizePlotter <p>Miror of OptimizePlotter.plot(). Plotly implement PlotlyOptimizePlotter.plot().</p> <p>Example:     -         <pre><code>lt.plot(layout=dict(height=2000))\n</code></pre></p> Source code in <code>lettrade/lettrade.py</code> <pre><code>def plot(self, *args, jump: dict | None = None, **kwargs):\n    \"\"\"Plot strategy/optimize result\n\n    BotPlotter:\n        Miror of [BotPlotter.plot()](site:/reference/plot/bot/#lettrade.plot.bot.BotPlotter.plot).\n        Plotly implement [PlotlyBotPlotter.plot()](site:/reference/plot/plotly/plotly/#lettrade.plot.plotly.plotly.PlotlyBotPlotter.plot).\n\n        Args:\n            `jump` (dict | None, optional): Miror of [BotPlotter.jump()](site:/reference/plot/bot/#lettrade.plot.bot.BotPlotter.jump)\n\n        Example:\n            - Jump to position_id\n                ```python\n                lt.plot(\n                    jump=dict(position_id=1, range=300),\n                    layout=dict(height=2000),\n                )\n                ```\n\n    OptimizePlotter:\n        Miror of [OptimizePlotter.plot()](site:/reference/plot/optimize/#lettrade.plot.optimize.OptimizePlotter.plot).\n        Plotly implement [PlotlyOptimizePlotter.plot()](site:/reference/exchange/backtest/plotly/optimize/#lettrade.exchange.backtest.plotly.optimize.PlotlyOptimizePlotter.plot).\n\n        Example:\n            -\n                ```python\n                lt.plot(layout=dict(height=2000))\n                ```\n    \"\"\"\n    if __debug__:\n        from .utils.docs import is_docs_session\n\n        if is_docs_session():\n            return\n\n    self.plotter.plot(*args, jump=jump, **kwargs)\n</code></pre>"},{"location":"reference/exchange/backtest/backtest/#lettrade.exchange.backtest.backtest.LetTradeBackTest.stop","title":"stop","text":"<pre><code>stop()\n</code></pre> <p>Stop strategy</p> Source code in <code>lettrade/lettrade.py</code> <pre><code>def stop(self):\n    \"\"\"Stop strategy\"\"\"\n    if self._bot is not None:\n        return self._bot.stop()\n    if self.stats:\n        self.stats.stop()\n</code></pre>"},{"location":"reference/exchange/backtest/backtest/#lettrade.exchange.backtest.backtest.let_backtest","title":"let_backtest","text":"<pre><code>let_backtest(\n    strategy: type[Strategy],\n    datas: DataFeed | list[DataFeed] | str | list[str],\n    feeder: type[DataFeeder] = BackTestDataFeeder,\n    exchange: type[Exchange] = BackTestExchange,\n    account: type[Account] = BackTestAccount,\n    commander: type[Commander] | None = BackTestCommander,\n    stats: type[BotStatistic] | None = BotStatistic,\n    optimize_stats: (\n        type[OptimizeStatistic] | None\n    ) = OptimizeStatistic,\n    plotter: type[BotPlotter] | None = \"PlotlyBotPlotter\",\n    optimize_plotter: (\n        type[OptimizePlotter] | None\n    ) = \"PlotlyOptimizePlotter\",\n    bot: (\n        type[LetTradeBackTestBot] | None\n    ) = LetTradeBackTestBot,\n    balance: float | None = 1000,\n    commission: float | None = 0.2,\n    leverage: float | None = 20,\n    **kwargs\n) -&gt; LetTradeBackTest\n</code></pre> <p>Complete <code>lettrade</code> backtest depenencies</p> <p>Parameters:</p> <ul> <li> <code>strategy</code>               (<code>Type[Strategy]</code>)           \u2013            <p>The Strategy implement class</p> </li> <li> <code>datas</code>               (<code>DataFeed | list[DataFeed] | str | list[str]</code>)           \u2013            <p>description</p> </li> <li> <code>feeder</code>               (<code>Type[DataFeeder]</code>, default:                   <code>BackTestDataFeeder</code> )           \u2013            <p>description. Defaults to BackTestDataFeeder.</p> </li> <li> <code>exchange</code>               (<code>Type[Exchange]</code>, default:                   <code>BackTestExchange</code> )           \u2013            <p>description. Defaults to BackTestExchange.</p> </li> <li> <code>account</code>               (<code>Type[Account]</code>, default:                   <code>BackTestAccount</code> )           \u2013            <p>description. Defaults to BackTestAccount.</p> </li> <li> <code>commander</code>               (<code>Type[Commander] | None</code>, default:                   <code>BackTestCommander</code> )           \u2013            <p>description. Defaults to BackTestCommander.</p> </li> <li> <code>plotter</code>               (<code>Type[Plotter] | None</code>, default:                   <code>'PlotlyBotPlotter'</code> )           \u2013            <p>description. Defaults to PlotlyBotPlotter.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>The validate parameter error</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>LetTradeBackTest</code> (              <code>LetTradeBackTest</code> )          \u2013            <p>The LetTrade backtesting object</p> </li> </ul> Source code in <code>lettrade/exchange/backtest/backtest.py</code> <pre><code>def let_backtest(\n    strategy: type[Strategy],\n    datas: DataFeed | list[DataFeed] | str | list[str],\n    feeder: type[DataFeeder] = BackTestDataFeeder,\n    exchange: type[Exchange] = BackTestExchange,\n    account: type[Account] = BackTestAccount,\n    commander: type[Commander] | None = BackTestCommander,\n    stats: type[BotStatistic] | None = BotStatistic,\n    optimize_stats: type[OptimizeStatistic] | None = OptimizeStatistic,\n    plotter: type[BotPlotter] | None = \"PlotlyBotPlotter\",\n    optimize_plotter: type[OptimizePlotter] | None = \"PlotlyOptimizePlotter\",\n    bot: type[LetTradeBackTestBot] | None = LetTradeBackTestBot,\n    # Account kwargs\n    balance: float | None = 1_000,\n    commission: float | None = 0.2,\n    leverage: float | None = 20,\n    **kwargs,\n) -&gt; \"LetTradeBackTest\":\n    \"\"\"Complete `lettrade` backtest depenencies\n\n    Args:\n        strategy (Type[Strategy]): The Strategy implement class\n        datas (DataFeed | list[DataFeed] | str | list[str]): _description_\n        feeder (Type[DataFeeder], optional): _description_. Defaults to BackTestDataFeeder.\n        exchange (Type[Exchange], optional): _description_. Defaults to BackTestExchange.\n        account (Type[Account], optional): _description_. Defaults to BackTestAccount.\n        commander (Type[Commander] | None, optional): _description_. Defaults to BackTestCommander.\n        plotter (Type[Plotter] | None, optional): _description_. Defaults to PlotlyBotPlotter.\n\n    Raises:\n        RuntimeError: The validate parameter error\n\n    Returns:\n        LetTradeBackTest: The LetTrade backtesting object\n    \"\"\"\n    account_kwargs: dict = kwargs.setdefault(\"account_kwargs\", {})\n    account_kwargs.update(\n        balance=balance,\n        commission=commission,\n        leverage=leverage,\n    )\n\n    return LetTradeBackTest(\n        strategy=strategy,\n        datas=datas,\n        feeder=feeder,\n        exchange=exchange,\n        commander=commander,\n        account=account,\n        stats=stats,\n        plotter=plotter,\n        bot=bot,\n        # Backtest\n        optimize_stats_cls=optimize_stats,\n        optimize_plotter_cls=optimize_plotter,\n        **kwargs,\n    )\n</code></pre>"},{"location":"reference/exchange/backtest/commander/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> commander","text":""},{"location":"reference/exchange/backtest/commander/#lettrade.exchange.backtest.commander","title":"commander","text":""},{"location":"reference/exchange/backtest/commander/#lettrade.exchange.backtest.commander.BackTestCommander","title":"BackTestCommander","text":"<p>               Bases: <code>Commander</code></p> <p>BackTest Commander to debug commander notify</p>"},{"location":"reference/exchange/backtest/commander/#lettrade.exchange.backtest.commander.BackTestCommander.init","title":"init","text":"<pre><code>init(\n    bot: LetTradeBot,\n    brain: Brain,\n    exchange: Exchange,\n    strategy: Strategy,\n)\n</code></pre> <p>Init commander dependencies</p> <p>Parameters:</p> <ul> <li> <code>bot</code>               (<code>LetTradeBot</code>)           \u2013            <p>LetTradeBot object</p> </li> <li> <code>brain</code>               (<code>Brain</code>)           \u2013            <p>Brain of bot</p> </li> <li> <code>exchange</code>               (<code>Exchange</code>)           \u2013            <p>Manage bot trading</p> </li> <li> <code>strategy</code>               (<code>Strategy</code>)           \u2013            <p>Strategy of bot</p> </li> </ul> Source code in <code>lettrade/commander/commander.py</code> <pre><code>def init(\n    self,\n    bot: \"LetTradeBot\",\n    brain: \"Brain\",\n    exchange: \"Exchange\",\n    strategy: \"Strategy\",\n):\n    \"\"\"Init commander dependencies\n\n    Args:\n        bot (LetTradeBot): LetTradeBot object\n        brain (Brain): Brain of bot\n        exchange (Exchange): Manage bot trading\n        strategy (Strategy): Strategy of bot\n    \"\"\"\n    self.bot = bot\n    self.brain = brain\n    self.exchange = exchange\n    self.strategy = strategy\n\n    self._name = self.bot._name\n</code></pre>"},{"location":"reference/exchange/backtest/data/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> data","text":""},{"location":"reference/exchange/backtest/data/#lettrade.exchange.backtest.data","title":"data","text":""},{"location":"reference/exchange/backtest/data/#lettrade.exchange.backtest.data.BackTestDataFeed","title":"BackTestDataFeed","text":"<pre><code>BackTestDataFeed(\n    data: DataFrame,\n    name: str,\n    timeframe: str | int | Timedelta | None = None,\n    meta: dict | None = None,\n    since: int | str | Timestamp | None = None,\n    to: int | str | Timestamp | None = None,\n    **kwargs\n)\n</code></pre> <p>               Bases: <code>DataFeed</code></p> <p>BackTest DataFeed</p> <p>Parameters:</p> <ul> <li> <code>data</code>               (<code>DataFrame</code>)           \u2013            <p>description</p> </li> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>description</p> </li> <li> <code>timeframe</code>               (<code>str | int | Timedelta | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>meta</code>               (<code>dict | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>since</code>               (<code>int | str | Timestamp | None</code>, default:                   <code>None</code> )           \u2013            <p>Drop data before since. Defaults to None.</p> </li> <li> <code>to</code>               (<code>int | str | Timestamp | None</code>, default:                   <code>None</code> )           \u2013            <p>Drop data after to. Defaults to None.</p> </li> </ul> Source code in <code>lettrade/exchange/backtest/data.py</code> <pre><code>def __init__(\n    self,\n    data: pd.DataFrame,\n    name: str,\n    timeframe: str | int | pd.Timedelta | None = None,\n    meta: dict | None = None,\n    since: int | str | pd.Timestamp | None = None,\n    to: int | str | pd.Timestamp | None = None,\n    **kwargs,\n) -&gt; None:\n    \"\"\"_summary_\n\n    Args:\n        data (pd.DataFrame): _description_\n        name (str): _description_\n        timeframe (str | int | pd.Timedelta | None, optional): _description_. Defaults to None.\n        meta (dict | None, optional): _description_. Defaults to None.\n        since (int | str | pd.Timestamp | None, optional): Drop data before since. Defaults to None.\n        to (int | str | pd.Timestamp | None, optional): Drop data after to. Defaults to None.\n    \"\"\"\n    if timeframe is None:\n        timeframe = self._find_timeframe(data)\n        logger.info(\"DataFeed %s auto detect timeframe %s\", name, timeframe)\n    super().__init__(\n        data=data,\n        name=name,\n        timeframe=timeframe,\n        meta=meta,\n        **kwargs,\n    )\n    if since is not None or to is not None:\n        self.drop(since=since, to=to)\n</code></pre>"},{"location":"reference/exchange/backtest/data/#lettrade.exchange.backtest.data.BackTestDataFeed.i","title":"i  <code>property</code>","text":"<pre><code>i: indicator\n</code></pre> <p>Alias to <code>lettrade.indicator</code> and using in DataFeed by call: <code>DataFeed.i.indicator_name()</code></p>"},{"location":"reference/exchange/backtest/data/#lettrade.exchange.backtest.data.BackTestDataFeed.is_main","title":"is_main  <code>property</code>","text":"<pre><code>is_main: bool\n</code></pre> <p>Property to check DataFeed is main DataFeed or not</p>"},{"location":"reference/exchange/backtest/data/#lettrade.exchange.backtest.data.BackTestDataFeed.l","title":"l  <code>instance-attribute</code>","text":"<pre><code>l: LetDataFeedWrapper\n</code></pre> <p>LetTrade DataFeed wrapper using to manage index pointer of DataFeed</p>"},{"location":"reference/exchange/backtest/data/#lettrade.exchange.backtest.data.BackTestDataFeed.meta","title":"meta  <code>property</code>","text":"<pre><code>meta: dict\n</code></pre> <p>Property to get metadata of DataFeed</p>"},{"location":"reference/exchange/backtest/data/#lettrade.exchange.backtest.data.BackTestDataFeed.name","title":"name  <code>property</code>","text":"<pre><code>name: str\n</code></pre> <p>Property to get name of DataFeed</p>"},{"location":"reference/exchange/backtest/data/#lettrade.exchange.backtest.data.BackTestDataFeed.now","title":"now  <code>property</code>","text":"<pre><code>now: Timestamp\n</code></pre> <p>Property to get current index value of DataFeed</p>"},{"location":"reference/exchange/backtest/data/#lettrade.exchange.backtest.data.BackTestDataFeed.timeframe","title":"timeframe  <code>property</code>","text":"<pre><code>timeframe: TimeFrame\n</code></pre> <p>Property to get timeframe of DataFeed</p>"},{"location":"reference/exchange/backtest/data/#lettrade.exchange.backtest.data.BackTestDataFeed.bar","title":"bar","text":"<pre><code>bar(i: int = 0) -&gt; Timestamp\n</code></pre> <p>Get current pd.Timestamp value of DataFeed</p> <p>Parameters:</p> <ul> <li> <code>i</code>               (<code>int</code>, default:                   <code>0</code> )           \u2013            <p>Index. Defaults to 0.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Timestamp</code>           \u2013            <p>pd.Timestamp: description</p> </li> </ul> Source code in <code>lettrade/data/data.py</code> <pre><code>def bar(self, i: int = 0) -&gt; pd.Timestamp:\n    \"\"\"Get current pd.Timestamp value of DataFeed\n\n    Args:\n        i (int, optional): Index. Defaults to 0.\n\n    Returns:\n        pd.Timestamp: _description_\n    \"\"\"\n    return self.l.index[i]\n</code></pre>"},{"location":"reference/exchange/backtest/data/#lettrade.exchange.backtest.data.BackTestDataFeed.copy","title":"copy","text":"<pre><code>copy(deep: bool = False, **kwargs) -&gt; DataFeed\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>deep</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>description. Defaults to False.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>DataFeed</code> (              <code>DataFeed</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/data/data.py</code> <pre><code>def copy(self, deep: bool = False, **kwargs) -&gt; \"DataFeed\":\n    \"\"\"_summary_\n\n    Args:\n        deep (bool, optional): _description_. Defaults to False.\n\n    Returns:\n        DataFeed: _description_\n    \"\"\"\n    df = super().copy(deep=deep)\n    df = self.__class__(\n        data=df,\n        name=self.name,\n        timeframe=self.timeframe,\n        meta=self.meta.copy(),\n        **kwargs,\n    )\n    return df\n</code></pre>"},{"location":"reference/exchange/backtest/data/#lettrade.exchange.backtest.data.BackTestDataFeed.drop","title":"drop","text":"<pre><code>drop(\n    *args,\n    since: int | str | Timestamp | None = None,\n    to: int | str | Timestamp | None = None,\n    **kwargs\n) -&gt; None\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>since</code>               (<code>int | str | Timestamp | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>to</code>               (<code>int | str | Timestamp | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>description</p> </li> <li> <code>RuntimeError</code>             \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/data/data.py</code> <pre><code>def drop(\n    self,\n    *args,\n    since: int | str | pd.Timestamp | None = None,\n    to: int | str | pd.Timestamp | None = None,\n    **kwargs,\n) -&gt; None:\n    \"\"\"_summary_\n\n    Args:\n        since (int | str | pd.Timestamp | None, optional): _description_. Defaults to None.\n        to (int | str | pd.Timestamp | None, optional): _description_. Defaults to None.\n\n    Raises:\n        RuntimeError: _description_\n        RuntimeError: _description_\n    \"\"\"\n    if since is None and to is None:\n        super().drop(*args, **kwargs)\n        return\n\n    condiction = None\n\n    # Since\n    if since is not None:\n        if isinstance(since, int):\n            loc = self.l.index[since]\n        elif isinstance(since, str):\n            loc = pd.to_datetime(since, utc=True)\n        elif isinstance(since, pd.Timestamp):\n            loc = since\n        else:\n            raise RuntimeError(f\"DataFeed.drop since {since} is invalid\")\n        condiction = self.index &lt; loc\n\n    # To\n    if to is not None:\n        if isinstance(to, int):\n            loc = self.l.index[to]\n        elif isinstance(to, str):\n            loc = pd.to_datetime(to, utc=True)\n        elif isinstance(to, pd.Timestamp):\n            loc = to\n        else:\n            raise RuntimeError(f\"DataFeed.drop to {to} is invalid\")\n\n        if condiction is None:\n            condiction = self.index &gt; loc\n        else:\n            condiction = condiction | (self.index &gt; loc)\n\n    index = self[condiction].index\n    super().drop(index=index, inplace=True)\n    self.l.reset()\n\n    if __debug__:\n        logger.debug(\"BackTestDataFeed %s dropped %s rows\", self.name, len(index))\n</code></pre>"},{"location":"reference/exchange/backtest/data/#lettrade.exchange.backtest.data.BackTestDataFeed.push","title":"push","text":"<pre><code>push(\n    rows: list[list[int | float]],\n    unit: str | None = None,\n    utc: bool = True,\n    **kwargs\n)\n</code></pre> <p>Push new rows to DataFeed</p> <p>Parameters:</p> <ul> <li> <code>rows</code>               (<code>list[list[int | float]]</code>)           \u2013            <p>list of rows <code>[[\"timestamp\", \"open price\", \"high price\"...]]</code></p> </li> <li> <code>unit</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>pandas.Timestamp parsing unit. Defaults to None.</p> </li> <li> <code>utc</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>description. Defaults to True.</p> </li> </ul> Source code in <code>lettrade/data/data.py</code> <pre><code>def push(\n    self,\n    rows: list[list[int | float]],\n    unit: str | None = None,\n    utc: bool = True,\n    **kwargs,\n):\n    \"\"\"Push new rows to DataFeed\n\n    Args:\n        rows (list[list[int | float]]): list of rows `[[\"timestamp\", \"open price\", \"high price\"...]]`\n        unit (str | None, optional): pandas.Timestamp parsing unit. Defaults to None.\n        utc (bool, optional): _description_. Defaults to True.\n    \"\"\"\n    for row in rows:\n        dt = pd.to_datetime(row[0], unit=unit, utc=utc, **kwargs)\n        self.at[\n            dt,\n            (\n                \"open\",\n                \"high\",\n                \"low\",\n                \"close\",\n                \"volume\",\n            ),\n        ] = (\n            row[1],  # open\n            row[2],  # high\n            row[3],  # low\n            row[4],  # close\n            row[5],  # volume\n        )\n\n    if __debug__:\n        logger.debug(\"[%s] Update bar: \\n%s\", self.name, self.tail(len(rows)))\n</code></pre>"},{"location":"reference/exchange/backtest/data/#lettrade.exchange.backtest.data.CSVBackTestDataFeed","title":"CSVBackTestDataFeed","text":"<pre><code>CSVBackTestDataFeed(\n    path: str | None = None,\n    name: str | None = None,\n    timeframe: str | int | Timedelta | None = None,\n    delimiter: str = \",\",\n    index_col: int = 0,\n    header: int = 0,\n    meta: dict | None = None,\n    data: DataFeed | None = None,\n    **kwargs: dict\n)\n</code></pre> <p>               Bases: <code>BackTestDataFeed</code></p> <p>Implement help to load DataFeed from csv file</p> <p>Parameters:</p> <ul> <li> <code>name</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>Path to csv file</p> </li> <li> <code>delimiter</code>               (<code>str</code>, default:                   <code>','</code> )           \u2013            <p>description. Defaults to \",\".</p> </li> <li> <code>index_col</code>               (<code>int</code>, default:                   <code>0</code> )           \u2013            <p>description. Defaults to 0.</p> </li> <li> <code>header</code>               (<code>int</code>, default:                   <code>0</code> )           \u2013            <p>description. Defaults to 0.</p> </li> <li> <code>**kwargs</code>               (<code>dict</code>, default:                   <code>{}</code> )           \u2013            <p>DataFeed dict parameters</p> </li> </ul> Source code in <code>lettrade/exchange/backtest/data.py</code> <pre><code>def __init__(\n    self,\n    path: str | None = None,\n    name: str | None = None,\n    timeframe: str | int | pd.Timedelta | None = None,\n    delimiter: str = \",\",\n    index_col: int = 0,\n    header: int = 0,\n    meta: dict | None = None,\n    data: DataFeed | None = None,\n    **kwargs: dict,\n) -&gt; None:\n    \"\"\"_summary_\n\n    Args:\n        name (str): Path to csv file\n        delimiter (str, optional): _description_. Defaults to \",\".\n        index_col (int, optional): _description_. Defaults to 0.\n        header (int, optional): _description_. Defaults to 0.\n        **kwargs (dict): [DataFeed](../../data/data.md#lettrade.data.data.DataFeed) dict parameters\n    \"\"\"\n    if name is None:\n        name = _path_to_name(path)\n\n    if data is None:\n        data = pd.read_csv(\n            path,\n            index_col=index_col,\n            parse_dates=[\"datetime\"],\n            delimiter=delimiter,\n            header=header,\n        )\n        if not isinstance(data.index, pd.DatetimeIndex):\n            data.index = data.index.astype(\"datetime64[ns, UTC]\")\n\n    super().__init__(\n        data=data,\n        name=name,\n        timeframe=timeframe,\n        meta=meta,\n        **kwargs,\n    )\n</code></pre>"},{"location":"reference/exchange/backtest/data/#lettrade.exchange.backtest.data.CSVBackTestDataFeed.i","title":"i  <code>property</code>","text":"<pre><code>i: indicator\n</code></pre> <p>Alias to <code>lettrade.indicator</code> and using in DataFeed by call: <code>DataFeed.i.indicator_name()</code></p>"},{"location":"reference/exchange/backtest/data/#lettrade.exchange.backtest.data.CSVBackTestDataFeed.is_main","title":"is_main  <code>property</code>","text":"<pre><code>is_main: bool\n</code></pre> <p>Property to check DataFeed is main DataFeed or not</p>"},{"location":"reference/exchange/backtest/data/#lettrade.exchange.backtest.data.CSVBackTestDataFeed.l","title":"l  <code>instance-attribute</code>","text":"<pre><code>l: LetDataFeedWrapper\n</code></pre> <p>LetTrade DataFeed wrapper using to manage index pointer of DataFeed</p>"},{"location":"reference/exchange/backtest/data/#lettrade.exchange.backtest.data.CSVBackTestDataFeed.meta","title":"meta  <code>property</code>","text":"<pre><code>meta: dict\n</code></pre> <p>Property to get metadata of DataFeed</p>"},{"location":"reference/exchange/backtest/data/#lettrade.exchange.backtest.data.CSVBackTestDataFeed.name","title":"name  <code>property</code>","text":"<pre><code>name: str\n</code></pre> <p>Property to get name of DataFeed</p>"},{"location":"reference/exchange/backtest/data/#lettrade.exchange.backtest.data.CSVBackTestDataFeed.now","title":"now  <code>property</code>","text":"<pre><code>now: Timestamp\n</code></pre> <p>Property to get current index value of DataFeed</p>"},{"location":"reference/exchange/backtest/data/#lettrade.exchange.backtest.data.CSVBackTestDataFeed.timeframe","title":"timeframe  <code>property</code>","text":"<pre><code>timeframe: TimeFrame\n</code></pre> <p>Property to get timeframe of DataFeed</p>"},{"location":"reference/exchange/backtest/data/#lettrade.exchange.backtest.data.CSVBackTestDataFeed.bar","title":"bar","text":"<pre><code>bar(i: int = 0) -&gt; Timestamp\n</code></pre> <p>Get current pd.Timestamp value of DataFeed</p> <p>Parameters:</p> <ul> <li> <code>i</code>               (<code>int</code>, default:                   <code>0</code> )           \u2013            <p>Index. Defaults to 0.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Timestamp</code>           \u2013            <p>pd.Timestamp: description</p> </li> </ul> Source code in <code>lettrade/data/data.py</code> <pre><code>def bar(self, i: int = 0) -&gt; pd.Timestamp:\n    \"\"\"Get current pd.Timestamp value of DataFeed\n\n    Args:\n        i (int, optional): Index. Defaults to 0.\n\n    Returns:\n        pd.Timestamp: _description_\n    \"\"\"\n    return self.l.index[i]\n</code></pre>"},{"location":"reference/exchange/backtest/data/#lettrade.exchange.backtest.data.CSVBackTestDataFeed.copy","title":"copy","text":"<pre><code>copy(deep: bool = False, **kwargs) -&gt; DataFeed\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>deep</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>description. Defaults to False.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>DataFeed</code> (              <code>DataFeed</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/data/data.py</code> <pre><code>def copy(self, deep: bool = False, **kwargs) -&gt; \"DataFeed\":\n    \"\"\"_summary_\n\n    Args:\n        deep (bool, optional): _description_. Defaults to False.\n\n    Returns:\n        DataFeed: _description_\n    \"\"\"\n    df = super().copy(deep=deep)\n    df = self.__class__(\n        data=df,\n        name=self.name,\n        timeframe=self.timeframe,\n        meta=self.meta.copy(),\n        **kwargs,\n    )\n    return df\n</code></pre>"},{"location":"reference/exchange/backtest/data/#lettrade.exchange.backtest.data.CSVBackTestDataFeed.drop","title":"drop","text":"<pre><code>drop(\n    *args,\n    since: int | str | Timestamp | None = None,\n    to: int | str | Timestamp | None = None,\n    **kwargs\n) -&gt; None\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>since</code>               (<code>int | str | Timestamp | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>to</code>               (<code>int | str | Timestamp | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>description</p> </li> <li> <code>RuntimeError</code>             \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/data/data.py</code> <pre><code>def drop(\n    self,\n    *args,\n    since: int | str | pd.Timestamp | None = None,\n    to: int | str | pd.Timestamp | None = None,\n    **kwargs,\n) -&gt; None:\n    \"\"\"_summary_\n\n    Args:\n        since (int | str | pd.Timestamp | None, optional): _description_. Defaults to None.\n        to (int | str | pd.Timestamp | None, optional): _description_. Defaults to None.\n\n    Raises:\n        RuntimeError: _description_\n        RuntimeError: _description_\n    \"\"\"\n    if since is None and to is None:\n        super().drop(*args, **kwargs)\n        return\n\n    condiction = None\n\n    # Since\n    if since is not None:\n        if isinstance(since, int):\n            loc = self.l.index[since]\n        elif isinstance(since, str):\n            loc = pd.to_datetime(since, utc=True)\n        elif isinstance(since, pd.Timestamp):\n            loc = since\n        else:\n            raise RuntimeError(f\"DataFeed.drop since {since} is invalid\")\n        condiction = self.index &lt; loc\n\n    # To\n    if to is not None:\n        if isinstance(to, int):\n            loc = self.l.index[to]\n        elif isinstance(to, str):\n            loc = pd.to_datetime(to, utc=True)\n        elif isinstance(to, pd.Timestamp):\n            loc = to\n        else:\n            raise RuntimeError(f\"DataFeed.drop to {to} is invalid\")\n\n        if condiction is None:\n            condiction = self.index &gt; loc\n        else:\n            condiction = condiction | (self.index &gt; loc)\n\n    index = self[condiction].index\n    super().drop(index=index, inplace=True)\n    self.l.reset()\n\n    if __debug__:\n        logger.debug(\"BackTestDataFeed %s dropped %s rows\", self.name, len(index))\n</code></pre>"},{"location":"reference/exchange/backtest/data/#lettrade.exchange.backtest.data.CSVBackTestDataFeed.push","title":"push","text":"<pre><code>push(\n    rows: list[list[int | float]],\n    unit: str | None = None,\n    utc: bool = True,\n    **kwargs\n)\n</code></pre> <p>Push new rows to DataFeed</p> <p>Parameters:</p> <ul> <li> <code>rows</code>               (<code>list[list[int | float]]</code>)           \u2013            <p>list of rows <code>[[\"timestamp\", \"open price\", \"high price\"...]]</code></p> </li> <li> <code>unit</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>pandas.Timestamp parsing unit. Defaults to None.</p> </li> <li> <code>utc</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>description. Defaults to True.</p> </li> </ul> Source code in <code>lettrade/data/data.py</code> <pre><code>def push(\n    self,\n    rows: list[list[int | float]],\n    unit: str | None = None,\n    utc: bool = True,\n    **kwargs,\n):\n    \"\"\"Push new rows to DataFeed\n\n    Args:\n        rows (list[list[int | float]]): list of rows `[[\"timestamp\", \"open price\", \"high price\"...]]`\n        unit (str | None, optional): pandas.Timestamp parsing unit. Defaults to None.\n        utc (bool, optional): _description_. Defaults to True.\n    \"\"\"\n    for row in rows:\n        dt = pd.to_datetime(row[0], unit=unit, utc=utc, **kwargs)\n        self.at[\n            dt,\n            (\n                \"open\",\n                \"high\",\n                \"low\",\n                \"close\",\n                \"volume\",\n            ),\n        ] = (\n            row[1],  # open\n            row[2],  # high\n            row[3],  # low\n            row[4],  # close\n            row[5],  # volume\n        )\n\n    if __debug__:\n        logger.debug(\"[%s] Update bar: \\n%s\", self.name, self.tail(len(rows)))\n</code></pre>"},{"location":"reference/exchange/backtest/exchange/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> exchange","text":""},{"location":"reference/exchange/backtest/exchange/#lettrade.exchange.backtest.exchange","title":"exchange","text":""},{"location":"reference/exchange/backtest/exchange/#lettrade.exchange.backtest.exchange.BackTestExchange","title":"BackTestExchange","text":"<pre><code>BackTestExchange(**kwargs)\n</code></pre> <p>               Bases: <code>Exchange</code></p> Source code in <code>lettrade/exchange/backtest/exchange.py</code> <pre><code>def __init__(self, **kwargs):\n    super().__init__(**kwargs)\n\n    if self._config.setdefault(\"use_execution\", False):\n        self.executions = None\n</code></pre>"},{"location":"reference/exchange/backtest/exchange/#lettrade.exchange.backtest.exchange.BackTestExchange.data","title":"data  <code>instance-attribute</code>","text":"<pre><code>data: DataFeed\n</code></pre> <p>main DataFeed</p>"},{"location":"reference/exchange/backtest/exchange/#lettrade.exchange.backtest.exchange.BackTestExchange.datas","title":"datas  <code>instance-attribute</code>","text":"<pre><code>datas: list[DataFeed]\n</code></pre> <p>List of all available DataFeed</p>"},{"location":"reference/exchange/backtest/exchange/#lettrade.exchange.backtest.exchange.BackTestExchange.history_orders","title":"history_orders  <code>instance-attribute</code>","text":"<pre><code>history_orders: dict[str, Order] = dict()\n</code></pre> <p>History Order dict by <code>Order.id</code> key</p>"},{"location":"reference/exchange/backtest/exchange/#lettrade.exchange.backtest.exchange.BackTestExchange.history_positions","title":"history_positions  <code>instance-attribute</code>","text":"<pre><code>history_positions: dict[str, Position] = dict()\n</code></pre> <p>History Position dict by <code>Position.id</code> key</p>"},{"location":"reference/exchange/backtest/exchange/#lettrade.exchange.backtest.exchange.BackTestExchange.orders","title":"orders  <code>instance-attribute</code>","text":"<pre><code>orders: dict[str, Order] = dict()\n</code></pre> <p>Available Order dict by <code>Order.id</code> key</p>"},{"location":"reference/exchange/backtest/exchange/#lettrade.exchange.backtest.exchange.BackTestExchange.positions","title":"positions  <code>instance-attribute</code>","text":"<pre><code>positions: dict[str, Position] = dict()\n</code></pre> <p>Available Position dict by <code>Position.id</code> key</p>"},{"location":"reference/exchange/backtest/exchange/#lettrade.exchange.backtest.exchange.BackTestExchange.init","title":"init","text":"<pre><code>init(\n    brain: Brain,\n    feeder: DataFeeder,\n    account: Account,\n    commander: Commander,\n) -&gt; None\n</code></pre> <p>Init Exchange dependencies. Set data/datas from feeder. Set state to <code>ExchangeState.Start</code>.</p> <p>Parameters:</p> <ul> <li> <code>brain</code>               (<code>Brain</code>)           \u2013            <p>description</p> </li> <li> <code>feeder</code>               (<code>DataFeeder</code>)           \u2013            <p>description</p> </li> <li> <code>account</code>               (<code>Account</code>)           \u2013            <p>description</p> </li> <li> <code>commander</code>               (<code>Commander</code>)           \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def init(\n    self,\n    brain: \"Brain\",\n    feeder: DataFeeder,\n    account: Account,\n    commander: Commander,\n) -&gt; None:\n    \"\"\"Init Exchange dependencies.\n    Set data/datas from feeder.\n    Set state to `ExchangeState.Start`.\n\n    Args:\n        brain (Brain): _description_\n        feeder (DataFeeder): _description_\n        account (Account): _description_\n        commander (Commander): _description_\n    \"\"\"\n    self._brain = brain\n    self._feeder = feeder\n    self._account = account\n    self._commander = commander\n\n    self.data = self._feeder.data\n    self.datas = self._feeder.datas\n\n    self._account.init(exchange=self)\n\n    self._state = ExchangeState.Start\n</code></pre>"},{"location":"reference/exchange/backtest/exchange/#lettrade.exchange.backtest.exchange.BackTestExchange.new_order","title":"new_order","text":"<pre><code>new_order(\n    size: float,\n    type: OrderType = OrderType.Market,\n    limit: float | None = None,\n    stop: float | None = None,\n    sl: float | None = None,\n    tp: float | None = None,\n    tag: object | None = None,\n    data: DataFeed | None = None,\n    **kwargs\n) -&gt; OrderResult\n</code></pre> <p>Place new order. Then send order events to <code>Brain</code></p> <p>Parameters:</p> <ul> <li> <code>size</code>               (<code>float</code>)           \u2013            <p>description</p> </li> <li> <code>type</code>               (<code>OrderType | None</code>, default:                   <code>Market</code> )           \u2013            <p>description. Defaults to OrderType.Market.</p> </li> <li> <code>limit</code>               (<code>float | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>stop</code>               (<code>float | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>sl</code>               (<code>float | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>tp</code>               (<code>float | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>tag</code>               (<code>object | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>data</code>               (<code>DataFeed | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>**kwargs</code>               (<code>dict | None</code>, default:                   <code>{}</code> )           \u2013            <p>Extra-parameters</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>OrderResult</code> (              <code>OrderResult</code> )          \u2013            <p>Result when place new <code>Order</code></p> </li> </ul> Source code in <code>lettrade/exchange/backtest/exchange.py</code> <pre><code>def new_order(\n    self,\n    size: float,\n    type: OrderType = OrderType.Market,\n    limit: float | None = None,\n    stop: float | None = None,\n    sl: float | None = None,\n    tp: float | None = None,\n    tag: object | None = None,\n    data: DataFeed | None = None,\n    **kwargs,\n) -&gt; OrderResult:\n    \"\"\"Place new order.\n    Then send order events to `Brain`\n\n    Args:\n        size (float): _description_\n        type (OrderType | None, optional): _description_. Defaults to OrderType.Market.\n        limit (float | None, optional): _description_. Defaults to None.\n        stop (float | None, optional): _description_. Defaults to None.\n        sl (float | None, optional): _description_. Defaults to None.\n        tp (float | None, optional): _description_. Defaults to None.\n        tag (object | None, optional): _description_. Defaults to None.\n        data (DataFeed | None, optional): _description_. Defaults to None.\n        **kwargs (dict | None, optional): Extra-parameters\n\n    Returns:\n        OrderResult: Result when place new `Order`\n    \"\"\"\n    if not data:\n        data = self.data\n\n    order = BackTestOrder(\n        id=self._id(),\n        exchange=self,\n        data=data,\n        size=size,\n        type=type,\n        limit_price=limit,\n        stop_price=stop,\n        sl_price=sl,\n        tp_price=tp,\n        tag=tag,\n    )\n    ok = order.place(at=self.data.bar())\n\n    if type == OrderType.Market:\n        # Simulate market order will send event before return order result\n        self._simulate_orders()\n\n    return ok\n</code></pre>"},{"location":"reference/exchange/backtest/exchange/#lettrade.exchange.backtest.exchange.BackTestExchange.next","title":"next","text":"<pre><code>next()\n</code></pre> <p>Execution when new data feeded</p> Source code in <code>lettrade/exchange/backtest/exchange.py</code> <pre><code>def next(self):\n    \"\"\"Execution when new data feeded\"\"\"\n    self._simulate_orders()\n    super().next()\n</code></pre>"},{"location":"reference/exchange/backtest/exchange/#lettrade.exchange.backtest.exchange.BackTestExchange.next_next","title":"next_next","text":"<pre><code>next_next()\n</code></pre> <p>Call after strategy.next()</p> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def next_next(self):\n    \"\"\"Call after strategy.next()\"\"\"\n    self._account.next_next()\n</code></pre>"},{"location":"reference/exchange/backtest/exchange/#lettrade.exchange.backtest.exchange.BackTestExchange.on_executions","title":"on_executions","text":"<pre><code>on_executions(\n    executions: list[Execution],\n    broadcast: bool | None = True,\n    **kwargs\n) -&gt; None\n</code></pre> <p>Receive Execution event from exchange then store and notify Brain</p> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def on_executions(\n    self,\n    executions: list[Execution],\n    broadcast: bool | None = True,\n    **kwargs,\n) -&gt; None:\n    \"\"\"\n    Receive Execution event from exchange then store and notify Brain\n    \"\"\"\n    for execution in executions:\n        if not isinstance(execution, Execution):\n            raise RuntimeError(f\"{execution} is not instance of type Execution\")\n\n        if execution.id in self.executions:\n            # Merge to keep Execution handler for strategy using\n            # when strategy want to store Execution object\n            # and object will be automatic update directly\n            self.executions[execution.id].merge(execution)\n            execution = self.executions[execution.id]\n        else:\n            self.executions[execution.id] = execution\n\n    if self._state != ExchangeState.Run:\n        return\n\n    if broadcast:\n        self._brain.on_executions(executions)\n</code></pre>"},{"location":"reference/exchange/backtest/exchange/#lettrade.exchange.backtest.exchange.BackTestExchange.on_order","title":"on_order","text":"<pre><code>on_order(\n    order: Order, broadcast: bool | None = True, **kwargs\n) -&gt; None\n</code></pre> <p>Receive order event from exchange then store and notify Brain</p> <p>Parameters:</p> <ul> <li> <code>order</code>               (<code>Order</code>)           \u2013            <p>description</p> </li> <li> <code>broadcast</code>               (<code>bool | None</code>, default:                   <code>True</code> )           \u2013            <p>description. Defaults to True.</p> </li> </ul> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def on_order(\n    self,\n    order: Order,\n    broadcast: bool | None = True,\n    **kwargs,\n) -&gt; None:\n    \"\"\"Receive order event from exchange then store and notify Brain\n\n    Args:\n        order (Order): _description_\n        broadcast (bool | None, optional): _description_. Defaults to True.\n    \"\"\"\n    self.on_orders(orders=[order], broadcast=broadcast, **kwargs)\n</code></pre>"},{"location":"reference/exchange/backtest/exchange/#lettrade.exchange.backtest.exchange.BackTestExchange.on_orders","title":"on_orders","text":"<pre><code>on_orders(\n    orders: list[Order],\n    broadcast: bool | None = True,\n    **kwargs\n) -&gt; None\n</code></pre> <p>Receive orders event from exchange then store and notify Brain</p> <p>Parameters:</p> <ul> <li> <code>orders</code>               (<code>list[Order]</code>)           \u2013            <p>description</p> </li> <li> <code>broadcast</code>               (<code>bool | None</code>, default:                   <code>True</code> )           \u2013            <p>description. Defaults to True.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def on_orders(\n    self,\n    orders: list[Order],\n    broadcast: bool | None = True,\n    **kwargs,\n) -&gt; None:\n    \"\"\"Receive orders event from exchange then store and notify Brain\n\n    Args:\n        orders (list[Order]): _description_\n        broadcast (bool | None, optional): _description_. Defaults to True.\n\n    Raises:\n        RuntimeError: _description_\n    \"\"\"\n    for order in orders:\n        if not isinstance(order, Order):\n            raise RuntimeError(f\"{order} is not instance of type Order\")\n\n        if order.is_closed:\n            if order.id in self.history_orders:\n                logger.warning(\"Order closed recall: %s\", order)\n\n            self.history_orders[order.id] = order\n            if order.id in self.orders:\n                del self.orders[order.id]\n        else:\n            if order.id in self.history_orders:\n                raise RuntimeError(f\"Order {order.id} closed\")\n\n            if order.id in self.orders:\n                # Merge to keep Order handler for strategy using\n                # when strategy want to store Order object\n                # and object will be automatic update directly\n                self.orders[order.id].merge(order)\n                order = self.orders[order.id]\n            else:\n                self.orders[order.id] = order\n\n    if self._state != ExchangeState.Run:\n        return\n\n    if broadcast:\n        self._brain.on_orders(orders)\n</code></pre>"},{"location":"reference/exchange/backtest/exchange/#lettrade.exchange.backtest.exchange.BackTestExchange.on_position","title":"on_position","text":"<pre><code>on_position(\n    position: Position,\n    broadcast: bool | None = True,\n    **kwargs\n) -&gt; None\n</code></pre> <p>Receive Position event from exchange then store and notify Brain</p> <p>Parameters:</p> <ul> <li> <code>position</code>               (<code>Position</code>)           \u2013            <p>new comming <code>Position</code></p> </li> <li> <code>broadcast</code>               (<code>bool | None</code>, default:                   <code>True</code> )           \u2013            <p>Flag notify to Brain. Defaults to True.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>validate <code>Position</code> instance</p> </li> </ul> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def on_position(\n    self,\n    position: Position,\n    broadcast: bool | None = True,\n    **kwargs,\n) -&gt; None:\n    \"\"\"Receive Position event from exchange then store and notify Brain\n\n    Args:\n        position (Position): new comming `Position`\n        broadcast (bool | None, optional): Flag notify to Brain. Defaults to True.\n\n    Raises:\n        RuntimeError: validate `Position` instance\n    \"\"\"\n    self.on_positions(positions=[position], broadcast=broadcast, **kwargs)\n</code></pre>"},{"location":"reference/exchange/backtest/exchange/#lettrade.exchange.backtest.exchange.BackTestExchange.on_positions","title":"on_positions","text":"<pre><code>on_positions(\n    positions: list[Position],\n    broadcast: bool | None = True,\n    **kwargs\n) -&gt; None\n</code></pre> <p>Receive Positions event from exchange then store and notify Brain</p> <p>Parameters:</p> <ul> <li> <code>positions</code>               (<code>list[Position]</code>)           \u2013            <p>list of new comming <code>Position</code></p> </li> <li> <code>broadcast</code>               (<code>bool | None</code>, default:                   <code>True</code> )           \u2013            <p>Flag notify to Brain. Defaults to True.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>validate <code>Position</code> instance</p> </li> </ul> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def on_positions(\n    self,\n    positions: list[Position],\n    broadcast: bool | None = True,\n    **kwargs,\n) -&gt; None:\n    \"\"\"Receive Positions event from exchange then store and notify Brain\n\n    Args:\n        positions (list[Position]): list of new comming `Position`\n        broadcast (bool | None, optional): Flag notify to Brain. Defaults to True.\n\n    Raises:\n        RuntimeError: validate `Position` instance\n    \"\"\"\n    for position in positions:\n        if not isinstance(position, Position):\n            raise RuntimeError(f\"{position} is not instance of type Position\")\n\n        if position.is_exited:\n            if position.id in self.history_positions:\n                logger.warning(\"Position exited recall: %s\", position)\n\n            self.history_positions[position.id] = position\n            if position.id in self.positions:\n                del self.positions[position.id]\n\n            # self._account._on_position_exit(position)\n        else:\n            if position.id in self.history_positions:\n                raise RuntimeError(f\"Position {position.id} closed: {position}\")\n            if position.id in self.positions:\n                # Merge to keep Position handler for strategy using\n                # when strategy want to store Position object\n                # and object will be automatic update directly\n                self.positions[position.id].merge(position)\n                position = self.positions[position.id]\n            else:\n                self.positions[position.id] = position\n                # self._account._on_position_entry(position)\n\n    self._account.on_positions(positions)\n\n    if self._state != ExchangeState.Run:\n        return\n\n    if broadcast:\n        self._brain.on_positions(positions)\n</code></pre>"},{"location":"reference/exchange/backtest/exchange/#lettrade.exchange.backtest.exchange.BackTestExchange.start","title":"start","text":"<pre><code>start() -&gt; None\n</code></pre> <p>Start of Exchange by: - Start account. - Set state to <code>ExchangeState.Run</code> ready for next().</p> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def start(self) -&gt; None:\n    \"\"\"Start of Exchange by:\n    - Start account.\n    - Set state to `ExchangeState.Run` ready for next().\n    \"\"\"\n    self._account.start()\n    self._state = ExchangeState.Run\n</code></pre>"},{"location":"reference/exchange/backtest/exchange/#lettrade.exchange.backtest.exchange.BackTestExchange.stop","title":"stop","text":"<pre><code>stop() -&gt; None\n</code></pre> <p>Stop Exchange</p> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def stop(self) -&gt; None:\n    \"\"\"Stop Exchange\"\"\"\n    self._state = ExchangeState.Stop\n    self._account.stop()\n</code></pre>"},{"location":"reference/exchange/backtest/feeder/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> feeder","text":""},{"location":"reference/exchange/backtest/feeder/#lettrade.exchange.backtest.feeder","title":"feeder","text":""},{"location":"reference/exchange/backtest/feeder/#lettrade.exchange.backtest.feeder.BackTestDataFeeder","title":"BackTestDataFeeder","text":"<p>               Bases: <code>DataFeeder</code></p> <p>BackTest DataFeeder</p>"},{"location":"reference/exchange/backtest/feeder/#lettrade.exchange.backtest.feeder.BackTestDataFeeder.is_continous","title":"is_continous  <code>property</code>","text":"<pre><code>is_continous\n</code></pre> <p>Flag check is realtime continous datafeeder</p>"},{"location":"reference/exchange/backtest/plot/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> plot","text":""},{"location":"reference/exchange/backtest/plot/#lettrade.exchange.backtest.plot","title":"plot","text":""},{"location":"reference/exchange/backtest/plot/#lettrade.exchange.backtest.plot.OptimizePlotter","title":"OptimizePlotter","text":"<pre><code>OptimizePlotter()\n</code></pre> <p>               Bases: <code>Plotter</code></p> <p>Class help to plot <code>lettrade</code></p> Source code in <code>lettrade/exchange/backtest/plot.py</code> <pre><code>def __init__(self) -&gt; None:\n    super().__init__()\n</code></pre>"},{"location":"reference/exchange/backtest/plot/#lettrade.exchange.backtest.plot.OptimizePlotter.contour","title":"contour","text":"<pre><code>contour(x: str, y: str, z: str = 'equity', **kwargs)\n</code></pre> Source code in <code>lettrade/exchange/backtest/plot.py</code> <pre><code>def contour(self, x: str, y: str, z: str = \"equity\", **kwargs):\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/backtest/plot/#lettrade.exchange.backtest.plot.OptimizePlotter.heatmap","title":"heatmap","text":"<pre><code>heatmap(x: str, y: str, z: str = 'equity', **kwargs)\n</code></pre> Source code in <code>lettrade/exchange/backtest/plot.py</code> <pre><code>def heatmap(self, x: str, y: str, z: str = \"equity\", **kwargs):\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/backtest/plot/#lettrade.exchange.backtest.plot.OptimizePlotter.load","title":"load  <code>abstractmethod</code>","text":"<pre><code>load()\n</code></pre> <p>Load plot config from <code>Strategy.plot()</code> and setup candlestick/equity</p> Source code in <code>lettrade/plot/plot.py</code> <pre><code>@abstractmethod\ndef load(self):\n    \"\"\"Load plot config from `Strategy.plot()` and setup candlestick/equity\"\"\"\n</code></pre>"},{"location":"reference/exchange/backtest/plot/#lettrade.exchange.backtest.plot.OptimizePlotter.on_done","title":"on_done","text":"<pre><code>on_done()\n</code></pre> Source code in <code>lettrade/exchange/backtest/plot.py</code> <pre><code>def on_done(self):\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/backtest/plot/#lettrade.exchange.backtest.plot.OptimizePlotter.on_result","title":"on_result","text":"<pre><code>on_result(result)\n</code></pre> Source code in <code>lettrade/exchange/backtest/plot.py</code> <pre><code>def on_result(self, result):\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/backtest/plot/#lettrade.exchange.backtest.plot.OptimizePlotter.plot","title":"plot  <code>abstractmethod</code>","text":"<pre><code>plot(**kwargs)\n</code></pre> <p>Plot <code>equity</code>, <code>orders</code>, and <code>positions</code> then show</p> Source code in <code>lettrade/plot/plot.py</code> <pre><code>@abstractmethod\ndef plot(self, **kwargs):\n    \"\"\"Plot `equity`, `orders`, and `positions` then show\"\"\"\n</code></pre>"},{"location":"reference/exchange/backtest/plot/#lettrade.exchange.backtest.plot.OptimizePlotter.stop","title":"stop  <code>abstractmethod</code>","text":"<pre><code>stop()\n</code></pre> <p>stop plotter</p> Source code in <code>lettrade/plot/plot.py</code> <pre><code>@abstractmethod\ndef stop(self):\n    \"\"\"stop plotter\"\"\"\n</code></pre>"},{"location":"reference/exchange/backtest/stats/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> stats","text":""},{"location":"reference/exchange/backtest/stats/#lettrade.exchange.backtest.stats","title":"stats","text":""},{"location":"reference/exchange/backtest/stats/#lettrade.exchange.backtest.stats.OptimizeStatistic","title":"OptimizeStatistic","text":"<pre><code>OptimizeStatistic(\n    plotter: OptimizePlotter = None, total: int = 0\n)\n</code></pre> <p>Compute strategy result</p> Source code in <code>lettrade/exchange/backtest/stats.py</code> <pre><code>def __init__(self, plotter: OptimizePlotter = None, total: int = 0) -&gt; None:\n    self.plotter = plotter\n    self._total = total\n\n    self.results = []\n    self._result_thread = None\n\n    if self.plotter is not None:\n        self.plotter.init(self.results)\n\n    self._t_wait_result()\n</code></pre>"},{"location":"reference/exchange/backtest/stats/#lettrade.exchange.backtest.stats.OptimizeStatistic.compute","title":"compute","text":"<pre><code>compute()\n</code></pre> <p>Calculate strategy report</p> Source code in <code>lettrade/exchange/backtest/stats.py</code> <pre><code>def compute(self):\n    \"\"\"\n    Calculate strategy report\n    \"\"\"\n\n    return self.result\n</code></pre>"},{"location":"reference/exchange/backtest/trade/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> trade","text":""},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade","title":"trade","text":""},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestExecution","title":"BackTestExecution","text":"<pre><code>BackTestExecution(\n    exchange: BackTestExchange, *args, **kwargs\n)\n</code></pre> <p>               Bases: <code>Execution</code></p> <p>Execution for backtesting</p> Source code in <code>lettrade/exchange/backtest/trade.py</code> <pre><code>def __init__(self, exchange: \"BackTestExchange\", *args, **kwargs):\n    if exchange.executions is None:\n        logger.warning(\n            \"Execution transaction is disable, enable by flag: show_execution=True\"\n        )\n        return\n\n    super().__init__(*args, exchange=exchange, **kwargs)\n</code></pre>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestExecution.is_long","title":"is_long  <code>property</code>","text":"<pre><code>is_long: bool\n</code></pre> <p>True if side is long (size is positive).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True/False</p> </li> </ul>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestExecution.is_short","title":"is_short  <code>property</code>","text":"<pre><code>is_short: bool\n</code></pre> <p>True if side is short (size is negative).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestExecution.side","title":"side  <code>property</code>","text":"<pre><code>side: TradeSide\n</code></pre> <p>True if side is short (size is negative).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>TradeSide</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestExecution.from_order","title":"from_order  <code>classmethod</code>","text":"<pre><code>from_order(\n    order: BackTestOrder,\n    price: float,\n    at: object,\n    size: float | None = None,\n) -&gt; BackTestExecution\n</code></pre> <p>Method help to build Execution object from Order object</p> <p>Parameters:</p> <ul> <li> <code>price</code>               (<code>float</code>)           \u2013            <p>Executed price</p> </li> <li> <code>at</code>               (<code>object</code>)           \u2013            <p>Executed bar</p> </li> <li> <code>size</code>               (<code>float | None</code>, default:                   <code>None</code> )           \u2013            <p>Executed size. Defaults to None.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>BackTestExecution</code> (              <code>BackTestExecution</code> )          \u2013            <p>Execution object</p> </li> </ul> Source code in <code>lettrade/exchange/backtest/trade.py</code> <pre><code>@classmethod\ndef from_order(\n    cls,\n    order: \"BackTestOrder\",\n    price: float,\n    at: object,\n    size: float | None = None,\n) -&gt; \"BackTestExecution\":\n    \"\"\"Method help to build Execution object from Order object\n\n    Args:\n        price (float): Executed price\n        at (object): Executed bar\n        size (float | None, optional): Executed size. Defaults to None.\n\n    Returns:\n        BackTestExecution: Execution object\n    \"\"\"\n    return cls(\n        id=order.id,\n        size=size or order.size,\n        exchange=order.exchange,\n        data=order.data,\n        price=price,\n        at=at,\n        order=order,\n    )\n</code></pre>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestExecution.merge","title":"merge","text":"<pre><code>merge(other: Execution)\n</code></pre> <p>Merge to keep object handler but not overwrite for Strategy using when Strategy want to store object and object will be automatic update directly</p> Source code in <code>lettrade/exchange/execution.py</code> <pre><code>def merge(self, other: \"Execution\"):\n    \"\"\"\n    Merge to keep object handler but not overwrite for Strategy using when Strategy want to store object and object will be automatic update directly\n    \"\"\"\n    if other is self:\n        return\n\n    if self.id != other.id:\n        raise RuntimeError(f\"Merge difference id {self.id} != {other.id} execution\")\n\n    self.price = other.price\n    self.size = other.size\n\n    if other.at:\n        self.at = other.at\n    if other.order_id:\n        self.order_id = other.order_id\n    if other.order:\n        self.order = other.order\n    if other.position_id:\n        self.position_id = other.position_id\n    if other.position:\n        self.position = other.position\n</code></pre>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestOrder","title":"BackTestOrder","text":"<pre><code>BackTestOrder(\n    id: str,\n    exchange: Exchange,\n    data: DataFeed,\n    size: float,\n    state: OrderState = OrderState.Pending,\n    type: OrderType = OrderType.Market,\n    limit_price: float | None = None,\n    stop_price: float | None = None,\n    sl_price: float | None = None,\n    tp_price: float | None = None,\n    parent: Position | None = None,\n    tag: str | None = None,\n    placed_at: Timestamp | None = None,\n    **kwargs\n)\n</code></pre> <p>               Bases: <code>Order</code></p> <p>Order for backtesting</p> Source code in <code>lettrade/exchange/order.py</code> <pre><code>def __init__(\n    self,\n    id: str,\n    exchange: \"Exchange\",\n    data: \"DataFeed\",\n    size: float,\n    state: OrderState = OrderState.Pending,\n    type: OrderType = OrderType.Market,\n    limit_price: float | None = None,\n    stop_price: float | None = None,\n    sl_price: float | None = None,\n    tp_price: float | None = None,\n    parent: \"Position | None\" = None,\n    tag: str | None = None,\n    placed_at: pd.Timestamp | None = None,\n    **kwargs,\n):\n    super().__init__(\n        id=id,\n        exchange=exchange,\n        data=data,\n        size=size,\n        **kwargs,\n    )\n\n    self.type: OrderType = type\n    self.state: OrderState = state\n    self.limit_price: float | None = limit_price\n    self.stop_price: float | None = stop_price\n    self.sl_price: float | None = sl_price\n    self.tp_price: float | None = tp_price\n    self.parent: \"Position | None\" = parent\n    self.tag: str | None = tag\n    self.placed_at: pd.Timestamp | None = placed_at\n    self.filled_at: pd.Timestamp | None = None\n    self.filled_price: float | None = None\n</code></pre>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestOrder.is_closed","title":"is_closed  <code>property</code>","text":"<pre><code>is_closed: bool\n</code></pre> <p>Flag to check <code>Order</code> closed</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True if <code>state</code> in [OrderState.Filled, OrderState.Canceled]</p> </li> </ul>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestOrder.is_long","title":"is_long  <code>property</code>","text":"<pre><code>is_long: bool\n</code></pre> <p>True if side is long (size is positive).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True/False</p> </li> </ul>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestOrder.is_opening","title":"is_opening  <code>property</code>","text":"<pre><code>is_opening: bool\n</code></pre> <p>Flag to check <code>Order</code> still alive</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True if <code>state</code> in [OrderState.Pending, OrderState.Placed, OrderState.Partial]</p> </li> </ul>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestOrder.is_short","title":"is_short  <code>property</code>","text":"<pre><code>is_short: bool\n</code></pre> <p>True if side is short (size is negative).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestOrder.is_sl_order","title":"is_sl_order  <code>property</code>","text":"<pre><code>is_sl_order: bool\n</code></pre> <p><code>Order</code> is stop-loss order of a <code>Position</code></p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestOrder.is_tp_order","title":"is_tp_order  <code>property</code>","text":"<pre><code>is_tp_order: bool\n</code></pre> <p><code>Order</code> is take-profit order of a <code>Position</code></p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestOrder.limit","title":"limit  <code>property</code>","text":"<pre><code>limit: float | None\n</code></pre> <p>Getter of limit_price</p> <p>Returns:</p> <ul> <li> <code>float | None</code>           \u2013            <p>float | None: <code>float</code> or <code>None</code></p> </li> </ul>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestOrder.place_price","title":"place_price  <code>property</code>","text":"<pre><code>place_price: float | None\n</code></pre> <p>Getter of place_price</p> <p>Returns:</p> <ul> <li> <code>float | None</code>           \u2013            <p>float | None: <code>float</code> or <code>None</code></p> </li> </ul>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestOrder.side","title":"side  <code>property</code>","text":"<pre><code>side: TradeSide\n</code></pre> <p>True if side is short (size is negative).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>TradeSide</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestOrder.sl","title":"sl  <code>property</code>","text":"<pre><code>sl: float | None\n</code></pre> <p>Getter of sl_price</p> <p>Returns:</p> <ul> <li> <code>float | None</code>           \u2013            <p>float | None: <code>float</code> or <code>None</code></p> </li> </ul>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestOrder.stop","title":"stop  <code>property</code>","text":"<pre><code>stop: float | None\n</code></pre> <p>Getter of stop_price</p> <p>Returns:</p> <ul> <li> <code>float | None</code>           \u2013            <p>float | None: <code>float</code> or <code>None</code></p> </li> </ul>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestOrder.tp","title":"tp  <code>property</code>","text":"<pre><code>tp: float | None\n</code></pre> <p>Getter of tp_price</p> <p>Returns:</p> <ul> <li> <code>float | None</code>           \u2013            <p>float | None: <code>float</code> or <code>None</code></p> </li> </ul>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestOrder.cancel","title":"cancel","text":"<pre><code>cancel(\n    caller: Order | Position | None = None, **kwargs\n) -&gt; OrderResult\n</code></pre> <p>Cancel the Order and notify Exchange</p> Source code in <code>lettrade/exchange/backtest/trade.py</code> <pre><code>def cancel(\n    self,\n    caller: Order | Position | None = None,\n    **kwargs,\n) -&gt; \"OrderResult\":\n    \"\"\"Cancel the Order and notify Exchange\"\"\"\n    if self.state != OrderState.Placed:\n        raise RuntimeError(f\"Order {self.id} state {self.state} is not Placed\")\n\n    if self.parent:\n        if self is self.parent.sl_order:\n            self.parent.sl_order = None\n        elif self is self.parent.tp_order:\n            self.parent.tp_order = None\n\n    return super().cancel()\n</code></pre>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestOrder.fill","title":"fill","text":"<pre><code>fill(\n    price: float, at: object, **kwargs\n) -&gt; BackTestExecution\n</code></pre> <p>Execution order and notify for Exchange</p> <p>Parameters:</p> <ul> <li> <code>price</code>               (<code>float</code>)           \u2013            <p>Executed price</p> </li> <li> <code>at</code>               (<code>object</code>)           \u2013            <p>Executed bar</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>BackTestExecution</code> (              <code>BackTestExecution</code> )          \u2013            <p>Execution object</p> </li> </ul> Source code in <code>lettrade/exchange/backtest/trade.py</code> <pre><code>def fill(self, price: float, at: object, **kwargs) -&gt; BackTestExecution:\n    \"\"\"Execution order and notify for Exchange\n\n    Args:\n        price (float): Executed price\n        at (object): Executed bar\n\n    Raises:\n        RuntimeError: _description_\n\n    Returns:\n        BackTestExecution: Execution object\n    \"\"\"\n    if self.state != OrderState.Placed:\n        raise RuntimeError(f\"Execution a {self.state} order\")\n\n    # Order\n    ok = super().fill(price=price, at=at)\n\n    # Execution is enable\n    if self.exchange.executions is not None:\n        execution = BackTestExecution.from_order(order=self, price=price, at=at)\n        execution._on_execution()\n\n    # Position hit SL/TP\n    if self.parent:\n        self.parent.exit(price=price, at=at, caller=self)\n    else:\n        # Position: Place and create new position\n        position = BackTestPosition.from_order(order=self)\n\n        position.entry(price=price, at=at)\n\n    return ok\n</code></pre>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestOrder.merge","title":"merge","text":"<pre><code>merge(other: Order)\n</code></pre> <p>Update current <code>Order</code> variables by other <code>Order</code></p> <p>Parameters:</p> <ul> <li> <code>other</code>               (<code>Order</code>)           \u2013            <p>Merge source <code>Order</code></p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>Validate same id</p> </li> </ul> Source code in <code>lettrade/exchange/order.py</code> <pre><code>def merge(self, other: \"Order\"):\n    \"\"\"Update current `Order` variables by other `Order`\n\n    Args:\n        other (Order): Merge source `Order`\n\n    Raises:\n        RuntimeError: Validate same id\n    \"\"\"\n    if other is self:\n        return\n\n    if self.id != other.id:\n        raise RuntimeError(f\"Merge difference id {self.id} != {other.id} order\")\n\n    self.size = other.size\n    self.sl_price = other.sl_price\n    self.tp_price = other.tp_price\n\n    if other.limit_price:\n        self.limit_price = other.limit_price\n    if other.stop_price:\n        self.stop_price = other.stop_price\n    if other.placed_at:\n        self.placed_at = other.placed_at\n\n    if other.filled_price:\n        self.filled_price = other.filled_price\n    if other.filled_at:\n        self.filled_at = other.filled_at\n\n    if other.parent:\n        self.parent = other.parent\n</code></pre>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestOrder.place","title":"place","text":"<pre><code>place(\n    at: Timestamp, raw: object | None = None\n) -&gt; OrderResult\n</code></pre> <p>Place <code>Order</code> Set <code>status</code> to <code>OrderState.Placed</code>. Send event to <code>Exchange</code></p> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>OrderResult</code> (              <code>OrderResult</code> )          \u2013            <p>result of <code>Order</code></p> </li> </ul> Source code in <code>lettrade/exchange/order.py</code> <pre><code>def place(\n    self,\n    at: pd.Timestamp,\n    raw: object | None = None,\n) -&gt; \"OrderResult\":\n    \"\"\"Place `Order`\n    Set `status` to `OrderState.Placed`.\n    Send event to `Exchange`\n\n    Raises:\n        RuntimeError: _description_\n\n    Returns:\n        OrderResult: result of `Order`\n    \"\"\"\n    self.validate()\n\n    if self.state != OrderState.Pending:\n        raise RuntimeError(f\"Order {self.id} state {self.state} is not Pending\")\n\n    self.state = OrderState.Placed\n    self.placed_at = at\n\n    logger.info(\"Placing new order: %s\", self)\n\n    self.exchange.on_order(self)\n    return OrderResultOk(order=self, raw=raw)\n</code></pre>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestOrder.update","title":"update","text":"<pre><code>update(\n    limit_price: float | None = None,\n    stop_price: float | None = None,\n    sl: float | None = None,\n    tp: float | None = None,\n    raw: object | None = None,\n) -&gt; OrderResult\n</code></pre> <p>Update Order</p> <p>Parameters:</p> <ul> <li> <code>limit_price</code>               (<code>float</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>stop_price</code>               (<code>float</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>sl</code>               (<code>float</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>tp</code>               (<code>float</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/order.py</code> <pre><code>def update(\n    self,\n    limit_price: float | None = None,\n    stop_price: float | None = None,\n    sl: float | None = None,\n    tp: float | None = None,\n    raw: object | None = None,\n) -&gt; \"OrderResult\":\n    \"\"\"Update Order\n\n    Args:\n        limit_price (float, optional): _description_. Defaults to None.\n        stop_price (float, optional): _description_. Defaults to None.\n        sl (float, optional): _description_. Defaults to None.\n        tp (float, optional): _description_. Defaults to None.\n\n    Raises:\n        RuntimeError: _description_\n    \"\"\"\n    if self.is_closed:\n        raise RuntimeError(f\"Update a closed order {self}\")\n\n    # TODO: validate parameters\n    if limit_price is not None:\n        self.limit_price = limit_price\n    if stop_price is not None:\n        self.stop_price = stop_price\n\n    if sl is not None:\n        self.sl_price = sl\n    if tp is not None:\n        self.tp_price = tp\n\n    self.exchange.on_order(self)\n    return OrderResultOk(order=self, raw=raw)\n</code></pre>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestPosition","title":"BackTestPosition","text":"<pre><code>BackTestPosition(\n    id: str,\n    exchange: Exchange,\n    data: DataFeed,\n    size: float,\n    parent: Order,\n    state: PositionState = PositionState.Open,\n    entry_price: float | None = None,\n    entry_fee: float = 0.0,\n    entry_at: Timestamp | None = None,\n    sl_order: Order | None = None,\n    tp_order: Order | None = None,\n    tag: str | None = None,\n    **kwargs\n)\n</code></pre> <p>               Bases: <code>Position</code></p> <p>Position for backtesting</p> Source code in <code>lettrade/exchange/position.py</code> <pre><code>def __init__(\n    self,\n    id: str,\n    exchange: \"Exchange\",\n    data: \"DataFeed\",\n    size: float,\n    parent: \"Order\",\n    state: PositionState = PositionState.Open,\n    entry_price: float | None = None,\n    entry_fee: float = 0.0,\n    entry_at: pd.Timestamp | None = None,\n    sl_order: Order | None = None,\n    tp_order: Order | None = None,\n    tag: str | None = None,\n    **kwargs,\n):\n    super().__init__(\n        id=id,\n        exchange=exchange,\n        data=data,\n        size=size,\n        **kwargs,\n    )\n    self._account: \"Account\" = self.exchange._account\n\n    self.state: PositionState = state\n    self.parent: \"Order\" = parent\n    self.tag: str | None = tag\n\n    self.entry_price: float | None = entry_price\n    self.entry_fee: float = entry_fee\n    self.entry_at: pd.Timestamp | None = entry_at\n\n    self.exit_price: float | None = None\n    self.exit_fee: float = 0.0\n    self.exit_at: pd.Timestamp | None = None\n    self.exit_pl: float | None = None\n\n    self.sl_order: Order | None = sl_order\n    self.tp_order: Order | None = tp_order\n</code></pre>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestPosition.fee","title":"fee  <code>property</code>","text":"<pre><code>fee: float\n</code></pre> <p>Fee/Estimate Fee for trade</p> <p>Returns:</p> <ul> <li> <code>float</code> (              <code>float</code> )          \u2013            <p>Fee</p> </li> </ul>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestPosition.is_exited","title":"is_exited  <code>property</code>","text":"<pre><code>is_exited: bool\n</code></pre> <p>Flag to check Position state.</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True if the trade exited</p> </li> </ul>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestPosition.is_long","title":"is_long  <code>property</code>","text":"<pre><code>is_long: bool\n</code></pre> <p>True if side is long (size is positive).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True/False</p> </li> </ul>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestPosition.is_opening","title":"is_opening  <code>property</code>","text":"<pre><code>is_opening: bool\n</code></pre> <p>Flag to check Position state.</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True if the trade opening</p> </li> </ul>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestPosition.is_short","title":"is_short  <code>property</code>","text":"<pre><code>is_short: bool\n</code></pre> <p>True if side is short (size is negative).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestPosition.pl","title":"pl  <code>property</code>","text":"<pre><code>pl: float\n</code></pre> <p>Estimate Profit or Loss of Position</p> <p>Returns:</p> <ul> <li> <code>float</code> (              <code>float</code> )          \u2013            <p>PnL</p> </li> </ul>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestPosition.side","title":"side  <code>property</code>","text":"<pre><code>side: TradeSide\n</code></pre> <p>True if side is short (size is negative).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>TradeSide</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestPosition.exit","title":"exit","text":"<pre><code>exit(\n    price: float | None = None,\n    at: Timestamp | None = None,\n    caller: Order | Position | None = None,\n    **kwargs\n) -&gt; PositionResult\n</code></pre> <p>Exit Position</p> <p>Parameters:</p> <ul> <li> <code>price</code>               (<code>float</code>, default:                   <code>None</code> )           \u2013            <p>Exit price</p> </li> <li> <code>at</code>               (<code>object</code>, default:                   <code>None</code> )           \u2013            <p>Exit bar</p> </li> <li> <code>caller</code>               (<code>Order | Position</code>, default:                   <code>None</code> )           \u2013            <p>Skip caller to prevent infinite recursion loop. Defaults to None.</p> </li> </ul> Source code in <code>lettrade/exchange/backtest/trade.py</code> <pre><code>def exit(\n    self,\n    price: float | None = None,\n    at: pd.Timestamp | None = None,\n    caller: Order | Position | None = None,\n    **kwargs,\n) -&gt; PositionResult:\n    \"\"\"Exit Position\n\n    Args:\n        price (float): Exit price\n        at (object): Exit bar\n        caller (Order | Position, optional): Skip caller to prevent infinite recursion loop. Defaults to None.\n    \"\"\"\n    if self.state == PositionState.Exit:\n        if caller is None:\n            # Call by user\n            raise RuntimeError(f\"Call exited position {self}\")\n        return\n\n    if caller is None:\n        # Call by user\n        if price is not None:\n            raise RuntimeError(f\"Price set {price} is not available\")\n        if at is not None:\n            raise RuntimeError(f\"At set {at} is not available\")\n\n        price = self.data.l.open[0]\n        at = self.data.l.index[0]\n    else:\n        # Call by SL/TP order\n        if price is None or at is None:\n            raise RuntimeError(f\"Caller {caller} with price is None or at is None\")\n\n    # PnL\n    pl = self._account.pl(\n        size=self.size,\n        entry_price=self.entry_price,\n        exit_price=price,\n    )\n\n    # Fee\n    fee = self._account.fee(size=self.size)\n\n    # State\n    ok = super().exit(price=price, at=at, pl=pl, fee=fee, **kwargs)\n\n    # Caller is position close by tp/sl order\n    if caller is None:\n        if self.sl_order is not None:\n            self.sl_order.cancel(caller=self)\n        if self.tp_order is not None:\n            self.tp_order.cancel(caller=self)\n    else:\n        if self.sl_order and self.sl_order is not caller:\n            self.sl_order.cancel(caller=caller)\n        if self.tp_order and self.tp_order is not caller:\n            self.tp_order.cancel(caller=caller)\n\n    return ok\n</code></pre>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestPosition.from_order","title":"from_order  <code>classmethod</code>","text":"<pre><code>from_order(\n    order: BackTestOrder,\n    size: float | None = None,\n    state: PositionState = PositionState.Open,\n    **kwargs\n) -&gt; BackTestPosition\n</code></pre> <p>Build Position object from Order object</p> <p>Parameters:</p> <ul> <li> <code>size</code>               (<code>float</code>, default:                   <code>None</code> )           \u2013            <p>Size of Position object. Defaults to None.</p> </li> <li> <code>state</code>               (<code>PositionState</code>, default:                   <code>Open</code> )           \u2013            <p>State of Position object. Defaults to PositionState.Open.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>BackTestPosition</code> (              <code>BackTestPosition</code> )          \u2013            <p>Position object</p> </li> </ul> Source code in <code>lettrade/exchange/backtest/trade.py</code> <pre><code>@classmethod\ndef from_order(\n    cls,\n    order: \"BackTestOrder\",\n    size: float | None = None,\n    state: PositionState = PositionState.Open,\n    **kwargs,\n) -&gt; \"BackTestPosition\":\n    \"\"\"Build Position object from Order object\n\n    Args:\n        size (float, optional): Size of Position object. Defaults to None.\n        state (PositionState, optional): State of Position object. Defaults to PositionState.Open.\n\n    Returns:\n        BackTestPosition: Position object\n    \"\"\"\n    position = cls(\n        id=order.id,\n        size=size or order.size,\n        exchange=order.exchange,\n        data=order.data,\n        state=state,\n        parent=order,\n    )\n    if order.sl_price:\n        position._new_sl_order(stop_price=order.sl_price)\n    if order.tp_price:\n        position._new_tp_order(limit_price=order.tp_price)\n    order.parent = position\n    return position\n</code></pre>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestPosition.merge","title":"merge","text":"<pre><code>merge(other: Position) -&gt; bool\n</code></pre> <p>Merge position from another position has same id</p> <p>Parameters:</p> <ul> <li> <code>other</code>               (<code>Position</code>)           \u2013            <p>description</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/position.py</code> <pre><code>def merge(self, other: \"Position\") -&gt; bool:\n    \"\"\"Merge position from another position has same id\n\n    Args:\n        other (Position): _description_\n\n    Raises:\n        RuntimeError: _description_\n    \"\"\"\n    if other is self:\n        return False\n\n    if self.id != other.id:\n        raise RuntimeError(f\"Merge difference id {self.id} != {other.id} order\")\n\n    self.size = other.size\n\n    if other.sl_order is not None:\n        self.sl_order = other.sl_order\n        self.sl_order.parent = self\n    elif self.sl_order is not None:\n        self.sl_order.cancel()\n        self.sl_order = None\n\n    if other.tp_order is not None:\n        self.tp_order = other.tp_order\n        self.tp_order.parent = self\n    elif self.tp_order is not None:\n        self.tp_order.cancel()\n        self.tp_order = None\n\n    if other.entry_at:\n        self.entry_at = other.entry_at\n    if other.entry_price:\n        self.entry_price = other.entry_price\n\n    if other.exit_at:\n        self.exit_at = other.exit_at\n    if other.exit_price:\n        self.exit_price = other.exit_price\n    if other.exit_fee:\n        self.exit_fee = other.exit_fee\n    if other.exit_pl:\n        self.exit_pl = other.exit_pl\n\n    if other.parent:\n        self.parent = other.parent\n\n    return True\n</code></pre>"},{"location":"reference/exchange/backtest/extra/","title":"Index","text":""},{"location":"reference/exchange/backtest/extra/#lettrade.exchange.backtest.extra","title":"extra","text":""},{"location":"reference/exchange/backtest/extra/ray/","title":"Index","text":""},{"location":"reference/exchange/backtest/extra/ray/#lettrade.exchange.backtest.extra.ray","title":"ray","text":""},{"location":"reference/exchange/backtest/extra/ray/ray/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> ray","text":""},{"location":"reference/exchange/backtest/extra/ray/ray/#lettrade.exchange.backtest.extra.ray.ray","title":"ray","text":""},{"location":"reference/exchange/backtest/extra/yfinance/","title":"Index","text":""},{"location":"reference/exchange/backtest/extra/yfinance/#lettrade.exchange.backtest.extra.yfinance","title":"yfinance","text":""},{"location":"reference/exchange/backtest/extra/yfinance/yfinance/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> yfinance","text":""},{"location":"reference/exchange/backtest/extra/yfinance/yfinance/#lettrade.exchange.backtest.extra.yfinance.yfinance","title":"yfinance","text":""},{"location":"reference/exchange/backtest/plotly/","title":"Index","text":""},{"location":"reference/exchange/backtest/plotly/#lettrade.exchange.backtest.plotly","title":"plotly","text":""},{"location":"reference/exchange/backtest/plotly/optimize/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> optimize","text":""},{"location":"reference/exchange/backtest/plotly/optimize/#lettrade.exchange.backtest.plotly.optimize","title":"optimize","text":""},{"location":"reference/exchange/backtest/plotly/optimize/#lettrade.exchange.backtest.plotly.optimize.PlotlyOptimizePlotter","title":"PlotlyOptimizePlotter","text":"<pre><code>PlotlyOptimizePlotter(total=None, process_bar: bool = True)\n</code></pre> <p>               Bases: <code>OptimizePlotter</code></p> Source code in <code>lettrade/exchange/backtest/plotly/optimize.py</code> <pre><code>def __init__(self, total=None, process_bar: bool = True) -&gt; None:\n    super().__init__()\n\n    self._total = total\n\n    if process_bar:\n        from rich.progress import (\n            BarColumn,\n            Console,\n            Progress,\n            SpinnerColumn,\n            TaskProgressColumn,\n            TextColumn,\n            TimeElapsedColumn,\n            TimeRemainingColumn,\n        )\n\n        console = Console(record=True, force_jupyter=False)\n        self._process_bar = Progress(\n            SpinnerColumn(),\n            # *Progress.get_default_columns(),\n            TextColumn(\"[progress.description]{task.description}\"),\n            BarColumn(),\n            TaskProgressColumn(),\n            TextColumn(\"[bold blue][{task.completed}/{task.total}]\"),\n            TimeRemainingColumn(),\n            TimeElapsedColumn(),\n            console=console,\n            # transient=False,\n        )\n        self._process_bar.add_task(\"[cyan2]Optimizing\", total=total)\n        self._process_bar.start()\n    else:\n        self._process_bar = None\n</code></pre>"},{"location":"reference/exchange/backtest/plotly/optimize/#lettrade.exchange.backtest.plotly.optimize.PlotlyOptimizePlotter.contour","title":"contour","text":"<pre><code>contour(\n    x: str = None,\n    y: str = None,\n    z: str = \"equity\",\n    histfunc=\"max\",\n    **kwargs\n)\n</code></pre> <p>Plot optimize contour</p> <p>Parameters:</p> <ul> <li> <code>x</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>y</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>z</code>               (<code>str</code>, default:                   <code>'equity'</code> )           \u2013            <p>description. Defaults to \"equity\".</p> </li> <li> <code>histfunc</code>               (<code>str</code>, default:                   <code>'max'</code> )           \u2013            <p>description. Defaults to \"max\".</p> </li> </ul> Source code in <code>lettrade/exchange/backtest/plotly/optimize.py</code> <pre><code>def contour(\n    self,\n    x: str = None,\n    y: str = None,\n    z: str = \"equity\",\n    histfunc=\"max\",\n    **kwargs,\n):\n    \"\"\"Plot optimize contour\n\n    Args:\n        x (str, optional): _description_. Defaults to None.\n        y (str, optional): _description_. Defaults to None.\n        z (str, optional): _description_. Defaults to \"equity\".\n        histfunc (str, optional): _description_. Defaults to \"max\".\n    \"\"\"\n    x, y, z = self._xyz_default(x, y, z)\n    df = pd.DataFrame(self._xyzs(x=x, y=y, z=z))\n    fig = px.density_contour(\n        df,\n        x=x,\n        y=y,\n        z=z,\n        nbinsx=int(df[x].max() - df[x].min() + 1),\n        nbinsy=int(df[y].max() - df[y].min() + 1),\n        histfunc=histfunc,\n        **kwargs,\n    )\n    fig.update_traces(contours_coloring=\"fill\", contours_showlabels=True)\n    fig.show()\n</code></pre>"},{"location":"reference/exchange/backtest/plotly/optimize/#lettrade.exchange.backtest.plotly.optimize.PlotlyOptimizePlotter.heatmap","title":"heatmap","text":"<pre><code>heatmap(\n    x: str = None,\n    y: str = None,\n    z: str = \"equity\",\n    histfunc=\"max\",\n    **kwargs\n)\n</code></pre> <p>Plot optimize heatmap</p> <p>Parameters:</p> <ul> <li> <code>x</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>y</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>z</code>               (<code>str</code>, default:                   <code>'equity'</code> )           \u2013            <p>description. Defaults to \"equity\".</p> </li> <li> <code>histfunc</code>               (<code>str</code>, default:                   <code>'max'</code> )           \u2013            <p>description. Defaults to \"max\".</p> </li> </ul> Source code in <code>lettrade/exchange/backtest/plotly/optimize.py</code> <pre><code>def heatmap(\n    self,\n    x: str = None,\n    y: str = None,\n    z: str = \"equity\",\n    histfunc=\"max\",\n    **kwargs,\n):\n    \"\"\"Plot optimize heatmap\n\n    Args:\n        x (str, optional): _description_. Defaults to None.\n        y (str, optional): _description_. Defaults to None.\n        z (str, optional): _description_. Defaults to \"equity\".\n        histfunc (str, optional): _description_. Defaults to \"max\".\n    \"\"\"\n    x, y, z = self._xyz_default(x, y, z)\n    df = pd.DataFrame(self._xyzs(x=x, y=y, z=z))\n    fig = px.density_heatmap(\n        df,\n        x=x,\n        y=y,\n        z=z,\n        nbinsx=int(df[x].max() - df[x].min() + 1),\n        nbinsy=int(df[y].max() - df[y].min() + 1),\n        histfunc=histfunc,\n        color_continuous_scale=\"Viridis\",\n        **kwargs,\n    )\n    fig.show()\n</code></pre>"},{"location":"reference/exchange/backtest/plotly/optimize/#lettrade.exchange.backtest.plotly.optimize.PlotlyOptimizePlotter.plot","title":"plot","text":"<pre><code>plot(**kwargs)\n</code></pre> <p>Plot optimize result</p> Source code in <code>lettrade/exchange/backtest/plotly/optimize.py</code> <pre><code>def plot(self, **kwargs):\n    \"\"\"Plot optimize result\"\"\"\n    ids = []\n    equities = []\n    for result in self.results:\n        ids.append(result[\"index\"])\n        equities.append(result[\"result\"][\"equity\"])\n\n    df = pd.DataFrame({\"id\": ids, \"equity\": equities})\n\n    fig = px.scatter(df, x=\"id\", y=\"equity\")\n    fig.show()\n</code></pre>"},{"location":"reference/exchange/ccxt/","title":"Index","text":""},{"location":"reference/exchange/ccxt/#lettrade.exchange.ccxt","title":"ccxt","text":""},{"location":"reference/exchange/ccxt/api/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> api","text":""},{"location":"reference/exchange/ccxt/api/#lettrade.exchange.ccxt.api","title":"api","text":""},{"location":"reference/exchange/ccxt/api/#lettrade.exchange.ccxt.api.CCXTAPI","title":"CCXTAPI","text":"<pre><code>CCXTAPI(\n    exchange: int,\n    key: str,\n    secret: str,\n    currency: str = \"USDT\",\n    ccxt: CCXTAPIExchange | None = None,\n    **kwargs\n)\n</code></pre> <p>               Bases: <code>LiveAPI</code></p> <p>CCXT API</p> <p>Parameters:</p> <ul> <li> <code>exchange</code>               (<code>int</code>)           \u2013            <p>description</p> </li> <li> <code>key</code>               (<code>str</code>)           \u2013            <p>description</p> </li> <li> <code>secret</code>               (<code>str</code>)           \u2013            <p>description</p> </li> <li> <code>ccxt</code>               (<code>CCXTAPIExchange | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> Source code in <code>lettrade/exchange/ccxt/api.py</code> <pre><code>def __init__(\n    self,\n    exchange: int,\n    key: str,\n    secret: str,\n    currency: str = \"USDT\",\n    ccxt: CCXTAPIExchange | None = None,\n    **kwargs,\n):\n    \"\"\"_summary_\n\n    Args:\n        exchange (int): _description_\n        key (str): _description_\n        secret (str): _description_\n        ccxt (CCXTAPIExchange | None, optional): _description_. Defaults to None.\n    \"\"\"\n    if ccxt is None:\n        ccxt = CCXTAPIExchange(exchange=exchange, key=key, secret=secret, **kwargs)\n    self._ccxt = ccxt\n    self._currency = ccxt\n</code></pre>"},{"location":"reference/exchange/ccxt/api/#lettrade.exchange.ccxt.api.CCXTAPI.account","title":"account","text":"<pre><code>account() -&gt; dict\n</code></pre> Source code in <code>lettrade/exchange/ccxt/api.py</code> <pre><code>def account(self) -&gt; dict:\n    \"\"\"\"\"\"\n    raw = self._ccxt.fetch_my_balance()\n    currency = raw[self._currency]\n    return Box(\n        balance=currency[\"free\"],\n        equity=currency[\"total\"],\n        margin=1,\n        leverage=1,\n        raw=raw,\n    )\n</code></pre>"},{"location":"reference/exchange/ccxt/api/#lettrade.exchange.ccxt.api.CCXTAPI.execution_get","title":"execution_get","text":"<pre><code>execution_get(id: str, **kwargs) -&gt; dict\n</code></pre> Source code in <code>lettrade/exchange/ccxt/api.py</code> <pre><code>def execution_get(self, id: str, **kwargs) -&gt; dict:\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/ccxt/api/#lettrade.exchange.ccxt.api.CCXTAPI.executions_get","title":"executions_get","text":"<pre><code>executions_get(\n    position_id: str | None = None,\n    search: str | None = None,\n    **kwargs\n) -&gt; list[dict]\n</code></pre> Source code in <code>lettrade/exchange/ccxt/api.py</code> <pre><code>def executions_get(\n    self,\n    position_id: str | None = None,\n    search: str | None = None,\n    **kwargs,\n) -&gt; list[dict]:\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/ccxt/api/#lettrade.exchange.ccxt.api.CCXTAPI.executions_total","title":"executions_total","text":"<pre><code>executions_total(\n    since: datetime | None = None,\n    to: datetime | None = None,\n    **kwargs\n) -&gt; int\n</code></pre> Source code in <code>lettrade/exchange/ccxt/api.py</code> <pre><code>def executions_total(\n    self,\n    since: datetime | None = None,\n    to: datetime | None = None,\n    **kwargs,\n) -&gt; int:\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/ccxt/api/#lettrade.exchange.ccxt.api.CCXTAPI.init","title":"init","text":"<pre><code>init(**kwargs)\n</code></pre> Source code in <code>lettrade/exchange/live/api.py</code> <pre><code>def init(self, **kwargs):\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/ccxt/api/#lettrade.exchange.ccxt.api.CCXTAPI.order_close","title":"order_close","text":"<pre><code>order_close(order: CCXTOrder)\n</code></pre> Source code in <code>lettrade/exchange/ccxt/api.py</code> <pre><code>def order_close(self, order: \"CCXTOrder\"):\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/ccxt/api/#lettrade.exchange.ccxt.api.CCXTAPI.order_open","title":"order_open","text":"<pre><code>order_open(order: CCXTOrder, **kwargs)\n</code></pre> Source code in <code>lettrade/exchange/ccxt/api.py</code> <pre><code>def order_open(self, order: \"CCXTOrder\", **kwargs):\n    \"\"\"\"\"\"\n    try:\n        result = self._ccxt.create_my_order(\n            symbol=order.data.symbol,\n            type=order.type.lower(),\n            side=order.side.lower(),\n            amount=abs(order.size),\n            price=order.place_price,\n            **kwargs,\n        )\n\n        print(\"order_open\", order, result)\n        return result\n    except ccxt.InvalidOrder as e:\n        raise LetLiveOrderInvalidException(e.args[0]) from e\n</code></pre>"},{"location":"reference/exchange/ccxt/api/#lettrade.exchange.ccxt.api.CCXTAPI.orders_get","title":"orders_get","text":"<pre><code>orders_get(**kwargs)\n</code></pre> Source code in <code>lettrade/exchange/ccxt/api.py</code> <pre><code>def orders_get(self, **kwargs):\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/ccxt/api/#lettrade.exchange.ccxt.api.CCXTAPI.orders_history_get","title":"orders_history_get","text":"<pre><code>orders_history_get(\n    id: str | None = None,\n    since: datetime | None = None,\n    to: datetime | None = None,\n    **kwargs\n) -&gt; list[dict]\n</code></pre> Source code in <code>lettrade/exchange/live/api.py</code> <pre><code>def orders_history_get(\n    self,\n    id: str | None = None,\n    since: datetime | None = None,\n    to: datetime | None = None,\n    **kwargs,\n) -&gt; list[dict]:\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/ccxt/api/#lettrade.exchange.ccxt.api.CCXTAPI.orders_total","title":"orders_total","text":"<pre><code>orders_total()\n</code></pre> Source code in <code>lettrade/exchange/ccxt/api.py</code> <pre><code>def orders_total(self):\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/ccxt/api/#lettrade.exchange.ccxt.api.CCXTAPI.position_close","title":"position_close","text":"<pre><code>position_close(position: CCXTPosition, **kwargs) -&gt; dict\n</code></pre> Source code in <code>lettrade/exchange/ccxt/api.py</code> <pre><code>def position_close(self, position: \"CCXTPosition\", **kwargs) -&gt; dict:\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/ccxt/api/#lettrade.exchange.ccxt.api.CCXTAPI.position_update","title":"position_update","text":"<pre><code>position_update(\n    position: CCXTPosition,\n    sl: float | None = None,\n    tp: float | None = None,\n    **kwargs\n) -&gt; dict\n</code></pre> Source code in <code>lettrade/exchange/ccxt/api.py</code> <pre><code>def position_update(\n    self,\n    position: \"CCXTPosition\",\n    sl: float | None = None,\n    tp: float | None = None,\n    **kwargs,\n) -&gt; dict:\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/ccxt/api/#lettrade.exchange.ccxt.api.CCXTAPI.positions_get","title":"positions_get","text":"<pre><code>positions_get(\n    id: str = None, symbol: str = None, **kwargs\n) -&gt; list[dict]\n</code></pre> Source code in <code>lettrade/exchange/ccxt/api.py</code> <pre><code>def positions_get(self, id: str = None, symbol: str = None, **kwargs) -&gt; list[dict]:\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/ccxt/api/#lettrade.exchange.ccxt.api.CCXTAPI.positions_total","title":"positions_total","text":"<pre><code>positions_total(\n    since: datetime | None = None,\n    to: datetime | None = None,\n    **kwargs\n) -&gt; int\n</code></pre> Source code in <code>lettrade/exchange/ccxt/api.py</code> <pre><code>def positions_total(\n    self,\n    since: datetime | None = None,\n    to: datetime | None = None,\n    **kwargs,\n) -&gt; int:\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/ccxt/api/#lettrade.exchange.ccxt.api.CCXTAPI.stop","title":"stop","text":"<pre><code>stop()\n</code></pre> Source code in <code>lettrade/exchange/ccxt/api.py</code> <pre><code>def stop(self):\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/ccxt/api/#lettrade.exchange.ccxt.api.CCXTAPIExchange","title":"CCXTAPIExchange","text":"<pre><code>CCXTAPIExchange(\n    exchange: str,\n    key: str,\n    secret: str,\n    options: dict | None = None,\n    type: Literal[\"spot\", \"margin\", \"future\"] = \"spot\",\n    sandbox: bool = True,\n    verbose: bool = False,\n    **kwargs\n)\n</code></pre> <p>Single instance across multiprocessing. Help pickle-able result and send across multiprocessing</p> Source code in <code>lettrade/exchange/ccxt/api.py</code> <pre><code>def __init__(\n    self,\n    exchange: str,\n    key: str,\n    secret: str,\n    options: dict | None = None,\n    type: Literal[\"spot\", \"margin\", \"future\"] = \"spot\",\n    sandbox: bool = True,\n    verbose: bool = False,\n    **kwargs,\n) -&gt; None:\n    config = dict(\n        apiKey=key,\n        secret=secret,\n        enableRateLimit=True,\n        defaultType=type,\n        options={\n            \"sandboxMode\": sandbox,\n            \"warnOnFetchOpenOrdersWithoutSymbol\": False,\n            \"tradesLimit\": 1,\n            \"ordersLimit\": 1,\n            \"OHLCVLimit\": 1,\n        },\n    )\n    config.update(kwargs)\n\n    if options is not None:\n        config[\"options\"].update(options)\n\n    self._exchange = getattr(ccxt, exchange)(config)\n\n    # Must call sanbox function instead of option sandboxMode\n    self._exchange.set_sandbox_mode(sandbox)\n    self._exchange.verbose = verbose\n    logger.info(\"Starting exchange class: %s\", self._exchange)\n</code></pre>"},{"location":"reference/exchange/ccxt/api/#lettrade.exchange.ccxt.api.CCXTAPIExchange.stop","title":"stop","text":"<pre><code>stop()\n</code></pre> Source code in <code>lettrade/exchange/ccxt/api.py</code> <pre><code>def stop(self):\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/ccxt/ccxt/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> ccxt","text":""},{"location":"reference/exchange/ccxt/ccxt/#lettrade.exchange.ccxt.ccxt","title":"ccxt","text":""},{"location":"reference/exchange/ccxt/ccxt/#lettrade.exchange.ccxt.ccxt.CCXTAccount","title":"CCXTAccount","text":"<pre><code>CCXTAccount(api: LiveAPI, currency: str = 'USDT', **kwargs)\n</code></pre> <p>               Bases: <code>LiveAccount</code></p> <p>Account for CCXT</p> Source code in <code>lettrade/exchange/ccxt/ccxt.py</code> <pre><code>def __init__(self, api: LiveAPI, currency: str = \"USDT\", **kwargs) -&gt; None:\n    super().__init__(api, **kwargs)\n    self._currency = currency\n</code></pre>"},{"location":"reference/exchange/ccxt/ccxt/#lettrade.exchange.ccxt.ccxt.CCXTAccount.balance","title":"balance  <code>property</code>","text":"<pre><code>balance: float\n</code></pre> <p>Balance of account</p> <p>Returns:</p> <ul> <li> <code>float</code> (              <code>float</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/ccxt/ccxt/#lettrade.exchange.ccxt.ccxt.CCXTAccount.account_refresh","title":"account_refresh","text":"<pre><code>account_refresh()\n</code></pre> <p>Refresh account balance</p> Source code in <code>lettrade/exchange/live/account.py</code> <pre><code>def account_refresh(self):\n    \"\"\"Refresh account balance\"\"\"\n    self._account = self._api.account()\n\n    if __debug__:\n        logger.debug(\"Account: %s\", str(self._account))\n\n    self._balance = self._account.balance\n    self._equity = self._account.equity\n</code></pre>"},{"location":"reference/exchange/ccxt/ccxt/#lettrade.exchange.ccxt.ccxt.CCXTAccount.next","title":"next","text":"<pre><code>next()\n</code></pre> <p>Next account</p> Source code in <code>lettrade/account/account.py</code> <pre><code>def next(self):\n    \"\"\"Next account\"\"\"\n</code></pre>"},{"location":"reference/exchange/ccxt/ccxt/#lettrade.exchange.ccxt.ccxt.CCXTAccount.next_next","title":"next_next","text":"<pre><code>next_next()\n</code></pre> <p>Call after strategy.next()</p> Source code in <code>lettrade/account/account.py</code> <pre><code>def next_next(self):\n    \"\"\"Call after strategy.next()\"\"\"\n    self._equity_snapshot()\n</code></pre>"},{"location":"reference/exchange/ccxt/ccxt/#lettrade.exchange.ccxt.ccxt.CCXTAccount.risk","title":"risk","text":"<pre><code>risk(side: TradeSide, size: float, **kwargs) -&gt; float\n</code></pre> <p>Risk calculation</p> Source code in <code>lettrade/account/account.py</code> <pre><code>def risk(self, side: \"TradeSide\", size: float, **kwargs) -&gt; float:\n    \"\"\"Risk calculation\"\"\"\n    if size is None:\n        return side * abs(self._risk)\n    return side * abs(size)\n</code></pre>"},{"location":"reference/exchange/ccxt/ccxt/#lettrade.exchange.ccxt.ccxt.CCXTAccount.start","title":"start","text":"<pre><code>start()\n</code></pre> <p>Start live account by load account info from API</p> Source code in <code>lettrade/exchange/live/account.py</code> <pre><code>def start(self):\n    \"\"\"Start live account by load account info from API\"\"\"\n    self.account_refresh()\n    self._margin = self._account.margin\n    self._leverage = self._account.leverage\n</code></pre>"},{"location":"reference/exchange/ccxt/ccxt/#lettrade.exchange.ccxt.ccxt.CCXTAccount.stop","title":"stop","text":"<pre><code>stop()\n</code></pre> <p>Stop account</p> Source code in <code>lettrade/account/account.py</code> <pre><code>def stop(self):\n    \"\"\"Stop account\"\"\"\n    try:\n        self._equity_snapshot()\n    except LetAccountInsufficientException:\n        pass\n</code></pre>"},{"location":"reference/exchange/ccxt/ccxt/#lettrade.exchange.ccxt.ccxt.CCXTDataFeed","title":"CCXTDataFeed","text":"<pre><code>CCXTDataFeed(\n    symbol: str,\n    timeframe: str | int | Timedelta,\n    name: str | None = None,\n    api: LiveAPI | None = None,\n    columns: list[str] | None = None,\n    **kwargs\n)\n</code></pre> <p>               Bases: <code>LiveDataFeed</code></p> <p>DataFeed for CCXT</p> <p>Parameters:</p> <ul> <li> <code>symbol</code>               (<code>str</code>)           \u2013            <p>Symbol of DataFeed</p> </li> <li> <code>timeframe</code>               (<code>str | int | Timedelta</code>)           \u2013            <p>TimeFrame of DataFeed</p> </li> <li> <code>name</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>Name of DataFeed, auto generate <code>{symbol}_{timeframe}</code> if none. Defaults to None.</p> </li> <li> <code>api</code>               (<code>LiveAPI | None</code>, default:                   <code>None</code> )           \u2013            <p>Live trading API. Defaults to None.</p> </li> <li> <code>columns</code>               (<code>list[str] | None</code>, default:                   <code>None</code> )           \u2013            <p>List of DataFeed columns. Defaults to None.</p> </li> </ul> Source code in <code>lettrade/exchange/live/data.py</code> <pre><code>def __init__(\n    self,\n    symbol: str,\n    timeframe: str | int | pd.Timedelta,\n    name: str | None = None,\n    api: LiveAPI | None = None,\n    columns: list[str] | None = None,\n    **kwargs,\n) -&gt; None:\n    \"\"\"_summary_\n\n    Args:\n        symbol (str): Symbol of DataFeed\n        timeframe (str | int | pd.Timedelta): TimeFrame of DataFeed\n        name (str | None, optional): Name of DataFeed, auto generate `{symbol}_{timeframe}` if none. Defaults to None.\n        api (LiveAPI | None, optional): Live trading API. Defaults to None.\n        columns (list[str] | None, optional): List of DataFeed columns. Defaults to None.\n    \"\"\"\n    super().__init__(\n        name=name or f\"{symbol}_{timeframe}\",\n        timeframe=timeframe,\n        columns=columns or [\"open\", \"high\", \"low\", \"close\", \"volume\"],\n        **kwargs,\n    )\n\n    self.meta.update(symbol=symbol, base_columns=self.columns.copy())\n\n    if api is not None:\n        self._api = api\n</code></pre>"},{"location":"reference/exchange/ccxt/ccxt/#lettrade.exchange.ccxt.ccxt.CCXTDataFeed.i","title":"i  <code>property</code>","text":"<pre><code>i: indicator\n</code></pre> <p>Alias to <code>lettrade.indicator</code> and using in DataFeed by call: <code>DataFeed.i.indicator_name()</code></p>"},{"location":"reference/exchange/ccxt/ccxt/#lettrade.exchange.ccxt.ccxt.CCXTDataFeed.is_main","title":"is_main  <code>property</code>","text":"<pre><code>is_main: bool\n</code></pre> <p>Property to check DataFeed is main DataFeed or not</p>"},{"location":"reference/exchange/ccxt/ccxt/#lettrade.exchange.ccxt.ccxt.CCXTDataFeed.l","title":"l  <code>instance-attribute</code>","text":"<pre><code>l: LetDataFeedWrapper\n</code></pre> <p>LetTrade DataFeed wrapper using to manage index pointer of DataFeed</p>"},{"location":"reference/exchange/ccxt/ccxt/#lettrade.exchange.ccxt.ccxt.CCXTDataFeed.meta","title":"meta  <code>property</code>","text":"<pre><code>meta: dict\n</code></pre> <p>Property to get metadata of DataFeed</p>"},{"location":"reference/exchange/ccxt/ccxt/#lettrade.exchange.ccxt.ccxt.CCXTDataFeed.name","title":"name  <code>property</code>","text":"<pre><code>name: str\n</code></pre> <p>Property to get name of DataFeed</p>"},{"location":"reference/exchange/ccxt/ccxt/#lettrade.exchange.ccxt.ccxt.CCXTDataFeed.now","title":"now  <code>property</code>","text":"<pre><code>now: Timestamp\n</code></pre> <p>Property to get current index value of DataFeed</p>"},{"location":"reference/exchange/ccxt/ccxt/#lettrade.exchange.ccxt.ccxt.CCXTDataFeed.symbol","title":"symbol  <code>property</code>","text":"<pre><code>symbol: str\n</code></pre> <p>Property to get symbol of DataFeed</p>"},{"location":"reference/exchange/ccxt/ccxt/#lettrade.exchange.ccxt.ccxt.CCXTDataFeed.timeframe","title":"timeframe  <code>property</code>","text":"<pre><code>timeframe: TimeFrame\n</code></pre> <p>Property to get timeframe of DataFeed</p>"},{"location":"reference/exchange/ccxt/ccxt/#lettrade.exchange.ccxt.ccxt.CCXTDataFeed.bar","title":"bar","text":"<pre><code>bar(i: int = 0) -&gt; Timestamp\n</code></pre> <p>Get current pd.Timestamp value of DataFeed</p> <p>Parameters:</p> <ul> <li> <code>i</code>               (<code>int</code>, default:                   <code>0</code> )           \u2013            <p>Index. Defaults to 0.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Timestamp</code>           \u2013            <p>pd.Timestamp: description</p> </li> </ul> Source code in <code>lettrade/data/data.py</code> <pre><code>def bar(self, i: int = 0) -&gt; pd.Timestamp:\n    \"\"\"Get current pd.Timestamp value of DataFeed\n\n    Args:\n        i (int, optional): Index. Defaults to 0.\n\n    Returns:\n        pd.Timestamp: _description_\n    \"\"\"\n    return self.l.index[i]\n</code></pre>"},{"location":"reference/exchange/ccxt/ccxt/#lettrade.exchange.ccxt.ccxt.CCXTDataFeed.bars","title":"bars","text":"<pre><code>bars(\n    since: int | str | Timestamp, to: int | str | Timestamp\n) -&gt; list\n</code></pre> <p>Get bars from LiveAPI</p> <p>Parameters:</p> <ul> <li> <code>since</code>               (<code>int | str | Timestamp</code>)           \u2013            <p>description</p> </li> <li> <code>to</code>               (<code>int | str | Timestamp</code>)           \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list</code> (              <code>list</code> )          \u2013            <p>list of bar</p> </li> </ul> Source code in <code>lettrade/exchange/live/data.py</code> <pre><code>def bars(\n    self,\n    since: int | str | pd.Timestamp,\n    to: int | str | pd.Timestamp,\n) -&gt; list:\n    \"\"\"Get bars from LiveAPI\n\n    Args:\n        since (int | str | pd.Timestamp): _description_\n        to (int | str | pd.Timestamp): _description_\n\n    Returns:\n        list: list of bar\n    \"\"\"\n    return self._api.bars(\n        symbol=self.symbol,\n        timeframe=self.timeframe.string,\n        since=since,\n        to=to,\n    )\n</code></pre>"},{"location":"reference/exchange/ccxt/ccxt/#lettrade.exchange.ccxt.ccxt.CCXTDataFeed.bars_load","title":"bars_load","text":"<pre><code>bars_load(\n    since: int | str | Timestamp, to: int | str | Timestamp\n) -&gt; bool\n</code></pre> <p>Get bar from API and push to DataFeed</p> <p>Parameters:</p> <ul> <li> <code>since</code>               (<code>int | str | Timestamp</code>)           \u2013            <p>description</p> </li> <li> <code>to</code>               (<code>int | str | Timestamp</code>)           \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True if has data, False if no data</p> </li> </ul> Source code in <code>lettrade/exchange/live/data.py</code> <pre><code>def bars_load(\n    self,\n    since: int | str | pd.Timestamp,\n    to: int | str | pd.Timestamp,\n) -&gt; bool:\n    \"\"\"Get bar from API and push to DataFeed\n\n    Args:\n        since (int | str | pd.Timestamp): _description_\n        to (int | str | pd.Timestamp): _description_\n\n    Returns:\n        bool: True if has data, False if no data\n    \"\"\"\n    bars = self.bars(since=since, to=to)\n\n    if bars is None or len(bars) == 0:\n        logger.warning(\"No bars data for %s\", self.name)\n        return False\n\n    self.push(bars, unit=self._bar_datetime_unit)\n    return True\n</code></pre>"},{"location":"reference/exchange/ccxt/ccxt/#lettrade.exchange.ccxt.ccxt.CCXTDataFeed.drop","title":"drop","text":"<pre><code>drop(\n    *args,\n    since: int | str | Timestamp | None = None,\n    to: int | str | Timestamp | None = None,\n    **kwargs\n) -&gt; None\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>since</code>               (<code>int | str | Timestamp | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>to</code>               (<code>int | str | Timestamp | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>description</p> </li> <li> <code>RuntimeError</code>             \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/data/data.py</code> <pre><code>def drop(\n    self,\n    *args,\n    since: int | str | pd.Timestamp | None = None,\n    to: int | str | pd.Timestamp | None = None,\n    **kwargs,\n) -&gt; None:\n    \"\"\"_summary_\n\n    Args:\n        since (int | str | pd.Timestamp | None, optional): _description_. Defaults to None.\n        to (int | str | pd.Timestamp | None, optional): _description_. Defaults to None.\n\n    Raises:\n        RuntimeError: _description_\n        RuntimeError: _description_\n    \"\"\"\n    if since is None and to is None:\n        super().drop(*args, **kwargs)\n        return\n\n    condiction = None\n\n    # Since\n    if since is not None:\n        if isinstance(since, int):\n            loc = self.l.index[since]\n        elif isinstance(since, str):\n            loc = pd.to_datetime(since, utc=True)\n        elif isinstance(since, pd.Timestamp):\n            loc = since\n        else:\n            raise RuntimeError(f\"DataFeed.drop since {since} is invalid\")\n        condiction = self.index &lt; loc\n\n    # To\n    if to is not None:\n        if isinstance(to, int):\n            loc = self.l.index[to]\n        elif isinstance(to, str):\n            loc = pd.to_datetime(to, utc=True)\n        elif isinstance(to, pd.Timestamp):\n            loc = to\n        else:\n            raise RuntimeError(f\"DataFeed.drop to {to} is invalid\")\n\n        if condiction is None:\n            condiction = self.index &gt; loc\n        else:\n            condiction = condiction | (self.index &gt; loc)\n\n    index = self[condiction].index\n    super().drop(index=index, inplace=True)\n    self.l.reset()\n\n    if __debug__:\n        logger.debug(\"BackTestDataFeed %s dropped %s rows\", self.name, len(index))\n</code></pre>"},{"location":"reference/exchange/ccxt/ccxt/#lettrade.exchange.ccxt.ccxt.CCXTDataFeed.dump_csv","title":"dump_csv","text":"<pre><code>dump_csv(\n    path: str | None = None,\n    since: int | str | datetime | None = 0,\n    to: int | str | datetime | None = 1000,\n    **kwargs\n)\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>path</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>since</code>               (<code>int | str | datetime | None</code>, default:                   <code>0</code> )           \u2013            <p>description. Defaults to 0.</p> </li> <li> <code>to</code>               (<code>int | str | datetime | None</code>, default:                   <code>1000</code> )           \u2013            <p>description. Defaults to 1_000.</p> </li> </ul> Source code in <code>lettrade/exchange/live/data.py</code> <pre><code>def dump_csv(\n    self,\n    path: str | None = None,\n    since: int | str | datetime | None = 0,\n    to: int | str | datetime | None = 1_000,\n    **kwargs,\n):\n    \"\"\"_summary_\n\n    Args:\n        path (str | None, optional): _description_. Defaults to None.\n        since (int  |  str  |  datetime | None, optional): _description_. Defaults to 0.\n        to (int  |  str  |  datetime | None, optional): _description_. Defaults to 1_000.\n    \"\"\"\n    if self.empty:\n        if isinstance(since, str):\n            since = pd.to_datetime(since).to_pydatetime()\n        if isinstance(to, str):\n            to = pd.to_datetime(to).to_pydatetime()\n\n        self.bars_load(since=since, to=to)\n\n    if path is None:\n        path = f\"data/{self.name}-{since}_{to}.csv\"\n\n    from lettrade.data.extra.csv import csv_export\n\n    csv_export(dataframe=self, path=path, **kwargs)\n</code></pre>"},{"location":"reference/exchange/ccxt/ccxt/#lettrade.exchange.ccxt.ccxt.CCXTDataFeed.instance","title":"instance  <code>classmethod</code>","text":"<pre><code>instance(\n    api: LiveAPI | None = None,\n    api_kwargs: dict | None = None,\n    **kwargs\n) -&gt; LiveDataFeed\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>api</code>               (<code>LiveAPI</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>api_kwargs</code>               (<code>dict</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>Missing api requirement</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>LiveDataFeed</code> (              <code>LiveDataFeed</code> )          \u2013            <p>DataFeed object</p> </li> </ul> Source code in <code>lettrade/exchange/live/data.py</code> <pre><code>@classmethod\ndef instance(\n    cls,\n    api: LiveAPI | None = None,\n    api_kwargs: dict | None = None,\n    **kwargs,\n) -&gt; \"LiveDataFeed\":\n    \"\"\"_summary_\n\n    Args:\n        api (LiveAPI, optional): _description_. Defaults to None.\n        api_kwargs (dict, optional): _description_. Defaults to None.\n\n    Raises:\n        RuntimeError: Missing api requirement\n\n    Returns:\n        LiveDataFeed: DataFeed object\n    \"\"\"\n    if api is None:\n        if api_kwargs is None:\n            raise RuntimeError(\"api or api_kwargs cannot missing\")\n        api = cls._api_cls(**api_kwargs)\n    obj = cls(api=api, **kwargs)\n    return obj\n</code></pre>"},{"location":"reference/exchange/ccxt/ccxt/#lettrade.exchange.ccxt.ccxt.CCXTDataFeed.next","title":"next","text":"<pre><code>next(size=1, tick=0) -&gt; bool\n</code></pre> <p>Drop extra columns and load next DataFeed</p> <p>Parameters:</p> <ul> <li> <code>size</code>               (<code>int</code>, default:                   <code>1</code> )           \u2013            <p>description. Defaults to 1.</p> </li> <li> <code>tick</code>               (<code>int</code>, default:                   <code>0</code> )           \u2013            <p>description. Defaults to 0.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/live/data.py</code> <pre><code>def next(self, size=1, tick=0) -&gt; bool:\n    \"\"\"Drop extra columns and load next DataFeed\n\n    Args:\n        size (int, optional): _description_. Defaults to 1.\n        tick (int, optional): _description_. Defaults to 0.\n\n    Returns:\n        bool: _description_\n    \"\"\"\n    # Drop existed extra columns to skip reusing calculated data\n    self.drop(columns=self.columns.difference(self._base_columns), inplace=True)\n\n    self.bars_load(since=0, to=size + 1)\n    self.l.go_stop()\n    return True\n</code></pre>"},{"location":"reference/exchange/ccxt/ccxt/#lettrade.exchange.ccxt.ccxt.CCXTDataFeed.push","title":"push","text":"<pre><code>push(\n    rows: list[list[int | float]],\n    unit: str | None = None,\n    utc: bool = True,\n    **kwargs\n)\n</code></pre> <p>Push new rows to DataFeed</p> <p>Parameters:</p> <ul> <li> <code>rows</code>               (<code>list[list[int | float]]</code>)           \u2013            <p>list of rows <code>[[\"timestamp\", \"open price\", \"high price\"...]]</code></p> </li> <li> <code>unit</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>pandas.Timestamp parsing unit. Defaults to None.</p> </li> <li> <code>utc</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>description. Defaults to True.</p> </li> </ul> Source code in <code>lettrade/data/data.py</code> <pre><code>def push(\n    self,\n    rows: list[list[int | float]],\n    unit: str | None = None,\n    utc: bool = True,\n    **kwargs,\n):\n    \"\"\"Push new rows to DataFeed\n\n    Args:\n        rows (list[list[int | float]]): list of rows `[[\"timestamp\", \"open price\", \"high price\"...]]`\n        unit (str | None, optional): pandas.Timestamp parsing unit. Defaults to None.\n        utc (bool, optional): _description_. Defaults to True.\n    \"\"\"\n    for row in rows:\n        dt = pd.to_datetime(row[0], unit=unit, utc=utc, **kwargs)\n        self.at[\n            dt,\n            (\n                \"open\",\n                \"high\",\n                \"low\",\n                \"close\",\n                \"volume\",\n            ),\n        ] = (\n            row[1],  # open\n            row[2],  # high\n            row[3],  # low\n            row[4],  # close\n            row[5],  # volume\n        )\n\n    if __debug__:\n        logger.debug(\"[%s] Update bar: \\n%s\", self.name, self.tail(len(rows)))\n</code></pre>"},{"location":"reference/exchange/ccxt/ccxt/#lettrade.exchange.ccxt.ccxt.CCXTDataFeed.symbol_info","title":"symbol_info","text":"<pre><code>symbol_info()\n</code></pre> <p>Get symbol information from API</p> Source code in <code>lettrade/exchange/live/data.py</code> <pre><code>def symbol_info(self):\n    \"\"\"Get symbol information from API\"\"\"\n    return self._api.market(symbol=self.symbol)\n</code></pre>"},{"location":"reference/exchange/ccxt/ccxt/#lettrade.exchange.ccxt.ccxt.CCXTDataFeeder","title":"CCXTDataFeeder","text":"<pre><code>CCXTDataFeeder(\n    api: LiveAPI,\n    tick: bool = 5,\n    start_size: int = 500,\n    **kwargs\n)\n</code></pre> <p>               Bases: <code>LiveDataFeeder</code></p> <p>DataFeeder for CCXT</p> <pre><code>tick == 0: wait until new bar change value\ntick &gt; 0: sleep tick time (in seconds) then update\n</code></pre> Source code in <code>lettrade/exchange/live/feeder.py</code> <pre><code>def __init__(\n    self,\n    api: LiveAPI,\n    tick: bool = 5,\n    start_size: int = 500,\n    **kwargs,\n) -&gt; None:\n    \"\"\"\n    tick:\n        tick &lt; 0: no tick, just get completed bar\n        tick == 0: wait until new bar change value\n        tick &gt; 0: sleep tick time (in seconds) then update\n    \"\"\"\n    super().__init__()\n    self._api = api\n    self._tick = tick\n    self._start_size = start_size\n    self._config = kwargs\n\n    if isinstance(self._tick, int):\n        self._wait_timeframe = TimeFrame(f\"{self._tick}s\")\n    else:\n        self._wait_timeframe = None\n</code></pre>"},{"location":"reference/exchange/ccxt/ccxt/#lettrade.exchange.ccxt.ccxt.CCXTDataFeeder.is_continous","title":"is_continous  <code>property</code>","text":"<pre><code>is_continous\n</code></pre> <p>Flag check is realtime continous datafeeder</p>"},{"location":"reference/exchange/ccxt/ccxt/#lettrade.exchange.ccxt.ccxt.CCXTDataFeeder.instance","title":"instance  <code>classmethod</code>","text":"<pre><code>instance(\n    api: LiveAPI | None = None,\n    api_kwargs: dict | None = None,\n    **kwargs\n) -&gt; LiveDataFeed\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>api</code>               (<code>LiveAPI</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>api_kwargs</code>               (<code>dict</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>Missing api requirement</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>LiveDataFeed</code> (              <code>LiveDataFeed</code> )          \u2013            <p>DataFeed object</p> </li> </ul> Source code in <code>lettrade/exchange/live/feeder.py</code> <pre><code>@classmethod\ndef instance(\n    cls,\n    api: LiveAPI | None = None,\n    api_kwargs: dict | None = None,\n    **kwargs,\n) -&gt; \"LiveDataFeed\":\n    \"\"\"_summary_\n\n    Args:\n        api (LiveAPI, optional): _description_. Defaults to None.\n        api_kwargs (dict, optional): _description_. Defaults to None.\n\n    Raises:\n        RuntimeError: Missing api requirement\n\n    Returns:\n        LiveDataFeed: DataFeed object\n    \"\"\"\n    if api is None:\n        if api_kwargs is None:\n            raise RuntimeError(\"api or api_kwargs cannot missing\")\n        api = cls._api_cls(**api_kwargs)\n    obj = cls(api=api, **kwargs)\n    return obj\n</code></pre>"},{"location":"reference/exchange/ccxt/ccxt/#lettrade.exchange.ccxt.ccxt.CCXTExchange","title":"CCXTExchange","text":"<pre><code>CCXTExchange(api: LiveAPI, *args, **kwargs)\n</code></pre> <p>               Bases: <code>LiveExchange</code></p> <p>MetaTrade 5 exchange module for <code>lettrade</code></p> <p>Parameters:</p> <ul> <li> <code>api</code>               (<code>LiveAPI</code>)           \u2013            <p>API connect to rpyc MeTrader 5 Terminal server through module <code>mt5linux</code></p> </li> <li> <code>*args</code>               (<code>list</code>, default:                   <code>()</code> )           \u2013            <p><code>Exchange</code> list parameters</p> </li> <li> <code>**kwargs</code>               (<code>dict</code>, default:                   <code>{}</code> )           \u2013            <p><code>Exchange</code> dict parameters</p> </li> </ul> Source code in <code>lettrade/exchange/live/exchange.py</code> <pre><code>def __init__(self, api: LiveAPI, *args, **kwargs):\n    \"\"\"_summary_\n\n    Args:\n        api (LiveAPI): API connect to rpyc MeTrader 5 Terminal server through module `mt5linux`\n        *args (list): `Exchange` list parameters\n        **kwargs (dict): `Exchange` dict parameters\n    \"\"\"\n    super().__init__(*args, **kwargs)\n    self._api = api\n</code></pre>"},{"location":"reference/exchange/ccxt/ccxt/#lettrade.exchange.ccxt.ccxt.CCXTExchange.data","title":"data  <code>instance-attribute</code>","text":"<pre><code>data: DataFeed\n</code></pre> <p>main DataFeed</p>"},{"location":"reference/exchange/ccxt/ccxt/#lettrade.exchange.ccxt.ccxt.CCXTExchange.datas","title":"datas  <code>instance-attribute</code>","text":"<pre><code>datas: list[DataFeed]\n</code></pre> <p>List of all available DataFeed</p>"},{"location":"reference/exchange/ccxt/ccxt/#lettrade.exchange.ccxt.ccxt.CCXTExchange.executions","title":"executions  <code>instance-attribute</code>","text":"<pre><code>executions: dict[str, Execution] = dict()\n</code></pre> <p>Execution dict by <code>Execution.id</code> key</p>"},{"location":"reference/exchange/ccxt/ccxt/#lettrade.exchange.ccxt.ccxt.CCXTExchange.history_orders","title":"history_orders  <code>instance-attribute</code>","text":"<pre><code>history_orders: dict[str, Order] = dict()\n</code></pre> <p>History Order dict by <code>Order.id</code> key</p>"},{"location":"reference/exchange/ccxt/ccxt/#lettrade.exchange.ccxt.ccxt.CCXTExchange.history_positions","title":"history_positions  <code>instance-attribute</code>","text":"<pre><code>history_positions: dict[str, Position] = dict()\n</code></pre> <p>History Position dict by <code>Position.id</code> key</p>"},{"location":"reference/exchange/ccxt/ccxt/#lettrade.exchange.ccxt.ccxt.CCXTExchange.orders","title":"orders  <code>instance-attribute</code>","text":"<pre><code>orders: dict[str, Order] = dict()\n</code></pre> <p>Available Order dict by <code>Order.id</code> key</p>"},{"location":"reference/exchange/ccxt/ccxt/#lettrade.exchange.ccxt.ccxt.CCXTExchange.positions","title":"positions  <code>instance-attribute</code>","text":"<pre><code>positions: dict[str, Position] = dict()\n</code></pre> <p>Available Position dict by <code>Position.id</code> key</p>"},{"location":"reference/exchange/ccxt/ccxt/#lettrade.exchange.ccxt.ccxt.CCXTExchange.init","title":"init","text":"<pre><code>init(\n    brain: Brain,\n    feeder: DataFeeder,\n    account: Account,\n    commander: Commander,\n) -&gt; None\n</code></pre> <p>Init Exchange dependencies. Set data/datas from feeder. Set state to <code>ExchangeState.Start</code>.</p> <p>Parameters:</p> <ul> <li> <code>brain</code>               (<code>Brain</code>)           \u2013            <p>description</p> </li> <li> <code>feeder</code>               (<code>DataFeeder</code>)           \u2013            <p>description</p> </li> <li> <code>account</code>               (<code>Account</code>)           \u2013            <p>description</p> </li> <li> <code>commander</code>               (<code>Commander</code>)           \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def init(\n    self,\n    brain: \"Brain\",\n    feeder: DataFeeder,\n    account: Account,\n    commander: Commander,\n) -&gt; None:\n    \"\"\"Init Exchange dependencies.\n    Set data/datas from feeder.\n    Set state to `ExchangeState.Start`.\n\n    Args:\n        brain (Brain): _description_\n        feeder (DataFeeder): _description_\n        account (Account): _description_\n        commander (Commander): _description_\n    \"\"\"\n    self._brain = brain\n    self._feeder = feeder\n    self._account = account\n    self._commander = commander\n\n    self.data = self._feeder.data\n    self.datas = self._feeder.datas\n\n    self._account.init(exchange=self)\n\n    self._state = ExchangeState.Start\n</code></pre>"},{"location":"reference/exchange/ccxt/ccxt/#lettrade.exchange.ccxt.ccxt.CCXTExchange.new_order","title":"new_order","text":"<pre><code>new_order(\n    size: float,\n    type: OrderType | None = OrderType.Market,\n    limit: float | None = None,\n    stop: float | None = None,\n    sl: float | None = None,\n    tp: float | None = None,\n    tag: str | None = None,\n    data: DataFeed | None = None,\n    **kwargs\n) -&gt; OrderResult\n</code></pre> <p>Place new order to server</p> <p>Parameters:</p> <ul> <li> <code>size</code>               (<code>float</code>)           \u2013            <p>description</p> </li> <li> <code>type</code>               (<code>OrderType | None</code>, default:                   <code>Market</code> )           \u2013            <p>description. Defaults to OrderType.Market.</p> </li> <li> <code>limit</code>               (<code>float | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>stop</code>               (<code>float | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>sl</code>               (<code>float | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>tp</code>               (<code>float | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>tag</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>data</code>               (<code>DataFeed | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>OrderResult</code> (              <code>OrderResult</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/live/exchange.py</code> <pre><code>def new_order(\n    self,\n    size: float,\n    type: OrderType | None = OrderType.Market,\n    limit: float | None = None,\n    stop: float | None = None,\n    sl: float | None = None,\n    tp: float | None = None,\n    tag: str | None = None,\n    data: DataFeed | None = None,\n    **kwargs,\n) -&gt; OrderResult:\n    \"\"\"Place new order to server\n\n    Args:\n        size (float): _description_\n        type (OrderType | None, optional): _description_. Defaults to OrderType.Market.\n        limit (float | None, optional): _description_. Defaults to None.\n        stop (float | None, optional): _description_. Defaults to None.\n        sl (float | None, optional): _description_. Defaults to None.\n        tp (float | None, optional): _description_. Defaults to None.\n        tag (str | None, optional): _description_. Defaults to None.\n        data (DataFeed | None, optional): _description_. Defaults to None.\n\n    Returns:\n        OrderResult: _description_\n    \"\"\"\n    if not data:\n        data = self.data\n\n    if type == OrderType.Market:\n        limit = 0\n        stop = 0\n\n    order = self._order_cls(\n        id=-1,\n        exchange=self,\n        data=data,\n        size=size,\n        type=type,\n        limit_price=limit,\n        stop_price=stop,\n        sl_price=sl,\n        tp_price=tp,\n        tag=tag,\n        **kwargs,\n    )\n    ok = order.place()\n\n    # if __debug__:\n    #     logger.info(\"New order %s at %s\", order, self.data.now)\n\n    return ok\n</code></pre>"},{"location":"reference/exchange/ccxt/ccxt/#lettrade.exchange.ccxt.ccxt.CCXTExchange.next_next","title":"next_next","text":"<pre><code>next_next()\n</code></pre> <p>Call after strategy.next()</p> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def next_next(self):\n    \"\"\"Call after strategy.next()\"\"\"\n    self._account.next_next()\n</code></pre>"},{"location":"reference/exchange/ccxt/ccxt/#lettrade.exchange.ccxt.ccxt.CCXTExchange.on_execution","title":"on_execution","text":"<pre><code>on_execution(\n    execution: Execution,\n    broadcast: bool | None = True,\n    **kwargs\n) -&gt; None\n</code></pre> <p>Receive Execution event from exchange then store and notify Brain</p> <p>Parameters:</p> <ul> <li> <code>execution</code>               (<code>Execution</code>)           \u2013            <p>description</p> </li> <li> <code>broadcast</code>               (<code>bool | None</code>, default:                   <code>True</code> )           \u2013            <p>description. Defaults to True.</p> </li> </ul> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def on_execution(\n    self,\n    execution: Execution,\n    broadcast: bool | None = True,\n    **kwargs,\n) -&gt; None:\n    \"\"\"Receive Execution event from exchange then store and notify Brain\n\n    Args:\n        execution (Execution): _description_\n        broadcast (bool | None, optional): _description_. Defaults to True.\n    \"\"\"\n    self.on_executions(executions=[execution], broadcast=broadcast, **kwargs)\n</code></pre>"},{"location":"reference/exchange/ccxt/ccxt/#lettrade.exchange.ccxt.ccxt.CCXTExchange.on_executions","title":"on_executions","text":"<pre><code>on_executions(\n    executions: list[Execution],\n    broadcast: bool | None = True,\n    **kwargs\n) -&gt; None\n</code></pre> <p>Receive Execution event from exchange then store and notify Brain</p> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def on_executions(\n    self,\n    executions: list[Execution],\n    broadcast: bool | None = True,\n    **kwargs,\n) -&gt; None:\n    \"\"\"\n    Receive Execution event from exchange then store and notify Brain\n    \"\"\"\n    for execution in executions:\n        if not isinstance(execution, Execution):\n            raise RuntimeError(f\"{execution} is not instance of type Execution\")\n\n        if execution.id in self.executions:\n            # Merge to keep Execution handler for strategy using\n            # when strategy want to store Execution object\n            # and object will be automatic update directly\n            self.executions[execution.id].merge(execution)\n            execution = self.executions[execution.id]\n        else:\n            self.executions[execution.id] = execution\n\n    if self._state != ExchangeState.Run:\n        return\n\n    if broadcast:\n        self._brain.on_executions(executions)\n</code></pre>"},{"location":"reference/exchange/ccxt/ccxt/#lettrade.exchange.ccxt.ccxt.CCXTExchange.on_order","title":"on_order","text":"<pre><code>on_order(\n    order: Order, broadcast: bool | None = True, **kwargs\n) -&gt; None\n</code></pre> <p>Receive order event from exchange then store and notify Brain</p> <p>Parameters:</p> <ul> <li> <code>order</code>               (<code>Order</code>)           \u2013            <p>description</p> </li> <li> <code>broadcast</code>               (<code>bool | None</code>, default:                   <code>True</code> )           \u2013            <p>description. Defaults to True.</p> </li> </ul> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def on_order(\n    self,\n    order: Order,\n    broadcast: bool | None = True,\n    **kwargs,\n) -&gt; None:\n    \"\"\"Receive order event from exchange then store and notify Brain\n\n    Args:\n        order (Order): _description_\n        broadcast (bool | None, optional): _description_. Defaults to True.\n    \"\"\"\n    self.on_orders(orders=[order], broadcast=broadcast, **kwargs)\n</code></pre>"},{"location":"reference/exchange/ccxt/ccxt/#lettrade.exchange.ccxt.ccxt.CCXTExchange.on_orders","title":"on_orders","text":"<pre><code>on_orders(\n    orders: list[Order],\n    broadcast: bool | None = True,\n    **kwargs\n) -&gt; None\n</code></pre> <p>Receive orders event from exchange then store and notify Brain</p> <p>Parameters:</p> <ul> <li> <code>orders</code>               (<code>list[Order]</code>)           \u2013            <p>description</p> </li> <li> <code>broadcast</code>               (<code>bool | None</code>, default:                   <code>True</code> )           \u2013            <p>description. Defaults to True.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def on_orders(\n    self,\n    orders: list[Order],\n    broadcast: bool | None = True,\n    **kwargs,\n) -&gt; None:\n    \"\"\"Receive orders event from exchange then store and notify Brain\n\n    Args:\n        orders (list[Order]): _description_\n        broadcast (bool | None, optional): _description_. Defaults to True.\n\n    Raises:\n        RuntimeError: _description_\n    \"\"\"\n    for order in orders:\n        if not isinstance(order, Order):\n            raise RuntimeError(f\"{order} is not instance of type Order\")\n\n        if order.is_closed:\n            if order.id in self.history_orders:\n                logger.warning(\"Order closed recall: %s\", order)\n\n            self.history_orders[order.id] = order\n            if order.id in self.orders:\n                del self.orders[order.id]\n        else:\n            if order.id in self.history_orders:\n                raise RuntimeError(f\"Order {order.id} closed\")\n\n            if order.id in self.orders:\n                # Merge to keep Order handler for strategy using\n                # when strategy want to store Order object\n                # and object will be automatic update directly\n                self.orders[order.id].merge(order)\n                order = self.orders[order.id]\n            else:\n                self.orders[order.id] = order\n\n    if self._state != ExchangeState.Run:\n        return\n\n    if broadcast:\n        self._brain.on_orders(orders)\n</code></pre>"},{"location":"reference/exchange/ccxt/ccxt/#lettrade.exchange.ccxt.ccxt.CCXTExchange.on_position","title":"on_position","text":"<pre><code>on_position(\n    position: Position,\n    broadcast: bool | None = True,\n    **kwargs\n) -&gt; None\n</code></pre> <p>Receive Position event from exchange then store and notify Brain</p> <p>Parameters:</p> <ul> <li> <code>position</code>               (<code>Position</code>)           \u2013            <p>new comming <code>Position</code></p> </li> <li> <code>broadcast</code>               (<code>bool | None</code>, default:                   <code>True</code> )           \u2013            <p>Flag notify to Brain. Defaults to True.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>validate <code>Position</code> instance</p> </li> </ul> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def on_position(\n    self,\n    position: Position,\n    broadcast: bool | None = True,\n    **kwargs,\n) -&gt; None:\n    \"\"\"Receive Position event from exchange then store and notify Brain\n\n    Args:\n        position (Position): new comming `Position`\n        broadcast (bool | None, optional): Flag notify to Brain. Defaults to True.\n\n    Raises:\n        RuntimeError: validate `Position` instance\n    \"\"\"\n    self.on_positions(positions=[position], broadcast=broadcast, **kwargs)\n</code></pre>"},{"location":"reference/exchange/ccxt/ccxt/#lettrade.exchange.ccxt.ccxt.CCXTExchange.on_positions","title":"on_positions","text":"<pre><code>on_positions(\n    positions: list[Position],\n    broadcast: bool | None = True,\n    **kwargs\n) -&gt; None\n</code></pre> <p>Receive Positions event from exchange then store and notify Brain</p> <p>Parameters:</p> <ul> <li> <code>positions</code>               (<code>list[Position]</code>)           \u2013            <p>list of new comming <code>Position</code></p> </li> <li> <code>broadcast</code>               (<code>bool | None</code>, default:                   <code>True</code> )           \u2013            <p>Flag notify to Brain. Defaults to True.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>validate <code>Position</code> instance</p> </li> </ul> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def on_positions(\n    self,\n    positions: list[Position],\n    broadcast: bool | None = True,\n    **kwargs,\n) -&gt; None:\n    \"\"\"Receive Positions event from exchange then store and notify Brain\n\n    Args:\n        positions (list[Position]): list of new comming `Position`\n        broadcast (bool | None, optional): Flag notify to Brain. Defaults to True.\n\n    Raises:\n        RuntimeError: validate `Position` instance\n    \"\"\"\n    for position in positions:\n        if not isinstance(position, Position):\n            raise RuntimeError(f\"{position} is not instance of type Position\")\n\n        if position.is_exited:\n            if position.id in self.history_positions:\n                logger.warning(\"Position exited recall: %s\", position)\n\n            self.history_positions[position.id] = position\n            if position.id in self.positions:\n                del self.positions[position.id]\n\n            # self._account._on_position_exit(position)\n        else:\n            if position.id in self.history_positions:\n                raise RuntimeError(f\"Position {position.id} closed: {position}\")\n            if position.id in self.positions:\n                # Merge to keep Position handler for strategy using\n                # when strategy want to store Position object\n                # and object will be automatic update directly\n                self.positions[position.id].merge(position)\n                position = self.positions[position.id]\n            else:\n                self.positions[position.id] = position\n                # self._account._on_position_entry(position)\n\n    self._account.on_positions(positions)\n\n    if self._state != ExchangeState.Run:\n        return\n\n    if broadcast:\n        self._brain.on_positions(positions)\n</code></pre>"},{"location":"reference/exchange/ccxt/ccxt/#lettrade.exchange.ccxt.ccxt.CCXTExchange.start","title":"start","text":"<pre><code>start() -&gt; None\n</code></pre> <p>Start Live exchange by: Sync positions from server</p> Source code in <code>lettrade/exchange/live/exchange.py</code> <pre><code>def start(self) -&gt; None:\n    \"\"\"Start Live exchange by: Sync positions from server\"\"\"\n    self._api.start(exchange=self)\n    return super().start()\n</code></pre>"},{"location":"reference/exchange/ccxt/ccxt/#lettrade.exchange.ccxt.ccxt.CCXTExchange.stop","title":"stop","text":"<pre><code>stop() -&gt; None\n</code></pre> <p>Stop Exchange</p> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def stop(self) -&gt; None:\n    \"\"\"Stop Exchange\"\"\"\n    self._state = ExchangeState.Stop\n    self._account.stop()\n</code></pre>"},{"location":"reference/exchange/ccxt/ccxt/#lettrade.exchange.ccxt.ccxt.LetTradeCCXT","title":"LetTradeCCXT","text":"<pre><code>LetTradeCCXT(\n    feeder: type[CCXTDataFeeder] = CCXTDataFeeder,\n    exchange: type[CCXTExchange] = CCXTExchange,\n    account: type[CCXTAccount] = CCXTAccount,\n    **kwargs\n)\n</code></pre> <p>               Bases: <code>LetTradeLive</code></p> <p>Help to maintain CCXT bots</p> <p>Parameters:</p> <ul> <li> <code>feeder</code>               (<code>Type[CCXTDataFeeder]</code>, default:                   <code>CCXTDataFeeder</code> )           \u2013            <p>description. Defaults to CCXTDataFeeder.</p> </li> <li> <code>exchange</code>               (<code>Type[CCXTExchange]</code>, default:                   <code>CCXTExchange</code> )           \u2013            <p>description. Defaults to CCXTExchange.</p> </li> <li> <code>account</code>               (<code>Type[CCXTAccount]</code>, default:                   <code>CCXTAccount</code> )           \u2013            <p>description. Defaults to CCXTAccount.</p> </li> </ul> Source code in <code>lettrade/exchange/ccxt/ccxt.py</code> <pre><code>def __init__(\n    self,\n    feeder: type[CCXTDataFeeder] = CCXTDataFeeder,\n    exchange: type[CCXTExchange] = CCXTExchange,\n    account: type[CCXTAccount] = CCXTAccount,\n    **kwargs,\n) -&gt; None:\n    \"\"\"_summary_\n\n    Args:\n        feeder (Type[CCXTDataFeeder], optional): _description_. Defaults to CCXTDataFeeder.\n        exchange (Type[CCXTExchange], optional): _description_. Defaults to CCXTExchange.\n        account (Type[CCXTAccount], optional): _description_. Defaults to CCXTAccount.\n    \"\"\"\n    super().__init__(\n        feeder=feeder,\n        exchange=exchange,\n        account=account,\n        **kwargs,\n    )\n</code></pre>"},{"location":"reference/exchange/ccxt/ccxt/#lettrade.exchange.ccxt.ccxt.LetTradeCCXT.plot","title":"plot","text":"<pre><code>plot(*args, jump: dict | None = None, **kwargs)\n</code></pre> <p>Plot strategy/optimize result</p> BotPlotter <p>Miror of BotPlotter.plot(). Plotly implement PlotlyBotPlotter.plot().</p> <p>Args:     <code>jump</code> (dict | None, optional): Miror of BotPlotter.jump()</p> <p>Example:     - Jump to position_id         <pre><code>lt.plot(\n    jump=dict(position_id=1, range=300),\n    layout=dict(height=2000),\n)\n</code></pre></p> OptimizePlotter <p>Miror of OptimizePlotter.plot(). Plotly implement PlotlyOptimizePlotter.plot().</p> <p>Example:     -         <pre><code>lt.plot(layout=dict(height=2000))\n</code></pre></p> Source code in <code>lettrade/lettrade.py</code> <pre><code>def plot(self, *args, jump: dict | None = None, **kwargs):\n    \"\"\"Plot strategy/optimize result\n\n    BotPlotter:\n        Miror of [BotPlotter.plot()](site:/reference/plot/bot/#lettrade.plot.bot.BotPlotter.plot).\n        Plotly implement [PlotlyBotPlotter.plot()](site:/reference/plot/plotly/plotly/#lettrade.plot.plotly.plotly.PlotlyBotPlotter.plot).\n\n        Args:\n            `jump` (dict | None, optional): Miror of [BotPlotter.jump()](site:/reference/plot/bot/#lettrade.plot.bot.BotPlotter.jump)\n\n        Example:\n            - Jump to position_id\n                ```python\n                lt.plot(\n                    jump=dict(position_id=1, range=300),\n                    layout=dict(height=2000),\n                )\n                ```\n\n    OptimizePlotter:\n        Miror of [OptimizePlotter.plot()](site:/reference/plot/optimize/#lettrade.plot.optimize.OptimizePlotter.plot).\n        Plotly implement [PlotlyOptimizePlotter.plot()](site:/reference/exchange/backtest/plotly/optimize/#lettrade.exchange.backtest.plotly.optimize.PlotlyOptimizePlotter.plot).\n\n        Example:\n            -\n                ```python\n                lt.plot(layout=dict(height=2000))\n                ```\n    \"\"\"\n    if __debug__:\n        from .utils.docs import is_docs_session\n\n        if is_docs_session():\n            return\n\n    self.plotter.plot(*args, jump=jump, **kwargs)\n</code></pre>"},{"location":"reference/exchange/ccxt/ccxt/#lettrade.exchange.ccxt.ccxt.LetTradeCCXT.run","title":"run","text":"<pre><code>run(worker: int | None = None, **kwargs)\n</code></pre> <p>Run strategy in single or multiple processing</p> <p>Parameters:</p> <ul> <li> <code>worker</code>               (<code>int | None</code>, default:                   <code>None</code> )           \u2013            <p>Number of processing. Defaults to None.</p> </li> </ul> Source code in <code>lettrade/lettrade.py</code> <pre><code>def run(self, worker: int | None = None, **kwargs):\n    \"\"\"Run strategy in single or multiple processing\n\n    Args:\n        worker (int | None, optional): Number of processing. Defaults to None.\n    \"\"\"\n    if worker or isinstance(self.data, list):\n        if not isinstance(self.data, list):\n            # self.data = self.datas\n            self.datas = [self.data]\n\n        worker = self._max_workers(worker)\n\n        self._multiprocess()\n\n        datas_source = self._kwargs.pop(\"datas\")\n        with ProcessPoolExecutor(max_workers=worker) as executor:\n            futures = [\n                executor.submit(\n                    self._bot_cls.run_bot,\n                    datas=datas,\n                    id=i,\n                    result=\"str\",\n                    **self._kwargs,\n                )\n                for i, datas in enumerate(datas_source)\n            ]\n            for future in futures:\n                result = future.result()\n                print(result)\n    else:\n        self._bot = self._bot_cls.run_bot(\n            bot=self._bot,\n            result=\"bot\",\n            **self._kwargs,\n        )\n        print(str(self._bot.stats))\n</code></pre>"},{"location":"reference/exchange/ccxt/ccxt/#lettrade.exchange.ccxt.ccxt.LetTradeCCXT.stop","title":"stop","text":"<pre><code>stop()\n</code></pre> <p>Stop strategy</p> Source code in <code>lettrade/lettrade.py</code> <pre><code>def stop(self):\n    \"\"\"Stop strategy\"\"\"\n    if self._bot is not None:\n        return self._bot.stop()\n    if self.stats:\n        self.stats.stop()\n</code></pre>"},{"location":"reference/exchange/ccxt/ccxt/#lettrade.exchange.ccxt.ccxt.LetTradeCCXTBot","title":"LetTradeCCXTBot","text":"<pre><code>LetTradeCCXTBot(api: LiveAPI | None = LiveAPI, **kwargs)\n</code></pre> <p>               Bases: <code>LetTradeLiveBot</code></p> <p>LetTradeBot for CCXT</p> Source code in <code>lettrade/exchange/live/live.py</code> <pre><code>def __init__(\n    self,\n    api: LiveAPI | None = LiveAPI,\n    **kwargs,\n) -&gt; None:\n    super().__init__(**kwargs)\n\n    if issubclass(api, LiveAPI):\n        self._api = api(**self._kwargs.get(\"api_kwargs\", {}))\n    else:\n        self._api = api\n\n    self._kwargs.setdefault(\"feeder_kwargs\", dict()).update(api=self._api)\n    self._kwargs.setdefault(\"exchange_kwargs\", dict()).update(api=self._api)\n    self._kwargs.setdefault(\"account_kwargs\", dict()).update(api=self._api)\n\n    for data in self.datas:\n        data._api = self._api\n</code></pre>"},{"location":"reference/exchange/ccxt/ccxt/#lettrade.exchange.ccxt.ccxt.let_ccxt","title":"let_ccxt","text":"<pre><code>let_ccxt(\n    strategy: type[Strategy],\n    datas: set[set[str]],\n    ccxt_exchange: str,\n    ccxt_key: str,\n    ccxt_secret: str,\n    ccxt_type: Literal[\"spot\", \"margin\", \"future\"] = \"spot\",\n    ccxt_verbose: bool = False,\n    feeder: type[CCXTDataFeeder] = CCXTDataFeeder,\n    exchange: type[CCXTExchange] = CCXTExchange,\n    account: type[CCXTAccount] = CCXTAccount,\n    commander: type[Commander] | None = None,\n    plotter: type[Plotter] | None = None,\n    stats: type[BotStatistic] | None = BotStatistic,\n    bot: type[LetTradeCCXTBot] | None = LetTradeCCXTBot,\n    lettrade: type[LetTradeCCXT] | None = LetTradeCCXT,\n    api: type[CCXTAPI] | None = CCXTAPI,\n    **kwargs\n) -&gt; LetTradeCCXT\n</code></pre> <p>Help to build <code>LetTradeCCXT</code></p> <p>Parameters:</p> <ul> <li> <code>strategy</code>               (<code>Type[Strategy]</code>)           \u2013            <p>description</p> </li> <li> <code>datas</code>               (<code>set[set[str]]</code>)           \u2013            <p>description</p> </li> <li> <code>ccxt_exchange</code>               (<code>str</code>)           \u2013            <p>description</p> </li> <li> <code>ccxt_key</code>               (<code>str</code>)           \u2013            <p>description</p> </li> <li> <code>ccxt_secret</code>               (<code>str</code>)           \u2013            <p>description</p> </li> <li> <code>ccxt_type</code>               (<code>Literal['spot', 'margin', 'future']</code>, default:                   <code>'spot'</code> )           \u2013            <p>description. Defaults to \"spot\".</p> </li> <li> <code>ccxt_verbose</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>description. Defaults to False.</p> </li> <li> <code>feeder</code>               (<code>Type[CCXTDataFeeder]</code>, default:                   <code>CCXTDataFeeder</code> )           \u2013            <p>description. Defaults to CCXTDataFeeder.</p> </li> <li> <code>exchange</code>               (<code>Type[CCXTExchange]</code>, default:                   <code>CCXTExchange</code> )           \u2013            <p>description. Defaults to CCXTExchange.</p> </li> <li> <code>account</code>               (<code>Type[CCXTAccount]</code>, default:                   <code>CCXTAccount</code> )           \u2013            <p>description. Defaults to CCXTAccount.</p> </li> <li> <code>commander</code>               (<code>Type[Commander] | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>plotter</code>               (<code>Type[Plotter] | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>stats</code>               (<code>Type[BotStatistic] | None</code>, default:                   <code>BotStatistic</code> )           \u2013            <p>description. Defaults to BotStatistic.</p> </li> <li> <code>bot</code>               (<code>Type[LetTradeCCXTBot] | None</code>, default:                   <code>LetTradeCCXTBot</code> )           \u2013            <p>description. Defaults to LetTradeCCXTBot.</p> </li> <li> <code>lettrade</code>               (<code>Type[LetTradeCCXT] | None</code>, default:                   <code>LetTradeCCXT</code> )           \u2013            <p>description. Defaults to LetTradeCCXT.</p> </li> <li> <code>api</code>               (<code>Type[CCXTAPI] | None</code>, default:                   <code>CCXTAPI</code> )           \u2013            <p>description. Defaults to CCXTAPI.</p> </li> <li> <code>**kwargs</code>               (<code>dict</code>, default:                   <code>{}</code> )           \u2013            <p>All remaining properties are passed to the constructor of <code>LetTradeLive</code></p> </li> </ul> <p>Returns:</p> <ul> <li> <code>LetTradeCCXT</code> (              <code>LetTradeCCXT</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/ccxt/ccxt.py</code> <pre><code>def let_ccxt(\n    strategy: type[Strategy],\n    datas: set[set[str]],\n    ccxt_exchange: str,\n    ccxt_key: str,\n    ccxt_secret: str,\n    ccxt_type: Literal[\"spot\", \"margin\", \"future\"] = \"spot\",\n    ccxt_verbose: bool = False,\n    feeder: type[CCXTDataFeeder] = CCXTDataFeeder,\n    exchange: type[CCXTExchange] = CCXTExchange,\n    account: type[CCXTAccount] = CCXTAccount,\n    commander: type[Commander] | None = None,\n    plotter: type[Plotter] | None = None,\n    stats: type[BotStatistic] | None = BotStatistic,\n    bot: type[LetTradeCCXTBot] | None = LetTradeCCXTBot,\n    lettrade: type[LetTradeCCXT] | None = LetTradeCCXT,\n    api: type[CCXTAPI] | None = CCXTAPI,\n    **kwargs,\n) -&gt; LetTradeCCXT:\n    \"\"\"Help to build `LetTradeCCXT`\n\n    Args:\n        strategy (Type[Strategy]): _description_\n        datas (set[set[str]]): _description_\n        ccxt_exchange (str): _description_\n        ccxt_key (str): _description_\n        ccxt_secret (str): _description_\n        ccxt_type (Literal[\"spot\", \"margin\", \"future\"], optional): _description_. Defaults to \"spot\".\n        ccxt_verbose (bool, optional): _description_. Defaults to False.\n        feeder (Type[CCXTDataFeeder], optional): _description_. Defaults to CCXTDataFeeder.\n        exchange (Type[CCXTExchange], optional): _description_. Defaults to CCXTExchange.\n        account (Type[CCXTAccount], optional): _description_. Defaults to CCXTAccount.\n        commander (Type[Commander] | None, optional): _description_. Defaults to None.\n        plotter (Type[Plotter] | None, optional): _description_. Defaults to None.\n        stats (Type[BotStatistic] | None, optional): _description_. Defaults to BotStatistic.\n        bot (Type[LetTradeCCXTBot] | None, optional): _description_. Defaults to LetTradeCCXTBot.\n        lettrade (Type[LetTradeCCXT] | None, optional): _description_. Defaults to LetTradeCCXT.\n        api (Type[CCXTAPI] | None, optional): _description_. Defaults to CCXTAPI.\n        **kwargs (dict): All remaining properties are passed to the constructor of `LetTradeLive`\n\n    Returns:\n        LetTradeCCXT: _description_\n    \"\"\"\n    api_kwargs: dict = kwargs.setdefault(\"api_kwargs\", {})\n    api_kwargs.update(\n        exchange=ccxt_exchange,\n        key=ccxt_key,\n        secret=ccxt_secret,\n        type=ccxt_type,\n        verbose=ccxt_verbose,\n    )\n\n    return let_live(\n        strategy=strategy,\n        datas=datas,\n        feeder=feeder,\n        exchange=exchange,\n        account=account,\n        commander=commander,\n        plotter=plotter,\n        stats=stats,\n        bot=bot,\n        lettrade=lettrade,\n        api=api,\n        **kwargs,\n    )\n</code></pre>"},{"location":"reference/exchange/ccxt/trade/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> trade","text":""},{"location":"reference/exchange/ccxt/trade/#lettrade.exchange.ccxt.trade","title":"trade","text":""},{"location":"reference/exchange/ccxt/trade/#lettrade.exchange.ccxt.trade.CCXTExecution","title":"CCXTExecution","text":"<pre><code>CCXTExecution(\n    id: str,\n    exchange: LiveExchange,\n    data: LiveDataFeed,\n    size: float,\n    price: float,\n    at: float,\n    order_id: str | None = None,\n    order: Order | None = None,\n    position_id: str | None = None,\n    position: Position | None = None,\n    api: LiveAPI | None = None,\n    raw: object | None = None,\n    **kwargs\n)\n</code></pre> <p>               Bases: <code>LiveExecution</code></p> <p>Execution for CCXT</p> Source code in <code>lettrade/exchange/live/trade.py</code> <pre><code>def __init__(\n    self,\n    id: str,\n    exchange: \"LiveExchange\",\n    data: \"LiveDataFeed\",\n    size: float,\n    price: float,\n    at: float,\n    order_id: str | None = None,\n    order: \"Order | None\" = None,\n    position_id: str | None = None,\n    position: \"Position | None\" = None,\n    # tag: str | None = None,\n    api: LiveAPI | None = None,\n    raw: object | None = None,\n    **kwargs,\n):\n    super().__init__(\n        id=id,\n        exchange=exchange,\n        data=data,\n        size=size,\n        price=price,\n        at=at,\n        order_id=order_id,\n        order=order,\n        position_id=position_id,\n        position=position,\n        api=api,\n        raw=raw,\n        **kwargs,\n    )\n</code></pre>"},{"location":"reference/exchange/ccxt/trade/#lettrade.exchange.ccxt.trade.CCXTExecution.is_long","title":"is_long  <code>property</code>","text":"<pre><code>is_long: bool\n</code></pre> <p>True if side is long (size is positive).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True/False</p> </li> </ul>"},{"location":"reference/exchange/ccxt/trade/#lettrade.exchange.ccxt.trade.CCXTExecution.is_short","title":"is_short  <code>property</code>","text":"<pre><code>is_short: bool\n</code></pre> <p>True if side is short (size is negative).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/ccxt/trade/#lettrade.exchange.ccxt.trade.CCXTExecution.side","title":"side  <code>property</code>","text":"<pre><code>side: TradeSide\n</code></pre> <p>True if side is short (size is negative).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>TradeSide</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/ccxt/trade/#lettrade.exchange.ccxt.trade.CCXTExecution.from_raw","title":"from_raw  <code>classmethod</code>","text":"<pre><code>from_raw(\n    raw, exchange: LiveExchange, api: CCXTAPI = None\n) -&gt; CCXTExecution\n</code></pre> <p>Building new CCXTExecution from live api raw object</p> <p>Parameters:</p> <ul> <li> <code>raw</code>               (<code>_type_</code>)           \u2013            <p>description</p> </li> <li> <code>exchange</code>               (<code>LiveExchange</code>)           \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>CCXTExecution</code> (              <code>CCXTExecution</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/ccxt/trade.py</code> <pre><code>@classmethod\ndef from_raw(\n    cls,\n    raw,\n    exchange: \"LiveExchange\",\n    api: CCXTAPI = None,\n) -&gt; \"CCXTExecution\":\n    \"\"\"Building new CCXTExecution from live api raw object\n\n    Args:\n        raw (_type_): _description_\n        exchange (LiveExchange): _description_\n\n    Returns:\n        CCXTExecution: _description_\n    \"\"\"\n\n    return cls(\n        exchange=exchange,\n        id=raw.ticket,\n        # TODO: Fix by get data from symbol\n        data=exchange.data,\n        # TODO: size and type from raw.type\n        size=raw.volume,\n        price=raw.price,\n        # TODO: set bar time\n        at=None,\n        order_id=raw.order,\n        position_id=raw.position_id,\n        tag=raw.comment,\n        api=api,\n        raw=raw,\n    )\n</code></pre>"},{"location":"reference/exchange/ccxt/trade/#lettrade.exchange.ccxt.trade.CCXTExecution.merge","title":"merge","text":"<pre><code>merge(other: Execution)\n</code></pre> <p>Merge to keep object handler but not overwrite for Strategy using when Strategy want to store object and object will be automatic update directly</p> Source code in <code>lettrade/exchange/execution.py</code> <pre><code>def merge(self, other: \"Execution\"):\n    \"\"\"\n    Merge to keep object handler but not overwrite for Strategy using when Strategy want to store object and object will be automatic update directly\n    \"\"\"\n    if other is self:\n        return\n\n    if self.id != other.id:\n        raise RuntimeError(f\"Merge difference id {self.id} != {other.id} execution\")\n\n    self.price = other.price\n    self.size = other.size\n\n    if other.at:\n        self.at = other.at\n    if other.order_id:\n        self.order_id = other.order_id\n    if other.order:\n        self.order = other.order\n    if other.position_id:\n        self.position_id = other.position_id\n    if other.position:\n        self.position = other.position\n</code></pre>"},{"location":"reference/exchange/ccxt/trade/#lettrade.exchange.ccxt.trade.CCXTOrder","title":"CCXTOrder","text":"<pre><code>CCXTOrder(is_real: bool = True, **kwargs)\n</code></pre> <p>               Bases: <code>LiveOrder</code></p> <p>Order for CCXT</p> Source code in <code>lettrade/exchange/ccxt/trade.py</code> <pre><code>def __init__(self, is_real: bool = True, **kwargs):\n    super().__init__(**kwargs)\n\n    self.is_real: bool = is_real\n    \"\"\"Flag to check `Order` is real, cannot duplicate id, cannot recall from history\"\"\"\n</code></pre>"},{"location":"reference/exchange/ccxt/trade/#lettrade.exchange.ccxt.trade.CCXTOrder.is_closed","title":"is_closed  <code>property</code>","text":"<pre><code>is_closed: bool\n</code></pre> <p>Flag to check <code>Order</code> closed</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True if <code>state</code> in [OrderState.Filled, OrderState.Canceled]</p> </li> </ul>"},{"location":"reference/exchange/ccxt/trade/#lettrade.exchange.ccxt.trade.CCXTOrder.is_long","title":"is_long  <code>property</code>","text":"<pre><code>is_long: bool\n</code></pre> <p>True if side is long (size is positive).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True/False</p> </li> </ul>"},{"location":"reference/exchange/ccxt/trade/#lettrade.exchange.ccxt.trade.CCXTOrder.is_opening","title":"is_opening  <code>property</code>","text":"<pre><code>is_opening: bool\n</code></pre> <p>Flag to check <code>Order</code> still alive</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True if <code>state</code> in [OrderState.Pending, OrderState.Placed, OrderState.Partial]</p> </li> </ul>"},{"location":"reference/exchange/ccxt/trade/#lettrade.exchange.ccxt.trade.CCXTOrder.is_real","title":"is_real  <code>instance-attribute</code>","text":"<pre><code>is_real: bool = is_real\n</code></pre> <p>Flag to check <code>Order</code> is real, cannot duplicate id, cannot recall from history</p>"},{"location":"reference/exchange/ccxt/trade/#lettrade.exchange.ccxt.trade.CCXTOrder.is_short","title":"is_short  <code>property</code>","text":"<pre><code>is_short: bool\n</code></pre> <p>True if side is short (size is negative).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/ccxt/trade/#lettrade.exchange.ccxt.trade.CCXTOrder.is_sl_order","title":"is_sl_order  <code>property</code>","text":"<pre><code>is_sl_order: bool\n</code></pre> <p><code>Order</code> is stop-loss order of a <code>Position</code></p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/ccxt/trade/#lettrade.exchange.ccxt.trade.CCXTOrder.is_tp_order","title":"is_tp_order  <code>property</code>","text":"<pre><code>is_tp_order: bool\n</code></pre> <p><code>Order</code> is take-profit order of a <code>Position</code></p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/ccxt/trade/#lettrade.exchange.ccxt.trade.CCXTOrder.limit","title":"limit  <code>property</code>","text":"<pre><code>limit: float | None\n</code></pre> <p>Getter of limit_price</p> <p>Returns:</p> <ul> <li> <code>float | None</code>           \u2013            <p>float | None: <code>float</code> or <code>None</code></p> </li> </ul>"},{"location":"reference/exchange/ccxt/trade/#lettrade.exchange.ccxt.trade.CCXTOrder.place_price","title":"place_price  <code>property</code>","text":"<pre><code>place_price: float | None\n</code></pre> <p>Getter of place_price</p> <p>Returns:</p> <ul> <li> <code>float | None</code>           \u2013            <p>float | None: <code>float</code> or <code>None</code></p> </li> </ul>"},{"location":"reference/exchange/ccxt/trade/#lettrade.exchange.ccxt.trade.CCXTOrder.side","title":"side  <code>property</code>","text":"<pre><code>side: TradeSide\n</code></pre> <p>True if side is short (size is negative).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>TradeSide</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/ccxt/trade/#lettrade.exchange.ccxt.trade.CCXTOrder.sl","title":"sl  <code>property</code>","text":"<pre><code>sl: float | None\n</code></pre> <p>Getter of sl_price</p> <p>Returns:</p> <ul> <li> <code>float | None</code>           \u2013            <p>float | None: <code>float</code> or <code>None</code></p> </li> </ul>"},{"location":"reference/exchange/ccxt/trade/#lettrade.exchange.ccxt.trade.CCXTOrder.stop","title":"stop  <code>property</code>","text":"<pre><code>stop: float | None\n</code></pre> <p>Getter of stop_price</p> <p>Returns:</p> <ul> <li> <code>float | None</code>           \u2013            <p>float | None: <code>float</code> or <code>None</code></p> </li> </ul>"},{"location":"reference/exchange/ccxt/trade/#lettrade.exchange.ccxt.trade.CCXTOrder.tp","title":"tp  <code>property</code>","text":"<pre><code>tp: float | None\n</code></pre> <p>Getter of tp_price</p> <p>Returns:</p> <ul> <li> <code>float | None</code>           \u2013            <p>float | None: <code>float</code> or <code>None</code></p> </li> </ul>"},{"location":"reference/exchange/ccxt/trade/#lettrade.exchange.ccxt.trade.CCXTOrder.cancel","title":"cancel","text":"<pre><code>cancel(**kwargs) -&gt; OrderResult\n</code></pre> <p>Cancel order</p> <p>Returns:</p> <ul> <li> <code>OrderResult</code> (              <code>OrderResult</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/ccxt/trade.py</code> <pre><code>def cancel(self, **kwargs) -&gt; OrderResult:\n    \"\"\"Cancel order\n\n    Returns:\n        OrderResult: _description_\n    \"\"\"\n    if not self.parent:\n        # Abandon order\n        result = self._api.order_close(order=self, **kwargs)\n    else:\n        # Virtual SL/TP order of trade\n        result = None\n\n    return super(LiveOrder, self).cancel(raw=result)\n</code></pre>"},{"location":"reference/exchange/ccxt/trade/#lettrade.exchange.ccxt.trade.CCXTOrder.fill","title":"fill","text":"<pre><code>fill(\n    price: float, at: Timestamp, raw: object | None = None\n) -&gt; OrderResult\n</code></pre> <p>Fill <code>Order</code>. Set <code>status</code> to <code>OrderState.Executed</code>. Send event to <code>Exchange</code></p> <p>Parameters:</p> <ul> <li> <code>price</code>               (<code>float</code>)           \u2013            <p>Executed price</p> </li> <li> <code>at</code>               (<code>Timestamp</code>)           \u2013            <p>Executed bar</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>OrderResult</code> (              <code>OrderResult</code> )          \u2013            <p>result of <code>Order</code></p> </li> </ul> Source code in <code>lettrade/exchange/order.py</code> <pre><code>def fill(\n    self,\n    price: float,\n    at: pd.Timestamp,\n    raw: object | None = None,\n) -&gt; \"OrderResult\":\n    \"\"\"Fill `Order`.\n    Set `status` to `OrderState.Executed`.\n    Send event to `Exchange`\n\n    Args:\n        price (float): Executed price\n        at (pd.Timestamp): Executed bar\n\n    Raises:\n        RuntimeError: _description_\n\n    Returns:\n        OrderResult: result of `Order`\n    \"\"\"\n    if self.state != OrderState.Placed:\n        raise RuntimeError(f\"Order {self.id} state {self.state} is not Placed\")\n\n    self.filled_at = at\n    self.filled_price = price\n    self.state = OrderState.Filled\n    self.exchange.on_order(self)\n    return OrderResultOk(order=self, raw=raw)\n</code></pre>"},{"location":"reference/exchange/ccxt/trade/#lettrade.exchange.ccxt.trade.CCXTOrder.from_position","title":"from_position  <code>classmethod</code>","text":"<pre><code>from_position(\n    position: CCXTPosition,\n    sl: float | None = None,\n    tp: float | None = None,\n) -&gt; CCXTOrder\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>position</code>               (<code>CCXTPosition</code>)           \u2013            <p>description</p> </li> <li> <code>sl</code>               (<code>float | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>tp</code>               (<code>float | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>CCXTOrder</code> (              <code>CCXTOrder</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/ccxt/trade.py</code> <pre><code>@classmethod\ndef from_position(\n    cls,\n    position: \"CCXTPosition\",\n    sl: float | None = None,\n    tp: float | None = None,\n) -&gt; \"CCXTOrder\":\n    \"\"\"_summary_\n\n    Args:\n        position (CCXTPosition): _description_\n        sl (float | None, optional): _description_. Defaults to None.\n        tp (float | None, optional): _description_. Defaults to None.\n\n    Raises:\n        RuntimeError: _description_\n\n    Returns:\n        CCXTOrder: _description_\n    \"\"\"\n    if not sl and not tp:\n        raise RuntimeError(\"not sl and not tp\")\n    return cls(\n        id=f\"{position.id}-{'sl' if sl else 'tp'}\",\n        exchange=position.exchange,\n        data=position.data,\n        state=OrderState.Placed,\n        type=OrderType.Stop if sl else OrderType.Limit,\n        size=-position.size,\n        limit_price=tp,\n        stop_price=sl,\n        parent=position,\n        placed_at=position.entry_at,\n        is_real=False,\n    )\n</code></pre>"},{"location":"reference/exchange/ccxt/trade/#lettrade.exchange.ccxt.trade.CCXTOrder.from_raw","title":"from_raw  <code>classmethod</code>","text":"<pre><code>from_raw(\n    raw: Any,\n    exchange: LiveExchange,\n    api: CCXTAPI | None = None,\n) -&gt; CCXTOrder | None\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>raw</code>               (<code>Any</code>)           \u2013            <p>description.</p> </li> <li> <code>exchange</code>               (<code>LiveExchange</code>)           \u2013            <p>description.</p> </li> <li> <code>api</code>               (<code>CCXTAPI | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>NotImplementedError</code>             \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>CCXTOrder</code> (              <code>CCXTOrder | None</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/ccxt/trade.py</code> <pre><code>@classmethod\ndef from_raw(\n    cls,\n    raw: Any,\n    exchange: \"LiveExchange\",\n    api: CCXTAPI | None = None,\n) -&gt; \"CCXTOrder | None\":\n    \"\"\"_summary_\n\n    Args:\n        raw (Any): _description_.\n        exchange (LiveExchange): _description_.\n        api (CCXTAPI | None, optional): _description_. Defaults to None.\n\n    Raises:\n        NotImplementedError: _description_\n\n    Returns:\n        CCXTOrder: _description_\n    \"\"\"\n    # DataFeed\n    data = None\n    for d in exchange.datas:\n        if d.symbol == raw.symbol:\n            data = d\n            break\n    if data is None:\n        logger.warning(\"Raw order %s is not handling %s\", raw.symbol, raw)\n        return\n\n    # Prices &amp; Side &amp; Type\n    limit_price = None\n    stop_price = None\n    match raw.type:\n        case MT5.ORDER_TYPE_BUY:\n            side = TradeSide.Buy\n            type = OrderType.Market\n        case MT5.ORDER_TYPE_SELL:\n            side = TradeSide.Sell\n            type = OrderType.Market\n        case MT5.ORDER_TYPE_BUY_LIMIT:\n            side = TradeSide.Buy\n            type = OrderType.Limit\n            limit_price = raw.price_open\n        case MT5.ORDER_TYPE_SELL_LIMIT:\n            side = TradeSide.Sell\n            type = OrderType.Limit\n            limit_price = raw.price_open\n        case MT5.ORDER_TYPE_BUY_STOP:\n            side = TradeSide.Buy\n            type = OrderType.Stop\n            stop_price = raw.price_open\n        case MT5.ORDER_TYPE_SELL_STOP:\n            side = TradeSide.Sell\n            type = OrderType.Stop\n            stop_price = raw.price_open\n        # case MT5.ORDER_TYPE_BUY_STOP_LIMIT:\n        #     side = TradeSide.Buy\n        #     type = OrderType.StopLimit\n        #     # TODO\n        #     limit_price = raw.price_open\n        #     stop_price = raw.price_open\n        # case MT5.ORDER_TYPE_SELL_STOP_LIMIT:\n        #     side = TradeSide.Sell\n        #     type = OrderType.StopLimit\n        #     # TODO\n        #     limit_price = raw.price_open\n        #     stop_price = raw.price_open\n        # case MT5.ORDER_TYPE_CLOSE_BY:\n        case _:\n            raise NotImplementedError(\n                f\"Order type {raw.type} is not implement\",\n                raw,\n            )\n    # State\n    match raw.state:\n        case MT5.ORDER_STATE_STARTED:\n            state = OrderState.Pending\n        case MT5.ORDER_STATE_PLACED:\n            state = OrderState.Placed\n        case MT5.ORDER_STATE_CANCELED:\n            state = OrderState.Canceled\n        case MT5.ORDER_STATE_PARTIAL:\n            state = OrderState.Partial\n        case MT5.ORDER_STATE_FILLED:\n            state = OrderState.Filled\n        case MT5.ORDER_STATE_REJECTED:\n            state = OrderState.Canceled\n        case MT5.ORDER_STATE_EXPIRED:\n            state = OrderState.Canceled\n        case MT5.ORDER_STATE_REQUEST_ADD:\n            state = OrderState.Placed\n        case MT5.ORDER_STATE_REQUEST_MODIFY:\n            state = OrderState.Placed\n        case MT5.ORDER_STATE_REQUEST_CANCEL:\n            state = OrderState.Canceled\n        case _:\n            raise NotImplementedError(\n                f\"Raw order state {raw.state} is not implement\"\n            )\n\n    order = cls(\n        exchange=exchange,\n        id=raw.ticket,\n        state=state,\n        data=data,\n        size=side * (raw.volume_current or raw.volume_initial),\n        type=type,\n        limit_price=limit_price,\n        stop_price=stop_price,\n        sl_price=raw.sl or None,\n        tp_price=raw.tp or None,\n        tag=raw.comment,\n        placed_at=pd.to_datetime(raw.time_setup_msc, unit=\"ms\", utc=True),\n        api=api,\n        raw=raw,\n    )\n\n    if hasattr(raw, \"time_done_msc\"):\n        order.filled_price = raw.price_current\n        order.filled_at = pd.to_datetime(raw.time_done_msc, unit=\"ms\", utc=True)\n\n    return order\n</code></pre>"},{"location":"reference/exchange/ccxt/trade/#lettrade.exchange.ccxt.trade.CCXTOrder.merge","title":"merge","text":"<pre><code>merge(other: Order)\n</code></pre> <p>Update current <code>Order</code> variables by other <code>Order</code></p> <p>Parameters:</p> <ul> <li> <code>other</code>               (<code>Order</code>)           \u2013            <p>Merge source <code>Order</code></p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>Validate same id</p> </li> </ul> Source code in <code>lettrade/exchange/order.py</code> <pre><code>def merge(self, other: \"Order\"):\n    \"\"\"Update current `Order` variables by other `Order`\n\n    Args:\n        other (Order): Merge source `Order`\n\n    Raises:\n        RuntimeError: Validate same id\n    \"\"\"\n    if other is self:\n        return\n\n    if self.id != other.id:\n        raise RuntimeError(f\"Merge difference id {self.id} != {other.id} order\")\n\n    self.size = other.size\n    self.sl_price = other.sl_price\n    self.tp_price = other.tp_price\n\n    if other.limit_price:\n        self.limit_price = other.limit_price\n    if other.stop_price:\n        self.stop_price = other.stop_price\n    if other.placed_at:\n        self.placed_at = other.placed_at\n\n    if other.filled_price:\n        self.filled_price = other.filled_price\n    if other.filled_at:\n        self.filled_at = other.filled_at\n\n    if other.parent:\n        self.parent = other.parent\n</code></pre>"},{"location":"reference/exchange/ccxt/trade/#lettrade.exchange.ccxt.trade.CCXTOrder.place","title":"place","text":"<pre><code>place() -&gt; OrderResult\n</code></pre> <p>summary</p> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>OrderResult</code> (              <code>OrderResult</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/ccxt/trade.py</code> <pre><code>def place(self) -&gt; OrderResult:\n    \"\"\"_summary_\n\n    Raises:\n        RuntimeError: _description_\n\n    Returns:\n        OrderResult: _description_\n    \"\"\"\n    if self.state != OrderState.Pending:\n        raise RuntimeError(f\"Order {self.id} state {self.state} is not Pending\")\n\n    try:\n        result = self._api.order_open(self)\n\n        self.raw = result\n        self.id = result.order\n\n        # TODO: get current order time\n        return super(LiveOrder, self).place(at=self.data.l.index[0], raw=result)\n    except LetLiveOrderInvalidException as e:\n        error = OrderResultError(\n            error=e.message,\n            order=self,\n            raw=e.raw,\n        )\n        logger.error(\"Place order %s\", str(error))\n        self.exchange.on_notify(error=error)\n        return error\n</code></pre>"},{"location":"reference/exchange/ccxt/trade/#lettrade.exchange.ccxt.trade.CCXTOrder.update","title":"update","text":"<pre><code>update(\n    limit_price: float | None = None,\n    stop_price: float | None = None,\n    sl: float | None = None,\n    tp: float | None = None,\n    caller: float | None = None,\n    **kwargs\n) -&gt; OrderResult\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>limit_price</code>               (<code>float | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>stop_price</code>               (<code>float | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>sl</code>               (<code>float | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>tp</code>               (<code>float | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>caller</code>               (<code>float | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>OrderResult</code> (              <code>OrderResult</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/ccxt/trade.py</code> <pre><code>def update(\n    self,\n    limit_price: float | None = None,\n    stop_price: float | None = None,\n    sl: float | None = None,\n    tp: float | None = None,\n    caller: float | None = None,\n    **kwargs,\n) -&gt; OrderResult:\n    \"\"\"_summary_\n\n    Args:\n        limit_price (float | None, optional): _description_. Defaults to None.\n        stop_price (float | None, optional): _description_. Defaults to None.\n        sl (float | None, optional): _description_. Defaults to None.\n        tp (float | None, optional): _description_. Defaults to None.\n        caller (float | None, optional): _description_. Defaults to None.\n\n    Raises:\n        RuntimeError: _description_\n\n    Returns:\n        OrderResult: _description_\n    \"\"\"\n    if caller is self:\n        raise RuntimeError(f\"Order recusive update {self}\")\n\n    if self.parent is None:\n        result = self._api.order_update(\n            order=self,\n            limit_price=limit_price,\n            stop_price=stop_price,\n            sl=sl,\n            tp=tp,\n            **kwargs,\n        )\n        return super(LiveOrder, self).update(\n            limit_price=result.limit_price,\n            stop_price=result.stop_price,\n            sl=result.sl,\n            tp=result.tp,\n        )\n    else:\n        # SL/TP Order just a virtual order\n        if caller is not self.parent:\n            if self.is_sl_order:\n                self.parent.update(sl=stop_price, caller=self)\n            elif self.is_tp_order:\n                self.parent.update(tp=limit_price, caller=self)\n            else:\n                raise RuntimeError(f\"Abandon order {self}\")\n\n        return super(LiveOrder, self).update(\n            limit_price=limit_price,\n            stop_price=stop_price,\n        )\n</code></pre>"},{"location":"reference/exchange/ccxt/trade/#lettrade.exchange.ccxt.trade.CCXTPosition","title":"CCXTPosition","text":"<pre><code>CCXTPosition(\n    id: str,\n    exchange: LiveExchange,\n    data: LiveDataFeed,\n    size: float,\n    parent: Order,\n    tag: str | None = None,\n    state: PositionState = PositionState.Open,\n    entry_price: float | None = None,\n    entry_fee: float = 0.0,\n    entry_at: int | None = None,\n    sl_order: Order | None = None,\n    tp_order: Order | None = None,\n    api: LiveAPI | None = None,\n    raw: object | None = None,\n    **kwargs\n)\n</code></pre> <p>               Bases: <code>LivePosition</code></p> <p>Position for CCXT</p> Source code in <code>lettrade/exchange/live/trade.py</code> <pre><code>def __init__(\n    self,\n    id: str,\n    exchange: \"LiveExchange\",\n    data: \"LiveDataFeed\",\n    size: float,\n    parent: Order,\n    tag: str | None = None,\n    state: PositionState = PositionState.Open,\n    entry_price: float | None = None,\n    entry_fee: float = 0.0,\n    entry_at: int | None = None,\n    sl_order: Order | None = None,\n    tp_order: Order | None = None,\n    api: LiveAPI | None = None,\n    raw: object | None = None,\n    **kwargs,\n):\n    super().__init__(\n        id=id,\n        exchange=exchange,\n        data=data,\n        size=size,\n        parent=parent,\n        tag=tag,\n        state=state,\n        entry_price=entry_price,\n        entry_fee=entry_fee,\n        entry_at=entry_at,\n        sl_order=sl_order,\n        tp_order=tp_order,\n        api=api,\n        raw=raw,\n        **kwargs,\n    )\n</code></pre>"},{"location":"reference/exchange/ccxt/trade/#lettrade.exchange.ccxt.trade.CCXTPosition.fee","title":"fee  <code>property</code>","text":"<pre><code>fee: float\n</code></pre> <p>Fee/Estimate Fee for trade</p> <p>Returns:</p> <ul> <li> <code>float</code> (              <code>float</code> )          \u2013            <p>Fee</p> </li> </ul>"},{"location":"reference/exchange/ccxt/trade/#lettrade.exchange.ccxt.trade.CCXTPosition.is_exited","title":"is_exited  <code>property</code>","text":"<pre><code>is_exited: bool\n</code></pre> <p>Flag to check Position state.</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True if the trade exited</p> </li> </ul>"},{"location":"reference/exchange/ccxt/trade/#lettrade.exchange.ccxt.trade.CCXTPosition.is_long","title":"is_long  <code>property</code>","text":"<pre><code>is_long: bool\n</code></pre> <p>True if side is long (size is positive).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True/False</p> </li> </ul>"},{"location":"reference/exchange/ccxt/trade/#lettrade.exchange.ccxt.trade.CCXTPosition.is_opening","title":"is_opening  <code>property</code>","text":"<pre><code>is_opening: bool\n</code></pre> <p>Flag to check Position state.</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True if the trade opening</p> </li> </ul>"},{"location":"reference/exchange/ccxt/trade/#lettrade.exchange.ccxt.trade.CCXTPosition.is_short","title":"is_short  <code>property</code>","text":"<pre><code>is_short: bool\n</code></pre> <p>True if side is short (size is negative).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/ccxt/trade/#lettrade.exchange.ccxt.trade.CCXTPosition.pl","title":"pl  <code>property</code>","text":"<pre><code>pl: float\n</code></pre> <p>Estimate Profit or Loss of Position</p> <p>Returns:</p> <ul> <li> <code>float</code> (              <code>float</code> )          \u2013            <p>PnL</p> </li> </ul>"},{"location":"reference/exchange/ccxt/trade/#lettrade.exchange.ccxt.trade.CCXTPosition.side","title":"side  <code>property</code>","text":"<pre><code>side: TradeSide\n</code></pre> <p>True if side is short (size is negative).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>TradeSide</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/ccxt/trade/#lettrade.exchange.ccxt.trade.CCXTPosition.exit","title":"exit","text":"<pre><code>exit() -&gt; PositionResult\n</code></pre> <p>summary</p> <p>Returns:</p> <ul> <li> <code>PositionResult</code> (              <code>PositionResult</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/ccxt/trade.py</code> <pre><code>def exit(self) -&gt; PositionResult:\n    \"\"\"_summary_\n\n    Returns:\n        PositionResult: _description_\n    \"\"\"\n    result = self._api.position_close(position=self)\n    if result.code != 0:\n        logger.error(\"Update position %s\", str(result))\n        error = PositionResultError(\n            error=result.error,\n            code=result.code,\n            position=self,\n            raw=result,\n        )\n        self.exchange.on_notify(error=error)\n        return error\n\n    execution_raw = self._api.execution_get(id=result.execution_id)\n\n    # TODO: execution object and event\n    result.execution_raw = execution_raw\n\n    return super(LivePosition, self).exit(\n        price=result.price,\n        at=pd.to_datetime(execution_raw.time_msc, unit=\"ms\", utc=True),\n        pl=execution_raw.profit,\n        fee=execution_raw.fee + execution_raw.swap + execution_raw.commission,\n        raw=result,\n    )\n</code></pre>"},{"location":"reference/exchange/ccxt/trade/#lettrade.exchange.ccxt.trade.CCXTPosition.from_raw","title":"from_raw  <code>classmethod</code>","text":"<pre><code>from_raw(\n    raw,\n    exchange: LiveExchange,\n    state: PositionState = PositionState.Open,\n    data: LiveDataFeed = None,\n    api: CCXTAPI = None,\n) -&gt; CCXTPosition\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>raw</code>               (<code>_type_</code>)           \u2013            <p>description</p> </li> <li> <code>exchange</code>               (<code>LiveExchange</code>)           \u2013            <p>description</p> </li> <li> <code>data</code>               (<code>LiveDataFeed</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>api</code>               (<code>CCXTAPI</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>NotImplementedError</code>             \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>CCXTPosition</code> (              <code>CCXTPosition</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/ccxt/trade.py</code> <pre><code>@classmethod\ndef from_raw(\n    cls,\n    raw,\n    exchange: \"LiveExchange\",\n    state: PositionState = PositionState.Open,\n    data: \"LiveDataFeed\" = None,\n    api: CCXTAPI = None,\n) -&gt; \"CCXTPosition\":\n    \"\"\"_summary_\n\n    Args:\n        raw (_type_): _description_\n        exchange (LiveExchange): _description_\n        data (LiveDataFeed, optional): _description_. Defaults to None.\n        api (CCXTAPI, optional): _description_. Defaults to None.\n\n    Raises:\n        NotImplementedError: _description_\n\n    Returns:\n        CCXTPosition: _description_\n    \"\"\"\n    # DataFeed\n    if data is None:\n        for d in exchange.datas:\n            if d.symbol == raw.symbol:\n                data = d\n                break\n        if data is None:\n            logger.warning(\"Raw position %s is not handling %s\", raw.symbol, raw)\n            return\n\n    # Side\n    match raw.type:\n        case MT5.POSITION_TYPE_BUY:\n            side = TradeSide.Buy\n        case MT5.POSITION_TYPE_SELL:\n            side = TradeSide.Sell\n        case _:\n            raise NotImplementedError(\n                f\"Position type {raw.type} is not implement\",\n                raw,\n            )\n\n    position = cls(\n        exchange=exchange,\n        id=raw.ticket,\n        data=data,\n        state=state,\n        size=side * raw.volume,\n        entry_price=raw.price_open,\n        entry_fee=raw.swap,\n        entry_at=pd.to_datetime(raw.time_msc, unit=\"ms\", utc=True),\n        parent=None,\n        tag=raw.comment,\n        api=api,\n        raw=raw,\n    )\n\n    # SL\n    if raw.sl &gt; 0.0:\n        position.sl_order = exchange._order_cls.from_position(\n            position=position, sl=raw.sl\n        )\n        exchange.on_order(position.sl_order)\n\n    # TP\n    if raw.tp &gt; 0.0:\n        position.tp_order = exchange._order_cls.from_position(\n            position=position, tp=raw.tp\n        )\n        exchange.on_order(position.tp_order)\n\n    return position\n</code></pre>"},{"location":"reference/exchange/ccxt/trade/#lettrade.exchange.ccxt.trade.CCXTPosition.merge","title":"merge","text":"<pre><code>merge(other: LivePosition) -&gt; bool\n</code></pre> <p>Merge LivePosition from another</p> <p>Parameters:</p> <ul> <li> <code>other</code>               (<code>LivePosition</code>)           \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/live/trade.py</code> <pre><code>def merge(self, other: \"LivePosition\") -&gt; bool:\n    \"\"\"Merge LivePosition from another\n\n    Args:\n        other (LivePosition): _description_\n\n    Returns:\n        bool: _description_\n    \"\"\"\n    if not super().merge(other):\n        return False\n    self.raw = other.raw\n    return True\n</code></pre>"},{"location":"reference/exchange/ccxt/trade/#lettrade.exchange.ccxt.trade.CCXTPosition.update","title":"update","text":"<pre><code>update(\n    sl: float | None = None,\n    tp: float | None = None,\n    caller: float | None = None,\n    **kwargs\n) -&gt; PositionResult\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>sl</code>               (<code>float | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>tp</code>               (<code>float | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>caller</code>               (<code>float | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>PositionResult</code> (              <code>PositionResult</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/ccxt/trade.py</code> <pre><code>def update(\n    self,\n    sl: float | None = None,\n    tp: float | None = None,\n    caller: float | None = None,\n    **kwargs,\n) -&gt; PositionResult:\n    \"\"\"_summary_\n\n    Args:\n        sl (float | None, optional): _description_. Defaults to None.\n        tp (float | None, optional): _description_. Defaults to None.\n        caller (float | None, optional): _description_. Defaults to None.\n\n    Raises:\n        RuntimeError: _description_\n\n    Returns:\n        PositionResult: _description_\n    \"\"\"\n    if not sl and not tp:\n        raise RuntimeError(\"Update sl=None and tp=None\")\n    if caller is self:\n        raise RuntimeError(f\"Position recusive update {self}\")\n\n    result = self._api.position_update(position=self, sl=sl, tp=tp)\n    if result.code != 0:\n        logger.error(\"Update position %s\", str(result))\n        error = PositionResultError(\n            error=result.error,\n            code=result.code,\n            position=self,\n            raw=result,\n        )\n        self.exchange.on_notify(error=error)\n        return error\n\n    if sl is not None:\n        if self.sl_order:\n            if caller is not self.sl_order:\n                self.sl_order.update(stop_price=sl, caller=self)\n        else:\n            self.sl_order = self.exchange._order_cls.from_position(\n                position=self, sl=sl\n            )\n\n    if tp is not None:\n        if self.tp_order:\n            if caller is not self.tp_order:\n                self.tp_order.update(limit_price=tp, caller=self)\n        else:\n            self.tp_order = self.exchange._order_cls.from_position(\n                position=self, tp=tp\n            )\n\n    return super(LivePosition, self).update(raw=result)\n</code></pre>"},{"location":"reference/exchange/live/","title":"Index","text":""},{"location":"reference/exchange/live/#lettrade.exchange.live","title":"live","text":"<p>Live trading base classes</p>"},{"location":"reference/exchange/live/account/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> account","text":""},{"location":"reference/exchange/live/account/#lettrade.exchange.live.account","title":"account","text":""},{"location":"reference/exchange/live/account/#lettrade.exchange.live.account.LiveAccount","title":"LiveAccount","text":"<pre><code>LiveAccount(api: LiveAPI, **kwargs)\n</code></pre> <p>               Bases: <code>Account</code></p> <p>Parameters:</p> <ul> <li> <code>api</code>               (<code>LiveAPI</code>)           \u2013            <p>description</p> </li> <li> <code>**kwargs</code>               (<code>dict</code>, default:                   <code>{}</code> )           \u2013            <p>Mirror of lettrade.account.Account().</p> </li> </ul> Source code in <code>lettrade/exchange/live/account.py</code> <pre><code>def __init__(self, api: LiveAPI, **kwargs) -&gt; None:\n    \"\"\"Account for live trading\n\n    Args:\n        api (LiveAPI): _description_\n        **kwargs (dict, optional): Mirror of [lettrade.account.Account()](site:/reference/account/account/#lettrade.account.account.Account).\n    \"\"\"\n    super().__init__(**kwargs)\n    self._api = api\n\n    self._balance = 0.0\n    self._equity = 0.0\n</code></pre>"},{"location":"reference/exchange/live/account/#lettrade.exchange.live.account.LiveAccount.balance","title":"balance  <code>property</code>","text":"<pre><code>balance: float\n</code></pre> <p>Balance of account</p> <p>Returns:</p> <ul> <li> <code>float</code> (              <code>float</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/live/account/#lettrade.exchange.live.account.LiveAccount.account_refresh","title":"account_refresh","text":"<pre><code>account_refresh()\n</code></pre> <p>Refresh account balance</p> Source code in <code>lettrade/exchange/live/account.py</code> <pre><code>def account_refresh(self):\n    \"\"\"Refresh account balance\"\"\"\n    self._account = self._api.account()\n\n    if __debug__:\n        logger.debug(\"Account: %s\", str(self._account))\n\n    self._balance = self._account.balance\n    self._equity = self._account.equity\n</code></pre>"},{"location":"reference/exchange/live/account/#lettrade.exchange.live.account.LiveAccount.next","title":"next","text":"<pre><code>next()\n</code></pre> <p>Next account</p> Source code in <code>lettrade/account/account.py</code> <pre><code>def next(self):\n    \"\"\"Next account\"\"\"\n</code></pre>"},{"location":"reference/exchange/live/account/#lettrade.exchange.live.account.LiveAccount.next_next","title":"next_next","text":"<pre><code>next_next()\n</code></pre> <p>Call after strategy.next()</p> Source code in <code>lettrade/account/account.py</code> <pre><code>def next_next(self):\n    \"\"\"Call after strategy.next()\"\"\"\n    self._equity_snapshot()\n</code></pre>"},{"location":"reference/exchange/live/account/#lettrade.exchange.live.account.LiveAccount.risk","title":"risk","text":"<pre><code>risk(side: TradeSide, size: float, **kwargs) -&gt; float\n</code></pre> <p>Risk calculation</p> Source code in <code>lettrade/account/account.py</code> <pre><code>def risk(self, side: \"TradeSide\", size: float, **kwargs) -&gt; float:\n    \"\"\"Risk calculation\"\"\"\n    if size is None:\n        return side * abs(self._risk)\n    return side * abs(size)\n</code></pre>"},{"location":"reference/exchange/live/account/#lettrade.exchange.live.account.LiveAccount.start","title":"start","text":"<pre><code>start()\n</code></pre> <p>Start live account by load account info from API</p> Source code in <code>lettrade/exchange/live/account.py</code> <pre><code>def start(self):\n    \"\"\"Start live account by load account info from API\"\"\"\n    self.account_refresh()\n    self._margin = self._account.margin\n    self._leverage = self._account.leverage\n</code></pre>"},{"location":"reference/exchange/live/account/#lettrade.exchange.live.account.LiveAccount.stop","title":"stop","text":"<pre><code>stop()\n</code></pre> <p>Stop account</p> Source code in <code>lettrade/account/account.py</code> <pre><code>def stop(self):\n    \"\"\"Stop account\"\"\"\n    try:\n        self._equity_snapshot()\n    except LetAccountInsufficientException:\n        pass\n</code></pre>"},{"location":"reference/exchange/live/api/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> api","text":""},{"location":"reference/exchange/live/api/#lettrade.exchange.live.api","title":"api","text":""},{"location":"reference/exchange/live/api/#lettrade.exchange.live.api.LiveAPI","title":"LiveAPI","text":"<pre><code>LiveAPI(**kwargs)\n</code></pre> <p>               Bases: <code>ABC</code></p> Source code in <code>lettrade/exchange/live/api.py</code> <pre><code>def __init__(self, **kwargs):\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/live/api/#lettrade.exchange.live.api.LiveAPI.account","title":"account  <code>abstractmethod</code>","text":"<pre><code>account() -&gt; dict\n</code></pre> Source code in <code>lettrade/exchange/live/api.py</code> <pre><code>@abstractmethod\ndef account(self) -&gt; dict:\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/live/api/#lettrade.exchange.live.api.LiveAPI.bars","title":"bars  <code>abstractmethod</code>","text":"<pre><code>bars(\n    symbol,\n    timeframe,\n    since: int | datetime | None = 0,\n    to: int | datetime | None = 1000,\n) -&gt; list[list]\n</code></pre> Source code in <code>lettrade/exchange/live/api.py</code> <pre><code>@abstractmethod\ndef bars(\n    self,\n    symbol,\n    timeframe,\n    since: int | datetime | None = 0,\n    to: int | datetime | None = 1_000,\n) -&gt; list[list]:\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/live/api/#lettrade.exchange.live.api.LiveAPI.execution_get","title":"execution_get  <code>abstractmethod</code>","text":"<pre><code>execution_get(id: str, **kwargs) -&gt; dict\n</code></pre> Source code in <code>lettrade/exchange/live/api.py</code> <pre><code>@abstractmethod\ndef execution_get(self, id: str, **kwargs) -&gt; dict:\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/live/api/#lettrade.exchange.live.api.LiveAPI.executions_get","title":"executions_get  <code>abstractmethod</code>","text":"<pre><code>executions_get(\n    position_id: str | None = None,\n    search: str | None = None,\n    **kwargs\n) -&gt; list[dict]\n</code></pre> Source code in <code>lettrade/exchange/live/api.py</code> <pre><code>@abstractmethod\ndef executions_get(\n    self,\n    position_id: str | None = None,\n    search: str | None = None,\n    **kwargs,\n) -&gt; list[dict]:\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/live/api/#lettrade.exchange.live.api.LiveAPI.executions_total","title":"executions_total  <code>abstractmethod</code>","text":"<pre><code>executions_total(\n    since: datetime | None = None,\n    to: datetime | None = None,\n    **kwargs\n) -&gt; int\n</code></pre> Source code in <code>lettrade/exchange/live/api.py</code> <pre><code>@abstractmethod\ndef executions_total(\n    self,\n    since: datetime | None = None,\n    to: datetime | None = None,\n    **kwargs,\n) -&gt; int:\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/live/api/#lettrade.exchange.live.api.LiveAPI.heartbeat","title":"heartbeat","text":"<pre><code>heartbeat() -&gt; bool\n</code></pre> Source code in <code>lettrade/exchange/live/api.py</code> <pre><code>def heartbeat(self) -&gt; bool:\n    \"\"\"\"\"\"\n    return True\n</code></pre>"},{"location":"reference/exchange/live/api/#lettrade.exchange.live.api.LiveAPI.init","title":"init","text":"<pre><code>init(**kwargs)\n</code></pre> Source code in <code>lettrade/exchange/live/api.py</code> <pre><code>def init(self, **kwargs):\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/live/api/#lettrade.exchange.live.api.LiveAPI.market","title":"market  <code>abstractmethod</code>","text":"<pre><code>market(symbol: str) -&gt; dict\n</code></pre> Source code in <code>lettrade/exchange/live/api.py</code> <pre><code>@abstractmethod\ndef market(self, symbol: str) -&gt; dict:\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/live/api/#lettrade.exchange.live.api.LiveAPI.markets","title":"markets  <code>abstractmethod</code>","text":"<pre><code>markets(symbols: list[str]) -&gt; dict\n</code></pre> Source code in <code>lettrade/exchange/live/api.py</code> <pre><code>@abstractmethod\ndef markets(self, symbols: list[str]) -&gt; dict:\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/live/api/#lettrade.exchange.live.api.LiveAPI.multiprocess","title":"multiprocess  <code>classmethod</code>","text":"<pre><code>multiprocess(kwargs: dict, **other_kwargs)\n</code></pre> Source code in <code>lettrade/exchange/live/api.py</code> <pre><code>@classmethod\ndef multiprocess(cls, kwargs: dict, **other_kwargs):\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/live/api/#lettrade.exchange.live.api.LiveAPI.next","title":"next","text":"<pre><code>next()\n</code></pre> Source code in <code>lettrade/exchange/live/api.py</code> <pre><code>def next(self):\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/live/api/#lettrade.exchange.live.api.LiveAPI.order_close","title":"order_close  <code>abstractmethod</code>","text":"<pre><code>order_close(order: LiveOrder, **kwargs) -&gt; dict\n</code></pre> Source code in <code>lettrade/exchange/live/api.py</code> <pre><code>@abstractmethod\ndef order_close(self, order: \"LiveOrder\", **kwargs) -&gt; dict:\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/live/api/#lettrade.exchange.live.api.LiveAPI.order_open","title":"order_open  <code>abstractmethod</code>","text":"<pre><code>order_open(**kwargs) -&gt; dict\n</code></pre> Source code in <code>lettrade/exchange/live/api.py</code> <pre><code>@abstractmethod\ndef order_open(self, **kwargs) -&gt; dict:\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/live/api/#lettrade.exchange.live.api.LiveAPI.order_update","title":"order_update  <code>abstractmethod</code>","text":"<pre><code>order_update(\n    order: LiveOrder, sl=None, tp=None, **kwargs\n) -&gt; dict\n</code></pre> Source code in <code>lettrade/exchange/live/api.py</code> <pre><code>@abstractmethod\ndef order_update(self, order: \"LiveOrder\", sl=None, tp=None, **kwargs) -&gt; dict:\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/live/api/#lettrade.exchange.live.api.LiveAPI.orders_get","title":"orders_get  <code>abstractmethod</code>","text":"<pre><code>orders_get(\n    id: str | None = None,\n    symbol: str | None = None,\n    **kwargs\n)\n</code></pre> Source code in <code>lettrade/exchange/live/api.py</code> <pre><code>@abstractmethod\ndef orders_get(\n    self,\n    id: str | None = None,\n    symbol: str | None = None,\n    **kwargs,\n):\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/live/api/#lettrade.exchange.live.api.LiveAPI.orders_history_get","title":"orders_history_get","text":"<pre><code>orders_history_get(\n    id: str | None = None,\n    since: datetime | None = None,\n    to: datetime | None = None,\n    **kwargs\n) -&gt; list[dict]\n</code></pre> Source code in <code>lettrade/exchange/live/api.py</code> <pre><code>def orders_history_get(\n    self,\n    id: str | None = None,\n    since: datetime | None = None,\n    to: datetime | None = None,\n    **kwargs,\n) -&gt; list[dict]:\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/live/api/#lettrade.exchange.live.api.LiveAPI.orders_total","title":"orders_total  <code>abstractmethod</code>","text":"<pre><code>orders_total(\n    since: datetime | None = None,\n    to: datetime | None = None,\n    **kwargs\n) -&gt; int\n</code></pre> Source code in <code>lettrade/exchange/live/api.py</code> <pre><code>@abstractmethod\ndef orders_total(\n    self,\n    since: datetime | None = None,\n    to: datetime | None = None,\n    **kwargs,\n) -&gt; int:\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/live/api/#lettrade.exchange.live.api.LiveAPI.position_close","title":"position_close  <code>abstractmethod</code>","text":"<pre><code>position_close(position: LivePosition, **kwargs) -&gt; dict\n</code></pre> Source code in <code>lettrade/exchange/live/api.py</code> <pre><code>@abstractmethod\ndef position_close(self, position: \"LivePosition\", **kwargs) -&gt; dict:\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/live/api/#lettrade.exchange.live.api.LiveAPI.position_update","title":"position_update  <code>abstractmethod</code>","text":"<pre><code>position_update(\n    position: LivePosition,\n    sl: float | None = None,\n    tp: float | None = None,\n    **kwargs\n) -&gt; dict\n</code></pre> Source code in <code>lettrade/exchange/live/api.py</code> <pre><code>@abstractmethod\ndef position_update(\n    self,\n    position: \"LivePosition\",\n    sl: float | None = None,\n    tp: float | None = None,\n    **kwargs,\n) -&gt; dict:\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/live/api/#lettrade.exchange.live.api.LiveAPI.positions_get","title":"positions_get  <code>abstractmethod</code>","text":"<pre><code>positions_get(\n    id: str = None, symbol: str = None, **kwargs\n) -&gt; list[dict]\n</code></pre> Source code in <code>lettrade/exchange/live/api.py</code> <pre><code>@abstractmethod\ndef positions_get(self, id: str = None, symbol: str = None, **kwargs) -&gt; list[dict]:\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/live/api/#lettrade.exchange.live.api.LiveAPI.positions_total","title":"positions_total  <code>abstractmethod</code>","text":"<pre><code>positions_total(\n    since: datetime | None = None,\n    to: datetime | None = None,\n    **kwargs\n) -&gt; int\n</code></pre> Source code in <code>lettrade/exchange/live/api.py</code> <pre><code>@abstractmethod\ndef positions_total(\n    self,\n    since: datetime | None = None,\n    to: datetime | None = None,\n    **kwargs,\n) -&gt; int:\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/live/api/#lettrade.exchange.live.api.LiveAPI.start","title":"start","text":"<pre><code>start(exchange: LiveExchange)\n</code></pre> Source code in <code>lettrade/exchange/live/api.py</code> <pre><code>def start(self, exchange: \"LiveExchange\"):\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/live/api/#lettrade.exchange.live.api.LiveAPI.stop","title":"stop","text":"<pre><code>stop()\n</code></pre> Source code in <code>lettrade/exchange/live/api.py</code> <pre><code>def stop(self):\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/live/api/#lettrade.exchange.live.api.LiveAPI.tick_get","title":"tick_get  <code>abstractmethod</code>","text":"<pre><code>tick_get(symbol: str) -&gt; dict\n</code></pre> Source code in <code>lettrade/exchange/live/api.py</code> <pre><code>@abstractmethod\ndef tick_get(self, symbol: str) -&gt; dict:\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/live/data/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> data","text":""},{"location":"reference/exchange/live/data/#lettrade.exchange.live.data","title":"data","text":""},{"location":"reference/exchange/live/data/#lettrade.exchange.live.data.LiveDataFeed","title":"LiveDataFeed","text":"<pre><code>LiveDataFeed(\n    symbol: str,\n    timeframe: str | int | Timedelta,\n    name: str | None = None,\n    api: LiveAPI | None = None,\n    columns: list[str] | None = None,\n    **kwargs\n)\n</code></pre> <p>               Bases: <code>DataFeed</code></p> <p>Live trading DataFeed</p> <p>Parameters:</p> <ul> <li> <code>symbol</code>               (<code>str</code>)           \u2013            <p>Symbol of DataFeed</p> </li> <li> <code>timeframe</code>               (<code>str | int | Timedelta</code>)           \u2013            <p>TimeFrame of DataFeed</p> </li> <li> <code>name</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>Name of DataFeed, auto generate <code>{symbol}_{timeframe}</code> if none. Defaults to None.</p> </li> <li> <code>api</code>               (<code>LiveAPI | None</code>, default:                   <code>None</code> )           \u2013            <p>Live trading API. Defaults to None.</p> </li> <li> <code>columns</code>               (<code>list[str] | None</code>, default:                   <code>None</code> )           \u2013            <p>List of DataFeed columns. Defaults to None.</p> </li> </ul> Source code in <code>lettrade/exchange/live/data.py</code> <pre><code>def __init__(\n    self,\n    symbol: str,\n    timeframe: str | int | pd.Timedelta,\n    name: str | None = None,\n    api: LiveAPI | None = None,\n    columns: list[str] | None = None,\n    **kwargs,\n) -&gt; None:\n    \"\"\"_summary_\n\n    Args:\n        symbol (str): Symbol of DataFeed\n        timeframe (str | int | pd.Timedelta): TimeFrame of DataFeed\n        name (str | None, optional): Name of DataFeed, auto generate `{symbol}_{timeframe}` if none. Defaults to None.\n        api (LiveAPI | None, optional): Live trading API. Defaults to None.\n        columns (list[str] | None, optional): List of DataFeed columns. Defaults to None.\n    \"\"\"\n    super().__init__(\n        name=name or f\"{symbol}_{timeframe}\",\n        timeframe=timeframe,\n        columns=columns or [\"open\", \"high\", \"low\", \"close\", \"volume\"],\n        **kwargs,\n    )\n\n    self.meta.update(symbol=symbol, base_columns=self.columns.copy())\n\n    if api is not None:\n        self._api = api\n</code></pre>"},{"location":"reference/exchange/live/data/#lettrade.exchange.live.data.LiveDataFeed.i","title":"i  <code>property</code>","text":"<pre><code>i: indicator\n</code></pre> <p>Alias to <code>lettrade.indicator</code> and using in DataFeed by call: <code>DataFeed.i.indicator_name()</code></p>"},{"location":"reference/exchange/live/data/#lettrade.exchange.live.data.LiveDataFeed.is_main","title":"is_main  <code>property</code>","text":"<pre><code>is_main: bool\n</code></pre> <p>Property to check DataFeed is main DataFeed or not</p>"},{"location":"reference/exchange/live/data/#lettrade.exchange.live.data.LiveDataFeed.l","title":"l  <code>instance-attribute</code>","text":"<pre><code>l: LetDataFeedWrapper\n</code></pre> <p>LetTrade DataFeed wrapper using to manage index pointer of DataFeed</p>"},{"location":"reference/exchange/live/data/#lettrade.exchange.live.data.LiveDataFeed.meta","title":"meta  <code>property</code>","text":"<pre><code>meta: dict\n</code></pre> <p>Property to get metadata of DataFeed</p>"},{"location":"reference/exchange/live/data/#lettrade.exchange.live.data.LiveDataFeed.name","title":"name  <code>property</code>","text":"<pre><code>name: str\n</code></pre> <p>Property to get name of DataFeed</p>"},{"location":"reference/exchange/live/data/#lettrade.exchange.live.data.LiveDataFeed.now","title":"now  <code>property</code>","text":"<pre><code>now: Timestamp\n</code></pre> <p>Property to get current index value of DataFeed</p>"},{"location":"reference/exchange/live/data/#lettrade.exchange.live.data.LiveDataFeed.symbol","title":"symbol  <code>property</code>","text":"<pre><code>symbol: str\n</code></pre> <p>Property to get symbol of DataFeed</p>"},{"location":"reference/exchange/live/data/#lettrade.exchange.live.data.LiveDataFeed.timeframe","title":"timeframe  <code>property</code>","text":"<pre><code>timeframe: TimeFrame\n</code></pre> <p>Property to get timeframe of DataFeed</p>"},{"location":"reference/exchange/live/data/#lettrade.exchange.live.data.LiveDataFeed.bar","title":"bar","text":"<pre><code>bar(i: int = 0) -&gt; Timestamp\n</code></pre> <p>Get current pd.Timestamp value of DataFeed</p> <p>Parameters:</p> <ul> <li> <code>i</code>               (<code>int</code>, default:                   <code>0</code> )           \u2013            <p>Index. Defaults to 0.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Timestamp</code>           \u2013            <p>pd.Timestamp: description</p> </li> </ul> Source code in <code>lettrade/data/data.py</code> <pre><code>def bar(self, i: int = 0) -&gt; pd.Timestamp:\n    \"\"\"Get current pd.Timestamp value of DataFeed\n\n    Args:\n        i (int, optional): Index. Defaults to 0.\n\n    Returns:\n        pd.Timestamp: _description_\n    \"\"\"\n    return self.l.index[i]\n</code></pre>"},{"location":"reference/exchange/live/data/#lettrade.exchange.live.data.LiveDataFeed.bars","title":"bars","text":"<pre><code>bars(\n    since: int | str | Timestamp, to: int | str | Timestamp\n) -&gt; list\n</code></pre> <p>Get bars from LiveAPI</p> <p>Parameters:</p> <ul> <li> <code>since</code>               (<code>int | str | Timestamp</code>)           \u2013            <p>description</p> </li> <li> <code>to</code>               (<code>int | str | Timestamp</code>)           \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list</code> (              <code>list</code> )          \u2013            <p>list of bar</p> </li> </ul> Source code in <code>lettrade/exchange/live/data.py</code> <pre><code>def bars(\n    self,\n    since: int | str | pd.Timestamp,\n    to: int | str | pd.Timestamp,\n) -&gt; list:\n    \"\"\"Get bars from LiveAPI\n\n    Args:\n        since (int | str | pd.Timestamp): _description_\n        to (int | str | pd.Timestamp): _description_\n\n    Returns:\n        list: list of bar\n    \"\"\"\n    return self._api.bars(\n        symbol=self.symbol,\n        timeframe=self.timeframe.string,\n        since=since,\n        to=to,\n    )\n</code></pre>"},{"location":"reference/exchange/live/data/#lettrade.exchange.live.data.LiveDataFeed.bars_load","title":"bars_load","text":"<pre><code>bars_load(\n    since: int | str | Timestamp, to: int | str | Timestamp\n) -&gt; bool\n</code></pre> <p>Get bar from API and push to DataFeed</p> <p>Parameters:</p> <ul> <li> <code>since</code>               (<code>int | str | Timestamp</code>)           \u2013            <p>description</p> </li> <li> <code>to</code>               (<code>int | str | Timestamp</code>)           \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True if has data, False if no data</p> </li> </ul> Source code in <code>lettrade/exchange/live/data.py</code> <pre><code>def bars_load(\n    self,\n    since: int | str | pd.Timestamp,\n    to: int | str | pd.Timestamp,\n) -&gt; bool:\n    \"\"\"Get bar from API and push to DataFeed\n\n    Args:\n        since (int | str | pd.Timestamp): _description_\n        to (int | str | pd.Timestamp): _description_\n\n    Returns:\n        bool: True if has data, False if no data\n    \"\"\"\n    bars = self.bars(since=since, to=to)\n\n    if bars is None or len(bars) == 0:\n        logger.warning(\"No bars data for %s\", self.name)\n        return False\n\n    self.push(bars, unit=self._bar_datetime_unit)\n    return True\n</code></pre>"},{"location":"reference/exchange/live/data/#lettrade.exchange.live.data.LiveDataFeed.drop","title":"drop","text":"<pre><code>drop(\n    *args,\n    since: int | str | Timestamp | None = None,\n    to: int | str | Timestamp | None = None,\n    **kwargs\n) -&gt; None\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>since</code>               (<code>int | str | Timestamp | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>to</code>               (<code>int | str | Timestamp | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>description</p> </li> <li> <code>RuntimeError</code>             \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/data/data.py</code> <pre><code>def drop(\n    self,\n    *args,\n    since: int | str | pd.Timestamp | None = None,\n    to: int | str | pd.Timestamp | None = None,\n    **kwargs,\n) -&gt; None:\n    \"\"\"_summary_\n\n    Args:\n        since (int | str | pd.Timestamp | None, optional): _description_. Defaults to None.\n        to (int | str | pd.Timestamp | None, optional): _description_. Defaults to None.\n\n    Raises:\n        RuntimeError: _description_\n        RuntimeError: _description_\n    \"\"\"\n    if since is None and to is None:\n        super().drop(*args, **kwargs)\n        return\n\n    condiction = None\n\n    # Since\n    if since is not None:\n        if isinstance(since, int):\n            loc = self.l.index[since]\n        elif isinstance(since, str):\n            loc = pd.to_datetime(since, utc=True)\n        elif isinstance(since, pd.Timestamp):\n            loc = since\n        else:\n            raise RuntimeError(f\"DataFeed.drop since {since} is invalid\")\n        condiction = self.index &lt; loc\n\n    # To\n    if to is not None:\n        if isinstance(to, int):\n            loc = self.l.index[to]\n        elif isinstance(to, str):\n            loc = pd.to_datetime(to, utc=True)\n        elif isinstance(to, pd.Timestamp):\n            loc = to\n        else:\n            raise RuntimeError(f\"DataFeed.drop to {to} is invalid\")\n\n        if condiction is None:\n            condiction = self.index &gt; loc\n        else:\n            condiction = condiction | (self.index &gt; loc)\n\n    index = self[condiction].index\n    super().drop(index=index, inplace=True)\n    self.l.reset()\n\n    if __debug__:\n        logger.debug(\"BackTestDataFeed %s dropped %s rows\", self.name, len(index))\n</code></pre>"},{"location":"reference/exchange/live/data/#lettrade.exchange.live.data.LiveDataFeed.dump_csv","title":"dump_csv","text":"<pre><code>dump_csv(\n    path: str | None = None,\n    since: int | str | datetime | None = 0,\n    to: int | str | datetime | None = 1000,\n    **kwargs\n)\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>path</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>since</code>               (<code>int | str | datetime | None</code>, default:                   <code>0</code> )           \u2013            <p>description. Defaults to 0.</p> </li> <li> <code>to</code>               (<code>int | str | datetime | None</code>, default:                   <code>1000</code> )           \u2013            <p>description. Defaults to 1_000.</p> </li> </ul> Source code in <code>lettrade/exchange/live/data.py</code> <pre><code>def dump_csv(\n    self,\n    path: str | None = None,\n    since: int | str | datetime | None = 0,\n    to: int | str | datetime | None = 1_000,\n    **kwargs,\n):\n    \"\"\"_summary_\n\n    Args:\n        path (str | None, optional): _description_. Defaults to None.\n        since (int  |  str  |  datetime | None, optional): _description_. Defaults to 0.\n        to (int  |  str  |  datetime | None, optional): _description_. Defaults to 1_000.\n    \"\"\"\n    if self.empty:\n        if isinstance(since, str):\n            since = pd.to_datetime(since).to_pydatetime()\n        if isinstance(to, str):\n            to = pd.to_datetime(to).to_pydatetime()\n\n        self.bars_load(since=since, to=to)\n\n    if path is None:\n        path = f\"data/{self.name}-{since}_{to}.csv\"\n\n    from lettrade.data.extra.csv import csv_export\n\n    csv_export(dataframe=self, path=path, **kwargs)\n</code></pre>"},{"location":"reference/exchange/live/data/#lettrade.exchange.live.data.LiveDataFeed.instance","title":"instance  <code>classmethod</code>","text":"<pre><code>instance(\n    api: LiveAPI | None = None,\n    api_kwargs: dict | None = None,\n    **kwargs\n) -&gt; LiveDataFeed\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>api</code>               (<code>LiveAPI</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>api_kwargs</code>               (<code>dict</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>Missing api requirement</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>LiveDataFeed</code> (              <code>LiveDataFeed</code> )          \u2013            <p>DataFeed object</p> </li> </ul> Source code in <code>lettrade/exchange/live/data.py</code> <pre><code>@classmethod\ndef instance(\n    cls,\n    api: LiveAPI | None = None,\n    api_kwargs: dict | None = None,\n    **kwargs,\n) -&gt; \"LiveDataFeed\":\n    \"\"\"_summary_\n\n    Args:\n        api (LiveAPI, optional): _description_. Defaults to None.\n        api_kwargs (dict, optional): _description_. Defaults to None.\n\n    Raises:\n        RuntimeError: Missing api requirement\n\n    Returns:\n        LiveDataFeed: DataFeed object\n    \"\"\"\n    if api is None:\n        if api_kwargs is None:\n            raise RuntimeError(\"api or api_kwargs cannot missing\")\n        api = cls._api_cls(**api_kwargs)\n    obj = cls(api=api, **kwargs)\n    return obj\n</code></pre>"},{"location":"reference/exchange/live/data/#lettrade.exchange.live.data.LiveDataFeed.next","title":"next","text":"<pre><code>next(size=1, tick=0) -&gt; bool\n</code></pre> <p>Drop extra columns and load next DataFeed</p> <p>Parameters:</p> <ul> <li> <code>size</code>               (<code>int</code>, default:                   <code>1</code> )           \u2013            <p>description. Defaults to 1.</p> </li> <li> <code>tick</code>               (<code>int</code>, default:                   <code>0</code> )           \u2013            <p>description. Defaults to 0.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/live/data.py</code> <pre><code>def next(self, size=1, tick=0) -&gt; bool:\n    \"\"\"Drop extra columns and load next DataFeed\n\n    Args:\n        size (int, optional): _description_. Defaults to 1.\n        tick (int, optional): _description_. Defaults to 0.\n\n    Returns:\n        bool: _description_\n    \"\"\"\n    # Drop existed extra columns to skip reusing calculated data\n    self.drop(columns=self.columns.difference(self._base_columns), inplace=True)\n\n    self.bars_load(since=0, to=size + 1)\n    self.l.go_stop()\n    return True\n</code></pre>"},{"location":"reference/exchange/live/data/#lettrade.exchange.live.data.LiveDataFeed.push","title":"push","text":"<pre><code>push(\n    rows: list[list[int | float]],\n    unit: str | None = None,\n    utc: bool = True,\n    **kwargs\n)\n</code></pre> <p>Push new rows to DataFeed</p> <p>Parameters:</p> <ul> <li> <code>rows</code>               (<code>list[list[int | float]]</code>)           \u2013            <p>list of rows <code>[[\"timestamp\", \"open price\", \"high price\"...]]</code></p> </li> <li> <code>unit</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>pandas.Timestamp parsing unit. Defaults to None.</p> </li> <li> <code>utc</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>description. Defaults to True.</p> </li> </ul> Source code in <code>lettrade/data/data.py</code> <pre><code>def push(\n    self,\n    rows: list[list[int | float]],\n    unit: str | None = None,\n    utc: bool = True,\n    **kwargs,\n):\n    \"\"\"Push new rows to DataFeed\n\n    Args:\n        rows (list[list[int | float]]): list of rows `[[\"timestamp\", \"open price\", \"high price\"...]]`\n        unit (str | None, optional): pandas.Timestamp parsing unit. Defaults to None.\n        utc (bool, optional): _description_. Defaults to True.\n    \"\"\"\n    for row in rows:\n        dt = pd.to_datetime(row[0], unit=unit, utc=utc, **kwargs)\n        self.at[\n            dt,\n            (\n                \"open\",\n                \"high\",\n                \"low\",\n                \"close\",\n                \"volume\",\n            ),\n        ] = (\n            row[1],  # open\n            row[2],  # high\n            row[3],  # low\n            row[4],  # close\n            row[5],  # volume\n        )\n\n    if __debug__:\n        logger.debug(\"[%s] Update bar: \\n%s\", self.name, self.tail(len(rows)))\n</code></pre>"},{"location":"reference/exchange/live/data/#lettrade.exchange.live.data.LiveDataFeed.symbol_info","title":"symbol_info","text":"<pre><code>symbol_info()\n</code></pre> <p>Get symbol information from API</p> Source code in <code>lettrade/exchange/live/data.py</code> <pre><code>def symbol_info(self):\n    \"\"\"Get symbol information from API\"\"\"\n    return self._api.market(symbol=self.symbol)\n</code></pre>"},{"location":"reference/exchange/live/error/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> error","text":""},{"location":"reference/exchange/live/error/#lettrade.exchange.live.error","title":"error","text":""},{"location":"reference/exchange/live/error/#lettrade.exchange.live.error.LetLiveAPIUnauthorizedException","title":"LetLiveAPIUnauthorizedException","text":"<pre><code>LetLiveAPIUnauthorizedException(\n    *args: object, raw: dict = None\n)\n</code></pre> <p>               Bases: <code>LetLiveException</code></p> <p>API Unauthorized exception</p> Source code in <code>lettrade/exchange/live/error.py</code> <pre><code>def __init__(self, *args: object, raw: dict = None) -&gt; None:\n    super().__init__(*args)\n    self.raw = raw\n</code></pre>"},{"location":"reference/exchange/live/error/#lettrade.exchange.live.error.LetLiveOrderInvalidException","title":"LetLiveOrderInvalidException","text":"<pre><code>LetLiveOrderInvalidException(\n    *args: object, raw: dict = None\n)\n</code></pre> <p>               Bases: <code>LetLiveException</code>, <code>LetOrderInvalidException</code></p> <p>Live order place is invalid exception</p> Source code in <code>lettrade/exchange/live/error.py</code> <pre><code>def __init__(self, *args: object, raw: dict = None) -&gt; None:\n    super().__init__(*args)\n    self.raw = raw\n</code></pre>"},{"location":"reference/exchange/live/exchange/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> exchange","text":""},{"location":"reference/exchange/live/exchange/#lettrade.exchange.live.exchange","title":"exchange","text":""},{"location":"reference/exchange/live/exchange/#lettrade.exchange.live.exchange.LiveExchange","title":"LiveExchange","text":"<pre><code>LiveExchange(api: LiveAPI, *args, **kwargs)\n</code></pre> <p>               Bases: <code>Exchange</code></p> <p>MetaTrade 5 exchange module for <code>lettrade</code></p> <p>Parameters:</p> <ul> <li> <code>api</code>               (<code>LiveAPI</code>)           \u2013            <p>API connect to rpyc MeTrader 5 Terminal server through module <code>mt5linux</code></p> </li> <li> <code>*args</code>               (<code>list</code>, default:                   <code>()</code> )           \u2013            <p><code>Exchange</code> list parameters</p> </li> <li> <code>**kwargs</code>               (<code>dict</code>, default:                   <code>{}</code> )           \u2013            <p><code>Exchange</code> dict parameters</p> </li> </ul> Source code in <code>lettrade/exchange/live/exchange.py</code> <pre><code>def __init__(self, api: LiveAPI, *args, **kwargs):\n    \"\"\"_summary_\n\n    Args:\n        api (LiveAPI): API connect to rpyc MeTrader 5 Terminal server through module `mt5linux`\n        *args (list): `Exchange` list parameters\n        **kwargs (dict): `Exchange` dict parameters\n    \"\"\"\n    super().__init__(*args, **kwargs)\n    self._api = api\n</code></pre>"},{"location":"reference/exchange/live/exchange/#lettrade.exchange.live.exchange.LiveExchange.data","title":"data  <code>instance-attribute</code>","text":"<pre><code>data: DataFeed\n</code></pre> <p>main DataFeed</p>"},{"location":"reference/exchange/live/exchange/#lettrade.exchange.live.exchange.LiveExchange.datas","title":"datas  <code>instance-attribute</code>","text":"<pre><code>datas: list[DataFeed]\n</code></pre> <p>List of all available DataFeed</p>"},{"location":"reference/exchange/live/exchange/#lettrade.exchange.live.exchange.LiveExchange.executions","title":"executions  <code>instance-attribute</code>","text":"<pre><code>executions: dict[str, Execution] = dict()\n</code></pre> <p>Execution dict by <code>Execution.id</code> key</p>"},{"location":"reference/exchange/live/exchange/#lettrade.exchange.live.exchange.LiveExchange.history_orders","title":"history_orders  <code>instance-attribute</code>","text":"<pre><code>history_orders: dict[str, Order] = dict()\n</code></pre> <p>History Order dict by <code>Order.id</code> key</p>"},{"location":"reference/exchange/live/exchange/#lettrade.exchange.live.exchange.LiveExchange.history_positions","title":"history_positions  <code>instance-attribute</code>","text":"<pre><code>history_positions: dict[str, Position] = dict()\n</code></pre> <p>History Position dict by <code>Position.id</code> key</p>"},{"location":"reference/exchange/live/exchange/#lettrade.exchange.live.exchange.LiveExchange.orders","title":"orders  <code>instance-attribute</code>","text":"<pre><code>orders: dict[str, Order] = dict()\n</code></pre> <p>Available Order dict by <code>Order.id</code> key</p>"},{"location":"reference/exchange/live/exchange/#lettrade.exchange.live.exchange.LiveExchange.positions","title":"positions  <code>instance-attribute</code>","text":"<pre><code>positions: dict[str, Position] = dict()\n</code></pre> <p>Available Position dict by <code>Position.id</code> key</p>"},{"location":"reference/exchange/live/exchange/#lettrade.exchange.live.exchange.LiveExchange.init","title":"init","text":"<pre><code>init(\n    brain: Brain,\n    feeder: DataFeeder,\n    account: Account,\n    commander: Commander,\n) -&gt; None\n</code></pre> <p>Init Exchange dependencies. Set data/datas from feeder. Set state to <code>ExchangeState.Start</code>.</p> <p>Parameters:</p> <ul> <li> <code>brain</code>               (<code>Brain</code>)           \u2013            <p>description</p> </li> <li> <code>feeder</code>               (<code>DataFeeder</code>)           \u2013            <p>description</p> </li> <li> <code>account</code>               (<code>Account</code>)           \u2013            <p>description</p> </li> <li> <code>commander</code>               (<code>Commander</code>)           \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def init(\n    self,\n    brain: \"Brain\",\n    feeder: DataFeeder,\n    account: Account,\n    commander: Commander,\n) -&gt; None:\n    \"\"\"Init Exchange dependencies.\n    Set data/datas from feeder.\n    Set state to `ExchangeState.Start`.\n\n    Args:\n        brain (Brain): _description_\n        feeder (DataFeeder): _description_\n        account (Account): _description_\n        commander (Commander): _description_\n    \"\"\"\n    self._brain = brain\n    self._feeder = feeder\n    self._account = account\n    self._commander = commander\n\n    self.data = self._feeder.data\n    self.datas = self._feeder.datas\n\n    self._account.init(exchange=self)\n\n    self._state = ExchangeState.Start\n</code></pre>"},{"location":"reference/exchange/live/exchange/#lettrade.exchange.live.exchange.LiveExchange.new_order","title":"new_order","text":"<pre><code>new_order(\n    size: float,\n    type: OrderType | None = OrderType.Market,\n    limit: float | None = None,\n    stop: float | None = None,\n    sl: float | None = None,\n    tp: float | None = None,\n    tag: str | None = None,\n    data: DataFeed | None = None,\n    **kwargs\n) -&gt; OrderResult\n</code></pre> <p>Place new order to server</p> <p>Parameters:</p> <ul> <li> <code>size</code>               (<code>float</code>)           \u2013            <p>description</p> </li> <li> <code>type</code>               (<code>OrderType | None</code>, default:                   <code>Market</code> )           \u2013            <p>description. Defaults to OrderType.Market.</p> </li> <li> <code>limit</code>               (<code>float | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>stop</code>               (<code>float | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>sl</code>               (<code>float | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>tp</code>               (<code>float | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>tag</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>data</code>               (<code>DataFeed | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>OrderResult</code> (              <code>OrderResult</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/live/exchange.py</code> <pre><code>def new_order(\n    self,\n    size: float,\n    type: OrderType | None = OrderType.Market,\n    limit: float | None = None,\n    stop: float | None = None,\n    sl: float | None = None,\n    tp: float | None = None,\n    tag: str | None = None,\n    data: DataFeed | None = None,\n    **kwargs,\n) -&gt; OrderResult:\n    \"\"\"Place new order to server\n\n    Args:\n        size (float): _description_\n        type (OrderType | None, optional): _description_. Defaults to OrderType.Market.\n        limit (float | None, optional): _description_. Defaults to None.\n        stop (float | None, optional): _description_. Defaults to None.\n        sl (float | None, optional): _description_. Defaults to None.\n        tp (float | None, optional): _description_. Defaults to None.\n        tag (str | None, optional): _description_. Defaults to None.\n        data (DataFeed | None, optional): _description_. Defaults to None.\n\n    Returns:\n        OrderResult: _description_\n    \"\"\"\n    if not data:\n        data = self.data\n\n    if type == OrderType.Market:\n        limit = 0\n        stop = 0\n\n    order = self._order_cls(\n        id=-1,\n        exchange=self,\n        data=data,\n        size=size,\n        type=type,\n        limit_price=limit,\n        stop_price=stop,\n        sl_price=sl,\n        tp_price=tp,\n        tag=tag,\n        **kwargs,\n    )\n    ok = order.place()\n\n    # if __debug__:\n    #     logger.info(\"New order %s at %s\", order, self.data.now)\n\n    return ok\n</code></pre>"},{"location":"reference/exchange/live/exchange/#lettrade.exchange.live.exchange.LiveExchange.next_next","title":"next_next","text":"<pre><code>next_next()\n</code></pre> <p>Call after strategy.next()</p> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def next_next(self):\n    \"\"\"Call after strategy.next()\"\"\"\n    self._account.next_next()\n</code></pre>"},{"location":"reference/exchange/live/exchange/#lettrade.exchange.live.exchange.LiveExchange.on_execution","title":"on_execution","text":"<pre><code>on_execution(\n    execution: Execution,\n    broadcast: bool | None = True,\n    **kwargs\n) -&gt; None\n</code></pre> <p>Receive Execution event from exchange then store and notify Brain</p> <p>Parameters:</p> <ul> <li> <code>execution</code>               (<code>Execution</code>)           \u2013            <p>description</p> </li> <li> <code>broadcast</code>               (<code>bool | None</code>, default:                   <code>True</code> )           \u2013            <p>description. Defaults to True.</p> </li> </ul> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def on_execution(\n    self,\n    execution: Execution,\n    broadcast: bool | None = True,\n    **kwargs,\n) -&gt; None:\n    \"\"\"Receive Execution event from exchange then store and notify Brain\n\n    Args:\n        execution (Execution): _description_\n        broadcast (bool | None, optional): _description_. Defaults to True.\n    \"\"\"\n    self.on_executions(executions=[execution], broadcast=broadcast, **kwargs)\n</code></pre>"},{"location":"reference/exchange/live/exchange/#lettrade.exchange.live.exchange.LiveExchange.on_executions","title":"on_executions","text":"<pre><code>on_executions(\n    executions: list[Execution],\n    broadcast: bool | None = True,\n    **kwargs\n) -&gt; None\n</code></pre> <p>Receive Execution event from exchange then store and notify Brain</p> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def on_executions(\n    self,\n    executions: list[Execution],\n    broadcast: bool | None = True,\n    **kwargs,\n) -&gt; None:\n    \"\"\"\n    Receive Execution event from exchange then store and notify Brain\n    \"\"\"\n    for execution in executions:\n        if not isinstance(execution, Execution):\n            raise RuntimeError(f\"{execution} is not instance of type Execution\")\n\n        if execution.id in self.executions:\n            # Merge to keep Execution handler for strategy using\n            # when strategy want to store Execution object\n            # and object will be automatic update directly\n            self.executions[execution.id].merge(execution)\n            execution = self.executions[execution.id]\n        else:\n            self.executions[execution.id] = execution\n\n    if self._state != ExchangeState.Run:\n        return\n\n    if broadcast:\n        self._brain.on_executions(executions)\n</code></pre>"},{"location":"reference/exchange/live/exchange/#lettrade.exchange.live.exchange.LiveExchange.on_order","title":"on_order","text":"<pre><code>on_order(\n    order: Order, broadcast: bool | None = True, **kwargs\n) -&gt; None\n</code></pre> <p>Receive order event from exchange then store and notify Brain</p> <p>Parameters:</p> <ul> <li> <code>order</code>               (<code>Order</code>)           \u2013            <p>description</p> </li> <li> <code>broadcast</code>               (<code>bool | None</code>, default:                   <code>True</code> )           \u2013            <p>description. Defaults to True.</p> </li> </ul> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def on_order(\n    self,\n    order: Order,\n    broadcast: bool | None = True,\n    **kwargs,\n) -&gt; None:\n    \"\"\"Receive order event from exchange then store and notify Brain\n\n    Args:\n        order (Order): _description_\n        broadcast (bool | None, optional): _description_. Defaults to True.\n    \"\"\"\n    self.on_orders(orders=[order], broadcast=broadcast, **kwargs)\n</code></pre>"},{"location":"reference/exchange/live/exchange/#lettrade.exchange.live.exchange.LiveExchange.on_orders","title":"on_orders","text":"<pre><code>on_orders(\n    orders: list[Order],\n    broadcast: bool | None = True,\n    **kwargs\n) -&gt; None\n</code></pre> <p>Receive orders event from exchange then store and notify Brain</p> <p>Parameters:</p> <ul> <li> <code>orders</code>               (<code>list[Order]</code>)           \u2013            <p>description</p> </li> <li> <code>broadcast</code>               (<code>bool | None</code>, default:                   <code>True</code> )           \u2013            <p>description. Defaults to True.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def on_orders(\n    self,\n    orders: list[Order],\n    broadcast: bool | None = True,\n    **kwargs,\n) -&gt; None:\n    \"\"\"Receive orders event from exchange then store and notify Brain\n\n    Args:\n        orders (list[Order]): _description_\n        broadcast (bool | None, optional): _description_. Defaults to True.\n\n    Raises:\n        RuntimeError: _description_\n    \"\"\"\n    for order in orders:\n        if not isinstance(order, Order):\n            raise RuntimeError(f\"{order} is not instance of type Order\")\n\n        if order.is_closed:\n            if order.id in self.history_orders:\n                logger.warning(\"Order closed recall: %s\", order)\n\n            self.history_orders[order.id] = order\n            if order.id in self.orders:\n                del self.orders[order.id]\n        else:\n            if order.id in self.history_orders:\n                raise RuntimeError(f\"Order {order.id} closed\")\n\n            if order.id in self.orders:\n                # Merge to keep Order handler for strategy using\n                # when strategy want to store Order object\n                # and object will be automatic update directly\n                self.orders[order.id].merge(order)\n                order = self.orders[order.id]\n            else:\n                self.orders[order.id] = order\n\n    if self._state != ExchangeState.Run:\n        return\n\n    if broadcast:\n        self._brain.on_orders(orders)\n</code></pre>"},{"location":"reference/exchange/live/exchange/#lettrade.exchange.live.exchange.LiveExchange.on_position","title":"on_position","text":"<pre><code>on_position(\n    position: Position,\n    broadcast: bool | None = True,\n    **kwargs\n) -&gt; None\n</code></pre> <p>Receive Position event from exchange then store and notify Brain</p> <p>Parameters:</p> <ul> <li> <code>position</code>               (<code>Position</code>)           \u2013            <p>new comming <code>Position</code></p> </li> <li> <code>broadcast</code>               (<code>bool | None</code>, default:                   <code>True</code> )           \u2013            <p>Flag notify to Brain. Defaults to True.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>validate <code>Position</code> instance</p> </li> </ul> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def on_position(\n    self,\n    position: Position,\n    broadcast: bool | None = True,\n    **kwargs,\n) -&gt; None:\n    \"\"\"Receive Position event from exchange then store and notify Brain\n\n    Args:\n        position (Position): new comming `Position`\n        broadcast (bool | None, optional): Flag notify to Brain. Defaults to True.\n\n    Raises:\n        RuntimeError: validate `Position` instance\n    \"\"\"\n    self.on_positions(positions=[position], broadcast=broadcast, **kwargs)\n</code></pre>"},{"location":"reference/exchange/live/exchange/#lettrade.exchange.live.exchange.LiveExchange.on_positions","title":"on_positions","text":"<pre><code>on_positions(\n    positions: list[Position],\n    broadcast: bool | None = True,\n    **kwargs\n) -&gt; None\n</code></pre> <p>Receive Positions event from exchange then store and notify Brain</p> <p>Parameters:</p> <ul> <li> <code>positions</code>               (<code>list[Position]</code>)           \u2013            <p>list of new comming <code>Position</code></p> </li> <li> <code>broadcast</code>               (<code>bool | None</code>, default:                   <code>True</code> )           \u2013            <p>Flag notify to Brain. Defaults to True.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>validate <code>Position</code> instance</p> </li> </ul> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def on_positions(\n    self,\n    positions: list[Position],\n    broadcast: bool | None = True,\n    **kwargs,\n) -&gt; None:\n    \"\"\"Receive Positions event from exchange then store and notify Brain\n\n    Args:\n        positions (list[Position]): list of new comming `Position`\n        broadcast (bool | None, optional): Flag notify to Brain. Defaults to True.\n\n    Raises:\n        RuntimeError: validate `Position` instance\n    \"\"\"\n    for position in positions:\n        if not isinstance(position, Position):\n            raise RuntimeError(f\"{position} is not instance of type Position\")\n\n        if position.is_exited:\n            if position.id in self.history_positions:\n                logger.warning(\"Position exited recall: %s\", position)\n\n            self.history_positions[position.id] = position\n            if position.id in self.positions:\n                del self.positions[position.id]\n\n            # self._account._on_position_exit(position)\n        else:\n            if position.id in self.history_positions:\n                raise RuntimeError(f\"Position {position.id} closed: {position}\")\n            if position.id in self.positions:\n                # Merge to keep Position handler for strategy using\n                # when strategy want to store Position object\n                # and object will be automatic update directly\n                self.positions[position.id].merge(position)\n                position = self.positions[position.id]\n            else:\n                self.positions[position.id] = position\n                # self._account._on_position_entry(position)\n\n    self._account.on_positions(positions)\n\n    if self._state != ExchangeState.Run:\n        return\n\n    if broadcast:\n        self._brain.on_positions(positions)\n</code></pre>"},{"location":"reference/exchange/live/exchange/#lettrade.exchange.live.exchange.LiveExchange.start","title":"start","text":"<pre><code>start() -&gt; None\n</code></pre> <p>Start Live exchange by: Sync positions from server</p> Source code in <code>lettrade/exchange/live/exchange.py</code> <pre><code>def start(self) -&gt; None:\n    \"\"\"Start Live exchange by: Sync positions from server\"\"\"\n    self._api.start(exchange=self)\n    return super().start()\n</code></pre>"},{"location":"reference/exchange/live/exchange/#lettrade.exchange.live.exchange.LiveExchange.stop","title":"stop","text":"<pre><code>stop() -&gt; None\n</code></pre> <p>Stop Exchange</p> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def stop(self) -&gt; None:\n    \"\"\"Stop Exchange\"\"\"\n    self._state = ExchangeState.Stop\n    self._account.stop()\n</code></pre>"},{"location":"reference/exchange/live/feeder/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> feeder","text":""},{"location":"reference/exchange/live/feeder/#lettrade.exchange.live.feeder","title":"feeder","text":""},{"location":"reference/exchange/live/feeder/#lettrade.exchange.live.feeder.LiveDataFeeder","title":"LiveDataFeeder","text":"<pre><code>LiveDataFeeder(\n    api: LiveAPI,\n    tick: bool = 5,\n    start_size: int = 500,\n    **kwargs\n)\n</code></pre> <p>               Bases: <code>DataFeeder</code></p> <pre><code>tick == 0: wait until new bar change value\ntick &gt; 0: sleep tick time (in seconds) then update\n</code></pre> Source code in <code>lettrade/exchange/live/feeder.py</code> <pre><code>def __init__(\n    self,\n    api: LiveAPI,\n    tick: bool = 5,\n    start_size: int = 500,\n    **kwargs,\n) -&gt; None:\n    \"\"\"\n    tick:\n        tick &lt; 0: no tick, just get completed bar\n        tick == 0: wait until new bar change value\n        tick &gt; 0: sleep tick time (in seconds) then update\n    \"\"\"\n    super().__init__()\n    self._api = api\n    self._tick = tick\n    self._start_size = start_size\n    self._config = kwargs\n\n    if isinstance(self._tick, int):\n        self._wait_timeframe = TimeFrame(f\"{self._tick}s\")\n    else:\n        self._wait_timeframe = None\n</code></pre>"},{"location":"reference/exchange/live/feeder/#lettrade.exchange.live.feeder.LiveDataFeeder.is_continous","title":"is_continous  <code>property</code>","text":"<pre><code>is_continous\n</code></pre> <p>Flag check is realtime continous datafeeder</p>"},{"location":"reference/exchange/live/feeder/#lettrade.exchange.live.feeder.LiveDataFeeder.instance","title":"instance  <code>classmethod</code>","text":"<pre><code>instance(\n    api: LiveAPI | None = None,\n    api_kwargs: dict | None = None,\n    **kwargs\n) -&gt; LiveDataFeed\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>api</code>               (<code>LiveAPI</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>api_kwargs</code>               (<code>dict</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>Missing api requirement</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>LiveDataFeed</code> (              <code>LiveDataFeed</code> )          \u2013            <p>DataFeed object</p> </li> </ul> Source code in <code>lettrade/exchange/live/feeder.py</code> <pre><code>@classmethod\ndef instance(\n    cls,\n    api: LiveAPI | None = None,\n    api_kwargs: dict | None = None,\n    **kwargs,\n) -&gt; \"LiveDataFeed\":\n    \"\"\"_summary_\n\n    Args:\n        api (LiveAPI, optional): _description_. Defaults to None.\n        api_kwargs (dict, optional): _description_. Defaults to None.\n\n    Raises:\n        RuntimeError: Missing api requirement\n\n    Returns:\n        LiveDataFeed: DataFeed object\n    \"\"\"\n    if api is None:\n        if api_kwargs is None:\n            raise RuntimeError(\"api or api_kwargs cannot missing\")\n        api = cls._api_cls(**api_kwargs)\n    obj = cls(api=api, **kwargs)\n    return obj\n</code></pre>"},{"location":"reference/exchange/live/live/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> live","text":""},{"location":"reference/exchange/live/live/#lettrade.exchange.live.live","title":"live","text":""},{"location":"reference/exchange/live/live/#lettrade.exchange.live.live.LetTradeLive","title":"LetTradeLive","text":"<pre><code>LetTradeLive(\n    strategy: type[Strategy],\n    datas: DataFeed | list[DataFeed] | str | list[str],\n    feeder: type[DataFeeder],\n    exchange: type[Exchange],\n    account: type[Account],\n    commander: type[Commander] | None = None,\n    plotter: type[Plotter] | None = None,\n    stats: type[BotStatistic] | None = None,\n    name: str | None = None,\n    bot: type[LetTradeBot] | None = LetTradeBot,\n    **kwargs\n)\n</code></pre> <p>               Bases: <code>LetTrade</code></p> <p>Help to maintain live bots</p> Source code in <code>lettrade/lettrade.py</code> <pre><code>def __init__(\n    self,\n    strategy: type[Strategy],\n    datas: DataFeed | list[DataFeed] | str | list[str],\n    feeder: type[DataFeeder],\n    exchange: type[Exchange],\n    account: type[Account],\n    commander: type[Commander] | None = None,\n    plotter: type[Plotter] | None = None,\n    stats: type[BotStatistic] | None = None,\n    name: str | None = None,\n    bot: type[LetTradeBot] | None = LetTradeBot,\n    **kwargs,\n) -&gt; None:\n    self._kwargs = kwargs\n    self._kwargs[\"strategy_cls\"] = strategy\n    self._kwargs[\"feeder_cls\"] = feeder\n    self._kwargs[\"exchange_cls\"] = exchange\n    self._kwargs[\"account_cls\"] = account\n    self._kwargs[\"commander_cls\"] = commander\n    self._kwargs[\"plotter_cls\"] = plotter\n    self._kwargs[\"stats_cls\"] = stats\n    self._kwargs[\"bot_cls\"] = bot\n    self._kwargs[\"name\"] = name\n\n    self._kwargs[\"datas\"] = self._init_datafeeds(datas)\n</code></pre>"},{"location":"reference/exchange/live/live/#lettrade.exchange.live.live.LetTradeLive.plot","title":"plot","text":"<pre><code>plot(*args, jump: dict | None = None, **kwargs)\n</code></pre> <p>Plot strategy/optimize result</p> BotPlotter <p>Miror of BotPlotter.plot(). Plotly implement PlotlyBotPlotter.plot().</p> <p>Args:     <code>jump</code> (dict | None, optional): Miror of BotPlotter.jump()</p> <p>Example:     - Jump to position_id         <pre><code>lt.plot(\n    jump=dict(position_id=1, range=300),\n    layout=dict(height=2000),\n)\n</code></pre></p> OptimizePlotter <p>Miror of OptimizePlotter.plot(). Plotly implement PlotlyOptimizePlotter.plot().</p> <p>Example:     -         <pre><code>lt.plot(layout=dict(height=2000))\n</code></pre></p> Source code in <code>lettrade/lettrade.py</code> <pre><code>def plot(self, *args, jump: dict | None = None, **kwargs):\n    \"\"\"Plot strategy/optimize result\n\n    BotPlotter:\n        Miror of [BotPlotter.plot()](site:/reference/plot/bot/#lettrade.plot.bot.BotPlotter.plot).\n        Plotly implement [PlotlyBotPlotter.plot()](site:/reference/plot/plotly/plotly/#lettrade.plot.plotly.plotly.PlotlyBotPlotter.plot).\n\n        Args:\n            `jump` (dict | None, optional): Miror of [BotPlotter.jump()](site:/reference/plot/bot/#lettrade.plot.bot.BotPlotter.jump)\n\n        Example:\n            - Jump to position_id\n                ```python\n                lt.plot(\n                    jump=dict(position_id=1, range=300),\n                    layout=dict(height=2000),\n                )\n                ```\n\n    OptimizePlotter:\n        Miror of [OptimizePlotter.plot()](site:/reference/plot/optimize/#lettrade.plot.optimize.OptimizePlotter.plot).\n        Plotly implement [PlotlyOptimizePlotter.plot()](site:/reference/exchange/backtest/plotly/optimize/#lettrade.exchange.backtest.plotly.optimize.PlotlyOptimizePlotter.plot).\n\n        Example:\n            -\n                ```python\n                lt.plot(layout=dict(height=2000))\n                ```\n    \"\"\"\n    if __debug__:\n        from .utils.docs import is_docs_session\n\n        if is_docs_session():\n            return\n\n    self.plotter.plot(*args, jump=jump, **kwargs)\n</code></pre>"},{"location":"reference/exchange/live/live/#lettrade.exchange.live.live.LetTradeLive.run","title":"run","text":"<pre><code>run(worker: int | None = None, **kwargs)\n</code></pre> <p>Run strategy in single or multiple processing</p> <p>Parameters:</p> <ul> <li> <code>worker</code>               (<code>int | None</code>, default:                   <code>None</code> )           \u2013            <p>Number of processing. Defaults to None.</p> </li> </ul> Source code in <code>lettrade/lettrade.py</code> <pre><code>def run(self, worker: int | None = None, **kwargs):\n    \"\"\"Run strategy in single or multiple processing\n\n    Args:\n        worker (int | None, optional): Number of processing. Defaults to None.\n    \"\"\"\n    if worker or isinstance(self.data, list):\n        if not isinstance(self.data, list):\n            # self.data = self.datas\n            self.datas = [self.data]\n\n        worker = self._max_workers(worker)\n\n        self._multiprocess()\n\n        datas_source = self._kwargs.pop(\"datas\")\n        with ProcessPoolExecutor(max_workers=worker) as executor:\n            futures = [\n                executor.submit(\n                    self._bot_cls.run_bot,\n                    datas=datas,\n                    id=i,\n                    result=\"str\",\n                    **self._kwargs,\n                )\n                for i, datas in enumerate(datas_source)\n            ]\n            for future in futures:\n                result = future.result()\n                print(result)\n    else:\n        self._bot = self._bot_cls.run_bot(\n            bot=self._bot,\n            result=\"bot\",\n            **self._kwargs,\n        )\n        print(str(self._bot.stats))\n</code></pre>"},{"location":"reference/exchange/live/live/#lettrade.exchange.live.live.LetTradeLive.stop","title":"stop","text":"<pre><code>stop()\n</code></pre> <p>Stop strategy</p> Source code in <code>lettrade/lettrade.py</code> <pre><code>def stop(self):\n    \"\"\"Stop strategy\"\"\"\n    if self._bot is not None:\n        return self._bot.stop()\n    if self.stats:\n        self.stats.stop()\n</code></pre>"},{"location":"reference/exchange/live/live/#lettrade.exchange.live.live.let_live","title":"let_live","text":"<pre><code>let_live(\n    strategy: type[Strategy],\n    datas: set[set[str]],\n    commander: Commander | None = None,\n    stats: type[BotStatistic] = BotStatistic,\n    plotter: type[Plotter] | None = None,\n    bot: type[LetTradeLiveBot] = LetTradeLiveBot,\n    lettrade: type[LetTradeLive] = LetTradeLive,\n    api: type[LiveAPI] = LiveAPI,\n    **kwargs\n) -&gt; LetTradeLive\n</code></pre> <p>Help to build <code>LetTradeLive</code></p> <p>Parameters:</p> <ul> <li> <code>strategy</code>               (<code>type[Strategy]</code>)           \u2013            <p>description</p> </li> <li> <code>datas</code>               (<code>set[set[str]]</code>)           \u2013            <p>description</p> </li> <li> <code>commander</code>               (<code>Commander | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>stats</code>               (<code>type[BotStatistic]</code>, default:                   <code>BotStatistic</code> )           \u2013            <p>description. Defaults to BotStatistic.</p> </li> <li> <code>plotter</code>               (<code>type[Plotter] | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>bot</code>               (<code>type[LetTradeLiveBot]</code>, default:                   <code>LetTradeLiveBot</code> )           \u2013            <p>description. Defaults to LetTradeLiveBot.</p> </li> <li> <code>lettrade</code>               (<code>type[LetTradeLive]</code>, default:                   <code>LetTradeLive</code> )           \u2013            <p>description. Defaults to LetTradeLive.</p> </li> <li> <code>api</code>               (<code>type[LiveAPI]</code>, default:                   <code>LiveAPI</code> )           \u2013            <p>description. Defaults to LiveAPI.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>LetTradeLive</code> (              <code>LetTradeLive</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/live/live.py</code> <pre><code>def let_live(\n    strategy: type[Strategy],\n    datas: set[set[str]],\n    commander: Commander | None = None,\n    stats: type[BotStatistic] = BotStatistic,\n    plotter: type[Plotter] | None = None,\n    bot: type[LetTradeLiveBot] = LetTradeLiveBot,\n    lettrade: type[LetTradeLive] = LetTradeLive,\n    api: type[LiveAPI] = LiveAPI,\n    **kwargs,\n) -&gt; \"LetTradeLive\":\n    \"\"\"Help to build `LetTradeLive`\n\n    Args:\n        strategy (type[Strategy]): _description_\n        datas (set[set[str]]): _description_\n        commander (Commander | None, optional): _description_. Defaults to None.\n        stats (type[BotStatistic], optional): _description_. Defaults to BotStatistic.\n        plotter (type[Plotter] | None, optional): _description_. Defaults to None.\n        bot (type[LetTradeLiveBot], optional): _description_. Defaults to LetTradeLiveBot.\n        lettrade (type[LetTradeLive], optional): _description_. Defaults to LetTradeLive.\n        api (type[LiveAPI], optional): _description_. Defaults to LiveAPI.\n\n    Returns:\n        LetTradeLive: _description_\n    \"\"\"\n    return lettrade(\n        strategy=strategy,\n        datas=datas,\n        commander=commander,\n        plotter=plotter,\n        stats=stats,\n        bot=bot,\n        api=api,\n        **kwargs,\n    )\n</code></pre>"},{"location":"reference/exchange/live/trade/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> trade","text":""},{"location":"reference/exchange/live/trade/#lettrade.exchange.live.trade","title":"trade","text":""},{"location":"reference/exchange/live/trade/#lettrade.exchange.live.trade.LiveExecution","title":"LiveExecution","text":"<pre><code>LiveExecution(\n    id: str,\n    exchange: LiveExchange,\n    data: LiveDataFeed,\n    size: float,\n    price: float,\n    at: float,\n    order_id: str | None = None,\n    order: Order | None = None,\n    position_id: str | None = None,\n    position: Position | None = None,\n    api: LiveAPI | None = None,\n    raw: object | None = None,\n    **kwargs\n)\n</code></pre> <p>               Bases: <code>_LiveTrade</code>, <code>Execution</code></p> <p>Execution for Live</p> Source code in <code>lettrade/exchange/live/trade.py</code> <pre><code>def __init__(\n    self,\n    id: str,\n    exchange: \"LiveExchange\",\n    data: \"LiveDataFeed\",\n    size: float,\n    price: float,\n    at: float,\n    order_id: str | None = None,\n    order: \"Order | None\" = None,\n    position_id: str | None = None,\n    position: \"Position | None\" = None,\n    # tag: str | None = None,\n    api: LiveAPI | None = None,\n    raw: object | None = None,\n    **kwargs,\n):\n    super().__init__(\n        id=id,\n        exchange=exchange,\n        data=data,\n        size=size,\n        price=price,\n        at=at,\n        order_id=order_id,\n        order=order,\n        position_id=position_id,\n        position=position,\n        api=api,\n        raw=raw,\n        **kwargs,\n    )\n</code></pre>"},{"location":"reference/exchange/live/trade/#lettrade.exchange.live.trade.LiveExecution.is_long","title":"is_long  <code>property</code>","text":"<pre><code>is_long: bool\n</code></pre> <p>True if side is long (size is positive).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True/False</p> </li> </ul>"},{"location":"reference/exchange/live/trade/#lettrade.exchange.live.trade.LiveExecution.is_short","title":"is_short  <code>property</code>","text":"<pre><code>is_short: bool\n</code></pre> <p>True if side is short (size is negative).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/live/trade/#lettrade.exchange.live.trade.LiveExecution.side","title":"side  <code>property</code>","text":"<pre><code>side: TradeSide\n</code></pre> <p>True if side is short (size is negative).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>TradeSide</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/live/trade/#lettrade.exchange.live.trade.LiveExecution.from_raw","title":"from_raw  <code>abstractmethod</code> <code>classmethod</code>","text":"<pre><code>from_raw(raw, exchange: LiveExchange) -&gt; LiveExecution\n</code></pre> <p>Building new LiveExecution from live api raw object</p> <p>Parameters:</p> <ul> <li> <code>raw</code>               (<code>_type_</code>)           \u2013            <p>description</p> </li> <li> <code>exchange</code>               (<code>LiveExchange</code>)           \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>LiveExecution</code> (              <code>LiveExecution</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/live/trade.py</code> <pre><code>@classmethod\n@abstractmethod\ndef from_raw(cls, raw, exchange: \"LiveExchange\") -&gt; \"LiveExecution\":\n    \"\"\"Building new LiveExecution from live api raw object\n\n    Args:\n        raw (_type_): _description_\n        exchange (LiveExchange): _description_\n\n    Returns:\n        LiveExecution: _description_\n    \"\"\"\n    raise NotImplementedError(cls)\n</code></pre>"},{"location":"reference/exchange/live/trade/#lettrade.exchange.live.trade.LiveExecution.merge","title":"merge","text":"<pre><code>merge(other: Execution)\n</code></pre> <p>Merge to keep object handler but not overwrite for Strategy using when Strategy want to store object and object will be automatic update directly</p> Source code in <code>lettrade/exchange/execution.py</code> <pre><code>def merge(self, other: \"Execution\"):\n    \"\"\"\n    Merge to keep object handler but not overwrite for Strategy using when Strategy want to store object and object will be automatic update directly\n    \"\"\"\n    if other is self:\n        return\n\n    if self.id != other.id:\n        raise RuntimeError(f\"Merge difference id {self.id} != {other.id} execution\")\n\n    self.price = other.price\n    self.size = other.size\n\n    if other.at:\n        self.at = other.at\n    if other.order_id:\n        self.order_id = other.order_id\n    if other.order:\n        self.order = other.order\n    if other.position_id:\n        self.position_id = other.position_id\n    if other.position:\n        self.position = other.position\n</code></pre>"},{"location":"reference/exchange/live/trade/#lettrade.exchange.live.trade.LiveOrder","title":"LiveOrder","text":"<pre><code>LiveOrder(\n    id: str,\n    exchange: LiveExchange,\n    data: LiveDataFeed,\n    size: float,\n    state: OrderState = OrderState.Pending,\n    type: OrderType = OrderType.Market,\n    limit_price: float | None = None,\n    stop_price: float | None = None,\n    sl_price: float | None = None,\n    tp_price: float | None = None,\n    parent: Position | None = None,\n    tag: str | None = None,\n    api: LiveAPI | None = None,\n    raw: object | None = None,\n    **kwargs\n)\n</code></pre> <p>               Bases: <code>_LiveTrade</code>, <code>Order</code></p> Source code in <code>lettrade/exchange/live/trade.py</code> <pre><code>def __init__(\n    self,\n    id: str,\n    exchange: \"LiveExchange\",\n    data: \"LiveDataFeed\",\n    size: float,\n    state: OrderState = OrderState.Pending,\n    type: OrderType = OrderType.Market,\n    limit_price: float | None = None,\n    stop_price: float | None = None,\n    sl_price: float | None = None,\n    tp_price: float | None = None,\n    parent: \"Position | None\" = None,\n    tag: str | None = None,\n    api: LiveAPI | None = None,\n    raw: object | None = None,\n    **kwargs,\n):\n    super().__init__(\n        id=id,\n        exchange=exchange,\n        data=data,\n        size=size,\n        state=state,\n        type=type,\n        limit_price=limit_price,\n        stop_price=stop_price,\n        sl_price=sl_price,\n        tp_price=tp_price,\n        parent=parent,\n        tag=tag,\n        api=api,\n        raw=raw,\n        **kwargs,\n    )\n</code></pre>"},{"location":"reference/exchange/live/trade/#lettrade.exchange.live.trade.LiveOrder.is_closed","title":"is_closed  <code>property</code>","text":"<pre><code>is_closed: bool\n</code></pre> <p>Flag to check <code>Order</code> closed</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True if <code>state</code> in [OrderState.Filled, OrderState.Canceled]</p> </li> </ul>"},{"location":"reference/exchange/live/trade/#lettrade.exchange.live.trade.LiveOrder.is_long","title":"is_long  <code>property</code>","text":"<pre><code>is_long: bool\n</code></pre> <p>True if side is long (size is positive).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True/False</p> </li> </ul>"},{"location":"reference/exchange/live/trade/#lettrade.exchange.live.trade.LiveOrder.is_opening","title":"is_opening  <code>property</code>","text":"<pre><code>is_opening: bool\n</code></pre> <p>Flag to check <code>Order</code> still alive</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True if <code>state</code> in [OrderState.Pending, OrderState.Placed, OrderState.Partial]</p> </li> </ul>"},{"location":"reference/exchange/live/trade/#lettrade.exchange.live.trade.LiveOrder.is_short","title":"is_short  <code>property</code>","text":"<pre><code>is_short: bool\n</code></pre> <p>True if side is short (size is negative).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/live/trade/#lettrade.exchange.live.trade.LiveOrder.is_sl_order","title":"is_sl_order  <code>property</code>","text":"<pre><code>is_sl_order: bool\n</code></pre> <p><code>Order</code> is stop-loss order of a <code>Position</code></p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/live/trade/#lettrade.exchange.live.trade.LiveOrder.is_tp_order","title":"is_tp_order  <code>property</code>","text":"<pre><code>is_tp_order: bool\n</code></pre> <p><code>Order</code> is take-profit order of a <code>Position</code></p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/live/trade/#lettrade.exchange.live.trade.LiveOrder.limit","title":"limit  <code>property</code>","text":"<pre><code>limit: float | None\n</code></pre> <p>Getter of limit_price</p> <p>Returns:</p> <ul> <li> <code>float | None</code>           \u2013            <p>float | None: <code>float</code> or <code>None</code></p> </li> </ul>"},{"location":"reference/exchange/live/trade/#lettrade.exchange.live.trade.LiveOrder.place_price","title":"place_price  <code>property</code>","text":"<pre><code>place_price: float | None\n</code></pre> <p>Getter of place_price</p> <p>Returns:</p> <ul> <li> <code>float | None</code>           \u2013            <p>float | None: <code>float</code> or <code>None</code></p> </li> </ul>"},{"location":"reference/exchange/live/trade/#lettrade.exchange.live.trade.LiveOrder.side","title":"side  <code>property</code>","text":"<pre><code>side: TradeSide\n</code></pre> <p>True if side is short (size is negative).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>TradeSide</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/live/trade/#lettrade.exchange.live.trade.LiveOrder.sl","title":"sl  <code>property</code>","text":"<pre><code>sl: float | None\n</code></pre> <p>Getter of sl_price</p> <p>Returns:</p> <ul> <li> <code>float | None</code>           \u2013            <p>float | None: <code>float</code> or <code>None</code></p> </li> </ul>"},{"location":"reference/exchange/live/trade/#lettrade.exchange.live.trade.LiveOrder.stop","title":"stop  <code>property</code>","text":"<pre><code>stop: float | None\n</code></pre> <p>Getter of stop_price</p> <p>Returns:</p> <ul> <li> <code>float | None</code>           \u2013            <p>float | None: <code>float</code> or <code>None</code></p> </li> </ul>"},{"location":"reference/exchange/live/trade/#lettrade.exchange.live.trade.LiveOrder.tp","title":"tp  <code>property</code>","text":"<pre><code>tp: float | None\n</code></pre> <p>Getter of tp_price</p> <p>Returns:</p> <ul> <li> <code>float | None</code>           \u2013            <p>float | None: <code>float</code> or <code>None</code></p> </li> </ul>"},{"location":"reference/exchange/live/trade/#lettrade.exchange.live.trade.LiveOrder.cancel","title":"cancel","text":"<pre><code>cancel(**kwargs) -&gt; OrderResult\n</code></pre> <p>Cancel order</p> <p>Returns:</p> <ul> <li> <code>OrderResult</code> (              <code>OrderResult</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/live/trade.py</code> <pre><code>def cancel(self, **kwargs) -&gt; OrderResult:\n    \"\"\"Cancel order\n\n    Returns:\n        OrderResult: _description_\n    \"\"\"\n    result = self._api.order_close(order=self, **kwargs)\n    return super().cancel(raw=result)\n</code></pre>"},{"location":"reference/exchange/live/trade/#lettrade.exchange.live.trade.LiveOrder.fill","title":"fill","text":"<pre><code>fill(\n    price: float, at: Timestamp, raw: object | None = None\n) -&gt; OrderResult\n</code></pre> <p>Fill <code>Order</code>. Set <code>status</code> to <code>OrderState.Executed</code>. Send event to <code>Exchange</code></p> <p>Parameters:</p> <ul> <li> <code>price</code>               (<code>float</code>)           \u2013            <p>Executed price</p> </li> <li> <code>at</code>               (<code>Timestamp</code>)           \u2013            <p>Executed bar</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>OrderResult</code> (              <code>OrderResult</code> )          \u2013            <p>result of <code>Order</code></p> </li> </ul> Source code in <code>lettrade/exchange/order.py</code> <pre><code>def fill(\n    self,\n    price: float,\n    at: pd.Timestamp,\n    raw: object | None = None,\n) -&gt; \"OrderResult\":\n    \"\"\"Fill `Order`.\n    Set `status` to `OrderState.Executed`.\n    Send event to `Exchange`\n\n    Args:\n        price (float): Executed price\n        at (pd.Timestamp): Executed bar\n\n    Raises:\n        RuntimeError: _description_\n\n    Returns:\n        OrderResult: result of `Order`\n    \"\"\"\n    if self.state != OrderState.Placed:\n        raise RuntimeError(f\"Order {self.id} state {self.state} is not Placed\")\n\n    self.filled_at = at\n    self.filled_price = price\n    self.state = OrderState.Filled\n    self.exchange.on_order(self)\n    return OrderResultOk(order=self, raw=raw)\n</code></pre>"},{"location":"reference/exchange/live/trade/#lettrade.exchange.live.trade.LiveOrder.from_position","title":"from_position  <code>abstractmethod</code> <code>classmethod</code>","text":"<pre><code>from_position(\n    position: LivePosition, sl=None, tp=None\n) -&gt; LiveOrder\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>position</code>               (<code>LivePosition</code>)           \u2013            <p>description</p> </li> <li> <code>sl</code>               (<code>_type_</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>tp</code>               (<code>_type_</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>LiveOrder</code> (              <code>LiveOrder</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/live/trade.py</code> <pre><code>@classmethod\n@abstractmethod\ndef from_position(cls, position: \"LivePosition\", sl=None, tp=None) -&gt; \"LiveOrder\":\n    \"\"\"_summary_\n\n    Args:\n        position (LivePosition): _description_\n        sl (_type_, optional): _description_. Defaults to None.\n        tp (_type_, optional): _description_. Defaults to None.\n\n    Returns:\n        LiveOrder: _description_\n    \"\"\"\n    raise NotImplementedError(cls)\n</code></pre>"},{"location":"reference/exchange/live/trade/#lettrade.exchange.live.trade.LiveOrder.from_raw","title":"from_raw  <code>abstractmethod</code> <code>classmethod</code>","text":"<pre><code>from_raw(raw, exchange: LiveExchange) -&gt; LiveOrder\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>raw</code>               (<code>_type_</code>)           \u2013            <p>description</p> </li> <li> <code>exchange</code>               (<code>LiveExchange</code>)           \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>LiveOrder</code> (              <code>LiveOrder</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/live/trade.py</code> <pre><code>@classmethod\n@abstractmethod\ndef from_raw(cls, raw, exchange: \"LiveExchange\") -&gt; \"LiveOrder\":\n    \"\"\"_summary_\n\n    Args:\n        raw (_type_): _description_\n        exchange (LiveExchange): _description_\n\n    Returns:\n        LiveOrder: _description_\n    \"\"\"\n    raise NotImplementedError(cls)\n</code></pre>"},{"location":"reference/exchange/live/trade/#lettrade.exchange.live.trade.LiveOrder.merge","title":"merge","text":"<pre><code>merge(other: Order)\n</code></pre> <p>Update current <code>Order</code> variables by other <code>Order</code></p> <p>Parameters:</p> <ul> <li> <code>other</code>               (<code>Order</code>)           \u2013            <p>Merge source <code>Order</code></p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>Validate same id</p> </li> </ul> Source code in <code>lettrade/exchange/order.py</code> <pre><code>def merge(self, other: \"Order\"):\n    \"\"\"Update current `Order` variables by other `Order`\n\n    Args:\n        other (Order): Merge source `Order`\n\n    Raises:\n        RuntimeError: Validate same id\n    \"\"\"\n    if other is self:\n        return\n\n    if self.id != other.id:\n        raise RuntimeError(f\"Merge difference id {self.id} != {other.id} order\")\n\n    self.size = other.size\n    self.sl_price = other.sl_price\n    self.tp_price = other.tp_price\n\n    if other.limit_price:\n        self.limit_price = other.limit_price\n    if other.stop_price:\n        self.stop_price = other.stop_price\n    if other.placed_at:\n        self.placed_at = other.placed_at\n\n    if other.filled_price:\n        self.filled_price = other.filled_price\n    if other.filled_at:\n        self.filled_at = other.filled_at\n\n    if other.parent:\n        self.parent = other.parent\n</code></pre>"},{"location":"reference/exchange/live/trade/#lettrade.exchange.live.trade.LivePosition","title":"LivePosition","text":"<pre><code>LivePosition(\n    id: str,\n    exchange: LiveExchange,\n    data: LiveDataFeed,\n    size: float,\n    parent: Order,\n    tag: str | None = None,\n    state: PositionState = PositionState.Open,\n    entry_price: float | None = None,\n    entry_fee: float = 0.0,\n    entry_at: int | None = None,\n    sl_order: Order | None = None,\n    tp_order: Order | None = None,\n    api: LiveAPI | None = None,\n    raw: object | None = None,\n    **kwargs\n)\n</code></pre> <p>               Bases: <code>_LiveTrade</code>, <code>Position</code></p> Source code in <code>lettrade/exchange/live/trade.py</code> <pre><code>def __init__(\n    self,\n    id: str,\n    exchange: \"LiveExchange\",\n    data: \"LiveDataFeed\",\n    size: float,\n    parent: Order,\n    tag: str | None = None,\n    state: PositionState = PositionState.Open,\n    entry_price: float | None = None,\n    entry_fee: float = 0.0,\n    entry_at: int | None = None,\n    sl_order: Order | None = None,\n    tp_order: Order | None = None,\n    api: LiveAPI | None = None,\n    raw: object | None = None,\n    **kwargs,\n):\n    super().__init__(\n        id=id,\n        exchange=exchange,\n        data=data,\n        size=size,\n        parent=parent,\n        tag=tag,\n        state=state,\n        entry_price=entry_price,\n        entry_fee=entry_fee,\n        entry_at=entry_at,\n        sl_order=sl_order,\n        tp_order=tp_order,\n        api=api,\n        raw=raw,\n        **kwargs,\n    )\n</code></pre>"},{"location":"reference/exchange/live/trade/#lettrade.exchange.live.trade.LivePosition.fee","title":"fee  <code>property</code>","text":"<pre><code>fee: float\n</code></pre> <p>Fee/Estimate Fee for trade</p> <p>Returns:</p> <ul> <li> <code>float</code> (              <code>float</code> )          \u2013            <p>Fee</p> </li> </ul>"},{"location":"reference/exchange/live/trade/#lettrade.exchange.live.trade.LivePosition.is_exited","title":"is_exited  <code>property</code>","text":"<pre><code>is_exited: bool\n</code></pre> <p>Flag to check Position state.</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True if the trade exited</p> </li> </ul>"},{"location":"reference/exchange/live/trade/#lettrade.exchange.live.trade.LivePosition.is_long","title":"is_long  <code>property</code>","text":"<pre><code>is_long: bool\n</code></pre> <p>True if side is long (size is positive).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True/False</p> </li> </ul>"},{"location":"reference/exchange/live/trade/#lettrade.exchange.live.trade.LivePosition.is_opening","title":"is_opening  <code>property</code>","text":"<pre><code>is_opening: bool\n</code></pre> <p>Flag to check Position state.</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True if the trade opening</p> </li> </ul>"},{"location":"reference/exchange/live/trade/#lettrade.exchange.live.trade.LivePosition.is_short","title":"is_short  <code>property</code>","text":"<pre><code>is_short: bool\n</code></pre> <p>True if side is short (size is negative).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/live/trade/#lettrade.exchange.live.trade.LivePosition.pl","title":"pl  <code>property</code>","text":"<pre><code>pl: float\n</code></pre> <p>Estimate Profit or Loss of Position</p> <p>Returns:</p> <ul> <li> <code>float</code> (              <code>float</code> )          \u2013            <p>PnL</p> </li> </ul>"},{"location":"reference/exchange/live/trade/#lettrade.exchange.live.trade.LivePosition.side","title":"side  <code>property</code>","text":"<pre><code>side: TradeSide\n</code></pre> <p>True if side is short (size is negative).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>TradeSide</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/live/trade/#lettrade.exchange.live.trade.LivePosition.exit","title":"exit  <code>abstractmethod</code>","text":"<pre><code>exit() -&gt; PositionResult\n</code></pre> <p>summary</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>PositionResult</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/live/trade.py</code> <pre><code>@abstractmethod\ndef exit(self) -&gt; PositionResult:\n    \"\"\"_summary_\n\n    Returns:\n        bool: _description_\n    \"\"\"\n    raise NotImplementedError(type(self))\n</code></pre>"},{"location":"reference/exchange/live/trade/#lettrade.exchange.live.trade.LivePosition.from_raw","title":"from_raw  <code>abstractmethod</code> <code>classmethod</code>","text":"<pre><code>from_raw(\n    raw,\n    exchange: LiveExchange,\n    state: PositionState = PositionState.Open,\n    **kwargs\n) -&gt; LivePosition\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>raw</code>               (<code>_type_</code>)           \u2013            <p>description</p> </li> <li> <code>exchange</code>               (<code>LiveExchange</code>)           \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>LivePosition</code> (              <code>LivePosition</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/live/trade.py</code> <pre><code>@classmethod\n@abstractmethod\ndef from_raw(\n    cls,\n    raw,\n    exchange: \"LiveExchange\",\n    state: PositionState = PositionState.Open,\n    **kwargs,\n) -&gt; \"LivePosition\":\n    \"\"\"_summary_\n\n    Args:\n        raw (_type_): _description_\n        exchange (LiveExchange): _description_\n\n    Returns:\n        LivePosition: _description_\n    \"\"\"\n    raise NotImplementedError(cls)\n</code></pre>"},{"location":"reference/exchange/live/trade/#lettrade.exchange.live.trade.LivePosition.merge","title":"merge","text":"<pre><code>merge(other: LivePosition) -&gt; bool\n</code></pre> <p>Merge LivePosition from another</p> <p>Parameters:</p> <ul> <li> <code>other</code>               (<code>LivePosition</code>)           \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/live/trade.py</code> <pre><code>def merge(self, other: \"LivePosition\") -&gt; bool:\n    \"\"\"Merge LivePosition from another\n\n    Args:\n        other (LivePosition): _description_\n\n    Returns:\n        bool: _description_\n    \"\"\"\n    if not super().merge(other):\n        return False\n    self.raw = other.raw\n    return True\n</code></pre>"},{"location":"reference/exchange/live/trade/#lettrade.exchange.live.trade.LivePosition.update","title":"update  <code>abstractmethod</code>","text":"<pre><code>update(\n    sl: float | None = None,\n    tp: float | None = None,\n    caller: float | None = None,\n    **kwargs\n)\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>sl</code>               (<code>float | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>tp</code>               (<code>float | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>caller</code>               (<code>float | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>NotImplementedError</code>             \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/live/trade.py</code> <pre><code>@abstractmethod\ndef update(\n    self,\n    sl: float | None = None,\n    tp: float | None = None,\n    caller: float | None = None,\n    **kwargs,\n):\n    \"\"\"_summary_\n\n    Args:\n        sl (float | None, optional): _description_. Defaults to None.\n        tp (float | None, optional): _description_. Defaults to None.\n        caller (float | None, optional): _description_. Defaults to None.\n\n    Raises:\n        NotImplementedError: _description_\n    \"\"\"\n    raise NotImplementedError(type(self))\n</code></pre>"},{"location":"reference/exchange/metatrader/","title":"Index","text":""},{"location":"reference/exchange/metatrader/#lettrade.exchange.metatrader","title":"metatrader","text":""},{"location":"reference/exchange/metatrader/api/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> api","text":""},{"location":"reference/exchange/metatrader/api/#lettrade.exchange.metatrader.api","title":"api","text":""},{"location":"reference/exchange/metatrader/api/#lettrade.exchange.metatrader.api.MetaTraderAPI","title":"MetaTraderAPI","text":"<pre><code>MetaTraderAPI(\n    login: int,\n    password: str,\n    server: str,\n    timeout: int = 60,\n    retry: int = 20,\n    host: str = \"localhost\",\n    port: int = 18812,\n    wine: str | None = None,\n    magic: int = 88888888,\n    **kwargs\n)\n</code></pre> <p>               Bases: <code>LiveAPI</code></p> <p>API to connect MetaTrader 5 Terminal</p> <p>Parameters:</p> <ul> <li> <code>login</code>               (<code>int</code>)           \u2013            <p>description</p> </li> <li> <code>password</code>               (<code>str</code>)           \u2013            <p>description</p> </li> <li> <code>server</code>               (<code>str</code>)           \u2013            <p>description</p> </li> <li> <code>timeout</code>               (<code>int</code>, default:                   <code>60</code> )           \u2013            <p>description. Defaults to 60.</p> </li> <li> <code>retry</code>               (<code>int</code>, default:                   <code>20</code> )           \u2013            <p>description. Defaults to 20.</p> </li> <li> <code>host</code>               (<code>str</code>, default:                   <code>'localhost'</code> )           \u2013            <p>description. Defaults to \"localhost\".</p> </li> <li> <code>port</code>               (<code>int</code>, default:                   <code>18812</code> )           \u2013            <p>description. Defaults to 18812.</p> </li> <li> <code>wine</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>magic</code>               (<code>int</code>, default:                   <code>88888888</code> )           \u2013            <p>description. Defaults to 88888888.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>ConnectionRefusedError</code>             \u2013            <p>description</p> </li> <li> <code>RuntimeError</code>             \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/metatrader/api.py</code> <pre><code>def __init__(\n    self,\n    login: int,\n    password: str,\n    server: str,\n    timeout: int = 60,\n    retry: int = 20,\n    host: str = \"localhost\",\n    port: int = 18812,\n    wine: str | None = None,\n    magic: int = 88888888,\n    **kwargs,\n):\n    \"\"\"_summary_\n\n    Args:\n        login (int): _description_\n        password (str): _description_\n        server (str): _description_\n        timeout (int, optional): _description_. Defaults to 60.\n        retry (int, optional): _description_. Defaults to 20.\n        host (str, optional): _description_. Defaults to \"localhost\".\n        port (int, optional): _description_. Defaults to 18812.\n        wine (str | None, optional): _description_. Defaults to None.\n        magic (int, optional): _description_. Defaults to 88888888.\n\n    Raises:\n        ConnectionRefusedError: _description_\n        RuntimeError: _description_\n    \"\"\"\n    # Parameters\n    self._config = kwargs\n    self._magic = magic\n\n    self._load_history_since = datetime.now() - timedelta(days=7)\n    self._deal_time_checked = datetime.now() - timedelta(days=1)\n    self._orders_stored = dict()\n    self._executions_stored = dict()\n    self._positions_stored = dict()\n\n    # Update config\n    self._config.update(\n        host=host,\n        port=port,\n        login=int(login),\n        password=password,\n        server=server,\n        wine=wine,\n        retry=retry,\n    )\n\n    # Start enviroments\n    self._refresh_environments()\n</code></pre>"},{"location":"reference/exchange/metatrader/api/#lettrade.exchange.metatrader.api.MetaTraderAPI.account","title":"account","text":"<pre><code>account(**kwargs) -&gt; dict\n</code></pre> <p>Metatrader 5 account information</p> <p>Returns:</p> <ul> <li> <code>dict</code> (              <code>dict</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/metatrader/api.py</code> <pre><code>@mt5_connection\ndef account(self, **kwargs) -&gt; dict:\n    \"\"\"Metatrader 5 account information\n\n    Returns:\n        dict: _description_\n    \"\"\"\n    raw = self._mt5.account_info()\n    if raw is None:\n        raise _RetryException()\n    return raw\n</code></pre>"},{"location":"reference/exchange/metatrader/api/#lettrade.exchange.metatrader.api.MetaTraderAPI.bars","title":"bars","text":"<pre><code>bars(\n    symbol,\n    timeframe,\n    since: int | datetime | None = 0,\n    to: int | datetime | None = 1000,\n    **kwargs\n) -&gt; list[list]\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>symbol</code>               (<code>_type_</code>)           \u2013            <p>description</p> </li> <li> <code>timeframe</code>               (<code>_type_</code>)           \u2013            <p>description</p> </li> <li> <code>since</code>               (<code>int | datetime | None</code>, default:                   <code>0</code> )           \u2013            <p>description. Defaults to 0.</p> </li> <li> <code>to</code>               (<code>int | datetime | None</code>, default:                   <code>1000</code> )           \u2013            <p>description. Defaults to 1_000.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[list]</code>           \u2013            <p>list[list]: description</p> </li> </ul> Source code in <code>lettrade/exchange/metatrader/api.py</code> <pre><code>@mt5_connection\ndef bars(\n    self,\n    symbol,\n    timeframe,\n    since: int | datetime | None = 0,\n    to: int | datetime | None = 1_000,\n    **kwargs,\n) -&gt; list[list]:\n    \"\"\"_summary_\n\n    Args:\n        symbol (_type_): _description_\n        timeframe (_type_): _description_\n        since (int | datetime | None, optional): _description_. Defaults to 0.\n        to (int | datetime | None, optional): _description_. Defaults to 1_000.\n\n    Returns:\n        list[list]: _description_\n    \"\"\"\n    timeframe = TIMEFRAME_L2M[timeframe]\n\n    if isinstance(since, int):\n        raw = self._mt5.copy_rates_from_pos(symbol, timeframe, since, to)\n\n    elif isinstance(to, int):\n        raw = self._mt5.copy_rates_from(symbol, timeframe, since, to)\n    else:\n        raw = self._mt5.copy_rates_range(symbol, timeframe, since, to)\n\n    if raw is None:\n        raise _RetryException()\n    return raw\n</code></pre>"},{"location":"reference/exchange/metatrader/api/#lettrade.exchange.metatrader.api.MetaTraderAPI.do_order_open","title":"do_order_open","text":"<pre><code>do_order_open(\n    symbol: str,\n    size: float,\n    type: int,\n    price: float,\n    sl: float = None,\n    tp: float = None,\n    tag: str | None = None,\n    deviation: int = 10,\n    **kwargs\n) -&gt; dict\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>symbol</code>               (<code>str</code>)           \u2013            <p>description</p> </li> <li> <code>size</code>               (<code>float</code>)           \u2013            <p>description</p> </li> <li> <code>type</code>               (<code>int</code>)           \u2013            <p>description</p> </li> <li> <code>price</code>               (<code>float</code>)           \u2013            <p>description</p> </li> <li> <code>sl</code>               (<code>float</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>tp</code>               (<code>float</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>tag</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to \"\".</p> </li> <li> <code>deviation</code>               (<code>int</code>, default:                   <code>10</code> )           \u2013            <p>description. Defaults to 10.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict</code> (              <code>dict</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/metatrader/api.py</code> <pre><code>@mt5_connection\ndef do_order_open(\n    self,\n    symbol: str,\n    size: float,\n    type: int,\n    price: float,\n    sl: float = None,\n    tp: float = None,\n    tag: str | None = None,\n    deviation: int = 10,\n    **kwargs,\n) -&gt; dict:\n    \"\"\"_summary_\n\n    Args:\n        symbol (str): _description_\n        size (float): _description_\n        type (int): _description_\n        price (float): _description_\n        sl (float, optional): _description_. Defaults to None.\n        tp (float, optional): _description_. Defaults to None.\n        tag (str, optional): _description_. Defaults to \"\".\n        deviation (int, optional): _description_. Defaults to 10.\n\n    Returns:\n        dict: _description_\n    \"\"\"\n    request = self._parse_trade_request(\n        symbol=symbol,\n        size=size,\n        type=type,\n        price=price,\n        sl=sl,\n        tp=tp,\n        tag=tag,\n        deviation=deviation,\n    )\n    raw = self._mt5.order_send(request)\n\n    # Retry\n    if raw is None:\n        raise _RetryException()\n\n    raw = self._parse_trade_send_response(raw)\n    if raw.code != 0:\n        raise LetLiveOrderInvalidException(raw.error, raw=raw)\n\n    return raw\n</code></pre>"},{"location":"reference/exchange/metatrader/api/#lettrade.exchange.metatrader.api.MetaTraderAPI.do_position_update","title":"do_position_update","text":"<pre><code>do_position_update(\n    id: int,\n    sl: float | None = None,\n    tp: float | None = None,\n    **kwargs\n) -&gt; dict\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>id</code>               (<code>int</code>)           \u2013            <p>description</p> </li> <li> <code>sl</code>               (<code>float | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>tp</code>               (<code>float | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict</code> (              <code>dict</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/metatrader/api.py</code> <pre><code>@mt5_connection\ndef do_position_update(\n    self,\n    id: int,\n    # symbol: str,\n    sl: float | None = None,\n    tp: float | None = None,\n    **kwargs,\n) -&gt; dict:\n    \"\"\"_summary_\n\n    Args:\n        id (int): _description_\n        sl (float | None, optional): _description_. Defaults to None.\n        tp (float | None, optional): _description_. Defaults to None.\n\n    Returns:\n        dict: _description_\n    \"\"\"\n    request = self._parse_trade_request(\n        position=id,\n        # symbol=symbol,\n        sl=sl,\n        tp=tp,\n        action=MT5.TRADE_ACTION_SLTP,\n        **kwargs,\n    )\n    raw = self._mt5.order_send(request)\n\n    # Retry\n    if raw is None:\n        raise _RetryException()\n\n    return self._parse_trade_send_response(raw)\n</code></pre>"},{"location":"reference/exchange/metatrader/api/#lettrade.exchange.metatrader.api.MetaTraderAPI.execution_get","title":"execution_get","text":"<pre><code>execution_get(id: str, **kwargs) -&gt; dict\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>id</code>               (<code>str</code>)           \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict</code> (              <code>dict</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/metatrader/api.py</code> <pre><code>@mt5_connection\ndef execution_get(self, id: str, **kwargs) -&gt; dict:\n    \"\"\"_summary_\n\n    Args:\n        id (str): _description_\n\n    Returns:\n        dict: _description_\n    \"\"\"\n    if id is not None:\n        kwargs[\"ticket\"] = int(id)\n\n    raws = self._mt5.history_deals_get(**kwargs)\n\n    # Retry\n    if raws is None:\n        raise _RetryException()\n\n    if __debug__:\n        logger.debug(\"Raw execution: %s\", raws)\n\n    return self._execution_parse_response(raws[0])\n</code></pre>"},{"location":"reference/exchange/metatrader/api/#lettrade.exchange.metatrader.api.MetaTraderAPI.executions_get","title":"executions_get","text":"<pre><code>executions_get(\n    position_id: str | None = None,\n    search: str | None = None,\n    **kwargs\n) -&gt; list[dict]\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>position_id</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>search</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[dict]</code>           \u2013            <p>list[dict]: description</p> </li> </ul> Source code in <code>lettrade/exchange/metatrader/api.py</code> <pre><code>@mt5_connection\ndef executions_get(\n    self,\n    position_id: str | None = None,\n    search: str | None = None,\n    **kwargs,\n) -&gt; list[dict]:\n    \"\"\"_summary_\n\n    Args:\n        position_id (str | None, optional): _description_. Defaults to None.\n        search (str | None, optional): _description_. Defaults to None.\n\n    Returns:\n        list[dict]: _description_\n    \"\"\"\n    if position_id is not None:\n        kwargs[\"position\"] = int(position_id)\n    if search is not None:\n        kwargs[\"group\"] = search\n\n    raws = self._mt5.history_deals_get(**kwargs)\n\n    # Retry\n    if raws is None:\n        raise _RetryException()\n\n    # May be wrong account when position exist but no execution\n    if not raws and position_id is not None:\n        logger.warning(\n            \"Execution retry check connection when position=%s exist but no execution\",\n            position_id,\n        )\n\n        # Retry check mt5 connection\n        raise _RetryException()\n\n    if __debug__:\n        logger.debug(\"Raw executions: %s\", raws)\n\n    return [self._execution_parse_response(raw) for raw in raws]\n</code></pre>"},{"location":"reference/exchange/metatrader/api/#lettrade.exchange.metatrader.api.MetaTraderAPI.executions_total","title":"executions_total","text":"<pre><code>executions_total(\n    since: datetime | None = None,\n    to: datetime | None = None,\n    **kwargs\n) -&gt; int\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>since</code>               (<code>datetime | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>to</code>               (<code>datetime | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>int</code> (              <code>int</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/metatrader/api.py</code> <pre><code>@mt5_connection\ndef executions_total(\n    self,\n    since: datetime | None = None,\n    to: datetime | None = None,\n    **kwargs,\n) -&gt; int:\n    \"\"\"_summary_\n\n    Args:\n        since (datetime | None, optional): _description_. Defaults to None.\n        to (datetime | None, optional): _description_. Defaults to None.\n\n    Returns:\n        int: _description_\n    \"\"\"\n    if since is not None:\n        kwargs[\"date_from\"] = since\n    if to is not None:\n        kwargs[\"date_to\"] = to\n\n    raw = self._mt5.history_deals_total(**kwargs)\n    if raw is None:\n        raise _RetryException()\n    return raw\n</code></pre>"},{"location":"reference/exchange/metatrader/api/#lettrade.exchange.metatrader.api.MetaTraderAPI.heartbeat","title":"heartbeat","text":"<pre><code>heartbeat() -&gt; bool\n</code></pre> <p>Heartbeat</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/metatrader/api.py</code> <pre><code>def heartbeat(self) -&gt; bool:\n    \"\"\"Heartbeat\n\n    Returns:\n        bool: _description_\n    \"\"\"\n    return True\n</code></pre>"},{"location":"reference/exchange/metatrader/api/#lettrade.exchange.metatrader.api.MetaTraderAPI.init","title":"init","text":"<pre><code>init(**kwargs)\n</code></pre> Source code in <code>lettrade/exchange/live/api.py</code> <pre><code>def init(self, **kwargs):\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/metatrader/api/#lettrade.exchange.metatrader.api.MetaTraderAPI.market","title":"market","text":"<pre><code>market(symbol: str, **kwargs) -&gt; dict\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>symbol</code>               (<code>str</code>)           \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict</code> (              <code>dict</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/metatrader/api.py</code> <pre><code>@mt5_connection\ndef market(self, symbol: str, **kwargs) -&gt; dict:\n    \"\"\"_summary_\n\n    Args:\n        symbol (str): _description_\n\n    Returns:\n        dict: _description_\n    \"\"\"\n    raw = self._mt5.symbol_info(symbol)\n    if raw is None:\n        raise _RetryException()\n    return raw\n</code></pre>"},{"location":"reference/exchange/metatrader/api/#lettrade.exchange.metatrader.api.MetaTraderAPI.markets","title":"markets","text":"<pre><code>markets(search: str | None = None, **kwargs) -&gt; list[dict]\n</code></pre> <p>The filter for arranging a group of necessary symbols. If the group is specified, the function returns only symbols meeting a specified criteria.</p> Search example <p>Get symbols whose names do not contain USD, EUR, JPY and GBP <code>search=\"*,!*USD*,!*EUR*,!*JPY*,!*GBP*\"</code></p> <p>Parameters:</p> <ul> <li> <code>search</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[dict]</code>           \u2013            <p>list[dict]: description</p> </li> </ul> Source code in <code>lettrade/exchange/metatrader/api.py</code> <pre><code>@mt5_connection\ndef markets(self, search: str | None = None, **kwargs) -&gt; list[dict]:\n    \"\"\"The filter for arranging a group of necessary symbols.\n    If the group is specified, the function returns only symbols meeting a specified criteria.\n\n    Search example:\n        Get symbols whose names do not contain USD, EUR, JPY and GBP\n        `search=\"*,!*USD*,!*EUR*,!*JPY*,!*GBP*\"`\n\n    Args:\n        search (str | None, optional): _description_. Defaults to None.\n\n    Returns:\n        list[dict]: _description_\n    \"\"\"\n    raw = self._mt5.symbols_get(search)\n    if raw is None:\n        raise _RetryException()\n    return raw\n</code></pre>"},{"location":"reference/exchange/metatrader/api/#lettrade.exchange.metatrader.api.MetaTraderAPI.next","title":"next","text":"<pre><code>next()\n</code></pre> <p>Next tick action</p> Source code in <code>lettrade/exchange/metatrader/api.py</code> <pre><code>def next(self):\n    \"\"\"Next tick action\"\"\"\n    self._check_transaction_events()\n</code></pre>"},{"location":"reference/exchange/metatrader/api/#lettrade.exchange.metatrader.api.MetaTraderAPI.order_open","title":"order_open","text":"<pre><code>order_open(order: MetaTraderOrder) -&gt; dict\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>order</code>               (<code>MetaTraderOrder</code>)           \u2013            <p>description</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>NotImplementedError</code>             \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict</code> (              <code>dict</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/metatrader/api.py</code> <pre><code>def order_open(self, order: \"MetaTraderOrder\") -&gt; dict:\n    \"\"\"_summary_\n\n    Args:\n        order (MetaTraderOrder): _description_\n\n    Raises:\n        NotImplementedError: _description_\n\n    Returns:\n        dict: _description_\n    \"\"\"\n    match order.type:\n        case OrderType.Limit:\n            price = order.limit_price\n        case OrderType.Stop:\n            price = order.stop_price\n        case OrderType.Market:\n            tick = self.tick_get(order.data.symbol)\n            price = tick.ask if order.is_long else tick.bid\n        case _:\n            raise NotImplementedError(\n                f\"Open order type {order.type} is not implement yet\"\n            )\n\n    type = MT5.ORDER_TYPE_BUY if order.is_long else MT5.ORDER_TYPE_SELL\n\n    return self.do_order_open(\n        symbol=order.data.symbol,\n        type=type,\n        size=order.size,\n        price=price,\n        sl=order.sl,\n        tp=order.tp,\n        tag=order.tag,\n    )\n</code></pre>"},{"location":"reference/exchange/metatrader/api/#lettrade.exchange.metatrader.api.MetaTraderAPI.orders_get","title":"orders_get","text":"<pre><code>orders_get(\n    id: str | None = None,\n    symbol: str | None = None,\n    **kwargs\n) -&gt; list[dict]\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>id</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>symbol</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[dict]</code>           \u2013            <p>list[dict]: description</p> </li> </ul> Source code in <code>lettrade/exchange/metatrader/api.py</code> <pre><code>@mt5_connection\ndef orders_get(\n    self,\n    id: str | None = None,\n    symbol: str | None = None,\n    **kwargs,\n) -&gt; list[dict]:\n    \"\"\"_summary_\n\n    Args:\n        id (str | None, optional): _description_. Defaults to None.\n        symbol (str | None, optional): _description_. Defaults to None.\n\n    Returns:\n        list[dict]: _description_\n    \"\"\"\n    if id is not None:\n        kwargs[\"ticket\"] = int(id)\n    if symbol is not None:\n        kwargs[\"symbol\"] = symbol\n\n    raws = self._mt5.orders_get(**kwargs)\n\n    # Return None to retry\n    if raws is None:\n        raise _RetryException()\n\n    return [self._order_parse_response(raw) for raw in raws]\n</code></pre>"},{"location":"reference/exchange/metatrader/api/#lettrade.exchange.metatrader.api.MetaTraderAPI.orders_history_get","title":"orders_history_get","text":"<pre><code>orders_history_get(\n    id: str | None = None,\n    position_id: str | None = None,\n    since: datetime | None = None,\n    to: datetime | None = None,\n    **kwargs\n) -&gt; list[dict]\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>id</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>position_id</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>since</code>               (<code>datetime | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>to</code>               (<code>datetime | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[dict]</code>           \u2013            <p>list[dict]: description</p> </li> </ul> Source code in <code>lettrade/exchange/metatrader/api.py</code> <pre><code>@mt5_connection\ndef orders_history_get(\n    self,\n    id: str | None = None,\n    position_id: str | None = None,\n    since: datetime | None = None,\n    to: datetime | None = None,\n    **kwargs,\n) -&gt; list[dict]:\n    \"\"\"_summary_\n\n    Args:\n        id (str | None, optional): _description_. Defaults to None.\n        position_id (str | None, optional): _description_. Defaults to None.\n        since (datetime | None, optional): _description_. Defaults to None.\n        to (datetime | None, optional): _description_. Defaults to None.\n\n    Returns:\n        list[dict]: _description_\n    \"\"\"\n    if id is not None:\n        kwargs[\"ticket\"] = int(id)\n    if position_id is not None:\n        kwargs[\"position\"] = int(position_id)\n    if since is not None:\n        kwargs[\"date_from\"] = since\n    if to is not None:\n        kwargs[\"date_to\"] = to\n\n    raws = self._mt5.history_orders_get(**kwargs)\n\n    # Retry\n    if raws is None:\n        raise _RetryException()\n\n    return [self._order_parse_response(raw) for raw in raws]\n</code></pre>"},{"location":"reference/exchange/metatrader/api/#lettrade.exchange.metatrader.api.MetaTraderAPI.orders_history_total","title":"orders_history_total","text":"<pre><code>orders_history_total(\n    since: datetime | None = None,\n    to: datetime | None = None,\n    **kwargs\n) -&gt; int\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>since</code>               (<code>datetime | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>to</code>               (<code>datetime | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>int</code> (              <code>int</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/metatrader/api.py</code> <pre><code>@mt5_connection\ndef orders_history_total(\n    self,\n    since: datetime | None = None,\n    to: datetime | None = None,\n    **kwargs,\n) -&gt; int:\n    \"\"\"_summary_\n\n    Args:\n        since (datetime | None, optional): _description_. Defaults to None.\n        to (datetime | None, optional): _description_. Defaults to None.\n\n    Returns:\n        int: _description_\n    \"\"\"\n    if since is not None:\n        kwargs[\"date_from\"] = since\n    if to is not None:\n        kwargs[\"date_to\"] = to\n\n    raw = self._mt5.history_orders_get(**kwargs)\n    if raw is None:\n        raise _RetryException()\n    return raw\n</code></pre>"},{"location":"reference/exchange/metatrader/api/#lettrade.exchange.metatrader.api.MetaTraderAPI.orders_total","title":"orders_total","text":"<pre><code>orders_total(\n    since: datetime | None = None,\n    to: datetime | None = None,\n    **kwargs\n) -&gt; int\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>since</code>               (<code>datetime | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>to</code>               (<code>datetime | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>int</code> (              <code>int</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/metatrader/api.py</code> <pre><code>@mt5_connection\ndef orders_total(\n    self,\n    since: datetime | None = None,\n    to: datetime | None = None,\n    **kwargs,\n) -&gt; int:\n    \"\"\"_summary_\n\n    Args:\n        since (datetime | None, optional): _description_. Defaults to None.\n        to (datetime | None, optional): _description_. Defaults to None.\n\n    Returns:\n        int: _description_\n    \"\"\"\n    if since is not None:\n        kwargs[\"date_from\"] = since\n    if to is not None:\n        kwargs[\"date_to\"] = to\n\n    raw = self._mt5.orders_total(**kwargs)\n    if raw is None:\n        raise _RetryException()\n\n    return raw\n</code></pre>"},{"location":"reference/exchange/metatrader/api/#lettrade.exchange.metatrader.api.MetaTraderAPI.position_close","title":"position_close","text":"<pre><code>position_close(\n    position: MetaTraderPosition, **kwargs\n) -&gt; dict\n</code></pre> <p>Close a position</p> <p>Parameters:</p> <ul> <li> <code>position</code>               (<code>MetaTraderPosition</code>)           \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict</code> (              <code>dict</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/metatrader/api.py</code> <pre><code>def position_close(self, position: \"MetaTraderPosition\", **kwargs) -&gt; dict:\n    \"\"\"Close a position\n\n    Args:\n        position (MetaTraderPosition): _description_\n\n    Returns:\n        dict: _description_\n    \"\"\"\n    tick = self.tick_get(position.data.symbol)\n    price = tick.ask if position.is_long else tick.bid\n\n    # Opposite with position side\n    type = MT5.ORDER_TYPE_SELL if position.is_long else MT5.ORDER_TYPE_BUY\n\n    return self.do_position_close(\n        id=int(position.id),\n        symbol=position.data.symbol,\n        type=type,\n        size=position.size,\n        price=price,\n        **kwargs,\n    )\n</code></pre>"},{"location":"reference/exchange/metatrader/api/#lettrade.exchange.metatrader.api.MetaTraderAPI.position_update","title":"position_update","text":"<pre><code>position_update(\n    position: MetaTraderPosition,\n    sl: float | None = None,\n    tp: float | None = None,\n    **kwargs\n) -&gt; dict\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>position</code>               (<code>MetaTraderPosition</code>)           \u2013            <p>description</p> </li> <li> <code>sl</code>               (<code>float | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>tp</code>               (<code>float | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict</code> (              <code>dict</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/metatrader/api.py</code> <pre><code>def position_update(\n    self,\n    position: \"MetaTraderPosition\",\n    sl: float | None = None,\n    tp: float | None = None,\n    **kwargs,\n) -&gt; dict:\n    \"\"\"_summary_\n\n    Args:\n        position (MetaTraderPosition): _description_\n        sl (float | None, optional): _description_. Defaults to None.\n        tp (float | None, optional): _description_. Defaults to None.\n\n    Returns:\n        dict: _description_\n    \"\"\"\n    return self.do_position_update(\n        id=int(position.id),\n        symbol=position.data.symbol,\n        sl=sl,\n        tp=tp,\n        **kwargs,\n    )\n</code></pre>"},{"location":"reference/exchange/metatrader/api/#lettrade.exchange.metatrader.api.MetaTraderAPI.positions_get","title":"positions_get","text":"<pre><code>positions_get(\n    id: str = None, symbol: str = None, **kwargs\n) -&gt; list[dict]\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>id</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>symbol</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[dict]</code>           \u2013            <p>list[dict]: description</p> </li> </ul> Source code in <code>lettrade/exchange/metatrader/api.py</code> <pre><code>@mt5_connection\ndef positions_get(\n    self,\n    id: str = None,\n    symbol: str = None,\n    **kwargs,\n) -&gt; list[dict]:\n    \"\"\"_summary_\n\n    Args:\n        id (str, optional): _description_. Defaults to None.\n        symbol (str, optional): _description_. Defaults to None.\n\n    Returns:\n        list[dict]: _description_\n    \"\"\"\n    if id is not None:\n        kwargs.update(ticket=int(id))\n    if symbol is not None:\n        kwargs.update(symbol=symbol)\n\n    raws = self._mt5.positions_get(**kwargs)\n\n    # Retry\n    if raws is None:\n        raise _RetryException()\n\n    return [self._position_parse_response(raw) for raw in raws]\n</code></pre>"},{"location":"reference/exchange/metatrader/api/#lettrade.exchange.metatrader.api.MetaTraderAPI.positions_total","title":"positions_total","text":"<pre><code>positions_total(\n    since: datetime | None = None,\n    to: datetime | None = None,\n    **kwargs\n) -&gt; int\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>since</code>               (<code>datetime | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>to</code>               (<code>datetime | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>int</code> (              <code>int</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/metatrader/api.py</code> <pre><code>@mt5_connection\ndef positions_total(\n    self,\n    since: datetime | None = None,\n    to: datetime | None = None,\n    **kwargs,\n) -&gt; int:\n    \"\"\"_summary_\n\n    Args:\n        since (datetime | None, optional): _description_. Defaults to None.\n        to (datetime | None, optional): _description_. Defaults to None.\n\n    Returns:\n        int: _description_\n    \"\"\"\n    if since is not None:\n        kwargs[\"date_from\"] = since\n    if to is not None:\n        kwargs[\"date_to\"] = to\n\n    raw = self._mt5.positions_total(**kwargs)\n    if raw is None:\n        raise _RetryException()\n    return raw\n</code></pre>"},{"location":"reference/exchange/metatrader/api/#lettrade.exchange.metatrader.api.MetaTraderAPI.start","title":"start","text":"<pre><code>start(exchange: MetaTraderExchange)\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>exchange</code>               (<code>MetaTraderExchange</code>)           \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/metatrader/api.py</code> <pre><code>def start(self, exchange: \"MetaTraderExchange\"):\n    \"\"\"_summary_\n\n    Args:\n        exchange (MetaTraderExchange): _description_\n    \"\"\"\n    self._exchange = exchange\n\n    self._load_history_transactions()\n    self._check_transaction_events()\n</code></pre>"},{"location":"reference/exchange/metatrader/api/#lettrade.exchange.metatrader.api.MetaTraderAPI.stop","title":"stop","text":"<pre><code>stop()\n</code></pre> <p>Stop MetaTrader 5 Terminal</p> Source code in <code>lettrade/exchange/metatrader/api.py</code> <pre><code>def stop(self):\n    \"\"\"Stop MetaTrader 5 Terminal\"\"\"\n    self._mt5.shutdown()\n</code></pre>"},{"location":"reference/exchange/metatrader/api/#lettrade.exchange.metatrader.api.MetaTraderAPI.tick_get","title":"tick_get","text":"<pre><code>tick_get(symbol: str, **kwargs) -&gt; dict\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>symbol</code>               (<code>str</code>)           \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict</code> (              <code>dict</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/metatrader/api.py</code> <pre><code>@mt5_connection\ndef tick_get(self, symbol: str, **kwargs) -&gt; dict:\n    \"\"\"_summary_\n\n    Args:\n        symbol (str): _description_\n\n    Returns:\n        dict: _description_\n    \"\"\"\n    raw = self._mt5.symbol_info_tick(symbol)\n    if raw is None:\n        raise _RetryException()\n    return raw\n</code></pre>"},{"location":"reference/exchange/metatrader/metatrader/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> metatrader","text":""},{"location":"reference/exchange/metatrader/metatrader/#lettrade.exchange.metatrader.metatrader","title":"metatrader","text":""},{"location":"reference/exchange/metatrader/metatrader/#lettrade.exchange.metatrader.metatrader.LetTradeMetaTrader","title":"LetTradeMetaTrader","text":"<pre><code>LetTradeMetaTrader(\n    feeder: type[\n        MetaTraderDataFeeder\n    ] = MetaTraderDataFeeder,\n    exchange: type[MetaTraderExchange] = MetaTraderExchange,\n    account: type[MetaTraderAccount] = MetaTraderAccount,\n    **kwargs\n)\n</code></pre> <p>               Bases: <code>LetTradeLive</code></p> <p>Help to maintain MetaTrader bots</p> <p>Parameters:</p> <ul> <li> <code>feeder</code>               (<code>Type[MetaTraderDataFeeder]</code>, default:                   <code>MetaTraderDataFeeder</code> )           \u2013            <p>description. Defaults to MetaTraderDataFeeder.</p> </li> <li> <code>exchange</code>               (<code>Type[MetaTraderExchange]</code>, default:                   <code>MetaTraderExchange</code> )           \u2013            <p>description. Defaults to MetaTraderExchange.</p> </li> <li> <code>account</code>               (<code>Type[MetaTraderAccount]</code>, default:                   <code>MetaTraderAccount</code> )           \u2013            <p>description. Defaults to MetaTraderAccount.</p> </li> </ul> Source code in <code>lettrade/exchange/metatrader/metatrader.py</code> <pre><code>def __init__(\n    self,\n    feeder: type[MetaTraderDataFeeder] = MetaTraderDataFeeder,\n    exchange: type[MetaTraderExchange] = MetaTraderExchange,\n    account: type[MetaTraderAccount] = MetaTraderAccount,\n    **kwargs,\n) -&gt; None:\n    \"\"\"_summary_\n\n    Args:\n        feeder (Type[MetaTraderDataFeeder], optional): _description_. Defaults to MetaTraderDataFeeder.\n        exchange (Type[MetaTraderExchange], optional): _description_. Defaults to MetaTraderExchange.\n        account (Type[MetaTraderAccount], optional): _description_. Defaults to MetaTraderAccount.\n    \"\"\"\n    super().__init__(\n        feeder=feeder,\n        exchange=exchange,\n        account=account,\n        **kwargs,\n    )\n</code></pre>"},{"location":"reference/exchange/metatrader/metatrader/#lettrade.exchange.metatrader.metatrader.LetTradeMetaTrader.plot","title":"plot","text":"<pre><code>plot(*args, jump: dict | None = None, **kwargs)\n</code></pre> <p>Plot strategy/optimize result</p> BotPlotter <p>Miror of BotPlotter.plot(). Plotly implement PlotlyBotPlotter.plot().</p> <p>Args:     <code>jump</code> (dict | None, optional): Miror of BotPlotter.jump()</p> <p>Example:     - Jump to position_id         <pre><code>lt.plot(\n    jump=dict(position_id=1, range=300),\n    layout=dict(height=2000),\n)\n</code></pre></p> OptimizePlotter <p>Miror of OptimizePlotter.plot(). Plotly implement PlotlyOptimizePlotter.plot().</p> <p>Example:     -         <pre><code>lt.plot(layout=dict(height=2000))\n</code></pre></p> Source code in <code>lettrade/lettrade.py</code> <pre><code>def plot(self, *args, jump: dict | None = None, **kwargs):\n    \"\"\"Plot strategy/optimize result\n\n    BotPlotter:\n        Miror of [BotPlotter.plot()](site:/reference/plot/bot/#lettrade.plot.bot.BotPlotter.plot).\n        Plotly implement [PlotlyBotPlotter.plot()](site:/reference/plot/plotly/plotly/#lettrade.plot.plotly.plotly.PlotlyBotPlotter.plot).\n\n        Args:\n            `jump` (dict | None, optional): Miror of [BotPlotter.jump()](site:/reference/plot/bot/#lettrade.plot.bot.BotPlotter.jump)\n\n        Example:\n            - Jump to position_id\n                ```python\n                lt.plot(\n                    jump=dict(position_id=1, range=300),\n                    layout=dict(height=2000),\n                )\n                ```\n\n    OptimizePlotter:\n        Miror of [OptimizePlotter.plot()](site:/reference/plot/optimize/#lettrade.plot.optimize.OptimizePlotter.plot).\n        Plotly implement [PlotlyOptimizePlotter.plot()](site:/reference/exchange/backtest/plotly/optimize/#lettrade.exchange.backtest.plotly.optimize.PlotlyOptimizePlotter.plot).\n\n        Example:\n            -\n                ```python\n                lt.plot(layout=dict(height=2000))\n                ```\n    \"\"\"\n    if __debug__:\n        from .utils.docs import is_docs_session\n\n        if is_docs_session():\n            return\n\n    self.plotter.plot(*args, jump=jump, **kwargs)\n</code></pre>"},{"location":"reference/exchange/metatrader/metatrader/#lettrade.exchange.metatrader.metatrader.LetTradeMetaTrader.run","title":"run","text":"<pre><code>run(worker: int | None = None, **kwargs)\n</code></pre> <p>Run strategy in single or multiple processing</p> <p>Parameters:</p> <ul> <li> <code>worker</code>               (<code>int | None</code>, default:                   <code>None</code> )           \u2013            <p>Number of processing. Defaults to None.</p> </li> </ul> Source code in <code>lettrade/lettrade.py</code> <pre><code>def run(self, worker: int | None = None, **kwargs):\n    \"\"\"Run strategy in single or multiple processing\n\n    Args:\n        worker (int | None, optional): Number of processing. Defaults to None.\n    \"\"\"\n    if worker or isinstance(self.data, list):\n        if not isinstance(self.data, list):\n            # self.data = self.datas\n            self.datas = [self.data]\n\n        worker = self._max_workers(worker)\n\n        self._multiprocess()\n\n        datas_source = self._kwargs.pop(\"datas\")\n        with ProcessPoolExecutor(max_workers=worker) as executor:\n            futures = [\n                executor.submit(\n                    self._bot_cls.run_bot,\n                    datas=datas,\n                    id=i,\n                    result=\"str\",\n                    **self._kwargs,\n                )\n                for i, datas in enumerate(datas_source)\n            ]\n            for future in futures:\n                result = future.result()\n                print(result)\n    else:\n        self._bot = self._bot_cls.run_bot(\n            bot=self._bot,\n            result=\"bot\",\n            **self._kwargs,\n        )\n        print(str(self._bot.stats))\n</code></pre>"},{"location":"reference/exchange/metatrader/metatrader/#lettrade.exchange.metatrader.metatrader.LetTradeMetaTrader.stop","title":"stop","text":"<pre><code>stop()\n</code></pre> <p>Stop strategy</p> Source code in <code>lettrade/lettrade.py</code> <pre><code>def stop(self):\n    \"\"\"Stop strategy\"\"\"\n    if self._bot is not None:\n        return self._bot.stop()\n    if self.stats:\n        self.stats.stop()\n</code></pre>"},{"location":"reference/exchange/metatrader/metatrader/#lettrade.exchange.metatrader.metatrader.LetTradeMetaTraderBot","title":"LetTradeMetaTraderBot","text":"<pre><code>LetTradeMetaTraderBot(\n    api: LiveAPI | None = LiveAPI, **kwargs\n)\n</code></pre> <p>               Bases: <code>LetTradeLiveBot</code></p> <p>LetTradeBot for MetaTrader</p> Source code in <code>lettrade/exchange/live/live.py</code> <pre><code>def __init__(\n    self,\n    api: LiveAPI | None = LiveAPI,\n    **kwargs,\n) -&gt; None:\n    super().__init__(**kwargs)\n\n    if issubclass(api, LiveAPI):\n        self._api = api(**self._kwargs.get(\"api_kwargs\", {}))\n    else:\n        self._api = api\n\n    self._kwargs.setdefault(\"feeder_kwargs\", dict()).update(api=self._api)\n    self._kwargs.setdefault(\"exchange_kwargs\", dict()).update(api=self._api)\n    self._kwargs.setdefault(\"account_kwargs\", dict()).update(api=self._api)\n\n    for data in self.datas:\n        data._api = self._api\n</code></pre>"},{"location":"reference/exchange/metatrader/metatrader/#lettrade.exchange.metatrader.metatrader.MetaTraderAccount","title":"MetaTraderAccount","text":"<pre><code>MetaTraderAccount(api: LiveAPI, **kwargs)\n</code></pre> <p>               Bases: <code>LiveAccount</code></p> <p>Account for MetaTrader</p> <p>Parameters:</p> <ul> <li> <code>api</code>               (<code>LiveAPI</code>)           \u2013            <p>description</p> </li> <li> <code>**kwargs</code>               (<code>dict</code>, default:                   <code>{}</code> )           \u2013            <p>Mirror of lettrade.account.Account().</p> </li> </ul> Source code in <code>lettrade/exchange/live/account.py</code> <pre><code>def __init__(self, api: LiveAPI, **kwargs) -&gt; None:\n    \"\"\"Account for live trading\n\n    Args:\n        api (LiveAPI): _description_\n        **kwargs (dict, optional): Mirror of [lettrade.account.Account()](site:/reference/account/account/#lettrade.account.account.Account).\n    \"\"\"\n    super().__init__(**kwargs)\n    self._api = api\n\n    self._balance = 0.0\n    self._equity = 0.0\n</code></pre>"},{"location":"reference/exchange/metatrader/metatrader/#lettrade.exchange.metatrader.metatrader.MetaTraderDataFeed","title":"MetaTraderDataFeed","text":"<pre><code>MetaTraderDataFeed(\n    symbol: str,\n    timeframe: str | int | Timedelta,\n    name: str | None = None,\n    api: LiveAPI | None = None,\n    columns: list[str] | None = None,\n    **kwargs\n)\n</code></pre> <p>               Bases: <code>LiveDataFeed</code></p> <p>DataFeed for MetaTrader</p> <p>Parameters:</p> <ul> <li> <code>symbol</code>               (<code>str</code>)           \u2013            <p>Symbol of DataFeed</p> </li> <li> <code>timeframe</code>               (<code>str | int | Timedelta</code>)           \u2013            <p>TimeFrame of DataFeed</p> </li> <li> <code>name</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>Name of DataFeed, auto generate <code>{symbol}_{timeframe}</code> if none. Defaults to None.</p> </li> <li> <code>api</code>               (<code>LiveAPI | None</code>, default:                   <code>None</code> )           \u2013            <p>Live trading API. Defaults to None.</p> </li> <li> <code>columns</code>               (<code>list[str] | None</code>, default:                   <code>None</code> )           \u2013            <p>List of DataFeed columns. Defaults to None.</p> </li> </ul> Source code in <code>lettrade/exchange/live/data.py</code> <pre><code>def __init__(\n    self,\n    symbol: str,\n    timeframe: str | int | pd.Timedelta,\n    name: str | None = None,\n    api: LiveAPI | None = None,\n    columns: list[str] | None = None,\n    **kwargs,\n) -&gt; None:\n    \"\"\"_summary_\n\n    Args:\n        symbol (str): Symbol of DataFeed\n        timeframe (str | int | pd.Timedelta): TimeFrame of DataFeed\n        name (str | None, optional): Name of DataFeed, auto generate `{symbol}_{timeframe}` if none. Defaults to None.\n        api (LiveAPI | None, optional): Live trading API. Defaults to None.\n        columns (list[str] | None, optional): List of DataFeed columns. Defaults to None.\n    \"\"\"\n    super().__init__(\n        name=name or f\"{symbol}_{timeframe}\",\n        timeframe=timeframe,\n        columns=columns or [\"open\", \"high\", \"low\", \"close\", \"volume\"],\n        **kwargs,\n    )\n\n    self.meta.update(symbol=symbol, base_columns=self.columns.copy())\n\n    if api is not None:\n        self._api = api\n</code></pre>"},{"location":"reference/exchange/metatrader/metatrader/#lettrade.exchange.metatrader.metatrader.MetaTraderDataFeed.i","title":"i  <code>property</code>","text":"<pre><code>i: indicator\n</code></pre> <p>Alias to <code>lettrade.indicator</code> and using in DataFeed by call: <code>DataFeed.i.indicator_name()</code></p>"},{"location":"reference/exchange/metatrader/metatrader/#lettrade.exchange.metatrader.metatrader.MetaTraderDataFeed.is_main","title":"is_main  <code>property</code>","text":"<pre><code>is_main: bool\n</code></pre> <p>Property to check DataFeed is main DataFeed or not</p>"},{"location":"reference/exchange/metatrader/metatrader/#lettrade.exchange.metatrader.metatrader.MetaTraderDataFeed.l","title":"l  <code>instance-attribute</code>","text":"<pre><code>l: LetDataFeedWrapper\n</code></pre> <p>LetTrade DataFeed wrapper using to manage index pointer of DataFeed</p>"},{"location":"reference/exchange/metatrader/metatrader/#lettrade.exchange.metatrader.metatrader.MetaTraderDataFeed.meta","title":"meta  <code>property</code>","text":"<pre><code>meta: dict\n</code></pre> <p>Property to get metadata of DataFeed</p>"},{"location":"reference/exchange/metatrader/metatrader/#lettrade.exchange.metatrader.metatrader.MetaTraderDataFeed.name","title":"name  <code>property</code>","text":"<pre><code>name: str\n</code></pre> <p>Property to get name of DataFeed</p>"},{"location":"reference/exchange/metatrader/metatrader/#lettrade.exchange.metatrader.metatrader.MetaTraderDataFeed.now","title":"now  <code>property</code>","text":"<pre><code>now: Timestamp\n</code></pre> <p>Property to get current index value of DataFeed</p>"},{"location":"reference/exchange/metatrader/metatrader/#lettrade.exchange.metatrader.metatrader.MetaTraderDataFeed.symbol","title":"symbol  <code>property</code>","text":"<pre><code>symbol: str\n</code></pre> <p>Property to get symbol of DataFeed</p>"},{"location":"reference/exchange/metatrader/metatrader/#lettrade.exchange.metatrader.metatrader.MetaTraderDataFeed.timeframe","title":"timeframe  <code>property</code>","text":"<pre><code>timeframe: TimeFrame\n</code></pre> <p>Property to get timeframe of DataFeed</p>"},{"location":"reference/exchange/metatrader/metatrader/#lettrade.exchange.metatrader.metatrader.MetaTraderDataFeed.bar","title":"bar","text":"<pre><code>bar(i: int = 0) -&gt; Timestamp\n</code></pre> <p>Get current pd.Timestamp value of DataFeed</p> <p>Parameters:</p> <ul> <li> <code>i</code>               (<code>int</code>, default:                   <code>0</code> )           \u2013            <p>Index. Defaults to 0.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Timestamp</code>           \u2013            <p>pd.Timestamp: description</p> </li> </ul> Source code in <code>lettrade/data/data.py</code> <pre><code>def bar(self, i: int = 0) -&gt; pd.Timestamp:\n    \"\"\"Get current pd.Timestamp value of DataFeed\n\n    Args:\n        i (int, optional): Index. Defaults to 0.\n\n    Returns:\n        pd.Timestamp: _description_\n    \"\"\"\n    return self.l.index[i]\n</code></pre>"},{"location":"reference/exchange/metatrader/metatrader/#lettrade.exchange.metatrader.metatrader.MetaTraderDataFeed.bars","title":"bars","text":"<pre><code>bars(\n    since: int | str | Timestamp, to: int | str | Timestamp\n) -&gt; list\n</code></pre> <p>Get bars from LiveAPI</p> <p>Parameters:</p> <ul> <li> <code>since</code>               (<code>int | str | Timestamp</code>)           \u2013            <p>description</p> </li> <li> <code>to</code>               (<code>int | str | Timestamp</code>)           \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list</code> (              <code>list</code> )          \u2013            <p>list of bar</p> </li> </ul> Source code in <code>lettrade/exchange/live/data.py</code> <pre><code>def bars(\n    self,\n    since: int | str | pd.Timestamp,\n    to: int | str | pd.Timestamp,\n) -&gt; list:\n    \"\"\"Get bars from LiveAPI\n\n    Args:\n        since (int | str | pd.Timestamp): _description_\n        to (int | str | pd.Timestamp): _description_\n\n    Returns:\n        list: list of bar\n    \"\"\"\n    return self._api.bars(\n        symbol=self.symbol,\n        timeframe=self.timeframe.string,\n        since=since,\n        to=to,\n    )\n</code></pre>"},{"location":"reference/exchange/metatrader/metatrader/#lettrade.exchange.metatrader.metatrader.MetaTraderDataFeed.bars_load","title":"bars_load","text":"<pre><code>bars_load(\n    since: int | str | Timestamp, to: int | str | Timestamp\n) -&gt; bool\n</code></pre> <p>Get bar from API and push to DataFeed</p> <p>Parameters:</p> <ul> <li> <code>since</code>               (<code>int | str | Timestamp</code>)           \u2013            <p>description</p> </li> <li> <code>to</code>               (<code>int | str | Timestamp</code>)           \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True if has data, False if no data</p> </li> </ul> Source code in <code>lettrade/exchange/live/data.py</code> <pre><code>def bars_load(\n    self,\n    since: int | str | pd.Timestamp,\n    to: int | str | pd.Timestamp,\n) -&gt; bool:\n    \"\"\"Get bar from API and push to DataFeed\n\n    Args:\n        since (int | str | pd.Timestamp): _description_\n        to (int | str | pd.Timestamp): _description_\n\n    Returns:\n        bool: True if has data, False if no data\n    \"\"\"\n    bars = self.bars(since=since, to=to)\n\n    if bars is None or len(bars) == 0:\n        logger.warning(\"No bars data for %s\", self.name)\n        return False\n\n    self.push(bars, unit=self._bar_datetime_unit)\n    return True\n</code></pre>"},{"location":"reference/exchange/metatrader/metatrader/#lettrade.exchange.metatrader.metatrader.MetaTraderDataFeed.drop","title":"drop","text":"<pre><code>drop(\n    *args,\n    since: int | str | Timestamp | None = None,\n    to: int | str | Timestamp | None = None,\n    **kwargs\n) -&gt; None\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>since</code>               (<code>int | str | Timestamp | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>to</code>               (<code>int | str | Timestamp | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>description</p> </li> <li> <code>RuntimeError</code>             \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/data/data.py</code> <pre><code>def drop(\n    self,\n    *args,\n    since: int | str | pd.Timestamp | None = None,\n    to: int | str | pd.Timestamp | None = None,\n    **kwargs,\n) -&gt; None:\n    \"\"\"_summary_\n\n    Args:\n        since (int | str | pd.Timestamp | None, optional): _description_. Defaults to None.\n        to (int | str | pd.Timestamp | None, optional): _description_. Defaults to None.\n\n    Raises:\n        RuntimeError: _description_\n        RuntimeError: _description_\n    \"\"\"\n    if since is None and to is None:\n        super().drop(*args, **kwargs)\n        return\n\n    condiction = None\n\n    # Since\n    if since is not None:\n        if isinstance(since, int):\n            loc = self.l.index[since]\n        elif isinstance(since, str):\n            loc = pd.to_datetime(since, utc=True)\n        elif isinstance(since, pd.Timestamp):\n            loc = since\n        else:\n            raise RuntimeError(f\"DataFeed.drop since {since} is invalid\")\n        condiction = self.index &lt; loc\n\n    # To\n    if to is not None:\n        if isinstance(to, int):\n            loc = self.l.index[to]\n        elif isinstance(to, str):\n            loc = pd.to_datetime(to, utc=True)\n        elif isinstance(to, pd.Timestamp):\n            loc = to\n        else:\n            raise RuntimeError(f\"DataFeed.drop to {to} is invalid\")\n\n        if condiction is None:\n            condiction = self.index &gt; loc\n        else:\n            condiction = condiction | (self.index &gt; loc)\n\n    index = self[condiction].index\n    super().drop(index=index, inplace=True)\n    self.l.reset()\n\n    if __debug__:\n        logger.debug(\"BackTestDataFeed %s dropped %s rows\", self.name, len(index))\n</code></pre>"},{"location":"reference/exchange/metatrader/metatrader/#lettrade.exchange.metatrader.metatrader.MetaTraderDataFeed.dump_csv","title":"dump_csv","text":"<pre><code>dump_csv(\n    path: str | None = None,\n    since: int | str | datetime | None = 0,\n    to: int | str | datetime | None = 1000,\n    **kwargs\n)\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>path</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>since</code>               (<code>int | str | datetime | None</code>, default:                   <code>0</code> )           \u2013            <p>description. Defaults to 0.</p> </li> <li> <code>to</code>               (<code>int | str | datetime | None</code>, default:                   <code>1000</code> )           \u2013            <p>description. Defaults to 1_000.</p> </li> </ul> Source code in <code>lettrade/exchange/live/data.py</code> <pre><code>def dump_csv(\n    self,\n    path: str | None = None,\n    since: int | str | datetime | None = 0,\n    to: int | str | datetime | None = 1_000,\n    **kwargs,\n):\n    \"\"\"_summary_\n\n    Args:\n        path (str | None, optional): _description_. Defaults to None.\n        since (int  |  str  |  datetime | None, optional): _description_. Defaults to 0.\n        to (int  |  str  |  datetime | None, optional): _description_. Defaults to 1_000.\n    \"\"\"\n    if self.empty:\n        if isinstance(since, str):\n            since = pd.to_datetime(since).to_pydatetime()\n        if isinstance(to, str):\n            to = pd.to_datetime(to).to_pydatetime()\n\n        self.bars_load(since=since, to=to)\n\n    if path is None:\n        path = f\"data/{self.name}-{since}_{to}.csv\"\n\n    from lettrade.data.extra.csv import csv_export\n\n    csv_export(dataframe=self, path=path, **kwargs)\n</code></pre>"},{"location":"reference/exchange/metatrader/metatrader/#lettrade.exchange.metatrader.metatrader.MetaTraderDataFeed.instance","title":"instance  <code>classmethod</code>","text":"<pre><code>instance(\n    api: LiveAPI | None = None,\n    api_kwargs: dict | None = None,\n    **kwargs\n) -&gt; LiveDataFeed\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>api</code>               (<code>LiveAPI</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>api_kwargs</code>               (<code>dict</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>Missing api requirement</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>LiveDataFeed</code> (              <code>LiveDataFeed</code> )          \u2013            <p>DataFeed object</p> </li> </ul> Source code in <code>lettrade/exchange/live/data.py</code> <pre><code>@classmethod\ndef instance(\n    cls,\n    api: LiveAPI | None = None,\n    api_kwargs: dict | None = None,\n    **kwargs,\n) -&gt; \"LiveDataFeed\":\n    \"\"\"_summary_\n\n    Args:\n        api (LiveAPI, optional): _description_. Defaults to None.\n        api_kwargs (dict, optional): _description_. Defaults to None.\n\n    Raises:\n        RuntimeError: Missing api requirement\n\n    Returns:\n        LiveDataFeed: DataFeed object\n    \"\"\"\n    if api is None:\n        if api_kwargs is None:\n            raise RuntimeError(\"api or api_kwargs cannot missing\")\n        api = cls._api_cls(**api_kwargs)\n    obj = cls(api=api, **kwargs)\n    return obj\n</code></pre>"},{"location":"reference/exchange/metatrader/metatrader/#lettrade.exchange.metatrader.metatrader.MetaTraderDataFeed.next","title":"next","text":"<pre><code>next(size=1, tick=0) -&gt; bool\n</code></pre> <p>Drop extra columns and load next DataFeed</p> <p>Parameters:</p> <ul> <li> <code>size</code>               (<code>int</code>, default:                   <code>1</code> )           \u2013            <p>description. Defaults to 1.</p> </li> <li> <code>tick</code>               (<code>int</code>, default:                   <code>0</code> )           \u2013            <p>description. Defaults to 0.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/live/data.py</code> <pre><code>def next(self, size=1, tick=0) -&gt; bool:\n    \"\"\"Drop extra columns and load next DataFeed\n\n    Args:\n        size (int, optional): _description_. Defaults to 1.\n        tick (int, optional): _description_. Defaults to 0.\n\n    Returns:\n        bool: _description_\n    \"\"\"\n    # Drop existed extra columns to skip reusing calculated data\n    self.drop(columns=self.columns.difference(self._base_columns), inplace=True)\n\n    self.bars_load(since=0, to=size + 1)\n    self.l.go_stop()\n    return True\n</code></pre>"},{"location":"reference/exchange/metatrader/metatrader/#lettrade.exchange.metatrader.metatrader.MetaTraderDataFeed.push","title":"push","text":"<pre><code>push(\n    rows: list[list[int | float]],\n    unit: str | None = None,\n    utc: bool = True,\n    **kwargs\n)\n</code></pre> <p>Push new rows to DataFeed</p> <p>Parameters:</p> <ul> <li> <code>rows</code>               (<code>list[list[int | float]]</code>)           \u2013            <p>list of rows <code>[[\"timestamp\", \"open price\", \"high price\"...]]</code></p> </li> <li> <code>unit</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>pandas.Timestamp parsing unit. Defaults to None.</p> </li> <li> <code>utc</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>description. Defaults to True.</p> </li> </ul> Source code in <code>lettrade/data/data.py</code> <pre><code>def push(\n    self,\n    rows: list[list[int | float]],\n    unit: str | None = None,\n    utc: bool = True,\n    **kwargs,\n):\n    \"\"\"Push new rows to DataFeed\n\n    Args:\n        rows (list[list[int | float]]): list of rows `[[\"timestamp\", \"open price\", \"high price\"...]]`\n        unit (str | None, optional): pandas.Timestamp parsing unit. Defaults to None.\n        utc (bool, optional): _description_. Defaults to True.\n    \"\"\"\n    for row in rows:\n        dt = pd.to_datetime(row[0], unit=unit, utc=utc, **kwargs)\n        self.at[\n            dt,\n            (\n                \"open\",\n                \"high\",\n                \"low\",\n                \"close\",\n                \"volume\",\n            ),\n        ] = (\n            row[1],  # open\n            row[2],  # high\n            row[3],  # low\n            row[4],  # close\n            row[5],  # volume\n        )\n\n    if __debug__:\n        logger.debug(\"[%s] Update bar: \\n%s\", self.name, self.tail(len(rows)))\n</code></pre>"},{"location":"reference/exchange/metatrader/metatrader/#lettrade.exchange.metatrader.metatrader.MetaTraderDataFeed.symbol_info","title":"symbol_info","text":"<pre><code>symbol_info()\n</code></pre> <p>Get symbol information from API</p> Source code in <code>lettrade/exchange/live/data.py</code> <pre><code>def symbol_info(self):\n    \"\"\"Get symbol information from API\"\"\"\n    return self._api.market(symbol=self.symbol)\n</code></pre>"},{"location":"reference/exchange/metatrader/metatrader/#lettrade.exchange.metatrader.metatrader.MetaTraderDataFeeder","title":"MetaTraderDataFeeder","text":"<pre><code>MetaTraderDataFeeder(\n    api: LiveAPI,\n    tick: bool = 5,\n    start_size: int = 500,\n    **kwargs\n)\n</code></pre> <p>               Bases: <code>LiveDataFeeder</code></p> <p>DataFeeder for MetaTrader</p> <pre><code>tick == 0: wait until new bar change value\ntick &gt; 0: sleep tick time (in seconds) then update\n</code></pre> Source code in <code>lettrade/exchange/live/feeder.py</code> <pre><code>def __init__(\n    self,\n    api: LiveAPI,\n    tick: bool = 5,\n    start_size: int = 500,\n    **kwargs,\n) -&gt; None:\n    \"\"\"\n    tick:\n        tick &lt; 0: no tick, just get completed bar\n        tick == 0: wait until new bar change value\n        tick &gt; 0: sleep tick time (in seconds) then update\n    \"\"\"\n    super().__init__()\n    self._api = api\n    self._tick = tick\n    self._start_size = start_size\n    self._config = kwargs\n\n    if isinstance(self._tick, int):\n        self._wait_timeframe = TimeFrame(f\"{self._tick}s\")\n    else:\n        self._wait_timeframe = None\n</code></pre>"},{"location":"reference/exchange/metatrader/metatrader/#lettrade.exchange.metatrader.metatrader.MetaTraderDataFeeder.is_continous","title":"is_continous  <code>property</code>","text":"<pre><code>is_continous\n</code></pre> <p>Flag check is realtime continous datafeeder</p>"},{"location":"reference/exchange/metatrader/metatrader/#lettrade.exchange.metatrader.metatrader.MetaTraderDataFeeder.instance","title":"instance  <code>classmethod</code>","text":"<pre><code>instance(\n    api: LiveAPI | None = None,\n    api_kwargs: dict | None = None,\n    **kwargs\n) -&gt; LiveDataFeed\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>api</code>               (<code>LiveAPI</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>api_kwargs</code>               (<code>dict</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>Missing api requirement</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>LiveDataFeed</code> (              <code>LiveDataFeed</code> )          \u2013            <p>DataFeed object</p> </li> </ul> Source code in <code>lettrade/exchange/live/feeder.py</code> <pre><code>@classmethod\ndef instance(\n    cls,\n    api: LiveAPI | None = None,\n    api_kwargs: dict | None = None,\n    **kwargs,\n) -&gt; \"LiveDataFeed\":\n    \"\"\"_summary_\n\n    Args:\n        api (LiveAPI, optional): _description_. Defaults to None.\n        api_kwargs (dict, optional): _description_. Defaults to None.\n\n    Raises:\n        RuntimeError: Missing api requirement\n\n    Returns:\n        LiveDataFeed: DataFeed object\n    \"\"\"\n    if api is None:\n        if api_kwargs is None:\n            raise RuntimeError(\"api or api_kwargs cannot missing\")\n        api = cls._api_cls(**api_kwargs)\n    obj = cls(api=api, **kwargs)\n    return obj\n</code></pre>"},{"location":"reference/exchange/metatrader/metatrader/#lettrade.exchange.metatrader.metatrader.MetaTraderExchange","title":"MetaTraderExchange","text":"<pre><code>MetaTraderExchange(api: LiveAPI, *args, **kwargs)\n</code></pre> <p>               Bases: <code>LiveExchange</code></p> <p>MetaTrade 5 exchange module for <code>lettrade</code></p> <p>Parameters:</p> <ul> <li> <code>api</code>               (<code>LiveAPI</code>)           \u2013            <p>API connect to rpyc MeTrader 5 Terminal server through module <code>mt5linux</code></p> </li> <li> <code>*args</code>               (<code>list</code>, default:                   <code>()</code> )           \u2013            <p><code>Exchange</code> list parameters</p> </li> <li> <code>**kwargs</code>               (<code>dict</code>, default:                   <code>{}</code> )           \u2013            <p><code>Exchange</code> dict parameters</p> </li> </ul> Source code in <code>lettrade/exchange/live/exchange.py</code> <pre><code>def __init__(self, api: LiveAPI, *args, **kwargs):\n    \"\"\"_summary_\n\n    Args:\n        api (LiveAPI): API connect to rpyc MeTrader 5 Terminal server through module `mt5linux`\n        *args (list): `Exchange` list parameters\n        **kwargs (dict): `Exchange` dict parameters\n    \"\"\"\n    super().__init__(*args, **kwargs)\n    self._api = api\n</code></pre>"},{"location":"reference/exchange/metatrader/metatrader/#lettrade.exchange.metatrader.metatrader.MetaTraderExchange.data","title":"data  <code>instance-attribute</code>","text":"<pre><code>data: DataFeed\n</code></pre> <p>main DataFeed</p>"},{"location":"reference/exchange/metatrader/metatrader/#lettrade.exchange.metatrader.metatrader.MetaTraderExchange.datas","title":"datas  <code>instance-attribute</code>","text":"<pre><code>datas: list[DataFeed]\n</code></pre> <p>List of all available DataFeed</p>"},{"location":"reference/exchange/metatrader/metatrader/#lettrade.exchange.metatrader.metatrader.MetaTraderExchange.executions","title":"executions  <code>instance-attribute</code>","text":"<pre><code>executions: dict[str, Execution] = dict()\n</code></pre> <p>Execution dict by <code>Execution.id</code> key</p>"},{"location":"reference/exchange/metatrader/metatrader/#lettrade.exchange.metatrader.metatrader.MetaTraderExchange.history_orders","title":"history_orders  <code>instance-attribute</code>","text":"<pre><code>history_orders: dict[str, Order] = dict()\n</code></pre> <p>History Order dict by <code>Order.id</code> key</p>"},{"location":"reference/exchange/metatrader/metatrader/#lettrade.exchange.metatrader.metatrader.MetaTraderExchange.history_positions","title":"history_positions  <code>instance-attribute</code>","text":"<pre><code>history_positions: dict[str, Position] = dict()\n</code></pre> <p>History Position dict by <code>Position.id</code> key</p>"},{"location":"reference/exchange/metatrader/metatrader/#lettrade.exchange.metatrader.metatrader.MetaTraderExchange.orders","title":"orders  <code>instance-attribute</code>","text":"<pre><code>orders: dict[str, Order] = dict()\n</code></pre> <p>Available Order dict by <code>Order.id</code> key</p>"},{"location":"reference/exchange/metatrader/metatrader/#lettrade.exchange.metatrader.metatrader.MetaTraderExchange.positions","title":"positions  <code>instance-attribute</code>","text":"<pre><code>positions: dict[str, Position] = dict()\n</code></pre> <p>Available Position dict by <code>Position.id</code> key</p>"},{"location":"reference/exchange/metatrader/metatrader/#lettrade.exchange.metatrader.metatrader.MetaTraderExchange.init","title":"init","text":"<pre><code>init(\n    brain: Brain,\n    feeder: DataFeeder,\n    account: Account,\n    commander: Commander,\n) -&gt; None\n</code></pre> <p>Init Exchange dependencies. Set data/datas from feeder. Set state to <code>ExchangeState.Start</code>.</p> <p>Parameters:</p> <ul> <li> <code>brain</code>               (<code>Brain</code>)           \u2013            <p>description</p> </li> <li> <code>feeder</code>               (<code>DataFeeder</code>)           \u2013            <p>description</p> </li> <li> <code>account</code>               (<code>Account</code>)           \u2013            <p>description</p> </li> <li> <code>commander</code>               (<code>Commander</code>)           \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def init(\n    self,\n    brain: \"Brain\",\n    feeder: DataFeeder,\n    account: Account,\n    commander: Commander,\n) -&gt; None:\n    \"\"\"Init Exchange dependencies.\n    Set data/datas from feeder.\n    Set state to `ExchangeState.Start`.\n\n    Args:\n        brain (Brain): _description_\n        feeder (DataFeeder): _description_\n        account (Account): _description_\n        commander (Commander): _description_\n    \"\"\"\n    self._brain = brain\n    self._feeder = feeder\n    self._account = account\n    self._commander = commander\n\n    self.data = self._feeder.data\n    self.datas = self._feeder.datas\n\n    self._account.init(exchange=self)\n\n    self._state = ExchangeState.Start\n</code></pre>"},{"location":"reference/exchange/metatrader/metatrader/#lettrade.exchange.metatrader.metatrader.MetaTraderExchange.new_order","title":"new_order","text":"<pre><code>new_order(\n    size: float,\n    type: OrderType | None = OrderType.Market,\n    limit: float | None = None,\n    stop: float | None = None,\n    sl: float | None = None,\n    tp: float | None = None,\n    tag: str | None = None,\n    data: DataFeed | None = None,\n    **kwargs\n) -&gt; OrderResult\n</code></pre> <p>Place new order to server</p> <p>Parameters:</p> <ul> <li> <code>size</code>               (<code>float</code>)           \u2013            <p>description</p> </li> <li> <code>type</code>               (<code>OrderType | None</code>, default:                   <code>Market</code> )           \u2013            <p>description. Defaults to OrderType.Market.</p> </li> <li> <code>limit</code>               (<code>float | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>stop</code>               (<code>float | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>sl</code>               (<code>float | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>tp</code>               (<code>float | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>tag</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>data</code>               (<code>DataFeed | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>OrderResult</code> (              <code>OrderResult</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/live/exchange.py</code> <pre><code>def new_order(\n    self,\n    size: float,\n    type: OrderType | None = OrderType.Market,\n    limit: float | None = None,\n    stop: float | None = None,\n    sl: float | None = None,\n    tp: float | None = None,\n    tag: str | None = None,\n    data: DataFeed | None = None,\n    **kwargs,\n) -&gt; OrderResult:\n    \"\"\"Place new order to server\n\n    Args:\n        size (float): _description_\n        type (OrderType | None, optional): _description_. Defaults to OrderType.Market.\n        limit (float | None, optional): _description_. Defaults to None.\n        stop (float | None, optional): _description_. Defaults to None.\n        sl (float | None, optional): _description_. Defaults to None.\n        tp (float | None, optional): _description_. Defaults to None.\n        tag (str | None, optional): _description_. Defaults to None.\n        data (DataFeed | None, optional): _description_. Defaults to None.\n\n    Returns:\n        OrderResult: _description_\n    \"\"\"\n    if not data:\n        data = self.data\n\n    if type == OrderType.Market:\n        limit = 0\n        stop = 0\n\n    order = self._order_cls(\n        id=-1,\n        exchange=self,\n        data=data,\n        size=size,\n        type=type,\n        limit_price=limit,\n        stop_price=stop,\n        sl_price=sl,\n        tp_price=tp,\n        tag=tag,\n        **kwargs,\n    )\n    ok = order.place()\n\n    # if __debug__:\n    #     logger.info(\"New order %s at %s\", order, self.data.now)\n\n    return ok\n</code></pre>"},{"location":"reference/exchange/metatrader/metatrader/#lettrade.exchange.metatrader.metatrader.MetaTraderExchange.next_next","title":"next_next","text":"<pre><code>next_next()\n</code></pre> <p>Call after strategy.next()</p> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def next_next(self):\n    \"\"\"Call after strategy.next()\"\"\"\n    self._account.next_next()\n</code></pre>"},{"location":"reference/exchange/metatrader/metatrader/#lettrade.exchange.metatrader.metatrader.MetaTraderExchange.on_execution","title":"on_execution","text":"<pre><code>on_execution(\n    execution: Execution,\n    broadcast: bool | None = True,\n    **kwargs\n) -&gt; None\n</code></pre> <p>Receive Execution event from exchange then store and notify Brain</p> <p>Parameters:</p> <ul> <li> <code>execution</code>               (<code>Execution</code>)           \u2013            <p>description</p> </li> <li> <code>broadcast</code>               (<code>bool | None</code>, default:                   <code>True</code> )           \u2013            <p>description. Defaults to True.</p> </li> </ul> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def on_execution(\n    self,\n    execution: Execution,\n    broadcast: bool | None = True,\n    **kwargs,\n) -&gt; None:\n    \"\"\"Receive Execution event from exchange then store and notify Brain\n\n    Args:\n        execution (Execution): _description_\n        broadcast (bool | None, optional): _description_. Defaults to True.\n    \"\"\"\n    self.on_executions(executions=[execution], broadcast=broadcast, **kwargs)\n</code></pre>"},{"location":"reference/exchange/metatrader/metatrader/#lettrade.exchange.metatrader.metatrader.MetaTraderExchange.on_executions","title":"on_executions","text":"<pre><code>on_executions(\n    executions: list[Execution],\n    broadcast: bool | None = True,\n    **kwargs\n) -&gt; None\n</code></pre> <p>Receive Execution event from exchange then store and notify Brain</p> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def on_executions(\n    self,\n    executions: list[Execution],\n    broadcast: bool | None = True,\n    **kwargs,\n) -&gt; None:\n    \"\"\"\n    Receive Execution event from exchange then store and notify Brain\n    \"\"\"\n    for execution in executions:\n        if not isinstance(execution, Execution):\n            raise RuntimeError(f\"{execution} is not instance of type Execution\")\n\n        if execution.id in self.executions:\n            # Merge to keep Execution handler for strategy using\n            # when strategy want to store Execution object\n            # and object will be automatic update directly\n            self.executions[execution.id].merge(execution)\n            execution = self.executions[execution.id]\n        else:\n            self.executions[execution.id] = execution\n\n    if self._state != ExchangeState.Run:\n        return\n\n    if broadcast:\n        self._brain.on_executions(executions)\n</code></pre>"},{"location":"reference/exchange/metatrader/metatrader/#lettrade.exchange.metatrader.metatrader.MetaTraderExchange.on_orders","title":"on_orders","text":"<pre><code>on_orders(\n    orders: list[Order],\n    broadcast: bool | None = True,\n    **kwargs\n) -&gt; None\n</code></pre> <p>Receive orders event from exchange then store and notify Brain</p> <p>Parameters:</p> <ul> <li> <code>orders</code>               (<code>list[Order]</code>)           \u2013            <p>description</p> </li> <li> <code>broadcast</code>               (<code>bool | None</code>, default:                   <code>True</code> )           \u2013            <p>description. Defaults to True.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def on_orders(\n    self,\n    orders: list[Order],\n    broadcast: bool | None = True,\n    **kwargs,\n) -&gt; None:\n    \"\"\"Receive orders event from exchange then store and notify Brain\n\n    Args:\n        orders (list[Order]): _description_\n        broadcast (bool | None, optional): _description_. Defaults to True.\n\n    Raises:\n        RuntimeError: _description_\n    \"\"\"\n    for order in orders:\n        if not isinstance(order, Order):\n            raise RuntimeError(f\"{order} is not instance of type Order\")\n\n        if order.is_closed:\n            if order.id in self.history_orders:\n                logger.warning(\"Order closed recall: %s\", order)\n\n            self.history_orders[order.id] = order\n            if order.id in self.orders:\n                del self.orders[order.id]\n        else:\n            if order.id in self.history_orders:\n                raise RuntimeError(f\"Order {order.id} closed\")\n\n            if order.id in self.orders:\n                # Merge to keep Order handler for strategy using\n                # when strategy want to store Order object\n                # and object will be automatic update directly\n                self.orders[order.id].merge(order)\n                order = self.orders[order.id]\n            else:\n                self.orders[order.id] = order\n\n    if self._state != ExchangeState.Run:\n        return\n\n    if broadcast:\n        self._brain.on_orders(orders)\n</code></pre>"},{"location":"reference/exchange/metatrader/metatrader/#lettrade.exchange.metatrader.metatrader.MetaTraderExchange.on_position","title":"on_position","text":"<pre><code>on_position(\n    position: Position,\n    broadcast: bool | None = True,\n    **kwargs\n) -&gt; None\n</code></pre> <p>Receive Position event from exchange then store and notify Brain</p> <p>Parameters:</p> <ul> <li> <code>position</code>               (<code>Position</code>)           \u2013            <p>new comming <code>Position</code></p> </li> <li> <code>broadcast</code>               (<code>bool | None</code>, default:                   <code>True</code> )           \u2013            <p>Flag notify to Brain. Defaults to True.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>validate <code>Position</code> instance</p> </li> </ul> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def on_position(\n    self,\n    position: Position,\n    broadcast: bool | None = True,\n    **kwargs,\n) -&gt; None:\n    \"\"\"Receive Position event from exchange then store and notify Brain\n\n    Args:\n        position (Position): new comming `Position`\n        broadcast (bool | None, optional): Flag notify to Brain. Defaults to True.\n\n    Raises:\n        RuntimeError: validate `Position` instance\n    \"\"\"\n    self.on_positions(positions=[position], broadcast=broadcast, **kwargs)\n</code></pre>"},{"location":"reference/exchange/metatrader/metatrader/#lettrade.exchange.metatrader.metatrader.MetaTraderExchange.on_positions","title":"on_positions","text":"<pre><code>on_positions(\n    positions: list[Position],\n    broadcast: bool | None = True,\n    **kwargs\n) -&gt; None\n</code></pre> <p>Receive Positions event from exchange then store and notify Brain</p> <p>Parameters:</p> <ul> <li> <code>positions</code>               (<code>list[Position]</code>)           \u2013            <p>list of new comming <code>Position</code></p> </li> <li> <code>broadcast</code>               (<code>bool | None</code>, default:                   <code>True</code> )           \u2013            <p>Flag notify to Brain. Defaults to True.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>validate <code>Position</code> instance</p> </li> </ul> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def on_positions(\n    self,\n    positions: list[Position],\n    broadcast: bool | None = True,\n    **kwargs,\n) -&gt; None:\n    \"\"\"Receive Positions event from exchange then store and notify Brain\n\n    Args:\n        positions (list[Position]): list of new comming `Position`\n        broadcast (bool | None, optional): Flag notify to Brain. Defaults to True.\n\n    Raises:\n        RuntimeError: validate `Position` instance\n    \"\"\"\n    for position in positions:\n        if not isinstance(position, Position):\n            raise RuntimeError(f\"{position} is not instance of type Position\")\n\n        if position.is_exited:\n            if position.id in self.history_positions:\n                logger.warning(\"Position exited recall: %s\", position)\n\n            self.history_positions[position.id] = position\n            if position.id in self.positions:\n                del self.positions[position.id]\n\n            # self._account._on_position_exit(position)\n        else:\n            if position.id in self.history_positions:\n                raise RuntimeError(f\"Position {position.id} closed: {position}\")\n            if position.id in self.positions:\n                # Merge to keep Position handler for strategy using\n                # when strategy want to store Position object\n                # and object will be automatic update directly\n                self.positions[position.id].merge(position)\n                position = self.positions[position.id]\n            else:\n                self.positions[position.id] = position\n                # self._account._on_position_entry(position)\n\n    self._account.on_positions(positions)\n\n    if self._state != ExchangeState.Run:\n        return\n\n    if broadcast:\n        self._brain.on_positions(positions)\n</code></pre>"},{"location":"reference/exchange/metatrader/metatrader/#lettrade.exchange.metatrader.metatrader.MetaTraderExchange.start","title":"start","text":"<pre><code>start() -&gt; None\n</code></pre> <p>Start Live exchange by: Sync positions from server</p> Source code in <code>lettrade/exchange/live/exchange.py</code> <pre><code>def start(self) -&gt; None:\n    \"\"\"Start Live exchange by: Sync positions from server\"\"\"\n    self._api.start(exchange=self)\n    return super().start()\n</code></pre>"},{"location":"reference/exchange/metatrader/metatrader/#lettrade.exchange.metatrader.metatrader.MetaTraderExchange.stop","title":"stop","text":"<pre><code>stop() -&gt; None\n</code></pre> <p>Stop Exchange</p> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def stop(self) -&gt; None:\n    \"\"\"Stop Exchange\"\"\"\n    self._state = ExchangeState.Stop\n    self._account.stop()\n</code></pre>"},{"location":"reference/exchange/metatrader/metatrader/#lettrade.exchange.metatrader.metatrader.let_metatrader","title":"let_metatrader","text":"<pre><code>let_metatrader(\n    strategy: type[Strategy],\n    datas: set[set[str]],\n    mt5_login: int,\n    mt5_password: str,\n    mt5_server: str,\n    mt5_wine: str | None = None,\n    feeder: type[\n        MetaTraderDataFeeder\n    ] = MetaTraderDataFeeder,\n    exchange: type[MetaTraderExchange] = MetaTraderExchange,\n    account: type[MetaTraderAccount] = MetaTraderAccount,\n    commander: type[Commander] | None = None,\n    stats: type[BotStatistic] = BotStatistic,\n    plotter: type[Plotter] | None = None,\n    bot: type[\n        LetTradeMetaTraderBot\n    ] = LetTradeMetaTraderBot,\n    lettrade: type[LetTradeMetaTrader] = LetTradeMetaTrader,\n    api: type[MetaTraderAPI] = MetaTraderAPI,\n    **kwargs\n) -&gt; LetTradeMetaTrader\n</code></pre> <p>Help to build <code>LetTradeMetaTrader</code></p> <p>Parameters:</p> <ul> <li> <code>strategy</code>               (<code>type[Strategy]</code>)           \u2013            <p>description</p> </li> <li> <code>datas</code>               (<code>set[set[str]]</code>)           \u2013            <p>description</p> </li> <li> <code>mt5_login</code>               (<code>int</code>)           \u2013            <p>description</p> </li> <li> <code>mt5_password</code>               (<code>str</code>)           \u2013            <p>description</p> </li> <li> <code>mt5_server</code>               (<code>str</code>)           \u2013            <p>description</p> </li> <li> <code>mt5_wine</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>WineHQ execute path. Defaults to None.</p> </li> <li> <code>feeder</code>               (<code>type[MetaTraderDataFeeder]</code>, default:                   <code>MetaTraderDataFeeder</code> )           \u2013            <p>description. Defaults to MetaTraderDataFeeder.</p> </li> <li> <code>exchange</code>               (<code>type[MetaTraderExchange]</code>, default:                   <code>MetaTraderExchange</code> )           \u2013            <p>description. Defaults to MetaTraderExchange.</p> </li> <li> <code>account</code>               (<code>type[MetaTraderAccount]</code>, default:                   <code>MetaTraderAccount</code> )           \u2013            <p>description. Defaults to MetaTraderAccount.</p> </li> <li> <code>commander</code>               (<code>type[Commander] | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>stats</code>               (<code>type[BotStatistic]</code>, default:                   <code>BotStatistic</code> )           \u2013            <p>description. Defaults to BotStatistic.</p> </li> <li> <code>plotter</code>               (<code>type[Plotter] | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>bot</code>               (<code>type[LetTradeMetaTraderBot]</code>, default:                   <code>LetTradeMetaTraderBot</code> )           \u2013            <p>description. Defaults to LetTradeMetaTraderBot.</p> </li> <li> <code>lettrade</code>               (<code>type[LetTradeMetaTrader]</code>, default:                   <code>LetTradeMetaTrader</code> )           \u2013            <p>description. Defaults to LetTradeMetaTrader.</p> </li> <li> <code>api</code>               (<code>type[MetaTraderAPI]</code>, default:                   <code>MetaTraderAPI</code> )           \u2013            <p>description. Defaults to MetaTraderAPI.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>LetTradeMetaTrader</code> (              <code>LetTradeMetaTrader</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/metatrader/metatrader.py</code> <pre><code>def let_metatrader(\n    strategy: type[Strategy],\n    datas: set[set[str]],\n    mt5_login: int,\n    mt5_password: str,\n    mt5_server: str,\n    mt5_wine: str | None = None,\n    feeder: type[MetaTraderDataFeeder] = MetaTraderDataFeeder,\n    exchange: type[MetaTraderExchange] = MetaTraderExchange,\n    account: type[MetaTraderAccount] = MetaTraderAccount,\n    commander: type[Commander] | None = None,\n    stats: type[BotStatistic] = BotStatistic,\n    plotter: type[Plotter] | None = None,\n    bot: type[LetTradeMetaTraderBot] = LetTradeMetaTraderBot,\n    lettrade: type[LetTradeMetaTrader] = LetTradeMetaTrader,\n    api: type[MetaTraderAPI] = MetaTraderAPI,\n    **kwargs,\n) -&gt; LetTradeMetaTrader:\n    \"\"\"Help to build `LetTradeMetaTrader`\n\n    Args:\n        strategy (type[Strategy]): _description_\n        datas (set[set[str]]): _description_\n        mt5_login (int): _description_\n        mt5_password (str): _description_\n        mt5_server (str): _description_\n        mt5_wine (str | None, optional): WineHQ execute path. Defaults to None.\n        feeder (type[MetaTraderDataFeeder], optional): _description_. Defaults to MetaTraderDataFeeder.\n        exchange (type[MetaTraderExchange], optional): _description_. Defaults to MetaTraderExchange.\n        account (type[MetaTraderAccount], optional): _description_. Defaults to MetaTraderAccount.\n        commander (type[Commander] | None, optional): _description_. Defaults to None.\n        stats (type[BotStatistic], optional): _description_. Defaults to BotStatistic.\n        plotter (type[Plotter] | None, optional): _description_. Defaults to None.\n        bot (type[LetTradeMetaTraderBot], optional): _description_. Defaults to LetTradeMetaTraderBot.\n        lettrade (type[LetTradeMetaTrader], optional): _description_. Defaults to LetTradeMetaTrader.\n        api (type[MetaTraderAPI], optional): _description_. Defaults to MetaTraderAPI.\n\n    Returns:\n        LetTradeMetaTrader: _description_\n    \"\"\"\n    api_kwargs: dict = kwargs.setdefault(\"api_kwargs\", {})\n    api_kwargs.update(\n        login=int(mt5_login),\n        password=mt5_password,\n        server=mt5_server,\n        wine=mt5_wine,\n    )\n\n    return let_live(\n        strategy=strategy,\n        datas=datas,\n        feeder=feeder,\n        exchange=exchange,\n        account=account,\n        commander=commander,\n        stats=stats,\n        plotter=plotter,\n        bot=bot,\n        lettrade=lettrade,\n        api=api,\n        **kwargs,\n    )\n</code></pre>"},{"location":"reference/exchange/metatrader/trade/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> trade","text":""},{"location":"reference/exchange/metatrader/trade/#lettrade.exchange.metatrader.trade","title":"trade","text":""},{"location":"reference/exchange/metatrader/trade/#lettrade.exchange.metatrader.trade.MetaTraderExecution","title":"MetaTraderExecution","text":"<pre><code>MetaTraderExecution(\n    pl: float = None,\n    fee: float = None,\n    tag: str | None = None,\n    **kwargs\n)\n</code></pre> <p>               Bases: <code>LiveExecution</code></p> <p>Execution for MetaTrader</p> Source code in <code>lettrade/exchange/metatrader/trade.py</code> <pre><code>def __init__(\n    self,\n    pl: float = None,\n    fee: float = None,\n    tag: str | None = None,\n    **kwargs,\n):\n    super().__init__(**kwargs)\n    self.pl: float = pl\n    self.fee: float = fee\n    self.tag: str | None = tag\n</code></pre>"},{"location":"reference/exchange/metatrader/trade/#lettrade.exchange.metatrader.trade.MetaTraderExecution.is_long","title":"is_long  <code>property</code>","text":"<pre><code>is_long: bool\n</code></pre> <p>True if side is long (size is positive).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True/False</p> </li> </ul>"},{"location":"reference/exchange/metatrader/trade/#lettrade.exchange.metatrader.trade.MetaTraderExecution.is_short","title":"is_short  <code>property</code>","text":"<pre><code>is_short: bool\n</code></pre> <p>True if side is short (size is negative).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/metatrader/trade/#lettrade.exchange.metatrader.trade.MetaTraderExecution.side","title":"side  <code>property</code>","text":"<pre><code>side: TradeSide\n</code></pre> <p>True if side is short (size is negative).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>TradeSide</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/metatrader/trade/#lettrade.exchange.metatrader.trade.MetaTraderExecution.from_raw","title":"from_raw  <code>classmethod</code>","text":"<pre><code>from_raw(\n    raw,\n    exchange: LiveExchange,\n    data: LiveDataFeed = None,\n    api: MetaTraderAPI = None,\n) -&gt; MetaTraderExecution | None\n</code></pre> <p>Building new MetaTraderExecution from live api raw object</p> <p>Parameters:</p> <ul> <li> <code>raw</code>               (<code>_type_</code>)           \u2013            <p>description</p> </li> <li> <code>exchange</code>               (<code>LiveExchange</code>)           \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>MetaTraderExecution</code> (              <code>MetaTraderExecution | None</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/metatrader/trade.py</code> <pre><code>@classmethod\ndef from_raw(\n    cls,\n    raw,\n    exchange: \"LiveExchange\",\n    data: \"LiveDataFeed\" = None,\n    api: MetaTraderAPI = None,\n) -&gt; \"MetaTraderExecution | None\":\n    \"\"\"Building new MetaTraderExecution from live api raw object\n\n    Args:\n        raw (_type_): _description_\n        exchange (LiveExchange): _description_\n\n    Returns:\n        MetaTraderExecution: _description_\n    \"\"\"\n    # DataFeed\n    if data is None:\n        for d in exchange.datas:\n            if d.symbol == raw.symbol:\n                data = d\n                break\n        if data is None:\n            logger.warning(\"Raw execution %s is not handling %s\", raw.symbol, raw)\n            return\n    # Side\n    match raw.type:\n        case MT5.DEAL_TYPE_BUY:\n            side = TradeSide.Buy\n        case MT5.DEAL_TYPE_SELL:\n            side = TradeSide.Sell\n        case _:\n            logger.warning(\n                \"Raw execution %s type %s is not handling %s\",\n                raw.symbol,\n                raw.type,\n                raw,\n            )\n            return\n\n    return cls(\n        exchange=exchange,\n        id=raw.ticket,\n        data=data,\n        order_id=raw.order,\n        position_id=raw.position_id,\n        size=side * raw.volume,\n        price=raw.price,\n        pl=raw.profit,\n        fee=raw.fee + raw.swap + raw.commission,\n        at=pd.to_datetime(raw.time_msc, unit=\"ms\", utc=True),\n        tag=raw.comment,\n        api=api,\n        raw=raw,\n    )\n</code></pre>"},{"location":"reference/exchange/metatrader/trade/#lettrade.exchange.metatrader.trade.MetaTraderExecution.merge","title":"merge","text":"<pre><code>merge(other: Execution)\n</code></pre> <p>Merge to keep object handler but not overwrite for Strategy using when Strategy want to store object and object will be automatic update directly</p> Source code in <code>lettrade/exchange/execution.py</code> <pre><code>def merge(self, other: \"Execution\"):\n    \"\"\"\n    Merge to keep object handler but not overwrite for Strategy using when Strategy want to store object and object will be automatic update directly\n    \"\"\"\n    if other is self:\n        return\n\n    if self.id != other.id:\n        raise RuntimeError(f\"Merge difference id {self.id} != {other.id} execution\")\n\n    self.price = other.price\n    self.size = other.size\n\n    if other.at:\n        self.at = other.at\n    if other.order_id:\n        self.order_id = other.order_id\n    if other.order:\n        self.order = other.order\n    if other.position_id:\n        self.position_id = other.position_id\n    if other.position:\n        self.position = other.position\n</code></pre>"},{"location":"reference/exchange/metatrader/trade/#lettrade.exchange.metatrader.trade.MetaTraderOrder","title":"MetaTraderOrder","text":"<pre><code>MetaTraderOrder(is_real: bool = True, **kwargs)\n</code></pre> <p>               Bases: <code>LiveOrder</code></p> <p>Order for MetaTrader</p> Source code in <code>lettrade/exchange/metatrader/trade.py</code> <pre><code>def __init__(self, is_real: bool = True, **kwargs):\n    super().__init__(**kwargs)\n\n    self.is_real: bool = is_real\n    \"\"\"Flag to check `Order` is real, cannot duplicate id, cannot recall from history\"\"\"\n</code></pre>"},{"location":"reference/exchange/metatrader/trade/#lettrade.exchange.metatrader.trade.MetaTraderOrder.is_closed","title":"is_closed  <code>property</code>","text":"<pre><code>is_closed: bool\n</code></pre> <p>Flag to check <code>Order</code> closed</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True if <code>state</code> in [OrderState.Filled, OrderState.Canceled]</p> </li> </ul>"},{"location":"reference/exchange/metatrader/trade/#lettrade.exchange.metatrader.trade.MetaTraderOrder.is_long","title":"is_long  <code>property</code>","text":"<pre><code>is_long: bool\n</code></pre> <p>True if side is long (size is positive).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True/False</p> </li> </ul>"},{"location":"reference/exchange/metatrader/trade/#lettrade.exchange.metatrader.trade.MetaTraderOrder.is_opening","title":"is_opening  <code>property</code>","text":"<pre><code>is_opening: bool\n</code></pre> <p>Flag to check <code>Order</code> still alive</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True if <code>state</code> in [OrderState.Pending, OrderState.Placed, OrderState.Partial]</p> </li> </ul>"},{"location":"reference/exchange/metatrader/trade/#lettrade.exchange.metatrader.trade.MetaTraderOrder.is_real","title":"is_real  <code>instance-attribute</code>","text":"<pre><code>is_real: bool = is_real\n</code></pre> <p>Flag to check <code>Order</code> is real, cannot duplicate id, cannot recall from history</p>"},{"location":"reference/exchange/metatrader/trade/#lettrade.exchange.metatrader.trade.MetaTraderOrder.is_short","title":"is_short  <code>property</code>","text":"<pre><code>is_short: bool\n</code></pre> <p>True if side is short (size is negative).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/metatrader/trade/#lettrade.exchange.metatrader.trade.MetaTraderOrder.is_sl_order","title":"is_sl_order  <code>property</code>","text":"<pre><code>is_sl_order: bool\n</code></pre> <p><code>Order</code> is stop-loss order of a <code>Position</code></p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/metatrader/trade/#lettrade.exchange.metatrader.trade.MetaTraderOrder.is_tp_order","title":"is_tp_order  <code>property</code>","text":"<pre><code>is_tp_order: bool\n</code></pre> <p><code>Order</code> is take-profit order of a <code>Position</code></p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/metatrader/trade/#lettrade.exchange.metatrader.trade.MetaTraderOrder.limit","title":"limit  <code>property</code>","text":"<pre><code>limit: float | None\n</code></pre> <p>Getter of limit_price</p> <p>Returns:</p> <ul> <li> <code>float | None</code>           \u2013            <p>float | None: <code>float</code> or <code>None</code></p> </li> </ul>"},{"location":"reference/exchange/metatrader/trade/#lettrade.exchange.metatrader.trade.MetaTraderOrder.place_price","title":"place_price  <code>property</code>","text":"<pre><code>place_price: float | None\n</code></pre> <p>Getter of place_price</p> <p>Returns:</p> <ul> <li> <code>float | None</code>           \u2013            <p>float | None: <code>float</code> or <code>None</code></p> </li> </ul>"},{"location":"reference/exchange/metatrader/trade/#lettrade.exchange.metatrader.trade.MetaTraderOrder.side","title":"side  <code>property</code>","text":"<pre><code>side: TradeSide\n</code></pre> <p>True if side is short (size is negative).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>TradeSide</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/metatrader/trade/#lettrade.exchange.metatrader.trade.MetaTraderOrder.sl","title":"sl  <code>property</code>","text":"<pre><code>sl: float | None\n</code></pre> <p>Getter of sl_price</p> <p>Returns:</p> <ul> <li> <code>float | None</code>           \u2013            <p>float | None: <code>float</code> or <code>None</code></p> </li> </ul>"},{"location":"reference/exchange/metatrader/trade/#lettrade.exchange.metatrader.trade.MetaTraderOrder.stop","title":"stop  <code>property</code>","text":"<pre><code>stop: float | None\n</code></pre> <p>Getter of stop_price</p> <p>Returns:</p> <ul> <li> <code>float | None</code>           \u2013            <p>float | None: <code>float</code> or <code>None</code></p> </li> </ul>"},{"location":"reference/exchange/metatrader/trade/#lettrade.exchange.metatrader.trade.MetaTraderOrder.tp","title":"tp  <code>property</code>","text":"<pre><code>tp: float | None\n</code></pre> <p>Getter of tp_price</p> <p>Returns:</p> <ul> <li> <code>float | None</code>           \u2013            <p>float | None: <code>float</code> or <code>None</code></p> </li> </ul>"},{"location":"reference/exchange/metatrader/trade/#lettrade.exchange.metatrader.trade.MetaTraderOrder.cancel","title":"cancel","text":"<pre><code>cancel(**kwargs) -&gt; OrderResult\n</code></pre> <p>Cancel order</p> <p>Returns:</p> <ul> <li> <code>OrderResult</code> (              <code>OrderResult</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/metatrader/trade.py</code> <pre><code>def cancel(self, **kwargs) -&gt; OrderResult:\n    \"\"\"Cancel order\n\n    Returns:\n        OrderResult: _description_\n    \"\"\"\n    if not self.parent:\n        # Abandon order\n        result = self._api.order_close(order=self, **kwargs)\n    else:\n        # Virtual SL/TP order of trade\n        result = None\n\n    return super(LiveOrder, self).cancel(raw=result)\n</code></pre>"},{"location":"reference/exchange/metatrader/trade/#lettrade.exchange.metatrader.trade.MetaTraderOrder.fill","title":"fill","text":"<pre><code>fill(\n    price: float, at: Timestamp, raw: object | None = None\n) -&gt; OrderResult\n</code></pre> <p>Fill <code>Order</code>. Set <code>status</code> to <code>OrderState.Executed</code>. Send event to <code>Exchange</code></p> <p>Parameters:</p> <ul> <li> <code>price</code>               (<code>float</code>)           \u2013            <p>Executed price</p> </li> <li> <code>at</code>               (<code>Timestamp</code>)           \u2013            <p>Executed bar</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>OrderResult</code> (              <code>OrderResult</code> )          \u2013            <p>result of <code>Order</code></p> </li> </ul> Source code in <code>lettrade/exchange/order.py</code> <pre><code>def fill(\n    self,\n    price: float,\n    at: pd.Timestamp,\n    raw: object | None = None,\n) -&gt; \"OrderResult\":\n    \"\"\"Fill `Order`.\n    Set `status` to `OrderState.Executed`.\n    Send event to `Exchange`\n\n    Args:\n        price (float): Executed price\n        at (pd.Timestamp): Executed bar\n\n    Raises:\n        RuntimeError: _description_\n\n    Returns:\n        OrderResult: result of `Order`\n    \"\"\"\n    if self.state != OrderState.Placed:\n        raise RuntimeError(f\"Order {self.id} state {self.state} is not Placed\")\n\n    self.filled_at = at\n    self.filled_price = price\n    self.state = OrderState.Filled\n    self.exchange.on_order(self)\n    return OrderResultOk(order=self, raw=raw)\n</code></pre>"},{"location":"reference/exchange/metatrader/trade/#lettrade.exchange.metatrader.trade.MetaTraderOrder.from_position","title":"from_position  <code>classmethod</code>","text":"<pre><code>from_position(\n    position: MetaTraderPosition,\n    sl: float | None = None,\n    tp: float | None = None,\n) -&gt; MetaTraderOrder\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>position</code>               (<code>MetaTraderPosition</code>)           \u2013            <p>description</p> </li> <li> <code>sl</code>               (<code>float | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>tp</code>               (<code>float | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>MetaTraderOrder</code> (              <code>MetaTraderOrder</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/metatrader/trade.py</code> <pre><code>@classmethod\ndef from_position(\n    cls,\n    position: \"MetaTraderPosition\",\n    sl: float | None = None,\n    tp: float | None = None,\n) -&gt; \"MetaTraderOrder\":\n    \"\"\"_summary_\n\n    Args:\n        position (MetaTraderPosition): _description_\n        sl (float | None, optional): _description_. Defaults to None.\n        tp (float | None, optional): _description_. Defaults to None.\n\n    Raises:\n        RuntimeError: _description_\n\n    Returns:\n        MetaTraderOrder: _description_\n    \"\"\"\n    if not sl and not tp:\n        raise RuntimeError(\"not sl and not tp\")\n    return cls(\n        id=f\"{position.id}-{'sl' if sl else 'tp'}\",\n        exchange=position.exchange,\n        data=position.data,\n        state=OrderState.Placed,\n        type=OrderType.Stop if sl else OrderType.Limit,\n        size=-position.size,\n        limit_price=tp,\n        stop_price=sl,\n        parent=position,\n        placed_at=position.entry_at,\n        is_real=False,\n    )\n</code></pre>"},{"location":"reference/exchange/metatrader/trade/#lettrade.exchange.metatrader.trade.MetaTraderOrder.from_raw","title":"from_raw  <code>classmethod</code>","text":"<pre><code>from_raw(\n    raw: Any,\n    exchange: LiveExchange,\n    data: LiveDataFeed = None,\n    api: MetaTraderAPI | None = None,\n) -&gt; MetaTraderOrder | None\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>raw</code>               (<code>Any</code>)           \u2013            <p>description</p> </li> <li> <code>exchange</code>               (<code>LiveExchange</code>)           \u2013            <p>description</p> </li> <li> <code>data</code>               (<code>LiveDataFeed</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>api</code>               (<code>MetaTraderAPI | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>NotImplementedError</code>             \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>MetaTraderOrder | None</code>           \u2013            <p>MetaTraderOrder | None: description</p> </li> </ul> Source code in <code>lettrade/exchange/metatrader/trade.py</code> <pre><code>@classmethod\ndef from_raw(\n    cls,\n    raw: Any,\n    exchange: \"LiveExchange\",\n    data: \"LiveDataFeed\" = None,\n    api: MetaTraderAPI | None = None,\n) -&gt; \"MetaTraderOrder | None\":\n    \"\"\"_summary_\n\n    Args:\n        raw (Any): _description_\n        exchange (LiveExchange): _description_\n        data (LiveDataFeed, optional): _description_. Defaults to None.\n        api (MetaTraderAPI | None, optional): _description_. Defaults to None.\n\n    Raises:\n        NotImplementedError: _description_\n\n    Returns:\n        MetaTraderOrder | None: _description_\n    \"\"\"\n    # DataFeed\n    if data is None:\n        for d in exchange.datas:\n            if d.symbol == raw.symbol:\n                data = d\n                break\n        if data is None:\n            logger.warning(\"Raw order %s is not handling %s\", raw.symbol, raw)\n            return\n\n    # Prices &amp; Side &amp; Type\n    limit_price = None\n    stop_price = None\n    match raw.type:\n        case MT5.ORDER_TYPE_BUY:\n            side = TradeSide.Buy\n            type = OrderType.Market\n        case MT5.ORDER_TYPE_SELL:\n            side = TradeSide.Sell\n            type = OrderType.Market\n        case MT5.ORDER_TYPE_BUY_LIMIT:\n            side = TradeSide.Buy\n            type = OrderType.Limit\n            limit_price = raw.price_open\n        case MT5.ORDER_TYPE_SELL_LIMIT:\n            side = TradeSide.Sell\n            type = OrderType.Limit\n            limit_price = raw.price_open\n        case MT5.ORDER_TYPE_BUY_STOP:\n            side = TradeSide.Buy\n            type = OrderType.Stop\n            stop_price = raw.price_open\n        case MT5.ORDER_TYPE_SELL_STOP:\n            side = TradeSide.Sell\n            type = OrderType.Stop\n            stop_price = raw.price_open\n        # case MT5.ORDER_TYPE_BUY_STOP_LIMIT:\n        #     side = TradeSide.Buy\n        #     type = OrderType.StopLimit\n        #     # TODO\n        #     limit_price = raw.price_open\n        #     stop_price = raw.price_open\n        # case MT5.ORDER_TYPE_SELL_STOP_LIMIT:\n        #     side = TradeSide.Sell\n        #     type = OrderType.StopLimit\n        #     # TODO\n        #     limit_price = raw.price_open\n        #     stop_price = raw.price_open\n        # case MT5.ORDER_TYPE_CLOSE_BY:\n        case _:\n            raise NotImplementedError(\n                f\"Order type {raw.type} is not implement\",\n                raw,\n            )\n    # State\n    match raw.state:\n        case MT5.ORDER_STATE_STARTED:\n            state = OrderState.Pending\n        case MT5.ORDER_STATE_PLACED:\n            state = OrderState.Placed\n        case MT5.ORDER_STATE_CANCELED:\n            state = OrderState.Canceled\n        case MT5.ORDER_STATE_PARTIAL:\n            state = OrderState.Partial\n        case MT5.ORDER_STATE_FILLED:\n            state = OrderState.Filled\n        case MT5.ORDER_STATE_REJECTED:\n            state = OrderState.Canceled\n        case MT5.ORDER_STATE_EXPIRED:\n            state = OrderState.Canceled\n        case MT5.ORDER_STATE_REQUEST_ADD:\n            state = OrderState.Placed\n        case MT5.ORDER_STATE_REQUEST_MODIFY:\n            state = OrderState.Placed\n        case MT5.ORDER_STATE_REQUEST_CANCEL:\n            state = OrderState.Canceled\n        case _:\n            raise NotImplementedError(\n                f\"Raw order state {raw.state} is not implement\"\n            )\n\n    order = cls(\n        exchange=exchange,\n        id=raw.ticket,\n        state=state,\n        data=data,\n        size=side * (raw.volume_current or raw.volume_initial),\n        type=type,\n        limit_price=limit_price,\n        stop_price=stop_price,\n        sl_price=raw.sl or None,\n        tp_price=raw.tp or None,\n        tag=raw.comment,\n        placed_at=pd.to_datetime(raw.time_setup_msc, unit=\"ms\", utc=True),\n        api=api,\n        raw=raw,\n    )\n\n    if hasattr(raw, \"time_done_msc\"):\n        order.filled_price = raw.price_current\n        order.filled_at = pd.to_datetime(raw.time_done_msc, unit=\"ms\", utc=True)\n\n    return order\n</code></pre>"},{"location":"reference/exchange/metatrader/trade/#lettrade.exchange.metatrader.trade.MetaTraderOrder.merge","title":"merge","text":"<pre><code>merge(other: Order)\n</code></pre> <p>Update current <code>Order</code> variables by other <code>Order</code></p> <p>Parameters:</p> <ul> <li> <code>other</code>               (<code>Order</code>)           \u2013            <p>Merge source <code>Order</code></p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>Validate same id</p> </li> </ul> Source code in <code>lettrade/exchange/order.py</code> <pre><code>def merge(self, other: \"Order\"):\n    \"\"\"Update current `Order` variables by other `Order`\n\n    Args:\n        other (Order): Merge source `Order`\n\n    Raises:\n        RuntimeError: Validate same id\n    \"\"\"\n    if other is self:\n        return\n\n    if self.id != other.id:\n        raise RuntimeError(f\"Merge difference id {self.id} != {other.id} order\")\n\n    self.size = other.size\n    self.sl_price = other.sl_price\n    self.tp_price = other.tp_price\n\n    if other.limit_price:\n        self.limit_price = other.limit_price\n    if other.stop_price:\n        self.stop_price = other.stop_price\n    if other.placed_at:\n        self.placed_at = other.placed_at\n\n    if other.filled_price:\n        self.filled_price = other.filled_price\n    if other.filled_at:\n        self.filled_at = other.filled_at\n\n    if other.parent:\n        self.parent = other.parent\n</code></pre>"},{"location":"reference/exchange/metatrader/trade/#lettrade.exchange.metatrader.trade.MetaTraderOrder.place","title":"place","text":"<pre><code>place() -&gt; OrderResult\n</code></pre> <p>summary</p> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>OrderResult</code> (              <code>OrderResult</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/metatrader/trade.py</code> <pre><code>def place(self) -&gt; OrderResult:\n    \"\"\"_summary_\n\n    Raises:\n        RuntimeError: _description_\n\n    Returns:\n        OrderResult: _description_\n    \"\"\"\n    if self.state != OrderState.Pending:\n        raise RuntimeError(f\"Order {self.id} state {self.state} is not Pending\")\n\n    try:\n        result = self._api.order_open(self)\n\n        self.raw = result\n        self.id = result.order\n\n        # TODO: get current order time\n        return super(LiveOrder, self).place(at=self.data.l.index[0], raw=result)\n    except LetLiveOrderInvalidException as e:\n        error = OrderResultError(\n            error=e.message,\n            order=self,\n            raw=e.raw,\n        )\n        logger.error(\"Place order %s\", str(error))\n        self.exchange.on_notify(error=error)\n        return error\n</code></pre>"},{"location":"reference/exchange/metatrader/trade/#lettrade.exchange.metatrader.trade.MetaTraderOrder.update","title":"update","text":"<pre><code>update(\n    limit_price: float | None = None,\n    stop_price: float | None = None,\n    sl: float | None = None,\n    tp: float | None = None,\n    caller: float | None = None,\n    **kwargs\n) -&gt; OrderResult\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>limit_price</code>               (<code>float | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>stop_price</code>               (<code>float | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>sl</code>               (<code>float | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>tp</code>               (<code>float | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>caller</code>               (<code>float | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>OrderResult</code> (              <code>OrderResult</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/metatrader/trade.py</code> <pre><code>def update(\n    self,\n    limit_price: float | None = None,\n    stop_price: float | None = None,\n    sl: float | None = None,\n    tp: float | None = None,\n    caller: float | None = None,\n    **kwargs,\n) -&gt; OrderResult:\n    \"\"\"_summary_\n\n    Args:\n        limit_price (float | None, optional): _description_. Defaults to None.\n        stop_price (float | None, optional): _description_. Defaults to None.\n        sl (float | None, optional): _description_. Defaults to None.\n        tp (float | None, optional): _description_. Defaults to None.\n        caller (float | None, optional): _description_. Defaults to None.\n\n    Raises:\n        RuntimeError: _description_\n\n    Returns:\n        OrderResult: _description_\n    \"\"\"\n    if caller is self:\n        raise RuntimeError(f\"Order recusive update {self}\")\n\n    if self.parent is None:\n        result = self._api.order_update(\n            order=self,\n            limit_price=limit_price,\n            stop_price=stop_price,\n            sl=sl,\n            tp=tp,\n            **kwargs,\n        )\n        return super(LiveOrder, self).update(\n            limit_price=result.limit_price,\n            stop_price=result.stop_price,\n            sl=result.sl,\n            tp=result.tp,\n        )\n    else:\n        # SL/TP Order just a virtual order\n        if caller is not self.parent:\n            if self.is_sl_order:\n                self.parent.update(sl=stop_price, caller=self)\n            elif self.is_tp_order:\n                self.parent.update(tp=limit_price, caller=self)\n            else:\n                raise RuntimeError(f\"Abandon order {self}\")\n\n        return super(LiveOrder, self).update(\n            limit_price=limit_price,\n            stop_price=stop_price,\n        )\n</code></pre>"},{"location":"reference/exchange/metatrader/trade/#lettrade.exchange.metatrader.trade.MetaTraderPosition","title":"MetaTraderPosition","text":"<pre><code>MetaTraderPosition(\n    id: str,\n    exchange: LiveExchange,\n    data: LiveDataFeed,\n    size: float,\n    parent: Order,\n    tag: str | None = None,\n    state: PositionState = PositionState.Open,\n    entry_price: float | None = None,\n    entry_fee: float = 0.0,\n    entry_at: int | None = None,\n    sl_order: Order | None = None,\n    tp_order: Order | None = None,\n    api: LiveAPI | None = None,\n    raw: object | None = None,\n    **kwargs\n)\n</code></pre> <p>               Bases: <code>LivePosition</code></p> <p>Position for MetaTrader</p> Source code in <code>lettrade/exchange/live/trade.py</code> <pre><code>def __init__(\n    self,\n    id: str,\n    exchange: \"LiveExchange\",\n    data: \"LiveDataFeed\",\n    size: float,\n    parent: Order,\n    tag: str | None = None,\n    state: PositionState = PositionState.Open,\n    entry_price: float | None = None,\n    entry_fee: float = 0.0,\n    entry_at: int | None = None,\n    sl_order: Order | None = None,\n    tp_order: Order | None = None,\n    api: LiveAPI | None = None,\n    raw: object | None = None,\n    **kwargs,\n):\n    super().__init__(\n        id=id,\n        exchange=exchange,\n        data=data,\n        size=size,\n        parent=parent,\n        tag=tag,\n        state=state,\n        entry_price=entry_price,\n        entry_fee=entry_fee,\n        entry_at=entry_at,\n        sl_order=sl_order,\n        tp_order=tp_order,\n        api=api,\n        raw=raw,\n        **kwargs,\n    )\n</code></pre>"},{"location":"reference/exchange/metatrader/trade/#lettrade.exchange.metatrader.trade.MetaTraderPosition.fee","title":"fee  <code>property</code>","text":"<pre><code>fee: float\n</code></pre> <p>Fee/Estimate Fee for trade</p> <p>Returns:</p> <ul> <li> <code>float</code> (              <code>float</code> )          \u2013            <p>Fee</p> </li> </ul>"},{"location":"reference/exchange/metatrader/trade/#lettrade.exchange.metatrader.trade.MetaTraderPosition.is_exited","title":"is_exited  <code>property</code>","text":"<pre><code>is_exited: bool\n</code></pre> <p>Flag to check Position state.</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True if the trade exited</p> </li> </ul>"},{"location":"reference/exchange/metatrader/trade/#lettrade.exchange.metatrader.trade.MetaTraderPosition.is_long","title":"is_long  <code>property</code>","text":"<pre><code>is_long: bool\n</code></pre> <p>True if side is long (size is positive).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True/False</p> </li> </ul>"},{"location":"reference/exchange/metatrader/trade/#lettrade.exchange.metatrader.trade.MetaTraderPosition.is_opening","title":"is_opening  <code>property</code>","text":"<pre><code>is_opening: bool\n</code></pre> <p>Flag to check Position state.</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True if the trade opening</p> </li> </ul>"},{"location":"reference/exchange/metatrader/trade/#lettrade.exchange.metatrader.trade.MetaTraderPosition.is_short","title":"is_short  <code>property</code>","text":"<pre><code>is_short: bool\n</code></pre> <p>True if side is short (size is negative).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/metatrader/trade/#lettrade.exchange.metatrader.trade.MetaTraderPosition.pl","title":"pl  <code>property</code>","text":"<pre><code>pl: float\n</code></pre> <p>Estimate Profit or Loss of Position</p> <p>Returns:</p> <ul> <li> <code>float</code> (              <code>float</code> )          \u2013            <p>PnL</p> </li> </ul>"},{"location":"reference/exchange/metatrader/trade/#lettrade.exchange.metatrader.trade.MetaTraderPosition.side","title":"side  <code>property</code>","text":"<pre><code>side: TradeSide\n</code></pre> <p>True if side is short (size is negative).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>TradeSide</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/metatrader/trade/#lettrade.exchange.metatrader.trade.MetaTraderPosition.exit","title":"exit","text":"<pre><code>exit() -&gt; PositionResult\n</code></pre> <p>summary</p> <p>Returns:</p> <ul> <li> <code>PositionResult</code> (              <code>PositionResult</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/metatrader/trade.py</code> <pre><code>def exit(self) -&gt; PositionResult:\n    \"\"\"_summary_\n\n    Returns:\n        PositionResult: _description_\n    \"\"\"\n    result = self._api.position_close(position=self)\n    if result.code != 0:\n        logger.error(\"Update position %s\", str(result))\n        error = PositionResultError(\n            error=result.error,\n            code=result.code,\n            position=self,\n            raw=result,\n        )\n        self.exchange.on_notify(error=error)\n        return error\n\n    execution_raw = self._api.execution_get(id=result.execution_id)\n\n    # TODO: execution object and event\n    result.execution_raw = execution_raw\n\n    return super(LivePosition, self).exit(\n        price=result.price,\n        at=pd.to_datetime(execution_raw.time_msc, unit=\"ms\", utc=True),\n        pl=execution_raw.profit,\n        fee=execution_raw.fee + execution_raw.swap + execution_raw.commission,\n        raw=result,\n    )\n</code></pre>"},{"location":"reference/exchange/metatrader/trade/#lettrade.exchange.metatrader.trade.MetaTraderPosition.from_raw","title":"from_raw  <code>classmethod</code>","text":"<pre><code>from_raw(\n    raw,\n    exchange: LiveExchange,\n    state: PositionState = PositionState.Open,\n    data: LiveDataFeed = None,\n    api: MetaTraderAPI = None,\n) -&gt; MetaTraderPosition\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>raw</code>               (<code>_type_</code>)           \u2013            <p>description</p> </li> <li> <code>exchange</code>               (<code>LiveExchange</code>)           \u2013            <p>description</p> </li> <li> <code>data</code>               (<code>LiveDataFeed</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>api</code>               (<code>MetaTraderAPI</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>NotImplementedError</code>             \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>MetaTraderPosition</code> (              <code>MetaTraderPosition</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/metatrader/trade.py</code> <pre><code>@classmethod\ndef from_raw(\n    cls,\n    raw,\n    exchange: \"LiveExchange\",\n    state: PositionState = PositionState.Open,\n    data: \"LiveDataFeed\" = None,\n    api: MetaTraderAPI = None,\n) -&gt; \"MetaTraderPosition\":\n    \"\"\"_summary_\n\n    Args:\n        raw (_type_): _description_\n        exchange (LiveExchange): _description_\n        data (LiveDataFeed, optional): _description_. Defaults to None.\n        api (MetaTraderAPI, optional): _description_. Defaults to None.\n\n    Raises:\n        NotImplementedError: _description_\n\n    Returns:\n        MetaTraderPosition: _description_\n    \"\"\"\n    # DataFeed\n    if data is None:\n        for d in exchange.datas:\n            if d.symbol == raw.symbol:\n                data = d\n                break\n        if data is None:\n            logger.warning(\"Raw position %s is not handling %s\", raw.symbol, raw)\n            return\n\n    # Side\n    match raw.type:\n        case MT5.POSITION_TYPE_BUY:\n            side = TradeSide.Buy\n        case MT5.POSITION_TYPE_SELL:\n            side = TradeSide.Sell\n        case _:\n            raise NotImplementedError(\n                f\"Position type {raw.type} is not implement\",\n                raw,\n            )\n    # API\n    if api is None:\n        api = exchange._api\n\n    position = cls(\n        exchange=exchange,\n        id=raw.ticket,\n        data=data,\n        state=state,\n        size=side * raw.volume,\n        entry_price=raw.price_open,\n        entry_fee=raw.swap,\n        entry_at=pd.to_datetime(raw.time_msc, unit=\"ms\", utc=True),\n        parent=None,\n        tag=raw.comment,\n        api=api,\n        raw=raw,\n    )\n\n    # SL\n    if raw.sl &gt; 0.0:\n        position.sl_order = exchange._order_cls.from_position(\n            position=position, sl=raw.sl\n        )\n        exchange.on_order(position.sl_order)\n\n    # TP\n    if raw.tp &gt; 0.0:\n        position.tp_order = exchange._order_cls.from_position(\n            position=position, tp=raw.tp\n        )\n        exchange.on_order(position.tp_order)\n\n    if position.state == PositionState.Exit:\n        if position.exit_price is None:\n            if not hasattr(raw, \"executions\"):\n                raw.executions = api.executions_get(position_id=position.id)\n\n            exchange.on_executions_event(raw.executions, broadcast=False)\n\n            execution = exchange.executions[raw.executions[-1].ticket]\n            position.exit_at = execution.at\n            position.exit_price = execution.price\n            position.exit_pl = execution.pl\n            position.exit_fee = execution.fee\n\n    return position\n</code></pre>"},{"location":"reference/exchange/metatrader/trade/#lettrade.exchange.metatrader.trade.MetaTraderPosition.merge","title":"merge","text":"<pre><code>merge(other: LivePosition) -&gt; bool\n</code></pre> <p>Merge LivePosition from another</p> <p>Parameters:</p> <ul> <li> <code>other</code>               (<code>LivePosition</code>)           \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/live/trade.py</code> <pre><code>def merge(self, other: \"LivePosition\") -&gt; bool:\n    \"\"\"Merge LivePosition from another\n\n    Args:\n        other (LivePosition): _description_\n\n    Returns:\n        bool: _description_\n    \"\"\"\n    if not super().merge(other):\n        return False\n    self.raw = other.raw\n    return True\n</code></pre>"},{"location":"reference/exchange/metatrader/trade/#lettrade.exchange.metatrader.trade.MetaTraderPosition.update","title":"update","text":"<pre><code>update(\n    sl: float | None = None,\n    tp: float | None = None,\n    caller: float | None = None,\n    **kwargs\n) -&gt; PositionResult\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>sl</code>               (<code>float | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>tp</code>               (<code>float | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>caller</code>               (<code>float | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>description</p> </li> <li> <code>RuntimeError</code>             \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>PositionResult</code> (              <code>PositionResult</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/metatrader/trade.py</code> <pre><code>def update(\n    self,\n    sl: float | None = None,\n    tp: float | None = None,\n    caller: float | None = None,\n    **kwargs,\n) -&gt; PositionResult:\n    \"\"\"_summary_\n\n    Args:\n        sl (float | None, optional): _description_. Defaults to None.\n        tp (float | None, optional): _description_. Defaults to None.\n        caller (float | None, optional): _description_. Defaults to None.\n\n    Raises:\n        RuntimeError: _description_\n        RuntimeError: _description_\n\n    Returns:\n        PositionResult: _description_\n    \"\"\"\n    if not sl and not tp:\n        raise RuntimeError(\"Update sl=None and tp=None\")\n    if caller is self:\n        raise RuntimeError(f\"Position recusive update {self}\")\n\n    result = self._api.position_update(position=self, sl=sl, tp=tp)\n    if result.code != 0:\n        logger.error(\"Update position %s\", str(result))\n        error = PositionResultError(\n            error=result.error,\n            code=result.code,\n            position=self,\n            raw=result,\n        )\n        self.exchange.on_notify(error=error)\n        return error\n\n    if sl is not None:\n        if self.sl_order:\n            if caller is not self.sl_order:\n                self.sl_order.update(stop_price=sl, caller=self)\n        else:\n            self.sl_order = self.exchange._order_cls.from_position(\n                position=self, sl=sl\n            )\n\n    if tp is not None:\n        if self.tp_order:\n            if caller is not self.tp_order:\n                self.tp_order.update(limit_price=tp, caller=self)\n        else:\n            self.tp_order = self.exchange._order_cls.from_position(\n                position=self, tp=tp\n            )\n\n    return super(LivePosition, self).update(raw=result)\n</code></pre>"},{"location":"reference/indicator/","title":"Index","text":""},{"location":"reference/indicator/#lettrade.indicator","title":"indicator","text":""},{"location":"reference/indicator/#lettrade.indicator.indicators_inject_pandas","title":"indicators_inject_pandas","text":"<pre><code>indicators_inject_pandas()\n</code></pre> <p>Inject indicators to Pandas</p> Source code in <code>lettrade/indicator/__init__.py</code> <pre><code>def indicators_inject_pandas():\n    \"\"\"Inject indicators to Pandas\"\"\"\n    from pandas.core.base import PandasObject\n\n    # Flag to mark indicators injected\n    if hasattr(PandasObject, \"_lt_indicators_injected\"):\n        return\n\n    from .candlestick import pandas_inject as candlestick_pandas_inject\n    from .dataframe import pandas_inject as dataframe_pandas_inject\n    from .series import pandas_inject as series_pandas_inject\n    from .trend import pandas_inject as trend_pandas_inject\n    from .volatility import pandas_inject as volatility_pandas_inject\n\n    series_pandas_inject()\n    dataframe_pandas_inject()\n\n    candlestick_pandas_inject()\n    trend_pandas_inject()\n    volatility_pandas_inject()\n\n    # Flag to mark indicators injected\n    PandasObject._lt_indicators_injected = True\n</code></pre>"},{"location":"reference/indicator/dataframe/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> dataframe","text":""},{"location":"reference/indicator/dataframe/#lettrade.indicator.dataframe","title":"dataframe","text":""},{"location":"reference/indicator/dataframe/#lettrade.indicator.dataframe.signal_condiction","title":"signal_condiction","text":"<pre><code>signal_condiction(\n    dataframe: DataFrame,\n    *condictions: list[list[Series | Any]],\n    name: str,\n    value: int | float = 0,\n    inplace: bool = False,\n    **kwargs\n) -&gt; Series | DataFrame\n</code></pre> <p>Define a signal with multiple condiction</p> <p>Parameters:</p> <ul> <li> <code>dataframe</code>               (<code>DataFrame</code>)           \u2013            <p>description</p> </li> <li> <code>*condictions</code>               (<code>list[list[Series | Any]]</code>, default:                   <code>()</code> )           \u2013            <p>Pairs of condiction [<code>&lt;pandas.Series condiction&gt;</code>, <code>&lt;value&gt;</code>]</p> </li> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>Name of signal, column name when add to DataFrame with inplace=True.</p> </li> <li> <code>value</code>               (<code>int</code>, default:                   <code>0</code> )           \u2013            <p>Default value when condiction is not matched. Defaults to 0.</p> </li> <li> <code>inplace</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>description. Defaults to False.</p> </li> </ul> Usage <pre><code>df.i.signal_condiction(\n    [df[\"close\"] &gt; df[\"open\"], 100],\n    [df[\"close\"] &lt; df[\"open\"], -100],\n    name=\"cdl_direction\",\n    inplace=True,\n)\n</code></pre> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Series | DataFrame</code>           \u2013            <p>pd.Series | pd.DataFrame: description</p> </li> </ul> Source code in <code>lettrade/indicator/dataframe.py</code> <pre><code>def signal_condiction(\n    dataframe: pd.DataFrame,\n    *condictions: list[list[pd.Series | Any]],\n    name: str,\n    value: int | float = 0,\n    inplace: bool = False,\n    **kwargs,\n) -&gt; pd.Series | pd.DataFrame:\n    \"\"\"Define a signal with multiple condiction\n\n    Args:\n        dataframe (pd.DataFrame): _description_\n        *condictions (list[list[pd.Series | Any]]): Pairs of condiction [`&lt;pandas.Series condiction&gt;`, `&lt;value&gt;`]\n        name (str): Name of signal, column name when add to DataFrame with inplace=True.\n        value (int, optional): Default value when condiction is not matched. Defaults to 0.\n        inplace (bool, optional): _description_. Defaults to False.\n\n    Usage:\n        ```python\n        df.i.signal_condiction(\n            [df[\"close\"] &gt; df[\"open\"], 100],\n            [df[\"close\"] &lt; df[\"open\"], -100],\n            name=\"cdl_direction\",\n            inplace=True,\n        )\n        ```\n\n    Raises:\n        RuntimeError: _description_\n\n    Returns:\n        pd.Series | pd.DataFrame: _description_\n    \"\"\"\n    if __debug__:\n        if not isinstance(dataframe, pd.DataFrame):\n            raise RuntimeError(\n                f\"dataframe type '{type(dataframe)}' \"\n                \"is not instance of pandas.DataFrame\"\n            )\n\n    s = pd.Series(value, index=dataframe.index, name=name, **kwargs)\n    for condiction in condictions:\n        s.loc[condiction[0]] = condiction[1]\n\n    if inplace:\n        dataframe[name] = s\n        return dataframe\n\n    return s\n</code></pre>"},{"location":"reference/indicator/dataframe/#lettrade.indicator.dataframe.signal_direction","title":"signal_direction","text":"<pre><code>signal_direction(\n    dataframe: DataFrame,\n    signal_up: Series,\n    signal_down: Series,\n    name: str,\n    value: int = 0,\n    value_up: int = 100,\n    value_down: int = -100,\n    inplace: bool = False,\n    **kwargs\n) -&gt; Series | DataFrame\n</code></pre> <p>Define a signal with 2 direction Up and Down</p> <p>Parameters:</p> <ul> <li> <code>dataframe</code>               (<code>DataFrame</code>)           \u2013            <p>description</p> </li> <li> <code>signal_up</code>               (<code>Series</code>)           \u2013            <p>description</p> </li> <li> <code>signal_down</code>               (<code>Series</code>)           \u2013            <p>description</p> </li> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>Name of signal, column name when add to DataFrame with inplace=True.</p> </li> <li> <code>value</code>               (<code>int</code>, default:                   <code>0</code> )           \u2013            <p>Default value when condiction is not matched. Defaults to 0.</p> </li> <li> <code>value_up</code>               (<code>int</code>, default:                   <code>100</code> )           \u2013            <p>description. Defaults to 100.</p> </li> <li> <code>value_down</code>               (<code>int</code>, default:                   <code>-100</code> )           \u2013            <p>description. Defaults to -100.</p> </li> <li> <code>inplace</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Whether to add to the DataFrame and return DataFrame rather than return result. Defaults to False.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Series | DataFrame</code>           \u2013            <p>pd.Series | pd.DataFrame: description</p> </li> </ul> Source code in <code>lettrade/indicator/dataframe.py</code> <pre><code>def signal_direction(\n    dataframe: pd.DataFrame,\n    signal_up: pd.Series,\n    signal_down: pd.Series,\n    name: str,\n    value: int = 0,\n    value_up: int = 100,\n    value_down: int = -100,\n    inplace: bool = False,\n    **kwargs,\n) -&gt; pd.Series | pd.DataFrame:\n    \"\"\"Define a signal with 2 direction Up and Down\n\n    Args:\n        dataframe (pd.DataFrame): _description_\n        signal_up (pd.Series): _description_\n        signal_down (pd.Series): _description_\n        name (str): Name of signal, column name when add to DataFrame with inplace=True.\n        value (int, optional): Default value when condiction is not matched. Defaults to 0.\n        value_up (int, optional): _description_. Defaults to 100.\n        value_down (int, optional): _description_. Defaults to -100.\n        inplace (bool, optional): Whether to add to the DataFrame and return DataFrame rather than return result. Defaults to False.\n\n    Returns:\n        pd.Series | pd.DataFrame: _description_\n    \"\"\"\n    return signal_condiction(\n        dataframe,\n        [signal_up, value_up],\n        [signal_down, value_down],\n        name=name,\n        value=value,\n        inplace=inplace,\n        **kwargs,\n    )\n</code></pre>"},{"location":"reference/indicator/series/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> series","text":""},{"location":"reference/indicator/series/#lettrade.indicator.series","title":"series","text":""},{"location":"reference/indicator/series/#lettrade.indicator.series.above","title":"above","text":"<pre><code>above(series1: Series, series2: Series, **kwargs) -&gt; Series\n</code></pre> <p>Check a Series is above another Series</p> <p>Parameters:</p> <ul> <li> <code>series1</code>               (<code>Series</code>)           \u2013            <p>first Series</p> </li> <li> <code>series2</code>               (<code>Series</code>)           \u2013            <p>second Series</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Series</code>           \u2013            <p>pd.Series: True series1 is above series2 else False</p> </li> </ul> Source code in <code>lettrade/indicator/series.py</code> <pre><code>def above(series1: pd.Series, series2: pd.Series, **kwargs) -&gt; pd.Series:\n    \"\"\"Check a Series is above another Series\n\n    Args:\n        series1 (pd.Series): first Series\n        series2 (pd.Series): second Series\n\n    Returns:\n        pd.Series: True series1 is above series2 else False\n    \"\"\"\n    diffed = diff(series1, series2)\n    return diffed.apply(lambda v: True if v &gt; 0 else False).astype(bool)\n</code></pre>"},{"location":"reference/indicator/series/#lettrade.indicator.series.below","title":"below","text":"<pre><code>below(series1: Series, series2: Series, **kwargs) -&gt; Series\n</code></pre> <p>Check a Series is below another Series</p> <p>Parameters:</p> <ul> <li> <code>series1</code>               (<code>Series</code>)           \u2013            <p>first Series</p> </li> <li> <code>series2</code>               (<code>Series</code>)           \u2013            <p>second Series</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Series</code>           \u2013            <p>pd.Series: True series1 is below series2 else False</p> </li> </ul> Source code in <code>lettrade/indicator/series.py</code> <pre><code>def below(series1: pd.Series, series2: pd.Series, **kwargs) -&gt; pd.Series:\n    \"\"\"Check a Series is below another Series\n\n    Args:\n        series1 (pd.Series): first Series\n        series2 (pd.Series): second Series\n\n    Returns:\n        pd.Series: True series1 is below series2 else False\n    \"\"\"\n    diffed = diff(series1, series2)\n    return diffed.apply(lambda v: True if v &lt; 0 else False).astype(bool)\n</code></pre>"},{"location":"reference/indicator/series/#lettrade.indicator.series.crossover","title":"crossover","text":"<pre><code>crossover(\n    series1: Series, series2: Series, **kwargs\n) -&gt; Series\n</code></pre> <p>Check if a Series cross over another Series</p> <p>Parameters:</p> <ul> <li> <code>series1</code>               (<code>Series</code>)           \u2013            <p>first Series</p> </li> <li> <code>series2</code>               (<code>Series</code>)           \u2013            <p>second Series</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Series</code>           \u2013            <p>pd.Series: True if series1 cross over series2 else False</p> </li> </ul> Source code in <code>lettrade/indicator/series.py</code> <pre><code>def crossover(series1: pd.Series, series2: pd.Series, **kwargs) -&gt; pd.Series:\n    \"\"\"Check if a Series cross over another Series\n\n    Args:\n        series1 (pd.Series): first Series\n        series2 (pd.Series): second Series\n\n    Returns:\n        pd.Series: True if series1 cross over series2 else False\n    \"\"\"\n    below1 = below(series1, series2).shift(1)\n    above0 = above(series1, series2)\n    return below1 &amp; above0\n</code></pre>"},{"location":"reference/indicator/series/#lettrade.indicator.series.crossunder","title":"crossunder","text":"<pre><code>crossunder(\n    series1: Series, series2: Series, **kwargs\n) -&gt; Series\n</code></pre> <p>Check if a Series cross under another Series</p> <p>Parameters:</p> <ul> <li> <code>series1</code>               (<code>Series</code>)           \u2013            <p>first Series</p> </li> <li> <code>series2</code>               (<code>Series</code>)           \u2013            <p>second Series</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Series</code>           \u2013            <p>pd.Series: True if series1 cross under series2 else False</p> </li> </ul> Source code in <code>lettrade/indicator/series.py</code> <pre><code>def crossunder(series1: pd.Series, series2: pd.Series, **kwargs) -&gt; pd.Series:\n    \"\"\"Check if a Series cross under another Series\n\n    Args:\n        series1 (pd.Series): first Series\n        series2 (pd.Series): second Series\n\n    Returns:\n        pd.Series: True if series1 cross under series2 else False\n    \"\"\"\n    above1 = above(series1, series2).shift(1)\n    below0 = below(series1, series2)\n    return below0 &amp; above1\n</code></pre>"},{"location":"reference/indicator/series/#lettrade.indicator.series.diff","title":"diff","text":"<pre><code>diff(series1: Series, series2: Series, **kwargs) -&gt; Series\n</code></pre> <p>Difference between 2 series</p> <p>Parameters:</p> <ul> <li> <code>series1</code>               (<code>Series</code>)           \u2013            <p>description</p> </li> <li> <code>series2</code>               (<code>Series</code>)           \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Series</code>           \u2013            <p>pd.Series: Diff of 2 series</p> </li> </ul> Source code in <code>lettrade/indicator/series.py</code> <pre><code>def diff(series1: pd.Series, series2: pd.Series, **kwargs) -&gt; pd.Series:\n    \"\"\"Difference between 2 series\n\n    Args:\n        series1 (pd.Series): _description_\n        series2 (pd.Series): _description_\n\n    Returns:\n        pd.Series: Diff of 2 series\n    \"\"\"\n    return series1 - series2\n</code></pre>"},{"location":"reference/indicator/candlestick/","title":"Index","text":""},{"location":"reference/indicator/candlestick/#lettrade.indicator.candlestick","title":"candlestick","text":""},{"location":"reference/indicator/candlestick/candlestick/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> candlestick","text":""},{"location":"reference/indicator/candlestick/candlestick/#lettrade.indicator.candlestick.candlestick","title":"candlestick","text":""},{"location":"reference/indicator/candlestick/candlestick/#lettrade.indicator.candlestick.candlestick.cdl_direction","title":"cdl_direction","text":"<pre><code>cdl_direction(\n    dataframe: DataFrame,\n    name: str | None = None,\n    prefix: str = \"cdl_\",\n    inplace: bool = False,\n) -&gt; Series | DataFrame\n</code></pre> <p>Direction of candle</p> <p>Parameters:</p> <ul> <li> <code>dataframe</code>               (<code>DataFrame</code>)           \u2013            <p>description</p> </li> <li> <code>name</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>prefix</code>               (<code>str</code>, default:                   <code>'cdl_'</code> )           \u2013            <p>description. Defaults to \"cdl_\".</p> </li> <li> <code>inplace</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>description. Defaults to False.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Series | DataFrame</code>           \u2013            <p>pd.Series | pd.DataFrame: <code>pd.Series</code> return [100, 0 , -100] - <code>100</code> for bull bar - <code>-100</code> for bear bar - <code>0</code> for None</p> </li> </ul> Source code in <code>lettrade/indicator/candlestick/candlestick.py</code> <pre><code>def cdl_direction(\n    dataframe: pd.DataFrame,\n    name: str | None = None,\n    prefix: str = \"cdl_\",\n    inplace: bool = False,\n) -&gt; pd.Series | pd.DataFrame:\n    \"\"\"Direction of candle\n\n    Args:\n        dataframe (pd.DataFrame): _description_\n        name (str | None, optional): _description_. Defaults to None.\n        prefix (str, optional): _description_. Defaults to \"cdl_\".\n        inplace (bool, optional): _description_. Defaults to False.\n\n    Returns:\n        pd.Series | pd.DataFrame: `pd.Series` return [100, 0 , -100]\n            - `100` for bull bar\n            - `-100` for bear bar\n            - `0` for None\n    \"\"\"\n    if __debug__:\n        if not isinstance(dataframe, pd.DataFrame):\n            raise RuntimeError(\n                f\"dataframe type '{type(dataframe)}' \"\n                \"is not instance of pandas.DataFrame\"\n            )\n    i = dataframe.apply(\n        lambda r: 100 if r.open &lt; r.close else -100 if r.open &gt; r.close else 0,\n        axis=1,\n    ).astype(int)\n\n    if inplace:\n        dataframe[name or f\"{prefix}direction\"] = i\n        return dataframe\n\n    return i\n</code></pre>"},{"location":"reference/indicator/candlestick/talib/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> talib","text":""},{"location":"reference/indicator/candlestick/talib/#lettrade.indicator.candlestick.talib","title":"talib","text":""},{"location":"reference/indicator/candlestick/talib/#lettrade.indicator.candlestick.talib.cdl_3blackcrows","title":"cdl_3blackcrows","text":"<pre><code>cdl_3blackcrows(\n    dataframe: DataFrame,\n    name: str | None = None,\n    prefix: str = \"cdl_\",\n    inplace: bool = False,\n    **kwargs\n) -&gt; Series | DataFrame\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>dataframe</code>               (<code>DataFrame</code>)           \u2013            <p>description</p> </li> <li> <code>name</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>prefix</code>               (<code>str</code>, default:                   <code>'cdl_'</code> )           \u2013            <p>description. Defaults to \"cdl_\".</p> </li> <li> <code>inplace</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>description. Defaults to False.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Series | DataFrame</code>           \u2013            <p>pd.Series | pd.DataFrame: description</p> </li> </ul> Source code in <code>lettrade/indicator/candlestick/talib.py</code> <pre><code>def cdl_3blackcrows(\n    dataframe: pd.DataFrame,\n    name: str | None = None,\n    prefix: str = \"cdl_\",\n    inplace: bool = False,\n    **kwargs,\n) -&gt; pd.Series | pd.DataFrame:\n    \"\"\"_summary_\n\n    Args:\n        dataframe (pd.DataFrame): _description_\n        name (str | None, optional): _description_. Defaults to None.\n        prefix (str, optional): _description_. Defaults to \"cdl_\".\n        inplace (bool, optional): _description_. Defaults to False.\n\n    Returns:\n        pd.Series | pd.DataFrame: _description_\n    \"\"\"\n    return cdl_pattern(\n        dataframe=dataframe,\n        pattern=\"3blackcrows\",\n        name=name,\n        prefix=prefix,\n        inplace=inplace,\n        **kwargs,\n    )\n</code></pre>"},{"location":"reference/indicator/candlestick/talib/#lettrade.indicator.candlestick.talib.cdl_3whitesoldiers","title":"cdl_3whitesoldiers","text":"<pre><code>cdl_3whitesoldiers(\n    dataframe: DataFrame,\n    name: str | None = None,\n    prefix: str = \"cdl_\",\n    inplace: bool = False,\n    **kwargs\n) -&gt; Series | DataFrame\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>dataframe</code>               (<code>DataFrame</code>)           \u2013            <p>description</p> </li> <li> <code>name</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>prefix</code>               (<code>str</code>, default:                   <code>'cdl_'</code> )           \u2013            <p>description. Defaults to \"cdl_\".</p> </li> <li> <code>inplace</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>description. Defaults to False.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Series | DataFrame</code>           \u2013            <p>pd.Series | pd.DataFrame: description</p> </li> </ul> Source code in <code>lettrade/indicator/candlestick/talib.py</code> <pre><code>def cdl_3whitesoldiers(\n    dataframe: pd.DataFrame,\n    name: str | None = None,\n    prefix: str = \"cdl_\",\n    inplace: bool = False,\n    **kwargs,\n) -&gt; pd.Series | pd.DataFrame:\n    \"\"\"_summary_\n\n    Args:\n        dataframe (pd.DataFrame): _description_\n        name (str | None, optional): _description_. Defaults to None.\n        prefix (str, optional): _description_. Defaults to \"cdl_\".\n        inplace (bool, optional): _description_. Defaults to False.\n\n    Returns:\n        pd.Series | pd.DataFrame: _description_\n    \"\"\"\n    return cdl_pattern(\n        dataframe=dataframe,\n        pattern=\"3whitesoldiers\",\n        name=name,\n        prefix=prefix,\n        inplace=inplace,\n        **kwargs,\n    )\n</code></pre>"},{"location":"reference/indicator/candlestick/talib/#lettrade.indicator.candlestick.talib.cdl_pattern","title":"cdl_pattern","text":"<pre><code>cdl_pattern(\n    dataframe: DataFrame,\n    pattern: str,\n    name: str | None = None,\n    prefix: str = \"cdl_\",\n    inplace: bool = False,\n    **kwargs\n) -&gt; Series | DataFrame\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>dataframe</code>               (<code>DataFrame</code>)           \u2013            <p>pandas.DataFrame with ohlcv</p> </li> <li> <code>pattern</code>               (<code>str</code>)           \u2013            <p>TA-Lib candle pattern name. Ex: <code>3whitesoldiers</code>, <code>3blackcrows</code></p> </li> <li> <code>name</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>prefix</code>               (<code>str</code>, default:                   <code>'cdl_'</code> )           \u2013            <p>description. Defaults to \"cdl_\".</p> </li> <li> <code>inplace</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>description. Defaults to False.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Series | DataFrame</code>           \u2013            <p>pd.Series | pd.DataFrame: description</p> </li> </ul> Source code in <code>lettrade/indicator/candlestick/talib.py</code> <pre><code>def cdl_pattern(\n    dataframe: pd.DataFrame,\n    pattern: str,\n    name: str | None = None,\n    prefix: str = \"cdl_\",\n    inplace: bool = False,\n    **kwargs,\n) -&gt; pd.Series | pd.DataFrame:\n    \"\"\"_summary_\n\n    Args:\n        dataframe (pd.DataFrame): pandas.DataFrame with ohlcv\n        pattern (str): TA-Lib candle pattern name. Ex: `3whitesoldiers`, `3blackcrows`\n        name (str | None, optional): _description_. Defaults to None.\n        prefix (str, optional): _description_. Defaults to \"cdl_\".\n        inplace (bool, optional): _description_. Defaults to False.\n\n    Raises:\n        RuntimeError: _description_\n\n    Returns:\n        pd.Series | pd.DataFrame: _description_\n    \"\"\"\n    if __debug__:\n        if not isinstance(dataframe, pd.DataFrame):\n            raise RuntimeError(\n                f\"dataframe type '{type(dataframe)}' \"\n                \"is not instance of pandas.DataFrame\"\n            )\n\n    i = getattr(ta, f\"CDL{pattern.upper()}\")(dataframe, **kwargs)\n\n    if inplace:\n        dataframe[name or f\"{prefix}{pattern.lower()}\"] = i\n        return dataframe\n\n    return i\n</code></pre>"},{"location":"reference/indicator/trend/","title":"Index","text":""},{"location":"reference/indicator/trend/#lettrade.indicator.trend","title":"trend","text":""},{"location":"reference/indicator/trend/ema/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> ema","text":""},{"location":"reference/indicator/trend/ema/#lettrade.indicator.trend.ema","title":"ema","text":""},{"location":"reference/indicator/trend/ema/#lettrade.indicator.trend.ema.ema","title":"ema","text":"<pre><code>ema(\n    series: Series | str = \"close\",\n    period: int = None,\n    dataframe: DataFrame = None,\n    prefix: str = \"\",\n    inplace: bool = False,\n    **kwargs\n) -&gt; Series | DataFrame\n</code></pre> <p>Exponential Moving Average</p> <p>Parameters:</p> <ul> <li> <code>series</code>               (<code>Series | str</code>, default:                   <code>'close'</code> )           \u2013            <p>description</p> </li> <li> <code>period</code>               (<code>int</code>, default:                   <code>None</code> )           \u2013            <p>description</p> </li> <li> <code>dataframe</code>               (<code>DataFrame</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>prefix</code>               (<code>str</code>, default:                   <code>''</code> )           \u2013            <p>description. Defaults to \"\".</p> </li> <li> <code>inplace</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>description. Defaults to False.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Series | DataFrame</code>           \u2013            <p>pd.Series | pd.DataFrame: description</p> </li> </ul> Source code in <code>lettrade/indicator/trend/ema.py</code> <pre><code>def ema(\n    series: pd.Series | str = \"close\",\n    period: int = None,\n    dataframe: pd.DataFrame = None,\n    prefix: str = \"\",\n    inplace: bool = False,\n    **kwargs,\n) -&gt; pd.Series | pd.DataFrame:\n    \"\"\"Exponential Moving Average\n\n    Args:\n        series (pd.Series | str): _description_\n        period (int): _description_\n        dataframe (pd.DataFrame, optional): _description_. Defaults to None.\n        prefix (str, optional): _description_. Defaults to \"\".\n        inplace (bool, optional): _description_. Defaults to False.\n\n    Raises:\n        RuntimeError: _description_\n\n    Returns:\n        pd.Series | pd.DataFrame: _description_\n    \"\"\"\n    if __debug__:\n        if period is None or period &lt;= 0:\n            raise RuntimeError(f\"Period {period} is invalid\")\n\n        if dataframe is None:\n            if not isinstance(series, pd.Series):\n                raise RuntimeError(\n                    f\"series type '{type(series)}' is not instance of pandas.Series\"\n                )\n\n            if inplace:\n                raise RuntimeError(\"dataframe isnot set when inplace=True\")\n        else:\n            if not isinstance(dataframe, pd.DataFrame):\n                raise RuntimeError(\n                    f\"dataframe type '{type(dataframe)}' \"\n                    \"is not instance of pandas.DataFrame\"\n                )\n\n            if not isinstance(series, str):\n                raise RuntimeError(\n                    f\"Series type {type(series)} is not string of column name\"\n                )\n\n            series = dataframe[series]\n\n    i = ta.EMA(series, timeperiod=period, **kwargs)\n\n    if inplace:\n        dataframe[f\"{prefix}ema\"] = i\n        return dataframe\n\n    return i\n</code></pre>"},{"location":"reference/indicator/trend/ichimoku/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> ichimoku","text":""},{"location":"reference/indicator/trend/ichimoku/#lettrade.indicator.trend.ichimoku","title":"ichimoku","text":""},{"location":"reference/indicator/trend/ichimoku/#lettrade.indicator.trend.ichimoku.ichimoku","title":"ichimoku","text":"<pre><code>ichimoku(\n    dataframe: DataFrame,\n    conversion_line_period: int = 9,\n    base_line_periods: int = 26,\n    laggin_span: int = 52,\n    displacement: int = 26,\n    cloud: bool = False,\n    prefix: str = \"\",\n    inplace: bool = False,\n) -&gt; dict[str, Series] | DataFrame\n</code></pre> <p>Ichimoku cloud indicator</p> Note <p>Do not use <code>chikou_span</code> for backtesting. It looks into the future, is not printed by most charting platforms. It is only useful for visual analysis</p> <p>Parameters:</p> <ul> <li> <code>dataframe</code>               (<code>DataFrame</code>)           \u2013            <p>Dataframe containing OHLCV data</p> </li> <li> <code>conversion_line_period</code>               (<code>int</code>, default:                   <code>9</code> )           \u2013            <p>Conversion line Period. Defaults to 9.</p> </li> <li> <code>base_line_periods</code>               (<code>int</code>, default:                   <code>26</code> )           \u2013            <p>Base line Periods. Defaults to 26.</p> </li> <li> <code>laggin_span</code>               (<code>int</code>, default:                   <code>52</code> )           \u2013            <p>Lagging span period. Defaults to 52.</p> </li> <li> <code>displacement</code>               (<code>int</code>, default:                   <code>26</code> )           \u2013            <p>Displacement (shift). Defaults to 26.</p> </li> <li> <code>cloud</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Add cloud direction. Defaults to False.</p> </li> <li> <code>prefix</code>               (<code>str</code>, default:                   <code>''</code> )           \u2013            <p>description. Defaults to \"ichimoku_\".</p> </li> <li> <code>inplace</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>description. Defaults to False.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict[str, Series] | DataFrame</code>           \u2013            <p>dict[str, pd.Series] | pd.DataFrame: {tenkan_sen, kijun_sen, senkou_span_a, senkou_span_b, leading_senkou_span_a,</p> </li> <li> <code>dict[str, Series] | DataFrame</code>           \u2013            <p>leading_senkou_span_b, chikou_span, cloud_white, cloud_black}</p> </li> </ul> Source code in <code>lettrade/indicator/trend/ichimoku.py</code> <pre><code>def ichimoku(\n    dataframe: pd.DataFrame,\n    conversion_line_period: int = 9,\n    base_line_periods: int = 26,\n    laggin_span: int = 52,\n    displacement: int = 26,\n    cloud: bool = False,\n    prefix: str = \"\",\n    inplace: bool = False,\n) -&gt; dict[str, pd.Series] | pd.DataFrame:\n    \"\"\"Ichimoku cloud indicator\n\n    Note:\n        Do not use `chikou_span` for backtesting.\n        It looks into the future, is not printed by most charting platforms.\n        It is only useful for visual analysis\n\n    Args:\n        dataframe (pd.DataFrame): Dataframe containing OHLCV data\n        conversion_line_period (int, optional): Conversion line Period. Defaults to 9.\n        base_line_periods (int, optional): Base line Periods. Defaults to 26.\n        laggin_span (int, optional): Lagging span period. Defaults to 52.\n        displacement (int, optional): Displacement (shift). Defaults to 26.\n        cloud (bool, optional): Add cloud direction. Defaults to False.\n        prefix (str, optional): _description_. Defaults to \"ichimoku_\".\n        inplace (bool, optional): _description_. Defaults to False.\n\n    Returns:\n        dict[str, pd.Series] | pd.DataFrame: {tenkan_sen, kijun_sen, senkou_span_a, senkou_span_b, leading_senkou_span_a,\n        leading_senkou_span_b, chikou_span, cloud_white, cloud_black}\n    \"\"\"\n    if __debug__:\n        if not isinstance(dataframe, pd.DataFrame):\n            raise RuntimeError(\n                f\"dataframe type '{type(dataframe)}' \"\n                \"is not instance of pandas.DataFrame\"\n            )\n\n    tenkan_sen = (\n        dataframe[\"high\"].rolling(window=conversion_line_period).max()\n        + dataframe[\"low\"].rolling(window=conversion_line_period).min()\n    ) / 2\n\n    kijun_sen = (\n        dataframe[\"high\"].rolling(window=base_line_periods).max()\n        + dataframe[\"low\"].rolling(window=base_line_periods).min()\n    ) / 2\n\n    leading_senkou_span_a = (tenkan_sen + kijun_sen) / 2\n\n    leading_senkou_span_b = (\n        dataframe[\"high\"].rolling(window=laggin_span).max()\n        + dataframe[\"low\"].rolling(window=laggin_span).min()\n    ) / 2\n\n    senkou_span_a = leading_senkou_span_a.shift(displacement - 1)\n\n    senkou_span_b = leading_senkou_span_b.shift(displacement - 1)\n\n    chikou_span = dataframe[\"close\"].shift(-displacement + 1)\n\n    if cloud:\n        cloud_white = senkou_span_a &gt; senkou_span_b\n        cloud_black = senkou_span_b &gt; senkou_span_a\n\n    # Result is inplace or new dict\n    result = dataframe if inplace else {}\n\n    result[f\"{prefix}tenkan_sen\"] = tenkan_sen\n    result[f\"{prefix}kijun_sen\"] = kijun_sen\n    result[f\"{prefix}senkou_span_a\"] = senkou_span_a\n    result[f\"{prefix}senkou_span_b\"] = senkou_span_b\n    result[f\"{prefix}leading_senkou_span_a\"] = leading_senkou_span_a\n    result[f\"{prefix}leading_senkou_span_b\"] = leading_senkou_span_b\n    result[f\"{prefix}chikou_span\"] = chikou_span\n\n    if cloud:\n        result[f\"{prefix}cloud_white\"] = cloud_white\n        result[f\"{prefix}cloud_black\"] = cloud_black\n\n    return result\n</code></pre>"},{"location":"reference/indicator/vendor/","title":"Index","text":""},{"location":"reference/indicator/vendor/#lettrade.indicator.vendor","title":"vendor","text":""},{"location":"reference/indicator/vendor/qtpylib/","title":"Index","text":""},{"location":"reference/indicator/vendor/qtpylib/#lettrade.indicator.vendor.qtpylib","title":"qtpylib","text":""},{"location":"reference/indicator/vendor/qtpylib/inject/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> inject","text":""},{"location":"reference/indicator/vendor/qtpylib/inject/#lettrade.indicator.vendor.qtpylib.inject","title":"inject","text":""},{"location":"reference/indicator/vendor/qtpylib/qtpylib/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> qtpylib","text":""},{"location":"reference/indicator/vendor/qtpylib/qtpylib/#lettrade.indicator.vendor.qtpylib.qtpylib","title":"qtpylib","text":""},{"location":"reference/indicator/vendor/qtpylib/qtpylib/#lettrade.indicator.vendor.qtpylib.qtpylib.cci","title":"cci","text":"<pre><code>cci(series, window=14)\n</code></pre> <p>compute commodity channel index</p> Source code in <code>lettrade/indicator/vendor/qtpylib/qtpylib.py</code> <pre><code>def cci(series, window=14):\n    \"\"\"\n    compute commodity channel index\n    \"\"\"\n    price = typical_price(series)\n    typical_mean = rolling_mean(price, window)\n    res = (price - typical_mean) / (0.015 * np.std(typical_mean))\n    return pd.Series(index=series.index, data=res)\n</code></pre>"},{"location":"reference/indicator/vendor/qtpylib/qtpylib/#lettrade.indicator.vendor.qtpylib.qtpylib.ibs","title":"ibs","text":"<pre><code>ibs(bars)\n</code></pre> <p>Internal bar strength</p> Source code in <code>lettrade/indicator/vendor/qtpylib/qtpylib.py</code> <pre><code>def ibs(bars):\n    \"\"\"Internal bar strength\"\"\"\n    res = np.round((bars[\"close\"] - bars[\"low\"]) / (bars[\"high\"] - bars[\"low\"]), 2)\n    return pd.Series(index=bars.index, data=res)\n</code></pre>"},{"location":"reference/indicator/vendor/qtpylib/qtpylib/#lettrade.indicator.vendor.qtpylib.qtpylib.macd","title":"macd","text":"<pre><code>macd(series, fast=3, slow=10, smooth=16)\n</code></pre> <p>compute the MACD (Moving Average Convergence/Divergence) using a fast and slow exponential moving avg' return value is emaslow, emafast, macd which are len(x) arrays</p> Source code in <code>lettrade/indicator/vendor/qtpylib/qtpylib.py</code> <pre><code>def macd(series, fast=3, slow=10, smooth=16):\n    \"\"\"\n    compute the MACD (Moving Average Convergence/Divergence)\n    using a fast and slow exponential moving avg'\n    return value is emaslow, emafast, macd which are len(x) arrays\n    \"\"\"\n    macd_line = rolling_weighted_mean(series, window=fast) - rolling_weighted_mean(\n        series, window=slow\n    )\n    signal = rolling_weighted_mean(macd_line, window=smooth)\n    histogram = macd_line - signal\n    # return macd_line, signal, histogram\n    return pd.DataFrame(\n        index=series.index,\n        data={\n            \"macd\": macd_line.values,\n            \"signal\": signal.values,\n            \"histogram\": histogram.values,\n        },\n    )\n</code></pre>"},{"location":"reference/indicator/vendor/qtpylib/qtpylib/#lettrade.indicator.vendor.qtpylib.qtpylib.pvt","title":"pvt","text":"<pre><code>pvt(bars)\n</code></pre> <p>Price Volume Trend</p> Source code in <code>lettrade/indicator/vendor/qtpylib/qtpylib.py</code> <pre><code>def pvt(bars):\n    \"\"\"Price Volume Trend\"\"\"\n    trend = ((bars[\"close\"] - bars[\"close\"].shift(1)) / bars[\"close\"].shift(1)) * bars[\n        \"volume\"\n    ]\n    return trend.cumsum()\n</code></pre>"},{"location":"reference/indicator/vendor/qtpylib/qtpylib/#lettrade.indicator.vendor.qtpylib.qtpylib.roc","title":"roc","text":"<pre><code>roc(series, window=14)\n</code></pre> <p>compute rate of change</p> Source code in <code>lettrade/indicator/vendor/qtpylib/qtpylib.py</code> <pre><code>def roc(series, window=14):\n    \"\"\"\n    compute rate of change\n    \"\"\"\n    res = (series - series.shift(window)) / series.shift(window)\n    return pd.Series(index=series.index, data=res)\n</code></pre>"},{"location":"reference/indicator/vendor/qtpylib/qtpylib/#lettrade.indicator.vendor.qtpylib.qtpylib.rolling_vwap","title":"rolling_vwap","text":"<pre><code>rolling_vwap(bars, window=200, min_periods=None)\n</code></pre> <p>calculate vwap using moving window (input can be pandas series or numpy array) bars are usually mid [ (h+l)/2 ] or typical [ (h+l+c)/3 ]</p> Source code in <code>lettrade/indicator/vendor/qtpylib/qtpylib.py</code> <pre><code>def rolling_vwap(bars, window=200, min_periods=None):\n    \"\"\"\n    calculate vwap using moving window\n    (input can be pandas series or numpy array)\n    bars are usually mid [ (h+l)/2 ] or typical [ (h+l+c)/3 ]\n    \"\"\"\n    min_periods = window if min_periods is None else min_periods\n\n    typical = (bars[\"high\"] + bars[\"low\"] + bars[\"close\"]) / 3\n    volume = bars[\"volume\"]\n\n    left = (volume * typical).rolling(window=window, min_periods=min_periods).sum()\n    right = volume.rolling(window=window, min_periods=min_periods).sum()\n\n    return (\n        pd.Series(index=bars.index, data=(left / right))\n        .replace([np.inf, -np.inf], float(\"NaN\"))\n        .ffill()\n    )\n</code></pre>"},{"location":"reference/indicator/vendor/qtpylib/qtpylib/#lettrade.indicator.vendor.qtpylib.qtpylib.rsi","title":"rsi","text":"<pre><code>rsi(series, window=14)\n</code></pre> <p>compute the n period relative strength indicator</p> Source code in <code>lettrade/indicator/vendor/qtpylib/qtpylib.py</code> <pre><code>def rsi(series, window=14):\n    \"\"\"\n    compute the n period relative strength indicator\n    \"\"\"\n\n    # 100-(100/relative_strength)\n    deltas = np.diff(series)\n    seed = deltas[: window + 1]\n\n    # default values\n    ups = seed[seed &gt; 0].sum() / window\n    downs = -seed[seed &lt; 0].sum() / window\n    rsival = np.zeros_like(series)\n    rsival[:window] = 100.0 - 100.0 / (1.0 + ups / downs)\n\n    # period values\n    for i in range(window, len(series)):\n        delta = deltas[i - 1]\n        if delta &gt; 0:\n            upval = delta\n            downval = 0\n        else:\n            upval = 0\n            downval = -delta\n\n        ups = (ups * (window - 1) + upval) / window\n        downs = (downs * (window - 1.0) + downval) / window\n        rsival[i] = 100.0 - 100.0 / (1.0 + ups / downs)\n\n    # return rsival\n    return pd.Series(index=series.index, data=rsival)\n</code></pre>"},{"location":"reference/indicator/vendor/qtpylib/qtpylib/#lettrade.indicator.vendor.qtpylib.qtpylib.session","title":"session","text":"<pre><code>session(df, start='17:00', end='16:00')\n</code></pre> <p>remove previous globex day from df</p> Source code in <code>lettrade/indicator/vendor/qtpylib/qtpylib.py</code> <pre><code>def session(df, start=\"17:00\", end=\"16:00\"):\n    \"\"\"remove previous globex day from df\"\"\"\n    if df.empty:\n        return df\n\n    # get start/end/now as decimals\n    int_start = list(map(int, start.split(\":\")))\n    int_start = (int_start[0] + int_start[1] - 1 / 100) - 0.0001\n    int_end = list(map(int, end.split(\":\")))\n    int_end = int_end[0] + int_end[1] / 100\n    int_now = df[-1:].index.hour[0] + (df[:1].index.minute[0]) / 100\n\n    # same-dat session?\n    is_same_day = int_end &gt; int_start\n\n    # set pointers\n    curr = prev = df[-1:].index[0].strftime(\"%Y-%m-%d\")\n\n    # globex/forex session\n    if not is_same_day:\n        prev = (datetime.strptime(curr, \"%Y-%m-%d\") - timedelta(1)).strftime(\"%Y-%m-%d\")\n\n    # slice\n    if int_now &gt;= int_start:\n        df = df[df.index &gt;= curr + \" \" + start]\n    else:\n        df = df[df.index &gt;= prev + \" \" + start]\n\n    return df.copy()\n</code></pre>"},{"location":"reference/indicator/vendor/qtpylib/qtpylib/#lettrade.indicator.vendor.qtpylib.qtpylib.stoch","title":"stoch","text":"<pre><code>stoch(df, window=14, d=3, k=3, fast=False)\n</code></pre> <p>compute the n period relative strength indicator http://excelta.blogspot.co.il/2013/09/stochastic-oscillator-technical.html</p> Source code in <code>lettrade/indicator/vendor/qtpylib/qtpylib.py</code> <pre><code>def stoch(df, window=14, d=3, k=3, fast=False):\n    \"\"\"\n    compute the n period relative strength indicator\n    http://excelta.blogspot.co.il/2013/09/stochastic-oscillator-technical.html\n    \"\"\"\n\n    my_df = pd.DataFrame(index=df.index)\n\n    my_df[\"rolling_max\"] = df[\"high\"].rolling(window).max()\n    my_df[\"rolling_min\"] = df[\"low\"].rolling(window).min()\n\n    my_df[\"fast_k\"] = (\n        100\n        * (df[\"close\"] - my_df[\"rolling_min\"])\n        / (my_df[\"rolling_max\"] - my_df[\"rolling_min\"])\n    )\n    my_df[\"fast_d\"] = my_df[\"fast_k\"].rolling(d).mean()\n\n    if fast:\n        return my_df.loc[:, [\"fast_k\", \"fast_d\"]]\n\n    my_df[\"slow_k\"] = my_df[\"fast_k\"].rolling(k).mean()\n    my_df[\"slow_d\"] = my_df[\"slow_k\"].rolling(d).mean()\n\n    return my_df.loc[:, [\"slow_k\", \"slow_d\"]]\n</code></pre>"},{"location":"reference/indicator/vendor/qtpylib/qtpylib/#lettrade.indicator.vendor.qtpylib.qtpylib.vwap","title":"vwap","text":"<pre><code>vwap(bars)\n</code></pre> <p>calculate vwap of entire time series (input can be pandas series or numpy array) bars are usually mid [ (h+l)/2 ] or typical [ (h+l+c)/3 ]</p> Source code in <code>lettrade/indicator/vendor/qtpylib/qtpylib.py</code> <pre><code>def vwap(bars):\n    \"\"\"\n    calculate vwap of entire time series\n    (input can be pandas series or numpy array)\n    bars are usually mid [ (h+l)/2 ] or typical [ (h+l+c)/3 ]\n    \"\"\"\n    raise ValueError(\n        \"using `qtpylib.vwap` facilitates lookahead bias. Please use \"\n        \"`qtpylib.rolling_vwap` instead, which calculates vwap in a rolling manner.\"\n    )\n</code></pre>"},{"location":"reference/indicator/vendor/qtpylib/qtpylib/#lettrade.indicator.vendor.qtpylib.qtpylib.zlma","title":"zlma","text":"<pre><code>zlma(series, window=20, min_periods=None, kind='ema')\n</code></pre> <p>John Ehlers' Zero lag (exponential) moving average https://en.wikipedia.org/wiki/Zero_lag_exponential_moving_average</p> Source code in <code>lettrade/indicator/vendor/qtpylib/qtpylib.py</code> <pre><code>def zlma(series, window=20, min_periods=None, kind=\"ema\"):\n    \"\"\"\n    John Ehlers' Zero lag (exponential) moving average\n    https://en.wikipedia.org/wiki/Zero_lag_exponential_moving_average\n    \"\"\"\n    min_periods = window if min_periods is None else min_periods\n\n    lag = (window - 1) // 2\n    series = 2 * series - series.shift(lag)\n    if kind in [\"ewm\", \"ema\"]:\n        return wma(series, lag, min_periods)\n    elif kind == \"hma\":\n        return hma(series, lag, min_periods)\n    return sma(series, lag, min_periods)\n</code></pre>"},{"location":"reference/indicator/vendor/qtpylib/qtpylib/#lettrade.indicator.vendor.qtpylib.qtpylib.zscore","title":"zscore","text":"<pre><code>zscore(bars, window=20, stds=1, col='close')\n</code></pre> <p>get zscore of price</p> Source code in <code>lettrade/indicator/vendor/qtpylib/qtpylib.py</code> <pre><code>def zscore(bars, window=20, stds=1, col=\"close\"):\n    \"\"\"get zscore of price\"\"\"\n    std = numpy_rolling_std(bars[col], window)\n    mean = numpy_rolling_mean(bars[col], window)\n    return (bars[col] - mean) / (std * stds)\n</code></pre>"},{"location":"reference/indicator/volatility/","title":"Index","text":""},{"location":"reference/indicator/volatility/#lettrade.indicator.volatility","title":"volatility","text":""},{"location":"reference/indicator/volatility/keltner_channel/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> keltner_channel","text":""},{"location":"reference/indicator/volatility/keltner_channel/#lettrade.indicator.volatility.keltner_channel","title":"keltner_channel","text":""},{"location":"reference/indicator/volatility/keltner_channel/#lettrade.indicator.volatility.keltner_channel.keltner_channel","title":"keltner_channel","text":"<pre><code>keltner_channel(\n    dataframe: DataFrame,\n    ma: int = 20,\n    ma_mode: Literal[\"ema\", \"sma\"] = \"ema\",\n    atr: int = 20,\n    shift: float = 1.6,\n    prefix: str = \"kc_\",\n    inplace: bool = False,\n) -&gt; dict[str, Series] | DataFrame\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>dataframe</code>               (<code>DataFrame</code>)           \u2013            <p>description</p> </li> <li> <code>ma</code>               (<code>int</code>, default:                   <code>20</code> )           \u2013            <p>description. Defaults to 20.</p> </li> <li> <code>ma_mode</code>               (<code>Literal[&amp;quot;ema&amp;quot;, &amp;quot;sma&amp;quot;]</code>, default:                   <code>'ema'</code> )           \u2013            <p>description. Defaults to \"ema\".</p> </li> <li> <code>atr</code>               (<code>int</code>, default:                   <code>20</code> )           \u2013            <p>description. Defaults to 20.</p> </li> <li> <code>shift</code>               (<code>float</code>, default:                   <code>1.6</code> )           \u2013            <p>description. Defaults to 1.6.</p> </li> <li> <code>prefix</code>               (<code>str</code>, default:                   <code>'kc_'</code> )           \u2013            <p>description. Defaults to \"kc_\".</p> </li> <li> <code>inplace</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>description. Defaults to False.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict[str, Series] | DataFrame</code>           \u2013            <p>dict[str, pd.Series] | pd.DataFrame: {kc_upper, kc_middle, kc_lower}</p> </li> </ul> Source code in <code>lettrade/indicator/volatility/keltner_channel.py</code> <pre><code>def keltner_channel(\n    dataframe: pd.DataFrame,\n    ma: int = 20,\n    ma_mode: Literal[\"ema\", \"sma\"] = \"ema\",\n    atr: int = 20,\n    shift: float = 1.6,\n    prefix: str = \"kc_\",\n    inplace: bool = False,\n) -&gt; dict[str, pd.Series] | pd.DataFrame:\n    \"\"\"_summary_\n\n    Args:\n        dataframe (pd.DataFrame): _description_\n        ma (int, optional): _description_. Defaults to 20.\n        ma_mode (Literal[&amp;quot;ema&amp;quot;, &amp;quot;sma&amp;quot;], optional): _description_. Defaults to \"ema\".\n        atr (int, optional): _description_. Defaults to 20.\n        shift (float, optional): _description_. Defaults to 1.6.\n        prefix (str, optional): _description_. Defaults to \"kc_\".\n        inplace (bool, optional): _description_. Defaults to False.\n\n    Returns:\n        dict[str, pd.Series] | pd.DataFrame: {kc_upper, kc_middle, kc_lower}\n    \"\"\"\n    if __debug__:\n        if not isinstance(dataframe, pd.DataFrame):\n            raise RuntimeError(\n                f\"dataframe type '{type(dataframe)}' \"\n                \"is not instance of pandas.DataFrame\"\n            )\n\n    ma_fn = ta.SMA if ma_mode == \"sma\" else ta.EMA\n    i_atr = ta.ATR(dataframe, timeperiod=atr)\n\n    i_basis = ma_fn(dataframe, timeperiod=ma)\n    i_upper = i_basis + shift * i_atr\n    i_lower = i_basis - shift * i_atr\n\n    # Result is inplace or new dict\n    result = dataframe if inplace else {}\n    result[f\"{prefix}upper\"] = i_upper\n    result[f\"{prefix}basis\"] = i_basis\n    result[f\"{prefix}lower\"] = i_lower\n    return result\n</code></pre>"},{"location":"reference/plot/","title":"Index","text":""},{"location":"reference/plot/#lettrade.plot","title":"plot","text":""},{"location":"reference/plot/bot/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> bot","text":""},{"location":"reference/plot/bot/#lettrade.plot.bot","title":"bot","text":""},{"location":"reference/plot/bot/#lettrade.plot.bot.BotPlotter","title":"BotPlotter","text":"<pre><code>BotPlotter(bot: LetTradeBot)\n</code></pre> <p>               Bases: <code>Plotter</code></p> <p>Class help to plot bot result</p> Source code in <code>lettrade/plot/bot.py</code> <pre><code>def __init__(self, bot: \"LetTradeBot\") -&gt; None:\n    self.bot = bot\n    self.feeder = bot.feeder\n    self.exchange = bot.exchange\n    self.account = bot.account\n    self.strategy = bot.strategy\n\n    self.datas = self.feeder.datas\n</code></pre>"},{"location":"reference/plot/bot/#lettrade.plot.bot.BotPlotter.data","title":"data  <code>property</code> <code>writable</code>","text":"<pre><code>data: DataFeed\n</code></pre> <p>Get plotting main datafeed</p> <p>Returns:</p> <ul> <li> <code>DataFeed</code> (              <code>DataFeed</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/plot/bot/#lettrade.plot.bot.BotPlotter.datas","title":"datas  <code>instance-attribute</code>","text":"<pre><code>datas: list[DataFeed] = datas\n</code></pre> <p>All plotting datafeeds</p>"},{"location":"reference/plot/bot/#lettrade.plot.bot.BotPlotter.jump","title":"jump","text":"<pre><code>jump(\n    since: int | str | Timestamp | None = None,\n    order_id: str | None = None,\n    position_id: str | None = None,\n    range: int = 300,\n    name: str | None = None,\n)\n</code></pre> <p>Jump to place on datefeed</p> <p>Parameters:</p> <ul> <li> <code>since</code>               (<code>int | str | Timestamp | None</code>, default:                   <code>None</code> )           \u2013            <p>Jump to index/datetime. Defaults to None.</p> </li> <li> <code>order_id</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>Jump to order id. Defaults to None.</p> </li> <li> <code>position_id</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>Jump to position id. Defaults to None.</p> </li> <li> <code>range</code>               (<code>int</code>, default:                   <code>300</code> )           \u2013            <p>number of candle plot. Defaults to 300.</p> </li> <li> <code>name</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/plot/bot.py</code> <pre><code>def jump(\n    self,\n    since: int | str | pd.Timestamp | None = None,\n    order_id: str | None = None,\n    position_id: str | None = None,\n    range: int = 300,\n    name: str | None = None,\n):\n    \"\"\"Jump to place on datefeed\n\n    Args:\n        since (int | str | pd.Timestamp | None, optional): Jump to index/datetime. Defaults to None.\n        order_id (str | None, optional): Jump to order id. Defaults to None.\n        position_id (str | None, optional): Jump to position id. Defaults to None.\n        range (int, optional): number of candle plot. Defaults to 300.\n        name (str | None, optional): _description_. Defaults to None.\n\n    Raises:\n        RuntimeError: _description_\n    \"\"\"\n    if self._datas_stored is None:\n        self._datas_stored = self.datas.copy()\n\n    if since is None:\n        if order_id is not None:  # Jump to order id\n            if not isinstance(order_id, str):\n                order_id = str(order_id)\n\n            if order_id in self.exchange.orders:\n                order = self.exchange.orders[order_id]\n            elif order_id in self.exchange.history_orders:\n                order = self.exchange.history_orders[order_id]\n            else:\n                raise RuntimeError(f\"Order id {order_id} not found\")\n\n            loc = self._data_stored.l.index.get_loc(order.placed_at)\n            since = loc - int(range / 2)\n\n        elif position_id is not None:  # Jump to position id\n            if not isinstance(position_id, str):\n                position_id = str(position_id)\n\n            if position_id in self.exchange.positions:\n                position = self.exchange.positions[position_id]\n            elif position_id in self.exchange.history_positions:\n                position = self.exchange.history_positions[position_id]\n            else:\n                raise RuntimeError(f\"Position id {position_id} not found\")\n\n            loc = self._data_stored.l.index.get_loc(position.entry_at)\n            since = loc - int(range / 2)\n        else:  # Reset\n            self.jump_reset()\n            return\n\n    elif isinstance(since, str):  # Parse string to pd.Timestamp, then since=index\n        since = pd.to_datetime(since, utc=True)\n        since = self._data_stored.l.index.get_loc(since)\n    elif isinstance(since, pd.Timestamp):  # Get index of Timestamp\n        since = self._data_stored.l.index.get_loc(since)\n\n    if name is None:\n        name = self._data_stored.name\n\n    # Since min at pointer_start\n    if since &lt; self._data_stored.l.pointer_start:\n        since = self._data_stored.l.pointer_start\n    # Since max at pointer_stop\n    if since &gt; self._data_stored.l.pointer_stop - range:\n        since = self._data_stored.l.pointer_stop - range\n\n    # Jump\n    jump_start_dt = None\n    jump_stop_dt = None\n    for i, data in enumerate(self._datas_stored):\n        if i == 0:\n            self.datas[i] = data.__class__(\n                data=data.l[since : since + range],\n                name=data.name,\n                timeframe=data.timeframe,\n            )\n            jump_start_dt = self.data.index[0]\n            jump_stop_dt = self.data.index[-1]\n        else:\n            self.datas[i] = data.__class__(\n                data=data.loc[\n                    (data.index &gt;= jump_start_dt) &amp; (data.index &lt;= jump_stop_dt)\n                ],\n                name=data.name,\n                timeframe=data.timeframe,\n            )\n\n    # Reload data\n    self.load()\n</code></pre>"},{"location":"reference/plot/bot/#lettrade.plot.bot.BotPlotter.jump_reset","title":"jump_reset","text":"<pre><code>jump_reset() -&gt; bool\n</code></pre> <p>Reset jump datafeeds back to bot datafeeds</p> Source code in <code>lettrade/plot/bot.py</code> <pre><code>def jump_reset(self) -&gt; bool:\n    \"\"\"Reset jump datafeeds back to bot datafeeds\"\"\"\n    if not self._datas_stored or self.data is self._data_stored:\n        return False\n\n    self.datas = self._datas_stored.copy()\n    return True\n</code></pre>"},{"location":"reference/plot/bot/#lettrade.plot.bot.BotPlotter.load","title":"load  <code>abstractmethod</code>","text":"<pre><code>load()\n</code></pre> <p>Load plot config from <code>Strategy.plot()</code> and setup candlestick/equity</p> Source code in <code>lettrade/plot/plot.py</code> <pre><code>@abstractmethod\ndef load(self):\n    \"\"\"Load plot config from `Strategy.plot()` and setup candlestick/equity\"\"\"\n</code></pre>"},{"location":"reference/plot/bot/#lettrade.plot.bot.BotPlotter.plot","title":"plot  <code>abstractmethod</code>","text":"<pre><code>plot(**kwargs)\n</code></pre> <p>Plot <code>equity</code>, <code>orders</code>, and <code>positions</code> then show</p> Source code in <code>lettrade/plot/plot.py</code> <pre><code>@abstractmethod\ndef plot(self, **kwargs):\n    \"\"\"Plot `equity`, `orders`, and `positions` then show\"\"\"\n</code></pre>"},{"location":"reference/plot/bot/#lettrade.plot.bot.BotPlotter.stop","title":"stop  <code>abstractmethod</code>","text":"<pre><code>stop()\n</code></pre> <p>stop plotter</p> Source code in <code>lettrade/plot/plot.py</code> <pre><code>@abstractmethod\ndef stop(self):\n    \"\"\"stop plotter\"\"\"\n</code></pre>"},{"location":"reference/plot/color/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> color","text":""},{"location":"reference/plot/color/#lettrade.plot.color","title":"color","text":""},{"location":"reference/plot/color/#lettrade.plot.color.PlotColor","title":"PlotColor","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>Enum plot color</p>"},{"location":"reference/plot/color/#lettrade.plot.color.PlotColor.AMBER","title":"AMBER  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>AMBER = '#fa0'\n</code></pre>"},{"location":"reference/plot/color/#lettrade.plot.color.PlotColor.BLUE","title":"BLUE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>BLUE = '#4287ff'\n</code></pre>"},{"location":"reference/plot/color/#lettrade.plot.color.PlotColor.CYAN","title":"CYAN  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>CYAN = '#00bad6'\n</code></pre>"},{"location":"reference/plot/color/#lettrade.plot.color.PlotColor.DEEP_ORANGE","title":"DEEP_ORANGE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>DEEP_ORANGE = '#ff6e42'\n</code></pre>"},{"location":"reference/plot/color/#lettrade.plot.color.PlotColor.DEEP_PURPLE","title":"DEEP_PURPLE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>DEEP_PURPLE = '#7c4dff'\n</code></pre>"},{"location":"reference/plot/color/#lettrade.plot.color.PlotColor.GREEN","title":"GREEN  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>GREEN = '#00c753'\n</code></pre>"},{"location":"reference/plot/color/#lettrade.plot.color.PlotColor.INDIGO","title":"INDIGO  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>INDIGO = '#526cfe'\n</code></pre>"},{"location":"reference/plot/color/#lettrade.plot.color.PlotColor.LIGHT_BLUE","title":"LIGHT_BLUE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LIGHT_BLUE = '#0091eb'\n</code></pre>"},{"location":"reference/plot/color/#lettrade.plot.color.PlotColor.LIGHT_GREEN","title":"LIGHT_GREEN  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LIGHT_GREEN = '#63de17'\n</code></pre>"},{"location":"reference/plot/color/#lettrade.plot.color.PlotColor.LIGHT_PINK","title":"LIGHT_PINK  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LIGHT_PINK = '#f06292'\n</code></pre>"},{"location":"reference/plot/color/#lettrade.plot.color.PlotColor.LIGHT_RED","title":"LIGHT_RED  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LIGHT_RED = '#e6695b'\n</code></pre>"},{"location":"reference/plot/color/#lettrade.plot.color.PlotColor.LIGHT_YELLOW","title":"LIGHT_YELLOW  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LIGHT_YELLOW = '#fff176'\n</code></pre>"},{"location":"reference/plot/color/#lettrade.plot.color.PlotColor.LIME","title":"LIME  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>LIME = '#b0eb00'\n</code></pre>"},{"location":"reference/plot/color/#lettrade.plot.color.PlotColor.ORANGE","title":"ORANGE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>ORANGE = '#ff9100'\n</code></pre>"},{"location":"reference/plot/color/#lettrade.plot.color.PlotColor.PINK","title":"PINK  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>PINK = '#f50056'\n</code></pre>"},{"location":"reference/plot/color/#lettrade.plot.color.PlotColor.PURPLE","title":"PURPLE  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>PURPLE = '#df41fb'\n</code></pre>"},{"location":"reference/plot/color/#lettrade.plot.color.PlotColor.RED","title":"RED  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>RED = '#ff1947'\n</code></pre>"},{"location":"reference/plot/color/#lettrade.plot.color.PlotColor.TEAL","title":"TEAL  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>TEAL = '#00bda4'\n</code></pre>"},{"location":"reference/plot/color/#lettrade.plot.color.PlotColor.YELLOW","title":"YELLOW  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>YELLOW = '#ffd500'\n</code></pre>"},{"location":"reference/plot/plot/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> plot","text":""},{"location":"reference/plot/plot/#lettrade.plot.plot","title":"plot","text":""},{"location":"reference/plot/plot/#lettrade.plot.plot.Plotter","title":"Plotter","text":"<p>               Bases: <code>ABC</code></p> <p>Base class help to plot strategy</p>"},{"location":"reference/plot/plot/#lettrade.plot.plot.Plotter.load","title":"load  <code>abstractmethod</code>","text":"<pre><code>load()\n</code></pre> <p>Load plot config from <code>Strategy.plot()</code> and setup candlestick/equity</p> Source code in <code>lettrade/plot/plot.py</code> <pre><code>@abstractmethod\ndef load(self):\n    \"\"\"Load plot config from `Strategy.plot()` and setup candlestick/equity\"\"\"\n</code></pre>"},{"location":"reference/plot/plot/#lettrade.plot.plot.Plotter.plot","title":"plot  <code>abstractmethod</code>","text":"<pre><code>plot(**kwargs)\n</code></pre> <p>Plot <code>equity</code>, <code>orders</code>, and <code>positions</code> then show</p> Source code in <code>lettrade/plot/plot.py</code> <pre><code>@abstractmethod\ndef plot(self, **kwargs):\n    \"\"\"Plot `equity`, `orders`, and `positions` then show\"\"\"\n</code></pre>"},{"location":"reference/plot/plot/#lettrade.plot.plot.Plotter.stop","title":"stop  <code>abstractmethod</code>","text":"<pre><code>stop()\n</code></pre> <p>stop plotter</p> Source code in <code>lettrade/plot/plot.py</code> <pre><code>@abstractmethod\ndef stop(self):\n    \"\"\"stop plotter\"\"\"\n</code></pre>"},{"location":"reference/plot/plotly/","title":"Index","text":""},{"location":"reference/plot/plotly/#lettrade.plot.plotly","title":"plotly","text":""},{"location":"reference/plot/plotly/helper/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> helper","text":""},{"location":"reference/plot/plotly/helper/#lettrade.plot.plotly.helper","title":"helper","text":""},{"location":"reference/plot/plotly/helper/#lettrade.plot.plotly.helper.plot_merge","title":"plot_merge","text":"<pre><code>plot_merge(source: dict, *updates: list[dict]) -&gt; dict\n</code></pre> <p>Merge multiple update plot config to source config</p> <p>Parameters:</p> <ul> <li> <code>source</code>               (<code>dict</code>)           \u2013            <p>description</p> </li> <li> <code>*updates</code>               (<code>list[dict]</code>, default:                   <code>()</code> )           \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict</code> (              <code>dict</code> )          \u2013            <p>Merged config</p> </li> </ul> Source code in <code>lettrade/plot/plotly/helper.py</code> <pre><code>def plot_merge(source: dict, *updates: list[dict]) -&gt; dict:\n    \"\"\"Merge multiple update plot config to source config\n\n    Args:\n        source (dict): _description_\n        *updates (list[dict]): _description_\n\n    Returns:\n        dict: Merged config\n    \"\"\"\n    for update in updates:\n        for k, v in update.items():\n            if k not in source:\n                source[k] = v\n                continue\n            if isinstance(source[k], list):\n                source[k].extend(v)\n                continue\n            if isinstance(source[k], list):\n                s = source[k]\n                for k1, v1 in v:\n                    s[k1] = v1\n                continue\n    return source\n</code></pre>"},{"location":"reference/plot/plotly/indicator/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> indicator","text":""},{"location":"reference/plot/plotly/indicator/#lettrade.plot.plotly.indicator","title":"indicator","text":""},{"location":"reference/plot/plotly/indicator/#lettrade.plot.plotly.indicator.plot_candle_highlight","title":"plot_candle_highlight","text":"<pre><code>plot_candle_highlight(\n    dataframe: DataFrame,\n    name: str = \"Candle highlight\",\n    width: int = 1,\n    increasing_line_color=\"#26c6da\",\n    decreasing_line_color=\"#ab47bc\",\n    **kwargs\n) -&gt; dict\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>dataframe</code>               (<code>DataFrame</code>)           \u2013            <p>description</p> </li> <li> <code>name</code>               (<code>str</code>, default:                   <code>'Candle highlight'</code> )           \u2013            <p>description. Defaults to \"Candle highlight\".</p> </li> <li> <code>width</code>               (<code>int</code>, default:                   <code>1</code> )           \u2013            <p>description. Defaults to 1.</p> </li> <li> <code>increasing_line_color</code>               (<code>str</code>, default:                   <code>'#26c6da'</code> )           \u2013            <p>description. Defaults to \"#26c6da\".</p> </li> <li> <code>decreasing_line_color</code>               (<code>str</code>, default:                   <code>'#ab47bc'</code> )           \u2013            <p>description. Defaults to \"#ab47bc\".</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict</code> (              <code>dict</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/plot/plotly/indicator.py</code> <pre><code>def plot_candle_highlight(\n    dataframe: pd.DataFrame,\n    name: str = \"Candle highlight\",\n    width: int = 1,\n    increasing_line_color=\"#26c6da\",\n    decreasing_line_color=\"#ab47bc\",\n    **kwargs,\n) -&gt; dict:\n    \"\"\"_summary_\n\n    Args:\n        dataframe (pd.DataFrame): _description_\n        name (str, optional): _description_. Defaults to \"Candle highlight\".\n        width (int, optional): _description_. Defaults to 1.\n        increasing_line_color (str, optional): _description_. Defaults to \"#26c6da\".\n        decreasing_line_color (str, optional): _description_. Defaults to \"#ab47bc\".\n\n    Returns:\n        dict: _description_\n    \"\"\"\n    return dict(\n        traces=[\n            go.Candlestick(\n                x=dataframe.index,\n                open=dataframe[\"open\"],\n                high=dataframe[\"high\"],\n                low=dataframe[\"low\"],\n                close=dataframe[\"close\"],\n                name=name,\n                line=dict(width=width),\n                increasing_line_color=increasing_line_color,\n                decreasing_line_color=decreasing_line_color,\n                hoverinfo=\"text\",\n                hovertext=name,\n                **kwargs,\n            ),\n        ]\n    )\n</code></pre>"},{"location":"reference/plot/plotly/indicator/#lettrade.plot.plotly.indicator.plot_ichimoku","title":"plot_ichimoku","text":"<pre><code>plot_ichimoku(\n    dataframe: DataFrame,\n    tenkan_sen=\"tenkan_sen\",\n    kijun_sen=\"kijun_sen\",\n    senkou_span_a=\"senkou_span_a\",\n    senkou_span_b=\"senkou_span_b\",\n    chikou_span=\"chikou_span\",\n    width=1,\n    tenkan_sen_color=\"#33BDFF\",\n    kijun_sen_color=\"#D105F5\",\n    senkou_span_a_color=\"#228B22\",\n    senkou_span_b_color=\"#FF3342\",\n    chikou_span_color=\"#F1F316\",\n) -&gt; dict\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>dataframe</code>               (<code>DataFrame</code>)           \u2013            <p>description</p> </li> <li> <code>tenkan_sen</code>               (<code>str</code>, default:                   <code>'tenkan_sen'</code> )           \u2013            <p>description. Defaults to \"tenkan_sen\".</p> </li> <li> <code>kijun_sen</code>               (<code>str</code>, default:                   <code>'kijun_sen'</code> )           \u2013            <p>description. Defaults to \"kijun_sen\".</p> </li> <li> <code>senkou_span_a</code>               (<code>str</code>, default:                   <code>'senkou_span_a'</code> )           \u2013            <p>description. Defaults to \"senkou_span_a\".</p> </li> <li> <code>senkou_span_b</code>               (<code>str</code>, default:                   <code>'senkou_span_b'</code> )           \u2013            <p>description. Defaults to \"senkou_span_b\".</p> </li> <li> <code>chikou_span</code>               (<code>str</code>, default:                   <code>'chikou_span'</code> )           \u2013            <p>description. Defaults to \"chikou_span\".</p> </li> <li> <code>width</code>               (<code>int</code>, default:                   <code>1</code> )           \u2013            <p>description. Defaults to 1.</p> </li> <li> <code>tenkan_sen_color</code>               (<code>str</code>, default:                   <code>'#33BDFF'</code> )           \u2013            <p>description. Defaults to \"#33BDFF\".</p> </li> <li> <code>kijun_sen_color</code>               (<code>str</code>, default:                   <code>'#D105F5'</code> )           \u2013            <p>description. Defaults to \"#D105F5\".</p> </li> <li> <code>senkou_span_a_color</code>               (<code>str</code>, default:                   <code>'#228B22'</code> )           \u2013            <p>description. Defaults to \"#228B22\".</p> </li> <li> <code>senkou_span_b_color</code>               (<code>str</code>, default:                   <code>'#FF3342'</code> )           \u2013            <p>description. Defaults to \"#FF3342\".</p> </li> <li> <code>chikou_span_color</code>               (<code>str</code>, default:                   <code>'#F1F316'</code> )           \u2013            <p>description. Defaults to \"#F1F316\".</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict</code> (              <code>dict</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/plot/plotly/indicator.py</code> <pre><code>def plot_ichimoku(\n    dataframe: pd.DataFrame,\n    tenkan_sen=\"tenkan_sen\",\n    kijun_sen=\"kijun_sen\",\n    senkou_span_a=\"senkou_span_a\",\n    senkou_span_b=\"senkou_span_b\",\n    chikou_span=\"chikou_span\",\n    width=1,\n    tenkan_sen_color=\"#33BDFF\",\n    kijun_sen_color=\"#D105F5\",\n    senkou_span_a_color=\"#228B22\",\n    senkou_span_b_color=\"#FF3342\",\n    chikou_span_color=\"#F1F316\",\n) -&gt; dict:\n    \"\"\"_summary_\n\n    Args:\n        dataframe (pd.DataFrame): _description_\n        tenkan_sen (str, optional): _description_. Defaults to \"tenkan_sen\".\n        kijun_sen (str, optional): _description_. Defaults to \"kijun_sen\".\n        senkou_span_a (str, optional): _description_. Defaults to \"senkou_span_a\".\n        senkou_span_b (str, optional): _description_. Defaults to \"senkou_span_b\".\n        chikou_span (str, optional): _description_. Defaults to \"chikou_span\".\n        width (int, optional): _description_. Defaults to 1.\n        tenkan_sen_color (str, optional): _description_. Defaults to \"#33BDFF\".\n        kijun_sen_color (str, optional): _description_. Defaults to \"#D105F5\".\n        senkou_span_a_color (str, optional): _description_. Defaults to \"#228B22\".\n        senkou_span_b_color (str, optional): _description_. Defaults to \"#FF3342\".\n        chikou_span_color (str, optional): _description_. Defaults to \"#F1F316\".\n\n    Returns:\n        dict: _description_\n    \"\"\"\n    return dict(\n        scatters=[\n            dict(\n                x=dataframe.index,\n                y=dataframe[tenkan_sen],\n                name=tenkan_sen,\n                type=\"scatter\",\n                mode=\"lines\",\n                line=dict(color=tenkan_sen_color, width=width),\n            ),\n            dict(\n                x=dataframe.index,\n                y=dataframe[kijun_sen],\n                name=kijun_sen,\n                type=\"scatter\",\n                mode=\"lines\",\n                line=dict(color=kijun_sen_color, width=width),\n            ),\n            dict(\n                x=dataframe.index,\n                y=dataframe[senkou_span_a],\n                name=senkou_span_a,\n                type=\"scatter\",\n                mode=\"lines\",\n                line=dict(color=senkou_span_a_color, width=width),\n            ),\n            dict(\n                x=dataframe.index,\n                y=dataframe[senkou_span_b],\n                name=senkou_span_b,\n                type=\"scatter\",\n                mode=\"lines\",\n                fill=\"tonexty\",\n                line=dict(color=senkou_span_b_color, width=width),\n            ),\n            dict(\n                x=dataframe.index,\n                y=dataframe[chikou_span],\n                name=chikou_span,\n                type=\"scatter\",\n                mode=\"lines\",\n                line=dict(color=chikou_span_color, width=width),\n            ),\n        ]\n    )\n</code></pre>"},{"location":"reference/plot/plotly/indicator/#lettrade.plot.plotly.indicator.plot_line","title":"plot_line","text":"<pre><code>plot_line(\n    series: Series,\n    color: str = \"#ffee58\",\n    width: int = 1,\n    name=None,\n    mode=\"lines\",\n    **kwargs\n) -&gt; dict\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>series</code>               (<code>Series</code>)           \u2013            <p>description</p> </li> <li> <code>color</code>               (<code>str</code>, default:                   <code>'#ffee58'</code> )           \u2013            <p>description. Defaults to \"#ffee58\".</p> </li> <li> <code>width</code>               (<code>int</code>, default:                   <code>1</code> )           \u2013            <p>description. Defaults to 1.</p> </li> <li> <code>name</code>               (<code>_type_</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>mode</code>               (<code>str</code>, default:                   <code>'lines'</code> )           \u2013            <p>description. Defaults to \"lines\".</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict</code> (              <code>dict</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/plot/plotly/indicator.py</code> <pre><code>def plot_line(\n    series: pd.Series,\n    color: str = \"#ffee58\",\n    width: int = 1,\n    name=None,\n    mode=\"lines\",\n    **kwargs,\n) -&gt; dict:\n    \"\"\"_summary_\n\n    Args:\n        series (pd.Series): _description_\n        color (str, optional): _description_. Defaults to \"#ffee58\".\n        width (int, optional): _description_. Defaults to 1.\n        name (_type_, optional): _description_. Defaults to None.\n        mode (str, optional): _description_. Defaults to \"lines\".\n\n    Returns:\n        dict: _description_\n    \"\"\"\n    return dict(\n        scatters=[\n            dict(\n                x=series.index,\n                y=series,\n                line=dict(color=color, width=width),\n                name=name or series.name,\n                mode=mode,\n                **kwargs,\n            )\n        ]\n    )\n</code></pre>"},{"location":"reference/plot/plotly/indicator/#lettrade.plot.plotly.indicator.plot_lines","title":"plot_lines","text":"<pre><code>plot_lines(\n    *serieses: list[Series],\n    color: str = \"#ffee58\",\n    width: int = 1,\n    name=None,\n    mode=\"lines\",\n    **kwargs\n) -&gt; dict\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>color</code>               (<code>str</code>, default:                   <code>'#ffee58'</code> )           \u2013            <p>description. Defaults to \"#ffee58\".</p> </li> <li> <code>width</code>               (<code>int</code>, default:                   <code>1</code> )           \u2013            <p>description. Defaults to 1.</p> </li> <li> <code>name</code>               (<code>_type_</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>mode</code>               (<code>str</code>, default:                   <code>'lines'</code> )           \u2013            <p>description. Defaults to \"lines\".</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict</code> (              <code>dict</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/plot/plotly/indicator.py</code> <pre><code>def plot_lines(\n    *serieses: list[pd.Series],\n    color: str = \"#ffee58\",\n    width: int = 1,\n    name=None,\n    mode=\"lines\",\n    **kwargs,\n) -&gt; dict:\n    \"\"\"_summary_\n\n    Args:\n        color (str, optional): _description_. Defaults to \"#ffee58\".\n        width (int, optional): _description_. Defaults to 1.\n        name (_type_, optional): _description_. Defaults to None.\n        mode (str, optional): _description_. Defaults to \"lines\".\n\n    Returns:\n        dict: _description_\n    \"\"\"\n    result = {}\n    for series in serieses:\n        plot_merge(\n            result,\n            plot_line(\n                series=series,\n                color=color,\n                width=width,\n                name=name,\n                mode=mode,\n                **kwargs,\n            ),\n        )\n    return result\n</code></pre>"},{"location":"reference/plot/plotly/indicator/#lettrade.plot.plotly.indicator.plot_mark","title":"plot_mark","text":"<pre><code>plot_mark(\n    series: Series,\n    color: str = \"#ffee58\",\n    width: int = 1,\n    mode=\"markers\",\n    name=None,\n    **kwargs\n) -&gt; dict\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>series</code>               (<code>Series</code>)           \u2013            <p>description</p> </li> <li> <code>color</code>               (<code>str</code>, default:                   <code>'#ffee58'</code> )           \u2013            <p>description. Defaults to \"#ffee58\".</p> </li> <li> <code>width</code>               (<code>int</code>, default:                   <code>1</code> )           \u2013            <p>description. Defaults to 1.</p> </li> <li> <code>mode</code>               (<code>str</code>, default:                   <code>'markers'</code> )           \u2013            <p>description. Defaults to \"markers\".</p> </li> <li> <code>name</code>               (<code>_type_</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict</code> (              <code>dict</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/plot/plotly/indicator.py</code> <pre><code>def plot_mark(\n    series: pd.Series,\n    color: str = \"#ffee58\",\n    width: int = 1,\n    mode=\"markers\",\n    name=None,\n    **kwargs,\n) -&gt; dict:\n    \"\"\"_summary_\n\n    Args:\n        series (pd.Series): _description_\n        color (str, optional): _description_. Defaults to \"#ffee58\".\n        width (int, optional): _description_. Defaults to 1.\n        mode (str, optional): _description_. Defaults to \"markers\".\n        name (_type_, optional): _description_. Defaults to None.\n\n    Returns:\n        dict: _description_\n    \"\"\"\n    return plot_line(\n        series=series,\n        color=color,\n        width=width,\n        mode=mode,\n        name=name,\n        **kwargs,\n    )\n</code></pre>"},{"location":"reference/plot/plotly/plotly/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> plotly","text":""},{"location":"reference/plot/plotly/plotly/#lettrade.plot.plotly.plotly","title":"plotly","text":""},{"location":"reference/plot/plotly/plotly/#lettrade.plot.plotly.plotly.PlotlyBotPlotter","title":"PlotlyBotPlotter","text":"<pre><code>PlotlyBotPlotter(bot: LetTradeBot)\n</code></pre> <p>               Bases: <code>BotPlotter</code></p> <p>Class help to plot <code>lettrade</code></p> Source code in <code>lettrade/plot/bot.py</code> <pre><code>def __init__(self, bot: \"LetTradeBot\") -&gt; None:\n    self.bot = bot\n    self.feeder = bot.feeder\n    self.exchange = bot.exchange\n    self.account = bot.account\n    self.strategy = bot.strategy\n\n    self.datas = self.feeder.datas\n</code></pre>"},{"location":"reference/plot/plotly/plotly/#lettrade.plot.plotly.plotly.PlotlyBotPlotter.data","title":"data  <code>property</code> <code>writable</code>","text":"<pre><code>data: DataFeed\n</code></pre> <p>Get plotting main datafeed</p> <p>Returns:</p> <ul> <li> <code>DataFeed</code> (              <code>DataFeed</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/plot/plotly/plotly/#lettrade.plot.plotly.plotly.PlotlyBotPlotter.datas","title":"datas  <code>instance-attribute</code>","text":"<pre><code>datas: list[DataFeed] = datas\n</code></pre> <p>All plotting datafeeds</p>"},{"location":"reference/plot/plotly/plotly/#lettrade.plot.plotly.plotly.PlotlyBotPlotter.jump","title":"jump","text":"<pre><code>jump(\n    since: int | str | Timestamp | None = None,\n    order_id: str | None = None,\n    position_id: str | None = None,\n    range: int = 300,\n    name: str | None = None,\n)\n</code></pre> <p>Jump to place on datefeed</p> <p>Parameters:</p> <ul> <li> <code>since</code>               (<code>int | str | Timestamp | None</code>, default:                   <code>None</code> )           \u2013            <p>Jump to index/datetime. Defaults to None.</p> </li> <li> <code>order_id</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>Jump to order id. Defaults to None.</p> </li> <li> <code>position_id</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>Jump to position id. Defaults to None.</p> </li> <li> <code>range</code>               (<code>int</code>, default:                   <code>300</code> )           \u2013            <p>number of candle plot. Defaults to 300.</p> </li> <li> <code>name</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/plot/bot.py</code> <pre><code>def jump(\n    self,\n    since: int | str | pd.Timestamp | None = None,\n    order_id: str | None = None,\n    position_id: str | None = None,\n    range: int = 300,\n    name: str | None = None,\n):\n    \"\"\"Jump to place on datefeed\n\n    Args:\n        since (int | str | pd.Timestamp | None, optional): Jump to index/datetime. Defaults to None.\n        order_id (str | None, optional): Jump to order id. Defaults to None.\n        position_id (str | None, optional): Jump to position id. Defaults to None.\n        range (int, optional): number of candle plot. Defaults to 300.\n        name (str | None, optional): _description_. Defaults to None.\n\n    Raises:\n        RuntimeError: _description_\n    \"\"\"\n    if self._datas_stored is None:\n        self._datas_stored = self.datas.copy()\n\n    if since is None:\n        if order_id is not None:  # Jump to order id\n            if not isinstance(order_id, str):\n                order_id = str(order_id)\n\n            if order_id in self.exchange.orders:\n                order = self.exchange.orders[order_id]\n            elif order_id in self.exchange.history_orders:\n                order = self.exchange.history_orders[order_id]\n            else:\n                raise RuntimeError(f\"Order id {order_id} not found\")\n\n            loc = self._data_stored.l.index.get_loc(order.placed_at)\n            since = loc - int(range / 2)\n\n        elif position_id is not None:  # Jump to position id\n            if not isinstance(position_id, str):\n                position_id = str(position_id)\n\n            if position_id in self.exchange.positions:\n                position = self.exchange.positions[position_id]\n            elif position_id in self.exchange.history_positions:\n                position = self.exchange.history_positions[position_id]\n            else:\n                raise RuntimeError(f\"Position id {position_id} not found\")\n\n            loc = self._data_stored.l.index.get_loc(position.entry_at)\n            since = loc - int(range / 2)\n        else:  # Reset\n            self.jump_reset()\n            return\n\n    elif isinstance(since, str):  # Parse string to pd.Timestamp, then since=index\n        since = pd.to_datetime(since, utc=True)\n        since = self._data_stored.l.index.get_loc(since)\n    elif isinstance(since, pd.Timestamp):  # Get index of Timestamp\n        since = self._data_stored.l.index.get_loc(since)\n\n    if name is None:\n        name = self._data_stored.name\n\n    # Since min at pointer_start\n    if since &lt; self._data_stored.l.pointer_start:\n        since = self._data_stored.l.pointer_start\n    # Since max at pointer_stop\n    if since &gt; self._data_stored.l.pointer_stop - range:\n        since = self._data_stored.l.pointer_stop - range\n\n    # Jump\n    jump_start_dt = None\n    jump_stop_dt = None\n    for i, data in enumerate(self._datas_stored):\n        if i == 0:\n            self.datas[i] = data.__class__(\n                data=data.l[since : since + range],\n                name=data.name,\n                timeframe=data.timeframe,\n            )\n            jump_start_dt = self.data.index[0]\n            jump_stop_dt = self.data.index[-1]\n        else:\n            self.datas[i] = data.__class__(\n                data=data.loc[\n                    (data.index &gt;= jump_start_dt) &amp; (data.index &lt;= jump_stop_dt)\n                ],\n                name=data.name,\n                timeframe=data.timeframe,\n            )\n\n    # Reload data\n    self.load()\n</code></pre>"},{"location":"reference/plot/plotly/plotly/#lettrade.plot.plotly.plotly.PlotlyBotPlotter.jump_reset","title":"jump_reset","text":"<pre><code>jump_reset() -&gt; bool\n</code></pre> <p>Reset jump datafeeds back to bot datafeeds</p> Source code in <code>lettrade/plot/bot.py</code> <pre><code>def jump_reset(self) -&gt; bool:\n    \"\"\"Reset jump datafeeds back to bot datafeeds\"\"\"\n    if not self._datas_stored or self.data is self._data_stored:\n        return False\n\n    self.datas = self._datas_stored.copy()\n    return True\n</code></pre>"},{"location":"reference/plot/plotly/plotly/#lettrade.plot.plotly.plotly.PlotlyBotPlotter.load","title":"load","text":"<pre><code>load()\n</code></pre> <p>Load plot config from <code>Strategy.plot()</code> and setup candlestick/equity</p> Source code in <code>lettrade/plot/plotly/plotly.py</code> <pre><code>def load(self):\n    \"\"\"Load plot config from `Strategy.plot()` and setup candlestick/equity\"\"\"\n\n    # Strategy plot\n    config: dict = self.strategy.plot(*self.datas)\n\n    # Params\n    plot_rows = max(config.get(\"rows\", 2), len(self.datas) + 1)\n    params = dict(\n        rows=plot_rows,\n        shared_xaxes=True,\n        vertical_spacing=0.03,\n        # row_width=[0.2, 0.7],\n        # 0.3 for equity\n        row_heights=[1] * (plot_rows - 1) + [0.5],\n    )\n    if \"params\" in config:\n        params.update(**config[\"params\"])\n\n    # Init\n    self.figure = make_subplots(**params)\n\n    # Plot candles\n    self._data_shape = dict()\n    for i, data in enumerate(self.datas):\n        shape = dict(\n            row=1 + i,\n            col=1,\n        )\n        self._data_shape[data.name] = shape\n        self.figure.add_trace(\n            go.Candlestick(\n                x=data.index,\n                open=data[\"open\"],\n                high=data[\"high\"],\n                low=data[\"low\"],\n                close=data[\"close\"],\n                name=f\"Price {data.name}\",\n                # hoverinfo=\"x+y\",\n            ),\n            **shape,\n        )\n        self.figure.update_yaxes(\n            title_text=\"Price $\",\n            # autorange=True,\n            # fixedrange=False,\n            # showspikes=True,\n            # spikemode=\"across\",\n            mirror=True,\n            ticks=\"outside\",\n            showline=True,\n            # linecolor=\"\",\n            **shape,\n        )\n        self.figure.update_xaxes(\n            title_text=data.name,\n            rangeslider_visible=False,\n            # showspikes=True,\n            # spikemode=\"across\",\n            mirror=True,\n            ticks=\"outside\",\n            showline=True,\n            # linecolor=\"\",\n            **shape,\n        )\n\n    self._load_extend(config)\n\n    # Buttons\n    buttons = [dict(step=\"all\")]\n    match self.data.timeframe.unit:\n        case \"m\":\n            count = 1\n            step = \"day\"\n        case \"h\":\n            count = 7\n            step = \"day\"\n        case _:\n            count = 1\n            step = \"month\"\n    buttons.extend(\n        [\n            dict(\n                count=6 * count,\n                label=f\"{6*count} {step}\",\n                step=step,\n                stepmode=\"backward\",\n            ),\n            dict(\n                count=3 * count,\n                label=f\"{3*count} {step}\",\n                step=step,\n                stepmode=\"backward\",\n            ),\n            dict(\n                count=count,\n                label=f\"{count} {step}\",\n                step=step,\n                stepmode=\"backward\",\n            ),\n        ]\n    )\n\n    # Layout\n    layout_params = dict(\n        xaxis=dict(\n            rangeselector=dict(\n                bgcolor=\"#282a36\",\n                activecolor=\"#5b5b66\",\n                buttons=buttons,\n            ),\n        ),\n        yaxis=dict(\n            autorange=True,\n            fixedrange=False,\n        ),\n        title=dict(\n            text=str(self.strategy),\n            font=dict(size=24),\n            x=0.5,\n            xref=\"paper\",\n        ),\n        # autosize=False,\n        # width=800,\n        height=1_000 * plot_rows,\n        modebar_add=[\n            \"v1hovermode\",\n            \"hoverclosest\",\n            \"hovercompare\",\n            \"togglehover\",\n            \"togglespikelines\",\n            \"drawline\",\n            \"drawopenpath\",\n            \"drawclosedpath\",\n            \"drawcircle\",\n            \"drawrect\",\n            \"eraseshape\",\n        ],\n        # template=\"plotly_dark\",\n        hovermode=\"x unified\",\n    )\n    if \"layout\" in config:\n        layout_params.update(config[\"layout\"])\n    self.figure.update_layout(**layout_params)\n</code></pre>"},{"location":"reference/plot/plotly/plotly/#lettrade.plot.plotly.plotly.PlotlyBotPlotter.plot","title":"plot","text":"<pre><code>plot(jump: dict | None = None, **kwargs)\n</code></pre> <p>Plot <code>equity</code>, <code>orders</code>, and <code>positions</code> then show</p> Source code in <code>lettrade/plot/plotly/plotly.py</code> <pre><code>def plot(self, jump: dict | None = None, **kwargs):\n    \"\"\"Plot `equity`, `orders`, and `positions` then show\"\"\"\n    if jump is not None:\n        self.jump(**jump)\n    elif self.figure is None:\n        self.load()\n    else:\n        if self.jump_reset():\n            self.load()\n\n    self._plot_equity()\n    self._plot_orders()\n    self._plot_positions()\n\n    params = dict(layout_xaxis_rangeslider_visible=False)\n    params.update(**kwargs)\n    self.figure.update(**params)\n\n    self.figure.show()\n</code></pre>"},{"location":"reference/plot/plotly/plotly/#lettrade.plot.plotly.plotly.PlotlyBotPlotter.stop","title":"stop","text":"<pre><code>stop()\n</code></pre> <p>stop plotter</p> Source code in <code>lettrade/plot/plotly/plotly.py</code> <pre><code>def stop(self):\n    \"\"\"stop plotter\"\"\"\n</code></pre>"},{"location":"reference/stats/","title":"Index","text":""},{"location":"reference/stats/#lettrade.stats","title":"stats","text":""},{"location":"reference/stats/stats/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> stats","text":""},{"location":"reference/stats/stats/#lettrade.stats.stats","title":"stats","text":""},{"location":"reference/stats/stats/#lettrade.stats.stats.BotStatistic","title":"BotStatistic","text":"<pre><code>BotStatistic(\n    feeder: DataFeeder,\n    exchange: Exchange,\n    strategy: Strategy,\n)\n</code></pre> <p>Compute strategy result</p> Source code in <code>lettrade/stats/stats.py</code> <pre><code>def __init__(\n    self,\n    feeder: DataFeeder,\n    exchange: Exchange,\n    strategy: Strategy,\n) -&gt; None:\n    self.feeder: DataFeeder = feeder\n    self.exchange: Exchange = exchange\n    self.strategy: Strategy = strategy\n    self.account: Account = strategy.account\n</code></pre>"},{"location":"reference/stats/stats/#lettrade.stats.stats.BotStatistic.compute","title":"compute","text":"<pre><code>compute()\n</code></pre> <p>Calculate strategy report</p> Source code in <code>lettrade/stats/stats.py</code> <pre><code>def compute(self):\n    \"\"\"\n    Calculate strategy report\n    \"\"\"\n    data = self.feeder.data\n\n    equities = list(self.account._equities.values())\n    positions = list(self.exchange.history_positions.values()) + list(\n        self.exchange.positions.values()\n    )\n    positions_columns = (\n        \"size\",\n        \"entry_at\",\n        \"exit_at\",\n        \"entry_price\",\n        \"exit_price\",\n        \"pl\",\n        \"fee\",\n    )\n    positions_df = pd.DataFrame(columns=positions_columns)\n    for position in positions:\n        positions_df.at[position.id, positions_columns] = (\n            position.size,\n            position.entry_at,\n            position.exit_at,\n            position.entry_price,\n            position.exit_price,\n            position.pl,\n            position.fee,\n        )\n    positions_df[\"duration\"] = positions_df[\"entry_at\"] - positions_df[\"exit_at\"]\n\n    self.result = result = pd.Series(dtype=object)\n\n    result.loc[\"strategy\"] = str(self.strategy.__class__)\n    result.loc[\"start\"] = data.index[0]\n    result.loc[\"end\"] = data.index[-1]\n    result.loc[\"duration\"] = result.end - result.start\n\n    # Equity\n    result.loc[\"start_balance\"] = round(equities[0], 2)\n    result.loc[\"equity\"] = round(equities[-1], 2)\n\n    pl = equities[-1] - equities[0]\n    result.loc[\"pl\"] = round(pl, 2)\n    result.loc[\"pl_percent\"] = round(pl / equities[0] * 100, 2)\n\n    # TODO\n    # result.loc[\"buy_hold_pl_percent\"] = 2.0\n    # result.loc[\"max_drawdown_percent\"] = -33.08\n    # result.loc[\"avg_drawdown_percent\"] = -5.58\n    # result.loc[\"max_drawdown_duration\"] = \"688 days 00:00:00\"\n    # result.loc[\"avg_drawdown_duration\"] = \"41 days 00:00:00\"\n\n    # Separator\n    result.loc[\"\"] = \"\"\n\n    # Trades\n    positions_total = len(positions)\n    pl = positions_df[\"pl\"]\n\n    result.loc[\"positions\"] = positions_total\n\n    win_rate = np.nan if not positions_total else (pl &gt; 0).mean()\n    result.loc[\"win_rate\"] = round(win_rate, 2)\n    result.loc[\"fee\"] = positions_df.fee.sum()\n    result.loc[\"best_trade_percent\"] = pl.max()\n    result.loc[\"worst_trade_percent\"] = pl.min()\n    result.loc[\"sqn\"] = round(\n        np.sqrt(positions_total) * pl.mean() / (pl.std() or np.nan),\n        2,\n    )\n    result.loc[\"kelly_criterion\"] = win_rate - (1 - win_rate) / (\n        pl[pl &gt; 0].mean() / -pl[pl &lt; 0].mean()\n    )\n    # TODO\n    result.loc[\"profit_factor\"] = pl[pl &gt; 0].sum() / (\n        abs(pl[pl &lt; 0].sum()) or np.nan\n    )\n\n    return self.result\n</code></pre>"},{"location":"reference/stats/stats/#lettrade.stats.stats.BotStatistic.show","title":"show","text":"<pre><code>show()\n</code></pre> <p>Show statistic report</p> Source code in <code>lettrade/stats/stats.py</code> <pre><code>def show(self):\n    \"\"\"\n    Show statistic report\n    \"\"\"\n    if \"Start\" not in self.result:\n        logger.warning(\"call compute() before show()\")\n        self.compute()\n\n    # Show result inside docs session\n    if __debug__:\n        from lettrade.utils.docs import is_docs_session\n\n        if is_docs_session():\n            print(str(self))\n            return\n\n    logger.info(\n        \"\\n============= Statistic result =============\\n%s\\n\",\n        str(self),\n    )\n</code></pre>"},{"location":"reference/strategy/","title":"Index","text":""},{"location":"reference/strategy/#lettrade.strategy","title":"strategy","text":""},{"location":"reference/strategy/strategy/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> strategy","text":""},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy","title":"strategy","text":""},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy","title":"Strategy","text":"<pre><code>Strategy(\n    feeder: DataFeeder,\n    exchange: Exchange,\n    account: Account,\n    commander: Commander,\n    is_optimize: bool = False,\n    **kwargs\n)\n</code></pre> <p>Base class to implement a strategy</p> <p>Parameters:</p> <ul> <li> <code>feeder</code>               (<code>DataFeeder</code>)           \u2013            <p>DataFeeder for strategy</p> </li> <li> <code>exchange</code>               (<code>Exchange</code>)           \u2013            <p>Trading exchange</p> </li> <li> <code>account</code>               (<code>Account</code>)           \u2013            <p>Account manager</p> </li> <li> <code>commander</code>               (<code>Commander</code>)           \u2013            <p>Event/Command manager</p> </li> <li> <code>is_optimize</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>flag validate optimize condiction. Defaults to False.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>Validate valid is_optimize flag</p> </li> </ul> Source code in <code>lettrade/strategy/strategy.py</code> <pre><code>def __init__(\n    self,\n    feeder: DataFeeder,\n    exchange: Exchange,\n    account: Account,\n    commander: Commander,\n    is_optimize: bool = False,\n    **kwargs,\n):\n    \"\"\"_summary_\n\n    Args:\n        feeder (DataFeeder): DataFeeder for strategy\n        exchange (Exchange): Trading exchange\n        account (Account): Account manager\n        commander (Commander): Event/Command manager\n        is_optimize (bool, optional): flag validate optimize condiction. Defaults to False.\n\n    Raises:\n        RuntimeError: Validate valid is_optimize flag\n    \"\"\"\n    self.__feeder: DataFeeder = feeder\n    self.__exchange: Exchange = exchange\n    self.__account: Account = account\n    self.__commander: Commander = commander\n\n    self.__datas: list[DataFeed] = self.__feeder.datas\n    self.__data: DataFeed = self.__feeder.data\n\n    if is_optimize and self.is_live:\n        raise RuntimeError(\"Optimize a live datafeeder\")\n    self.__is_optimize: bool = is_optimize\n\n    # Set parameters\n    if kwargs:\n        logger.info(\"Update strategy parameters %s\", kwargs)\n        for k, v in kwargs.items():\n            setattr(self, k, v)\n</code></pre>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.account","title":"account  <code>property</code>","text":"<pre><code>account: Account\n</code></pre> <p>Getter of <code>Account</code></p> <p>Returns:</p> <ul> <li> <code>Account</code> (              <code>Account</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.commander","title":"commander  <code>property</code>","text":"<pre><code>commander: Commander\n</code></pre> <p>Getter of <code>Commander</code></p> <p>Returns:</p> <ul> <li> <code>Commander</code> (              <code>Commander</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.data","title":"data  <code>property</code>","text":"<pre><code>data: DataFeed\n</code></pre> <p>Getter of main DataFeed</p> <p>Returns:</p> <ul> <li> <code>DataFeed</code> (              <code>DataFeed</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.datas","title":"datas  <code>property</code>","text":"<pre><code>datas: list[DataFeed]\n</code></pre> <p>Getter of all DataFeed</p> <p>Returns:</p> <ul> <li> <code>list[DataFeed]</code>           \u2013            <p>list[DataFeed]: description</p> </li> </ul>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.exchange","title":"exchange  <code>property</code>","text":"<pre><code>exchange: Exchange\n</code></pre> <p>Getter of <code>Exchange</code></p> <p>Returns:</p> <ul> <li> <code>Exchange</code> (              <code>Exchange</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.feeder","title":"feeder  <code>property</code>","text":"<pre><code>feeder: DataFeeder\n</code></pre> <p>Getter of <code>DataFeeder</code></p> <p>Returns:</p> <ul> <li> <code>DataFeeder</code> (              <code>DataFeeder</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.history_orders","title":"history_orders  <code>property</code>","text":"<pre><code>history_orders: dict[str, Order]\n</code></pre> <p>Getter of history <code>Order</code> dict</p> <p>Returns:</p> <ul> <li> <code>dict[str, Order]</code>           \u2013            <p>dict[str, Order]: description</p> </li> </ul>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.history_positions","title":"history_positions  <code>property</code>","text":"<pre><code>history_positions: dict[str, Position]\n</code></pre> <p>Getter of history <code>Position</code> dict</p> <p>Returns:</p> <ul> <li> <code>dict[str, Position]</code>           \u2013            <p>dict[str, Position]: description</p> </li> </ul>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.is_backtest","title":"is_backtest  <code>property</code>","text":"<pre><code>is_backtest: bool\n</code></pre> <p>Flag to check strategy is running in backtest DataFeeder</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.is_live","title":"is_live  <code>property</code>","text":"<pre><code>is_live: bool\n</code></pre> <p>Flag to check strategy is running in live DataFeeder</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.is_optimize","title":"is_optimize  <code>property</code>","text":"<pre><code>is_optimize: bool\n</code></pre> <p>Flag to check strategy is running in optimize session</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.now","title":"now  <code>property</code>","text":"<pre><code>now: datetime\n</code></pre> <p>Getter of current datetime</p> <p>Returns:</p> <ul> <li> <code>datetime</code> (              <code>datetime</code> )          \u2013            <p>current datetime of bar</p> </li> </ul>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.orders","title":"orders  <code>property</code>","text":"<pre><code>orders: dict[str, Order]\n</code></pre> <p>Getter of <code>Order</code> dict</p> <p>Returns:</p> <ul> <li> <code>dict[str, Order]</code>           \u2013            <p>dict[str, Order]: description</p> </li> </ul>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.positions","title":"positions  <code>property</code>","text":"<pre><code>positions: dict[str, Position]\n</code></pre> <p>Getter of <code>Position</code> dict</p> <p>Returns:</p> <ul> <li> <code>dict[str, Position]</code>           \u2013            <p>dict[str, Position]: description</p> </li> </ul>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.indicators","title":"indicators","text":"<pre><code>indicators(df: DataFeed) -&gt; None\n</code></pre> <p>All indicator and signal should implement here to cacheable. Because of <code>lettrade</code> will cache/pre-load all <code>DataFeed</code>.</p> <p>To add indicators for a special DataFeed, define a new function name <code>indicators_&lt;DataFeed name&gt;</code>.</p> Usage <pre><code>df_eurusd = DataFeed(name=\"eurusd\")\ndf_gbpusd = DataFeed(name=\"gbpusd\")\n\n# This function will load indicators for df_eurusd\ndef indicators(self, df: DataFeed):\n    df['ema'] = df.i.ema(period=21)\n\n# This function will load indicators for df_gbpusd\ndef indicators_gbpusd(self, df: DataFeed):\n    df['ema'] = df.i.ema(period=25)\n</code></pre> <p>Parameters:</p> <ul> <li> <code>df</code>               (<code>DataFeed</code>)           \u2013            <p>DataFeed need to load indicators value</p> </li> </ul> Source code in <code>lettrade/strategy/strategy.py</code> <pre><code>def indicators(self, df: DataFeed) -&gt; None:\n    \"\"\"All indicator and signal should implement here to cacheable.\n    Because of `lettrade` will cache/pre-load all `DataFeed`.\n\n    To add indicators for a special DataFeed, define a new function name\n    `indicators_&lt;DataFeed name&gt;`.\n\n    Usage:\n        ```python\n        df_eurusd = DataFeed(name=\"eurusd\")\n        df_gbpusd = DataFeed(name=\"gbpusd\")\n\n        # This function will load indicators for df_eurusd\n        def indicators(self, df: DataFeed):\n            df['ema'] = df.i.ema(period=21)\n\n        # This function will load indicators for df_gbpusd\n        def indicators_gbpusd(self, df: DataFeed):\n            df['ema'] = df.i.ema(period=25)\n        ```\n\n    Args:\n        df (DataFeed): DataFeed need to load indicators value\n    \"\"\"\n</code></pre>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.init","title":"init","text":"<pre><code>init() -&gt; None\n</code></pre> <p>Init strategy variables</p> Source code in <code>lettrade/strategy/strategy.py</code> <pre><code>def init(self) -&gt; None:\n    \"\"\"Init strategy variables\"\"\"\n</code></pre>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.next","title":"next","text":"<pre><code>next(df: DataFeed, *others: list[DataFeed]) -&gt; None\n</code></pre> <p>Next bar event</p> Source code in <code>lettrade/strategy/strategy.py</code> <pre><code>def next(self, df: DataFeed, *others: list[DataFeed]) -&gt; None:\n    \"\"\"Next bar event\"\"\"\n</code></pre>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.on_executions","title":"on_executions","text":"<pre><code>on_executions(executions: list[Execution])\n</code></pre> <p>Listen for <code>Execution</code> event</p> <p>Parameters:</p> <ul> <li> <code>executions</code>               (<code>list[Execution]</code>)           \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/strategy/strategy.py</code> <pre><code>def on_executions(self, executions: list[Execution]):\n    \"\"\"Listen for `Execution` event\n\n    Args:\n        executions (list[Execution]): _description_\n    \"\"\"\n    if hasattr(self, \"on_execution\"):\n        for execution in executions:\n            self.on_execution(execution)\n</code></pre>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.on_notify","title":"on_notify","text":"<pre><code>on_notify(*args, **kwargs) -&gt; None\n</code></pre> <p>Listen for <code>notify</code> event</p> <p>Returns:</p> <ul> <li> <code>_type_</code> (              <code>None</code> )          \u2013            <p><code>None</code></p> </li> </ul> Source code in <code>lettrade/strategy/strategy.py</code> <pre><code>def on_notify(self, *args, **kwargs) -&gt; None:\n    \"\"\"Listen for `notify` event\n\n    Returns:\n        _type_: `None`\n    \"\"\"\n</code></pre>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.on_orders","title":"on_orders","text":"<pre><code>on_orders(orders: list[Order])\n</code></pre> <p>Listen for <code>Order</code> event</p> <p>Parameters:</p> <ul> <li> <code>orders</code>               (<code>list[Order]</code>)           \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/strategy/strategy.py</code> <pre><code>def on_orders(self, orders: list[Order]):\n    \"\"\"Listen for `Order` event\n\n    Args:\n        orders (list[Order]): _description_\n    \"\"\"\n    if hasattr(self, \"on_order\"):\n        for order in orders:\n            self.on_order(order)\n</code></pre>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.on_positions","title":"on_positions","text":"<pre><code>on_positions(positions: list[Position])\n</code></pre> <p>Listen for <code>Position</code> event</p> <p>Parameters:</p> <ul> <li> <code>positions</code>               (<code>list[Position]</code>)           \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/strategy/strategy.py</code> <pre><code>def on_positions(self, positions: list[Position]):\n    \"\"\"Listen for `Position` event\n\n    Args:\n        positions (list[Position]): _description_\n    \"\"\"\n    if hasattr(self, \"on_position\"):\n        for position in positions:\n            self.on_position(position)\n</code></pre>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.on_transactions","title":"on_transactions","text":"<pre><code>on_transactions(trans: list[Execution | Order | Position])\n</code></pre> <p>Listen for transaction events</p> <p>Parameters:</p> <ul> <li> <code>trans</code>               (<code>list[Execution | Order | Position]</code>)           \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/strategy/strategy.py</code> <pre><code>def on_transactions(self, trans: list[Execution | Order | Position]):\n    \"\"\"Listen for transaction events\n\n    Args:\n        trans (list[Execution  |  Order  |  Position]): _description_\n    \"\"\"\n    if hasattr(self, \"on_transaction\"):\n        for tran in trans:\n            self.on_transaction(tran)\n</code></pre>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.order_buy","title":"order_buy","text":"<pre><code>order_buy(\n    size: float | None = None,\n    limit: float | None = None,\n    stop: float | None = None,\n    sl: float | None = None,\n    tp: float | None = None,\n    tag: str | None = None,\n    **kwargs\n) -&gt; OrderResult\n</code></pre> <p>Place a new long order.</p> <p>Parameters:</p> <ul> <li> <code>size</code>               (<code>float | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>limit</code>               (<code>float | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>stop</code>               (<code>float | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>sl</code>               (<code>float | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>tp</code>               (<code>float | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>tag</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>**kwargs</code>               (<code>dict | None</code>, default:                   <code>{}</code> )           \u2013            <p>Extra-parameters send to <code>Exchange.new_order</code></p> </li> </ul> <p>Returns:</p> <ul> <li> <code>OrderResult</code> (              <code>OrderResult</code> )          \u2013            <p>order result information</p> </li> </ul> Source code in <code>lettrade/strategy/strategy.py</code> <pre><code>@final\ndef order_buy(\n    self,\n    size: float | None = None,\n    limit: float | None = None,\n    stop: float | None = None,\n    sl: float | None = None,\n    tp: float | None = None,\n    tag: str | None = None,\n    **kwargs,\n) -&gt; OrderResult:\n    \"\"\"Place a new long order.\n\n    Args:\n        size (float | None, optional): _description_. Defaults to None.\n        limit (float | None, optional): _description_. Defaults to None.\n        stop (float | None, optional): _description_. Defaults to None.\n        sl (float | None, optional): _description_. Defaults to None.\n        tp (float | None, optional): _description_. Defaults to None.\n        tag (str | None, optional): _description_. Defaults to None.\n        **kwargs (dict | None, optional): Extra-parameters send to `Exchange.new_order`\n\n    Returns:\n        OrderResult: order result information\n    \"\"\"\n    return self.order_place(\n        side=TradeSide.Buy,\n        size=size,\n        limit=limit,\n        stop=stop,\n        sl=sl,\n        tp=tp,\n        tag=tag,\n        **kwargs,\n    )\n</code></pre>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.order_place","title":"order_place","text":"<pre><code>order_place(\n    side: TradeSide,\n    size: float | None = None,\n    limit: float | None = None,\n    stop: float | None = None,\n    sl: float | None = None,\n    tp: float | None = None,\n    tag: str | None = None,\n    **kwargs\n) -&gt; OrderResult\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>side</code>               (<code>TradeSide</code>)           \u2013            <p>description</p> </li> <li> <code>size</code>               (<code>float | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>limit</code>               (<code>float | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>stop</code>               (<code>float | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>sl</code>               (<code>float | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>tp</code>               (<code>float | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>tag</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>OrderResult</code> (              <code>OrderResult</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/strategy/strategy.py</code> <pre><code>@final\ndef order_place(\n    self,\n    side: TradeSide,\n    size: float | None = None,\n    limit: float | None = None,\n    stop: float | None = None,\n    sl: float | None = None,\n    tp: float | None = None,\n    tag: str | None = None,\n    **kwargs,\n) -&gt; OrderResult:\n    \"\"\"_summary_\n\n    Args:\n        side (TradeSide): _description_\n        size (float | None, optional): _description_. Defaults to None.\n        limit (float | None, optional): _description_. Defaults to None.\n        stop (float | None, optional): _description_. Defaults to None.\n        sl (float | None, optional): _description_. Defaults to None.\n        tp (float | None, optional): _description_. Defaults to None.\n        tag (str | None, optional): _description_. Defaults to None.\n\n    Returns:\n        OrderResult: _description_\n    \"\"\"\n    params = dict(\n        size=size,\n        limit=limit,\n        stop=stop,\n        sl=sl,\n        tp=tp,\n        tag=tag,\n        **kwargs,\n    )\n    params[\"size\"] = side * abs(self.__account.risk(side=side, **params))\n    return self.__exchange.new_order(**params)\n</code></pre>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.order_sell","title":"order_sell","text":"<pre><code>order_sell(\n    size: float | None = None,\n    limit: float | None = None,\n    stop: float | None = None,\n    sl: float | None = None,\n    tp: float | None = None,\n    tag: str | None = None,\n    **kwargs\n) -&gt; OrderResult\n</code></pre> <p>Place a new short order.</p> <p>Parameters:</p> <ul> <li> <code>size</code>               (<code>float | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>limit</code>               (<code>float | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>stop</code>               (<code>float | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>sl</code>               (<code>float | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>tp</code>               (<code>float | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>tag</code>               (<code>str | None</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>**kwargs</code>               (<code>dict | None</code>, default:                   <code>{}</code> )           \u2013            <p>Extra-parameters send to <code>Exchange.new_order</code></p> </li> </ul> <p>Returns:</p> <ul> <li> <code>OrderResult</code> (              <code>OrderResult</code> )          \u2013            <p>order result information</p> </li> </ul> Source code in <code>lettrade/strategy/strategy.py</code> <pre><code>@final\ndef order_sell(\n    self,\n    size: float | None = None,\n    limit: float | None = None,\n    stop: float | None = None,\n    sl: float | None = None,\n    tp: float | None = None,\n    tag: str | None = None,\n    **kwargs,\n) -&gt; OrderResult:\n    \"\"\"Place a new short order.\n\n    Args:\n        size (float | None, optional): _description_. Defaults to None.\n        limit (float | None, optional): _description_. Defaults to None.\n        stop (float | None, optional): _description_. Defaults to None.\n        sl (float | None, optional): _description_. Defaults to None.\n        tp (float | None, optional): _description_. Defaults to None.\n        tag (str | None, optional): _description_. Defaults to None.\n        **kwargs (dict | None, optional): Extra-parameters send to `Exchange.new_order`\n\n    Returns:\n        OrderResult: order result information\n    \"\"\"\n    return self.order_place(\n        side=TradeSide.Sell,\n        size=size,\n        limit=limit,\n        stop=stop,\n        sl=sl,\n        tp=tp,\n        tag=tag,\n        **kwargs,\n    )\n</code></pre>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.plot","title":"plot","text":"<pre><code>plot(df: DataFeed, *others: list[DataFeed]) -&gt; dict\n</code></pre> <p>Custom config of plot</p> <p>Parameters:</p> <ul> <li> <code>df</code>               (<code>DataFeed</code>)           \u2013            <p>plot DataFeed</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict</code> (              <code>dict</code> )          \u2013            <p>config</p> </li> </ul> Source code in <code>lettrade/strategy/strategy.py</code> <pre><code>def plot(self, df: DataFeed, *others: list[DataFeed]) -&gt; dict:\n    \"\"\"Custom config of plot\n\n    Args:\n        df (DataFeed): plot DataFeed\n\n    Returns:\n        dict: config\n    \"\"\"\n    return dict()\n</code></pre>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.send","title":"send","text":"<pre><code>send(msg: str, **kwargs) -&gt; Any\n</code></pre> <p>Send message to commander</p> <p>Parameters:</p> <ul> <li> <code>msg</code>               (<code>str</code>)           \u2013            <p>message string</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Any</code> (              <code>Any</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/strategy/strategy.py</code> <pre><code>@final\ndef send(self, msg: str, **kwargs) -&gt; Any:\n    \"\"\"Send message to commander\n\n    Args:\n        msg (str): message string\n\n    Returns:\n        Any: _description_\n    \"\"\"\n    return self.commander.send_message(msg=msg, **kwargs)\n</code></pre>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.start","title":"start","text":"<pre><code>start(df: DataFeed, *others: list[DataFeed]) -&gt; None\n</code></pre> <p>call after <code>init()</code> and before first <code>next()</code> is called</p> <p>Parameters:</p> <ul> <li> <code>df</code>               (<code>DataFeed</code>)           \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>_type_</code> (              <code>None</code> )          \u2013            <p><code>None</code></p> </li> </ul> Source code in <code>lettrade/strategy/strategy.py</code> <pre><code>def start(self, df: DataFeed, *others: list[DataFeed]) -&gt; None:\n    \"\"\"call after `init()` and before first `next()` is called\n\n    Args:\n        df (DataFeed): _description_\n\n    Returns:\n        _type_: `None`\n    \"\"\"\n</code></pre>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.stop","title":"stop","text":"<pre><code>stop(df: DataFeed, *others: list[DataFeed]) -&gt; None\n</code></pre> <p>Call when strategy run completed</p> <p>Parameters:</p> <ul> <li> <code>df</code>               (<code>DataFeed</code>)           \u2013            <p>main data of strategy</p> </li> </ul> Source code in <code>lettrade/strategy/strategy.py</code> <pre><code>def stop(self, df: DataFeed, *others: list[DataFeed]) -&gt; None:\n    \"\"\"Call when strategy run completed\n\n    Args:\n        df (DataFeed): main data of strategy\n    \"\"\"\n</code></pre>"},{"location":"reference/utils/","title":"Index","text":""},{"location":"reference/utils/#lettrade.utils","title":"utils","text":""},{"location":"reference/utils/docs/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> docs","text":""},{"location":"reference/utils/docs/#lettrade.utils.docs","title":"docs","text":""},{"location":"reference/utils/notebook/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> notebook","text":""},{"location":"reference/utils/notebook/#lettrade.utils.notebook","title":"notebook","text":""},{"location":"tutorial/tut-001/","title":"Tutorial 001","text":"<p>This tutorial tend to help understand basic of <code>lettrade</code></p>"},{"location":"tutorial/tut-001/#main-object","title":"Main object","text":"<ul> <li>DataFeed: is data for your bot to running, this is a implement of <code>pandas.DataFrame</code>, so it have all <code>pandas.DataFrame</code> feature</li> <li>Strategy: is base Strategy of your bot, implement your bot with this as base class</li> <li>Exchange: is base Exchange of your bot, where control trading event and logic</li> <li>Account: is base class, where your bot will control account balance, equity, risk, size, commission...</li> <li>Commander: is base class, where your bot will communicate with you in realtime</li> <li>Brain: is brain of your bot, it just internal object, so don't need to care about it</li> </ul>"},{"location":"tutorial/tut-001/#init-your-bot","title":"Init your bot","text":""},{"location":"tutorial/tut-001/#init-datafeed","title":"Init DataFeed","text":"<p><pre><code>from lettrade import DataFeed\nimport yfinance as yf\n\n# Your pandas.Dataframe\nmsft = yf.Ticker(\"MSFT\")\ndf = msft.history(period=\"1mo\")\n\nprint(\"pandas DataFrame:\\n\", df.tail())\n\ndata = DataFeed(data=df, name=\"MSFT\")\n\nprint(\"LetTrade DataFeed:\\n\", data.tail())\n</code></pre> <pre><code>pandas DataFrame:\n                                  Open        High         Low       Close    Volume  Dividends  Stock Splits\nDate                                                                                                        \n2024-05-15 00:00:00-04:00  417.899994  423.809998  417.269989  423.079987  22239500       0.75           0.0\n2024-05-16 00:00:00-04:00  421.799988  425.420013  420.350006  420.989990  17530100       0.00           0.0\n2024-05-17 00:00:00-04:00  422.540009  422.920013  418.029999  420.209991  15352200       0.00           0.0\n2024-05-20 00:00:00-04:00  420.209991  426.769989  419.989990  425.339996  16272100       0.00           0.0\n2024-05-21 00:00:00-04:00  426.829987  432.970001  424.850006  429.040009  21428700       0.00           0.0\nLetTrade DataFeed:\n                         Date        Open        High         Low       Close    Volume  Dividends  Stock Splits\n17 2024-05-15 00:00:00-04:00  417.899994  423.809998  417.269989  423.079987  22239500       0.75           0.0\n18 2024-05-16 00:00:00-04:00  421.799988  425.420013  420.350006  420.989990  17530100       0.00           0.0\n19 2024-05-17 00:00:00-04:00  422.540009  422.920013  418.029999  420.209991  15352200       0.00           0.0\n20 2024-05-20 00:00:00-04:00  420.209991  426.769989  419.989990  425.339996  16272100       0.00           0.0\n21 2024-05-21 00:00:00-04:00  426.829987  432.970001  424.850006  429.040009  21428700       0.00           0.0\n</code></pre></p>"},{"location":"tutorial/tut-001/#strategy-implement","title":"Strategy implement","text":"<pre><code>class SmaCross(Strategy):\n    ema1_period = 9\n    ema2_period = 21\n</code></pre>"},{"location":"tutorial/tut-001/#indicatorsignal-implement","title":"Indicator/signal implement","text":"<pre><code>import talib.abstract as ta\nfrom lettrade import DataFeed, indicator as i\n\ndef indicators(self, df: DataFeed):\n    df[\"ema1\"] = ta.EMA(df, timeperiod=self.ema1_period)\n    df[\"ema2\"] = ta.EMA(df, timeperiod=self.ema2_period)\n\n    df[\"signal_ema_crossover\"] = i.crossover(df.ema1, df.ema2)\n    df[\"signal_ema_crossunder\"] = i.crossunder(df.ema1, df.ema2)\n</code></pre>"},{"location":"tutorial/plot/candlestick/","title":"Plot EMA and Candlestick","text":"In\u00a0[1]: Copied! <pre>import talib.abstract as ta\nimport pandas_ta as pdta\n\nfrom lettrade import DataFeed, Strategy, indicator as i\nfrom lettrade.exchange.backtest import ForexBackTestAccount, let_backtest\n\n\nclass SmaCross(Strategy):\n    ema1_period = 9\n    ema2_period = 21\n\n    def indicators(self, df: DataFeed):\n        df[\"ema1\"] = ta.EMA(df, timeperiod=self.ema1_period)\n        df[\"ema2\"] = ta.EMA(df, timeperiod=self.ema2_period)\n\n        df[\"signal_ema_crossover\"] = i.crossover(df.ema1, df.ema2)\n        df[\"signal_ema_crossunder\"] = i.crossunder(df.ema1, df.ema2)\n\n        df[\"cdl_doji\"] = pdta.cdl_doji(df.open, df.high, df.low, df.close)\n\n    def next(self, df: DataFeed):\n        if len(self.orders) &gt; 0 or len(self.positions) &gt; 0:\n            return\n\n        if df.l.signal_ema_crossover[-1]:\n            price = df.l.close[-1]\n            self.buy(size=0.1, sl=price - 0.001, tp=price + 0.001)\n        elif df.l.signal_ema_crossunder[-1]:\n            price = df.l.close[-1]\n            self.sell(size=0.1, sl=price + 0.001, tp=price - 0.001)\n\n    def plot(self, df: DataFeed) -&gt; dict:\n        from lettrade.plot import PlotColor\n        from lettrade.plot.plotly import (\n            plot_candle_highlight,\n            plot_line,\n            plot_merge,\n        )\n\n        plot_ema1 = plot_line(df[\"ema1\"], color=\"yellow\")\n        plot_ema2 = plot_line(df[\"ema2\"], color=\"green\")\n        plot_cdl_doji = plot_candle_highlight(\n            df[df[\"cdl_doji\"] != 0],\n            name=f\"Doji {df.name}\",\n            width=3,\n        )\n        return plot_merge(\n            plot_ema1,\n            plot_ema2,\n            plot_cdl_doji,\n        )\n\n\nlt = let_backtest(\n    strategy=SmaCross,\n    datas=\"example/data/data/EURUSD_5m_0_1000.csv\",\n    account=ForexBackTestAccount,\n    # plotter=None,\n)\n</pre> import talib.abstract as ta import pandas_ta as pdta  from lettrade import DataFeed, Strategy, indicator as i from lettrade.exchange.backtest import ForexBackTestAccount, let_backtest   class SmaCross(Strategy):     ema1_period = 9     ema2_period = 21      def indicators(self, df: DataFeed):         df[\"ema1\"] = ta.EMA(df, timeperiod=self.ema1_period)         df[\"ema2\"] = ta.EMA(df, timeperiod=self.ema2_period)          df[\"signal_ema_crossover\"] = i.crossover(df.ema1, df.ema2)         df[\"signal_ema_crossunder\"] = i.crossunder(df.ema1, df.ema2)          df[\"cdl_doji\"] = pdta.cdl_doji(df.open, df.high, df.low, df.close)      def next(self, df: DataFeed):         if len(self.orders) &gt; 0 or len(self.positions) &gt; 0:             return          if df.l.signal_ema_crossover[-1]:             price = df.l.close[-1]             self.buy(size=0.1, sl=price - 0.001, tp=price + 0.001)         elif df.l.signal_ema_crossunder[-1]:             price = df.l.close[-1]             self.sell(size=0.1, sl=price + 0.001, tp=price - 0.001)      def plot(self, df: DataFeed) -&gt; dict:         from lettrade.plot import PlotColor         from lettrade.plot.plotly import (             plot_candle_highlight,             plot_line,             plot_merge,         )          plot_ema1 = plot_line(df[\"ema1\"], color=\"yellow\")         plot_ema2 = plot_line(df[\"ema2\"], color=\"green\")         plot_cdl_doji = plot_candle_highlight(             df[df[\"cdl_doji\"] != 0],             name=f\"Doji {df.name}\",             width=3,         )         return plot_merge(             plot_ema1,             plot_ema2,             plot_cdl_doji,         )   lt = let_backtest(     strategy=SmaCross,     datas=\"example/data/data/EURUSD_5m_0_1000.csv\",     account=ForexBackTestAccount,     # plotter=None, ) In\u00a0[2]: Copied! <pre>lt.run()\n</pre> lt.run() <pre># Strategy         &lt;class '__main__.SmaCross'&gt;\nStart                2024-05-13 21:15:00+00:00\nEnd                  2024-05-17 08:30:00+00:00\nDuration                       3 days 11:15:00\nStart Balance                             1000\nEquity [$]                              980.08\nPL [$]                                  -19.92\nPL [%]                                   -1.99\n                                              \n# Trades                                    15\nWin Rate [%]                               0.4\nFee [$]                                  -0.58\nBest Trade [%]                           10.06\nWorst Trade [%]                         -10.14\nSQN                                      -0.64\nKelly Criterion                      -0.164918\nProfit Factor                         0.708067\n</pre> In\u00a0[3]: Copied! <pre>lt.plot()\n</pre> lt.plot()"},{"location":"tutorial/plot/candlestick/#plot-ema-and-candlestick","title":"Plot EMA and Candlestick\u00b6","text":""},{"location":"tutorial/plot/candlestick/#strategy","title":"Strategy\u00b6","text":""},{"location":"tutorial/plot/candlestick/#run","title":"Run\u00b6","text":""},{"location":"tutorial/plot/candlestick/#plot","title":"Plot\u00b6","text":""}]}