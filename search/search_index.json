{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"LetTrade","text":"<p>A lightweight trading framework compatible with Stock, Forex, Crypto... markets</p> <p>Find more at Documentation</p>"},{"location":"#installation","title":"Installation","text":"<p>Stable version</p> <pre><code>pip install lettrade\n</code></pre> <p>Developing version</p> <pre><code>pip install git+https://git@github.com/AwesomeTrading/lettrade.git@main\n</code></pre>"},{"location":"#example","title":"Example","text":"<pre><code>import talib.abstract as ta\n\nfrom lettrade.all import DataFeed, Strategy, let_backtest, crossover, crossunder\n\n\nclass SmaCross(Strategy):\n    ema1_period = 9\n    ema2_period = 21\n\n    def indicators(self, df: DataFeed):\n        df[\"ema1\"] = ta.EMA(df, timeperiod=self.ema1_period)\n        df[\"ema2\"] = ta.EMA(df, timeperiod=self.ema2_period)\n\n        df[\"crossover\"] = crossover(df.ema1, df.ema2)\n        df[\"crossunder\"] = crossunder(df.ema1, df.ema2)\n\n    def next(self, df: DataFeed):\n        if df.l.crossover[-1]:\n            self.buy(0.1)\n        elif df.l.crossunder[-1]:\n            self.sell(0.1)\n\nlt = let_backtest(\n    strategy=SmaCross,\n    datas=\"example/data/data/EURUSD_5m_0_1000.csv\",\n)\n\nlt.run()\nlt.plot()\n</code></pre> <pre><code># Strategy                       &lt;class 'SmaCross'&gt;\nStart                     2024-05-13 21:15:00+00:00\nEnd                       2024-05-17 08:30:00+00:00\nDuration                            3 days 11:15:00\nStart Balance [$]                             10000\nEquity [$]                                  10000.0\nPL [$]                                          0.0\nPL [%]                                          0.0\nBuy &amp; Hold PL [%]                               2.0\nMax. Drawdown [%]                            -33.08\nAvg. Drawdown [%]                             -5.58\nMax. Drawdown Duration            688 days 00:00:00\nAvg. Drawdown Duration             41 days 00:00:00\n\n# Trades                                         34\nBest Trade [%]                               0.0007\nWorst Trade [%]                           -0.000732\nProfit Factor                                  2.13\nSQN                                            1.78\n</code></pre>"},{"location":"#start-a-strategy","title":"Start a strategy","text":"<p>All example in <code>example/</code> directory</p>"},{"location":"#download-data","title":"Download data","text":"<pre><code>python -m example.data.yfinance\n</code></pre>"},{"location":"#backtest-strategy","title":"Backtest strategy","text":"<pre><code>python -m example.strategy.backtest_sma_cross\n</code></pre> <pre><code># Strategy                &lt;class '__main__.SmaCross'&gt;\nStart                       2023-01-02 00:00:00+00:00\nEnd                         2023-12-29 21:00:00+00:00\nDuration                            361 days 21:00:00\nStart Balance                                    1000\nEquity [$]                                    1497.29\nPL [$]                                         497.29\nPL [%]                                          49.73\nBuy &amp; Hold PL [%]                                 2.0\nMax. Drawdown [%]                              -33.08\nAvg. Drawdown [%]                               -5.58\nMax. Drawdown Duration              688 days 00:00:00\nAvg. Drawdown Duration               41 days 00:00:00\n\n# Trades                                          248\nWin Rate [%]                                     50.0\nFee [$]                                         -4.96\nBest Trade [%]                             554.825333\nWorst Trade [%]                           -525.077316\nProfit Factor                                    2.13\nSQN                                              1.78\n</code></pre>"},{"location":"#live-trading","title":"Live Trading","text":""},{"location":"#official","title":"Official","text":"<ul> <li><code>MetaTrader</code>: Support MetaTrader 5 Terminal trading</li> <li><code>CCXT</code>: [WIP] Support most of cryptocurrency exchange from CCXT library</li> </ul>"},{"location":"#development","title":"Development","text":"<p>Set up conda environment</p> <pre><code>conda create -y -n LetTrade python=3.12\nconda activate LetTrade\npip install -r requirements-dev.txt\n</code></pre>"},{"location":"dev/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p>"},{"location":"dev/#development","title":"Development","text":"<p>Guide for developer to install <code>lettrade</code></p>"},{"location":"dev/#environment-setup","title":"Environment setup","text":"<p>Set up conda environment</p> <pre><code>conda create -y -n LetTrade python=3.12\nconda activate LetTrade\npip install -r requirements-dev.txt\n</code></pre>"},{"location":"dev/#document","title":"Document","text":"<p>Building <code>lettrade</code> document guide</p>"},{"location":"dev/#dependencies","title":"Dependencies","text":"<p>Install <code>lettrade</code> as module</p> <pre><code>pip install .\n</code></pre> <p>Install python document requirements</p> <pre><code>pip install -r docs/requirements-docs.txt\n</code></pre>"},{"location":"dev/#view-document","title":"View document","text":"<p>Start mkdocs local server</p> <pre><code>mkdocs serve\n</code></pre>"},{"location":"indicator/install/","title":"TA Library","text":""},{"location":"indicator/install/#ta-lib","title":"TA-Lib","text":"<p>Home | Indicators</p>"},{"location":"indicator/install/#build-from-source","title":"Build from source","text":"<p>Download ta-lib from github ta-lib-0.4.0-src.tar.gz</p> <pre><code>tar zxvf ta-lib-0.4.0-src.tar.gz\ncd ta-lib\n./configure --prefix=/usr\nmake\nsudo make install\n</code></pre> <p>Full install tutorial from TA-Lib</p>"},{"location":"indicator/install/#conda-forge","title":"Conda-Forge","text":"<pre><code>conda install -c conda-forge ta-lib\n</code></pre>"},{"location":"indicator/install/#python-library","title":"Python library","text":"<pre><code>pip install TA-Lib\n</code></pre>"},{"location":"indicator/install/#pandas-ta","title":"Pandas-TA","text":"<p>Home | Indicators</p> <pre><code>pip install pandas_ta\n</code></pre>"},{"location":"indicator/install/#technical-analysis-library-in-python","title":"Technical Analysis Library in Python","text":"<p>Home | Indicators</p> <pre><code>pip install --upgrade ta\n</code></pre>"},{"location":"indicator/install/#technical","title":"Technical","text":"<p>Home | Indicators</p> <pre><code>pip install technical\n</code></pre>"},{"location":"indicator/talib/","title":"TA-Lib","text":"<p>Home | Indicators</p>"},{"location":"indicator/talib/#installation","title":"Installation","text":""},{"location":"indicator/talib/#build-from-source","title":"Build from source","text":"<p>Download ta-lib from github ta-lib-0.4.0-src.tar.gz</p> <pre><code>tar zxvf ta-lib-0.4.0-src.tar.gz\ncd ta-lib\n./configure --prefix=/usr\nmake\nsudo make install\n</code></pre> <p>Full install tutorial from TA-Lib</p>"},{"location":"indicator/talib/#conda-forge","title":"Conda-Forge","text":"<pre><code>conda install -c conda-forge ta-lib\n</code></pre>"},{"location":"indicator/talib/#python-library","title":"Python library","text":"<pre><code>pip install TA-Lib\n</code></pre>"},{"location":"indicator/technical/","title":"Freqtrade Technical","text":"<p>Home</p>"},{"location":"indicator/technical/#installation","title":"Installation","text":"<pre><code>pip install technical\n</code></pre>"},{"location":"install/","title":"LetTrade install","text":"<p>Guide to quick install <code>lettrade</code></p>"},{"location":"install/#installation","title":"Installation","text":"<p>Stable version</p> <pre><code>pip install lettrade\n</code></pre> <p>Developing version</p> <pre><code>pip install git+https://git@github.com/AwesomeTrading/lettrade.git@main\n</code></pre>"},{"location":"install/metatrader/","title":"MetaTrader 5 Install","text":"<p><code>MetaTrader 5</code> is exchange server of module MetaTrader</p>"},{"location":"install/metatrader/#ubuntu","title":"Ubuntu","text":""},{"location":"install/metatrader/#wine","title":"Wine","text":"<pre><code>wget https://download.mql5.com/cdn/web/metaquotes.software.corp/mt5/mt5ubuntu.sh ; chmod +x mt5ubuntu.sh ; ./mt5ubuntu.sh\n</code></pre>"},{"location":"install/metatrader/#python","title":"Python","text":"<pre><code>wget https://www.python.org/ftp/python/3.10.11/python-3.10.11.exe\n\nexport WINEPREFIX=$HOME/.mt5\nwine python-3.10.11.exe\n</code></pre>"},{"location":"install/metatrader/#python-requirements","title":"Python requirements","text":"<pre><code>export WINEPREFIX=$HOME/.mt5\n\ncd $HOME/.mt5/dosdevices/c:/users/$USER/AppData/Local/Programs/Python/Python310-32/\n\nwine python.exe -m pip install --upgrade pip\nwine python.exe -m pip install MetaTrader5\nwine python.exe -m pip install https://github.com/AwesomeTrading/mt5linux/archive/master.zip\n</code></pre>"},{"location":"install/metatrader/#start-server","title":"Start Server","text":"<pre><code>export WINEPREFIX=$HOME/.mt5\n\npython -m mt5linux \"$HOME/.mt5/dosdevices/c:/users/$USER/AppData/Local/Programs/Python/Python310-32/python.exe\"\n</code></pre>"},{"location":"install/metatrader/#metatrader-terminal","title":"MetaTrader Terminal","text":""},{"location":"install/metatrader/#load-broker-information","title":"Load broker information","text":"<p>Load broker information before start by steps:</p> <ul> <li><code>File</code> menu</li> <li><code>Open an Account</code> action</li> <li>Search your broker (ex: <code>Tickmill</code>, <code>Roboforex</code>...)</li> <li><code>Enter</code> to load</li> <li><code>Cancel</code> (Done)</li> </ul>"},{"location":"install/metatrader/#enable-automatic-algo-trading","title":"Enable Automatic Algo Trading","text":"<ul> <li><code>Tools</code> menu</li> <li><code>Options</code> menu</li> <li><code>Expert Advisors</code> tab</li> <li><code>Allow Auto Trading</code> checkbox</li> <li>Uncheck <code>Disable automated trading when switching accounts</code> and <code>Disable automated trading when switching profiles</code></li> </ul>"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li> account<ul> <li> account</li> </ul> </li> <li> all</li> <li> base<ul> <li> error</li> <li> flag</li> </ul> </li> <li> bot</li> <li> brain<ul> <li> brain</li> </ul> </li> <li> calendar<ul> <li> calendar</li> </ul> </li> <li> commander<ul> <li> commander</li> <li> telegram</li> </ul> </li> <li> data<ul> <li> data</li> <li> extra<ul> <li> csv</li> </ul> </li> <li> feeder</li> <li> replay</li> <li> resample</li> <li> timeframe</li> <li> wrapper</li> </ul> </li> <li> exchange<ul> <li> backtest<ul> <li> account</li> <li> backtest</li> <li> commander</li> <li> data</li> <li> exchange</li> <li> extra<ul> <li> yfinance</li> </ul> </li> <li> feeder</li> <li> plotly<ul> <li> plotly_optimize</li> </ul> </li> <li> stats</li> <li> trade</li> </ul> </li> <li> base</li> <li> error</li> <li> exchange</li> <li> execute</li> <li> live<ul> <li> account</li> <li> api</li> <li> ccxt<ul> <li> api</li> <li> ccxt</li> </ul> </li> <li> data</li> <li> exchange</li> <li> feeder</li> <li> live</li> <li> metatrader<ul> <li> api</li> <li> metatrader</li> </ul> </li> <li> trade</li> </ul> </li> <li> order</li> <li> position</li> <li> trade</li> </ul> </li> <li> indicator<ul> <li> candlestick<ul> <li> talib</li> </ul> </li> <li> function</li> <li> indicator</li> <li> vendor<ul> <li> fastfinance<ul> <li> connector</li> <li> fastfinance</li> </ul> </li> <li> qtpylib<ul> <li> inject</li> <li> qtpylib</li> </ul> </li> </ul> </li> <li> volatility<ul> <li> keltner_channel</li> </ul> </li> </ul> </li> <li> lettrade</li> <li> plot<ul> <li> bot</li> <li> color</li> <li> optimize</li> <li> plot</li> <li> plotly<ul> <li> helper</li> <li> indicator</li> <li> plotly</li> </ul> </li> </ul> </li> <li> stats<ul> <li> stats</li> </ul> </li> <li> strategy<ul> <li> strategy</li> </ul> </li> <li> utils<ul> <li> docs</li> <li> notebook</li> </ul> </li> </ul>"},{"location":"reference/all/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> all","text":""},{"location":"reference/all/#lettrade.all","title":"all","text":"<p>Import everything in one. Import some unnecessary but convenient for everyone</p>"},{"location":"reference/bot/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> bot","text":""},{"location":"reference/bot/#lettrade.bot","title":"bot","text":""},{"location":"reference/bot/#lettrade.bot.LetTradeBot","title":"LetTradeBot","text":"<pre><code>LetTradeBot(\n    strategy: Type[Strategy],\n    datas: DataFeed | list[DataFeed] | str | list[str],\n    feeder: Type[DataFeeder],\n    exchange: Type[Exchange],\n    account: Type[Account],\n    commander: Optional[Type[Commander]] = None,\n    plotter: Optional[Type[Plotter]] = None,\n    stats: Optional[Type[BotStatistic]] = None,\n    name: Optional[str] = None,\n    **kwargs\n)\n</code></pre> Source code in <code>lettrade/bot.py</code> <pre><code>def __init__(\n    self,\n    strategy: Type[Strategy],\n    datas: DataFeed | list[DataFeed] | str | list[str],\n    feeder: Type[DataFeeder],\n    exchange: Type[Exchange],\n    account: Type[Account],\n    commander: Optional[Type[Commander]] = None,\n    plotter: Optional[Type[Plotter]] = None,\n    stats: Optional[Type[BotStatistic]] = None,\n    name: Optional[str] = None,\n    **kwargs,\n) -&gt; None:\n    logger.info(\"New bot: %s\", name)\n\n    self._strategy_cls = strategy\n    self._feeder_cls = feeder\n    self._exchange_cls = exchange\n    self._account_cls = account\n    self._commander_cls = commander\n    self._plotter_cls = plotter\n    self._stats_cls = stats\n\n    self._name = name\n    self._kwargs = kwargs\n\n    # DataFeeds\n    self.datas = datas\n    self.data = self.datas[0]\n</code></pre>"},{"location":"reference/bot/#lettrade.bot.LetTradeBot.account","title":"account  <code>instance-attribute</code>","text":"<pre><code>account: Account\n</code></pre> <p>Trading account handler</p>"},{"location":"reference/bot/#lettrade.bot.LetTradeBot.brain","title":"brain  <code>instance-attribute</code>","text":"<pre><code>brain: Brain\n</code></pre> <p>Brain of bot</p>"},{"location":"reference/bot/#lettrade.bot.LetTradeBot.commander","title":"commander  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>commander: Optional[Commander] = None\n</code></pre> <p>Control the bot</p>"},{"location":"reference/bot/#lettrade.bot.LetTradeBot.data","title":"data  <code>instance-attribute</code>","text":"<pre><code>data: DataFeed = datas[0]\n</code></pre> <p>Main DataFeed for bot</p>"},{"location":"reference/bot/#lettrade.bot.LetTradeBot.datas","title":"datas  <code>instance-attribute</code>","text":"<pre><code>datas: list[DataFeed] = datas\n</code></pre> <p>DataFeed list for bot</p>"},{"location":"reference/bot/#lettrade.bot.LetTradeBot.exchange","title":"exchange  <code>instance-attribute</code>","text":"<pre><code>exchange: Exchange\n</code></pre> <p>Trading exchange and events</p>"},{"location":"reference/bot/#lettrade.bot.LetTradeBot.feeder","title":"feeder  <code>instance-attribute</code>","text":"<pre><code>feeder: DataFeeder\n</code></pre> <p>DataFeeder help to handle <code>datas</code></p>"},{"location":"reference/bot/#lettrade.bot.LetTradeBot.plotter","title":"plotter  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>plotter: Optional[Plotter] = None\n</code></pre> <p>Plot graphic results</p>"},{"location":"reference/bot/#lettrade.bot.LetTradeBot.strategy","title":"strategy  <code>instance-attribute</code>","text":"<pre><code>strategy: Strategy\n</code></pre> <p>Strategy</p>"},{"location":"reference/bot/#lettrade.bot.LetTradeBot.plot","title":"plot","text":"<pre><code>plot(*args, **kwargs)\n</code></pre> <p>Plot strategy result</p> Source code in <code>lettrade/bot.py</code> <pre><code>def plot(self, *args, **kwargs):\n    \"\"\"Plot strategy result\"\"\"\n    if __debug__:\n        from .utils.docs import is_docs_session\n\n        if is_docs_session():\n            return\n\n    self.plotter.plot(*args, **kwargs)\n</code></pre>"},{"location":"reference/bot/#lettrade.bot.LetTradeBot.stop","title":"stop","text":"<pre><code>stop()\n</code></pre> <p>Stop strategy</p> Source code in <code>lettrade/bot.py</code> <pre><code>def stop(self):\n    \"\"\"Stop strategy\"\"\"\n    self.brain.stop()\n    if self.plotter is not None:\n        self.plotter.stop()\n</code></pre>"},{"location":"reference/lettrade/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> lettrade","text":""},{"location":"reference/lettrade/#lettrade.lettrade","title":"lettrade","text":""},{"location":"reference/lettrade/#lettrade.lettrade.LetTrade","title":"LetTrade","text":"<pre><code>LetTrade(\n    strategy: Type[Strategy],\n    datas: DataFeed | list[DataFeed] | str | list[str],\n    feeder: Type[DataFeeder],\n    exchange: Type[Exchange],\n    account: Type[Account],\n    commander: Optional[Type[Commander]] = None,\n    plotter: Optional[Type[Plotter]] = None,\n    stats: Optional[Type[BotStatistic]] = None,\n    name: Optional[str] = None,\n    bot: Optional[Type[LetTradeBot]] = LetTradeBot,\n    **kwargs\n)\n</code></pre> <p>Building new bot object and handle multiprocessing</p> Source code in <code>lettrade/lettrade.py</code> <pre><code>def __init__(\n    self,\n    strategy: Type[Strategy],\n    datas: DataFeed | list[DataFeed] | str | list[str],\n    feeder: Type[DataFeeder],\n    exchange: Type[Exchange],\n    account: Type[Account],\n    commander: Optional[Type[Commander]] = None,\n    plotter: Optional[Type[Plotter]] = None,\n    stats: Optional[Type[BotStatistic]] = None,\n    name: Optional[str] = None,\n    bot: Optional[Type[LetTradeBot]] = LetTradeBot,\n    **kwargs,\n) -&gt; None:\n    self._kwargs = kwargs\n    self._kwargs[\"strategy_cls\"] = strategy\n    self._kwargs[\"feeder_cls\"] = feeder\n    self._kwargs[\"exchange_cls\"] = exchange\n    self._kwargs[\"account_cls\"] = account\n    self._kwargs[\"commander_cls\"] = commander\n    self._kwargs[\"plotter_cls\"] = plotter\n    self._kwargs[\"stats_cls\"] = stats\n    self._kwargs[\"bot_cls\"] = bot\n    self._kwargs[\"name\"] = name\n\n    self._kwargs[\"datas\"] = self._init_datafeeds(datas)\n</code></pre>"},{"location":"reference/lettrade/#lettrade.lettrade.LetTrade.plot","title":"plot","text":"<pre><code>plot(*args, jump: Optional[dict] = None, **kwargs)\n</code></pre> <p>Plot strategy/optimize result</p> BotPlotter <p>Miror of BotPlotter.plot(). Plotly implement Plotly.plot().</p> <p>Args:     <code>jump</code> (Optional[dict], optional): Miror of BotPlotter.jump()</p> <p>Example:     - Jump to trade_id         <pre><code>lt.plot(\n    jump=dict(trade_id=1, range=300),\n    layout=dict(height=2000),\n)\n</code></pre></p> OptimizePlotter <p>Miror of OptimizePlotter.plot().</p> <p>Example:     -         <pre><code>lt.plot(layout=dict(height=2000))\n</code></pre></p> Source code in <code>lettrade/lettrade.py</code> <pre><code>def plot(self, *args, jump: Optional[dict] = None, **kwargs):\n    \"\"\"Plot strategy/optimize result\n\n    BotPlotter:\n        Miror of [BotPlotter.plot()](site:/reference/plot/bot/#lettrade.plot.bot.BotPlotter.plot).\n        Plotly implement [Plotly.plot()](site:/reference/plot/plotly/plotly/#lettrade.plot.plotly.plotly.PlotlyBotPlotter.plot).\n\n        Args:\n            `jump` (Optional[dict], optional): Miror of [BotPlotter.jump()](site:/reference/plot/bot/#lettrade.plot.bot.BotPlotter.jump)\n\n        Example:\n            - Jump to trade_id\n                ```python\n                lt.plot(\n                    jump=dict(trade_id=1, range=300),\n                    layout=dict(height=2000),\n                )\n                ```\n\n    OptimizePlotter:\n        Miror of [OptimizePlotter.plot()](site:/reference/plot/optimize/#lettrade.plot.optimize.OptimizePlotter.plot).\n\n        Example:\n            -\n                ```python\n                lt.plot(layout=dict(height=2000))\n                ```\n    \"\"\"\n    if __debug__:\n        from .utils.docs import is_docs_session\n\n        if is_docs_session():\n            return\n\n    self.plotter.plot(*args, jump=jump, **kwargs)\n</code></pre>"},{"location":"reference/lettrade/#lettrade.lettrade.LetTrade.run","title":"run","text":"<pre><code>run(worker: Optional[int] = None, **kwargs)\n</code></pre> <p>Run strategy in single or multiple processing</p> <p>Parameters:</p> <ul> <li> <code>worker</code>               (<code>Optional[int]</code>, default:                   <code>None</code> )           \u2013            <p>Number of processing. Defaults to None.</p> </li> </ul> Source code in <code>lettrade/lettrade.py</code> <pre><code>def run(self, worker: Optional[int] = None, **kwargs):\n    \"\"\"Run strategy in single or multiple processing\n\n    Args:\n        worker (Optional[int], optional): Number of processing. Defaults to None.\n    \"\"\"\n    if worker or isinstance(self.data, list):\n        if not isinstance(self.data, list):\n            # self.data = self.datas\n            self.datas = [self.data]\n\n        worker = self._max_workers(worker)\n\n        self._multiprocess()\n\n        datas_source = self._kwargs.pop(\"datas\")\n        with ProcessPoolExecutor(max_workers=worker) as executor:\n            futures = [\n                executor.submit(\n                    self._bot_cls.run_bot,\n                    datas=datas,\n                    id=i,\n                    result=\"str\",\n                    **self._kwargs,\n                )\n                for i, datas in enumerate(datas_source)\n            ]\n            for future in futures:\n                result = future.result()\n                print(result)\n    else:\n        self._bot = self._bot_cls.run_bot(\n            bot=self._bot,\n            result=\"bot\",\n            **self._kwargs,\n        )\n        print(str(self._bot.stats))\n</code></pre>"},{"location":"reference/lettrade/#lettrade.lettrade.LetTrade.stop","title":"stop","text":"<pre><code>stop()\n</code></pre> <p>Stop strategy</p> Source code in <code>lettrade/lettrade.py</code> <pre><code>def stop(self):\n    \"\"\"Stop strategy\"\"\"\n    if self._bot is not None:\n        return self._bot.stop()\n    if self.stats:\n        self.stats.stop()\n</code></pre>"},{"location":"reference/account/","title":"Index","text":""},{"location":"reference/account/#lettrade.account","title":"account","text":""},{"location":"reference/account/account/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> account","text":""},{"location":"reference/account/account/#lettrade.account.account","title":"account","text":""},{"location":"reference/account/account/#lettrade.account.account.Account","title":"Account","text":"<pre><code>Account(\n    risk: float = 0.02,\n    cash: float = 10000,\n    margin: float = 1.0,\n    leverage: float = 1.0,\n    **kwargs\n)\n</code></pre> <p>Manage account balance, leverage, commission. Risk calculate and control</p> <p>Parameters:</p> <ul> <li> <code>risk</code>               (<code>float</code>, default:                   <code>0.02</code> )           \u2013            <p>description. Defaults to 0.02.</p> </li> <li> <code>cash</code>               (<code>float</code>, default:                   <code>10000</code> )           \u2013            <p>description. Defaults to 10_000.</p> </li> <li> <code>margin</code>               (<code>float</code>, default:                   <code>1.0</code> )           \u2013            <p>description. Defaults to 1.0.</p> </li> <li> <code>leverage</code>               (<code>float</code>, default:                   <code>1.0</code> )           \u2013            <p>description. Defaults to 1.0.</p> </li> </ul> Source code in <code>lettrade/account/account.py</code> <pre><code>def __init__(\n    self,\n    risk: float = 0.02,\n    cash: float = 10_000,\n    margin: float = 1.0,\n    leverage: float = 1.0,\n    **kwargs,\n) -&gt; None:\n    \"\"\"_summary_\n\n    Args:\n        risk (float, optional): _description_. Defaults to 0.02.\n        cash (float, optional): _description_. Defaults to 10_000.\n        margin (float, optional): _description_. Defaults to 1.0.\n        leverage (float, optional): _description_. Defaults to 1.0.\n    \"\"\"\n    self._risk = risk\n    self._cash = cash\n    self._margin = margin\n    self._leverage = leverage\n    self._config = kwargs\n\n    self._equities = dict()\n    self._do_equity_snapshot = True  # Snapshot balance\n</code></pre>"},{"location":"reference/account/account/#lettrade.account.account.Account.pl","title":"pl","text":"<pre><code>pl(size, entry_price: float, exit_price=None)\n</code></pre> <p>Estimate temporary profit and loss</p> Source code in <code>lettrade/account/account.py</code> <pre><code>def pl(self, size, entry_price: float, exit_price=None):\n    \"\"\"Estimate temporary profit and loss\"\"\"\n    if exit_price is None:\n        exit_price = self._exchange.data.l.open[0]\n\n    return size * (exit_price - entry_price)\n</code></pre>"},{"location":"reference/account/account/#lettrade.account.account.Account.risk","title":"risk","text":"<pre><code>risk(side: OrderSide, size: float, **kwargs) -&gt; float\n</code></pre> <p>Risk calculation</p> Source code in <code>lettrade/account/account.py</code> <pre><code>def risk(self, side: \"OrderSide\", size: float, **kwargs) -&gt; float:\n    \"\"\"\n    Risk calculation\n    \"\"\"\n    if size is None:\n        return side * abs(self._risk)\n    return side * abs(size)\n</code></pre>"},{"location":"reference/base/","title":"Index","text":""},{"location":"reference/base/#lettrade.base","title":"base","text":""},{"location":"reference/base/error/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> error","text":""},{"location":"reference/base/error/#lettrade.base.error","title":"error","text":""},{"location":"reference/base/flag/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> flag","text":""},{"location":"reference/base/flag/#lettrade.base.flag","title":"flag","text":""},{"location":"reference/brain/","title":"Index","text":""},{"location":"reference/brain/#lettrade.brain","title":"brain","text":""},{"location":"reference/brain/brain/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> brain","text":""},{"location":"reference/brain/brain/#lettrade.brain.brain","title":"brain","text":""},{"location":"reference/brain/brain/#lettrade.brain.brain.Brain","title":"Brain","text":"<pre><code>Brain(\n    strategy: Strategy,\n    exchange: Exchange,\n    feeder: DataFeeder,\n    commander: Commander,\n    **kwargs\n)\n</code></pre> <p>Brain of bot</p> <p>Parameters:</p> <ul> <li> <code>strategy</code>               (<code>Strategy</code>)           \u2013            <p>description</p> </li> <li> <code>exchange</code>               (<code>Exchange</code>)           \u2013            <p>description</p> </li> <li> <code>feeder</code>               (<code>DataFeeder</code>)           \u2013            <p>description</p> </li> <li> <code>commander</code>               (<code>Commander</code>)           \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/brain/brain.py</code> <pre><code>def __init__(\n    self,\n    strategy: Strategy,\n    exchange: Exchange,\n    feeder: DataFeeder,\n    commander: Commander,\n    **kwargs,\n) -&gt; None:\n    \"\"\"_summary_\n\n    Args:\n        strategy (Strategy): _description_\n        exchange (Exchange): _description_\n        feeder (DataFeeder): _description_\n        commander (Commander): _description_\n    \"\"\"\n    self.strategy = strategy\n    self.exchange = exchange\n    self.feeder = feeder\n    self.commander = commander\n\n    # self.datas = self.feeder.datas\n    self.data = self.feeder.data\n</code></pre>"},{"location":"reference/brain/brain/#lettrade.brain.brain.Brain.on_execute","title":"on_execute","text":"<pre><code>on_execute(execute: Execute)\n</code></pre> <p>Receive new <code>Execution</code> event and send to <code>Strategy</code></p> Source code in <code>lettrade/brain/brain.py</code> <pre><code>def on_execute(self, execute: Execute):\n    \"\"\"Receive new `Execution` event and send to `Strategy`\"\"\"\n    self.on_transaction(execute)\n    self.strategy.on_execute(execute)\n</code></pre>"},{"location":"reference/brain/brain/#lettrade.brain.brain.Brain.on_notify","title":"on_notify","text":"<pre><code>on_notify(*args, **kwargs)\n</code></pre> <p>Receive new notify and send to Strategy</p> Source code in <code>lettrade/brain/brain.py</code> <pre><code>def on_notify(self, *args, **kwargs):\n    \"\"\"Receive new notify and send to Strategy\"\"\"\n    self.strategy.on_notify(*args, **kwargs)\n</code></pre>"},{"location":"reference/brain/brain/#lettrade.brain.brain.Brain.on_order","title":"on_order","text":"<pre><code>on_order(order: Order)\n</code></pre> <p>Receive new <code>Order</code> event and send to <code>Strategy</code></p> Source code in <code>lettrade/brain/brain.py</code> <pre><code>def on_order(self, order: Order):\n    \"\"\"Receive new `Order` event and send to `Strategy`\"\"\"\n    self.on_transaction(order)\n    self.strategy.on_order(order)\n</code></pre>"},{"location":"reference/brain/brain/#lettrade.brain.brain.Brain.on_position","title":"on_position","text":"<pre><code>on_position(position: Position)\n</code></pre> <p>Receive new <code>Position</code> event and send to <code>Strategy</code></p> Source code in <code>lettrade/brain/brain.py</code> <pre><code>def on_position(self, position: Position):\n    \"\"\"Receive new `Position` event and send to `Strategy`\"\"\"\n    self.on_transaction(position)\n    self.strategy.on_position(position)\n</code></pre>"},{"location":"reference/brain/brain/#lettrade.brain.brain.Brain.on_trade","title":"on_trade","text":"<pre><code>on_trade(trade: Trade)\n</code></pre> <p>Receive new <code>Trade</code> event and send to <code>Strategy</code></p> Source code in <code>lettrade/brain/brain.py</code> <pre><code>def on_trade(self, trade: Trade):\n    \"\"\"Receive new `Trade` event and send to `Strategy`\"\"\"\n    self.on_transaction(trade)\n    self.strategy.on_trade(trade)\n</code></pre>"},{"location":"reference/brain/brain/#lettrade.brain.brain.Brain.on_transaction","title":"on_transaction","text":"<pre><code>on_transaction(transaction)\n</code></pre> <p>Receive new transaction event and send to <code>Strategy</code></p> Source code in <code>lettrade/brain/brain.py</code> <pre><code>def on_transaction(self, transaction):\n    \"\"\"Receive new transaction event and send to `Strategy`\"\"\"\n    if self.commander is not None:\n        # TODO: send message to commander when new transaction\n        self.commander.send_message(f\"New transaction: {str(transaction)}\")\n\n    self.strategy.on_transaction(transaction)\n</code></pre>"},{"location":"reference/brain/brain/#lettrade.brain.brain.Brain.run","title":"run","text":"<pre><code>run()\n</code></pre> <p>Run the trading bot</p> Source code in <code>lettrade/brain/brain.py</code> <pre><code>def run(self):\n    \"\"\"Run the trading bot\"\"\"\n\n    while self.feeder.alive():\n        # Load feeder next data\n        try:\n            self.feeder.next()\n            self.exchange.next()\n            self.strategy._next()\n            self.exchange.next_next()\n        except LetTradeNoMoreDataFeed:\n            break\n        except Exception as e:\n            logger.exception(\"Bot running error\", exc_info=e)\n            break\n\n    self.strategy._stop()\n</code></pre>"},{"location":"reference/brain/brain/#lettrade.brain.brain.Brain.stop","title":"stop","text":"<pre><code>stop()\n</code></pre> <p>Stop the trading bot</p> Source code in <code>lettrade/brain/brain.py</code> <pre><code>def stop(self):\n    \"\"\"Stop the trading bot\"\"\"\n    self.feeder.stop()\n    self.exchange.stop()\n</code></pre>"},{"location":"reference/calendar/","title":"Index","text":""},{"location":"reference/calendar/#lettrade.calendar","title":"calendar","text":""},{"location":"reference/calendar/calendar/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> calendar","text":""},{"location":"reference/calendar/calendar/#lettrade.calendar.calendar","title":"calendar","text":""},{"location":"reference/commander/","title":"Index","text":""},{"location":"reference/commander/#lettrade.commander","title":"commander","text":""},{"location":"reference/commander/commander/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> commander","text":""},{"location":"reference/commander/commander/#lettrade.commander.commander","title":"commander","text":""},{"location":"reference/commander/commander/#lettrade.commander.commander.Commander","title":"Commander","text":"<pre><code>Commander()\n</code></pre> <p>               Bases: <code>ABC</code></p> <p>Abstract class for strategy commander. Help to manage and report strategy real-time</p> Source code in <code>lettrade/commander/commander.py</code> <pre><code>def __init__(self) -&gt; None:\n    super().__init__()\n</code></pre>"},{"location":"reference/commander/commander/#lettrade.commander.commander.Commander.init","title":"init","text":"<pre><code>init(\n    lettrade: LetTrade,\n    brain: Brain,\n    exchange: Exchange,\n    strategy: Strategy,\n)\n</code></pre> <p>Init commander dependencies</p> <p>Parameters:</p> <ul> <li> <code>lettrade</code>               (<code>LetTrade</code>)           \u2013            <p>LetTrade object</p> </li> <li> <code>brain</code>               (<code>Brain</code>)           \u2013            <p>Brain of bot</p> </li> <li> <code>exchange</code>               (<code>Exchange</code>)           \u2013            <p>Manage bot trading</p> </li> <li> <code>strategy</code>               (<code>Strategy</code>)           \u2013            <p>Strategy of bot</p> </li> </ul> Source code in <code>lettrade/commander/commander.py</code> <pre><code>def init(\n    self,\n    lettrade: \"LetTrade\",\n    brain: \"Brain\",\n    exchange: \"Exchange\",\n    strategy: \"Strategy\",\n):\n    \"\"\"Init commander dependencies\n\n    Args:\n        lettrade (LetTrade): LetTrade object\n        brain (Brain): Brain of bot\n        exchange (Exchange): Manage bot trading\n        strategy (Strategy): Strategy of bot\n    \"\"\"\n    self.lettrade = lettrade\n    self.brain = brain\n    self.exchange = exchange\n    self.strategy = strategy\n\n    self._name = self.lettrade._name\n</code></pre>"},{"location":"reference/commander/telegram/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> telegram","text":""},{"location":"reference/commander/telegram/#lettrade.commander.telegram","title":"telegram","text":"<p>Module help LetTrade send notify and receive command from Telegram Bot</p>"},{"location":"reference/commander/telegram/#lettrade.commander.telegram--example","title":"Example","text":"Example <pre><code>import logging\nimport os\nfrom datetime import datetime\n\nimport talib.abstract as ta\nfrom dotenv import load_dotenv\n\n# import example.logger\nfrom lettrade.all import (\n    DataFeed,\n    Strategy,\n    TelegramCommander,\n    crossover,\n    crossunder,\n    let_metatrader,\n)\n\nlogger = logging.getLogger(__name__)\nload_dotenv()\n\n\nclass SmaCross(Strategy):\n    ema1_period = 9\n    ema2_period = 21\n\n    _now: datetime\n\n    def indicators(self, df: DataFeed):\n        df[\"ema1\"] = ta.EMA(df, timeperiod=self.ema1_period)\n        df[\"ema2\"] = ta.EMA(df, timeperiod=self.ema2_period)\n\n        df[\"signal_ema_crossover\"] = crossover(df.ema1, df.ema2)\n        df[\"signal_ema_crossunder\"] = crossunder(df.ema1, df.ema2)\n        return df\n\n    def start(self, df: DataFeed):\n        self._now = df.now\n\n    def next(self, df: DataFeed):\n        if self.is_live:\n            # Filter start of new bar\n            if self._now == df.now:\n                return\n            self._now = df.now\n\n        if len(self.orders) &gt; 0 or len(self.trades) &gt; 0:\n            return\n\n        if df.l[\"signal_ema_crossover\"][-1]:\n            price = self.data.l[\"close\"][-1]\n            self.buy(size=0.1, sl=price - 0.01, tp=price + 0.01)\n        elif df.l[\"signal_ema_crossunder\"][-1]:\n            price = self.data.l[\"close\"][-1]\n            self.sell(size=0.1, sl=price + 0.01, tp=price - 0.01)\n\n    def stop(self, df: DataFeed):\n        print(df.tail())\n        print(self.orders)\n\n    def plot(self, df: DataFeed):\n        return dict(\n            scatters=[\n                dict(\n                    x=df.index,\n                    y=df[\"ema1\"],\n                    line=dict(color=\"blue\", width=1),\n                    name=\"ema1\",\n                ),\n                dict(\n                    x=df.index,\n                    y=df[\"ema2\"],\n                    line=dict(color=\"green\", width=1),\n                    name=\"ema2\",\n                ),\n            ]\n        )\n\n\nif __name__ == \"__main__\":\n    lt = let_metatrader(\n        strategy=SmaCross,\n        datas={(\"EURGBP\", \"5m\")},\n        login=os.getenv(\"MT5_LOGIN\"),\n        password=os.getenv(\"MT5_PASSWORD\"),\n        server=os.getenv(\"MT5_SERVER\"),\n        commander=TelegramCommander(\n            token=os.getenv(\"TELEGRAM_TOKEN\"),\n            chat_id=os.getenv(\"TELEGRAM_CHAT_ID\"),\n        ),\n    )\n\n    lt.run()\n</code></pre>"},{"location":"reference/commander/telegram/#lettrade.commander.telegram.TelegramAPI","title":"TelegramAPI","text":"<pre><code>TelegramAPI(token: str, chat_id: int, *args, **kwargs)\n</code></pre> <p>Singleton object communicate across multipprocessing</p> Source code in <code>lettrade/commander/telegram.py</code> <pre><code>def __init__(self, token: str, chat_id: int, *args, **kwargs) -&gt; None:\n    self._token: str = token\n    self._chat_id: int = int(chat_id)\n    self._bots_queue = dict()\n    self._bot_selected = None\n</code></pre>"},{"location":"reference/commander/telegram/#lettrade.commander.telegram.TelegramAPI.cleanup","title":"cleanup","text":"<pre><code>cleanup() -&gt; None\n</code></pre> <p>Stops all running telegram threads.</p> Source code in <code>lettrade/commander/telegram.py</code> <pre><code>def cleanup(self) -&gt; None:\n    \"\"\"Stops all running telegram threads.\"\"\"\n    # This can take up to `timeout` from the call to `start_polling`.\n    asyncio.run_coroutine_threadsafe(self._cleanup_telegram(), self._loop)\n    self._thread.join()\n</code></pre>"},{"location":"reference/commander/telegram/#lettrade.commander.telegram.TelegramAPI.send_message","title":"send_message","text":"<pre><code>send_message(msg: str, pname: str, **kwargs) -&gt; None\n</code></pre> <p>Send message to Telegram Bot</p> <p>Parameters:</p> <ul> <li> <code>msg</code>               (<code>str</code>)           \u2013            <p>Message</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>_type_</code> (              <code>None</code> )          \u2013            <p><code>None</code></p> </li> </ul> Source code in <code>lettrade/commander/telegram.py</code> <pre><code>def send_message(self, msg: str, pname: str, **kwargs) -&gt; None:\n    \"\"\"Send message to Telegram Bot\n\n    Args:\n        msg (str): Message\n\n    Returns:\n        _type_: `None`\n    \"\"\"\n    msg = f\"*[Process: {pname}]*\\n\\n{msg}\"\n    asyncio.run_coroutine_threadsafe(self._send_msg(msg, **kwargs), self._loop)\n</code></pre>"},{"location":"reference/commander/telegram/#lettrade.commander.telegram.TelegramAPI.start","title":"start","text":"<pre><code>start(pname: str, action_queue: Queue)\n</code></pre> <p>Start</p> Source code in <code>lettrade/commander/telegram.py</code> <pre><code>def start(self, pname: str, action_queue: Queue):\n    \"\"\"Start\"\"\"\n    if pname in self._bots_queue:\n        logger.warning(\"Process name %s override existed action queue\", pname)\n    self._bots_queue[pname] = action_queue\n\n    logger.info(\"New join process: %s\", pname)\n\n    # TODO: Lock for safe multipleprocessing\n    if hasattr(self, \"_keyboard\"):\n        return\n\n    self._init_keyboard()\n    self._start_thread()\n</code></pre>"},{"location":"reference/commander/telegram/#lettrade.commander.telegram.TelegramCommander","title":"TelegramCommander","text":"<pre><code>TelegramCommander(\n    token: str,\n    chat_id: int,\n    api: Optional[TelegramAPI] = None,\n    *args,\n    **kwargs\n)\n</code></pre> <p>               Bases: <code>Commander</code></p> <p>Send notify and receive command from Telegram Bot</p> <p>Parameters:</p> <ul> <li> <code>token</code>               (<code>str</code>)           \u2013            <p>Telegram Bot token</p> </li> <li> <code>chat_id</code>               (<code>int</code>)           \u2013            <p>Telegram chat_id</p> </li> </ul> Source code in <code>lettrade/commander/telegram.py</code> <pre><code>def __init__(\n    self,\n    token: str,\n    chat_id: int,\n    api: Optional[TelegramAPI] = None,\n    *args,\n    **kwargs,\n) -&gt; None:\n    \"\"\"_summary_\n\n    Args:\n        token (str): Telegram Bot token\n        chat_id (int): Telegram chat_id\n    \"\"\"\n    super().__init__(*args, **kwargs)\n    self._api = api or TelegramAPI(token=token, chat_id=chat_id)\n    self._is_running = True\n</code></pre>"},{"location":"reference/commander/telegram/#lettrade.commander.telegram.TelegramCommander.init","title":"init","text":"<pre><code>init(\n    lettrade: LetTrade,\n    brain: Brain,\n    exchange: Exchange,\n    strategy: Strategy,\n)\n</code></pre> <p>Init commander dependencies</p> <p>Parameters:</p> <ul> <li> <code>lettrade</code>               (<code>LetTrade</code>)           \u2013            <p>LetTrade object</p> </li> <li> <code>brain</code>               (<code>Brain</code>)           \u2013            <p>Brain of bot</p> </li> <li> <code>exchange</code>               (<code>Exchange</code>)           \u2013            <p>Manage bot trading</p> </li> <li> <code>strategy</code>               (<code>Strategy</code>)           \u2013            <p>Strategy of bot</p> </li> </ul> Source code in <code>lettrade/commander/commander.py</code> <pre><code>def init(\n    self,\n    lettrade: \"LetTrade\",\n    brain: \"Brain\",\n    exchange: \"Exchange\",\n    strategy: \"Strategy\",\n):\n    \"\"\"Init commander dependencies\n\n    Args:\n        lettrade (LetTrade): LetTrade object\n        brain (Brain): Brain of bot\n        exchange (Exchange): Manage bot trading\n        strategy (Strategy): Strategy of bot\n    \"\"\"\n    self.lettrade = lettrade\n    self.brain = brain\n    self.exchange = exchange\n    self.strategy = strategy\n\n    self._name = self.lettrade._name\n</code></pre>"},{"location":"reference/commander/telegram/#lettrade.commander.telegram.TelegramCommander.start","title":"start","text":"<pre><code>start()\n</code></pre> <p>Start</p> Source code in <code>lettrade/commander/telegram.py</code> <pre><code>def start(self):\n    \"\"\"Start\"\"\"\n    logger.info(\"TelegramCommander start %s\", self._name)\n    q = self._t_action()\n    self._api.start(pname=self._name, action_queue=q)\n</code></pre>"},{"location":"reference/commander/telegram/#lettrade.commander.telegram.TelegramCommander.stop","title":"stop","text":"<pre><code>stop()\n</code></pre> <p>Stop</p> Source code in <code>lettrade/commander/telegram.py</code> <pre><code>def stop(self):\n    \"\"\"Stop\"\"\"\n    logger.info(\"TelegramCommander stop %s\", self._name)\n    self._api.cleanup()\n    self._is_running = False\n</code></pre>"},{"location":"reference/commander/telegram/#lettrade.commander.telegram.authorized_only","title":"authorized_only","text":"<pre><code>authorized_only(\n    command_handler: Callable[\n        ..., Coroutine[Any, Any, None]\n    ]\n)\n</code></pre> <p>Decorator to check if the message comes from the correct chat_id</p> <p>Parameters:</p> <ul> <li> <code>command_handler</code>               (<code>Callable[..., Coroutine[Any, Any, None]]</code>)           \u2013            <p>Telegram CommandHandler</p> </li> </ul> Source code in <code>lettrade/commander/telegram.py</code> <pre><code>def authorized_only(command_handler: Callable[..., Coroutine[Any, Any, None]]):\n    \"\"\"Decorator to check if the message comes from the correct chat_id\n\n    Args:\n        command_handler (Callable[..., Coroutine[Any, Any, None]]): Telegram CommandHandler\n    \"\"\"\n\n    @wraps(command_handler)\n    async def wrapper(self: \"TelegramCommander\", *args, **kwargs):\n        \"\"\"Decorator logic\"\"\"\n        update = kwargs.get(\"update\") or args[0]\n\n        # Reject unauthorized messages\n        if update.callback_query:\n            cchat_id = int(update.callback_query.message.chat.id)\n        else:\n            cchat_id = int(update.message.chat_id)\n\n        if cchat_id != self._chat_id:\n            logger.info(f\"Rejected unauthorized message from: {update.message.chat_id}\")\n            return wrapper\n\n        logger.debug(\n            \"Executing handler: %s for chat_id: %s\",\n            command_handler.__name__,\n            self._chat_id,\n        )\n        try:\n            return await command_handler(self, *args, **kwargs)\n        except Exception as e:\n            await self._send_msg(str(e))\n            # except BaseException:\n            logger.exception(\"Exception occurred within Telegram module\", exc_info=e)\n\n    return wrapper\n</code></pre>"},{"location":"reference/data/","title":"Index","text":""},{"location":"reference/data/#lettrade.data","title":"data","text":""},{"location":"reference/data/data/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> data","text":""},{"location":"reference/data/data/#lettrade.data.data","title":"data","text":""},{"location":"reference/data/data/#lettrade.data.data.DataFeed","title":"DataFeed","text":"<pre><code>DataFeed(\n    *args,\n    name: str,\n    timeframe: TimeFrame,\n    meta: Optional[dict] = None,\n    **kwargs\n)\n</code></pre> <p>               Bases: <code>DataFrame</code></p> <p>Data for Strategy. A implement of pandas.DataFrame</p> <p>Parameters:</p> <ul> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>description</p> </li> <li> <code>timeframe</code>               (<code>TimeFrame</code>)           \u2013            <p>description</p> </li> <li> <code>meta</code>               (<code>Optional[dict]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/data/data.py</code> <pre><code>def __init__(\n    self,\n    *args,\n    name: str,\n    timeframe: TimeFrame,\n    meta: Optional[dict] = None,\n    **kwargs,\n) -&gt; None:\n    \"\"\"_summary_\n\n    Args:\n        name (str): _description_\n        timeframe (TimeFrame): _description_\n        meta (Optional[dict], optional): _description_. Defaults to None.\n\n    Raises:\n        RuntimeError: _description_\n    \"\"\"\n    # Validate\n    if not _data_name_pattern.match(name):\n        raise RuntimeError(\n            f\"Bot name {name} is not valid format {_data_name_pattern}\"\n        )\n\n    # Init\n    super().__init__(*args, **kwargs)\n    self._init_index()\n\n    # Metadata\n    if not meta:\n        meta = dict()\n    meta[\"name\"] = name\n    meta[\"timeframe\"] = TimeFrame(timeframe)\n    self.attrs = {\"lt_meta\": meta}\n\n    # LetWrapper\n    object.__setattr__(self, \"l\", LetDataFeedWrapper(self))\n</code></pre>"},{"location":"reference/data/feeder/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> feeder","text":""},{"location":"reference/data/feeder/#lettrade.data.feeder","title":"feeder","text":""},{"location":"reference/data/feeder/#lettrade.data.feeder.DataFeeder","title":"DataFeeder","text":""},{"location":"reference/data/feeder/#lettrade.data.feeder.DataFeeder.is_continous","title":"is_continous  <code>property</code>","text":"<pre><code>is_continous\n</code></pre> <p>Flag check is realtime continous datafeeder</p>"},{"location":"reference/data/replay/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> replay","text":""},{"location":"reference/data/replay/#lettrade.data.replay","title":"replay","text":""},{"location":"reference/data/resample/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> resample","text":""},{"location":"reference/data/resample/#lettrade.data.resample","title":"resample","text":""},{"location":"reference/data/timeframe/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> timeframe","text":""},{"location":"reference/data/timeframe/#lettrade.data.timeframe","title":"timeframe","text":""},{"location":"reference/data/wrapper/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> wrapper","text":""},{"location":"reference/data/wrapper/#lettrade.data.wrapper","title":"wrapper","text":""},{"location":"reference/data/extra/","title":"Index","text":""},{"location":"reference/data/extra/#lettrade.data.extra","title":"extra","text":""},{"location":"reference/data/extra/csv/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> csv","text":""},{"location":"reference/data/extra/csv/#lettrade.data.extra.csv","title":"csv","text":""},{"location":"reference/exchange/","title":"Index","text":""},{"location":"reference/exchange/#lettrade.exchange","title":"exchange","text":"<p>Exchange implements</p>"},{"location":"reference/exchange/#lettrade.exchange--stable-exchanges","title":"Stable Exchanges","text":"<ul> <li>BackTest: Backtesting exchange</li> <li>MetaTrader: MetaTrader 5 live data and trading</li> <li>CCXT: CCXT CryptoCurrency live data and trading</li> </ul>"},{"location":"reference/exchange/base/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> base","text":""},{"location":"reference/exchange/base/#lettrade.exchange.base","title":"base","text":""},{"location":"reference/exchange/base/#lettrade.exchange.base.BaseTransaction","title":"BaseTransaction","text":"<pre><code>BaseTransaction(\n    id: str, exchange: Exchange, data: DataFeed, size: float\n)\n</code></pre> Source code in <code>lettrade/exchange/base.py</code> <pre><code>def __init__(\n    self,\n    id: str,\n    exchange: \"Exchange\",\n    data: \"DataFeed\",\n    size: float,\n) -&gt; None:\n    self.id: str = id\n    self.exchange: \"Exchange\" = exchange\n    self.data: \"DataFeed\" = data\n    self.size: float = size\n</code></pre>"},{"location":"reference/exchange/base/#lettrade.exchange.base.BaseTransaction.is_long","title":"is_long  <code>property</code>","text":"<pre><code>is_long: bool\n</code></pre> <p>True if side is long (size is positive).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True/False</p> </li> </ul>"},{"location":"reference/exchange/base/#lettrade.exchange.base.BaseTransaction.is_short","title":"is_short  <code>property</code>","text":"<pre><code>is_short: bool\n</code></pre> <p>True if side is short (size is negative).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/error/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> error","text":""},{"location":"reference/exchange/error/#lettrade.exchange.error","title":"error","text":""},{"location":"reference/exchange/exchange/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> exchange","text":""},{"location":"reference/exchange/exchange/#lettrade.exchange.exchange","title":"exchange","text":""},{"location":"reference/exchange/exchange/#lettrade.exchange.exchange.Exchange","title":"Exchange","text":"<pre><code>Exchange(**kwargs)\n</code></pre> <p>Base Exchange class to handle trading</p> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def __init__(self, **kwargs):\n    self._config = kwargs\n\n    self.executes = dict()\n    self.orders = dict()\n    self.history_orders = dict()\n    self.trades = dict()\n    self.history_trades = dict()\n    self.positions = dict()\n\n    self._state = ExchangeState.Init\n</code></pre>"},{"location":"reference/exchange/exchange/#lettrade.exchange.exchange.Exchange.data","title":"data  <code>instance-attribute</code>","text":"<pre><code>data: DataFeed\n</code></pre> <p>main DataFeed</p>"},{"location":"reference/exchange/exchange/#lettrade.exchange.exchange.Exchange.datas","title":"datas  <code>instance-attribute</code>","text":"<pre><code>datas: list[DataFeed]\n</code></pre> <p>List of all available DataFeed</p>"},{"location":"reference/exchange/exchange/#lettrade.exchange.exchange.Exchange.executes","title":"executes  <code>instance-attribute</code>","text":"<pre><code>executes: dict[str, Execute] = dict()\n</code></pre> <p>Execute dict by <code>Execute.id</code> key</p>"},{"location":"reference/exchange/exchange/#lettrade.exchange.exchange.Exchange.history_orders","title":"history_orders  <code>instance-attribute</code>","text":"<pre><code>history_orders: dict[str, Order] = dict()\n</code></pre> <p>History Order dict by <code>Order.id</code> key</p>"},{"location":"reference/exchange/exchange/#lettrade.exchange.exchange.Exchange.history_trades","title":"history_trades  <code>instance-attribute</code>","text":"<pre><code>history_trades: dict[str, Trade] = dict()\n</code></pre> <p>History Order dict by <code>Order.id</code> key</p>"},{"location":"reference/exchange/exchange/#lettrade.exchange.exchange.Exchange.orders","title":"orders  <code>instance-attribute</code>","text":"<pre><code>orders: dict[str, Order] = dict()\n</code></pre> <p>Available Order dict by <code>Order.id</code> key</p>"},{"location":"reference/exchange/exchange/#lettrade.exchange.exchange.Exchange.positions","title":"positions  <code>instance-attribute</code>","text":"<pre><code>positions: dict[str, Position] = dict()\n</code></pre> <p>Available Position dict by <code>Position.id</code> key</p>"},{"location":"reference/exchange/exchange/#lettrade.exchange.exchange.Exchange.trades","title":"trades  <code>instance-attribute</code>","text":"<pre><code>trades: dict[str, Trade] = dict()\n</code></pre> <p>Available Trade dict by <code>Trade.id</code> key</p>"},{"location":"reference/exchange/exchange/#lettrade.exchange.exchange.Exchange.init","title":"init","text":"<pre><code>init(\n    brain: Brain,\n    feeder: DataFeeder,\n    account: Account,\n    commander: Commander,\n) -&gt; None\n</code></pre> <p>Init Exchange dependencies. Set data/datas from feeder. Set state to <code>ExchangeState.Start</code>.</p> <p>Parameters:</p> <ul> <li> <code>brain</code>               (<code>Brain</code>)           \u2013            <p>description</p> </li> <li> <code>feeder</code>               (<code>DataFeeder</code>)           \u2013            <p>description</p> </li> <li> <code>account</code>               (<code>Account</code>)           \u2013            <p>description</p> </li> <li> <code>commander</code>               (<code>Commander</code>)           \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def init(\n    self,\n    brain: \"Brain\",\n    feeder: DataFeeder,\n    account: Account,\n    commander: Commander,\n) -&gt; None:\n    \"\"\"Init Exchange dependencies.\n    Set data/datas from feeder.\n    Set state to `ExchangeState.Start`.\n\n    Args:\n        brain (Brain): _description_\n        feeder (DataFeeder): _description_\n        account (Account): _description_\n        commander (Commander): _description_\n    \"\"\"\n    self._brain = brain\n    self._feeder = feeder\n    self._account = account\n    self._commander = commander\n\n    self.data = self._feeder.data\n    self.datas = self._feeder.datas\n\n    self._account.init(exchange=self)\n\n    self._state = ExchangeState.Start\n</code></pre>"},{"location":"reference/exchange/exchange/#lettrade.exchange.exchange.Exchange.new_order","title":"new_order  <code>abstractmethod</code>","text":"<pre><code>new_order(\n    size: float,\n    limit: Optional[float] = None,\n    stop: Optional[float] = None,\n    sl: Optional[float] = None,\n    tp: Optional[float] = None,\n    tag: Optional[object] = None,\n    *args,\n    **kwargs\n) -&gt; OrderResult\n</code></pre> <p>Place new <code>Order</code></p> <p>Parameters:</p> <ul> <li> <code>size</code>               (<code>float</code>)           \u2013            <p>description</p> </li> <li> <code>limit</code>               (<code>Optional[float]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>stop</code>               (<code>Optional[float]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>sl</code>               (<code>Optional[float]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>tp</code>               (<code>Optional[float]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>tag</code>               (<code>Optional[object]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>OrderResult</code> (              <code>OrderResult</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>@abstractmethod\ndef new_order(\n    self,\n    size: float,\n    limit: Optional[float] = None,\n    stop: Optional[float] = None,\n    sl: Optional[float] = None,\n    tp: Optional[float] = None,\n    tag: Optional[object] = None,\n    *args,\n    **kwargs,\n) -&gt; OrderResult:\n    \"\"\"Place new `Order`\n\n    Args:\n        size (float): _description_\n        limit (Optional[float], optional): _description_. Defaults to None.\n        stop (Optional[float], optional): _description_. Defaults to None.\n        sl (Optional[float], optional): _description_. Defaults to None.\n        tp (Optional[float], optional): _description_. Defaults to None.\n        tag (Optional[object], optional): _description_. Defaults to None.\n\n    Returns:\n        OrderResult: _description_\n    \"\"\"\n    raise NotImplementedError(\"Exchange.new_order not implement yet\")\n</code></pre>"},{"location":"reference/exchange/exchange/#lettrade.exchange.exchange.Exchange.next","title":"next","text":"<pre><code>next()\n</code></pre> <p>Call after data feeded and before strategy.next()</p> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def next(self):\n    \"Call after data feeded and before strategy.next()\"\n</code></pre>"},{"location":"reference/exchange/exchange/#lettrade.exchange.exchange.Exchange.next_next","title":"next_next","text":"<pre><code>next_next()\n</code></pre> <p>Call after strategy.next()</p> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def next_next(self):\n    \"Call after strategy.next()\"\n    self._account._equity_snapshot()\n</code></pre>"},{"location":"reference/exchange/exchange/#lettrade.exchange.exchange.Exchange.on_execute","title":"on_execute","text":"<pre><code>on_execute(\n    execute: Execute,\n    broadcast: Optional[bool] = True,\n    **kwargs\n) -&gt; None\n</code></pre> <p>Receive Execute event from exchange then store and notify Brain</p> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def on_execute(\n    self,\n    execute: Execute,\n    broadcast: Optional[bool] = True,\n    **kwargs,\n) -&gt; None:\n    \"\"\"\n    Receive Execute event from exchange then store and notify Brain\n    \"\"\"\n    if not isinstance(execute, Execute):\n        raise RuntimeError(f\"{execute} is not instance of type Execute\")\n\n    if execute.id in self.executes:\n        # Merge to keep Execute handler for strategy using\n        # when strategy want to store Execute object\n        # and object will be automatic update directly\n        self.executes[execute.id].merge(execute)\n        execute = self.executes[execute.id]\n    else:\n        self.executes[execute.id] = execute\n\n    if self._state != ExchangeState.Run:\n        return\n\n    if broadcast:\n        self._brain.on_execute(execute)\n</code></pre>"},{"location":"reference/exchange/exchange/#lettrade.exchange.exchange.Exchange.on_order","title":"on_order","text":"<pre><code>on_order(\n    order: Order, broadcast: Optional[bool] = True, **kwargs\n) -&gt; None\n</code></pre> <p>Receive Order event from exchange then store and notify Brain</p> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def on_order(\n    self,\n    order: Order,\n    broadcast: Optional[bool] = True,\n    **kwargs,\n) -&gt; None:\n    \"\"\"\n    Receive Order event from exchange then store and notify Brain\n    \"\"\"\n    if not isinstance(order, Order):\n        raise RuntimeError(f\"{order} is not instance of type Order\")\n\n    if order.state in [OrderState.Executed, OrderState.Canceled]:\n        self.history_orders[order.id] = order\n        if order.id in self.orders:\n            del self.orders[order.id]\n    else:\n        if order.id in self.history_orders:\n            raise RuntimeError(f\"Order {order.id} closed\")\n\n        if order.id in self.orders:\n            # Merge to keep Order handler for strategy using\n            # when strategy want to store Order object\n            # and object will be automatic update directly\n            self.orders[order.id].merge(order)\n            order = self.orders[order.id]\n        else:\n            self.orders[order.id] = order\n\n    if self._state != ExchangeState.Run:\n        return\n\n    if broadcast:\n        self._brain.on_order(order)\n</code></pre>"},{"location":"reference/exchange/exchange/#lettrade.exchange.exchange.Exchange.on_position","title":"on_position","text":"<pre><code>on_position(\n    position: Position,\n    broadcast: Optional[bool] = True,\n    *args,\n    **kwargs\n) -&gt; None\n</code></pre> <p>Receive Position event from exchange then store and notify Brain</p> <p>Parameters:</p> <ul> <li> <code>position</code>               (<code>Position</code>)           \u2013            <p>description</p> </li> <li> <code>broadcast</code>               (<code>Optional[bool]</code>, default:                   <code>True</code> )           \u2013            <p>description. Defaults to True.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>check <code>Position</code> instance</p> </li> </ul> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def on_position(\n    self,\n    position: Position,\n    broadcast: Optional[bool] = True,\n    *args,\n    **kwargs,\n) -&gt; None:\n    \"\"\"Receive Position event from exchange then store and notify Brain\n\n\n    Args:\n        position (Position): _description_\n        broadcast (Optional[bool], optional): _description_. Defaults to True.\n\n    Raises:\n        RuntimeError: check `Position` instance\n    \"\"\"\n    if not isinstance(position, Position):\n        raise RuntimeError(f\"{position} is not instance of type Position\")\n\n    if position.id in self.positions:\n        # Merge to keep Position handler for strategy using\n        # when strategy want to store Position object\n        # and object will be automatic update directly\n        self.positions[position.id].merge(position)\n    else:\n        self.positions[position.id] = position\n\n    if self._state != ExchangeState.Run:\n        return\n\n    if broadcast:\n        self._brain.on_position(position)\n</code></pre>"},{"location":"reference/exchange/exchange/#lettrade.exchange.exchange.Exchange.on_trade","title":"on_trade","text":"<pre><code>on_trade(\n    trade: Trade,\n    broadcast: Optional[bool] = True,\n    *args,\n    **kwargs\n) -&gt; None\n</code></pre> <p>Receive Trade event from exchange then store and notify Brain</p> <p>Parameters:</p> <ul> <li> <code>trade</code>               (<code>Trade</code>)           \u2013            <p>new comming <code>Trade</code></p> </li> <li> <code>broadcast</code>               (<code>Optional[bool]</code>, default:                   <code>True</code> )           \u2013            <p>Flag notify for Brain. Defaults to True.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>validat <code>Trade</code> instance</p> </li> </ul> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def on_trade(\n    self,\n    trade: Trade,\n    broadcast: Optional[bool] = True,\n    *args,\n    **kwargs,\n) -&gt; None:\n    \"\"\"Receive Trade event from exchange then store and notify Brain\n\n    Args:\n        trade (Trade): new comming `Trade`\n        broadcast (Optional[bool], optional): Flag notify for Brain. Defaults to True.\n\n    Raises:\n        RuntimeError: validat `Trade` instance\n    \"\"\"\n    if not isinstance(trade, Trade):\n        raise RuntimeError(f\"{trade} is not instance of type Trade\")\n\n    if trade.state == TradeState.Exit:\n        self.history_trades[trade.id] = trade\n        if trade.id in self.trades:\n            del self.trades[trade.id]\n\n        self._account._on_trade_exit(trade)\n    else:\n        if trade.id in self.history_trades:\n            raise RuntimeError(f\"Order {trade.id} closed\")\n        if trade.id in self.trades:\n            # Merge to keep Trade handler for strategy using\n            # when strategy want to store Trade object\n            # and object will be automatic update directly\n            self.trades[trade.id].merge(trade)\n            trade = self.trades[trade.id]\n        else:\n            self.trades[trade.id] = trade\n\n    if self._state != ExchangeState.Run:\n        return\n\n    if broadcast:\n        self._brain.on_trade(trade)\n</code></pre>"},{"location":"reference/exchange/exchange/#lettrade.exchange.exchange.Exchange.start","title":"start","text":"<pre><code>start() -&gt; None\n</code></pre> <p>Start of Exchange by: - Start account. - Set state to <code>ExchangeState.Run</code> ready for next().</p> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def start(self) -&gt; None:\n    \"\"\"Start of Exchange by:\n    - Start account.\n    - Set state to `ExchangeState.Run` ready for next().\n    \"\"\"\n    self._account.start()\n    self._state = ExchangeState.Run\n</code></pre>"},{"location":"reference/exchange/exchange/#lettrade.exchange.exchange.Exchange.stop","title":"stop","text":"<pre><code>stop() -&gt; None\n</code></pre> <p>Stop Exchange</p> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def stop(self) -&gt; None:\n    \"\"\"Stop Exchange\"\"\"\n    self._state = ExchangeState.Stop\n    self._account.stop()\n</code></pre>"},{"location":"reference/exchange/execute/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> execute","text":""},{"location":"reference/exchange/execute/#lettrade.exchange.execute","title":"execute","text":""},{"location":"reference/exchange/execute/#lettrade.exchange.execute.Execute","title":"Execute","text":"<pre><code>Execute(\n    id: str,\n    exchange: Exchange,\n    data: DataFeed,\n    size: float,\n    price: float,\n    at: float,\n    order_id: Optional[str] = None,\n    order: Optional[Order] = None,\n    trade_id: Optional[str] = None,\n    trade: Optional[Trade] = None,\n)\n</code></pre> <p>               Bases: <code>BaseTransaction</code></p> <p>Place new orders through <code>Strategy.buy()</code> and <code>Strategy.sell()</code>. Query existing orders through <code>Strategy.orders</code>.</p> <p>When an order is executed or filled, it results in a <code>Trade</code>.</p> <p>If you wish to modify aspects of a placed but not yet filled order, cancel it and place a new one instead.</p> <p>All placed orders are Good 'Til Canceled.</p> Source code in <code>lettrade/exchange/execute.py</code> <pre><code>def __init__(\n    self,\n    id: str,\n    exchange: \"Exchange\",\n    data: \"DataFeed\",\n    size: float,\n    price: float,\n    at: float,\n    order_id: Optional[str] = None,\n    order: Optional[\"Order\"] = None,\n    trade_id: Optional[str] = None,\n    trade: Optional[\"Trade\"] = None,\n):\n    super().__init__(\n        id=id,\n        exchange=exchange,\n        data=data,\n        size=size,\n    )\n    self.order_id = order_id\n    self.order: \"Order\" = order\n    self.trade_id = trade_id\n    self.trade: \"Trade\" = trade\n    self.price = price\n    self.at = at\n</code></pre>"},{"location":"reference/exchange/execute/#lettrade.exchange.execute.Execute.is_long","title":"is_long  <code>property</code>","text":"<pre><code>is_long: bool\n</code></pre> <p>True if side is long (size is positive).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True/False</p> </li> </ul>"},{"location":"reference/exchange/execute/#lettrade.exchange.execute.Execute.is_short","title":"is_short  <code>property</code>","text":"<pre><code>is_short: bool\n</code></pre> <p>True if side is short (size is negative).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/execute/#lettrade.exchange.execute.Execute.merge","title":"merge","text":"<pre><code>merge(other: Execute)\n</code></pre> <p>Merge to keep object handler but not overwrite for Strategy using when Strategy want to store object and object will be automatic update directly</p> Source code in <code>lettrade/exchange/execute.py</code> <pre><code>def merge(self, other: \"Execute\"):\n    \"\"\"\n    Merge to keep object handler but not overwrite for Strategy using when Strategy want to store object and object will be automatic update directly\n    \"\"\"\n    if other is self:\n        return\n\n    if self.id != other.id:\n        raise RuntimeError(f\"Merge difference id {self.id} != {other.id} execute\")\n\n    self.price = other.price\n    self.size = other.size\n\n    if other.at:\n        self.at = other.at\n    if other.order_id:\n        self.order_id = other.order_id\n    if other.order:\n        self.order = other.order\n    if other.trade_id:\n        self.trade_id = other.trade_id\n    if other.trade:\n        self.trade = other.trade\n</code></pre>"},{"location":"reference/exchange/order/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> order","text":""},{"location":"reference/exchange/order/#lettrade.exchange.order","title":"order","text":""},{"location":"reference/exchange/order/#lettrade.exchange.order.Order","title":"Order","text":"<pre><code>Order(\n    id: str,\n    exchange: Exchange,\n    data: DataFeed,\n    size: float,\n    state: OrderState = OrderState.Pending,\n    type: OrderType = OrderType.Market,\n    limit_price: Optional[float] = None,\n    stop_price: Optional[float] = None,\n    sl_price: Optional[float] = None,\n    tp_price: Optional[float] = None,\n    trade: Optional[Trade] = None,\n    tag: Optional[object] = None,\n    open_at: Optional[Timestamp] = None,\n    open_price: Optional[float] = None,\n)\n</code></pre> <p>               Bases: <code>BaseTransaction</code></p> Source code in <code>lettrade/exchange/order.py</code> <pre><code>def __init__(\n    self,\n    id: str,\n    exchange: \"Exchange\",\n    data: \"DataFeed\",\n    size: float,\n    state: OrderState = OrderState.Pending,\n    type: OrderType = OrderType.Market,\n    limit_price: Optional[float] = None,\n    stop_price: Optional[float] = None,\n    sl_price: Optional[float] = None,\n    tp_price: Optional[float] = None,\n    trade: Optional[\"Trade\"] = None,\n    tag: Optional[object] = None,\n    open_at: Optional[pd.Timestamp] = None,\n    open_price: Optional[float] = None,\n):\n    super().__init__(\n        id=id,\n        exchange=exchange,\n        data=data,\n        size=size,\n    )\n\n    self.type: OrderType = type\n    self.state: OrderState = state\n    self.limit_price: Optional[float] = limit_price\n    self.stop_price: Optional[float] = stop_price\n    self.sl_price: Optional[float] = sl_price\n    self.tp_price: Optional[float] = tp_price\n    self.trade: Optional[\"Trade\"] = trade\n    self.tag: Optional[object] = tag\n\n    self.open_at: Optional[pd.Timestamp] = open_at\n    self.open_price: Optional[float] = open_price\n    self.entry_at: Optional[pd.Timestamp] = None\n    self.entry_price: Optional[float] = None\n\n    self.validate()\n</code></pre>"},{"location":"reference/exchange/order/#lettrade.exchange.order.Order.is_alive","title":"is_alive  <code>property</code>","text":"<pre><code>is_alive: bool\n</code></pre> <p>Flag to check <code>Order</code> still alive</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True if <code>state</code> in [OrderState.Pending, OrderState.Placed]</p> </li> </ul>"},{"location":"reference/exchange/order/#lettrade.exchange.order.Order.is_long","title":"is_long  <code>property</code>","text":"<pre><code>is_long: bool\n</code></pre> <p>True if side is long (size is positive).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True/False</p> </li> </ul>"},{"location":"reference/exchange/order/#lettrade.exchange.order.Order.is_short","title":"is_short  <code>property</code>","text":"<pre><code>is_short: bool\n</code></pre> <p>True if side is short (size is negative).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/order/#lettrade.exchange.order.Order.is_sl_order","title":"is_sl_order  <code>property</code>","text":"<pre><code>is_sl_order: bool\n</code></pre> <p><code>Order</code> is stop-loss order of a <code>Trade</code></p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/order/#lettrade.exchange.order.Order.is_tp_order","title":"is_tp_order  <code>property</code>","text":"<pre><code>is_tp_order: bool\n</code></pre> <p><code>Order</code> is take-profit order of a <code>Trade</code></p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/order/#lettrade.exchange.order.Order.limit","title":"limit  <code>property</code>","text":"<pre><code>limit: Optional[float]\n</code></pre> <p>Getter of limit_price</p> <p>Returns:</p> <ul> <li> <code>Optional[float]</code>           \u2013            <p>Optional[float]: <code>float</code> or <code>None</code></p> </li> </ul>"},{"location":"reference/exchange/order/#lettrade.exchange.order.Order.sl","title":"sl  <code>property</code>","text":"<pre><code>sl: Optional[float]\n</code></pre> <p>Getter of sl_price</p> <p>Returns:</p> <ul> <li> <code>Optional[float]</code>           \u2013            <p>Optional[float]: <code>float</code> or <code>None</code></p> </li> </ul>"},{"location":"reference/exchange/order/#lettrade.exchange.order.Order.stop","title":"stop  <code>property</code>","text":"<pre><code>stop: Optional[float]\n</code></pre> <p>Getter of stop_price</p> <p>Returns:</p> <ul> <li> <code>Optional[float]</code>           \u2013            <p>Optional[float]: <code>float</code> or <code>None</code></p> </li> </ul>"},{"location":"reference/exchange/order/#lettrade.exchange.order.Order.tp","title":"tp  <code>property</code>","text":"<pre><code>tp: Optional[float]\n</code></pre> <p>Getter of tp_price</p> <p>Returns:</p> <ul> <li> <code>Optional[float]</code>           \u2013            <p>Optional[float]: <code>float</code> or <code>None</code></p> </li> </ul>"},{"location":"reference/exchange/order/#lettrade.exchange.order.Order.cancel","title":"cancel","text":"<pre><code>cancel()\n</code></pre> Source code in <code>lettrade/exchange/order.py</code> <pre><code>def cancel(self):\n    \"\"\"\"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/exchange/order/#lettrade.exchange.order.Order.merge","title":"merge","text":"<pre><code>merge(other: Order)\n</code></pre> <p>Update current <code>Order</code> variables by other <code>Order</code></p> <p>Parameters:</p> <ul> <li> <code>other</code>               (<code>Order</code>)           \u2013            <p>Merge source <code>Order</code></p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>Validate same id</p> </li> </ul> Source code in <code>lettrade/exchange/order.py</code> <pre><code>def merge(self, other: \"Order\"):\n    \"\"\"Update current `Order` variables by other `Order`\n\n    Args:\n        other (Order): Merge source `Order`\n\n    Raises:\n        RuntimeError: Validate same id\n    \"\"\"\n    if other is self:\n        return\n\n    if self.id != other.id:\n        raise RuntimeError(f\"Merge difference id {self.id} != {other.id} order\")\n\n    self.size = other.size\n    self.sl_price = other.sl_price\n    self.tp_price = other.tp_price\n\n    if other.open_price:\n        self.open_price = other.open_price\n    if other.open_at:\n        self.open_at = other.open_at\n    if other.entry_price:\n        self.entry_price = other.entry_price\n    if other.entry_at:\n        self.entry_at = other.entry_at\n    if other.trade:\n        self.trade = other.trade\n</code></pre>"},{"location":"reference/exchange/order/#lettrade.exchange.order.Order.update","title":"update","text":"<pre><code>update(sl=None, tp=None, **kwargs)\n</code></pre> Source code in <code>lettrade/exchange/order.py</code> <pre><code>def update(self, sl=None, tp=None, **kwargs):\n    \"\"\"\"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/exchange/order/#lettrade.exchange.order.OrderResult","title":"OrderResult","text":"<pre><code>OrderResult(\n    ok: bool = True,\n    code: int = 0,\n    order: Optional[Order] = None,\n    raw: Optional[object] = None,\n)\n</code></pre> <p>Result of <code>Order</code></p> <p>Parameters:</p> <ul> <li> <code>ok</code>               (<code>Optional[bool]</code>, default:                   <code>True</code> )           \u2013            <p>Flag to check <code>Order</code> is success or not. Defaults to True.</p> </li> <li> <code>order</code>               (<code>Optional[Order]</code>, default:                   <code>None</code> )           \u2013            <p>Order own the result. Defaults to None.</p> </li> <li> <code>code</code>               (<code>Optional[int]</code>, default:                   <code>0</code> )           \u2013            <p>Error code of result. Defaults to 0.</p> </li> <li> <code>raw</code>               (<code>Optional[object]</code>, default:                   <code>None</code> )           \u2013            <p>Raw object of <code>Order</code>. Defaults to None.</p> </li> </ul> Source code in <code>lettrade/exchange/order.py</code> <pre><code>def __init__(\n    self,\n    ok: bool = True,\n    code: int = 0,\n    order: Optional[\"Order\"] = None,\n    raw: Optional[object] = None,\n) -&gt; None:\n    \"\"\"_summary_\n\n    Args:\n        ok (Optional[bool], optional): Flag to check `Order` is success or not. Defaults to True.\n        order (Optional[Order], optional): Order own the result. Defaults to None.\n        code (Optional[int], optional): Error code of result. Defaults to 0.\n        raw (Optional[object], optional): Raw object of `Order`. Defaults to None.\n    \"\"\"\n    self.ok: bool = ok\n    self.code: int = code\n    self.order: Optional[\"Order\"] = order\n    self.raw: Optional[object] = raw\n</code></pre>"},{"location":"reference/exchange/order/#lettrade.exchange.order.OrderResultError","title":"OrderResultError","text":"<pre><code>OrderResultError(\n    error: str,\n    code: int,\n    order: Optional[Order] = None,\n    raw: Optional[object] = None,\n)\n</code></pre> <p>               Bases: <code>OrderResult</code></p> <p>Result of a error <code>Order</code></p> <p>Parameters:</p> <ul> <li> <code>error</code>               (<code>str</code>)           \u2013            <p>Error message</p> </li> <li> <code>code</code>               (<code>int</code>)           \u2013            <p>Error code of result</p> </li> <li> <code>order</code>               (<code>Optional[Order]</code>, default:                   <code>None</code> )           \u2013            <p>Order own the result. Defaults to None.</p> </li> <li> <code>raw</code>               (<code>Optional[object]</code>, default:                   <code>None</code> )           \u2013            <p>Raw object of <code>Order</code>. Defaults to None.</p> </li> </ul> Source code in <code>lettrade/exchange/order.py</code> <pre><code>def __init__(\n    self,\n    error: str,\n    code: int,\n    order: Optional[\"Order\"] = None,\n    raw: Optional[object] = None,\n) -&gt; None:\n    \"\"\"_summary_\n\n    Args:\n        error (str): Error message\n        code (int): Error code of result\n        order (Optional[Order], optional): Order own the result. Defaults to None.\n        raw (Optional[object], optional): Raw object of `Order`. Defaults to None.\n    \"\"\"\n    super().__init__(ok=False, order=order, code=code, raw=raw)\n    self.error: str = error\n</code></pre>"},{"location":"reference/exchange/order/#lettrade.exchange.order.OrderResultOk","title":"OrderResultOk","text":"<pre><code>OrderResultOk(\n    order: Optional[Order] = None,\n    raw: Optional[object] = None,\n)\n</code></pre> <p>               Bases: <code>OrderResult</code></p> <p>Result of a success <code>Order</code></p> <p>Parameters:</p> <ul> <li> <code>order</code>               (<code>Optional[Order]</code>, default:                   <code>None</code> )           \u2013            <p>Order own the result. Defaults to None.</p> </li> <li> <code>raw</code>               (<code>Optional[object]</code>, default:                   <code>None</code> )           \u2013            <p>Raw object of <code>Order</code>. Defaults to None.</p> </li> </ul> Source code in <code>lettrade/exchange/order.py</code> <pre><code>def __init__(\n    self,\n    order: Optional[\"Order\"] = None,\n    raw: Optional[object] = None,\n) -&gt; None:\n    \"\"\"_summary_\n\n    Args:\n        order (Optional[Order], optional): Order own the result. Defaults to None.\n        raw (Optional[object], optional): Raw object of `Order`. Defaults to None.\n    \"\"\"\n    super().__init__(ok=True, order=order, raw=raw)\n</code></pre>"},{"location":"reference/exchange/position/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> position","text":""},{"location":"reference/exchange/position/#lettrade.exchange.position","title":"position","text":""},{"location":"reference/exchange/position/#lettrade.exchange.position.Position","title":"Position","text":"<pre><code>Position(\n    id: str, exchange: Exchange, data: DataFeed, size: float\n)\n</code></pre> <p>               Bases: <code>BaseTransaction</code></p> Source code in <code>lettrade/exchange/position.py</code> <pre><code>def __init__(\n    self,\n    id: str,\n    exchange: \"Exchange\",\n    data: \"DataFeed\",\n    size: float,\n):\n    super().__init__(\n        id=id,\n        exchange=exchange,\n        data=data,\n        size=size,\n    )\n</code></pre>"},{"location":"reference/exchange/position/#lettrade.exchange.position.Position.is_long","title":"is_long  <code>property</code>","text":"<pre><code>is_long: bool\n</code></pre> <p>True if side is long (size is positive).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True/False</p> </li> </ul>"},{"location":"reference/exchange/position/#lettrade.exchange.position.Position.is_short","title":"is_short  <code>property</code>","text":"<pre><code>is_short: bool\n</code></pre> <p>True if side is short (size is negative).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/position/#lettrade.exchange.position.Position.pl","title":"pl  <code>property</code>","text":"<pre><code>pl: float\n</code></pre> <p>Profit (positive) or loss (negative) of the current position in cash units.</p>"},{"location":"reference/exchange/position/#lettrade.exchange.position.Position.pl_pct","title":"pl_pct  <code>property</code>","text":"<pre><code>pl_pct: float\n</code></pre>"},{"location":"reference/exchange/position/#lettrade.exchange.position.Position.close","title":"close","text":"<pre><code>close(position: float = 1.0)\n</code></pre> <p>Close position of position by closing <code>position</code> of each active trade. See <code>Trade.close</code>.</p> Source code in <code>lettrade/exchange/position.py</code> <pre><code>def close(self, position: float = 1.0):\n    \"\"\"\n    Close position of position by closing `position` of each active trade. See `Trade.close`.\n    \"\"\"\n</code></pre>"},{"location":"reference/exchange/position/#lettrade.exchange.position.Position.merge","title":"merge","text":"<pre><code>merge(other: Position)\n</code></pre> Source code in <code>lettrade/exchange/position.py</code> <pre><code>def merge(self, other: \"Position\"):\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/trade/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> trade","text":""},{"location":"reference/exchange/trade/#lettrade.exchange.trade","title":"trade","text":""},{"location":"reference/exchange/trade/#lettrade.exchange.trade.Trade","title":"Trade","text":"<pre><code>Trade(\n    id: str,\n    exchange: Exchange,\n    data: DataFeed,\n    size: float,\n    parent: Order,\n    tag: object = \"\",\n    state: TradeState = TradeState.Open,\n    entry_price: Optional[float] = None,\n    entry_fee: float = 0.0,\n    entry_at: Optional[Timestamp] = None,\n    sl_order: Optional[Order] = None,\n    tp_order: Optional[Order] = None,\n)\n</code></pre> <p>               Bases: <code>BaseTransaction</code></p> <p>When an <code>Order</code> is filled, it results in an active <code>Trade</code>. Find active trades in <code>Strategy.trades</code> and closed, settled trades in <code>Strategy.closed_trades</code>.</p> Source code in <code>lettrade/exchange/trade.py</code> <pre><code>def __init__(\n    self,\n    id: str,\n    exchange: \"Exchange\",\n    data: \"DataFeed\",\n    size: float,\n    parent: \"Order\",\n    tag: object = \"\",\n    state: TradeState = TradeState.Open,\n    entry_price: Optional[float] = None,\n    entry_fee: float = 0.0,\n    entry_at: Optional[pd.Timestamp] = None,\n    sl_order: Optional[Order] = None,\n    tp_order: Optional[Order] = None,\n):\n    super().__init__(\n        id=id,\n        exchange=exchange,\n        data=data,\n        size=size,\n    )\n    self._account: \"Account\" = self.exchange._account\n\n    self.state: TradeState = state\n    self.tag: object = tag\n    self.parent: \"Order\" = parent\n\n    self.entry_price: Optional[float] = entry_price\n    self.entry_fee: float = entry_fee\n    self.entry_at: Optional[pd.Timestamp] = entry_at\n\n    self.exit_price: Optional[float] = None\n    self.exit_fee: float = 0.0\n    self.exit_at: Optional[pd.Timestamp] = None\n    self.exit_pl: Optional[float] = None\n\n    self.sl_order: Optional[Order] = sl_order\n    self.tp_order: Optional[Order] = tp_order\n</code></pre>"},{"location":"reference/exchange/trade/#lettrade.exchange.trade.Trade.fee","title":"fee  <code>property</code>","text":"<pre><code>fee: float\n</code></pre> <p>Fee/Estimate Fee for trade</p> <p>Returns:</p> <ul> <li> <code>float</code> (              <code>float</code> )          \u2013            <p>Fee</p> </li> </ul>"},{"location":"reference/exchange/trade/#lettrade.exchange.trade.Trade.is_exited","title":"is_exited  <code>property</code>","text":"<pre><code>is_exited: bool\n</code></pre> <p>Flag to check Trade state.</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True if the trade exited</p> </li> </ul>"},{"location":"reference/exchange/trade/#lettrade.exchange.trade.Trade.is_long","title":"is_long  <code>property</code>","text":"<pre><code>is_long: bool\n</code></pre> <p>True if side is long (size is positive).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True/False</p> </li> </ul>"},{"location":"reference/exchange/trade/#lettrade.exchange.trade.Trade.is_short","title":"is_short  <code>property</code>","text":"<pre><code>is_short: bool\n</code></pre> <p>True if side is short (size is negative).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/trade/#lettrade.exchange.trade.Trade.pl","title":"pl  <code>property</code>","text":"<pre><code>pl: float\n</code></pre> <p>Estimate Profit or Loss of Trade</p> <p>Returns:</p> <ul> <li> <code>float</code> (              <code>float</code> )          \u2013            <p>PnL</p> </li> </ul>"},{"location":"reference/exchange/trade/#lettrade.exchange.trade.Trade.exit","title":"exit","text":"<pre><code>exit()\n</code></pre> Source code in <code>lettrade/exchange/trade.py</code> <pre><code>def exit(self):\n    \"\"\"\"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/exchange/trade/#lettrade.exchange.trade.Trade.update","title":"update","text":"<pre><code>update(sl=None, tp=None, **kwargs)\n</code></pre> Source code in <code>lettrade/exchange/trade.py</code> <pre><code>def update(self, sl=None, tp=None, **kwargs):\n    \"\"\"\"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/exchange/backtest/","title":"Index","text":""},{"location":"reference/exchange/backtest/#lettrade.exchange.backtest","title":"backtest","text":""},{"location":"reference/exchange/backtest/account/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> account","text":""},{"location":"reference/exchange/backtest/account/#lettrade.exchange.backtest.account","title":"account","text":""},{"location":"reference/exchange/backtest/backtest/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> backtest","text":""},{"location":"reference/exchange/backtest/backtest/#lettrade.exchange.backtest.backtest","title":"backtest","text":""},{"location":"reference/exchange/backtest/backtest/#lettrade.exchange.backtest.backtest.LetTradeBackTest","title":"LetTradeBackTest","text":"<pre><code>LetTradeBackTest(\n    strategy: Type[Strategy],\n    datas: DataFeed | list[DataFeed] | str | list[str],\n    feeder: Type[DataFeeder],\n    exchange: Type[Exchange],\n    account: Type[Account],\n    commander: Optional[Type[Commander]] = None,\n    plotter: Optional[Type[Plotter]] = None,\n    stats: Optional[Type[BotStatistic]] = None,\n    name: Optional[str] = None,\n    bot: Optional[Type[LetTradeBot]] = LetTradeBot,\n    **kwargs\n)\n</code></pre> <p>               Bases: <code>LetTrade</code></p> Source code in <code>lettrade/lettrade.py</code> <pre><code>def __init__(\n    self,\n    strategy: Type[Strategy],\n    datas: DataFeed | list[DataFeed] | str | list[str],\n    feeder: Type[DataFeeder],\n    exchange: Type[Exchange],\n    account: Type[Account],\n    commander: Optional[Type[Commander]] = None,\n    plotter: Optional[Type[Plotter]] = None,\n    stats: Optional[Type[BotStatistic]] = None,\n    name: Optional[str] = None,\n    bot: Optional[Type[LetTradeBot]] = LetTradeBot,\n    **kwargs,\n) -&gt; None:\n    self._kwargs = kwargs\n    self._kwargs[\"strategy_cls\"] = strategy\n    self._kwargs[\"feeder_cls\"] = feeder\n    self._kwargs[\"exchange_cls\"] = exchange\n    self._kwargs[\"account_cls\"] = account\n    self._kwargs[\"commander_cls\"] = commander\n    self._kwargs[\"plotter_cls\"] = plotter\n    self._kwargs[\"stats_cls\"] = stats\n    self._kwargs[\"bot_cls\"] = bot\n    self._kwargs[\"name\"] = name\n\n    self._kwargs[\"datas\"] = self._init_datafeeds(datas)\n</code></pre>"},{"location":"reference/exchange/backtest/backtest/#lettrade.exchange.backtest.backtest.LetTradeBackTest.optimize","title":"optimize","text":"<pre><code>optimize(\n    multiprocessing: Literal[\"auto\", \"fork\"] = \"auto\",\n    workers: Optional[int] = None,\n    process_bar: bool = True,\n    cache: str = \"data/optimize\",\n    **kwargs\n)\n</code></pre> <p>Backtest optimization</p> <p>Parameters:</p> <ul> <li> <code>multiprocessing</code>               (<code>Optional[str]</code>, default:                   <code>'auto'</code> )           \u2013            <p>description. Defaults to \"auto\".</p> </li> </ul> Source code in <code>lettrade/exchange/backtest/backtest.py</code> <pre><code>def optimize(\n    self,\n    multiprocessing: Literal[\"auto\", \"fork\"] = \"auto\",\n    workers: Optional[int] = None,\n    process_bar: bool = True,\n    cache: str = \"data/optimize\",\n    **kwargs,\n):\n    \"\"\"Backtest optimization\n\n    Args:\n        multiprocessing (Optional[str], optional): _description_. Defaults to \"auto\".\n    \"\"\"\n    if self.data.l.pointer != 0:\n        # TODO: Can drop unnecessary columns by snapshort data.columns from init time\n        raise RuntimeError(\n            \"Optimize datas is not clean, don't run() backtest before optimize()\"\n        )\n\n    # optimizes = list(product(*(zip(repeat(k), v) for k, v in kwargs.items())))\n    optimizes = list(\n        dict(zip(kwargs.keys(), values)) for values in product(*kwargs.values())\n    )\n\n    self._optimize_init(cache=cache, total=len(optimizes), process_bar=process_bar)\n\n    # Run optimize in multiprocessing\n    self._optimizes_multiproccess(\n        optimizes=optimizes,\n        multiprocessing=multiprocessing,\n        workers=workers,\n    )\n\n    # queue None mean Done\n    try:\n        queue = self._kwargs[\"queue\"]\n        queue.put(None)\n    except Exception:\n        pass\n</code></pre>"},{"location":"reference/exchange/backtest/backtest/#lettrade.exchange.backtest.backtest.LetTradeBackTest.optimize_cache","title":"optimize_cache","text":"<pre><code>optimize_cache(cache: str = 'data/optimize')\n</code></pre> <p>Load optimize results from cache</p> <p>Parameters:</p> <ul> <li> <code>cache</code>               (<code>str</code>, default:                   <code>'data/optimize'</code> )           \u2013            <p>Cache directory. Defaults to \"data/optimize\".</p> </li> </ul> Source code in <code>lettrade/exchange/backtest/backtest.py</code> <pre><code>def optimize_cache(self, cache: str = \"data/optimize\"):\n    \"\"\"Load optimize results from cache\n\n    Args:\n        cache (str, optional): Cache directory. Defaults to \"data/optimize\".\n    \"\"\"\n    import json\n\n    self._optimize_init(cache=cache, total=0, process_bar=False)\n    cache_dir = self._kwargs[\"cache\"]\n    queue = self._kwargs[\"queue\"]\n\n    logger.warning(\"Load caches from: %s\", cache)\n\n    for cache_file in os.listdir(cache_dir):\n        if cache_file == \"info.json\":\n            continue\n\n        try:\n            cache_path = f\"{cache_dir}/{cache_file}\"\n            data = json.load(open(cache_path, mode=\"r\", encoding=\"utf-8\"))\n\n            queue.put(\n                dict(\n                    index=cache_file,\n                    optimize=data[\"optimize\"],\n                    result=data[\"result\"],\n                )\n            )\n        except Exception as e:\n            logger.warning(\"Loading cache %s error %s\", cache_path, e)\n\n    logger.warning(\"Loaded %s caches\", len(self._stats.results))\n</code></pre>"},{"location":"reference/exchange/backtest/backtest/#lettrade.exchange.backtest.backtest.LetTradeBackTest.optimize_model","title":"optimize_model","text":"<pre><code>optimize_model(\n    params_parser: Callable[\n        [Any], list[set[str, Any]]\n    ] = None,\n    result_parser: Callable[[BotStatistic], float] = None,\n    total: int = 0,\n    cache: str = \"data/optimize\",\n    process_bar: bool = False,\n) -&gt; Callable[[Any], Any]\n</code></pre> <p>Optimize function help to integrated with external optimize trainer</p> <p>Parameters:</p> <ul> <li> <code>params_parser</code>               (<code>Callable[[Any], list[set[str, Any]]]</code>, default:                   <code>None</code> )           \u2013            <p>Parse external parameters to bot parameters dict. Defaults to None.</p> </li> <li> <code>result_parser</code>               (<code>Callable[[BotStatistic], float]</code>, default:                   <code>None</code> )           \u2013            <p>Parse bot result to external score. Defaults to None.</p> </li> <li> <code>total</code>               (<code>int</code>, default:                   <code>0</code> )           \u2013            <p>Total number of optimize if possible. Defaults to 0.</p> </li> <li> <code>cache</code>               (<code>str</code>, default:                   <code>'data/optimize'</code> )           \u2013            <p>Cache directory to store optimize result. Defaults to \"data/optimize\".</p> </li> <li> <code>process_bar</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Enable/Disable process bar. Defaults to False.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Callable[[Any], Any]</code>           \u2013            <p>Callable[[Any], Any]: Optimize model function</p> </li> </ul> Source code in <code>lettrade/exchange/backtest/backtest.py</code> <pre><code>def optimize_model(\n    self,\n    params_parser: Callable[[Any], list[set[str, Any]]] = None,\n    result_parser: Callable[[BotStatistic], float] = None,\n    total: int = 0,\n    cache: str = \"data/optimize\",\n    process_bar: bool = False,\n) -&gt; Callable[[Any], Any]:\n    \"\"\"Optimize function help to integrated with external optimize trainer\n\n    Args:\n        params_parser (Callable[[Any], list[set[str, Any]]], optional): Parse external parameters to bot parameters dict. Defaults to None.\n        result_parser (Callable[[BotStatistic], float], optional): Parse bot result to external score. Defaults to None.\n        total (int, optional): Total number of optimize if possible. Defaults to 0.\n        cache (str, optional): Cache directory to store optimize result. Defaults to \"data/optimize\".\n        process_bar (bool, optional): Enable/Disable process bar. Defaults to False.\n\n    Raises:\n        RuntimeError: _description_\n\n    Returns:\n        Callable[[Any], Any]: Optimize model function\n    \"\"\"\n    if self.data.l.pointer != 0:\n        raise RuntimeError(\n            \"Optimize datas is not clean, don't run() backtest before optimize()\"\n        )\n\n    self._optimize_init(cache=cache, total=total, process_bar=process_bar)\n\n    # Optimize parameters\n    self.__class__._opt_main_pid = os.getpid()\n    self.__class__._opt_params_parser = params_parser\n    self.__class__._opt_result_parser = result_parser\n    self.__class__._opt_kwargs = self._kwargs\n\n    return self.__class__._optimize_model\n</code></pre>"},{"location":"reference/exchange/backtest/backtest/#lettrade.exchange.backtest.backtest.LetTradeBackTest.plot","title":"plot","text":"<pre><code>plot(*args, jump: Optional[dict] = None, **kwargs)\n</code></pre> <p>Plot strategy/optimize result</p> BotPlotter <p>Miror of BotPlotter.plot(). Plotly implement Plotly.plot().</p> <p>Args:     <code>jump</code> (Optional[dict], optional): Miror of BotPlotter.jump()</p> <p>Example:     - Jump to trade_id         <pre><code>lt.plot(\n    jump=dict(trade_id=1, range=300),\n    layout=dict(height=2000),\n)\n</code></pre></p> OptimizePlotter <p>Miror of OptimizePlotter.plot().</p> <p>Example:     -         <pre><code>lt.plot(layout=dict(height=2000))\n</code></pre></p> Source code in <code>lettrade/lettrade.py</code> <pre><code>def plot(self, *args, jump: Optional[dict] = None, **kwargs):\n    \"\"\"Plot strategy/optimize result\n\n    BotPlotter:\n        Miror of [BotPlotter.plot()](site:/reference/plot/bot/#lettrade.plot.bot.BotPlotter.plot).\n        Plotly implement [Plotly.plot()](site:/reference/plot/plotly/plotly/#lettrade.plot.plotly.plotly.PlotlyBotPlotter.plot).\n\n        Args:\n            `jump` (Optional[dict], optional): Miror of [BotPlotter.jump()](site:/reference/plot/bot/#lettrade.plot.bot.BotPlotter.jump)\n\n        Example:\n            - Jump to trade_id\n                ```python\n                lt.plot(\n                    jump=dict(trade_id=1, range=300),\n                    layout=dict(height=2000),\n                )\n                ```\n\n    OptimizePlotter:\n        Miror of [OptimizePlotter.plot()](site:/reference/plot/optimize/#lettrade.plot.optimize.OptimizePlotter.plot).\n\n        Example:\n            -\n                ```python\n                lt.plot(layout=dict(height=2000))\n                ```\n    \"\"\"\n    if __debug__:\n        from .utils.docs import is_docs_session\n\n        if is_docs_session():\n            return\n\n    self.plotter.plot(*args, jump=jump, **kwargs)\n</code></pre>"},{"location":"reference/exchange/backtest/backtest/#lettrade.exchange.backtest.backtest.LetTradeBackTest.stop","title":"stop","text":"<pre><code>stop()\n</code></pre> <p>Stop strategy</p> Source code in <code>lettrade/lettrade.py</code> <pre><code>def stop(self):\n    \"\"\"Stop strategy\"\"\"\n    if self._bot is not None:\n        return self._bot.stop()\n    if self.stats:\n        self.stats.stop()\n</code></pre>"},{"location":"reference/exchange/backtest/backtest/#lettrade.exchange.backtest.backtest.let_backtest","title":"let_backtest","text":"<pre><code>let_backtest(\n    strategy: Type[Strategy],\n    datas: DataFeed | list[DataFeed] | str | list[str],\n    feeder: Type[DataFeeder] = BackTestDataFeeder,\n    exchange: Type[Exchange] = BackTestExchange,\n    account: Type[Account] = BackTestAccount,\n    commander: Optional[\n        Type[Commander]\n    ] = BackTestCommander,\n    stats: Optional[Type[BotStatistic]] = BotStatistic,\n    optimize_stats: Optional[\n        Type[OptimizeStatistic]\n    ] = OptimizeStatistic,\n    plotter: Optional[\n        Type[BotPlotter]\n    ] = \"PlotlyBotPlotter\",\n    optimize_plotter: Optional[\n        Type[OptimizePlotter]\n    ] = \"PlotlyOptimizePlotter\",\n    cash: Optional[float] = 1000,\n    commission: Optional[float] = 0.2,\n    leverage: Optional[float] = 20,\n    bot: Optional[\n        Type[LetTradeBackTestBot]\n    ] = LetTradeBackTestBot,\n    **kwargs\n) -&gt; LetTradeBackTest\n</code></pre> <p>Complete <code>lettrade</code> backtest depenencies</p> <p>Parameters:</p> <ul> <li> <code>strategy</code>               (<code>Type[Strategy]</code>)           \u2013            <p>The Strategy implement class</p> </li> <li> <code>datas</code>               (<code>DataFeed | list[DataFeed] | str | list[str]</code>)           \u2013            <p>description</p> </li> <li> <code>feeder</code>               (<code>Type[DataFeeder]</code>, default:                   <code>BackTestDataFeeder</code> )           \u2013            <p>description. Defaults to BackTestDataFeeder.</p> </li> <li> <code>exchange</code>               (<code>Type[Exchange]</code>, default:                   <code>BackTestExchange</code> )           \u2013            <p>description. Defaults to BackTestExchange.</p> </li> <li> <code>account</code>               (<code>Type[Account]</code>, default:                   <code>BackTestAccount</code> )           \u2013            <p>description. Defaults to BackTestAccount.</p> </li> <li> <code>commander</code>               (<code>Optional[Type[Commander]]</code>, default:                   <code>BackTestCommander</code> )           \u2013            <p>description. Defaults to BackTestCommander.</p> </li> <li> <code>plotter</code>               (<code>Optional[Type[Plotter]]</code>, default:                   <code>'PlotlyBotPlotter'</code> )           \u2013            <p>description. Defaults to PlotlyBotPlotter.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>The validate parameter error</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>LetTradeBackTest</code> (              <code>LetTradeBackTest</code> )          \u2013            <p>The LetTrade backtesting object</p> </li> </ul> Source code in <code>lettrade/exchange/backtest/backtest.py</code> <pre><code>def let_backtest(\n    strategy: Type[Strategy],\n    datas: DataFeed | list[DataFeed] | str | list[str],\n    feeder: Type[DataFeeder] = BackTestDataFeeder,\n    exchange: Type[Exchange] = BackTestExchange,\n    account: Type[Account] = BackTestAccount,\n    commander: Optional[Type[Commander]] = BackTestCommander,\n    stats: Optional[Type[BotStatistic]] = BotStatistic,\n    optimize_stats: Optional[Type[OptimizeStatistic]] = OptimizeStatistic,\n    plotter: Optional[Type[BotPlotter]] = \"PlotlyBotPlotter\",\n    optimize_plotter: Optional[Type[OptimizePlotter]] = \"PlotlyOptimizePlotter\",\n    cash: Optional[float] = 1_000,\n    commission: Optional[float] = 0.2,\n    leverage: Optional[float] = 20,\n    bot: Optional[Type[LetTradeBackTestBot]] = LetTradeBackTestBot,\n    **kwargs,\n) -&gt; \"LetTradeBackTest\":\n    \"\"\"Complete `lettrade` backtest depenencies\n\n    Args:\n        strategy (Type[Strategy]): The Strategy implement class\n        datas (DataFeed | list[DataFeed] | str | list[str]): _description_\n        feeder (Type[DataFeeder], optional): _description_. Defaults to BackTestDataFeeder.\n        exchange (Type[Exchange], optional): _description_. Defaults to BackTestExchange.\n        account (Type[Account], optional): _description_. Defaults to BackTestAccount.\n        commander (Optional[Type[Commander]], optional): _description_. Defaults to BackTestCommander.\n        plotter (Optional[Type[Plotter]], optional): _description_. Defaults to PlotlyBotPlotter.\n\n    Raises:\n        RuntimeError: The validate parameter error\n\n    Returns:\n        LetTradeBackTest: The LetTrade backtesting object\n    \"\"\"\n    account_kwargs: dict = kwargs.setdefault(\"account_kwargs\", {})\n    account_kwargs.update(\n        cash=cash,\n        commission=commission,\n        leverage=leverage,\n    )\n\n    return LetTradeBackTest(\n        strategy=strategy,\n        datas=datas,\n        feeder=feeder,\n        exchange=exchange,\n        commander=commander,\n        account=account,\n        stats=stats,\n        plotter=plotter,\n        bot=bot,\n        # Backtest\n        optimize_stats_cls=optimize_stats,\n        optimize_plotter_cls=optimize_plotter,\n        **kwargs,\n    )\n</code></pre>"},{"location":"reference/exchange/backtest/commander/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> commander","text":""},{"location":"reference/exchange/backtest/commander/#lettrade.exchange.backtest.commander","title":"commander","text":""},{"location":"reference/exchange/backtest/commander/#lettrade.exchange.backtest.commander.BackTestCommander","title":"BackTestCommander","text":"<pre><code>BackTestCommander()\n</code></pre> <p>               Bases: <code>Commander</code></p> <p>BackTest Commander to debug commander notify</p> Source code in <code>lettrade/commander/commander.py</code> <pre><code>def __init__(self) -&gt; None:\n    super().__init__()\n</code></pre>"},{"location":"reference/exchange/backtest/commander/#lettrade.exchange.backtest.commander.BackTestCommander.init","title":"init","text":"<pre><code>init(\n    lettrade: LetTrade,\n    brain: Brain,\n    exchange: Exchange,\n    strategy: Strategy,\n)\n</code></pre> <p>Init commander dependencies</p> <p>Parameters:</p> <ul> <li> <code>lettrade</code>               (<code>LetTrade</code>)           \u2013            <p>LetTrade object</p> </li> <li> <code>brain</code>               (<code>Brain</code>)           \u2013            <p>Brain of bot</p> </li> <li> <code>exchange</code>               (<code>Exchange</code>)           \u2013            <p>Manage bot trading</p> </li> <li> <code>strategy</code>               (<code>Strategy</code>)           \u2013            <p>Strategy of bot</p> </li> </ul> Source code in <code>lettrade/commander/commander.py</code> <pre><code>def init(\n    self,\n    lettrade: \"LetTrade\",\n    brain: \"Brain\",\n    exchange: \"Exchange\",\n    strategy: \"Strategy\",\n):\n    \"\"\"Init commander dependencies\n\n    Args:\n        lettrade (LetTrade): LetTrade object\n        brain (Brain): Brain of bot\n        exchange (Exchange): Manage bot trading\n        strategy (Strategy): Strategy of bot\n    \"\"\"\n    self.lettrade = lettrade\n    self.brain = brain\n    self.exchange = exchange\n    self.strategy = strategy\n\n    self._name = self.lettrade._name\n</code></pre>"},{"location":"reference/exchange/backtest/data/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> data","text":""},{"location":"reference/exchange/backtest/data/#lettrade.exchange.backtest.data","title":"data","text":""},{"location":"reference/exchange/backtest/data/#lettrade.exchange.backtest.data.CSVBackTestDataFeed","title":"CSVBackTestDataFeed","text":"<pre><code>CSVBackTestDataFeed(\n    path: Optional[str] = None,\n    name: Optional[str] = None,\n    timeframe: Optional[str | int | Timedelta] = None,\n    delimiter: str = \",\",\n    index_col: int = 0,\n    header: int = 0,\n    meta: Optional[dict] = None,\n    data: Optional[DataFeed] = None,\n    **kwargs: dict\n)\n</code></pre> <p>               Bases: <code>BackTestDataFeed</code></p> <p>Implement help to load DataFeed from csv file</p> <p>Parameters:</p> <ul> <li> <code>name</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>Path to csv file</p> </li> <li> <code>delimiter</code>               (<code>str</code>, default:                   <code>','</code> )           \u2013            <p>description. Defaults to \",\".</p> </li> <li> <code>index_col</code>               (<code>int</code>, default:                   <code>0</code> )           \u2013            <p>description. Defaults to 0.</p> </li> <li> <code>header</code>               (<code>int</code>, default:                   <code>0</code> )           \u2013            <p>description. Defaults to 0.</p> </li> <li> <code>**kwargs</code>               (<code>dict</code>, default:                   <code>{}</code> )           \u2013            <p>DataFeed dict parameters</p> </li> </ul> Source code in <code>lettrade/exchange/backtest/data.py</code> <pre><code>def __init__(\n    self,\n    path: Optional[str] = None,\n    name: Optional[str] = None,\n    timeframe: Optional[str | int | pd.Timedelta] = None,\n    delimiter: str = \",\",\n    index_col: int = 0,\n    header: int = 0,\n    meta: Optional[dict] = None,\n    data: Optional[DataFeed] = None,\n    **kwargs: dict,\n) -&gt; None:\n    \"\"\"_summary_\n\n    Args:\n        name (str): Path to csv file\n        delimiter (str, optional): _description_. Defaults to \",\".\n        index_col (int, optional): _description_. Defaults to 0.\n        header (int, optional): _description_. Defaults to 0.\n        **kwargs (dict): [DataFeed](../../data/data.md#lettrade.data.data.DataFeed) dict parameters\n    \"\"\"\n    if name is None:\n        name = _path_to_name(path)\n\n    if data is None:\n        data = pd.read_csv(\n            path,\n            index_col=index_col,\n            parse_dates=[\"datetime\"],\n            delimiter=delimiter,\n            header=header,\n        )\n        if not isinstance(data.index, pd.DatetimeIndex):\n            data.index = data.index.astype(\"datetime64[ns, UTC]\")\n\n    super().__init__(\n        data=data,\n        name=name,\n        timeframe=timeframe,\n        meta=meta,\n        **kwargs,\n    )\n</code></pre>"},{"location":"reference/exchange/backtest/exchange/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> exchange","text":""},{"location":"reference/exchange/backtest/exchange/#lettrade.exchange.backtest.exchange","title":"exchange","text":""},{"location":"reference/exchange/backtest/exchange/#lettrade.exchange.backtest.exchange.BackTestExchange","title":"BackTestExchange","text":"<pre><code>BackTestExchange(**kwargs)\n</code></pre> <p>               Bases: <code>Exchange</code></p> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def __init__(self, **kwargs):\n    self._config = kwargs\n\n    self.executes = dict()\n    self.orders = dict()\n    self.history_orders = dict()\n    self.trades = dict()\n    self.history_trades = dict()\n    self.positions = dict()\n\n    self._state = ExchangeState.Init\n</code></pre>"},{"location":"reference/exchange/backtest/exchange/#lettrade.exchange.backtest.exchange.BackTestExchange.data","title":"data  <code>instance-attribute</code>","text":"<pre><code>data: DataFeed\n</code></pre> <p>main DataFeed</p>"},{"location":"reference/exchange/backtest/exchange/#lettrade.exchange.backtest.exchange.BackTestExchange.datas","title":"datas  <code>instance-attribute</code>","text":"<pre><code>datas: list[DataFeed]\n</code></pre> <p>List of all available DataFeed</p>"},{"location":"reference/exchange/backtest/exchange/#lettrade.exchange.backtest.exchange.BackTestExchange.executes","title":"executes  <code>instance-attribute</code>","text":"<pre><code>executes: dict[str, Execute] = dict()\n</code></pre> <p>Execute dict by <code>Execute.id</code> key</p>"},{"location":"reference/exchange/backtest/exchange/#lettrade.exchange.backtest.exchange.BackTestExchange.history_orders","title":"history_orders  <code>instance-attribute</code>","text":"<pre><code>history_orders: dict[str, Order] = dict()\n</code></pre> <p>History Order dict by <code>Order.id</code> key</p>"},{"location":"reference/exchange/backtest/exchange/#lettrade.exchange.backtest.exchange.BackTestExchange.history_trades","title":"history_trades  <code>instance-attribute</code>","text":"<pre><code>history_trades: dict[str, Trade] = dict()\n</code></pre> <p>History Order dict by <code>Order.id</code> key</p>"},{"location":"reference/exchange/backtest/exchange/#lettrade.exchange.backtest.exchange.BackTestExchange.orders","title":"orders  <code>instance-attribute</code>","text":"<pre><code>orders: dict[str, Order] = dict()\n</code></pre> <p>Available Order dict by <code>Order.id</code> key</p>"},{"location":"reference/exchange/backtest/exchange/#lettrade.exchange.backtest.exchange.BackTestExchange.positions","title":"positions  <code>instance-attribute</code>","text":"<pre><code>positions: dict[str, Position] = dict()\n</code></pre> <p>Available Position dict by <code>Position.id</code> key</p>"},{"location":"reference/exchange/backtest/exchange/#lettrade.exchange.backtest.exchange.BackTestExchange.trades","title":"trades  <code>instance-attribute</code>","text":"<pre><code>trades: dict[str, Trade] = dict()\n</code></pre> <p>Available Trade dict by <code>Trade.id</code> key</p>"},{"location":"reference/exchange/backtest/exchange/#lettrade.exchange.backtest.exchange.BackTestExchange.init","title":"init","text":"<pre><code>init(\n    brain: Brain,\n    feeder: DataFeeder,\n    account: Account,\n    commander: Commander,\n) -&gt; None\n</code></pre> <p>Init Exchange dependencies. Set data/datas from feeder. Set state to <code>ExchangeState.Start</code>.</p> <p>Parameters:</p> <ul> <li> <code>brain</code>               (<code>Brain</code>)           \u2013            <p>description</p> </li> <li> <code>feeder</code>               (<code>DataFeeder</code>)           \u2013            <p>description</p> </li> <li> <code>account</code>               (<code>Account</code>)           \u2013            <p>description</p> </li> <li> <code>commander</code>               (<code>Commander</code>)           \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def init(\n    self,\n    brain: \"Brain\",\n    feeder: DataFeeder,\n    account: Account,\n    commander: Commander,\n) -&gt; None:\n    \"\"\"Init Exchange dependencies.\n    Set data/datas from feeder.\n    Set state to `ExchangeState.Start`.\n\n    Args:\n        brain (Brain): _description_\n        feeder (DataFeeder): _description_\n        account (Account): _description_\n        commander (Commander): _description_\n    \"\"\"\n    self._brain = brain\n    self._feeder = feeder\n    self._account = account\n    self._commander = commander\n\n    self.data = self._feeder.data\n    self.datas = self._feeder.datas\n\n    self._account.init(exchange=self)\n\n    self._state = ExchangeState.Start\n</code></pre>"},{"location":"reference/exchange/backtest/exchange/#lettrade.exchange.backtest.exchange.BackTestExchange.new_order","title":"new_order","text":"<pre><code>new_order(\n    size: float,\n    type: Optional[OrderType] = OrderType.Market,\n    limit: Optional[float] = None,\n    stop: Optional[float] = None,\n    sl: Optional[float] = None,\n    tp: Optional[float] = None,\n    tag: Optional[object] = None,\n    data: Optional[DataFeed] = None,\n    **kwargs\n) -&gt; OrderResult\n</code></pre> <p>Place new order. Then send order events to <code>Brain</code></p> <p>Parameters:</p> <ul> <li> <code>size</code>               (<code>float</code>)           \u2013            <p>description</p> </li> <li> <code>type</code>               (<code>Optional[OrderType]</code>, default:                   <code>Market</code> )           \u2013            <p>description. Defaults to OrderType.Market.</p> </li> <li> <code>limit</code>               (<code>Optional[float]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>stop</code>               (<code>Optional[float]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>sl</code>               (<code>Optional[float]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>tp</code>               (<code>Optional[float]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>tag</code>               (<code>Optional[object]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>data</code>               (<code>Optional[DataFeed]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>**kwargs</code>               (<code>Optional[dict]</code>, default:                   <code>{}</code> )           \u2013            <p>Extra-parameters</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>OrderResult</code> (              <code>OrderResult</code> )          \u2013            <p>Result when place new <code>Order</code></p> </li> </ul> Source code in <code>lettrade/exchange/backtest/exchange.py</code> <pre><code>def new_order(\n    self,\n    size: float,\n    type: Optional[OrderType] = OrderType.Market,\n    limit: Optional[float] = None,\n    stop: Optional[float] = None,\n    sl: Optional[float] = None,\n    tp: Optional[float] = None,\n    tag: Optional[object] = None,\n    data: Optional[DataFeed] = None,\n    **kwargs\n) -&gt; OrderResult:\n    \"\"\"Place new order.\n    Then send order events to `Brain`\n\n    Args:\n        size (float): _description_\n        type (Optional[OrderType], optional): _description_. Defaults to OrderType.Market.\n        limit (Optional[float], optional): _description_. Defaults to None.\n        stop (Optional[float], optional): _description_. Defaults to None.\n        sl (Optional[float], optional): _description_. Defaults to None.\n        tp (Optional[float], optional): _description_. Defaults to None.\n        tag (Optional[object], optional): _description_. Defaults to None.\n        data (Optional[DataFeed], optional): _description_. Defaults to None.\n        **kwargs (Optional[dict], optional): Extra-parameters\n\n    Returns:\n        OrderResult: Result when place new `Order`\n    \"\"\"\n    if not data:\n        data = self.data\n\n    if type == OrderType.Market:\n        limit = None\n        stop = None\n        open_price = self.data.l.open[0]\n        open_at = self.data.bar()\n    else:\n        open_price = None\n        open_at = None\n\n    order = BackTestOrder(\n        id=self._id(),\n        exchange=self,\n        data=data,\n        size=size,\n        type=type,\n        limit_price=limit,\n        stop_price=stop,\n        sl_price=sl,\n        tp_price=tp,\n        tag=tag,\n        open_price=open_price,\n        open_at=open_at,\n    )\n    ok = order._on_place()\n\n    if __debug__:\n        logger.info(\"New order %s at %s\", order, self.data.now)\n\n    if type == OrderType.Market:\n        # Simulate market order will send event before return order result\n        self._simulate_orders()\n\n    return ok\n</code></pre>"},{"location":"reference/exchange/backtest/exchange/#lettrade.exchange.backtest.exchange.BackTestExchange.next","title":"next","text":"<pre><code>next()\n</code></pre> <p>Execute when new data feeded</p> Source code in <code>lettrade/exchange/backtest/exchange.py</code> <pre><code>def next(self):\n    \"\"\"Execute when new data feeded\"\"\"\n    self._simulate_orders()\n    super().next()\n</code></pre>"},{"location":"reference/exchange/backtest/exchange/#lettrade.exchange.backtest.exchange.BackTestExchange.next_next","title":"next_next","text":"<pre><code>next_next()\n</code></pre> <p>Call after strategy.next()</p> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def next_next(self):\n    \"Call after strategy.next()\"\n    self._account._equity_snapshot()\n</code></pre>"},{"location":"reference/exchange/backtest/exchange/#lettrade.exchange.backtest.exchange.BackTestExchange.on_execute","title":"on_execute","text":"<pre><code>on_execute(\n    execute: Execute,\n    broadcast: Optional[bool] = True,\n    **kwargs\n) -&gt; None\n</code></pre> <p>Receive Execute event from exchange then store and notify Brain</p> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def on_execute(\n    self,\n    execute: Execute,\n    broadcast: Optional[bool] = True,\n    **kwargs,\n) -&gt; None:\n    \"\"\"\n    Receive Execute event from exchange then store and notify Brain\n    \"\"\"\n    if not isinstance(execute, Execute):\n        raise RuntimeError(f\"{execute} is not instance of type Execute\")\n\n    if execute.id in self.executes:\n        # Merge to keep Execute handler for strategy using\n        # when strategy want to store Execute object\n        # and object will be automatic update directly\n        self.executes[execute.id].merge(execute)\n        execute = self.executes[execute.id]\n    else:\n        self.executes[execute.id] = execute\n\n    if self._state != ExchangeState.Run:\n        return\n\n    if broadcast:\n        self._brain.on_execute(execute)\n</code></pre>"},{"location":"reference/exchange/backtest/exchange/#lettrade.exchange.backtest.exchange.BackTestExchange.on_order","title":"on_order","text":"<pre><code>on_order(\n    order: Order, broadcast: Optional[bool] = True, **kwargs\n) -&gt; None\n</code></pre> <p>Receive Order event from exchange then store and notify Brain</p> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def on_order(\n    self,\n    order: Order,\n    broadcast: Optional[bool] = True,\n    **kwargs,\n) -&gt; None:\n    \"\"\"\n    Receive Order event from exchange then store and notify Brain\n    \"\"\"\n    if not isinstance(order, Order):\n        raise RuntimeError(f\"{order} is not instance of type Order\")\n\n    if order.state in [OrderState.Executed, OrderState.Canceled]:\n        self.history_orders[order.id] = order\n        if order.id in self.orders:\n            del self.orders[order.id]\n    else:\n        if order.id in self.history_orders:\n            raise RuntimeError(f\"Order {order.id} closed\")\n\n        if order.id in self.orders:\n            # Merge to keep Order handler for strategy using\n            # when strategy want to store Order object\n            # and object will be automatic update directly\n            self.orders[order.id].merge(order)\n            order = self.orders[order.id]\n        else:\n            self.orders[order.id] = order\n\n    if self._state != ExchangeState.Run:\n        return\n\n    if broadcast:\n        self._brain.on_order(order)\n</code></pre>"},{"location":"reference/exchange/backtest/exchange/#lettrade.exchange.backtest.exchange.BackTestExchange.on_position","title":"on_position","text":"<pre><code>on_position(\n    position: Position,\n    broadcast: Optional[bool] = True,\n    *args,\n    **kwargs\n) -&gt; None\n</code></pre> <p>Receive Position event from exchange then store and notify Brain</p> <p>Parameters:</p> <ul> <li> <code>position</code>               (<code>Position</code>)           \u2013            <p>description</p> </li> <li> <code>broadcast</code>               (<code>Optional[bool]</code>, default:                   <code>True</code> )           \u2013            <p>description. Defaults to True.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>check <code>Position</code> instance</p> </li> </ul> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def on_position(\n    self,\n    position: Position,\n    broadcast: Optional[bool] = True,\n    *args,\n    **kwargs,\n) -&gt; None:\n    \"\"\"Receive Position event from exchange then store and notify Brain\n\n\n    Args:\n        position (Position): _description_\n        broadcast (Optional[bool], optional): _description_. Defaults to True.\n\n    Raises:\n        RuntimeError: check `Position` instance\n    \"\"\"\n    if not isinstance(position, Position):\n        raise RuntimeError(f\"{position} is not instance of type Position\")\n\n    if position.id in self.positions:\n        # Merge to keep Position handler for strategy using\n        # when strategy want to store Position object\n        # and object will be automatic update directly\n        self.positions[position.id].merge(position)\n    else:\n        self.positions[position.id] = position\n\n    if self._state != ExchangeState.Run:\n        return\n\n    if broadcast:\n        self._brain.on_position(position)\n</code></pre>"},{"location":"reference/exchange/backtest/exchange/#lettrade.exchange.backtest.exchange.BackTestExchange.on_trade","title":"on_trade","text":"<pre><code>on_trade(\n    trade: Trade,\n    broadcast: Optional[bool] = True,\n    *args,\n    **kwargs\n) -&gt; None\n</code></pre> <p>Receive Trade event from exchange then store and notify Brain</p> <p>Parameters:</p> <ul> <li> <code>trade</code>               (<code>Trade</code>)           \u2013            <p>new comming <code>Trade</code></p> </li> <li> <code>broadcast</code>               (<code>Optional[bool]</code>, default:                   <code>True</code> )           \u2013            <p>Flag notify for Brain. Defaults to True.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>validat <code>Trade</code> instance</p> </li> </ul> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def on_trade(\n    self,\n    trade: Trade,\n    broadcast: Optional[bool] = True,\n    *args,\n    **kwargs,\n) -&gt; None:\n    \"\"\"Receive Trade event from exchange then store and notify Brain\n\n    Args:\n        trade (Trade): new comming `Trade`\n        broadcast (Optional[bool], optional): Flag notify for Brain. Defaults to True.\n\n    Raises:\n        RuntimeError: validat `Trade` instance\n    \"\"\"\n    if not isinstance(trade, Trade):\n        raise RuntimeError(f\"{trade} is not instance of type Trade\")\n\n    if trade.state == TradeState.Exit:\n        self.history_trades[trade.id] = trade\n        if trade.id in self.trades:\n            del self.trades[trade.id]\n\n        self._account._on_trade_exit(trade)\n    else:\n        if trade.id in self.history_trades:\n            raise RuntimeError(f\"Order {trade.id} closed\")\n        if trade.id in self.trades:\n            # Merge to keep Trade handler for strategy using\n            # when strategy want to store Trade object\n            # and object will be automatic update directly\n            self.trades[trade.id].merge(trade)\n            trade = self.trades[trade.id]\n        else:\n            self.trades[trade.id] = trade\n\n    if self._state != ExchangeState.Run:\n        return\n\n    if broadcast:\n        self._brain.on_trade(trade)\n</code></pre>"},{"location":"reference/exchange/backtest/exchange/#lettrade.exchange.backtest.exchange.BackTestExchange.start","title":"start","text":"<pre><code>start() -&gt; None\n</code></pre> <p>Start of Exchange by: - Start account. - Set state to <code>ExchangeState.Run</code> ready for next().</p> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def start(self) -&gt; None:\n    \"\"\"Start of Exchange by:\n    - Start account.\n    - Set state to `ExchangeState.Run` ready for next().\n    \"\"\"\n    self._account.start()\n    self._state = ExchangeState.Run\n</code></pre>"},{"location":"reference/exchange/backtest/exchange/#lettrade.exchange.backtest.exchange.BackTestExchange.stop","title":"stop","text":"<pre><code>stop() -&gt; None\n</code></pre> <p>Stop Exchange</p> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def stop(self) -&gt; None:\n    \"\"\"Stop Exchange\"\"\"\n    self._state = ExchangeState.Stop\n    self._account.stop()\n</code></pre>"},{"location":"reference/exchange/backtest/feeder/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> feeder","text":""},{"location":"reference/exchange/backtest/feeder/#lettrade.exchange.backtest.feeder","title":"feeder","text":""},{"location":"reference/exchange/backtest/feeder/#lettrade.exchange.backtest.feeder.BackTestDataFeeder","title":"BackTestDataFeeder","text":"<p>               Bases: <code>DataFeeder</code></p> <p>BackTest DataFeeder</p>"},{"location":"reference/exchange/backtest/feeder/#lettrade.exchange.backtest.feeder.BackTestDataFeeder.is_continous","title":"is_continous  <code>property</code>","text":"<pre><code>is_continous\n</code></pre> <p>Flag check is realtime continous datafeeder</p>"},{"location":"reference/exchange/backtest/stats/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> stats","text":""},{"location":"reference/exchange/backtest/stats/#lettrade.exchange.backtest.stats","title":"stats","text":""},{"location":"reference/exchange/backtest/stats/#lettrade.exchange.backtest.stats.OptimizeStatistic","title":"OptimizeStatistic","text":"<pre><code>OptimizeStatistic(\n    plotter: OptimizePlotter = None, total: int = 0\n)\n</code></pre> <p>Compute strategy result</p> Source code in <code>lettrade/exchange/backtest/stats.py</code> <pre><code>def __init__(self, plotter: OptimizePlotter = None, total: int = 0) -&gt; None:\n    self.plotter = plotter\n    self.results = []\n    self._total = total\n\n    if self.plotter is not None:\n        self.plotter.init(self.results)\n\n    self._t_wait_done()\n</code></pre>"},{"location":"reference/exchange/backtest/stats/#lettrade.exchange.backtest.stats.OptimizeStatistic.compute","title":"compute","text":"<pre><code>compute()\n</code></pre> <p>Calculate strategy report</p> Source code in <code>lettrade/exchange/backtest/stats.py</code> <pre><code>def compute(self):\n    \"\"\"\n    Calculate strategy report\n    \"\"\"\n\n    return self.result\n</code></pre>"},{"location":"reference/exchange/backtest/trade/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> trade","text":""},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade","title":"trade","text":""},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestExecute","title":"BackTestExecute","text":"<pre><code>BackTestExecute(\n    id: str,\n    exchange: Exchange,\n    data: DataFeed,\n    size: float,\n    price: float,\n    at: float,\n    order_id: Optional[str] = None,\n    order: Optional[Order] = None,\n    trade_id: Optional[str] = None,\n    trade: Optional[Trade] = None,\n)\n</code></pre> <p>               Bases: <code>Execute</code></p> <p>Execute for backtesting</p> Source code in <code>lettrade/exchange/execute.py</code> <pre><code>def __init__(\n    self,\n    id: str,\n    exchange: \"Exchange\",\n    data: \"DataFeed\",\n    size: float,\n    price: float,\n    at: float,\n    order_id: Optional[str] = None,\n    order: Optional[\"Order\"] = None,\n    trade_id: Optional[str] = None,\n    trade: Optional[\"Trade\"] = None,\n):\n    super().__init__(\n        id=id,\n        exchange=exchange,\n        data=data,\n        size=size,\n    )\n    self.order_id = order_id\n    self.order: \"Order\" = order\n    self.trade_id = trade_id\n    self.trade: \"Trade\" = trade\n    self.price = price\n    self.at = at\n</code></pre>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestOrder","title":"BackTestOrder","text":"<pre><code>BackTestOrder(\n    id: str,\n    exchange: Exchange,\n    data: DataFeed,\n    size: float,\n    state: OrderState = OrderState.Pending,\n    type: OrderType = OrderType.Market,\n    limit_price: Optional[float] = None,\n    stop_price: Optional[float] = None,\n    sl_price: Optional[float] = None,\n    tp_price: Optional[float] = None,\n    trade: Optional[Trade] = None,\n    tag: Optional[object] = None,\n    open_at: Optional[Timestamp] = None,\n    open_price: Optional[float] = None,\n)\n</code></pre> <p>               Bases: <code>Order</code></p> <p>Order for backtesting</p> Source code in <code>lettrade/exchange/order.py</code> <pre><code>def __init__(\n    self,\n    id: str,\n    exchange: \"Exchange\",\n    data: \"DataFeed\",\n    size: float,\n    state: OrderState = OrderState.Pending,\n    type: OrderType = OrderType.Market,\n    limit_price: Optional[float] = None,\n    stop_price: Optional[float] = None,\n    sl_price: Optional[float] = None,\n    tp_price: Optional[float] = None,\n    trade: Optional[\"Trade\"] = None,\n    tag: Optional[object] = None,\n    open_at: Optional[pd.Timestamp] = None,\n    open_price: Optional[float] = None,\n):\n    super().__init__(\n        id=id,\n        exchange=exchange,\n        data=data,\n        size=size,\n    )\n\n    self.type: OrderType = type\n    self.state: OrderState = state\n    self.limit_price: Optional[float] = limit_price\n    self.stop_price: Optional[float] = stop_price\n    self.sl_price: Optional[float] = sl_price\n    self.tp_price: Optional[float] = tp_price\n    self.trade: Optional[\"Trade\"] = trade\n    self.tag: Optional[object] = tag\n\n    self.open_at: Optional[pd.Timestamp] = open_at\n    self.open_price: Optional[float] = open_price\n    self.entry_at: Optional[pd.Timestamp] = None\n    self.entry_price: Optional[float] = None\n\n    self.validate()\n</code></pre>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestOrder.is_alive","title":"is_alive  <code>property</code>","text":"<pre><code>is_alive: bool\n</code></pre> <p>Flag to check <code>Order</code> still alive</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True if <code>state</code> in [OrderState.Pending, OrderState.Placed]</p> </li> </ul>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestOrder.is_long","title":"is_long  <code>property</code>","text":"<pre><code>is_long: bool\n</code></pre> <p>True if side is long (size is positive).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True/False</p> </li> </ul>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestOrder.is_short","title":"is_short  <code>property</code>","text":"<pre><code>is_short: bool\n</code></pre> <p>True if side is short (size is negative).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestOrder.is_sl_order","title":"is_sl_order  <code>property</code>","text":"<pre><code>is_sl_order: bool\n</code></pre> <p><code>Order</code> is stop-loss order of a <code>Trade</code></p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestOrder.is_tp_order","title":"is_tp_order  <code>property</code>","text":"<pre><code>is_tp_order: bool\n</code></pre> <p><code>Order</code> is take-profit order of a <code>Trade</code></p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestOrder.limit","title":"limit  <code>property</code>","text":"<pre><code>limit: Optional[float]\n</code></pre> <p>Getter of limit_price</p> <p>Returns:</p> <ul> <li> <code>Optional[float]</code>           \u2013            <p>Optional[float]: <code>float</code> or <code>None</code></p> </li> </ul>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestOrder.sl","title":"sl  <code>property</code>","text":"<pre><code>sl: Optional[float]\n</code></pre> <p>Getter of sl_price</p> <p>Returns:</p> <ul> <li> <code>Optional[float]</code>           \u2013            <p>Optional[float]: <code>float</code> or <code>None</code></p> </li> </ul>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestOrder.stop","title":"stop  <code>property</code>","text":"<pre><code>stop: Optional[float]\n</code></pre> <p>Getter of stop_price</p> <p>Returns:</p> <ul> <li> <code>Optional[float]</code>           \u2013            <p>Optional[float]: <code>float</code> or <code>None</code></p> </li> </ul>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestOrder.tp","title":"tp  <code>property</code>","text":"<pre><code>tp: Optional[float]\n</code></pre> <p>Getter of tp_price</p> <p>Returns:</p> <ul> <li> <code>Optional[float]</code>           \u2013            <p>Optional[float]: <code>float</code> or <code>None</code></p> </li> </ul>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestOrder.merge","title":"merge","text":"<pre><code>merge(other: Order)\n</code></pre> <p>Update current <code>Order</code> variables by other <code>Order</code></p> <p>Parameters:</p> <ul> <li> <code>other</code>               (<code>Order</code>)           \u2013            <p>Merge source <code>Order</code></p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>Validate same id</p> </li> </ul> Source code in <code>lettrade/exchange/order.py</code> <pre><code>def merge(self, other: \"Order\"):\n    \"\"\"Update current `Order` variables by other `Order`\n\n    Args:\n        other (Order): Merge source `Order`\n\n    Raises:\n        RuntimeError: Validate same id\n    \"\"\"\n    if other is self:\n        return\n\n    if self.id != other.id:\n        raise RuntimeError(f\"Merge difference id {self.id} != {other.id} order\")\n\n    self.size = other.size\n    self.sl_price = other.sl_price\n    self.tp_price = other.tp_price\n\n    if other.open_price:\n        self.open_price = other.open_price\n    if other.open_at:\n        self.open_at = other.open_at\n    if other.entry_price:\n        self.entry_price = other.entry_price\n    if other.entry_at:\n        self.entry_at = other.entry_at\n    if other.trade:\n        self.trade = other.trade\n</code></pre>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestTrade","title":"BackTestTrade","text":"<pre><code>BackTestTrade(\n    id: str,\n    exchange: Exchange,\n    data: DataFeed,\n    size: float,\n    parent: Order,\n    tag: object = \"\",\n    state: TradeState = TradeState.Open,\n    entry_price: Optional[float] = None,\n    entry_fee: float = 0.0,\n    entry_at: Optional[Timestamp] = None,\n    sl_order: Optional[Order] = None,\n    tp_order: Optional[Order] = None,\n)\n</code></pre> <p>               Bases: <code>Trade</code></p> <p>Trade for backtesting</p> Source code in <code>lettrade/exchange/trade.py</code> <pre><code>def __init__(\n    self,\n    id: str,\n    exchange: \"Exchange\",\n    data: \"DataFeed\",\n    size: float,\n    parent: \"Order\",\n    tag: object = \"\",\n    state: TradeState = TradeState.Open,\n    entry_price: Optional[float] = None,\n    entry_fee: float = 0.0,\n    entry_at: Optional[pd.Timestamp] = None,\n    sl_order: Optional[Order] = None,\n    tp_order: Optional[Order] = None,\n):\n    super().__init__(\n        id=id,\n        exchange=exchange,\n        data=data,\n        size=size,\n    )\n    self._account: \"Account\" = self.exchange._account\n\n    self.state: TradeState = state\n    self.tag: object = tag\n    self.parent: \"Order\" = parent\n\n    self.entry_price: Optional[float] = entry_price\n    self.entry_fee: float = entry_fee\n    self.entry_at: Optional[pd.Timestamp] = entry_at\n\n    self.exit_price: Optional[float] = None\n    self.exit_fee: float = 0.0\n    self.exit_at: Optional[pd.Timestamp] = None\n    self.exit_pl: Optional[float] = None\n\n    self.sl_order: Optional[Order] = sl_order\n    self.tp_order: Optional[Order] = tp_order\n</code></pre>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestTrade.fee","title":"fee  <code>property</code>","text":"<pre><code>fee: float\n</code></pre> <p>Fee/Estimate Fee for trade</p> <p>Returns:</p> <ul> <li> <code>float</code> (              <code>float</code> )          \u2013            <p>Fee</p> </li> </ul>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestTrade.is_exited","title":"is_exited  <code>property</code>","text":"<pre><code>is_exited: bool\n</code></pre> <p>Flag to check Trade state.</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True if the trade exited</p> </li> </ul>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestTrade.is_long","title":"is_long  <code>property</code>","text":"<pre><code>is_long: bool\n</code></pre> <p>True if side is long (size is positive).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True/False</p> </li> </ul>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestTrade.is_short","title":"is_short  <code>property</code>","text":"<pre><code>is_short: bool\n</code></pre> <p>True if side is short (size is negative).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestTrade.pl","title":"pl  <code>property</code>","text":"<pre><code>pl: float\n</code></pre> <p>Estimate Profit or Loss of Trade</p> <p>Returns:</p> <ul> <li> <code>float</code> (              <code>float</code> )          \u2013            <p>PnL</p> </li> </ul>"},{"location":"reference/exchange/backtest/extra/","title":"Index","text":""},{"location":"reference/exchange/backtest/extra/#lettrade.exchange.backtest.extra","title":"extra","text":""},{"location":"reference/exchange/backtest/extra/yfinance/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> yfinance","text":""},{"location":"reference/exchange/backtest/extra/yfinance/#lettrade.exchange.backtest.extra.yfinance","title":"yfinance","text":""},{"location":"reference/exchange/backtest/plotly/","title":"Index","text":""},{"location":"reference/exchange/backtest/plotly/#lettrade.exchange.backtest.plotly","title":"plotly","text":""},{"location":"reference/exchange/backtest/plotly/plotly_optimize/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> plotly_optimize","text":""},{"location":"reference/exchange/backtest/plotly/plotly_optimize/#lettrade.exchange.backtest.plotly.plotly_optimize","title":"plotly_optimize","text":""},{"location":"reference/exchange/live/","title":"Index","text":""},{"location":"reference/exchange/live/#lettrade.exchange.live","title":"live","text":""},{"location":"reference/exchange/live/account/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> account","text":""},{"location":"reference/exchange/live/account/#lettrade.exchange.live.account","title":"account","text":""},{"location":"reference/exchange/live/api/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> api","text":""},{"location":"reference/exchange/live/api/#lettrade.exchange.live.api","title":"api","text":""},{"location":"reference/exchange/live/api/#lettrade.exchange.live.api.LiveAPI","title":"LiveAPI","text":"<pre><code>LiveAPI(**kwargs)\n</code></pre> <p>               Bases: <code>ABC</code></p> Source code in <code>lettrade/exchange/live/api.py</code> <pre><code>def __init__(self, **kwargs):\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/live/api/#lettrade.exchange.live.api.LiveAPI.account","title":"account  <code>abstractmethod</code>","text":"<pre><code>account()\n</code></pre> Source code in <code>lettrade/exchange/live/api.py</code> <pre><code>@abstractmethod\ndef account(self):\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/live/api/#lettrade.exchange.live.api.LiveAPI.bars","title":"bars  <code>abstractmethod</code>","text":"<pre><code>bars(**kwargs)\n</code></pre> Source code in <code>lettrade/exchange/live/api.py</code> <pre><code>@abstractmethod\ndef bars(self, **kwargs):\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/live/api/#lettrade.exchange.live.api.LiveAPI.heartbeat","title":"heartbeat  <code>abstractmethod</code>","text":"<pre><code>heartbeat()\n</code></pre> Source code in <code>lettrade/exchange/live/api.py</code> <pre><code>@abstractmethod\ndef heartbeat(self):\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/live/api/#lettrade.exchange.live.api.LiveAPI.init","title":"init","text":"<pre><code>init(**kwargs)\n</code></pre> Source code in <code>lettrade/exchange/live/api.py</code> <pre><code>def init(self, **kwargs):\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/live/api/#lettrade.exchange.live.api.LiveAPI.market","title":"market  <code>abstractmethod</code>","text":"<pre><code>market(symbol: str)\n</code></pre> Source code in <code>lettrade/exchange/live/api.py</code> <pre><code>@abstractmethod\ndef market(self, symbol: str):\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/live/api/#lettrade.exchange.live.api.LiveAPI.markets","title":"markets  <code>abstractmethod</code>","text":"<pre><code>markets(symbols: list[str])\n</code></pre> Source code in <code>lettrade/exchange/live/api.py</code> <pre><code>@abstractmethod\ndef markets(self, symbols: list[str]):\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/live/api/#lettrade.exchange.live.api.LiveAPI.multiprocess","title":"multiprocess  <code>classmethod</code>","text":"<pre><code>multiprocess(kwargs: dict, **other_kwargs)\n</code></pre> Source code in <code>lettrade/exchange/live/api.py</code> <pre><code>@classmethod\ndef multiprocess(cls, kwargs: dict, **other_kwargs):\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/live/api/#lettrade.exchange.live.api.LiveAPI.next","title":"next","text":"<pre><code>next()\n</code></pre> Source code in <code>lettrade/exchange/live/api.py</code> <pre><code>def next(self):\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/live/api/#lettrade.exchange.live.api.LiveAPI.order_close","title":"order_close  <code>abstractmethod</code>","text":"<pre><code>order_close(order: LiveOrder, **kwargs)\n</code></pre> Source code in <code>lettrade/exchange/live/api.py</code> <pre><code>@abstractmethod\ndef order_close(self, order: \"LiveOrder\", **kwargs):\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/live/api/#lettrade.exchange.live.api.LiveAPI.order_open","title":"order_open  <code>abstractmethod</code>","text":"<pre><code>order_open(**kwargs)\n</code></pre> Source code in <code>lettrade/exchange/live/api.py</code> <pre><code>@abstractmethod\ndef order_open(self, **kwargs):\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/live/api/#lettrade.exchange.live.api.LiveAPI.order_update","title":"order_update  <code>abstractmethod</code>","text":"<pre><code>order_update(order: LiveOrder, sl=None, tp=None, **kwargs)\n</code></pre> Source code in <code>lettrade/exchange/live/api.py</code> <pre><code>@abstractmethod\ndef order_update(self, order: \"LiveOrder\", sl=None, tp=None, **kwargs):\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/live/api/#lettrade.exchange.live.api.LiveAPI.orders_get","title":"orders_get  <code>abstractmethod</code>","text":"<pre><code>orders_get(**kwargs)\n</code></pre> Source code in <code>lettrade/exchange/live/api.py</code> <pre><code>@abstractmethod\ndef orders_get(self, **kwargs):\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/live/api/#lettrade.exchange.live.api.LiveAPI.orders_total","title":"orders_total  <code>abstractmethod</code>","text":"<pre><code>orders_total()\n</code></pre> Source code in <code>lettrade/exchange/live/api.py</code> <pre><code>@abstractmethod\ndef orders_total(self):\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/live/api/#lettrade.exchange.live.api.LiveAPI.start","title":"start","text":"<pre><code>start(callbacker=None)\n</code></pre> Source code in <code>lettrade/exchange/live/api.py</code> <pre><code>def start(self, callbacker=None):\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/live/api/#lettrade.exchange.live.api.LiveAPI.stop","title":"stop","text":"<pre><code>stop()\n</code></pre> Source code in <code>lettrade/exchange/live/api.py</code> <pre><code>def stop(self):\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/live/api/#lettrade.exchange.live.api.LiveAPI.tick_get","title":"tick_get  <code>abstractmethod</code>","text":"<pre><code>tick_get(symbol)\n</code></pre> Source code in <code>lettrade/exchange/live/api.py</code> <pre><code>@abstractmethod\ndef tick_get(self, symbol):\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/live/api/#lettrade.exchange.live.api.LiveAPI.trade_update","title":"trade_update  <code>abstractmethod</code>","text":"<pre><code>trade_update(trade: LiveTrade, sl=None, tp=None, **kwargs)\n</code></pre> Source code in <code>lettrade/exchange/live/api.py</code> <pre><code>@abstractmethod\ndef trade_update(self, trade: \"LiveTrade\", sl=None, tp=None, **kwargs):\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/live/api/#lettrade.exchange.live.api.LiveAPI.trades_get","title":"trades_get  <code>abstractmethod</code>","text":"<pre><code>trades_get(**kwargs)\n</code></pre> Source code in <code>lettrade/exchange/live/api.py</code> <pre><code>@abstractmethod\ndef trades_get(self, **kwargs):\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/live/api/#lettrade.exchange.live.api.LiveAPI.trades_total","title":"trades_total  <code>abstractmethod</code>","text":"<pre><code>trades_total()\n</code></pre> Source code in <code>lettrade/exchange/live/api.py</code> <pre><code>@abstractmethod\ndef trades_total(self):\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/live/data/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> data","text":""},{"location":"reference/exchange/live/data/#lettrade.exchange.live.data","title":"data","text":""},{"location":"reference/exchange/live/data/#lettrade.exchange.live.data.LiveDataFeed","title":"LiveDataFeed","text":"<pre><code>LiveDataFeed(\n    symbol: str,\n    timeframe: str | int | Timedelta,\n    name: Optional[str] = None,\n    api: Optional[LiveAPI] = None,\n    **kwargs\n)\n</code></pre> <p>               Bases: <code>DataFeed</code></p> Source code in <code>lettrade/exchange/live/data.py</code> <pre><code>def __init__(\n    self,\n    symbol: str,\n    timeframe: str | int | pd.Timedelta,\n    name: Optional[str] = None,\n    api: Optional[LiveAPI] = None,\n    **kwargs,\n) -&gt; None:\n    super().__init__(\n        name=name or f\"{symbol}_{timeframe}\",\n        timeframe=timeframe,\n        columns=[\"open\", \"high\", \"low\", \"close\", \"volume\"],\n        **kwargs,\n    )\n    self.meta.update(dict(symbol=symbol))\n\n    if api is not None:\n        self._api = api\n</code></pre>"},{"location":"reference/exchange/live/data/#lettrade.exchange.live.data.LiveDataFeed.bars","title":"bars","text":"<pre><code>bars(\n    since: int | str | Timestamp, to: int | str | Timestamp\n) -&gt; list\n</code></pre> <p>Get bars from LiveAPI</p> <p>Parameters:</p> <ul> <li> <code>since</code>               (<code>int | str | Timestamp</code>)           \u2013            <p>description</p> </li> <li> <code>to</code>               (<code>int | str | Timestamp</code>)           \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list</code> (              <code>list</code> )          \u2013            <p>list of bar</p> </li> </ul> Source code in <code>lettrade/exchange/live/data.py</code> <pre><code>def bars(\n    self,\n    since: int | str | pd.Timestamp,\n    to: int | str | pd.Timestamp,\n) -&gt; list:\n    \"\"\"Get bars from LiveAPI\n\n    Args:\n        since (int | str | pd.Timestamp): _description_\n        to (int | str | pd.Timestamp): _description_\n\n    Returns:\n        list: list of bar\n    \"\"\"\n    return self._api.bars(\n        symbol=self.symbol,\n        timeframe=self.timeframe.string,\n        since=since,\n        to=to,\n    )\n</code></pre>"},{"location":"reference/exchange/live/data/#lettrade.exchange.live.data.LiveDataFeed.bars_load","title":"bars_load","text":"<pre><code>bars_load(\n    since: int | str | Timestamp, to: int | str | Timestamp\n) -&gt; bool\n</code></pre> <p>Get bar and push to DataFeed</p> <p>Parameters:</p> <ul> <li> <code>since</code>               (<code>int | str | Timestamp</code>)           \u2013            <p>description</p> </li> <li> <code>to</code>               (<code>int | str | Timestamp</code>)           \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True if has data, False if no data</p> </li> </ul> Source code in <code>lettrade/exchange/live/data.py</code> <pre><code>def bars_load(\n    self,\n    since: int | str | pd.Timestamp,\n    to: int | str | pd.Timestamp,\n) -&gt; bool:\n    \"\"\"Get bar and push to DataFeed\n\n    Args:\n        since (int | str | pd.Timestamp): _description_\n        to (int | str | pd.Timestamp): _description_\n\n    Returns:\n        bool: True if has data, False if no data\n    \"\"\"\n    bars = self.bars(since=since, to=to)\n\n    if len(bars) == 0:\n        logger.warning(\"No bars data for %s\", self.name)\n        return False\n\n    self.push(bars)\n    return True\n</code></pre>"},{"location":"reference/exchange/live/data/#lettrade.exchange.live.data.LiveDataFeed.instance","title":"instance  <code>classmethod</code>","text":"<pre><code>instance(\n    api: Optional[LiveAPI] = None,\n    api_kwargs: Optional[dict] = None,\n    **kwargs\n) -&gt; LiveDataFeed\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>api</code>               (<code>LiveAPI</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>api_kwargs</code>               (<code>dict</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>Missing api requirement</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>LiveDataFeed</code> (              <code>LiveDataFeed</code> )          \u2013            <p>DataFeed object</p> </li> </ul> Source code in <code>lettrade/exchange/live/data.py</code> <pre><code>@classmethod\ndef instance(\n    cls,\n    api: Optional[LiveAPI] = None,\n    api_kwargs: Optional[dict] = None,\n    **kwargs,\n) -&gt; \"LiveDataFeed\":\n    \"\"\"_summary_\n\n    Args:\n        api (LiveAPI, optional): _description_. Defaults to None.\n        api_kwargs (dict, optional): _description_. Defaults to None.\n\n    Raises:\n        RuntimeError: Missing api requirement\n\n    Returns:\n        LiveDataFeed: DataFeed object\n    \"\"\"\n    if api is None:\n        if api_kwargs is None:\n            raise RuntimeError(\"api or api_kwargs cannot missing\")\n        api = cls._api_cls(**api_kwargs)\n    obj = cls(api=api, **kwargs)\n    return obj\n</code></pre>"},{"location":"reference/exchange/live/exchange/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> exchange","text":""},{"location":"reference/exchange/live/exchange/#lettrade.exchange.live.exchange","title":"exchange","text":""},{"location":"reference/exchange/live/exchange/#lettrade.exchange.live.exchange.LiveExchange","title":"LiveExchange","text":"<pre><code>LiveExchange(api: LiveAPI, *args, **kwargs)\n</code></pre> <p>               Bases: <code>Exchange</code></p> <p>MetaTrade 5 exchange module for <code>lettrade</code></p> <p>Parameters:</p> <ul> <li> <code>api</code>               (<code>LiveAPI</code>)           \u2013            <p>API connect to rpyc MeTrader 5 Terminal server through module <code>mt5linux</code></p> </li> <li> <code>*args</code>               (<code>list</code>, default:                   <code>()</code> )           \u2013            <p><code>Exchange</code> list parameters</p> </li> <li> <code>**kwargs</code>               (<code>dict</code>, default:                   <code>{}</code> )           \u2013            <p><code>Exchange</code> dict parameters</p> </li> </ul> Source code in <code>lettrade/exchange/live/exchange.py</code> <pre><code>def __init__(self, api: LiveAPI, *args, **kwargs):\n    \"\"\"_summary_\n\n    Args:\n        api (LiveAPI): API connect to rpyc MeTrader 5 Terminal server through module `mt5linux`\n        *args (list): `Exchange` list parameters\n        **kwargs (dict): `Exchange` dict parameters\n    \"\"\"\n    super().__init__(*args, **kwargs)\n    self._api = api\n</code></pre>"},{"location":"reference/exchange/live/exchange/#lettrade.exchange.live.exchange.LiveExchange.data","title":"data  <code>instance-attribute</code>","text":"<pre><code>data: DataFeed\n</code></pre> <p>main DataFeed</p>"},{"location":"reference/exchange/live/exchange/#lettrade.exchange.live.exchange.LiveExchange.datas","title":"datas  <code>instance-attribute</code>","text":"<pre><code>datas: list[DataFeed]\n</code></pre> <p>List of all available DataFeed</p>"},{"location":"reference/exchange/live/exchange/#lettrade.exchange.live.exchange.LiveExchange.executes","title":"executes  <code>instance-attribute</code>","text":"<pre><code>executes: dict[str, Execute] = dict()\n</code></pre> <p>Execute dict by <code>Execute.id</code> key</p>"},{"location":"reference/exchange/live/exchange/#lettrade.exchange.live.exchange.LiveExchange.history_orders","title":"history_orders  <code>instance-attribute</code>","text":"<pre><code>history_orders: dict[str, Order] = dict()\n</code></pre> <p>History Order dict by <code>Order.id</code> key</p>"},{"location":"reference/exchange/live/exchange/#lettrade.exchange.live.exchange.LiveExchange.history_trades","title":"history_trades  <code>instance-attribute</code>","text":"<pre><code>history_trades: dict[str, Trade] = dict()\n</code></pre> <p>History Order dict by <code>Order.id</code> key</p>"},{"location":"reference/exchange/live/exchange/#lettrade.exchange.live.exchange.LiveExchange.orders","title":"orders  <code>instance-attribute</code>","text":"<pre><code>orders: dict[str, Order] = dict()\n</code></pre> <p>Available Order dict by <code>Order.id</code> key</p>"},{"location":"reference/exchange/live/exchange/#lettrade.exchange.live.exchange.LiveExchange.positions","title":"positions  <code>instance-attribute</code>","text":"<pre><code>positions: dict[str, Position] = dict()\n</code></pre> <p>Available Position dict by <code>Position.id</code> key</p>"},{"location":"reference/exchange/live/exchange/#lettrade.exchange.live.exchange.LiveExchange.trades","title":"trades  <code>instance-attribute</code>","text":"<pre><code>trades: dict[str, Trade] = dict()\n</code></pre> <p>Available Trade dict by <code>Trade.id</code> key</p>"},{"location":"reference/exchange/live/exchange/#lettrade.exchange.live.exchange.LiveExchange.init","title":"init","text":"<pre><code>init(\n    brain: Brain,\n    feeder: DataFeeder,\n    account: Account,\n    commander: Commander,\n) -&gt; None\n</code></pre> <p>Init Exchange dependencies. Set data/datas from feeder. Set state to <code>ExchangeState.Start</code>.</p> <p>Parameters:</p> <ul> <li> <code>brain</code>               (<code>Brain</code>)           \u2013            <p>description</p> </li> <li> <code>feeder</code>               (<code>DataFeeder</code>)           \u2013            <p>description</p> </li> <li> <code>account</code>               (<code>Account</code>)           \u2013            <p>description</p> </li> <li> <code>commander</code>               (<code>Commander</code>)           \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def init(\n    self,\n    brain: \"Brain\",\n    feeder: DataFeeder,\n    account: Account,\n    commander: Commander,\n) -&gt; None:\n    \"\"\"Init Exchange dependencies.\n    Set data/datas from feeder.\n    Set state to `ExchangeState.Start`.\n\n    Args:\n        brain (Brain): _description_\n        feeder (DataFeeder): _description_\n        account (Account): _description_\n        commander (Commander): _description_\n    \"\"\"\n    self._brain = brain\n    self._feeder = feeder\n    self._account = account\n    self._commander = commander\n\n    self.data = self._feeder.data\n    self.datas = self._feeder.datas\n\n    self._account.init(exchange=self)\n\n    self._state = ExchangeState.Start\n</code></pre>"},{"location":"reference/exchange/live/exchange/#lettrade.exchange.live.exchange.LiveExchange.new_order","title":"new_order","text":"<pre><code>new_order(\n    size: float,\n    type: Optional[OrderType] = OrderType.Market,\n    limit: Optional[float] = None,\n    stop: Optional[float] = None,\n    sl: Optional[float] = None,\n    tp: Optional[float] = None,\n    tag: Optional[str] = None,\n    data: Optional[DataFeed] = None,\n    *args,\n    **kwargs\n) -&gt; OrderResult\n</code></pre> <p>Place new order to server</p> <p>Parameters:</p> <ul> <li> <code>size</code>               (<code>float</code>)           \u2013            <p>description</p> </li> <li> <code>type</code>               (<code>Optional[OrderType]</code>, default:                   <code>Market</code> )           \u2013            <p>description. Defaults to OrderType.Market.</p> </li> <li> <code>limit</code>               (<code>Optional[float]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>stop</code>               (<code>Optional[float]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>sl</code>               (<code>Optional[float]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>tp</code>               (<code>Optional[float]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>tag</code>               (<code>Optional[str]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>data</code>               (<code>Optional[DataFeed]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>OrderResult</code> (              <code>OrderResult</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/live/exchange.py</code> <pre><code>def new_order(\n    self,\n    size: float,\n    type: Optional[OrderType] = OrderType.Market,\n    limit: Optional[float] = None,\n    stop: Optional[float] = None,\n    sl: Optional[float] = None,\n    tp: Optional[float] = None,\n    tag: Optional[str] = None,\n    data: Optional[DataFeed] = None,\n    *args,\n    **kwargs\n) -&gt; OrderResult:\n    \"\"\"Place new order to server\n\n    Args:\n        size (float): _description_\n        type (Optional[OrderType], optional): _description_. Defaults to OrderType.Market.\n        limit (Optional[float], optional): _description_. Defaults to None.\n        stop (Optional[float], optional): _description_. Defaults to None.\n        sl (Optional[float], optional): _description_. Defaults to None.\n        tp (Optional[float], optional): _description_. Defaults to None.\n        tag (Optional[str], optional): _description_. Defaults to None.\n        data (Optional[DataFeed], optional): _description_. Defaults to None.\n\n    Returns:\n        OrderResult: _description_\n    \"\"\"\n    if not data:\n        data = self.data\n\n    if type == OrderType.Market:\n        limit = 0\n        stop = 0\n\n    order = LiveOrder(\n        id=-1,\n        exchange=self,\n        data=data,\n        size=size,\n        type=type,\n        limit_price=limit,\n        stop_price=stop,\n        sl_price=sl,\n        tp_price=tp,\n        tag=tag,\n        open_price=self.data.l.open[0],\n        open_at=self.data.bar(),\n    )\n    ok = order._place()\n\n    if __debug__:\n        logger.info(\"New order %s at %s\", order, self.data.now)\n\n    return ok\n</code></pre>"},{"location":"reference/exchange/live/exchange/#lettrade.exchange.live.exchange.LiveExchange.next_next","title":"next_next","text":"<pre><code>next_next()\n</code></pre> <p>Call after strategy.next()</p> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def next_next(self):\n    \"Call after strategy.next()\"\n    self._account._equity_snapshot()\n</code></pre>"},{"location":"reference/exchange/live/exchange/#lettrade.exchange.live.exchange.LiveExchange.on_execute","title":"on_execute","text":"<pre><code>on_execute(\n    execute: Execute,\n    broadcast: Optional[bool] = True,\n    **kwargs\n) -&gt; None\n</code></pre> <p>Receive Execute event from exchange then store and notify Brain</p> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def on_execute(\n    self,\n    execute: Execute,\n    broadcast: Optional[bool] = True,\n    **kwargs,\n) -&gt; None:\n    \"\"\"\n    Receive Execute event from exchange then store and notify Brain\n    \"\"\"\n    if not isinstance(execute, Execute):\n        raise RuntimeError(f\"{execute} is not instance of type Execute\")\n\n    if execute.id in self.executes:\n        # Merge to keep Execute handler for strategy using\n        # when strategy want to store Execute object\n        # and object will be automatic update directly\n        self.executes[execute.id].merge(execute)\n        execute = self.executes[execute.id]\n    else:\n        self.executes[execute.id] = execute\n\n    if self._state != ExchangeState.Run:\n        return\n\n    if broadcast:\n        self._brain.on_execute(execute)\n</code></pre>"},{"location":"reference/exchange/live/exchange/#lettrade.exchange.live.exchange.LiveExchange.on_order","title":"on_order","text":"<pre><code>on_order(\n    order: Order, broadcast: Optional[bool] = True, **kwargs\n) -&gt; None\n</code></pre> <p>Receive Order event from exchange then store and notify Brain</p> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def on_order(\n    self,\n    order: Order,\n    broadcast: Optional[bool] = True,\n    **kwargs,\n) -&gt; None:\n    \"\"\"\n    Receive Order event from exchange then store and notify Brain\n    \"\"\"\n    if not isinstance(order, Order):\n        raise RuntimeError(f\"{order} is not instance of type Order\")\n\n    if order.state in [OrderState.Executed, OrderState.Canceled]:\n        self.history_orders[order.id] = order\n        if order.id in self.orders:\n            del self.orders[order.id]\n    else:\n        if order.id in self.history_orders:\n            raise RuntimeError(f\"Order {order.id} closed\")\n\n        if order.id in self.orders:\n            # Merge to keep Order handler for strategy using\n            # when strategy want to store Order object\n            # and object will be automatic update directly\n            self.orders[order.id].merge(order)\n            order = self.orders[order.id]\n        else:\n            self.orders[order.id] = order\n\n    if self._state != ExchangeState.Run:\n        return\n\n    if broadcast:\n        self._brain.on_order(order)\n</code></pre>"},{"location":"reference/exchange/live/exchange/#lettrade.exchange.live.exchange.LiveExchange.on_position","title":"on_position","text":"<pre><code>on_position(\n    position: Position,\n    broadcast: Optional[bool] = True,\n    *args,\n    **kwargs\n) -&gt; None\n</code></pre> <p>Receive Position event from exchange then store and notify Brain</p> <p>Parameters:</p> <ul> <li> <code>position</code>               (<code>Position</code>)           \u2013            <p>description</p> </li> <li> <code>broadcast</code>               (<code>Optional[bool]</code>, default:                   <code>True</code> )           \u2013            <p>description. Defaults to True.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>check <code>Position</code> instance</p> </li> </ul> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def on_position(\n    self,\n    position: Position,\n    broadcast: Optional[bool] = True,\n    *args,\n    **kwargs,\n) -&gt; None:\n    \"\"\"Receive Position event from exchange then store and notify Brain\n\n\n    Args:\n        position (Position): _description_\n        broadcast (Optional[bool], optional): _description_. Defaults to True.\n\n    Raises:\n        RuntimeError: check `Position` instance\n    \"\"\"\n    if not isinstance(position, Position):\n        raise RuntimeError(f\"{position} is not instance of type Position\")\n\n    if position.id in self.positions:\n        # Merge to keep Position handler for strategy using\n        # when strategy want to store Position object\n        # and object will be automatic update directly\n        self.positions[position.id].merge(position)\n    else:\n        self.positions[position.id] = position\n\n    if self._state != ExchangeState.Run:\n        return\n\n    if broadcast:\n        self._brain.on_position(position)\n</code></pre>"},{"location":"reference/exchange/live/exchange/#lettrade.exchange.live.exchange.LiveExchange.on_trade","title":"on_trade","text":"<pre><code>on_trade(\n    trade: Trade,\n    broadcast: Optional[bool] = True,\n    *args,\n    **kwargs\n) -&gt; None\n</code></pre> <p>Receive Trade event from exchange then store and notify Brain</p> <p>Parameters:</p> <ul> <li> <code>trade</code>               (<code>Trade</code>)           \u2013            <p>new comming <code>Trade</code></p> </li> <li> <code>broadcast</code>               (<code>Optional[bool]</code>, default:                   <code>True</code> )           \u2013            <p>Flag notify for Brain. Defaults to True.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>validat <code>Trade</code> instance</p> </li> </ul> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def on_trade(\n    self,\n    trade: Trade,\n    broadcast: Optional[bool] = True,\n    *args,\n    **kwargs,\n) -&gt; None:\n    \"\"\"Receive Trade event from exchange then store and notify Brain\n\n    Args:\n        trade (Trade): new comming `Trade`\n        broadcast (Optional[bool], optional): Flag notify for Brain. Defaults to True.\n\n    Raises:\n        RuntimeError: validat `Trade` instance\n    \"\"\"\n    if not isinstance(trade, Trade):\n        raise RuntimeError(f\"{trade} is not instance of type Trade\")\n\n    if trade.state == TradeState.Exit:\n        self.history_trades[trade.id] = trade\n        if trade.id in self.trades:\n            del self.trades[trade.id]\n\n        self._account._on_trade_exit(trade)\n    else:\n        if trade.id in self.history_trades:\n            raise RuntimeError(f\"Order {trade.id} closed\")\n        if trade.id in self.trades:\n            # Merge to keep Trade handler for strategy using\n            # when strategy want to store Trade object\n            # and object will be automatic update directly\n            self.trades[trade.id].merge(trade)\n            trade = self.trades[trade.id]\n        else:\n            self.trades[trade.id] = trade\n\n    if self._state != ExchangeState.Run:\n        return\n\n    if broadcast:\n        self._brain.on_trade(trade)\n</code></pre>"},{"location":"reference/exchange/live/exchange/#lettrade.exchange.live.exchange.LiveExchange.start","title":"start","text":"<pre><code>start() -&gt; None\n</code></pre> <p>Start Live exchange by: Sync orders from server, Sync trades from server</p> Source code in <code>lettrade/exchange/live/exchange.py</code> <pre><code>def start(self) -&gt; None:\n    \"\"\"Start Live exchange by: Sync orders from server, Sync trades from server\"\"\"\n    self._api.start(callbacker=self)\n    return super().start()\n</code></pre>"},{"location":"reference/exchange/live/exchange/#lettrade.exchange.live.exchange.LiveExchange.stop","title":"stop","text":"<pre><code>stop() -&gt; None\n</code></pre> <p>Stop Exchange</p> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def stop(self) -&gt; None:\n    \"\"\"Stop Exchange\"\"\"\n    self._state = ExchangeState.Stop\n    self._account.stop()\n</code></pre>"},{"location":"reference/exchange/live/feeder/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> feeder","text":""},{"location":"reference/exchange/live/feeder/#lettrade.exchange.live.feeder","title":"feeder","text":""},{"location":"reference/exchange/live/feeder/#lettrade.exchange.live.feeder.LiveDataFeeder","title":"LiveDataFeeder","text":"<pre><code>LiveDataFeeder(api: LiveAPI, tick: bool = 5)\n</code></pre> <p>               Bases: <code>DataFeeder</code></p> <pre><code>tick == 0: wait until new bar change value\ntick &gt; 0: sleep tick time (in seconds) then update\n</code></pre> Source code in <code>lettrade/exchange/live/feeder.py</code> <pre><code>def __init__(self, api: LiveAPI, tick: bool = 5) -&gt; None:\n    \"\"\"\n    tick:\n        tick &lt; 0: no tick, just get completed bar\n        tick == 0: wait until new bar change value\n        tick &gt; 0: sleep tick time (in seconds) then update\n    \"\"\"\n    super().__init__()\n    self._api = api\n    self._tick = tick\n\n    if isinstance(self._tick, int):\n        self._wait_timeframe = TimeFrame(f\"{self._tick}s\")\n    else:\n        self._wait_timeframe = None\n</code></pre>"},{"location":"reference/exchange/live/feeder/#lettrade.exchange.live.feeder.LiveDataFeeder.is_continous","title":"is_continous  <code>property</code>","text":"<pre><code>is_continous\n</code></pre> <p>Flag check is realtime continous datafeeder</p>"},{"location":"reference/exchange/live/feeder/#lettrade.exchange.live.feeder.LiveDataFeeder.instance","title":"instance  <code>classmethod</code>","text":"<pre><code>instance(\n    api: Optional[LiveAPI] = None,\n    api_kwargs: Optional[dict] = None,\n    **kwargs\n) -&gt; LiveDataFeed\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>api</code>               (<code>LiveAPI</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>api_kwargs</code>               (<code>dict</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>Missing api requirement</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>LiveDataFeed</code> (              <code>LiveDataFeed</code> )          \u2013            <p>DataFeed object</p> </li> </ul> Source code in <code>lettrade/exchange/live/feeder.py</code> <pre><code>@classmethod\ndef instance(\n    cls,\n    api: Optional[LiveAPI] = None,\n    api_kwargs: Optional[dict] = None,\n    **kwargs,\n) -&gt; \"LiveDataFeed\":\n    \"\"\"_summary_\n\n    Args:\n        api (LiveAPI, optional): _description_. Defaults to None.\n        api_kwargs (dict, optional): _description_. Defaults to None.\n\n    Raises:\n        RuntimeError: Missing api requirement\n\n    Returns:\n        LiveDataFeed: DataFeed object\n    \"\"\"\n    if api is None:\n        if api_kwargs is None:\n            raise RuntimeError(\"api or api_kwargs cannot missing\")\n        api = cls._api_cls(**api_kwargs)\n    obj = cls(api=api, **kwargs)\n    return obj\n</code></pre>"},{"location":"reference/exchange/live/live/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> live","text":""},{"location":"reference/exchange/live/live/#lettrade.exchange.live.live","title":"live","text":""},{"location":"reference/exchange/live/live/#lettrade.exchange.live.live.LetTradeLive","title":"LetTradeLive","text":"<pre><code>LetTradeLive(\n    strategy: Type[Strategy],\n    datas: DataFeed | list[DataFeed] | str | list[str],\n    feeder: Type[DataFeeder],\n    exchange: Type[Exchange],\n    account: Type[Account],\n    commander: Optional[Type[Commander]] = None,\n    plotter: Optional[Type[Plotter]] = None,\n    stats: Optional[Type[BotStatistic]] = None,\n    name: Optional[str] = None,\n    bot: Optional[Type[LetTradeBot]] = LetTradeBot,\n    **kwargs\n)\n</code></pre> <p>               Bases: <code>LetTrade</code></p> <p>Help to maintain live bots</p> Source code in <code>lettrade/lettrade.py</code> <pre><code>def __init__(\n    self,\n    strategy: Type[Strategy],\n    datas: DataFeed | list[DataFeed] | str | list[str],\n    feeder: Type[DataFeeder],\n    exchange: Type[Exchange],\n    account: Type[Account],\n    commander: Optional[Type[Commander]] = None,\n    plotter: Optional[Type[Plotter]] = None,\n    stats: Optional[Type[BotStatistic]] = None,\n    name: Optional[str] = None,\n    bot: Optional[Type[LetTradeBot]] = LetTradeBot,\n    **kwargs,\n) -&gt; None:\n    self._kwargs = kwargs\n    self._kwargs[\"strategy_cls\"] = strategy\n    self._kwargs[\"feeder_cls\"] = feeder\n    self._kwargs[\"exchange_cls\"] = exchange\n    self._kwargs[\"account_cls\"] = account\n    self._kwargs[\"commander_cls\"] = commander\n    self._kwargs[\"plotter_cls\"] = plotter\n    self._kwargs[\"stats_cls\"] = stats\n    self._kwargs[\"bot_cls\"] = bot\n    self._kwargs[\"name\"] = name\n\n    self._kwargs[\"datas\"] = self._init_datafeeds(datas)\n</code></pre>"},{"location":"reference/exchange/live/live/#lettrade.exchange.live.live.LetTradeLive.plot","title":"plot","text":"<pre><code>plot(*args, jump: Optional[dict] = None, **kwargs)\n</code></pre> <p>Plot strategy/optimize result</p> BotPlotter <p>Miror of BotPlotter.plot(). Plotly implement Plotly.plot().</p> <p>Args:     <code>jump</code> (Optional[dict], optional): Miror of BotPlotter.jump()</p> <p>Example:     - Jump to trade_id         <pre><code>lt.plot(\n    jump=dict(trade_id=1, range=300),\n    layout=dict(height=2000),\n)\n</code></pre></p> OptimizePlotter <p>Miror of OptimizePlotter.plot().</p> <p>Example:     -         <pre><code>lt.plot(layout=dict(height=2000))\n</code></pre></p> Source code in <code>lettrade/lettrade.py</code> <pre><code>def plot(self, *args, jump: Optional[dict] = None, **kwargs):\n    \"\"\"Plot strategy/optimize result\n\n    BotPlotter:\n        Miror of [BotPlotter.plot()](site:/reference/plot/bot/#lettrade.plot.bot.BotPlotter.plot).\n        Plotly implement [Plotly.plot()](site:/reference/plot/plotly/plotly/#lettrade.plot.plotly.plotly.PlotlyBotPlotter.plot).\n\n        Args:\n            `jump` (Optional[dict], optional): Miror of [BotPlotter.jump()](site:/reference/plot/bot/#lettrade.plot.bot.BotPlotter.jump)\n\n        Example:\n            - Jump to trade_id\n                ```python\n                lt.plot(\n                    jump=dict(trade_id=1, range=300),\n                    layout=dict(height=2000),\n                )\n                ```\n\n    OptimizePlotter:\n        Miror of [OptimizePlotter.plot()](site:/reference/plot/optimize/#lettrade.plot.optimize.OptimizePlotter.plot).\n\n        Example:\n            -\n                ```python\n                lt.plot(layout=dict(height=2000))\n                ```\n    \"\"\"\n    if __debug__:\n        from .utils.docs import is_docs_session\n\n        if is_docs_session():\n            return\n\n    self.plotter.plot(*args, jump=jump, **kwargs)\n</code></pre>"},{"location":"reference/exchange/live/live/#lettrade.exchange.live.live.LetTradeLive.run","title":"run","text":"<pre><code>run(worker: Optional[int] = None, **kwargs)\n</code></pre> <p>Run strategy in single or multiple processing</p> <p>Parameters:</p> <ul> <li> <code>worker</code>               (<code>Optional[int]</code>, default:                   <code>None</code> )           \u2013            <p>Number of processing. Defaults to None.</p> </li> </ul> Source code in <code>lettrade/lettrade.py</code> <pre><code>def run(self, worker: Optional[int] = None, **kwargs):\n    \"\"\"Run strategy in single or multiple processing\n\n    Args:\n        worker (Optional[int], optional): Number of processing. Defaults to None.\n    \"\"\"\n    if worker or isinstance(self.data, list):\n        if not isinstance(self.data, list):\n            # self.data = self.datas\n            self.datas = [self.data]\n\n        worker = self._max_workers(worker)\n\n        self._multiprocess()\n\n        datas_source = self._kwargs.pop(\"datas\")\n        with ProcessPoolExecutor(max_workers=worker) as executor:\n            futures = [\n                executor.submit(\n                    self._bot_cls.run_bot,\n                    datas=datas,\n                    id=i,\n                    result=\"str\",\n                    **self._kwargs,\n                )\n                for i, datas in enumerate(datas_source)\n            ]\n            for future in futures:\n                result = future.result()\n                print(result)\n    else:\n        self._bot = self._bot_cls.run_bot(\n            bot=self._bot,\n            result=\"bot\",\n            **self._kwargs,\n        )\n        print(str(self._bot.stats))\n</code></pre>"},{"location":"reference/exchange/live/live/#lettrade.exchange.live.live.LetTradeLive.stop","title":"stop","text":"<pre><code>stop()\n</code></pre> <p>Stop strategy</p> Source code in <code>lettrade/lettrade.py</code> <pre><code>def stop(self):\n    \"\"\"Stop strategy\"\"\"\n    if self._bot is not None:\n        return self._bot.stop()\n    if self.stats:\n        self.stats.stop()\n</code></pre>"},{"location":"reference/exchange/live/live/#lettrade.exchange.live.live.let_live","title":"let_live","text":"<pre><code>let_live(\n    strategy: Type[Strategy],\n    datas: set[set[str]],\n    commander: Optional[Commander] = None,\n    plotter: Optional[Type[Plotter]] = None,\n    stats: Optional[Type[BotStatistic]] = BotStatistic,\n    lettrade: Optional[Type[LetTradeLive]] = LetTradeLive,\n    bot: Optional[Type[LetTradeLiveBot]] = LetTradeLiveBot,\n    api: Optional[Type[LiveAPI]] = LiveAPI,\n    **kwargs\n) -&gt; LetTradeLive\n</code></pre> <p>Help to build <code>LetTradeLive</code></p> <p>Parameters:</p> <ul> <li> <code>strategy</code>               (<code>Type[Strategy]</code>)           \u2013            <p>description</p> </li> <li> <code>datas</code>               (<code>set[set[str]]</code>)           \u2013            <p>description</p> </li> <li> <code>commander</code>               (<code>Optional[Commander]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>plotter</code>               (<code>Optional[Type[Plotter]]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>stats</code>               (<code>Optional[Type[BotStatistic]]</code>, default:                   <code>BotStatistic</code> )           \u2013            <p>description. Defaults to BotStatistic.</p> </li> <li> <code>api</code>               (<code>Optional[Type[LiveAPI]]</code>, default:                   <code>LiveAPI</code> )           \u2013            <p>description. Defaults to LiveAPI.</p> </li> <li> <code>bot</code>               (<code>Optional[Type[LetTradeLiveBot]]</code>, default:                   <code>LetTradeLiveBot</code> )           \u2013            <p>description. Defaults to LetTradeLiveBot.</p> </li> <li> <code>lettrade</code>               (<code>Optional[Type[LetTradeLive]]</code>, default:                   <code>LetTradeLive</code> )           \u2013            <p>description. Defaults to LetTradeLive.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>LetTradeLive</code> (              <code>LetTradeLive</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/live/live.py</code> <pre><code>def let_live(\n    strategy: Type[Strategy],\n    datas: set[set[str]],\n    commander: Optional[Commander] = None,\n    plotter: Optional[Type[Plotter]] = None,\n    stats: Optional[Type[BotStatistic]] = BotStatistic,\n    lettrade: Optional[Type[LetTradeLive]] = LetTradeLive,\n    bot: Optional[Type[LetTradeLiveBot]] = LetTradeLiveBot,\n    api: Optional[Type[LiveAPI]] = LiveAPI,\n    **kwargs,\n) -&gt; \"LetTradeLive\":\n    \"\"\"Help to build `LetTradeLive`\n\n    Args:\n        strategy (Type[Strategy]): _description_\n        datas (set[set[str]]): _description_\n        commander (Optional[Commander], optional): _description_. Defaults to None.\n        plotter (Optional[Type[Plotter]], optional): _description_. Defaults to None.\n        stats (Optional[Type[BotStatistic]], optional): _description_. Defaults to BotStatistic.\n        api (Optional[Type[LiveAPI]], optional): _description_. Defaults to LiveAPI.\n        bot (Optional[Type[LetTradeLiveBot]], optional): _description_. Defaults to LetTradeLiveBot.\n        lettrade (Optional[Type[LetTradeLive]], optional): _description_. Defaults to LetTradeLive.\n\n    Returns:\n        LetTradeLive: _description_\n    \"\"\"\n    return lettrade(\n        strategy=strategy,\n        datas=datas,\n        commander=commander,\n        plotter=plotter,\n        stats=stats,\n        bot=bot,\n        api=api,\n        **kwargs,\n    )\n</code></pre>"},{"location":"reference/exchange/live/trade/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> trade","text":""},{"location":"reference/exchange/live/trade/#lettrade.exchange.live.trade","title":"trade","text":""},{"location":"reference/exchange/live/trade/#lettrade.exchange.live.trade.LiveExecute","title":"LiveExecute","text":"<pre><code>LiveExecute(\n    id: str,\n    exchange: LiveExchange,\n    data: DataFeed,\n    size: float,\n    price: float,\n    at: float,\n    order_id: Optional[str] = None,\n    order: Optional[Order] = None,\n    trade_id: Optional[str] = None,\n    trade: Optional[Trade] = None,\n    tag: Optional[str] = \"\",\n    raw: Optional[object] = None,\n)\n</code></pre> <p>               Bases: <code>Execute</code></p> <p>Execute for Live</p> Source code in <code>lettrade/exchange/live/trade.py</code> <pre><code>def __init__(\n    self,\n    id: str,\n    exchange: \"LiveExchange\",\n    data: \"DataFeed\",\n    size: float,\n    price: float,\n    at: float,\n    order_id: Optional[str] = None,\n    order: Optional[\"Order\"] = None,\n    trade_id: Optional[str] = None,\n    trade: Optional[\"Trade\"] = None,\n    tag: Optional[str] = \"\",\n    raw: Optional[object] = None,\n):\n    super().__init__(\n        id=id,\n        exchange=exchange,\n        data=data,\n        size=size,\n        price=price,\n        at=at,\n        order_id=order_id,\n        order=order,\n        trade_id=trade_id,\n        trade=trade,\n    )\n    self.tag: str = tag\n    self.raw: object = raw\n    self._api: LiveAPI = exchange._api\n</code></pre>"},{"location":"reference/exchange/live/trade/#lettrade.exchange.live.trade.LiveExecute.is_long","title":"is_long  <code>property</code>","text":"<pre><code>is_long: bool\n</code></pre> <p>True if side is long (size is positive).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True/False</p> </li> </ul>"},{"location":"reference/exchange/live/trade/#lettrade.exchange.live.trade.LiveExecute.is_short","title":"is_short  <code>property</code>","text":"<pre><code>is_short: bool\n</code></pre> <p>True if side is short (size is negative).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/live/trade/#lettrade.exchange.live.trade.LiveExecute.from_raw","title":"from_raw  <code>classmethod</code>","text":"<pre><code>from_raw(raw, exchange: LiveExchange) -&gt; LiveExecute\n</code></pre> <p>Building new LiveExecute from live api deal object</p> <pre><code>Raw deal: TradeDeal(ticket=33889131, order=41290404, time=1715837856, time_msc=1715837856798, type=0, entry=0, magic=0, position_id=41290404, reason=0, volume=0.01, price=0.85795, commission=0.0, swap=0.0, profit=0.0, fee=0.0, symbol='EURGBP', comment='', external_id='')\n</code></pre> Source code in <code>lettrade/exchange/live/trade.py</code> <pre><code>@classmethod\ndef from_raw(cls, raw, exchange: \"LiveExchange\") -&gt; \"LiveExecute\":\n    \"\"\"\n    Building new LiveExecute from live api deal object\n\n        Raw deal: TradeDeal(ticket=33889131, order=41290404, time=1715837856, time_msc=1715837856798, type=0, entry=0, magic=0, position_id=41290404, reason=0, volume=0.01, price=0.85795, commission=0.0, swap=0.0, profit=0.0, fee=0.0, symbol='EURGBP', comment='', external_id='')\n    \"\"\"\n\n    return LiveExecute(\n        exchange=exchange,\n        id=raw.ticket,\n        # TODO: Fix by get data from symbol\n        data=exchange.data,\n        # TODO: size and type from raw.type\n        size=raw.volume,\n        price=raw.price,\n        # TODO: set bar time\n        at=None,\n        order_id=raw.order,\n        trade_id=raw.position_id,\n        tag=raw.comment,\n        raw=raw,\n    )\n</code></pre>"},{"location":"reference/exchange/live/trade/#lettrade.exchange.live.trade.LiveExecute.merge","title":"merge","text":"<pre><code>merge(other: Execute)\n</code></pre> <p>Merge to keep object handler but not overwrite for Strategy using when Strategy want to store object and object will be automatic update directly</p> Source code in <code>lettrade/exchange/execute.py</code> <pre><code>def merge(self, other: \"Execute\"):\n    \"\"\"\n    Merge to keep object handler but not overwrite for Strategy using when Strategy want to store object and object will be automatic update directly\n    \"\"\"\n    if other is self:\n        return\n\n    if self.id != other.id:\n        raise RuntimeError(f\"Merge difference id {self.id} != {other.id} execute\")\n\n    self.price = other.price\n    self.size = other.size\n\n    if other.at:\n        self.at = other.at\n    if other.order_id:\n        self.order_id = other.order_id\n    if other.order:\n        self.order = other.order\n    if other.trade_id:\n        self.trade_id = other.trade_id\n    if other.trade:\n        self.trade = other.trade\n</code></pre>"},{"location":"reference/exchange/live/ccxt/","title":"Index","text":""},{"location":"reference/exchange/live/ccxt/#lettrade.exchange.live.ccxt","title":"ccxt","text":""},{"location":"reference/exchange/live/ccxt/api/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> api","text":""},{"location":"reference/exchange/live/ccxt/api/#lettrade.exchange.live.ccxt.api","title":"api","text":""},{"location":"reference/exchange/live/ccxt/api/#lettrade.exchange.live.ccxt.api.CCXTAPI","title":"CCXTAPI","text":"<pre><code>CCXTAPI(\n    exchange: int,\n    key: str,\n    secret: str,\n    ccxt: Optional[CCXTAPIExchange] = None,\n    **kwargs\n)\n</code></pre> <p>               Bases: <code>LiveAPI</code></p> Source code in <code>lettrade/exchange/live/ccxt/api.py</code> <pre><code>def __init__(\n    self,\n    exchange: int,\n    key: str,\n    secret: str,\n    ccxt: Optional[CCXTAPIExchange] = None,\n    **kwargs,\n):\n    # Start wine server if not inited\n    if ccxt is None:\n        ccxt = CCXTAPIExchange(exchange=exchange, key=key, secret=secret, **kwargs)\n    self._ccxt = ccxt\n</code></pre>"},{"location":"reference/exchange/live/ccxt/api/#lettrade.exchange.live.ccxt.api.CCXTAPI.account","title":"account","text":"<pre><code>account()\n</code></pre> Source code in <code>lettrade/exchange/live/ccxt/api.py</code> <pre><code>def account(self):\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/live/ccxt/api/#lettrade.exchange.live.ccxt.api.CCXTAPI.init","title":"init","text":"<pre><code>init(**kwargs)\n</code></pre> Source code in <code>lettrade/exchange/live/api.py</code> <pre><code>def init(self, **kwargs):\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/live/ccxt/api/#lettrade.exchange.live.ccxt.api.CCXTAPI.order_close","title":"order_close","text":"<pre><code>order_close(order: LiveOrder)\n</code></pre> Source code in <code>lettrade/exchange/live/ccxt/api.py</code> <pre><code>def order_close(self, order: LiveOrder):\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/live/ccxt/api/#lettrade.exchange.live.ccxt.api.CCXTAPI.order_open","title":"order_open","text":"<pre><code>order_open(order: LiveOrder)\n</code></pre> Source code in <code>lettrade/exchange/live/ccxt/api.py</code> <pre><code>def order_open(self, order: LiveOrder):\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/live/ccxt/api/#lettrade.exchange.live.ccxt.api.CCXTAPI.orders_get","title":"orders_get","text":"<pre><code>orders_get(**kwargs)\n</code></pre> Source code in <code>lettrade/exchange/live/ccxt/api.py</code> <pre><code>def orders_get(self, **kwargs):\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/live/ccxt/api/#lettrade.exchange.live.ccxt.api.CCXTAPI.orders_total","title":"orders_total","text":"<pre><code>orders_total()\n</code></pre> Source code in <code>lettrade/exchange/live/ccxt/api.py</code> <pre><code>def orders_total(self):\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/live/ccxt/api/#lettrade.exchange.live.ccxt.api.CCXTAPI.stop","title":"stop","text":"<pre><code>stop()\n</code></pre> Source code in <code>lettrade/exchange/live/ccxt/api.py</code> <pre><code>def stop(self):\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/live/ccxt/api/#lettrade.exchange.live.ccxt.api.CCXTAPI.trade_update","title":"trade_update  <code>abstractmethod</code>","text":"<pre><code>trade_update(trade: LiveTrade, sl=None, tp=None, **kwargs)\n</code></pre> Source code in <code>lettrade/exchange/live/api.py</code> <pre><code>@abstractmethod\ndef trade_update(self, trade: \"LiveTrade\", sl=None, tp=None, **kwargs):\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/live/ccxt/api/#lettrade.exchange.live.ccxt.api.CCXTAPI.trades_get","title":"trades_get","text":"<pre><code>trades_get(**kwargs)\n</code></pre> Source code in <code>lettrade/exchange/live/ccxt/api.py</code> <pre><code>def trades_get(self, **kwargs):\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/live/ccxt/api/#lettrade.exchange.live.ccxt.api.CCXTAPI.trades_total","title":"trades_total","text":"<pre><code>trades_total()\n</code></pre> Source code in <code>lettrade/exchange/live/ccxt/api.py</code> <pre><code>def trades_total(self):\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/live/ccxt/api/#lettrade.exchange.live.ccxt.api.CCXTAPIExchange","title":"CCXTAPIExchange","text":"<pre><code>CCXTAPIExchange(\n    exchange: str,\n    key: str,\n    secret: str,\n    options: dict = {},\n    sandbox: bool = True,\n    debug=False,\n)\n</code></pre> <p>Single instance across multiprocessing. Help pickle-able result and send across multiprocessing</p> Source code in <code>lettrade/exchange/live/ccxt/api.py</code> <pre><code>def __init__(\n    self,\n    exchange: str,\n    key: str,\n    secret: str,\n    options: dict = {},\n    sandbox: bool = True,\n    debug=False,\n) -&gt; None:\n    config = dict(\n        apiKey=key,\n        secret=secret,\n        enableRateLimit=True,\n        options={\n            \"sandboxMode\": sandbox,\n            \"warnOnFetchOpenOrdersWithoutSymbol\": False,\n            \"tradesLimit\": 1,\n            \"ordersLimit\": 1,\n            \"OHLCVLimit\": 1,\n        },\n    )\n    config[\"options\"].update(options)\n\n    self._exchange = getattr(ccxt, exchange)(config)\n\n    # Must call sanbox function instead of option sandboxMode\n    self._exchange.set_sandbox_mode(sandbox)\n    self._exchange.verbose = debug\n    logger.info(\"Starting exchange class: %s\", self._exchange)\n</code></pre>"},{"location":"reference/exchange/live/ccxt/ccxt/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> ccxt","text":""},{"location":"reference/exchange/live/ccxt/ccxt/#lettrade.exchange.live.ccxt.ccxt","title":"ccxt","text":""},{"location":"reference/exchange/live/ccxt/ccxt/#lettrade.exchange.live.ccxt.ccxt.CCXTAccount","title":"CCXTAccount","text":"<pre><code>CCXTAccount(api: LiveAPI, *args, **kwargs)\n</code></pre> <p>               Bases: <code>LiveAccount</code></p> <p>Account for CCXT</p> Source code in <code>lettrade/exchange/live/account.py</code> <pre><code>def __init__(self, api: LiveAPI, *args, **kwargs) -&gt; None:\n    super().__init__(*args, **kwargs)\n    self._api = api\n</code></pre>"},{"location":"reference/exchange/live/ccxt/ccxt/#lettrade.exchange.live.ccxt.ccxt.CCXTDataFeed","title":"CCXTDataFeed","text":"<pre><code>CCXTDataFeed(\n    symbol: str,\n    timeframe: str | int | Timedelta,\n    name: Optional[str] = None,\n    api: Optional[LiveAPI] = None,\n    **kwargs\n)\n</code></pre> <p>               Bases: <code>LiveDataFeed</code></p> <p>DataFeed for CCXT</p> Source code in <code>lettrade/exchange/live/data.py</code> <pre><code>def __init__(\n    self,\n    symbol: str,\n    timeframe: str | int | pd.Timedelta,\n    name: Optional[str] = None,\n    api: Optional[LiveAPI] = None,\n    **kwargs,\n) -&gt; None:\n    super().__init__(\n        name=name or f\"{symbol}_{timeframe}\",\n        timeframe=timeframe,\n        columns=[\"open\", \"high\", \"low\", \"close\", \"volume\"],\n        **kwargs,\n    )\n    self.meta.update(dict(symbol=symbol))\n\n    if api is not None:\n        self._api = api\n</code></pre>"},{"location":"reference/exchange/live/ccxt/ccxt/#lettrade.exchange.live.ccxt.ccxt.CCXTDataFeed.bars","title":"bars","text":"<pre><code>bars(\n    since: int | str | Timestamp, to: int | str | Timestamp\n) -&gt; list\n</code></pre> <p>Get bars from LiveAPI</p> <p>Parameters:</p> <ul> <li> <code>since</code>               (<code>int | str | Timestamp</code>)           \u2013            <p>description</p> </li> <li> <code>to</code>               (<code>int | str | Timestamp</code>)           \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list</code> (              <code>list</code> )          \u2013            <p>list of bar</p> </li> </ul> Source code in <code>lettrade/exchange/live/data.py</code> <pre><code>def bars(\n    self,\n    since: int | str | pd.Timestamp,\n    to: int | str | pd.Timestamp,\n) -&gt; list:\n    \"\"\"Get bars from LiveAPI\n\n    Args:\n        since (int | str | pd.Timestamp): _description_\n        to (int | str | pd.Timestamp): _description_\n\n    Returns:\n        list: list of bar\n    \"\"\"\n    return self._api.bars(\n        symbol=self.symbol,\n        timeframe=self.timeframe.string,\n        since=since,\n        to=to,\n    )\n</code></pre>"},{"location":"reference/exchange/live/ccxt/ccxt/#lettrade.exchange.live.ccxt.ccxt.CCXTDataFeed.bars_load","title":"bars_load","text":"<pre><code>bars_load(\n    since: int | str | Timestamp, to: int | str | Timestamp\n) -&gt; bool\n</code></pre> <p>Get bar and push to DataFeed</p> <p>Parameters:</p> <ul> <li> <code>since</code>               (<code>int | str | Timestamp</code>)           \u2013            <p>description</p> </li> <li> <code>to</code>               (<code>int | str | Timestamp</code>)           \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True if has data, False if no data</p> </li> </ul> Source code in <code>lettrade/exchange/live/data.py</code> <pre><code>def bars_load(\n    self,\n    since: int | str | pd.Timestamp,\n    to: int | str | pd.Timestamp,\n) -&gt; bool:\n    \"\"\"Get bar and push to DataFeed\n\n    Args:\n        since (int | str | pd.Timestamp): _description_\n        to (int | str | pd.Timestamp): _description_\n\n    Returns:\n        bool: True if has data, False if no data\n    \"\"\"\n    bars = self.bars(since=since, to=to)\n\n    if len(bars) == 0:\n        logger.warning(\"No bars data for %s\", self.name)\n        return False\n\n    self.push(bars)\n    return True\n</code></pre>"},{"location":"reference/exchange/live/ccxt/ccxt/#lettrade.exchange.live.ccxt.ccxt.CCXTDataFeed.instance","title":"instance  <code>classmethod</code>","text":"<pre><code>instance(\n    api: Optional[LiveAPI] = None,\n    api_kwargs: Optional[dict] = None,\n    **kwargs\n) -&gt; LiveDataFeed\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>api</code>               (<code>LiveAPI</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>api_kwargs</code>               (<code>dict</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>Missing api requirement</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>LiveDataFeed</code> (              <code>LiveDataFeed</code> )          \u2013            <p>DataFeed object</p> </li> </ul> Source code in <code>lettrade/exchange/live/data.py</code> <pre><code>@classmethod\ndef instance(\n    cls,\n    api: Optional[LiveAPI] = None,\n    api_kwargs: Optional[dict] = None,\n    **kwargs,\n) -&gt; \"LiveDataFeed\":\n    \"\"\"_summary_\n\n    Args:\n        api (LiveAPI, optional): _description_. Defaults to None.\n        api_kwargs (dict, optional): _description_. Defaults to None.\n\n    Raises:\n        RuntimeError: Missing api requirement\n\n    Returns:\n        LiveDataFeed: DataFeed object\n    \"\"\"\n    if api is None:\n        if api_kwargs is None:\n            raise RuntimeError(\"api or api_kwargs cannot missing\")\n        api = cls._api_cls(**api_kwargs)\n    obj = cls(api=api, **kwargs)\n    return obj\n</code></pre>"},{"location":"reference/exchange/live/ccxt/ccxt/#lettrade.exchange.live.ccxt.ccxt.CCXTDataFeeder","title":"CCXTDataFeeder","text":"<pre><code>CCXTDataFeeder(api: LiveAPI, tick: bool = 5)\n</code></pre> <p>               Bases: <code>LiveDataFeeder</code></p> <p>DataFeeder for CCXT</p> <pre><code>tick == 0: wait until new bar change value\ntick &gt; 0: sleep tick time (in seconds) then update\n</code></pre> Source code in <code>lettrade/exchange/live/feeder.py</code> <pre><code>def __init__(self, api: LiveAPI, tick: bool = 5) -&gt; None:\n    \"\"\"\n    tick:\n        tick &lt; 0: no tick, just get completed bar\n        tick == 0: wait until new bar change value\n        tick &gt; 0: sleep tick time (in seconds) then update\n    \"\"\"\n    super().__init__()\n    self._api = api\n    self._tick = tick\n\n    if isinstance(self._tick, int):\n        self._wait_timeframe = TimeFrame(f\"{self._tick}s\")\n    else:\n        self._wait_timeframe = None\n</code></pre>"},{"location":"reference/exchange/live/ccxt/ccxt/#lettrade.exchange.live.ccxt.ccxt.CCXTDataFeeder.is_continous","title":"is_continous  <code>property</code>","text":"<pre><code>is_continous\n</code></pre> <p>Flag check is realtime continous datafeeder</p>"},{"location":"reference/exchange/live/ccxt/ccxt/#lettrade.exchange.live.ccxt.ccxt.CCXTDataFeeder.instance","title":"instance  <code>classmethod</code>","text":"<pre><code>instance(\n    api: Optional[LiveAPI] = None,\n    api_kwargs: Optional[dict] = None,\n    **kwargs\n) -&gt; LiveDataFeed\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>api</code>               (<code>LiveAPI</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>api_kwargs</code>               (<code>dict</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>Missing api requirement</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>LiveDataFeed</code> (              <code>LiveDataFeed</code> )          \u2013            <p>DataFeed object</p> </li> </ul> Source code in <code>lettrade/exchange/live/feeder.py</code> <pre><code>@classmethod\ndef instance(\n    cls,\n    api: Optional[LiveAPI] = None,\n    api_kwargs: Optional[dict] = None,\n    **kwargs,\n) -&gt; \"LiveDataFeed\":\n    \"\"\"_summary_\n\n    Args:\n        api (LiveAPI, optional): _description_. Defaults to None.\n        api_kwargs (dict, optional): _description_. Defaults to None.\n\n    Raises:\n        RuntimeError: Missing api requirement\n\n    Returns:\n        LiveDataFeed: DataFeed object\n    \"\"\"\n    if api is None:\n        if api_kwargs is None:\n            raise RuntimeError(\"api or api_kwargs cannot missing\")\n        api = cls._api_cls(**api_kwargs)\n    obj = cls(api=api, **kwargs)\n    return obj\n</code></pre>"},{"location":"reference/exchange/live/ccxt/ccxt/#lettrade.exchange.live.ccxt.ccxt.CCXTExchange","title":"CCXTExchange","text":"<pre><code>CCXTExchange(api: LiveAPI, *args, **kwargs)\n</code></pre> <p>               Bases: <code>LiveExchange</code></p> <p>MetaTrade 5 exchange module for <code>lettrade</code></p> <p>Parameters:</p> <ul> <li> <code>api</code>               (<code>LiveAPI</code>)           \u2013            <p>API connect to rpyc MeTrader 5 Terminal server through module <code>mt5linux</code></p> </li> <li> <code>*args</code>               (<code>list</code>, default:                   <code>()</code> )           \u2013            <p><code>Exchange</code> list parameters</p> </li> <li> <code>**kwargs</code>               (<code>dict</code>, default:                   <code>{}</code> )           \u2013            <p><code>Exchange</code> dict parameters</p> </li> </ul> Source code in <code>lettrade/exchange/live/exchange.py</code> <pre><code>def __init__(self, api: LiveAPI, *args, **kwargs):\n    \"\"\"_summary_\n\n    Args:\n        api (LiveAPI): API connect to rpyc MeTrader 5 Terminal server through module `mt5linux`\n        *args (list): `Exchange` list parameters\n        **kwargs (dict): `Exchange` dict parameters\n    \"\"\"\n    super().__init__(*args, **kwargs)\n    self._api = api\n</code></pre>"},{"location":"reference/exchange/live/ccxt/ccxt/#lettrade.exchange.live.ccxt.ccxt.CCXTExecute","title":"CCXTExecute","text":"<pre><code>CCXTExecute(\n    id: str,\n    exchange: LiveExchange,\n    data: DataFeed,\n    size: float,\n    price: float,\n    at: float,\n    order_id: Optional[str] = None,\n    order: Optional[Order] = None,\n    trade_id: Optional[str] = None,\n    trade: Optional[Trade] = None,\n    tag: Optional[str] = \"\",\n    raw: Optional[object] = None,\n)\n</code></pre> <p>               Bases: <code>LiveExecute</code></p> <p>Execute for CCXT</p> Source code in <code>lettrade/exchange/live/trade.py</code> <pre><code>def __init__(\n    self,\n    id: str,\n    exchange: \"LiveExchange\",\n    data: \"DataFeed\",\n    size: float,\n    price: float,\n    at: float,\n    order_id: Optional[str] = None,\n    order: Optional[\"Order\"] = None,\n    trade_id: Optional[str] = None,\n    trade: Optional[\"Trade\"] = None,\n    tag: Optional[str] = \"\",\n    raw: Optional[object] = None,\n):\n    super().__init__(\n        id=id,\n        exchange=exchange,\n        data=data,\n        size=size,\n        price=price,\n        at=at,\n        order_id=order_id,\n        order=order,\n        trade_id=trade_id,\n        trade=trade,\n    )\n    self.tag: str = tag\n    self.raw: object = raw\n    self._api: LiveAPI = exchange._api\n</code></pre>"},{"location":"reference/exchange/live/ccxt/ccxt/#lettrade.exchange.live.ccxt.ccxt.CCXTOrder","title":"CCXTOrder","text":"<pre><code>CCXTOrder(\n    id: str,\n    exchange: LiveExchange,\n    data: DataFeed,\n    size: float,\n    state: OrderState = OrderState.Pending,\n    type: OrderType = OrderType.Market,\n    limit_price: Optional[float] = None,\n    stop_price: Optional[float] = None,\n    sl_price: Optional[float] = None,\n    tp_price: Optional[float] = None,\n    trade: Optional[Trade] = None,\n    tag: Optional[str] = \"\",\n    open_at: Optional[int] = None,\n    open_price: Optional[int] = None,\n)\n</code></pre> <p>               Bases: <code>LiveOrder</code></p> <p>Order for CCXT</p> Source code in <code>lettrade/exchange/live/trade.py</code> <pre><code>def __init__(\n    self,\n    id: str,\n    exchange: \"LiveExchange\",\n    data: \"DataFeed\",\n    size: float,\n    state: OrderState = OrderState.Pending,\n    type: OrderType = OrderType.Market,\n    limit_price: Optional[float] = None,\n    stop_price: Optional[float] = None,\n    sl_price: Optional[float] = None,\n    tp_price: Optional[float] = None,\n    trade: Optional[\"Trade\"] = None,\n    tag: Optional[str] = \"\",\n    open_at: Optional[int] = None,\n    open_price: Optional[int] = None,\n):\n    super().__init__(\n        id=id,\n        exchange=exchange,\n        data=data,\n        size=size,\n        state=state,\n        type=type,\n        limit_price=limit_price,\n        stop_price=stop_price,\n        sl_price=sl_price,\n        tp_price=tp_price,\n        trade=trade,\n        tag=tag,\n        open_at=open_at,\n        open_price=open_price,\n    )\n    self._api: LiveAPI = exchange._api\n\n    self.raw: dict = None\n</code></pre>"},{"location":"reference/exchange/live/ccxt/ccxt/#lettrade.exchange.live.ccxt.ccxt.CCXTTrade","title":"CCXTTrade","text":"<pre><code>CCXTTrade(\n    id: str,\n    exchange: LiveExchange,\n    data: DataFeed,\n    size: float,\n    parent: Order,\n    tag: str = \"\",\n    state: TradeState = TradeState.Open,\n    entry_price: Optional[float] = None,\n    entry_at: Optional[int] = None,\n    sl_order: Optional[Order] = None,\n    tp_order: Optional[Order] = None,\n)\n</code></pre> <p>               Bases: <code>LiveTrade</code></p> <p>Trade for CCXT</p> Source code in <code>lettrade/exchange/live/trade.py</code> <pre><code>def __init__(\n    self,\n    id: str,\n    exchange: \"LiveExchange\",\n    data: \"DataFeed\",\n    size: float,\n    parent: Order,\n    tag: str = \"\",\n    state: TradeState = TradeState.Open,\n    entry_price: Optional[float] = None,\n    entry_at: Optional[int] = None,\n    sl_order: Optional[Order] = None,\n    tp_order: Optional[Order] = None,\n):\n    super().__init__(\n        id=id,\n        exchange=exchange,\n        data=data,\n        size=size,\n        parent=parent,\n        tag=tag,\n        state=state,\n        entry_price=entry_price,\n        entry_at=entry_at,\n        sl_order=sl_order,\n        tp_order=tp_order,\n    )\n    self._api: LiveAPI = exchange._api\n</code></pre>"},{"location":"reference/exchange/live/ccxt/ccxt/#lettrade.exchange.live.ccxt.ccxt.LetTradeCCXT","title":"LetTradeCCXT","text":"<pre><code>LetTradeCCXT(\n    feeder: Type[CCXTDataFeeder] = CCXTDataFeeder,\n    exchange: Type[CCXTExchange] = CCXTExchange,\n    account: Type[CCXTAccount] = CCXTAccount,\n    **kwargs\n)\n</code></pre> <p>               Bases: <code>LetTradeLive</code></p> <p>Help to maintain CCXT bot</p> <p>Parameters:</p> <ul> <li> <code>feeder</code>               (<code>Type[CCXTDataFeeder]</code>, default:                   <code>CCXTDataFeeder</code> )           \u2013            <p>description. Defaults to CCXTDataFeeder.</p> </li> <li> <code>exchange</code>               (<code>Type[CCXTExchange]</code>, default:                   <code>CCXTExchange</code> )           \u2013            <p>description. Defaults to CCXTExchange.</p> </li> <li> <code>account</code>               (<code>Type[CCXTAccount]</code>, default:                   <code>CCXTAccount</code> )           \u2013            <p>description. Defaults to CCXTAccount.</p> </li> </ul> Source code in <code>lettrade/exchange/live/ccxt/ccxt.py</code> <pre><code>def __init__(\n    self,\n    feeder: Type[CCXTDataFeeder] = CCXTDataFeeder,\n    exchange: Type[CCXTExchange] = CCXTExchange,\n    account: Type[CCXTAccount] = CCXTAccount,\n    **kwargs,\n) -&gt; None:\n    \"\"\"_summary_\n\n    Args:\n        feeder (Type[CCXTDataFeeder], optional): _description_. Defaults to CCXTDataFeeder.\n        exchange (Type[CCXTExchange], optional): _description_. Defaults to CCXTExchange.\n        account (Type[CCXTAccount], optional): _description_. Defaults to CCXTAccount.\n    \"\"\"\n    super().__init__(\n        feeder=feeder,\n        exchange=exchange,\n        account=account,\n        **kwargs,\n    )\n</code></pre>"},{"location":"reference/exchange/live/ccxt/ccxt/#lettrade.exchange.live.ccxt.ccxt.LetTradeCCXT.plot","title":"plot","text":"<pre><code>plot(*args, jump: Optional[dict] = None, **kwargs)\n</code></pre> <p>Plot strategy/optimize result</p> BotPlotter <p>Miror of BotPlotter.plot(). Plotly implement Plotly.plot().</p> <p>Args:     <code>jump</code> (Optional[dict], optional): Miror of BotPlotter.jump()</p> <p>Example:     - Jump to trade_id         <pre><code>lt.plot(\n    jump=dict(trade_id=1, range=300),\n    layout=dict(height=2000),\n)\n</code></pre></p> OptimizePlotter <p>Miror of OptimizePlotter.plot().</p> <p>Example:     -         <pre><code>lt.plot(layout=dict(height=2000))\n</code></pre></p> Source code in <code>lettrade/lettrade.py</code> <pre><code>def plot(self, *args, jump: Optional[dict] = None, **kwargs):\n    \"\"\"Plot strategy/optimize result\n\n    BotPlotter:\n        Miror of [BotPlotter.plot()](site:/reference/plot/bot/#lettrade.plot.bot.BotPlotter.plot).\n        Plotly implement [Plotly.plot()](site:/reference/plot/plotly/plotly/#lettrade.plot.plotly.plotly.PlotlyBotPlotter.plot).\n\n        Args:\n            `jump` (Optional[dict], optional): Miror of [BotPlotter.jump()](site:/reference/plot/bot/#lettrade.plot.bot.BotPlotter.jump)\n\n        Example:\n            - Jump to trade_id\n                ```python\n                lt.plot(\n                    jump=dict(trade_id=1, range=300),\n                    layout=dict(height=2000),\n                )\n                ```\n\n    OptimizePlotter:\n        Miror of [OptimizePlotter.plot()](site:/reference/plot/optimize/#lettrade.plot.optimize.OptimizePlotter.plot).\n\n        Example:\n            -\n                ```python\n                lt.plot(layout=dict(height=2000))\n                ```\n    \"\"\"\n    if __debug__:\n        from .utils.docs import is_docs_session\n\n        if is_docs_session():\n            return\n\n    self.plotter.plot(*args, jump=jump, **kwargs)\n</code></pre>"},{"location":"reference/exchange/live/ccxt/ccxt/#lettrade.exchange.live.ccxt.ccxt.LetTradeCCXT.run","title":"run","text":"<pre><code>run(worker: Optional[int] = None, **kwargs)\n</code></pre> <p>Run strategy in single or multiple processing</p> <p>Parameters:</p> <ul> <li> <code>worker</code>               (<code>Optional[int]</code>, default:                   <code>None</code> )           \u2013            <p>Number of processing. Defaults to None.</p> </li> </ul> Source code in <code>lettrade/lettrade.py</code> <pre><code>def run(self, worker: Optional[int] = None, **kwargs):\n    \"\"\"Run strategy in single or multiple processing\n\n    Args:\n        worker (Optional[int], optional): Number of processing. Defaults to None.\n    \"\"\"\n    if worker or isinstance(self.data, list):\n        if not isinstance(self.data, list):\n            # self.data = self.datas\n            self.datas = [self.data]\n\n        worker = self._max_workers(worker)\n\n        self._multiprocess()\n\n        datas_source = self._kwargs.pop(\"datas\")\n        with ProcessPoolExecutor(max_workers=worker) as executor:\n            futures = [\n                executor.submit(\n                    self._bot_cls.run_bot,\n                    datas=datas,\n                    id=i,\n                    result=\"str\",\n                    **self._kwargs,\n                )\n                for i, datas in enumerate(datas_source)\n            ]\n            for future in futures:\n                result = future.result()\n                print(result)\n    else:\n        self._bot = self._bot_cls.run_bot(\n            bot=self._bot,\n            result=\"bot\",\n            **self._kwargs,\n        )\n        print(str(self._bot.stats))\n</code></pre>"},{"location":"reference/exchange/live/ccxt/ccxt/#lettrade.exchange.live.ccxt.ccxt.LetTradeCCXT.stop","title":"stop","text":"<pre><code>stop()\n</code></pre> <p>Stop strategy</p> Source code in <code>lettrade/lettrade.py</code> <pre><code>def stop(self):\n    \"\"\"Stop strategy\"\"\"\n    if self._bot is not None:\n        return self._bot.stop()\n    if self.stats:\n        self.stats.stop()\n</code></pre>"},{"location":"reference/exchange/live/ccxt/ccxt/#lettrade.exchange.live.ccxt.ccxt.LetTradeCCXTBot","title":"LetTradeCCXTBot","text":"<pre><code>LetTradeCCXTBot(api: Optional[LiveAPI] = LiveAPI, **kwargs)\n</code></pre> <p>               Bases: <code>LetTradeLiveBot</code></p> <p>LetTradeBot for CCXT</p> Source code in <code>lettrade/exchange/live/live.py</code> <pre><code>def __init__(\n    self,\n    api: Optional[LiveAPI] = LiveAPI,\n    **kwargs,\n) -&gt; None:\n    super().__init__(**kwargs)\n\n    if issubclass(api, LiveAPI):\n        self._api = api(**self._kwargs.get(\"api_kwargs\", {}))\n    else:\n        self._api = api\n\n    self._kwargs.setdefault(\"feeder_kwargs\", dict()).update(api=self._api)\n    self._kwargs.setdefault(\"exchange_kwargs\", dict()).update(api=self._api)\n    self._kwargs.setdefault(\"account_kwargs\", dict()).update(api=self._api)\n\n    for data in self.datas:\n        data._api = self._api\n</code></pre>"},{"location":"reference/exchange/live/ccxt/ccxt/#lettrade.exchange.live.ccxt.ccxt.let_ccxt","title":"let_ccxt","text":"<pre><code>let_ccxt(\n    strategy: Type[Strategy],\n    datas: set[set[str]],\n    ccxt_exchange: str,\n    ccxt_key: str,\n    ccxt_secret: str,\n    feeder: Type[CCXTDataFeeder] = CCXTDataFeeder,\n    exchange: Type[CCXTExchange] = CCXTExchange,\n    account: Type[CCXTAccount] = CCXTAccount,\n    commander: Optional[Type[Commander]] = None,\n    plotter: Optional[Type[Plotter]] = None,\n    stats: Optional[Type[BotStatistic]] = BotStatistic,\n    lettrade: Optional[Type[LetTradeCCXT]] = LetTradeCCXT,\n    bot: Optional[Type[LetTradeCCXTBot]] = LetTradeCCXTBot,\n    api: Optional[Type[CCXTAPI]] = CCXTAPI,\n    **kwargs\n) -&gt; LetTradeCCXT\n</code></pre> <p>Help to build <code>LetTradeCCXT</code></p> <p>Parameters:</p> <ul> <li> <code>strategy</code>               (<code>Type[Strategy]</code>)           \u2013            <p>description</p> </li> <li> <code>datas</code>               (<code>set[set[str]]</code>)           \u2013            <p>description</p> </li> <li> <code>ccxt_exchange</code>               (<code>str</code>)           \u2013            <p>description</p> </li> <li> <code>ccxt_key</code>               (<code>str</code>)           \u2013            <p>description</p> </li> <li> <code>ccxt_secret</code>               (<code>str</code>)           \u2013            <p>description</p> </li> <li> <code>feeder</code>               (<code>Type[CCXTDataFeeder]</code>, default:                   <code>CCXTDataFeeder</code> )           \u2013            <p>description. Defaults to CCXTDataFeeder.</p> </li> <li> <code>exchange</code>               (<code>Type[CCXTExchange]</code>, default:                   <code>CCXTExchange</code> )           \u2013            <p>description. Defaults to CCXTExchange.</p> </li> <li> <code>account</code>               (<code>Type[CCXTAccount]</code>, default:                   <code>CCXTAccount</code> )           \u2013            <p>description. Defaults to CCXTAccount.</p> </li> <li> <code>commander</code>               (<code>Optional[Type[Commander]]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>plotter</code>               (<code>Optional[Type[Plotter]]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>stats</code>               (<code>Optional[Type[BotStatistic]]</code>, default:                   <code>BotStatistic</code> )           \u2013            <p>description. Defaults to BotStatistic.</p> </li> <li> <code>lettrade</code>               (<code>Optional[Type[LetTradeCCXT]]</code>, default:                   <code>LetTradeCCXT</code> )           \u2013            <p>description. Defaults to LetTradeCCXT.</p> </li> <li> <code>bot</code>               (<code>Optional[Type[LetTradeCCXTBot]]</code>, default:                   <code>LetTradeCCXTBot</code> )           \u2013            <p>description. Defaults to LetTradeCCXTBot.</p> </li> <li> <code>api</code>               (<code>Optional[Type[CCXTAPI]]</code>, default:                   <code>CCXTAPI</code> )           \u2013            <p>description. Defaults to CCXTAPI.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>LetTradeCCXT</code> (              <code>LetTradeCCXT</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/live/ccxt/ccxt.py</code> <pre><code>def let_ccxt(\n    strategy: Type[Strategy],\n    datas: set[set[str]],\n    ccxt_exchange: str,\n    ccxt_key: str,\n    ccxt_secret: str,\n    feeder: Type[CCXTDataFeeder] = CCXTDataFeeder,\n    exchange: Type[CCXTExchange] = CCXTExchange,\n    account: Type[CCXTAccount] = CCXTAccount,\n    commander: Optional[Type[Commander]] = None,\n    plotter: Optional[Type[Plotter]] = None,\n    stats: Optional[Type[BotStatistic]] = BotStatistic,\n    lettrade: Optional[Type[LetTradeCCXT]] = LetTradeCCXT,\n    bot: Optional[Type[LetTradeCCXTBot]] = LetTradeCCXTBot,\n    api: Optional[Type[CCXTAPI]] = CCXTAPI,\n    **kwargs,\n) -&gt; LetTradeCCXT:\n    \"\"\"Help to build `LetTradeCCXT`\n\n    Args:\n        strategy (Type[Strategy]): _description_\n        datas (set[set[str]]): _description_\n        ccxt_exchange (str): _description_\n        ccxt_key (str): _description_\n        ccxt_secret (str): _description_\n        feeder (Type[CCXTDataFeeder], optional): _description_. Defaults to CCXTDataFeeder.\n        exchange (Type[CCXTExchange], optional): _description_. Defaults to CCXTExchange.\n        account (Type[CCXTAccount], optional): _description_. Defaults to CCXTAccount.\n        commander (Optional[Type[Commander]], optional): _description_. Defaults to None.\n        plotter (Optional[Type[Plotter]], optional): _description_. Defaults to None.\n        stats (Optional[Type[BotStatistic]], optional): _description_. Defaults to BotStatistic.\n        lettrade (Optional[Type[LetTradeCCXT]], optional): _description_. Defaults to LetTradeCCXT.\n        bot (Optional[Type[LetTradeCCXTBot]], optional): _description_. Defaults to LetTradeCCXTBot.\n        api (Optional[Type[CCXTAPI]], optional): _description_. Defaults to CCXTAPI.\n\n    Returns:\n        LetTradeCCXT: _description_\n    \"\"\"\n    api_kwargs: dict = kwargs.setdefault(\"api_kwargs\", {})\n    api_kwargs.update(\n        exchange=ccxt_exchange,\n        key=ccxt_key,\n        secret=ccxt_secret,\n    )\n\n    return let_live(\n        strategy=strategy,\n        datas=datas,\n        feeder=feeder,\n        exchange=exchange,\n        account=account,\n        commander=commander,\n        plotter=plotter,\n        stats=stats,\n        lettrade=lettrade,\n        bot=bot,\n        api=api,\n        **kwargs,\n    )\n</code></pre>"},{"location":"reference/exchange/live/metatrader/","title":"Index","text":""},{"location":"reference/exchange/live/metatrader/#lettrade.exchange.live.metatrader","title":"metatrader","text":""},{"location":"reference/exchange/live/metatrader/api/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> api","text":""},{"location":"reference/exchange/live/metatrader/api/#lettrade.exchange.live.metatrader.api","title":"api","text":""},{"location":"reference/exchange/live/metatrader/api/#lettrade.exchange.live.metatrader.api.MetaTraderAPI","title":"MetaTraderAPI","text":"<pre><code>MetaTraderAPI(\n    login: int,\n    password: str,\n    server: str,\n    timeout: int = 60,\n    retry: int = 20,\n    host: str = \"localhost\",\n    port: int = 18812,\n    wine: Optional[str] = None,\n    **kwargs\n)\n</code></pre> <p>               Bases: <code>LiveAPI</code></p> Source code in <code>lettrade/exchange/live/metatrader/api.py</code> <pre><code>def __init__(\n    self,\n    login: int,\n    password: str,\n    server: str,\n    timeout: int = 60,\n    retry: int = 20,\n    host: str = \"localhost\",\n    port: int = 18812,\n    wine: Optional[str] = None,\n    **kwargs,\n):\n    # Start wine server if not inited\n    if wine:\n        self.__class__._wine_process(wine)\n\n    try:\n        self._mt5 = MT5(host=host, port=port)\n    except ConnectionRefusedError as e:\n        raise ConnectionRefusedError(\n            \"Cannot connect to MetaTrader 5 Terminal rpyc server\"\n        ) from e\n    except TimeoutError as e:\n        raise RuntimeError(\"Timeout start MetaTrader 5 Terminal\") from e\n\n    account = self.account()\n    if not account or account.login != login:\n        while retry &gt; 0:\n            login = self._mt5.initialize(\n                login=int(login),\n                password=password,\n                server=server,\n                # timeout=timeout,\n            )\n            if login:\n                break\n\n            if __debug__:\n                logger.info(\"Login retry: %d\", retry)\n\n            time.sleep(1)\n            retry -= 1\n\n        if retry == 0:\n            raise RuntimeError(f\"Cannot login {account}\")\n\n    logger.info(\n        \"Login success account=%s, server=%s, version=%s\",\n        account,\n        server,\n        self._mt5.version(),\n    )\n\n    terminal = self._mt5.terminal_info()\n    logger.info(\"Terminal information: %s\", str(terminal))\n    if not terminal.trade_allowed:\n        logger.warning(\"Terminal trading mode is not allowed\")\n\n    # Preload trading data\n    now = datetime.now()\n    self._mt5.history_deals_get(now - timedelta(weeks=4), now)\n    self._mt5.orders_get()\n    self._mt5.positions_get()\n    time.sleep(5)\n</code></pre>"},{"location":"reference/exchange/live/metatrader/api/#lettrade.exchange.live.metatrader.api.MetaTraderAPI.init","title":"init","text":"<pre><code>init(**kwargs)\n</code></pre> Source code in <code>lettrade/exchange/live/api.py</code> <pre><code>def init(self, **kwargs):\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/live/metatrader/api/#lettrade.exchange.live.metatrader.api.MetaTraderAPI.markets","title":"markets","text":"<pre><code>markets(search=None)\n</code></pre> <p>The filter for arranging a group of necessary symbols. Optional parameter. If the group is specified, the function returns only symbols meeting a specified criteria.</p> Search example <p>Get symbols whose names do not contain USD, EUR, JPY and GBP search=\",!USD,!EUR,!JPY,!GBP*\"</p> Source code in <code>lettrade/exchange/live/metatrader/api.py</code> <pre><code>def markets(self, search=None):\n    \"\"\"The filter for arranging a group of necessary symbols. Optional parameter.\n    If the group is specified, the function returns only symbols meeting a specified criteria.\n\n    Search example:\n        Get symbols whose names do not contain USD, EUR, JPY and GBP\n        search=\"*,!*USD*,!*EUR*,!*JPY*,!*GBP*\"\n    \"\"\"\n    return self._mt5.symbols_get(search)\n</code></pre>"},{"location":"reference/exchange/live/metatrader/metatrader/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> metatrader","text":""},{"location":"reference/exchange/live/metatrader/metatrader/#lettrade.exchange.live.metatrader.metatrader","title":"metatrader","text":""},{"location":"reference/exchange/live/metatrader/metatrader/#lettrade.exchange.live.metatrader.metatrader.LetTradeMetaTrader","title":"LetTradeMetaTrader","text":"<pre><code>LetTradeMetaTrader(\n    feeder: Type[\n        MetaTraderDataFeeder\n    ] = MetaTraderDataFeeder,\n    exchange: Type[MetaTraderExchange] = MetaTraderExchange,\n    account: Type[MetaTraderAccount] = MetaTraderAccount,\n    **kwargs\n)\n</code></pre> <p>               Bases: <code>LetTradeLive</code></p> <p>Help to maintain MetaTrader bots</p> <p>Parameters:</p> <ul> <li> <code>feeder</code>               (<code>Type[MetaTraderDataFeeder]</code>, default:                   <code>MetaTraderDataFeeder</code> )           \u2013            <p>description. Defaults to MetaTraderDataFeeder.</p> </li> <li> <code>exchange</code>               (<code>Type[MetaTraderExchange]</code>, default:                   <code>MetaTraderExchange</code> )           \u2013            <p>description. Defaults to MetaTraderExchange.</p> </li> <li> <code>account</code>               (<code>Type[MetaTraderAccount]</code>, default:                   <code>MetaTraderAccount</code> )           \u2013            <p>description. Defaults to MetaTraderAccount.</p> </li> </ul> Source code in <code>lettrade/exchange/live/metatrader/metatrader.py</code> <pre><code>def __init__(\n    self,\n    feeder: Type[MetaTraderDataFeeder] = MetaTraderDataFeeder,\n    exchange: Type[MetaTraderExchange] = MetaTraderExchange,\n    account: Type[MetaTraderAccount] = MetaTraderAccount,\n    **kwargs,\n) -&gt; None:\n    \"\"\"_summary_\n\n    Args:\n        feeder (Type[MetaTraderDataFeeder], optional): _description_. Defaults to MetaTraderDataFeeder.\n        exchange (Type[MetaTraderExchange], optional): _description_. Defaults to MetaTraderExchange.\n        account (Type[MetaTraderAccount], optional): _description_. Defaults to MetaTraderAccount.\n    \"\"\"\n    super().__init__(\n        feeder=feeder,\n        exchange=exchange,\n        account=account,\n        **kwargs,\n    )\n</code></pre>"},{"location":"reference/exchange/live/metatrader/metatrader/#lettrade.exchange.live.metatrader.metatrader.LetTradeMetaTrader.plot","title":"plot","text":"<pre><code>plot(*args, jump: Optional[dict] = None, **kwargs)\n</code></pre> <p>Plot strategy/optimize result</p> BotPlotter <p>Miror of BotPlotter.plot(). Plotly implement Plotly.plot().</p> <p>Args:     <code>jump</code> (Optional[dict], optional): Miror of BotPlotter.jump()</p> <p>Example:     - Jump to trade_id         <pre><code>lt.plot(\n    jump=dict(trade_id=1, range=300),\n    layout=dict(height=2000),\n)\n</code></pre></p> OptimizePlotter <p>Miror of OptimizePlotter.plot().</p> <p>Example:     -         <pre><code>lt.plot(layout=dict(height=2000))\n</code></pre></p> Source code in <code>lettrade/lettrade.py</code> <pre><code>def plot(self, *args, jump: Optional[dict] = None, **kwargs):\n    \"\"\"Plot strategy/optimize result\n\n    BotPlotter:\n        Miror of [BotPlotter.plot()](site:/reference/plot/bot/#lettrade.plot.bot.BotPlotter.plot).\n        Plotly implement [Plotly.plot()](site:/reference/plot/plotly/plotly/#lettrade.plot.plotly.plotly.PlotlyBotPlotter.plot).\n\n        Args:\n            `jump` (Optional[dict], optional): Miror of [BotPlotter.jump()](site:/reference/plot/bot/#lettrade.plot.bot.BotPlotter.jump)\n\n        Example:\n            - Jump to trade_id\n                ```python\n                lt.plot(\n                    jump=dict(trade_id=1, range=300),\n                    layout=dict(height=2000),\n                )\n                ```\n\n    OptimizePlotter:\n        Miror of [OptimizePlotter.plot()](site:/reference/plot/optimize/#lettrade.plot.optimize.OptimizePlotter.plot).\n\n        Example:\n            -\n                ```python\n                lt.plot(layout=dict(height=2000))\n                ```\n    \"\"\"\n    if __debug__:\n        from .utils.docs import is_docs_session\n\n        if is_docs_session():\n            return\n\n    self.plotter.plot(*args, jump=jump, **kwargs)\n</code></pre>"},{"location":"reference/exchange/live/metatrader/metatrader/#lettrade.exchange.live.metatrader.metatrader.LetTradeMetaTrader.run","title":"run","text":"<pre><code>run(worker: Optional[int] = None, **kwargs)\n</code></pre> <p>Run strategy in single or multiple processing</p> <p>Parameters:</p> <ul> <li> <code>worker</code>               (<code>Optional[int]</code>, default:                   <code>None</code> )           \u2013            <p>Number of processing. Defaults to None.</p> </li> </ul> Source code in <code>lettrade/lettrade.py</code> <pre><code>def run(self, worker: Optional[int] = None, **kwargs):\n    \"\"\"Run strategy in single or multiple processing\n\n    Args:\n        worker (Optional[int], optional): Number of processing. Defaults to None.\n    \"\"\"\n    if worker or isinstance(self.data, list):\n        if not isinstance(self.data, list):\n            # self.data = self.datas\n            self.datas = [self.data]\n\n        worker = self._max_workers(worker)\n\n        self._multiprocess()\n\n        datas_source = self._kwargs.pop(\"datas\")\n        with ProcessPoolExecutor(max_workers=worker) as executor:\n            futures = [\n                executor.submit(\n                    self._bot_cls.run_bot,\n                    datas=datas,\n                    id=i,\n                    result=\"str\",\n                    **self._kwargs,\n                )\n                for i, datas in enumerate(datas_source)\n            ]\n            for future in futures:\n                result = future.result()\n                print(result)\n    else:\n        self._bot = self._bot_cls.run_bot(\n            bot=self._bot,\n            result=\"bot\",\n            **self._kwargs,\n        )\n        print(str(self._bot.stats))\n</code></pre>"},{"location":"reference/exchange/live/metatrader/metatrader/#lettrade.exchange.live.metatrader.metatrader.LetTradeMetaTrader.stop","title":"stop","text":"<pre><code>stop()\n</code></pre> <p>Stop strategy</p> Source code in <code>lettrade/lettrade.py</code> <pre><code>def stop(self):\n    \"\"\"Stop strategy\"\"\"\n    if self._bot is not None:\n        return self._bot.stop()\n    if self.stats:\n        self.stats.stop()\n</code></pre>"},{"location":"reference/exchange/live/metatrader/metatrader/#lettrade.exchange.live.metatrader.metatrader.LetTradeMetaTraderBot","title":"LetTradeMetaTraderBot","text":"<pre><code>LetTradeMetaTraderBot(\n    api: Optional[LiveAPI] = LiveAPI, **kwargs\n)\n</code></pre> <p>               Bases: <code>LetTradeLiveBot</code></p> <p>LetTradeBot for MetaTrader</p> Source code in <code>lettrade/exchange/live/live.py</code> <pre><code>def __init__(\n    self,\n    api: Optional[LiveAPI] = LiveAPI,\n    **kwargs,\n) -&gt; None:\n    super().__init__(**kwargs)\n\n    if issubclass(api, LiveAPI):\n        self._api = api(**self._kwargs.get(\"api_kwargs\", {}))\n    else:\n        self._api = api\n\n    self._kwargs.setdefault(\"feeder_kwargs\", dict()).update(api=self._api)\n    self._kwargs.setdefault(\"exchange_kwargs\", dict()).update(api=self._api)\n    self._kwargs.setdefault(\"account_kwargs\", dict()).update(api=self._api)\n\n    for data in self.datas:\n        data._api = self._api\n</code></pre>"},{"location":"reference/exchange/live/metatrader/metatrader/#lettrade.exchange.live.metatrader.metatrader.MetaTraderAccount","title":"MetaTraderAccount","text":"<pre><code>MetaTraderAccount(api: LiveAPI, *args, **kwargs)\n</code></pre> <p>               Bases: <code>LiveAccount</code></p> <p>Account for MetaTrader</p> Source code in <code>lettrade/exchange/live/account.py</code> <pre><code>def __init__(self, api: LiveAPI, *args, **kwargs) -&gt; None:\n    super().__init__(*args, **kwargs)\n    self._api = api\n</code></pre>"},{"location":"reference/exchange/live/metatrader/metatrader/#lettrade.exchange.live.metatrader.metatrader.MetaTraderDataFeed","title":"MetaTraderDataFeed","text":"<pre><code>MetaTraderDataFeed(\n    symbol: str,\n    timeframe: str | int | Timedelta,\n    name: Optional[str] = None,\n    api: Optional[LiveAPI] = None,\n    **kwargs\n)\n</code></pre> <p>               Bases: <code>LiveDataFeed</code></p> <p>DataFeed for MetaTrader</p> Source code in <code>lettrade/exchange/live/data.py</code> <pre><code>def __init__(\n    self,\n    symbol: str,\n    timeframe: str | int | pd.Timedelta,\n    name: Optional[str] = None,\n    api: Optional[LiveAPI] = None,\n    **kwargs,\n) -&gt; None:\n    super().__init__(\n        name=name or f\"{symbol}_{timeframe}\",\n        timeframe=timeframe,\n        columns=[\"open\", \"high\", \"low\", \"close\", \"volume\"],\n        **kwargs,\n    )\n    self.meta.update(dict(symbol=symbol))\n\n    if api is not None:\n        self._api = api\n</code></pre>"},{"location":"reference/exchange/live/metatrader/metatrader/#lettrade.exchange.live.metatrader.metatrader.MetaTraderDataFeed.bars","title":"bars","text":"<pre><code>bars(\n    since: int | str | Timestamp, to: int | str | Timestamp\n) -&gt; list\n</code></pre> <p>Get bars from LiveAPI</p> <p>Parameters:</p> <ul> <li> <code>since</code>               (<code>int | str | Timestamp</code>)           \u2013            <p>description</p> </li> <li> <code>to</code>               (<code>int | str | Timestamp</code>)           \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list</code> (              <code>list</code> )          \u2013            <p>list of bar</p> </li> </ul> Source code in <code>lettrade/exchange/live/data.py</code> <pre><code>def bars(\n    self,\n    since: int | str | pd.Timestamp,\n    to: int | str | pd.Timestamp,\n) -&gt; list:\n    \"\"\"Get bars from LiveAPI\n\n    Args:\n        since (int | str | pd.Timestamp): _description_\n        to (int | str | pd.Timestamp): _description_\n\n    Returns:\n        list: list of bar\n    \"\"\"\n    return self._api.bars(\n        symbol=self.symbol,\n        timeframe=self.timeframe.string,\n        since=since,\n        to=to,\n    )\n</code></pre>"},{"location":"reference/exchange/live/metatrader/metatrader/#lettrade.exchange.live.metatrader.metatrader.MetaTraderDataFeed.bars_load","title":"bars_load","text":"<pre><code>bars_load(\n    since: int | str | Timestamp, to: int | str | Timestamp\n) -&gt; bool\n</code></pre> <p>Get bar and push to DataFeed</p> <p>Parameters:</p> <ul> <li> <code>since</code>               (<code>int | str | Timestamp</code>)           \u2013            <p>description</p> </li> <li> <code>to</code>               (<code>int | str | Timestamp</code>)           \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True if has data, False if no data</p> </li> </ul> Source code in <code>lettrade/exchange/live/data.py</code> <pre><code>def bars_load(\n    self,\n    since: int | str | pd.Timestamp,\n    to: int | str | pd.Timestamp,\n) -&gt; bool:\n    \"\"\"Get bar and push to DataFeed\n\n    Args:\n        since (int | str | pd.Timestamp): _description_\n        to (int | str | pd.Timestamp): _description_\n\n    Returns:\n        bool: True if has data, False if no data\n    \"\"\"\n    bars = self.bars(since=since, to=to)\n\n    if len(bars) == 0:\n        logger.warning(\"No bars data for %s\", self.name)\n        return False\n\n    self.push(bars)\n    return True\n</code></pre>"},{"location":"reference/exchange/live/metatrader/metatrader/#lettrade.exchange.live.metatrader.metatrader.MetaTraderDataFeed.instance","title":"instance  <code>classmethod</code>","text":"<pre><code>instance(\n    api: Optional[LiveAPI] = None,\n    api_kwargs: Optional[dict] = None,\n    **kwargs\n) -&gt; LiveDataFeed\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>api</code>               (<code>LiveAPI</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>api_kwargs</code>               (<code>dict</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>Missing api requirement</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>LiveDataFeed</code> (              <code>LiveDataFeed</code> )          \u2013            <p>DataFeed object</p> </li> </ul> Source code in <code>lettrade/exchange/live/data.py</code> <pre><code>@classmethod\ndef instance(\n    cls,\n    api: Optional[LiveAPI] = None,\n    api_kwargs: Optional[dict] = None,\n    **kwargs,\n) -&gt; \"LiveDataFeed\":\n    \"\"\"_summary_\n\n    Args:\n        api (LiveAPI, optional): _description_. Defaults to None.\n        api_kwargs (dict, optional): _description_. Defaults to None.\n\n    Raises:\n        RuntimeError: Missing api requirement\n\n    Returns:\n        LiveDataFeed: DataFeed object\n    \"\"\"\n    if api is None:\n        if api_kwargs is None:\n            raise RuntimeError(\"api or api_kwargs cannot missing\")\n        api = cls._api_cls(**api_kwargs)\n    obj = cls(api=api, **kwargs)\n    return obj\n</code></pre>"},{"location":"reference/exchange/live/metatrader/metatrader/#lettrade.exchange.live.metatrader.metatrader.MetaTraderDataFeeder","title":"MetaTraderDataFeeder","text":"<pre><code>MetaTraderDataFeeder(api: LiveAPI, tick: bool = 5)\n</code></pre> <p>               Bases: <code>LiveDataFeeder</code></p> <p>DataFeeder for MetaTrader</p> <pre><code>tick == 0: wait until new bar change value\ntick &gt; 0: sleep tick time (in seconds) then update\n</code></pre> Source code in <code>lettrade/exchange/live/feeder.py</code> <pre><code>def __init__(self, api: LiveAPI, tick: bool = 5) -&gt; None:\n    \"\"\"\n    tick:\n        tick &lt; 0: no tick, just get completed bar\n        tick == 0: wait until new bar change value\n        tick &gt; 0: sleep tick time (in seconds) then update\n    \"\"\"\n    super().__init__()\n    self._api = api\n    self._tick = tick\n\n    if isinstance(self._tick, int):\n        self._wait_timeframe = TimeFrame(f\"{self._tick}s\")\n    else:\n        self._wait_timeframe = None\n</code></pre>"},{"location":"reference/exchange/live/metatrader/metatrader/#lettrade.exchange.live.metatrader.metatrader.MetaTraderDataFeeder.is_continous","title":"is_continous  <code>property</code>","text":"<pre><code>is_continous\n</code></pre> <p>Flag check is realtime continous datafeeder</p>"},{"location":"reference/exchange/live/metatrader/metatrader/#lettrade.exchange.live.metatrader.metatrader.MetaTraderDataFeeder.instance","title":"instance  <code>classmethod</code>","text":"<pre><code>instance(\n    api: Optional[LiveAPI] = None,\n    api_kwargs: Optional[dict] = None,\n    **kwargs\n) -&gt; LiveDataFeed\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>api</code>               (<code>LiveAPI</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>api_kwargs</code>               (<code>dict</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>Missing api requirement</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>LiveDataFeed</code> (              <code>LiveDataFeed</code> )          \u2013            <p>DataFeed object</p> </li> </ul> Source code in <code>lettrade/exchange/live/feeder.py</code> <pre><code>@classmethod\ndef instance(\n    cls,\n    api: Optional[LiveAPI] = None,\n    api_kwargs: Optional[dict] = None,\n    **kwargs,\n) -&gt; \"LiveDataFeed\":\n    \"\"\"_summary_\n\n    Args:\n        api (LiveAPI, optional): _description_. Defaults to None.\n        api_kwargs (dict, optional): _description_. Defaults to None.\n\n    Raises:\n        RuntimeError: Missing api requirement\n\n    Returns:\n        LiveDataFeed: DataFeed object\n    \"\"\"\n    if api is None:\n        if api_kwargs is None:\n            raise RuntimeError(\"api or api_kwargs cannot missing\")\n        api = cls._api_cls(**api_kwargs)\n    obj = cls(api=api, **kwargs)\n    return obj\n</code></pre>"},{"location":"reference/exchange/live/metatrader/metatrader/#lettrade.exchange.live.metatrader.metatrader.MetaTraderExchange","title":"MetaTraderExchange","text":"<pre><code>MetaTraderExchange(api: LiveAPI, *args, **kwargs)\n</code></pre> <p>               Bases: <code>LiveExchange</code></p> <p>MetaTrade 5 exchange module for <code>lettrade</code></p> <p>Parameters:</p> <ul> <li> <code>api</code>               (<code>LiveAPI</code>)           \u2013            <p>API connect to rpyc MeTrader 5 Terminal server through module <code>mt5linux</code></p> </li> <li> <code>*args</code>               (<code>list</code>, default:                   <code>()</code> )           \u2013            <p><code>Exchange</code> list parameters</p> </li> <li> <code>**kwargs</code>               (<code>dict</code>, default:                   <code>{}</code> )           \u2013            <p><code>Exchange</code> dict parameters</p> </li> </ul> Source code in <code>lettrade/exchange/live/exchange.py</code> <pre><code>def __init__(self, api: LiveAPI, *args, **kwargs):\n    \"\"\"_summary_\n\n    Args:\n        api (LiveAPI): API connect to rpyc MeTrader 5 Terminal server through module `mt5linux`\n        *args (list): `Exchange` list parameters\n        **kwargs (dict): `Exchange` dict parameters\n    \"\"\"\n    super().__init__(*args, **kwargs)\n    self._api = api\n</code></pre>"},{"location":"reference/exchange/live/metatrader/metatrader/#lettrade.exchange.live.metatrader.metatrader.MetaTraderExecute","title":"MetaTraderExecute","text":"<pre><code>MetaTraderExecute(\n    id: str,\n    exchange: LiveExchange,\n    data: DataFeed,\n    size: float,\n    price: float,\n    at: float,\n    order_id: Optional[str] = None,\n    order: Optional[Order] = None,\n    trade_id: Optional[str] = None,\n    trade: Optional[Trade] = None,\n    tag: Optional[str] = \"\",\n    raw: Optional[object] = None,\n)\n</code></pre> <p>               Bases: <code>LiveExecute</code></p> <p>Execute for MetaTrader</p> Source code in <code>lettrade/exchange/live/trade.py</code> <pre><code>def __init__(\n    self,\n    id: str,\n    exchange: \"LiveExchange\",\n    data: \"DataFeed\",\n    size: float,\n    price: float,\n    at: float,\n    order_id: Optional[str] = None,\n    order: Optional[\"Order\"] = None,\n    trade_id: Optional[str] = None,\n    trade: Optional[\"Trade\"] = None,\n    tag: Optional[str] = \"\",\n    raw: Optional[object] = None,\n):\n    super().__init__(\n        id=id,\n        exchange=exchange,\n        data=data,\n        size=size,\n        price=price,\n        at=at,\n        order_id=order_id,\n        order=order,\n        trade_id=trade_id,\n        trade=trade,\n    )\n    self.tag: str = tag\n    self.raw: object = raw\n    self._api: LiveAPI = exchange._api\n</code></pre>"},{"location":"reference/exchange/live/metatrader/metatrader/#lettrade.exchange.live.metatrader.metatrader.MetaTraderOrder","title":"MetaTraderOrder","text":"<pre><code>MetaTraderOrder(\n    id: str,\n    exchange: LiveExchange,\n    data: DataFeed,\n    size: float,\n    state: OrderState = OrderState.Pending,\n    type: OrderType = OrderType.Market,\n    limit_price: Optional[float] = None,\n    stop_price: Optional[float] = None,\n    sl_price: Optional[float] = None,\n    tp_price: Optional[float] = None,\n    trade: Optional[Trade] = None,\n    tag: Optional[str] = \"\",\n    open_at: Optional[int] = None,\n    open_price: Optional[int] = None,\n)\n</code></pre> <p>               Bases: <code>LiveOrder</code></p> <p>Order for MetaTrader</p> Source code in <code>lettrade/exchange/live/trade.py</code> <pre><code>def __init__(\n    self,\n    id: str,\n    exchange: \"LiveExchange\",\n    data: \"DataFeed\",\n    size: float,\n    state: OrderState = OrderState.Pending,\n    type: OrderType = OrderType.Market,\n    limit_price: Optional[float] = None,\n    stop_price: Optional[float] = None,\n    sl_price: Optional[float] = None,\n    tp_price: Optional[float] = None,\n    trade: Optional[\"Trade\"] = None,\n    tag: Optional[str] = \"\",\n    open_at: Optional[int] = None,\n    open_price: Optional[int] = None,\n):\n    super().__init__(\n        id=id,\n        exchange=exchange,\n        data=data,\n        size=size,\n        state=state,\n        type=type,\n        limit_price=limit_price,\n        stop_price=stop_price,\n        sl_price=sl_price,\n        tp_price=tp_price,\n        trade=trade,\n        tag=tag,\n        open_at=open_at,\n        open_price=open_price,\n    )\n    self._api: LiveAPI = exchange._api\n\n    self.raw: dict = None\n</code></pre>"},{"location":"reference/exchange/live/metatrader/metatrader/#lettrade.exchange.live.metatrader.metatrader.MetaTraderTrade","title":"MetaTraderTrade","text":"<pre><code>MetaTraderTrade(\n    id: str,\n    exchange: LiveExchange,\n    data: DataFeed,\n    size: float,\n    parent: Order,\n    tag: str = \"\",\n    state: TradeState = TradeState.Open,\n    entry_price: Optional[float] = None,\n    entry_at: Optional[int] = None,\n    sl_order: Optional[Order] = None,\n    tp_order: Optional[Order] = None,\n)\n</code></pre> <p>               Bases: <code>LiveTrade</code></p> <p>Trade for MetaTrader</p> Source code in <code>lettrade/exchange/live/trade.py</code> <pre><code>def __init__(\n    self,\n    id: str,\n    exchange: \"LiveExchange\",\n    data: \"DataFeed\",\n    size: float,\n    parent: Order,\n    tag: str = \"\",\n    state: TradeState = TradeState.Open,\n    entry_price: Optional[float] = None,\n    entry_at: Optional[int] = None,\n    sl_order: Optional[Order] = None,\n    tp_order: Optional[Order] = None,\n):\n    super().__init__(\n        id=id,\n        exchange=exchange,\n        data=data,\n        size=size,\n        parent=parent,\n        tag=tag,\n        state=state,\n        entry_price=entry_price,\n        entry_at=entry_at,\n        sl_order=sl_order,\n        tp_order=tp_order,\n    )\n    self._api: LiveAPI = exchange._api\n</code></pre>"},{"location":"reference/exchange/live/metatrader/metatrader/#lettrade.exchange.live.metatrader.metatrader.let_metatrader","title":"let_metatrader","text":"<pre><code>let_metatrader(\n    strategy: Type[Strategy],\n    datas: set[set[str]],\n    login: int,\n    password: str,\n    server: str,\n    feeder: Type[\n        MetaTraderDataFeeder\n    ] = MetaTraderDataFeeder,\n    exchange: Type[MetaTraderExchange] = MetaTraderExchange,\n    account: Type[MetaTraderAccount] = MetaTraderAccount,\n    commander: Optional[Type[Commander]] = None,\n    plotter: Optional[Type[Plotter]] = None,\n    stats: Optional[Type[BotStatistic]] = BotStatistic,\n    bot: Optional[\n        Type[LetTradeMetaTraderBot]\n    ] = LetTradeMetaTraderBot,\n    lettrade: Optional[\n        Type[LetTradeMetaTrader]\n    ] = LetTradeMetaTrader,\n    api: Optional[Type[MetaTraderAPI]] = MetaTraderAPI,\n    wine: Optional[str] = None,\n    **kwargs\n) -&gt; LetTradeMetaTrader\n</code></pre> <p>Help to build <code>LetTradeMetaTrader</code></p> <p>Parameters:</p> <ul> <li> <code>strategy</code>               (<code>Type[Strategy]</code>)           \u2013            <p>description</p> </li> <li> <code>datas</code>               (<code>set[set[str]]</code>)           \u2013            <p>description</p> </li> <li> <code>login</code>               (<code>int</code>)           \u2013            <p>description</p> </li> <li> <code>password</code>               (<code>str</code>)           \u2013            <p>description</p> </li> <li> <code>server</code>               (<code>str</code>)           \u2013            <p>description</p> </li> <li> <code>feeder</code>               (<code>Type[MetaTraderDataFeeder]</code>, default:                   <code>MetaTraderDataFeeder</code> )           \u2013            <p>description. Defaults to MetaTraderDataFeeder.</p> </li> <li> <code>exchange</code>               (<code>Type[MetaTraderExchange]</code>, default:                   <code>MetaTraderExchange</code> )           \u2013            <p>description. Defaults to MetaTraderExchange.</p> </li> <li> <code>account</code>               (<code>Type[MetaTraderAccount]</code>, default:                   <code>MetaTraderAccount</code> )           \u2013            <p>description. Defaults to MetaTraderAccount.</p> </li> <li> <code>commander</code>               (<code>Optional[Type[Commander]]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>plotter</code>               (<code>Optional[Type[Plotter]]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>stats</code>               (<code>Optional[Type[BotStatistic]]</code>, default:                   <code>BotStatistic</code> )           \u2013            <p>description. Defaults to BotStatistic.</p> </li> <li> <code>bot</code>               (<code>Optional[Type[LetTradeMetaTraderBot]]</code>, default:                   <code>LetTradeMetaTraderBot</code> )           \u2013            <p>description. Defaults to LetTradeMetaTraderBot.</p> </li> <li> <code>lettrade</code>               (<code>Optional[Type[LetTradeMetaTrader]]</code>, default:                   <code>LetTradeMetaTrader</code> )           \u2013            <p>description. Defaults to LetTradeMetaTrader.</p> </li> <li> <code>api</code>               (<code>Optional[Type[MetaTraderAPI]]</code>, default:                   <code>MetaTraderAPI</code> )           \u2013            <p>description. Defaults to MetaTraderAPI.</p> </li> <li> <code>wine</code>               (<code>Optional[str]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>**kwargs</code>               (<code>dict</code>, default:                   <code>{}</code> )           \u2013            <p>All remaining properties are passed to the constructor of <code>LetTradeLive</code></p> </li> </ul> <p>Returns:</p> <ul> <li> <code>LetTradeMetaTrader</code> (              <code>LetTradeMetaTrader</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/live/metatrader/metatrader.py</code> <pre><code>def let_metatrader(\n    strategy: Type[Strategy],\n    datas: set[set[str]],\n    login: int,\n    password: str,\n    server: str,\n    feeder: Type[MetaTraderDataFeeder] = MetaTraderDataFeeder,\n    exchange: Type[MetaTraderExchange] = MetaTraderExchange,\n    account: Type[MetaTraderAccount] = MetaTraderAccount,\n    commander: Optional[Type[Commander]] = None,\n    plotter: Optional[Type[Plotter]] = None,\n    stats: Optional[Type[BotStatistic]] = BotStatistic,\n    bot: Optional[Type[LetTradeMetaTraderBot]] = LetTradeMetaTraderBot,\n    lettrade: Optional[Type[LetTradeMetaTrader]] = LetTradeMetaTrader,\n    api: Optional[Type[MetaTraderAPI]] = MetaTraderAPI,\n    wine: Optional[str] = None,\n    **kwargs,\n) -&gt; LetTradeMetaTrader:\n    \"\"\"Help to build `LetTradeMetaTrader`\n\n    Args:\n        strategy (Type[Strategy]): _description_\n        datas (set[set[str]]): _description_\n        login (int): _description_\n        password (str): _description_\n        server (str): _description_\n        feeder (Type[MetaTraderDataFeeder], optional): _description_. Defaults to MetaTraderDataFeeder.\n        exchange (Type[MetaTraderExchange], optional): _description_. Defaults to MetaTraderExchange.\n        account (Type[MetaTraderAccount], optional): _description_. Defaults to MetaTraderAccount.\n        commander (Optional[Type[Commander]], optional): _description_. Defaults to None.\n        plotter (Optional[Type[Plotter]], optional): _description_. Defaults to None.\n        stats (Optional[Type[BotStatistic]], optional): _description_. Defaults to BotStatistic.\n        bot (Optional[Type[LetTradeMetaTraderBot]], optional): _description_. Defaults to LetTradeMetaTraderBot.\n        lettrade (Optional[Type[LetTradeMetaTrader]], optional): _description_. Defaults to LetTradeMetaTrader.\n        api (Optional[Type[MetaTraderAPI]], optional): _description_. Defaults to MetaTraderAPI.\n        wine (Optional[str], optional): _description_. Defaults to None.\n        **kwargs (dict): All remaining properties are passed to the constructor of `LetTradeLive`\n\n    Returns:\n        LetTradeMetaTrader: _description_\n    \"\"\"\n    api_kwargs: dict = kwargs.setdefault(\"api_kwargs\", {})\n    api_kwargs.update(\n        login=int(login),\n        password=password,\n        server=server,\n        wine=wine,\n    )\n\n    return let_live(\n        strategy=strategy,\n        datas=datas,\n        feeder=feeder,\n        exchange=exchange,\n        account=account,\n        commander=commander,\n        plotter=plotter,\n        stats=stats,\n        bot=bot,\n        lettrade=lettrade,\n        api=api,\n        **kwargs,\n    )\n</code></pre>"},{"location":"reference/indicator/","title":"Index","text":""},{"location":"reference/indicator/#lettrade.indicator","title":"indicator","text":""},{"location":"reference/indicator/function/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> function","text":""},{"location":"reference/indicator/function/#lettrade.indicator.function","title":"function","text":""},{"location":"reference/indicator/function/#lettrade.indicator.function.above","title":"above","text":"<pre><code>above(series1: Series, series2: Series) -&gt; Series\n</code></pre> <p>Check a Series is above another Series</p> <p>Parameters:</p> <ul> <li> <code>series1</code>               (<code>Series</code>)           \u2013            <p>first Series</p> </li> <li> <code>series2</code>               (<code>Series</code>)           \u2013            <p>second Series</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Series</code>           \u2013            <p>pd.Series: True series1 is above series2 else False</p> </li> </ul> Source code in <code>lettrade/indicator/function.py</code> <pre><code>def above(series1: pd.Series, series2: pd.Series) -&gt; pd.Series:\n    \"\"\"Check a Series is above another Series\n\n    Args:\n        series1 (pd.Series): first Series\n        series2 (pd.Series): second Series\n\n    Returns:\n        pd.Series: True series1 is above series2 else False\n    \"\"\"\n    diffed = diff(series1, series2)\n    return diffed.apply(lambda v: True if v &gt; 0 else False).astype(bool)\n</code></pre>"},{"location":"reference/indicator/function/#lettrade.indicator.function.below","title":"below","text":"<pre><code>below(series1: Series, series2: Series) -&gt; Series\n</code></pre> <p>Check a Series is below another Series</p> <p>Parameters:</p> <ul> <li> <code>series1</code>               (<code>Series</code>)           \u2013            <p>first Series</p> </li> <li> <code>series2</code>               (<code>Series</code>)           \u2013            <p>second Series</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Series</code>           \u2013            <p>pd.Series: True series1 is below series2 else False</p> </li> </ul> Source code in <code>lettrade/indicator/function.py</code> <pre><code>def below(series1: pd.Series, series2: pd.Series) -&gt; pd.Series:\n    \"\"\"Check a Series is below another Series\n\n    Args:\n        series1 (pd.Series): first Series\n        series2 (pd.Series): second Series\n\n    Returns:\n        pd.Series: True series1 is below series2 else False\n    \"\"\"\n    diffed = diff(series1, series2)\n    return diffed.apply(lambda v: True if v &lt; 0 else False).astype(bool)\n</code></pre>"},{"location":"reference/indicator/function/#lettrade.indicator.function.crossover","title":"crossover","text":"<pre><code>crossover(series1: Series, series2: Series) -&gt; Series\n</code></pre> <p>Check if a Series cross over another Series</p> <p>Parameters:</p> <ul> <li> <code>series1</code>               (<code>Series</code>)           \u2013            <p>first Series</p> </li> <li> <code>series2</code>               (<code>Series</code>)           \u2013            <p>second Series</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Series</code>           \u2013            <p>pd.Series: True if series1 cross over series2 else False</p> </li> </ul> Source code in <code>lettrade/indicator/function.py</code> <pre><code>def crossover(series1: pd.Series, series2: pd.Series) -&gt; pd.Series:\n    \"\"\"Check if a Series cross over another Series\n\n    Args:\n        series1 (pd.Series): first Series\n        series2 (pd.Series): second Series\n\n    Returns:\n        pd.Series: True if series1 cross over series2 else False\n    \"\"\"\n    below1 = below(series1, series2).shift(1)\n    above0 = above(series1, series2)\n    return below1 &amp; above0\n</code></pre>"},{"location":"reference/indicator/function/#lettrade.indicator.function.crossunder","title":"crossunder","text":"<pre><code>crossunder(series1: Series, series2: Series) -&gt; Series\n</code></pre> <p>Check if a Series cross under another Series</p> <p>Parameters:</p> <ul> <li> <code>series1</code>               (<code>Series</code>)           \u2013            <p>first Series</p> </li> <li> <code>series2</code>               (<code>Series</code>)           \u2013            <p>second Series</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Series</code>           \u2013            <p>pd.Series: True if series1 cross under series2 else False</p> </li> </ul> Source code in <code>lettrade/indicator/function.py</code> <pre><code>def crossunder(series1: pd.Series, series2: pd.Series) -&gt; pd.Series:\n    \"\"\"Check if a Series cross under another Series\n\n    Args:\n        series1 (pd.Series): first Series\n        series2 (pd.Series): second Series\n\n    Returns:\n        pd.Series: True if series1 cross under series2 else False\n    \"\"\"\n    above1 = above(series1, series2).shift(1)\n    below0 = below(series1, series2)\n    return below0 &amp; above1\n</code></pre>"},{"location":"reference/indicator/function/#lettrade.indicator.function.diff","title":"diff","text":"<pre><code>diff(series1: Series, series2: Series) -&gt; Series\n</code></pre> <p>Difference between 2 series</p> <p>Parameters:</p> <ul> <li> <code>series1</code>               (<code>Series</code>)           \u2013            <p>description</p> </li> <li> <code>series2</code>               (<code>Series</code>)           \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Series</code>           \u2013            <p>pd.Series: Diff of 2 series</p> </li> </ul> Source code in <code>lettrade/indicator/function.py</code> <pre><code>def diff(series1: pd.Series, series2: pd.Series) -&gt; pd.Series:\n    \"\"\"Difference between 2 series\n\n    Args:\n        series1 (pd.Series): _description_\n        series2 (pd.Series): _description_\n\n    Returns:\n        pd.Series: Diff of 2 series\n    \"\"\"\n    return series1 - series2\n</code></pre>"},{"location":"reference/indicator/indicator/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> indicator","text":""},{"location":"reference/indicator/indicator/#lettrade.indicator.indicator","title":"indicator","text":""},{"location":"reference/indicator/candlestick/","title":"Index","text":""},{"location":"reference/indicator/candlestick/#lettrade.indicator.candlestick","title":"candlestick","text":""},{"location":"reference/indicator/candlestick/talib/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> talib","text":""},{"location":"reference/indicator/candlestick/talib/#lettrade.indicator.candlestick.talib","title":"talib","text":""},{"location":"reference/indicator/vendor/","title":"Index","text":""},{"location":"reference/indicator/vendor/#lettrade.indicator.vendor","title":"vendor","text":""},{"location":"reference/indicator/vendor/fastfinance/","title":"Index","text":""},{"location":"reference/indicator/vendor/fastfinance/#lettrade.indicator.vendor.fastfinance","title":"fastfinance","text":""},{"location":"reference/indicator/vendor/fastfinance/connector/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> connector","text":""},{"location":"reference/indicator/vendor/fastfinance/connector/#lettrade.indicator.vendor.fastfinance.connector","title":"connector","text":""},{"location":"reference/indicator/vendor/fastfinance/fastfinance/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> fastfinance","text":""},{"location":"reference/indicator/vendor/fastfinance/fastfinance/#lettrade.indicator.vendor.fastfinance.fastfinance","title":"fastfinance","text":"<p>MIT License</p> <p>Copyright (c) 2021 RomFR57 rom.fr57@gmail.com</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"reference/indicator/vendor/fastfinance/fastfinance/#lettrade.indicator.vendor.fastfinance.fastfinance.adx","title":"adx","text":"<pre><code>adx(\n    c_open,\n    c_high,\n    c_low,\n    period_adx,\n    period_dm,\n    smoothing=2.0,\n)\n</code></pre> <p>Average Directionnal Index :type c_open: np.ndarray :type c_high: np.ndarray :type c_low: np.ndarray :type period_adx: int :type period_dm: int :type smoothing: float :rtype: np.ndarray</p> Source code in <code>lettrade/indicator/vendor/fastfinance/fastfinance.py</code> <pre><code>@jit(nopython=True)\ndef adx(c_open, c_high, c_low, period_adx, period_dm, smoothing=2.0):\n    \"\"\"\n    Average Directionnal Index\n    :type c_open: np.ndarray\n    :type c_high: np.ndarray\n    :type c_low: np.ndarray\n    :type period_adx: int\n    :type period_dm: int\n    :type smoothing: float\n    :rtype: np.ndarray\n    \"\"\"\n    up = np.concatenate((np.array([np.nan]), c_high[1:] - c_high[:-1]))\n    down = np.concatenate((np.array([np.nan]), c_low[:-1] - c_low[1:]))\n    dm_up = np.array([0] * len(up))\n    up_ids = up &gt; down\n    dm_up[up_ids] = up[up_ids]\n    dm_up[dm_up &lt; 0] = 0\n    dm_down = np.array([0] * len(down))\n    down_ids = down &gt; up\n    dm_down[down_ids] = down[down_ids]\n    dm_down[dm_down &lt; 0] = 0\n    avg_tr = atr(c_open, c_high, c_low, period_dm)\n    dm_up_avg = 100 * ema(dm_up, period_dm, smoothing) / avg_tr\n    dm_down_avg = 100 * ema(dm_down, period_dm, smoothing) / avg_tr\n    return ema(\n        100 * np.abs(dm_up_avg - dm_down_avg) / (dm_up_avg + dm_down_avg),\n        period_adx,\n        smoothing,\n    )\n</code></pre>"},{"location":"reference/indicator/vendor/fastfinance/fastfinance/#lettrade.indicator.vendor.fastfinance.fastfinance.aroon","title":"aroon","text":"<pre><code>aroon(data, period)\n</code></pre> <p>Aroon :type data: np.ndarray :type period: int :rtype: (np.ndarray, np.ndarray) :return: up, down</p> Source code in <code>lettrade/indicator/vendor/fastfinance/fastfinance.py</code> <pre><code>@jit(nopython=True)\ndef aroon(data, period):\n    \"\"\"\n    Aroon\n    :type data: np.ndarray\n    :type period: int\n    :rtype: (np.ndarray, np.ndarray)\n    :return: up, down\n    \"\"\"\n    size = len(data)\n    out_up = np.array([np.nan] * size)\n    out_down = np.array([np.nan] * size)\n    for i in range(period - 1, size):\n        window = np.flip(data[i + 1 - period : i + 1])\n        out_up[i] = ((period - window.argmax()) / period) * 100\n        out_down[i] = ((period - window.argmin()) / period) * 100\n    return out_up, out_down\n</code></pre>"},{"location":"reference/indicator/vendor/fastfinance/fastfinance/#lettrade.indicator.vendor.fastfinance.fastfinance.atr","title":"atr","text":"<pre><code>atr(c_open, c_high, c_low, period)\n</code></pre> <p>Average True Range :type c_open: np.ndarray :type c_high: np.ndarray :type c_low: np.ndarray :type period: int :rtype: np.ndarray</p> Source code in <code>lettrade/indicator/vendor/fastfinance/fastfinance.py</code> <pre><code>@jit(nopython=True)\ndef atr(c_open, c_high, c_low, period):\n    \"\"\"\n    Average True Range\n    :type c_open: np.ndarray\n    :type c_high: np.ndarray\n    :type c_low: np.ndarray\n    :type period: int\n    :rtype: np.ndarray\n    \"\"\"\n    return sma(tr(c_open, c_high, c_low), period)\n</code></pre>"},{"location":"reference/indicator/vendor/fastfinance/fastfinance/#lettrade.indicator.vendor.fastfinance.fastfinance.bollinger_bands","title":"bollinger_bands","text":"<pre><code>bollinger_bands(data, period, dev_up=2.0, dev_down=2.0)\n</code></pre> <p>Bollinger Bands :type data: np.ndarray :type period: int :type dev_up: float :type dev_down: float :rtype: (np.ndarray, np.ndarray, np.ndarray, np.ndarray) :return: middle, up, down, width</p> Source code in <code>lettrade/indicator/vendor/fastfinance/fastfinance.py</code> <pre><code>@jit(nopython=True)\ndef bollinger_bands(data, period, dev_up=2.0, dev_down=2.0):\n    \"\"\"\n    Bollinger Bands\n    :type data: np.ndarray\n    :type period: int\n    :type dev_up: float\n    :type dev_down: float\n    :rtype: (np.ndarray, np.ndarray, np.ndarray, np.ndarray)\n    :return: middle, up, down, width\n    \"\"\"\n    size = len(data)\n    bb_up = np.array([np.nan] * size)\n    bb_down = np.array([np.nan] * size)\n    bb_width = np.array([np.nan] * size)\n    bb_mid = sma(data, period)\n    for i in range(period - 1, size):\n        std_dev = np.std(data[i - period + 1 : i + 1])\n        mid = bb_mid[i]\n        bb_up[i] = mid + (std_dev * dev_up)\n        bb_down[i] = mid - (std_dev * dev_down)\n        bb_width[i] = bb_up[i] - bb_down[i]\n    return bb_mid, bb_up, bb_down, bb_width\n</code></pre>"},{"location":"reference/indicator/vendor/fastfinance/fastfinance/#lettrade.indicator.vendor.fastfinance.fastfinance.chop","title":"chop","text":"<pre><code>chop(c_close, c_open, c_high, c_low, period=14)\n</code></pre> <p>Chopiness Index :type c_close: np.ndarray :type c_open: np.ndarray :type c_high: np.ndarray :type c_low: np.ndarray :type period: int :rtype: np.ndarray</p> Source code in <code>lettrade/indicator/vendor/fastfinance/fastfinance.py</code> <pre><code>@jit(nopython=True)\ndef chop(c_close, c_open, c_high, c_low, period=14):\n    \"\"\"\n    Chopiness Index\n    :type c_close: np.ndarray\n    :type c_open: np.ndarray\n    :type c_high: np.ndarray\n    :type c_low: np.ndarray\n    :type period: int\n    :rtype: np.ndarray\n    \"\"\"\n    size = len(c_close)\n    out = np.full(size, np.nan)\n    a_tr = atr(c_open, c_high, c_low, period)\n    for i in range(period - 1, size):\n        e = i + 1\n        s = e - period\n        out[i] = (\n            100\n            * np.log10(np.sum(a_tr[s:e]) / (np.max(c_high[s:e]) - np.min(c_low[s:e])))\n        ) / np.log10(period)\n    return out\n</code></pre>"},{"location":"reference/indicator/vendor/fastfinance/fastfinance/#lettrade.indicator.vendor.fastfinance.fastfinance.cma","title":"cma","text":"<pre><code>cma(data)\n</code></pre> <p>Cumulative Moving Average :type data: np.ndarray :rtype: np.ndarray</p> Source code in <code>lettrade/indicator/vendor/fastfinance/fastfinance.py</code> <pre><code>@jit(nopython=True)\ndef cma(data):\n    \"\"\"\n    Cumulative Moving Average\n    :type data: np.ndarray\n    :rtype: np.ndarray\n    \"\"\"\n    size = len(data)\n    out = np.full(size, np.nan)\n    last_sum = np.array([np.nan] * size)\n    last_sum[1] = sum(data[:2])\n    for i in range(2, size):\n        last_sum[i] = last_sum[i - 1] + data[i]\n        out[i] = last_sum[i] / (i + 1)\n    return out\n</code></pre>"},{"location":"reference/indicator/vendor/fastfinance/fastfinance/#lettrade.indicator.vendor.fastfinance.fastfinance.cmf","title":"cmf","text":"<pre><code>cmf(c_close, c_high, c_low, c_volume, period)\n</code></pre> <p>Chaikin Money Flow :type c_close: np.ndarray :type c_high: np.ndarray :type c_low: np.ndarray :type c_volume: np.ndarray :type period: int :rtype: np.ndarray</p> Source code in <code>lettrade/indicator/vendor/fastfinance/fastfinance.py</code> <pre><code>@jit(nopython=True)\ndef cmf(c_close, c_high, c_low, c_volume, period):\n    \"\"\"\n    Chaikin Money Flow\n    :type c_close: np.ndarray\n    :type c_high: np.ndarray\n    :type c_low: np.ndarray\n    :type c_volume: np.ndarray\n    :type period: int\n    :rtype: np.ndarray\n    \"\"\"\n    size = len(c_close)\n    out = np.full(size, np.nan)\n    for i in range(period - 1, size):\n        e = i + 1\n        s = e - period\n        w_close = c_close[s:e]\n        w_high = c_high[s:e]\n        w_low = c_low[s:e]\n        w_vol = c_volume[s:e]\n        out[i] = sum(\n            (((w_close - w_low) - (w_high - w_close)) / (w_high - w_low)) * w_vol\n        ) / sum(w_vol)\n    return out\n</code></pre>"},{"location":"reference/indicator/vendor/fastfinance/fastfinance/#lettrade.indicator.vendor.fastfinance.fastfinance.cmo","title":"cmo","text":"<pre><code>cmo(c_close, period, f_sma=True, f_clip=True, f_abs=True)\n</code></pre> <p>Chande Momentum Oscillator :type c_close: np.ndarray :type period: int :type f_sma: bool :type f_clip: bool :type f_abs: bool :rtype: np.ndarray</p> Source code in <code>lettrade/indicator/vendor/fastfinance/fastfinance.py</code> <pre><code>@jit(nopython=True)\ndef cmo(c_close, period, f_sma=True, f_clip=True, f_abs=True):\n    \"\"\"\n    Chande Momentum Oscillator\n    :type c_close: np.ndarray\n    :type period: int\n    :type f_sma: bool\n    :type f_clip: bool\n    :type f_abs: bool\n    :rtype: np.ndarray\n    \"\"\"\n    size = len(c_close)\n    deltas = np.array([np.nan] * size)\n    sums_up = np.array([np.nan] * size)\n    sums_down = np.array([np.nan] * size)\n    for i in range(period - 1, size):\n        window = c_close[i + 1 - period : i + 1]\n        d = np.diff(window)\n        if f_clip:\n            up, down = np.clip(d, a_min=0, a_max=np.max(d)), np.clip(\n                d, a_min=np.min(d), a_max=0\n            )\n        else:\n            up, down = d.copy(), d.copy()\n            up[d &lt; 0] = 0.0\n            down[d &gt; 0] = 0.0\n        if f_abs:\n            for j, x in enumerate(down):\n                down[j] = fabs(x)\n        else:\n            down = np.abs(down)\n        sums_up[i] = sum(up)\n        sums_down[i] = sum(down)\n    return 100 * ((sums_up - sums_down) / (sums_up + sums_down))\n</code></pre>"},{"location":"reference/indicator/vendor/fastfinance/fastfinance/#lettrade.indicator.vendor.fastfinance.fastfinance.cog","title":"cog","text":"<pre><code>cog(data, period=10)\n</code></pre> <p>Center Of Gravity :type data: np.ndarray :type period: int :rtype: np.ndarray</p> Source code in <code>lettrade/indicator/vendor/fastfinance/fastfinance.py</code> <pre><code>@jit(nopython=True)\ndef cog(data, period=10):\n    \"\"\"\n    Center Of Gravity\n    :type data: np.ndarray\n    :type period: int\n    :rtype: np.ndarray\n    \"\"\"\n    size = len(data)\n    out = np.full(size, np.nan)\n    for i in range(period - 1, size):\n        e = i + 1\n        s = e - period\n        window = data[s:e]\n        den = np.sum(window)\n        num = 0\n        for j in range(0, period):\n            num += window[j] * (period - j)\n        out[i] = -num / den\n    return out\n</code></pre>"},{"location":"reference/indicator/vendor/fastfinance/fastfinance/#lettrade.indicator.vendor.fastfinance.fastfinance.convolve","title":"convolve","text":"<pre><code>convolve(data, kernel)\n</code></pre> <p>Convolution 1D Array :type data: np.ndarray :type kernel: np.ndarray :rtype: np.ndarray</p> Source code in <code>lettrade/indicator/vendor/fastfinance/fastfinance.py</code> <pre><code>@jit(nopython=True)\ndef convolve(data, kernel):\n    \"\"\"\n    Convolution 1D Array\n    :type data: np.ndarray\n    :type kernel: np.ndarray\n    :rtype: np.ndarray\n    \"\"\"\n    size_data = len(data)\n    size_kernel = len(kernel)\n    size_out = size_data - size_kernel + 1\n    out = np.array([np.nan] * size_out)\n    kernel = np.flip(kernel)\n    for i in range(size_out):\n        window = data[i : i + size_kernel]\n        out[i] = sum([window[j] * kernel[j] for j in range(size_kernel)])\n    return out\n</code></pre>"},{"location":"reference/indicator/vendor/fastfinance/fastfinance/#lettrade.indicator.vendor.fastfinance.fastfinance.dema","title":"dema","text":"<pre><code>dema(data, period, smoothing=2.0)\n</code></pre> <p>Double Exponential Moving Average :type data: np.ndarray :type period: int :type smoothing: float :rtype: np.ndarray</p> Source code in <code>lettrade/indicator/vendor/fastfinance/fastfinance.py</code> <pre><code>@jit(nopython=True)\ndef dema(data, period, smoothing=2.0):\n    \"\"\"\n    Double Exponential Moving Average\n    :type data: np.ndarray\n    :type period: int\n    :type smoothing: float\n    :rtype: np.ndarray\n    \"\"\"\n    return (2 * ema(data, period, smoothing)) - ema(\n        ema(data, period, smoothing), period, smoothing\n    )\n</code></pre>"},{"location":"reference/indicator/vendor/fastfinance/fastfinance/#lettrade.indicator.vendor.fastfinance.fastfinance.donchian_channel","title":"donchian_channel","text":"<pre><code>donchian_channel(c_high, c_low, period)\n</code></pre> <p>Donchian Channel :type c_high: np.ndarray :type c_low: np.ndarray :type period: int :rtype: (np.ndarray, np.ndarray, np.ndarray, np.ndarray) :return: middle, up, down, width</p> Source code in <code>lettrade/indicator/vendor/fastfinance/fastfinance.py</code> <pre><code>@jit(nopython=True)\ndef donchian_channel(c_high, c_low, period):\n    \"\"\"\n    Donchian Channel\n    :type c_high: np.ndarray\n    :type c_low: np.ndarray\n    :type period: int\n    :rtype: (np.ndarray, np.ndarray, np.ndarray, np.ndarray)\n    :return: middle, up, down, width\n    \"\"\"\n    size = len(c_high)\n    out_up = np.array([np.nan] * size)\n    out_down = np.array([np.nan] * size)\n    for i in range(period - 1, size):\n        e = i + 1\n        s = e - period\n        out_up[i] = np.max(c_high[s:e])\n        out_down[i] = np.min(c_low[s:e])\n    return (out_up + out_down) / 2, out_up, out_down, out_up - out_down\n</code></pre>"},{"location":"reference/indicator/vendor/fastfinance/fastfinance/#lettrade.indicator.vendor.fastfinance.fastfinance.ema","title":"ema","text":"<pre><code>ema(data, period, smoothing=2.0)\n</code></pre> <p>Exponential Moving Average :type data: np.ndarray :type period: int :type smoothing: float :rtype: np.ndarray</p> Source code in <code>lettrade/indicator/vendor/fastfinance/fastfinance.py</code> <pre><code>@jit(nopython=True)\ndef ema(data, period, smoothing=2.0):\n    \"\"\"\n    Exponential Moving Average\n    :type data: np.ndarray\n    :type period: int\n    :type smoothing: float\n    :rtype: np.ndarray\n    \"\"\"\n    size = len(data)\n    weight = smoothing / (period + 1)\n    out = np.full(size, np.nan)\n    out[0] = data[0]\n    for i in range(1, size):\n        out[i] = (data[i] * weight) + (out[i - 1] * (1 - weight))\n    out[: period - 1] = np.nan\n    return out\n</code></pre>"},{"location":"reference/indicator/vendor/fastfinance/fastfinance/#lettrade.indicator.vendor.fastfinance.fastfinance.entropy","title":"entropy","text":"<pre><code>entropy(c_close, c_volume, period, bins=2)\n</code></pre> <p>Entropy (Experimental) :type c_close: np.ndarray :type c_volume: np.ndarray :type period: int :type bins: int :rtype: np.ndarray</p> Source code in <code>lettrade/indicator/vendor/fastfinance/fastfinance.py</code> <pre><code>@jit(nopython=True)\ndef entropy(c_close, c_volume, period, bins=2):\n    \"\"\"\n    Entropy (Experimental)\n    :type c_close: np.ndarray\n    :type c_volume: np.ndarray\n    :type period: int\n    :type bins: int\n    :rtype: np.ndarray\n    \"\"\"\n    size = len(c_close)\n    out = np.full(size, np.nan)\n    for i in range(period - 1, size):\n        e = i + 1\n        s = e - period\n        close_w = c_close[s:e]\n        volume_w = c_volume[s:e]\n        min_w = np.min(close_w)\n        norm = 1.0 / (np.max(close_w) - min_w)\n        sum_h = np.array([0.0] * bins)\n        for j in range(period):\n            sum_h[int((close_w[j] - min_w) * bins * norm)] += volume_w[j] ** 2\n        count = np.sqrt(sum_h)\n        count = count / sum(count)\n        count = count[np.nonzero(count)]\n        out[i] = -sum(count * np.log2(count))\n    return out\n</code></pre>"},{"location":"reference/indicator/vendor/fastfinance/fastfinance/#lettrade.indicator.vendor.fastfinance.fastfinance.ewma","title":"ewma","text":"<pre><code>ewma(data, period, alpha=1.0)\n</code></pre> <p>Exponential Weighted Moving Average :type data: np.ndarray :type period: int :type alpha: float :rtype: np.ndarray</p> Source code in <code>lettrade/indicator/vendor/fastfinance/fastfinance.py</code> <pre><code>@jit(nopython=True)\ndef ewma(data, period, alpha=1.0):\n    \"\"\"\n    Exponential Weighted Moving Average\n    :type data: np.ndarray\n    :type period: int\n    :type alpha: float\n    :rtype: np.ndarray\n    \"\"\"\n    weights = (1 - alpha) ** np.arange(period)\n    weights /= np.sum(weights)\n    out = convolve(data, weights)\n    return np.concatenate((np.array([np.nan] * (len(data) - len(out))), out))\n</code></pre>"},{"location":"reference/indicator/vendor/fastfinance/fastfinance/#lettrade.indicator.vendor.fastfinance.fastfinance.fdi","title":"fdi","text":"<pre><code>fdi(c_close, period)\n</code></pre> <p>Fractal Dimension Index :type c_close: np.ndarray :type period: int :rtype: np.ndarray</p> Source code in <code>lettrade/indicator/vendor/fastfinance/fastfinance.py</code> <pre><code>@jit(nopython=True)\ndef fdi(c_close, period):\n    \"\"\"\n    Fractal Dimension Index\n    :type c_close: np.ndarray\n    :type period: int\n    :rtype: np.ndarray\n    \"\"\"\n    size = len(c_close)\n    out = np.full(size, np.nan)\n    for i in range(period - 1, size):\n        window = c_close[i + 1 - period : i + 1]\n        pdiff = 0\n        length = 0\n        hc = np.max(window)\n        lc = np.min(window)\n        for j in range(1, period - 1):\n            if hc &gt; lc:\n                diff = (window[-j] - lc) / (hc - lc)\n                length += (\n                    np.sqrt(((diff - pdiff) + (1 / (period**2))) ** 2) if j &gt; 1 else 0\n                )\n                pdiff = diff\n        out[i] = (\n            (1 + (np.log(length) + np.log(2)) / np.log(2 * period)) if length &gt; 0 else 0\n        )\n    return out\n</code></pre>"},{"location":"reference/indicator/vendor/fastfinance/fastfinance/#lettrade.indicator.vendor.fastfinance.fastfinance.fourier_fit_extra","title":"fourier_fit_extra","text":"<pre><code>fourier_fit_extra(data, harmonic, extra=0)\n</code></pre> <p>Fourier Transform Fit Extrapolation :type data: np.ndarray :type harmonic: int :type extra: int :rtype: np.ndarray</p> Source code in <code>lettrade/indicator/vendor/fastfinance/fastfinance.py</code> <pre><code>@jit(nopython=True)\ndef fourier_fit_extra(data, harmonic, extra=0):\n    \"\"\"\n    Fourier Transform Fit Extrapolation\n    :type data: np.ndarray\n    :type harmonic: int\n    :type extra: int\n    :rtype: np.ndarray\n    \"\"\"\n    size = len(data)\n    x = np.arange(0, size, 1)\n    m = np.ones((x.shape[0], 2))\n    m[:, 1] = x\n    scale = np.empty((2,))\n    for n in range(0, 2):\n        norm = np.linalg.norm(m[:, n])\n        scale[n] = norm\n        m[:, n] /= norm\n    lsf = (np.linalg.lstsq(m, data, rcond=-1)[0] / scale)[::-1]\n    lsd = data - lsf[0] * x\n    size_lsd = len(lsd)\n    four = np.zeros(size_lsd, dtype=np.complex128)\n    for i in range(size_lsd):\n        sum_f = 0\n        for n in range(size_lsd):\n            sum_f += lsd[n] * np.exp(-2j * np.pi * i * n * (1 / size_lsd))\n        four[i] = sum_f\n    freq = np.empty(size)\n    mi = (size - 1) // 2 + 1\n    freq[:mi] = np.arange(0, mi)\n    freq[mi:] = np.arange(-(size // 2), 0)\n    freq *= 1.0 / size\n    lx = np.arange(0, size + extra)\n    out = np.zeros(lx.shape)\n    index = [\n        v for _, v in sorted([(np.absolute(four[v]), v) for v in list(range(size))])\n    ][::-1]\n    for i in index[: 1 + harmonic * 2]:\n        out += (abs(four[i]) / size) * np.cos(\n            2 * np.pi * freq[i] * lx + np.angle(four[i])\n        )\n    return out + lsf[0] * lx\n</code></pre>"},{"location":"reference/indicator/vendor/fastfinance/fastfinance/#lettrade.indicator.vendor.fastfinance.fastfinance.grma","title":"grma","text":"<pre><code>grma(data, period)\n</code></pre> <p>Golden Ratio Moving Average :param data: np.ndarray :param period: int :return: np.ndarray</p> Source code in <code>lettrade/indicator/vendor/fastfinance/fastfinance.py</code> <pre><code>@jit(nopython=True)\ndef grma(data, period):\n    \"\"\"\n    Golden Ratio Moving Average\n    :param data: np.ndarray\n    :param period: int\n    :return: np.ndarray\n    \"\"\"\n    size = len(data)\n    out = np.full(size, np.nan)\n    sr = np.sqrt(2)\n    alpha = (sr - 1) / (sr + 1)\n    for i in range(period - 1, size):\n        if i == period - 1:\n            out[i] = np.mean(data[: i + 1])\n        else:\n            t1 = alpha * (data[i] - out[i - 1])\n            t2 = (1 - alpha) * (data[i - 1] - out[i - 1])\n            out[i] = out[i - 1] + t1 + t2\n    return out\n</code></pre>"},{"location":"reference/indicator/vendor/fastfinance/fastfinance/#lettrade.indicator.vendor.fastfinance.fastfinance.heiken_ashi","title":"heiken_ashi","text":"<pre><code>heiken_ashi(c_open, c_high, c_low, c_close)\n</code></pre> <p>Heiken Ashi :type c_open: np.ndarray :type c_high: np.ndarray :type c_low: np.ndarray :type c_close: np.ndarray :rtype: (np.ndarray, np.ndarray, np.ndarray, np.ndarray) :return: open, high, low, close</p> Source code in <code>lettrade/indicator/vendor/fastfinance/fastfinance.py</code> <pre><code>@jit(nopython=True)\ndef heiken_ashi(c_open, c_high, c_low, c_close):\n    \"\"\"\n    Heiken Ashi\n    :type c_open: np.ndarray\n    :type c_high: np.ndarray\n    :type c_low: np.ndarray\n    :type c_close: np.ndarray\n    :rtype: (np.ndarray, np.ndarray, np.ndarray, np.ndarray)\n    :return: open, high, low, close\n    \"\"\"\n    ha_close = (c_open + c_high + c_low + c_close) / 4\n    ha_open = np.empty_like(ha_close)\n    ha_open[0] = (c_open[0] + c_close[0]) / 2\n    for i in range(1, len(c_close)):\n        ha_open[i] = (c_open[i - 1] + c_close[i - 1]) / 2\n    return (\n        ha_open,\n        np.maximum(np.maximum(ha_open, ha_close), c_high),\n        np.minimum(np.minimum(ha_open, ha_close), c_low),\n        ha_close,\n    )\n</code></pre>"},{"location":"reference/indicator/vendor/fastfinance/fastfinance/#lettrade.indicator.vendor.fastfinance.fastfinance.ichimoku","title":"ichimoku","text":"<pre><code>ichimoku(\n    data, tenkansen=9, kinjunsen=26, senkou_b=52, shift=26\n)\n</code></pre> <p>Ichimoku :type data: np.ndarray :type tenkansen: int :type kinjunsen: int :type senkou_b: int :type shift: int :rtype: (np.ndarray, np.ndarray, np.ndarray, np.ndarray, np.ndarray) :return: tenkansen, kinjunsen, chikou, senkou a, senkou b</p> Source code in <code>lettrade/indicator/vendor/fastfinance/fastfinance.py</code> <pre><code>@jit(nopython=True)\ndef ichimoku(data, tenkansen=9, kinjunsen=26, senkou_b=52, shift=26):\n    \"\"\"\n    Ichimoku\n    :type data: np.ndarray\n    :type tenkansen: int\n    :type kinjunsen: int\n    :type senkou_b: int\n    :type shift: int\n    :rtype: (np.ndarray, np.ndarray, np.ndarray, np.ndarray, np.ndarray)\n    :return: tenkansen, kinjunsen, chikou, senkou a, senkou b\n    \"\"\"\n    size = len(data)\n    n_tenkansen = np.array([np.nan] * size)\n    n_kinjunsen = np.array([np.nan] * size)\n    n_senkou_b = np.array([np.nan] * (size + shift))\n    for i in range(tenkansen - 1, size):\n        window = data[i + 1 - tenkansen : i + 1]\n        n_tenkansen[i] = (np.max(window) + np.min(window)) / 2\n    for i in range(kinjunsen - 1, size):\n        window = data[i + 1 - kinjunsen : i + 1]\n        n_kinjunsen[i] = (np.max(window) + np.min(window)) / 2\n    for i in range(senkou_b - 1, size):\n        window = data[i + 1 - senkou_b : i + 1]\n        n_senkou_b[i + shift] = (np.max(window) + np.min(window)) / 2\n    return (\n        n_tenkansen,\n        n_kinjunsen,\n        np.concatenate(((data[shift:]), (np.array([np.nan] * (size - shift))))),\n        np.concatenate((np.array([np.nan] * shift), ((n_tenkansen + n_kinjunsen) / 2))),\n        n_senkou_b,\n    )\n</code></pre>"},{"location":"reference/indicator/vendor/fastfinance/fastfinance/#lettrade.indicator.vendor.fastfinance.fastfinance.kama","title":"kama","text":"<pre><code>kama(data, period=10, fast=2, slow=30, smoothing=0.666)\n</code></pre> <p>Kaufman's Adaptive Moving Average :type data: np.ndarray :type period: int :type fast: int :type slow: int :type smoothing: float :rtype: np.ndarray</p> Source code in <code>lettrade/indicator/vendor/fastfinance/fastfinance.py</code> <pre><code>@jit(nopython=True)\ndef kama(data, period=10, fast=2, slow=30, smoothing=0.666):\n    \"\"\"\n    Kaufman's Adaptive Moving Average\n    :type data: np.ndarray\n    :type period: int\n    :type fast: int\n    :type slow: int\n    :type smoothing: float\n    :rtype: np.ndarray\n    \"\"\"\n    size = len(data)\n    out = np.full(size, np.nan)\n    er = np.full(size, np.nan)\n    sc = np.full(size, np.nan)\n    fc = np.full(size, np.nan)\n    c = np.abs(np.diff(data))\n    v = np.sum(c)\n    if v &gt; 0:\n        er[period] = c[period] / v\n        for i in range(period + 1, size):\n            er[i] = (er[i - 1] * (period - 1) + c[i - 1]) / v\n    if np.isfinite(er).any():\n        f_sc = 2 / (fast + 1)\n        s_sc = 2 / (slow + 1)\n        sc[period] = er[period] * (f_sc - s_sc) + s_sc\n        for i in range(period + 1, size):\n            sc[i] = er[i] * (f_sc - s_sc) + s_sc + sc[i - 1] * (1 - smoothing)\n        out[period] = data[period]\n        fc[period] = out[period]\n        for i in range(period + 1, size):\n            out[i] = out[i - 1] + sc[i] * (data[i] - out[i - 1])\n            fc[i] = out[i - 1] + smoothing * (data[i] - out[i - 1])\n    return out\n</code></pre>"},{"location":"reference/indicator/vendor/fastfinance/fastfinance/#lettrade.indicator.vendor.fastfinance.fastfinance.kdj","title":"kdj","text":"<pre><code>kdj(\n    c_close,\n    c_high,\n    c_low,\n    period_rsv=9,\n    period_k=3,\n    period_d=3,\n    weight_k=3,\n    weight_d=2,\n)\n</code></pre> <p>KDJ :type c_close: np.ndarray :type c_high: np.ndarray :type c_low: np.ndarray :type period_rsv: int :type period_k: int :type period_d: int :type weight_k: int :type weight_d: int :rtype: (np.ndarray, np.ndarray, np.ndarray)</p> Source code in <code>lettrade/indicator/vendor/fastfinance/fastfinance.py</code> <pre><code>@jit(nopython=True)\ndef kdj(\n    c_close, c_high, c_low, period_rsv=9, period_k=3, period_d=3, weight_k=3, weight_d=2\n):\n    \"\"\"\n    KDJ\n    :type c_close: np.ndarray\n    :type c_high: np.ndarray\n    :type c_low: np.ndarray\n    :type period_rsv: int\n    :type period_k: int\n    :type period_d: int\n    :type weight_k: int\n    :type weight_d: int\n    :rtype: (np.ndarray, np.ndarray, np.ndarray)\n    \"\"\"\n    size = len(c_close)\n    rsv = np.array([np.nan] * size)\n    for i in range(period_k - 1, size):\n        e = i + 1\n        s = e - period_k\n        ml = np.min(c_low[s:e])\n        rsv[i] = ((c_close[i] - ml) / (np.max(c_high[s:e]) - ml)) * 100\n    k = sma(rsv, period_rsv)\n    d = sma(k, period_d)\n    return k, d, (weight_k * k) - (weight_d * d)\n</code></pre>"},{"location":"reference/indicator/vendor/fastfinance/fastfinance/#lettrade.indicator.vendor.fastfinance.fastfinance.keltner_channel","title":"keltner_channel","text":"<pre><code>keltner_channel(\n    c_close, c_open, c_high, c_low, period, smoothing=2.0\n)\n</code></pre> <p>Keltner Channel :type c_close: np.ndarray :type c_open: np.ndarray :type c_high: np.ndarray :type c_low: np.ndarray :type period: int :type smoothing: float :rtype: (np.ndarray, np.ndarray, np.ndarray, np.ndarray) :return: middle, up, down, width</p> Source code in <code>lettrade/indicator/vendor/fastfinance/fastfinance.py</code> <pre><code>@jit(nopython=True)\ndef keltner_channel(c_close, c_open, c_high, c_low, period, smoothing=2.0):\n    \"\"\"\n    Keltner Channel\n    :type c_close: np.ndarray\n    :type c_open: np.ndarray\n    :type c_high: np.ndarray\n    :type c_low: np.ndarray\n    :type period: int\n    :type smoothing: float\n    :rtype: (np.ndarray, np.ndarray, np.ndarray, np.ndarray)\n    :return: middle, up, down, width\n    \"\"\"\n    e = ema(c_close, period, smoothing)\n    aa = 2 * atr(c_open, c_high, c_low, period)\n    up = e + aa\n    down = e - aa\n    return e, up, down, up - down\n</code></pre>"},{"location":"reference/indicator/vendor/fastfinance/fastfinance/#lettrade.indicator.vendor.fastfinance.fastfinance.lsma","title":"lsma","text":"<pre><code>lsma(data, period=14, regression=True)\n</code></pre> <p>Least Squares Moving Average :type data: np.ndarray :type period: int :type regression: bool :rtype: np.ndarray</p> Source code in <code>lettrade/indicator/vendor/fastfinance/fastfinance.py</code> <pre><code>@jit(nopython=True)\ndef lsma(data, period=14, regression=True):\n    \"\"\"\n    Least Squares Moving Average\n    :type data: np.ndarray\n    :type period: int\n    :type regression: bool\n    :rtype: np.ndarray\n    \"\"\"\n    size = len(data)\n    out = np.full(size, np.nan)\n    w = np.arange(1, period + 1, dtype=np.float64)\n    if regression:\n        for i in range(period - 1, size):\n            e = i + 1\n            s = e - period\n            intercept, slope = np.dot(\n                np.linalg.pinv(np.vstack((np.ones(period), w)).T), data[s:e]\n            )\n            out[i] = slope * period + intercept\n    else:\n        for i in range(period - 1, size):\n            e = i + 1\n            s = e - period\n            out[i] = np.dot(data[s:e], w) / np.sum(w)\n    return out\n</code></pre>"},{"location":"reference/indicator/vendor/fastfinance/fastfinance/#lettrade.indicator.vendor.fastfinance.fastfinance.macd","title":"macd","text":"<pre><code>macd(data, fast, slow, smoothing=2.0)\n</code></pre> <p>Moving Average Convergence Divergence :type data: np.ndarray :type fast: int :type slow: int :type smoothing: float :rtype: np.ndarray</p> Source code in <code>lettrade/indicator/vendor/fastfinance/fastfinance.py</code> <pre><code>@jit(nopython=True)\ndef macd(data, fast, slow, smoothing=2.0):\n    \"\"\"\n    Moving Average Convergence Divergence\n    :type data: np.ndarray\n    :type fast: int\n    :type slow: int\n    :type smoothing: float\n    :rtype: np.ndarray\n    \"\"\"\n    return ema(data, fast, smoothing) - ema(data, slow, smoothing)\n</code></pre>"},{"location":"reference/indicator/vendor/fastfinance/fastfinance/#lettrade.indicator.vendor.fastfinance.fastfinance.momentum","title":"momentum","text":"<pre><code>momentum(data, period)\n</code></pre> <p>Momentum :type data: np.ndarray :type period: int :rtype: np.ndarray</p> Source code in <code>lettrade/indicator/vendor/fastfinance/fastfinance.py</code> <pre><code>@jit(nopython=True)\ndef momentum(data, period):\n    \"\"\"\n    Momentum\n    :type data: np.ndarray\n    :type period: int\n    :rtype: np.ndarray\n    \"\"\"\n    size = len(data)\n    out = np.full(size, np.nan)\n    for i in range(period - 1, size):\n        out[i] = data[i] - data[i - period + 1]\n    return out\n</code></pre>"},{"location":"reference/indicator/vendor/fastfinance/fastfinance/#lettrade.indicator.vendor.fastfinance.fastfinance.np_clip","title":"np_clip","text":"<pre><code>np_clip(a, a_min, a_max, out=None)\n</code></pre> <p>Numba Overload of np.clip :type a: np.ndarray :type a_min: int :type a_max: int :type out: np.ndarray :rtype: np.ndarray</p> Source code in <code>lettrade/indicator/vendor/fastfinance/fastfinance.py</code> <pre><code>@overload(np.clip)\ndef np_clip(a, a_min, a_max, out=None):\n    \"\"\"\n    Numba Overload of np.clip\n    :type a: np.ndarray\n    :type a_min: int\n    :type a_max: int\n    :type out: np.ndarray\n    :rtype: np.ndarray\n    \"\"\"\n    if out is None:\n        out = np.empty_like(a)\n    for i in range(len(a)):\n        if a[i] &lt; a_min:\n            out[i] = a_min\n        elif a[i] &gt; a_max:\n            out[i] = a_max\n        else:\n            out[i] = a[i]\n    return out\n</code></pre>"},{"location":"reference/indicator/vendor/fastfinance/fastfinance/#lettrade.indicator.vendor.fastfinance.fastfinance.obv","title":"obv","text":"<pre><code>obv(c_close, c_volume)\n</code></pre> <p>On Balance Volume :type c_close: np.ndarray :type c_volume: np.ndarray :rtype: np.ndarray</p> Source code in <code>lettrade/indicator/vendor/fastfinance/fastfinance.py</code> <pre><code>@jit(nopython=True)\ndef obv(c_close, c_volume):\n    \"\"\"\n    On Balance Volume\n    :type c_close: np.ndarray\n    :type c_volume: np.ndarray\n    :rtype: np.ndarray\n    \"\"\"\n    size = len(c_close)\n    out = np.full(size, np.nan)\n    out[0] = 1\n    for i in range(1, size):\n        if c_close[i] &gt; c_close[i - 1]:\n            out[i] = out[i - 1] + c_volume[i]\n        elif c_close[i] &lt; c_close[i - 1]:\n            out[i] = out[i - 1] - c_volume[i]\n        else:\n            out[i] = out[i - 1]\n    return out\n</code></pre>"},{"location":"reference/indicator/vendor/fastfinance/fastfinance/#lettrade.indicator.vendor.fastfinance.fastfinance.poly_fit_extra","title":"poly_fit_extra","text":"<pre><code>poly_fit_extra(data, deg=1, extra=0)\n</code></pre> <p>Polynomial Fit Extrapolation :type data: np.ndarray :type deg: int :type extra: int :rtype: np.ndarray</p> Source code in <code>lettrade/indicator/vendor/fastfinance/fastfinance.py</code> <pre><code>@jit(nopython=True)\ndef poly_fit_extra(data, deg=1, extra=0):\n    \"\"\"\n    Polynomial Fit Extrapolation\n    :type data: np.ndarray\n    :type deg: int\n    :type extra: int\n    :rtype: np.ndarray\n    \"\"\"\n    size = len(data)\n    x = np.arange(0, size, 1)\n    m = np.ones((x.shape[0], deg + 1))\n    m[:, 1] = x\n    if deg &gt; 1:\n        for n in range(2, deg + 1):\n            m[:, n] = m[:, n - 1] * x\n    scale = np.empty((deg + 1,))\n    for n in range(0, deg + 1):\n        norm = np.linalg.norm(m[:, n])\n        scale[n] = norm\n        m[:, n] /= norm\n    lsf = (np.linalg.lstsq(m, data, rcond=-1)[0] / scale)[::-1]\n    lx = np.arange(0, size + extra, 1)\n    out = np.zeros(lx.shape)\n    for i, v in enumerate(lsf):\n        out *= lx\n        out += v\n    return out\n</code></pre>"},{"location":"reference/indicator/vendor/fastfinance/fastfinance/#lettrade.indicator.vendor.fastfinance.fastfinance.roc","title":"roc","text":"<pre><code>roc(data, period)\n</code></pre> <p>Rate Of Change :type data: np.ndarray :type period: int :rtype: np.ndarray</p> Source code in <code>lettrade/indicator/vendor/fastfinance/fastfinance.py</code> <pre><code>@jit(nopython=True)\ndef roc(data, period):\n    \"\"\"\n    Rate Of Change\n    :type data: np.ndarray\n    :type period: int\n    :rtype: np.ndarray\n    \"\"\"\n    size = len(data)\n    out = np.full(size, np.nan)\n    for i in range(period - 1, size):\n        p = data[i - period + 1]\n        out[i] = ((data[i] - p) / p) * 100\n    return out\n</code></pre>"},{"location":"reference/indicator/vendor/fastfinance/fastfinance/#lettrade.indicator.vendor.fastfinance.fastfinance.rsi","title":"rsi","text":"<pre><code>rsi(\n    data,\n    period,\n    smoothing=2.0,\n    f_sma=True,\n    f_clip=True,\n    f_abs=True,\n)\n</code></pre> <p>Relative Strengh Index :type data: np.ndarray :type period: int :type smoothing: float :type f_sma: bool :type f_clip: bool :type f_abs: bool :rtype: np.ndarray</p> Source code in <code>lettrade/indicator/vendor/fastfinance/fastfinance.py</code> <pre><code>@jit(nopython=True)\ndef rsi(data, period, smoothing=2.0, f_sma=True, f_clip=True, f_abs=True):\n    \"\"\"\n    Relative Strengh Index\n    :type data: np.ndarray\n    :type period: int\n    :type smoothing: float\n    :type f_sma: bool\n    :type f_clip: bool\n    :type f_abs: bool\n    :rtype: np.ndarray\n    \"\"\"\n    size = len(data)\n    delta = np.array([np.nan] * size)\n    up = np.array([np.nan] * size)\n    down = np.array([np.nan] * size)\n    delta = np.diff(data)\n    if f_clip:\n        up, down = np.clip(delta, a_min=0, a_max=np.max(delta)), np.clip(\n            delta, a_min=np.min(delta), a_max=0\n        )\n    else:\n        up, down = delta.copy(), delta.copy()\n        up[delta &lt; 0] = 0.0\n        down[delta &gt; 0] = 0.0\n    if f_abs:\n        for i, x in enumerate(down):\n            down[i] = fabs(x)\n    else:\n        down = np.abs(down)\n    rs = (\n        sma(up, period) / sma(down, period)\n        if f_sma\n        else ema(up, period - 1, smoothing) / ema(down, period - 1, smoothing)\n    )\n    out = np.full(size, np.nan)\n    out[1:] = 100 - 100 / (1 + rs)\n    return out\n</code></pre>"},{"location":"reference/indicator/vendor/fastfinance/fastfinance/#lettrade.indicator.vendor.fastfinance.fastfinance.sma","title":"sma","text":"<pre><code>sma(data, period)\n</code></pre> <p>Simple Moving Average :type data: np.ndarray :type period: int :rtype: np.ndarray</p> Source code in <code>lettrade/indicator/vendor/fastfinance/fastfinance.py</code> <pre><code>@jit(nopython=True)\ndef sma(data, period):\n    \"\"\"\n    Simple Moving Average\n    :type data: np.ndarray\n    :type period: int\n    :rtype: np.ndarray\n    \"\"\"\n    size = len(data)\n    out = np.full(size, np.nan)\n    for i in range(period - 1, size):\n        window = data[i - period + 1 : i + 1]\n        out[i] = np.mean(window)\n    return out\n</code></pre>"},{"location":"reference/indicator/vendor/fastfinance/fastfinance/#lettrade.indicator.vendor.fastfinance.fastfinance.srsi","title":"srsi","text":"<pre><code>srsi(\n    data,\n    period,\n    smoothing=2.0,\n    f_sma=True,\n    f_clip=True,\n    f_abs=True,\n)\n</code></pre> <p>Stochastic Relative Strengh Index :type data: np.ndarray :type period: int :type smoothing: float :type f_sma: bool :type f_clip: bool :type f_abs: bool :rtype: np.ndarray</p> Source code in <code>lettrade/indicator/vendor/fastfinance/fastfinance.py</code> <pre><code>@jit(nopython=True)\ndef srsi(data, period, smoothing=2.0, f_sma=True, f_clip=True, f_abs=True):\n    \"\"\"\n    Stochastic Relative Strengh Index\n    :type data: np.ndarray\n    :type period: int\n    :type smoothing: float\n    :type f_sma: bool\n    :type f_clip: bool\n    :type f_abs: bool\n    :rtype: np.ndarray\n    \"\"\"\n    r = rsi(data, period, smoothing, f_sma, f_clip, f_abs)[period:]\n    s = np.array([np.nan] * len(r))\n    for i in range(period - 1, len(r)):\n        window = r[i + 1 - period : i + 1]\n        mw = np.min(window)\n        s[i] = ((r[i] - mw) / (np.max(window) - mw)) * 100\n    return np.concatenate((np.array([np.nan] * (len(data) - len(s))), s))\n</code></pre>"},{"location":"reference/indicator/vendor/fastfinance/fastfinance/#lettrade.indicator.vendor.fastfinance.fastfinance.stoch","title":"stoch","text":"<pre><code>stoch(c_close, c_high, c_low, period_k, period_d)\n</code></pre> <p>Stochastic :type c_close: np.ndarray :type c_high: np.ndarray :type c_low: np.ndarray :type period_k: int :type period_d: int :rtype: (np.ndarray, np.ndarray)</p> Source code in <code>lettrade/indicator/vendor/fastfinance/fastfinance.py</code> <pre><code>@jit(nopython=True)\ndef stoch(c_close, c_high, c_low, period_k, period_d):\n    \"\"\"\n    Stochastic\n    :type c_close: np.ndarray\n    :type c_high: np.ndarray\n    :type c_low: np.ndarray\n    :type period_k: int\n    :type period_d: int\n    :rtype: (np.ndarray, np.ndarray)\n    \"\"\"\n    size = len(c_close)\n    k = np.array([np.nan] * size)\n    for i in range(period_k - 1, size):\n        e = i + 1\n        s = e - period_k\n        ml = np.min(c_low[s:e])\n        k[i] = ((c_close[i] - ml) / (np.max(c_high[s:e]) - ml)) * 100\n    return k, sma(k, period_d)\n</code></pre>"},{"location":"reference/indicator/vendor/fastfinance/fastfinance/#lettrade.indicator.vendor.fastfinance.fastfinance.super_trend","title":"super_trend","text":"<pre><code>super_trend(\n    c_close, c_open, c_high, c_low, period_atr=10, multi=3\n)\n</code></pre> <p>Supertrend :type c_close: np.ndarray :type c_open: np.ndarray :type c_high: np.ndarray :type c_low: np.ndarray :type period_atr: int :type multi: int :rtype: (np.ndarray, np.ndarray) :return: up, down</p> Source code in <code>lettrade/indicator/vendor/fastfinance/fastfinance.py</code> <pre><code>@jit(nopython=True)\ndef super_trend(c_close, c_open, c_high, c_low, period_atr=10, multi=3):\n    \"\"\"\n    Supertrend\n    :type c_close: np.ndarray\n    :type c_open: np.ndarray\n    :type c_high: np.ndarray\n    :type c_low: np.ndarray\n    :type period_atr: int\n    :type multi: int\n    :rtype: (np.ndarray, np.ndarray)\n    :return: up, down\n    \"\"\"\n    size = len(c_close)\n    avg_tr = atr(c_open, c_high, c_low, period_atr)\n    hl2 = (c_high + c_low) / 2\n    b_up = hl2 + (multi * avg_tr)\n    b_down = hl2 - (multi * avg_tr)\n    st = np.array([np.nan] * size)\n    for i in range(1, size):\n        j = i - 1\n        if c_close[i] &gt; b_up[j]:\n            st[i] = 1\n        elif c_close[i] &lt; b_down[j]:\n            st[i] = 0\n        else:\n            st[i] = st[j]\n            if st[i] == 1 and b_down[i] &lt; b_down[j]:\n                b_down[i] = b_down[j]\n            if st[i] == 0 and b_up[i] &gt; b_up[j]:\n                b_up[i] = b_up[j]\n    return np.where(st == 1, b_down, np.nan), np.where(st == 0, b_up, np.nan)\n</code></pre>"},{"location":"reference/indicator/vendor/fastfinance/fastfinance/#lettrade.indicator.vendor.fastfinance.fastfinance.tr","title":"tr","text":"<pre><code>tr(c_open, c_high, c_low)\n</code></pre> <p>True Range :type c_open: np.ndarray :type c_high: np.ndarray :type c_low: np.ndarray :rtype: np.ndarray</p> Source code in <code>lettrade/indicator/vendor/fastfinance/fastfinance.py</code> <pre><code>@jit(nopython=True)\ndef tr(c_open, c_high, c_low):\n    \"\"\"\n    True Range\n    :type c_open: np.ndarray\n    :type c_high: np.ndarray\n    :type c_low: np.ndarray\n    :rtype: np.ndarray\n    \"\"\"\n    return np.maximum(\n        np.maximum(c_open - c_low, np.abs(c_high - c_open)), np.abs(c_low - c_open)\n    )\n</code></pre>"},{"location":"reference/indicator/vendor/fastfinance/fastfinance/#lettrade.indicator.vendor.fastfinance.fastfinance.trix","title":"trix","text":"<pre><code>trix(data, period, smoothing=2.0)\n</code></pre> <p>Triple Exponential Moving Average :type data: np.ndarray :type period: int :type smoothing: float :rtype: np.ndarray</p> Source code in <code>lettrade/indicator/vendor/fastfinance/fastfinance.py</code> <pre><code>@jit(nopython=True)\ndef trix(data, period, smoothing=2.0):\n    \"\"\"\n    Triple Exponential Moving Average\n    :type data: np.ndarray\n    :type period: int\n    :type smoothing: float\n    :rtype: np.ndarray\n    \"\"\"\n    return (\n        3 * ema(data, period, smoothing)\n        - (3 * ema(ema(data, period, smoothing), period, smoothing))\n    ) + ema(ema(ema(data, period, smoothing), period, smoothing), period, smoothing)\n</code></pre>"},{"location":"reference/indicator/vendor/fastfinance/fastfinance/#lettrade.indicator.vendor.fastfinance.fastfinance.vix","title":"vix","text":"<pre><code>vix(c_close, c_low, period)\n</code></pre> <p>Volatility Index :type c_close: np.ndarray :type c_low: np.ndarray :type period: int :rtype: np.ndarray</p> Source code in <code>lettrade/indicator/vendor/fastfinance/fastfinance.py</code> <pre><code>@jit(nopython=True)\ndef vix(c_close, c_low, period):\n    \"\"\"\n    Volatility Index\n    :type c_close: np.ndarray\n    :type c_low: np.ndarray\n    :type period: int\n    :rtype: np.ndarray\n    \"\"\"\n    size = len(c_close)\n    out = np.full(size, np.nan)\n    for i in range(period - 1, size):\n        hc = np.max(c_close[i + 1 - period : i + 1])\n        out[i] = ((hc - c_low[i]) / hc) * 100\n    return out\n</code></pre>"},{"location":"reference/indicator/vendor/fastfinance/fastfinance/#lettrade.indicator.vendor.fastfinance.fastfinance.volume_profile","title":"volume_profile","text":"<pre><code>volume_profile(c_close, c_volume, bins=10)\n</code></pre> <p>Volume Profile :type c_close: np.ndarray :type c_volume: np.ndarray :type bins: int :rtype: (np.ndarray, np.ndarray) :return: count, price</p> Source code in <code>lettrade/indicator/vendor/fastfinance/fastfinance.py</code> <pre><code>@jit(nopython=True)\ndef volume_profile(c_close, c_volume, bins=10):\n    \"\"\"\n    Volume Profile\n    :type c_close: np.ndarray\n    :type c_volume: np.ndarray\n    :type bins: int\n    :rtype: (np.ndarray, np.ndarray)\n    :return: count, price\n    \"\"\"\n    min_close = np.min(c_close)\n    max_close = np.max(c_close)\n    norm = 1.0 / (max_close - min_close)\n    sum_h = np.array([0.0] * bins)\n    for i in range(len(c_close)):\n        sum_h[int((c_close[i] - min_close) * bins * norm)] += c_volume[i] ** 2\n    sq = np.sqrt(sum_h)\n    return sq / sum(sq), np.linspace(min_close, max_close, bins)\n</code></pre>"},{"location":"reference/indicator/vendor/fastfinance/fastfinance/#lettrade.indicator.vendor.fastfinance.fastfinance.wma","title":"wma","text":"<pre><code>wma(data, period)\n</code></pre> <p>Weighted Moving Average :type data: np.ndarray :type period: int :rtype: np.ndarray</p> Source code in <code>lettrade/indicator/vendor/fastfinance/fastfinance.py</code> <pre><code>@jit(nopython=True)\ndef wma(data, period):\n    \"\"\"\n    Weighted Moving Average\n    :type data: np.ndarray\n    :type period: int\n    :rtype: np.ndarray\n    \"\"\"\n    weights = np.arange(period, 0, -1)\n    weights = weights / weights.sum()\n    out = convolve(data, weights)\n    return np.concatenate((np.array([np.nan] * (len(data) - len(out))), out))\n</code></pre>"},{"location":"reference/indicator/vendor/fastfinance/fastfinance/#lettrade.indicator.vendor.fastfinance.fastfinance.wpr","title":"wpr","text":"<pre><code>wpr(c_close, c_high, c_low, period)\n</code></pre> <p>William %R :type c_close: np.ndarray :type c_high: np.ndarray :type c_low: np.ndarray :type period: int :rtype: (np.ndarray, np.ndarray)</p> Source code in <code>lettrade/indicator/vendor/fastfinance/fastfinance.py</code> <pre><code>@jit(nopython=True)\ndef wpr(c_close, c_high, c_low, period):\n    \"\"\"\n    William %R\n    :type c_close: np.ndarray\n    :type c_high: np.ndarray\n    :type c_low: np.ndarray\n    :type period: int\n    :rtype: (np.ndarray, np.ndarray)\n    \"\"\"\n    size = len(c_close)\n    out = np.full(size, np.nan)\n    for i in range(period - 1, size):\n        e = i + 1\n        s = e - period\n        mh = np.max(c_high[s:e])\n        out[i] = ((mh - c_close[i]) / (mh - np.min(c_low[s:e]))) * -100\n    return out\n</code></pre>"},{"location":"reference/indicator/vendor/fastfinance/fastfinance/#lettrade.indicator.vendor.fastfinance.fastfinance.zlsma","title":"zlsma","text":"<pre><code>zlsma(data, period=14, regression=True)\n</code></pre> <p>Zero-Lag Least Squares Moving Average :param data: np.ndarray :param period: int :param regression: bool :return: np.ndarray</p> Source code in <code>lettrade/indicator/vendor/fastfinance/fastfinance.py</code> <pre><code>@jit(nopython=True)\ndef zlsma(data, period=14, regression=True):\n    \"\"\"\n    Zero-Lag Least Squares Moving Average\n    :param data: np.ndarray\n    :param period: int\n    :param regression: bool\n    :return: np.ndarray\n    \"\"\"\n    size = len(data)\n    sum_w = np.sum(np.arange(1, period + 1, dtype=np.float64))\n    lsma_v = lsma(data, period, regression)\n    out = np.full(size, np.nan)\n    w = sum_w / (2 * np.sum(np.arange(1, period)))\n    for i in range(period - 1, size):\n        out[i] = lsma_v[i] + (data[i] - lsma_v[i]) * w\n    return out\n</code></pre>"},{"location":"reference/indicator/vendor/qtpylib/","title":"Index","text":""},{"location":"reference/indicator/vendor/qtpylib/#lettrade.indicator.vendor.qtpylib","title":"qtpylib","text":""},{"location":"reference/indicator/vendor/qtpylib/inject/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> inject","text":""},{"location":"reference/indicator/vendor/qtpylib/inject/#lettrade.indicator.vendor.qtpylib.inject","title":"inject","text":""},{"location":"reference/indicator/vendor/qtpylib/qtpylib/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> qtpylib","text":""},{"location":"reference/indicator/vendor/qtpylib/qtpylib/#lettrade.indicator.vendor.qtpylib.qtpylib","title":"qtpylib","text":""},{"location":"reference/indicator/vendor/qtpylib/qtpylib/#lettrade.indicator.vendor.qtpylib.qtpylib.cci","title":"cci","text":"<pre><code>cci(series, window=14)\n</code></pre> <p>compute commodity channel index</p> Source code in <code>lettrade/indicator/vendor/qtpylib/qtpylib.py</code> <pre><code>def cci(series, window=14):\n    \"\"\"\n    compute commodity channel index\n    \"\"\"\n    price = typical_price(series)\n    typical_mean = rolling_mean(price, window)\n    res = (price - typical_mean) / (0.015 * np.std(typical_mean))\n    return pd.Series(index=series.index, data=res)\n</code></pre>"},{"location":"reference/indicator/vendor/qtpylib/qtpylib/#lettrade.indicator.vendor.qtpylib.qtpylib.ibs","title":"ibs","text":"<pre><code>ibs(bars)\n</code></pre> <p>Internal bar strength</p> Source code in <code>lettrade/indicator/vendor/qtpylib/qtpylib.py</code> <pre><code>def ibs(bars):\n    \"\"\"Internal bar strength\"\"\"\n    res = np.round((bars[\"close\"] - bars[\"low\"]) / (bars[\"high\"] - bars[\"low\"]), 2)\n    return pd.Series(index=bars.index, data=res)\n</code></pre>"},{"location":"reference/indicator/vendor/qtpylib/qtpylib/#lettrade.indicator.vendor.qtpylib.qtpylib.macd","title":"macd","text":"<pre><code>macd(series, fast=3, slow=10, smooth=16)\n</code></pre> <p>compute the MACD (Moving Average Convergence/Divergence) using a fast and slow exponential moving avg' return value is emaslow, emafast, macd which are len(x) arrays</p> Source code in <code>lettrade/indicator/vendor/qtpylib/qtpylib.py</code> <pre><code>def macd(series, fast=3, slow=10, smooth=16):\n    \"\"\"\n    compute the MACD (Moving Average Convergence/Divergence)\n    using a fast and slow exponential moving avg'\n    return value is emaslow, emafast, macd which are len(x) arrays\n    \"\"\"\n    macd_line = rolling_weighted_mean(series, window=fast) - rolling_weighted_mean(\n        series, window=slow\n    )\n    signal = rolling_weighted_mean(macd_line, window=smooth)\n    histogram = macd_line - signal\n    # return macd_line, signal, histogram\n    return pd.DataFrame(\n        index=series.index,\n        data={\n            \"macd\": macd_line.values,\n            \"signal\": signal.values,\n            \"histogram\": histogram.values,\n        },\n    )\n</code></pre>"},{"location":"reference/indicator/vendor/qtpylib/qtpylib/#lettrade.indicator.vendor.qtpylib.qtpylib.pvt","title":"pvt","text":"<pre><code>pvt(bars)\n</code></pre> <p>Price Volume Trend</p> Source code in <code>lettrade/indicator/vendor/qtpylib/qtpylib.py</code> <pre><code>def pvt(bars):\n    \"\"\"Price Volume Trend\"\"\"\n    trend = ((bars[\"close\"] - bars[\"close\"].shift(1)) / bars[\"close\"].shift(1)) * bars[\n        \"volume\"\n    ]\n    return trend.cumsum()\n</code></pre>"},{"location":"reference/indicator/vendor/qtpylib/qtpylib/#lettrade.indicator.vendor.qtpylib.qtpylib.roc","title":"roc","text":"<pre><code>roc(series, window=14)\n</code></pre> <p>compute rate of change</p> Source code in <code>lettrade/indicator/vendor/qtpylib/qtpylib.py</code> <pre><code>def roc(series, window=14):\n    \"\"\"\n    compute rate of change\n    \"\"\"\n    res = (series - series.shift(window)) / series.shift(window)\n    return pd.Series(index=series.index, data=res)\n</code></pre>"},{"location":"reference/indicator/vendor/qtpylib/qtpylib/#lettrade.indicator.vendor.qtpylib.qtpylib.rolling_vwap","title":"rolling_vwap","text":"<pre><code>rolling_vwap(bars, window=200, min_periods=None)\n</code></pre> <p>calculate vwap using moving window (input can be pandas series or numpy array) bars are usually mid [ (h+l)/2 ] or typical [ (h+l+c)/3 ]</p> Source code in <code>lettrade/indicator/vendor/qtpylib/qtpylib.py</code> <pre><code>def rolling_vwap(bars, window=200, min_periods=None):\n    \"\"\"\n    calculate vwap using moving window\n    (input can be pandas series or numpy array)\n    bars are usually mid [ (h+l)/2 ] or typical [ (h+l+c)/3 ]\n    \"\"\"\n    min_periods = window if min_periods is None else min_periods\n\n    typical = (bars[\"high\"] + bars[\"low\"] + bars[\"close\"]) / 3\n    volume = bars[\"volume\"]\n\n    left = (volume * typical).rolling(window=window, min_periods=min_periods).sum()\n    right = volume.rolling(window=window, min_periods=min_periods).sum()\n\n    return (\n        pd.Series(index=bars.index, data=(left / right))\n        .replace([np.inf, -np.inf], float(\"NaN\"))\n        .ffill()\n    )\n</code></pre>"},{"location":"reference/indicator/vendor/qtpylib/qtpylib/#lettrade.indicator.vendor.qtpylib.qtpylib.rsi","title":"rsi","text":"<pre><code>rsi(series, window=14)\n</code></pre> <p>compute the n period relative strength indicator</p> Source code in <code>lettrade/indicator/vendor/qtpylib/qtpylib.py</code> <pre><code>def rsi(series, window=14):\n    \"\"\"\n    compute the n period relative strength indicator\n    \"\"\"\n\n    # 100-(100/relative_strength)\n    deltas = np.diff(series)\n    seed = deltas[: window + 1]\n\n    # default values\n    ups = seed[seed &gt; 0].sum() / window\n    downs = -seed[seed &lt; 0].sum() / window\n    rsival = np.zeros_like(series)\n    rsival[:window] = 100.0 - 100.0 / (1.0 + ups / downs)\n\n    # period values\n    for i in range(window, len(series)):\n        delta = deltas[i - 1]\n        if delta &gt; 0:\n            upval = delta\n            downval = 0\n        else:\n            upval = 0\n            downval = -delta\n\n        ups = (ups * (window - 1) + upval) / window\n        downs = (downs * (window - 1.0) + downval) / window\n        rsival[i] = 100.0 - 100.0 / (1.0 + ups / downs)\n\n    # return rsival\n    return pd.Series(index=series.index, data=rsival)\n</code></pre>"},{"location":"reference/indicator/vendor/qtpylib/qtpylib/#lettrade.indicator.vendor.qtpylib.qtpylib.session","title":"session","text":"<pre><code>session(df, start='17:00', end='16:00')\n</code></pre> <p>remove previous globex day from df</p> Source code in <code>lettrade/indicator/vendor/qtpylib/qtpylib.py</code> <pre><code>def session(df, start=\"17:00\", end=\"16:00\"):\n    \"\"\"remove previous globex day from df\"\"\"\n    if df.empty:\n        return df\n\n    # get start/end/now as decimals\n    int_start = list(map(int, start.split(\":\")))\n    int_start = (int_start[0] + int_start[1] - 1 / 100) - 0.0001\n    int_end = list(map(int, end.split(\":\")))\n    int_end = int_end[0] + int_end[1] / 100\n    int_now = df[-1:].index.hour[0] + (df[:1].index.minute[0]) / 100\n\n    # same-dat session?\n    is_same_day = int_end &gt; int_start\n\n    # set pointers\n    curr = prev = df[-1:].index[0].strftime(\"%Y-%m-%d\")\n\n    # globex/forex session\n    if not is_same_day:\n        prev = (datetime.strptime(curr, \"%Y-%m-%d\") - timedelta(1)).strftime(\"%Y-%m-%d\")\n\n    # slice\n    if int_now &gt;= int_start:\n        df = df[df.index &gt;= curr + \" \" + start]\n    else:\n        df = df[df.index &gt;= prev + \" \" + start]\n\n    return df.copy()\n</code></pre>"},{"location":"reference/indicator/vendor/qtpylib/qtpylib/#lettrade.indicator.vendor.qtpylib.qtpylib.stoch","title":"stoch","text":"<pre><code>stoch(df, window=14, d=3, k=3, fast=False)\n</code></pre> <p>compute the n period relative strength indicator http://excelta.blogspot.co.il/2013/09/stochastic-oscillator-technical.html</p> Source code in <code>lettrade/indicator/vendor/qtpylib/qtpylib.py</code> <pre><code>def stoch(df, window=14, d=3, k=3, fast=False):\n    \"\"\"\n    compute the n period relative strength indicator\n    http://excelta.blogspot.co.il/2013/09/stochastic-oscillator-technical.html\n    \"\"\"\n\n    my_df = pd.DataFrame(index=df.index)\n\n    my_df[\"rolling_max\"] = df[\"high\"].rolling(window).max()\n    my_df[\"rolling_min\"] = df[\"low\"].rolling(window).min()\n\n    my_df[\"fast_k\"] = (\n        100\n        * (df[\"close\"] - my_df[\"rolling_min\"])\n        / (my_df[\"rolling_max\"] - my_df[\"rolling_min\"])\n    )\n    my_df[\"fast_d\"] = my_df[\"fast_k\"].rolling(d).mean()\n\n    if fast:\n        return my_df.loc[:, [\"fast_k\", \"fast_d\"]]\n\n    my_df[\"slow_k\"] = my_df[\"fast_k\"].rolling(k).mean()\n    my_df[\"slow_d\"] = my_df[\"slow_k\"].rolling(d).mean()\n\n    return my_df.loc[:, [\"slow_k\", \"slow_d\"]]\n</code></pre>"},{"location":"reference/indicator/vendor/qtpylib/qtpylib/#lettrade.indicator.vendor.qtpylib.qtpylib.vwap","title":"vwap","text":"<pre><code>vwap(bars)\n</code></pre> <p>calculate vwap of entire time series (input can be pandas series or numpy array) bars are usually mid [ (h+l)/2 ] or typical [ (h+l+c)/3 ]</p> Source code in <code>lettrade/indicator/vendor/qtpylib/qtpylib.py</code> <pre><code>def vwap(bars):\n    \"\"\"\n    calculate vwap of entire time series\n    (input can be pandas series or numpy array)\n    bars are usually mid [ (h+l)/2 ] or typical [ (h+l+c)/3 ]\n    \"\"\"\n    raise ValueError(\n        \"using `qtpylib.vwap` facilitates lookahead bias. Please use \"\n        \"`qtpylib.rolling_vwap` instead, which calculates vwap in a rolling manner.\"\n    )\n</code></pre>"},{"location":"reference/indicator/vendor/qtpylib/qtpylib/#lettrade.indicator.vendor.qtpylib.qtpylib.zlma","title":"zlma","text":"<pre><code>zlma(series, window=20, min_periods=None, kind='ema')\n</code></pre> <p>John Ehlers' Zero lag (exponential) moving average https://en.wikipedia.org/wiki/Zero_lag_exponential_moving_average</p> Source code in <code>lettrade/indicator/vendor/qtpylib/qtpylib.py</code> <pre><code>def zlma(series, window=20, min_periods=None, kind=\"ema\"):\n    \"\"\"\n    John Ehlers' Zero lag (exponential) moving average\n    https://en.wikipedia.org/wiki/Zero_lag_exponential_moving_average\n    \"\"\"\n    min_periods = window if min_periods is None else min_periods\n\n    lag = (window - 1) // 2\n    series = 2 * series - series.shift(lag)\n    if kind in [\"ewm\", \"ema\"]:\n        return wma(series, lag, min_periods)\n    elif kind == \"hma\":\n        return hma(series, lag, min_periods)\n    return sma(series, lag, min_periods)\n</code></pre>"},{"location":"reference/indicator/vendor/qtpylib/qtpylib/#lettrade.indicator.vendor.qtpylib.qtpylib.zscore","title":"zscore","text":"<pre><code>zscore(bars, window=20, stds=1, col='close')\n</code></pre> <p>get zscore of price</p> Source code in <code>lettrade/indicator/vendor/qtpylib/qtpylib.py</code> <pre><code>def zscore(bars, window=20, stds=1, col=\"close\"):\n    \"\"\"get zscore of price\"\"\"\n    std = numpy_rolling_std(bars[col], window)\n    mean = numpy_rolling_mean(bars[col], window)\n    return (bars[col] - mean) / (std * stds)\n</code></pre>"},{"location":"reference/indicator/volatility/","title":"Index","text":""},{"location":"reference/indicator/volatility/#lettrade.indicator.volatility","title":"volatility","text":""},{"location":"reference/indicator/volatility/keltner_channel/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> keltner_channel","text":""},{"location":"reference/indicator/volatility/keltner_channel/#lettrade.indicator.volatility.keltner_channel","title":"keltner_channel","text":""},{"location":"reference/indicator/volatility/keltner_channel/#lettrade.indicator.volatility.keltner_channel.keltner_channel","title":"keltner_channel","text":"<pre><code>keltner_channel(\n    df: DataFrame,\n    ma: int = 20,\n    ma_mode: Literal[\"ema\", \"sma\"] = \"ema\",\n    atr: int = 20,\n    shift: float = 1.6,\n    suffix: str = \"\",\n) -&gt; list[Series]\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>df</code>               (<code>DataFrame</code>)           \u2013            <p>description</p> </li> <li> <code>ma</code>               (<code>int</code>, default:                   <code>20</code> )           \u2013            <p>description. Defaults to 20.</p> </li> <li> <code>ma_mode</code>               (<code>Literal[&amp;quot;ema&amp;quot;, &amp;quot;sma&amp;quot;]</code>, default:                   <code>'ema'</code> )           \u2013            <p>description. Defaults to \"ema\".</p> </li> <li> <code>atr</code>               (<code>int</code>, default:                   <code>20</code> )           \u2013            <p>description. Defaults to 20.</p> </li> <li> <code>shift</code>               (<code>float</code>, default:                   <code>1.6</code> )           \u2013            <p>description. Defaults to 1.6.</p> </li> <li> <code>suffix</code>               (<code>str</code>, default:                   <code>''</code> )           \u2013            <p>description. Defaults to \"\".</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list[Series]</code>           \u2013            <p>list[pd.Series]: upper, middle, lower</p> </li> </ul> Source code in <code>lettrade/indicator/volatility/keltner_channel.py</code> <pre><code>def keltner_channel(\n    df: pd.DataFrame,\n    # high: str = \"high\",\n    # low: str = \"low\",\n    # close: str = \"close\",\n    ma: int = 20,\n    ma_mode: Literal[\"ema\", \"sma\"] = \"ema\",\n    atr: int = 20,\n    shift: float = 1.6,\n    suffix: str = \"\",\n) -&gt; list[pd.Series]:\n    \"\"\"_summary_\n\n    Args:\n        df (pd.DataFrame): _description_\n        ma (int, optional): _description_. Defaults to 20.\n        ma_mode (Literal[&amp;quot;ema&amp;quot;, &amp;quot;sma&amp;quot;], optional): _description_. Defaults to \"ema\".\n        atr (int, optional): _description_. Defaults to 20.\n        shift (float, optional): _description_. Defaults to 1.6.\n        suffix (str, optional): _description_. Defaults to \"\".\n\n    Returns:\n        list[pd.Series]: upper, middle, lower\n    \"\"\"\n    ma_fn = ta.SMA if ma_mode == \"sma\" else ta.EMA\n\n    i_basis = ma_fn(df, timeperiod=ma)\n\n    i_atr = ta.ATR(df, timeperiod=atr)\n    i_upper = i_basis + shift * i_atr\n    i_lower = i_basis - shift * i_atr\n\n    i_upper.name = f\"kc_upper{suffix}\"\n    i_basis.name = f\"kc_basis{suffix}\"\n    i_lower.name = f\"kc_lower{suffix}\"\n\n    return i_upper, i_basis, i_lower\n</code></pre>"},{"location":"reference/plot/","title":"Index","text":""},{"location":"reference/plot/#lettrade.plot","title":"plot","text":""},{"location":"reference/plot/bot/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> bot","text":""},{"location":"reference/plot/bot/#lettrade.plot.bot","title":"bot","text":""},{"location":"reference/plot/bot/#lettrade.plot.bot.BotPlotter","title":"BotPlotter","text":"<pre><code>BotPlotter(bot: LetTradeBot)\n</code></pre> <p>               Bases: <code>Plotter</code></p> <p>Class help to plot bot result</p> Source code in <code>lettrade/plot/bot.py</code> <pre><code>def __init__(self, bot: \"LetTradeBot\") -&gt; None:\n    self.bot = bot\n    self.feeder = bot.feeder\n    self.exchange = bot.exchange\n    self.account = bot.account\n    self.strategy = bot.strategy\n\n    self.datas = self.feeder.datas\n</code></pre>"},{"location":"reference/plot/bot/#lettrade.plot.bot.BotPlotter.jump","title":"jump","text":"<pre><code>jump(\n    since: int | str | Timestamp | None = None,\n    order_id: Optional[str] = None,\n    trade_id: Optional[str] = None,\n    range: int = 300,\n    name: Optional[str] = None,\n)\n</code></pre> <p>Jump to place on datefeed</p> <p>Parameters:</p> <ul> <li> <code>since</code>               (<code>int | str | Timestamp | None</code>, default:                   <code>None</code> )           \u2013            <p>Jump to index/datetime. Defaults to None.</p> </li> <li> <code>order_id</code>               (<code>Optional[str]</code>, default:                   <code>None</code> )           \u2013            <p>Jump to order id. Defaults to None.</p> </li> <li> <code>trade_id</code>               (<code>Optional[str]</code>, default:                   <code>None</code> )           \u2013            <p>Jump to trade id. Defaults to None.</p> </li> <li> <code>range</code>               (<code>int</code>, default:                   <code>300</code> )           \u2013            <p>number of candle plot. Defaults to 300.</p> </li> <li> <code>name</code>               (<code>Optional[str]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>description</p> </li> <li> <code>RuntimeError</code>             \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/plot/bot.py</code> <pre><code>def jump(\n    self,\n    since: int | str | pd.Timestamp | None = None,\n    order_id: Optional[str] = None,\n    trade_id: Optional[str] = None,\n    range: int = 300,\n    name: Optional[str] = None,\n):\n    \"\"\"Jump to place on datefeed\n\n    Args:\n        since (int | str | pd.Timestamp | None, optional): Jump to index/datetime. Defaults to None.\n        order_id (Optional[str], optional): Jump to order id. Defaults to None.\n        trade_id (Optional[str], optional): Jump to trade id. Defaults to None.\n        range (int, optional): number of candle plot. Defaults to 300.\n        name (Optional[str], optional): _description_. Defaults to None.\n\n    Raises:\n        RuntimeError: _description_\n        RuntimeError: _description_\n    \"\"\"\n    if self._datas_stored is None:\n        self._datas_stored = self.datas.copy()\n\n    if since is None:\n        if order_id is not None:  # Jump to order id\n            if not isinstance(order_id, str):\n                order_id = str(order_id)\n\n            if order_id in self.exchange.orders:\n                order = self.exchange.orders[order_id]\n            elif order_id in self.exchange.history_orders:\n                order = self.exchange.history_orders[order_id]\n            else:\n                raise RuntimeError(f\"Order id {order_id} not found\")\n\n            loc = self._data_stored.l.index.get_loc(order.open_at)\n            since = loc - int(range / 2)\n\n        elif trade_id is not None:  # Jump to trade id\n            if not isinstance(trade_id, str):\n                trade_id = str(trade_id)\n\n            if trade_id in self.exchange.trades:\n                trade = self.exchange.trades[trade_id]\n            elif trade_id in self.exchange.history_trades:\n                trade = self.exchange.history_trades[trade_id]\n            else:\n                raise RuntimeError(f\"Trade id {trade_id} not found\")\n\n            loc = self._data_stored.l.index.get_loc(trade.entry_at)\n            since = loc - int(range / 2)\n        else:  # Reset\n            self.jump_reset()\n            return\n\n    elif isinstance(since, str):  # Parse string to pd.Timestamp, then since=index\n        since = pd.to_datetime(since, utc=True)\n        since = self._data_stored.l.index.get_loc(since)\n    elif isinstance(since, pd.Timestamp):  # Get index of Timestamp\n        since = self._data_stored.l.index.get_loc(since)\n\n    if name is None:\n        name = self._data_stored.name\n\n    # Since min at pointer_start\n    if since &lt; self._data_stored.l.pointer_start:\n        since = self._data_stored.l.pointer_start\n    # Since max at pointer_stop\n    if since &gt; self._data_stored.l.pointer_stop - range:\n        since = self._data_stored.l.pointer_stop - range\n\n    # Jump\n    for i, data in enumerate(self._datas_stored):\n        if i == 0:\n            self.datas[i] = data.__class__(\n                data=data.l[since : since + range],\n                name=data.name,\n                timeframe=data.timeframe,\n            )\n            self._jump_start_dt = self.data.index[0]\n            self._jump_stop_dt = self.data.index[-1]\n        else:\n            self.datas[i] = data.__class__(\n                data=data.loc[\n                    (data.index &gt;= self._jump_start_dt)\n                    &amp; (data.index &lt;= self._jump_stop_dt)\n                ],\n                name=data.name,\n                timeframe=data.timeframe,\n            )\n\n    # Reload data\n    self.load()\n</code></pre>"},{"location":"reference/plot/bot/#lettrade.plot.bot.BotPlotter.load","title":"load  <code>abstractmethod</code>","text":"<pre><code>load()\n</code></pre> <p>Load plot config from <code>Strategy.plot()</code> and setup candlestick/equity</p> Source code in <code>lettrade/plot/plot.py</code> <pre><code>@abstractmethod\ndef load(self):\n    \"\"\"Load plot config from `Strategy.plot()` and setup candlestick/equity\"\"\"\n</code></pre>"},{"location":"reference/plot/bot/#lettrade.plot.bot.BotPlotter.plot","title":"plot  <code>abstractmethod</code>","text":"<pre><code>plot(**kwargs)\n</code></pre> <p>Plot <code>equity</code>, <code>orders</code>, and <code>trades</code> then show</p> Source code in <code>lettrade/plot/plot.py</code> <pre><code>@abstractmethod\ndef plot(self, **kwargs):\n    \"\"\"Plot `equity`, `orders`, and `trades` then show\"\"\"\n</code></pre>"},{"location":"reference/plot/bot/#lettrade.plot.bot.BotPlotter.stop","title":"stop  <code>abstractmethod</code>","text":"<pre><code>stop()\n</code></pre> <p>stop plotter</p> Source code in <code>lettrade/plot/plot.py</code> <pre><code>@abstractmethod\ndef stop(self):\n    \"\"\"stop plotter\"\"\"\n</code></pre>"},{"location":"reference/plot/color/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> color","text":""},{"location":"reference/plot/color/#lettrade.plot.color","title":"color","text":""},{"location":"reference/plot/optimize/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> optimize","text":""},{"location":"reference/plot/optimize/#lettrade.plot.optimize","title":"optimize","text":""},{"location":"reference/plot/optimize/#lettrade.plot.optimize.OptimizePlotter","title":"OptimizePlotter","text":"<pre><code>OptimizePlotter()\n</code></pre> <p>               Bases: <code>Plotter</code></p> <p>Class help to plot <code>lettrade</code></p> Source code in <code>lettrade/plot/optimize.py</code> <pre><code>def __init__(self) -&gt; None:\n    super().__init__()\n</code></pre>"},{"location":"reference/plot/optimize/#lettrade.plot.optimize.OptimizePlotter.contour","title":"contour","text":"<pre><code>contour(x: str, y: str, z: str = 'equity', **kwargs)\n</code></pre> Source code in <code>lettrade/plot/optimize.py</code> <pre><code>def contour(self, x: str, y: str, z: str = \"equity\", **kwargs):\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/plot/optimize/#lettrade.plot.optimize.OptimizePlotter.heatmap","title":"heatmap","text":"<pre><code>heatmap(x: str, y: str, z: str = 'equity', **kwargs)\n</code></pre> Source code in <code>lettrade/plot/optimize.py</code> <pre><code>def heatmap(self, x: str, y: str, z: str = \"equity\", **kwargs):\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/plot/optimize/#lettrade.plot.optimize.OptimizePlotter.load","title":"load  <code>abstractmethod</code>","text":"<pre><code>load()\n</code></pre> <p>Load plot config from <code>Strategy.plot()</code> and setup candlestick/equity</p> Source code in <code>lettrade/plot/plot.py</code> <pre><code>@abstractmethod\ndef load(self):\n    \"\"\"Load plot config from `Strategy.plot()` and setup candlestick/equity\"\"\"\n</code></pre>"},{"location":"reference/plot/optimize/#lettrade.plot.optimize.OptimizePlotter.on_done","title":"on_done","text":"<pre><code>on_done()\n</code></pre> Source code in <code>lettrade/plot/optimize.py</code> <pre><code>def on_done(self):\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/plot/optimize/#lettrade.plot.optimize.OptimizePlotter.on_result","title":"on_result","text":"<pre><code>on_result(result)\n</code></pre> Source code in <code>lettrade/plot/optimize.py</code> <pre><code>def on_result(self, result):\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/plot/optimize/#lettrade.plot.optimize.OptimizePlotter.plot","title":"plot  <code>abstractmethod</code>","text":"<pre><code>plot(**kwargs)\n</code></pre> <p>Plot <code>equity</code>, <code>orders</code>, and <code>trades</code> then show</p> Source code in <code>lettrade/plot/plot.py</code> <pre><code>@abstractmethod\ndef plot(self, **kwargs):\n    \"\"\"Plot `equity`, `orders`, and `trades` then show\"\"\"\n</code></pre>"},{"location":"reference/plot/optimize/#lettrade.plot.optimize.OptimizePlotter.stop","title":"stop  <code>abstractmethod</code>","text":"<pre><code>stop()\n</code></pre> <p>stop plotter</p> Source code in <code>lettrade/plot/plot.py</code> <pre><code>@abstractmethod\ndef stop(self):\n    \"\"\"stop plotter\"\"\"\n</code></pre>"},{"location":"reference/plot/plot/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> plot","text":""},{"location":"reference/plot/plot/#lettrade.plot.plot","title":"plot","text":""},{"location":"reference/plot/plot/#lettrade.plot.plot.Plotter","title":"Plotter","text":"<p>               Bases: <code>ABC</code></p> <p>Base class help to plot strategy</p>"},{"location":"reference/plot/plot/#lettrade.plot.plot.Plotter.load","title":"load  <code>abstractmethod</code>","text":"<pre><code>load()\n</code></pre> <p>Load plot config from <code>Strategy.plot()</code> and setup candlestick/equity</p> Source code in <code>lettrade/plot/plot.py</code> <pre><code>@abstractmethod\ndef load(self):\n    \"\"\"Load plot config from `Strategy.plot()` and setup candlestick/equity\"\"\"\n</code></pre>"},{"location":"reference/plot/plot/#lettrade.plot.plot.Plotter.plot","title":"plot  <code>abstractmethod</code>","text":"<pre><code>plot(**kwargs)\n</code></pre> <p>Plot <code>equity</code>, <code>orders</code>, and <code>trades</code> then show</p> Source code in <code>lettrade/plot/plot.py</code> <pre><code>@abstractmethod\ndef plot(self, **kwargs):\n    \"\"\"Plot `equity`, `orders`, and `trades` then show\"\"\"\n</code></pre>"},{"location":"reference/plot/plot/#lettrade.plot.plot.Plotter.stop","title":"stop  <code>abstractmethod</code>","text":"<pre><code>stop()\n</code></pre> <p>stop plotter</p> Source code in <code>lettrade/plot/plot.py</code> <pre><code>@abstractmethod\ndef stop(self):\n    \"\"\"stop plotter\"\"\"\n</code></pre>"},{"location":"reference/plot/plotly/","title":"Index","text":""},{"location":"reference/plot/plotly/#lettrade.plot.plotly","title":"plotly","text":""},{"location":"reference/plot/plotly/helper/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> helper","text":""},{"location":"reference/plot/plotly/helper/#lettrade.plot.plotly.helper","title":"helper","text":""},{"location":"reference/plot/plotly/indicator/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> indicator","text":""},{"location":"reference/plot/plotly/indicator/#lettrade.plot.plotly.indicator","title":"indicator","text":""},{"location":"reference/plot/plotly/plotly/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> plotly","text":""},{"location":"reference/plot/plotly/plotly/#lettrade.plot.plotly.plotly","title":"plotly","text":""},{"location":"reference/plot/plotly/plotly/#lettrade.plot.plotly.plotly.PlotlyBotPlotter","title":"PlotlyBotPlotter","text":"<pre><code>PlotlyBotPlotter(bot: LetTradeBot)\n</code></pre> <p>               Bases: <code>BotPlotter</code></p> <p>Class help to plot <code>lettrade</code></p> Source code in <code>lettrade/plot/bot.py</code> <pre><code>def __init__(self, bot: \"LetTradeBot\") -&gt; None:\n    self.bot = bot\n    self.feeder = bot.feeder\n    self.exchange = bot.exchange\n    self.account = bot.account\n    self.strategy = bot.strategy\n\n    self.datas = self.feeder.datas\n</code></pre>"},{"location":"reference/plot/plotly/plotly/#lettrade.plot.plotly.plotly.PlotlyBotPlotter.jump","title":"jump","text":"<pre><code>jump(\n    since: int | str | Timestamp | None = None,\n    order_id: Optional[str] = None,\n    trade_id: Optional[str] = None,\n    range: int = 300,\n    name: Optional[str] = None,\n)\n</code></pre> <p>Jump to place on datefeed</p> <p>Parameters:</p> <ul> <li> <code>since</code>               (<code>int | str | Timestamp | None</code>, default:                   <code>None</code> )           \u2013            <p>Jump to index/datetime. Defaults to None.</p> </li> <li> <code>order_id</code>               (<code>Optional[str]</code>, default:                   <code>None</code> )           \u2013            <p>Jump to order id. Defaults to None.</p> </li> <li> <code>trade_id</code>               (<code>Optional[str]</code>, default:                   <code>None</code> )           \u2013            <p>Jump to trade id. Defaults to None.</p> </li> <li> <code>range</code>               (<code>int</code>, default:                   <code>300</code> )           \u2013            <p>number of candle plot. Defaults to 300.</p> </li> <li> <code>name</code>               (<code>Optional[str]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>description</p> </li> <li> <code>RuntimeError</code>             \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/plot/bot.py</code> <pre><code>def jump(\n    self,\n    since: int | str | pd.Timestamp | None = None,\n    order_id: Optional[str] = None,\n    trade_id: Optional[str] = None,\n    range: int = 300,\n    name: Optional[str] = None,\n):\n    \"\"\"Jump to place on datefeed\n\n    Args:\n        since (int | str | pd.Timestamp | None, optional): Jump to index/datetime. Defaults to None.\n        order_id (Optional[str], optional): Jump to order id. Defaults to None.\n        trade_id (Optional[str], optional): Jump to trade id. Defaults to None.\n        range (int, optional): number of candle plot. Defaults to 300.\n        name (Optional[str], optional): _description_. Defaults to None.\n\n    Raises:\n        RuntimeError: _description_\n        RuntimeError: _description_\n    \"\"\"\n    if self._datas_stored is None:\n        self._datas_stored = self.datas.copy()\n\n    if since is None:\n        if order_id is not None:  # Jump to order id\n            if not isinstance(order_id, str):\n                order_id = str(order_id)\n\n            if order_id in self.exchange.orders:\n                order = self.exchange.orders[order_id]\n            elif order_id in self.exchange.history_orders:\n                order = self.exchange.history_orders[order_id]\n            else:\n                raise RuntimeError(f\"Order id {order_id} not found\")\n\n            loc = self._data_stored.l.index.get_loc(order.open_at)\n            since = loc - int(range / 2)\n\n        elif trade_id is not None:  # Jump to trade id\n            if not isinstance(trade_id, str):\n                trade_id = str(trade_id)\n\n            if trade_id in self.exchange.trades:\n                trade = self.exchange.trades[trade_id]\n            elif trade_id in self.exchange.history_trades:\n                trade = self.exchange.history_trades[trade_id]\n            else:\n                raise RuntimeError(f\"Trade id {trade_id} not found\")\n\n            loc = self._data_stored.l.index.get_loc(trade.entry_at)\n            since = loc - int(range / 2)\n        else:  # Reset\n            self.jump_reset()\n            return\n\n    elif isinstance(since, str):  # Parse string to pd.Timestamp, then since=index\n        since = pd.to_datetime(since, utc=True)\n        since = self._data_stored.l.index.get_loc(since)\n    elif isinstance(since, pd.Timestamp):  # Get index of Timestamp\n        since = self._data_stored.l.index.get_loc(since)\n\n    if name is None:\n        name = self._data_stored.name\n\n    # Since min at pointer_start\n    if since &lt; self._data_stored.l.pointer_start:\n        since = self._data_stored.l.pointer_start\n    # Since max at pointer_stop\n    if since &gt; self._data_stored.l.pointer_stop - range:\n        since = self._data_stored.l.pointer_stop - range\n\n    # Jump\n    for i, data in enumerate(self._datas_stored):\n        if i == 0:\n            self.datas[i] = data.__class__(\n                data=data.l[since : since + range],\n                name=data.name,\n                timeframe=data.timeframe,\n            )\n            self._jump_start_dt = self.data.index[0]\n            self._jump_stop_dt = self.data.index[-1]\n        else:\n            self.datas[i] = data.__class__(\n                data=data.loc[\n                    (data.index &gt;= self._jump_start_dt)\n                    &amp; (data.index &lt;= self._jump_stop_dt)\n                ],\n                name=data.name,\n                timeframe=data.timeframe,\n            )\n\n    # Reload data\n    self.load()\n</code></pre>"},{"location":"reference/plot/plotly/plotly/#lettrade.plot.plotly.plotly.PlotlyBotPlotter.load","title":"load","text":"<pre><code>load()\n</code></pre> <p>Load plot config from <code>Strategy.plot()</code> and setup candlestick/equity</p> Source code in <code>lettrade/plot/plotly/plotly.py</code> <pre><code>def load(self):\n    \"\"\"Load plot config from `Strategy.plot()` and setup candlestick/equity\"\"\"\n\n    # Strategy plot\n    config: dict = self.strategy.plot(*self.datas)\n\n    # Params\n    plot_rows = max(config.get(\"rows\", 2), len(self.datas) + 1)\n    params = dict(\n        rows=plot_rows,\n        shared_xaxes=True,\n        vertical_spacing=0.03,\n        # row_width=[0.2, 0.7],\n    )\n    if \"params\" in config:\n        params.update(**config[\"params\"])\n\n    # Init\n    self.figure = make_subplots(**params)\n\n    # Plot candles\n    self._data_shape = dict()\n    for i, data in enumerate(self.datas):\n        shape = dict(\n            row=1 + i,\n            col=1,\n        )\n        self._data_shape[data.name] = shape\n        self.figure.add_trace(\n            go.Candlestick(\n                x=data.index,\n                open=data[\"open\"],\n                high=data[\"high\"],\n                low=data[\"low\"],\n                close=data[\"close\"],\n                name=f\"Price {data.name}\",\n                # hoverinfo=\"x+y\",\n            ),\n            **shape,\n        )\n        self.figure.update_yaxes(\n            title_text=\"Price $\",\n            # autorange=True,\n            # fixedrange=False,\n            # showspikes=True,\n            # spikemode=\"across\",\n            mirror=True,\n            ticks=\"outside\",\n            showline=True,\n            # linecolor=\"\",\n            **shape,\n        )\n        self.figure.update_xaxes(\n            title_text=data.name,\n            rangeslider_visible=False,\n            # showspikes=True,\n            # spikemode=\"across\",\n            mirror=True,\n            ticks=\"outside\",\n            showline=True,\n            # linecolor=\"\",\n            **shape,\n        )\n\n    self._load_extend(config)\n\n    # Buttons\n    buttons = [dict(step=\"all\")]\n    match self.data.timeframe.unit:\n        case \"m\":\n            count = 1\n            step = \"day\"\n        case \"h\":\n            count = 7\n            step = \"day\"\n        case _:\n            count = 1\n            step = \"month\"\n    buttons.extend(\n        [\n            dict(\n                count=6 * count,\n                label=f\"{6*count} {step}\",\n                step=step,\n                stepmode=\"backward\",\n            ),\n            dict(\n                count=3 * count,\n                label=f\"{3*count} {step}\",\n                step=step,\n                stepmode=\"backward\",\n            ),\n            dict(\n                count=count,\n                label=f\"{count} {step}\",\n                step=step,\n                stepmode=\"backward\",\n            ),\n        ]\n    )\n\n    # Layout\n    layout_params = dict(\n        xaxis=dict(\n            rangeselector=dict(\n                bgcolor=\"#282a36\",\n                activecolor=\"#5b5b66\",\n                buttons=buttons,\n            ),\n        ),\n        yaxis=dict(\n            autorange=True,\n            fixedrange=False,\n        ),\n        title=dict(\n            text=str(self.strategy),\n            font=dict(size=24),\n            x=0.5,\n            xref=\"paper\",\n        ),\n        # autosize=False,\n        # width=800,\n        height=1_000 * plot_rows,\n        modebar_add=[\n            \"v1hovermode\",\n            \"hoverclosest\",\n            \"hovercompare\",\n            \"togglehover\",\n            \"togglespikelines\",\n            \"drawline\",\n            \"drawopenpath\",\n            \"drawclosedpath\",\n            \"drawcircle\",\n            \"drawrect\",\n            \"eraseshape\",\n        ],\n        # template=\"plotly_dark\",\n        hovermode=\"x unified\",\n    )\n    if \"layout\" in config:\n        layout_params.update(config[\"layout\"])\n    self.figure.update_layout(**layout_params)\n</code></pre>"},{"location":"reference/plot/plotly/plotly/#lettrade.plot.plotly.plotly.PlotlyBotPlotter.plot","title":"plot","text":"<pre><code>plot(jump: Optional[dict] = None, **kwargs)\n</code></pre> <p>Plot <code>equity</code>, <code>orders</code>, and <code>trades</code> then show</p> Source code in <code>lettrade/plot/plotly/plotly.py</code> <pre><code>def plot(self, jump: Optional[dict] = None, **kwargs):\n    \"\"\"Plot `equity`, `orders`, and `trades` then show\"\"\"\n    if jump is not None:\n        self.jump(**jump)\n    elif self.figure is None:\n        self.jump_reset()\n        self.load()\n\n    self._plot_equity()\n    self._plot_orders()\n    self._plot_trades()\n\n    params = dict(layout_xaxis_rangeslider_visible=False)\n    params.update(**kwargs)\n    self.figure.update(**params)\n\n    self.figure.show()\n</code></pre>"},{"location":"reference/plot/plotly/plotly/#lettrade.plot.plotly.plotly.PlotlyBotPlotter.stop","title":"stop","text":"<pre><code>stop()\n</code></pre> <p>stop plotter</p> Source code in <code>lettrade/plot/plotly/plotly.py</code> <pre><code>def stop(self):\n    \"\"\"stop plotter\"\"\"\n</code></pre>"},{"location":"reference/stats/","title":"Index","text":""},{"location":"reference/stats/#lettrade.stats","title":"stats","text":""},{"location":"reference/stats/stats/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> stats","text":""},{"location":"reference/stats/stats/#lettrade.stats.stats","title":"stats","text":""},{"location":"reference/stats/stats/#lettrade.stats.stats.BotStatistic","title":"BotStatistic","text":"<pre><code>BotStatistic(\n    feeder: DataFeeder,\n    exchange: Exchange,\n    strategy: Strategy,\n)\n</code></pre> <p>Compute strategy result</p> Source code in <code>lettrade/stats/stats.py</code> <pre><code>def __init__(\n    self,\n    feeder: DataFeeder,\n    exchange: Exchange,\n    strategy: Strategy,\n) -&gt; None:\n    self.feeder: DataFeeder = feeder\n    self.exchange: Exchange = exchange\n    self.strategy: Strategy = strategy\n    self.account: Account = strategy.account\n</code></pre>"},{"location":"reference/stats/stats/#lettrade.stats.stats.BotStatistic.compute","title":"compute","text":"<pre><code>compute()\n</code></pre> <p>Calculate strategy report</p> Source code in <code>lettrade/stats/stats.py</code> <pre><code>def compute(self):\n    \"\"\"\n    Calculate strategy report\n    \"\"\"\n    data = self.feeder.data\n\n    equities = list(self.account._equities.values())\n    trades = list(self.exchange.history_trades.values()) + list(\n        self.exchange.trades.values()\n    )\n    trades_columns = (\n        \"size\",\n        \"entry_at\",\n        \"exit_at\",\n        \"entry_price\",\n        \"exit_price\",\n        \"pl\",\n        \"fee\",\n    )\n    trades_df = pd.DataFrame(columns=trades_columns)\n    for trade in trades:\n        trades_df.at[trade.id, trades_columns] = (\n            trade.size,\n            trade.entry_at,\n            trade.exit_at,\n            trade.entry_price,\n            trade.exit_price,\n            trade.pl,\n            trade.fee,\n        )\n    trades_df[\"duration\"] = trades_df[\"entry_at\"] - trades_df[\"exit_at\"]\n\n    self.result = result = pd.Series(dtype=object)\n\n    result.loc[\"strategy\"] = str(self.strategy.__class__)\n    result.loc[\"start\"] = data.index[0]\n    result.loc[\"end\"] = data.index[-1]\n    result.loc[\"duration\"] = result.end - result.start\n\n    # Equity\n    result.loc[\"start_balance\"] = round(equities[0], 2)\n    result.loc[\"equity\"] = round(equities[-1], 2)\n\n    pl = equities[-1] - equities[0]\n    result.loc[\"pl\"] = round(pl, 2)\n    result.loc[\"pl_percent\"] = round(pl / equities[0] * 100, 2)\n\n    # TODO\n    # result.loc[\"buy_hold_pl_percent\"] = 2.0\n    # result.loc[\"max_drawdown_percent\"] = -33.08\n    # result.loc[\"avg_drawdown_percent\"] = -5.58\n    # result.loc[\"max_drawdown_duration\"] = \"688 days 00:00:00\"\n    # result.loc[\"avg_drawdown_duration\"] = \"41 days 00:00:00\"\n\n    # Separator\n    result.loc[\"\"] = \"\"\n\n    # Trades\n    trades_total = len(trades)\n    pl = trades_df[\"pl\"]\n\n    result.loc[\"trades\"] = trades_total\n\n    win_rate = np.nan if not trades_total else (pl &gt; 0).mean()\n    result.loc[\"win_rate\"] = round(win_rate, 2)\n    result.loc[\"fee\"] = trades_df.fee.sum()\n    result.loc[\"best_trade_percent\"] = pl.max()\n    result.loc[\"worst_trade_percent\"] = pl.min()\n    result.loc[\"sqn\"] = round(\n        np.sqrt(trades_total) * pl.mean() / (pl.std() or np.nan),\n        2,\n    )\n    result.loc[\"kelly_criterion\"] = win_rate - (1 - win_rate) / (\n        pl[pl &gt; 0].mean() / -pl[pl &lt; 0].mean()\n    )\n    # TODO\n    result.loc[\"profit_factor\"] = pl[pl &gt; 0].sum() / (\n        abs(pl[pl &lt; 0].sum()) or np.nan\n    )\n\n    return self.result\n</code></pre>"},{"location":"reference/stats/stats/#lettrade.stats.stats.BotStatistic.show","title":"show","text":"<pre><code>show()\n</code></pre> <p>Show statistic report</p> Source code in <code>lettrade/stats/stats.py</code> <pre><code>def show(self):\n    \"\"\"\n    Show statistic report\n    \"\"\"\n    if \"Start\" not in self.result:\n        logger.warning(\"call compute() before show()\")\n        self.compute()\n\n    # Show result inside docs session\n    if __debug__:\n        from lettrade.utils.docs import is_docs_session\n\n        if is_docs_session():\n            print(str(self))\n            return\n\n    logger.info(\n        \"\\n============= Statistic result =============\\n%s\\n\",\n        str(self),\n    )\n</code></pre>"},{"location":"reference/strategy/","title":"Index","text":""},{"location":"reference/strategy/#lettrade.strategy","title":"strategy","text":""},{"location":"reference/strategy/strategy/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> strategy","text":""},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy","title":"strategy","text":""},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy","title":"Strategy","text":"<pre><code>Strategy(\n    feeder: DataFeeder,\n    exchange: Exchange,\n    account: Account,\n    commander: Commander,\n    is_optimize: bool = False,\n)\n</code></pre> <p>               Bases: <code>ABC</code></p> <p>Base class to implement a strategy</p> <p>Parameters:</p> <ul> <li> <code>feeder</code>               (<code>DataFeeder</code>)           \u2013            <p>DataFeeder for strategy</p> </li> <li> <code>exchange</code>               (<code>Exchange</code>)           \u2013            <p>Trading exchange</p> </li> <li> <code>account</code>               (<code>Account</code>)           \u2013            <p>Account manager</p> </li> <li> <code>commander</code>               (<code>Commander</code>)           \u2013            <p>Event/Command manager</p> </li> <li> <code>is_optimize</code>               (<code>Optional[bool]</code>, default:                   <code>False</code> )           \u2013            <p>flag validate optimize condiction. Defaults to False.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>Validate valid is_optimize flag</p> </li> </ul> Source code in <code>lettrade/strategy/strategy.py</code> <pre><code>def __init__(\n    self,\n    feeder: DataFeeder,\n    exchange: Exchange,\n    account: Account,\n    commander: Commander,\n    is_optimize: bool = False,\n):\n    \"\"\"_summary_\n\n    Args:\n        feeder (DataFeeder): DataFeeder for strategy\n        exchange (Exchange): Trading exchange\n        account (Account): Account manager\n        commander (Commander): Event/Command manager\n        is_optimize (Optional[bool], optional): flag validate optimize condiction. Defaults to False.\n\n    Raises:\n        RuntimeError: Validate valid is_optimize flag\n    \"\"\"\n    self.__feeder: DataFeeder = feeder\n    self.__exchange: Exchange = exchange\n    self.__account: Account = account\n    self.__commander: Commander = commander\n\n    self.__datas: list[DataFeed] = self.__feeder.datas\n    self.__data: DataFeed = self.__feeder.data\n\n    if is_optimize and self.is_live:\n        raise RuntimeError(\"Optimize a live datafeeder\")\n    self.__is_optimize: bool = is_optimize\n</code></pre>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.account","title":"account  <code>property</code>","text":"<pre><code>account: Account\n</code></pre> <p>Getter of <code>Account</code></p> <p>Returns:</p> <ul> <li> <code>Account</code> (              <code>Account</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.commander","title":"commander  <code>property</code>","text":"<pre><code>commander: Commander\n</code></pre> <p>Getter of <code>Commander</code></p> <p>Returns:</p> <ul> <li> <code>Commander</code> (              <code>Commander</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.data","title":"data  <code>property</code>","text":"<pre><code>data: DataFeed\n</code></pre> <p>Getter of main DataFeed</p> <p>Returns:</p> <ul> <li> <code>DataFeed</code> (              <code>DataFeed</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.datas","title":"datas  <code>property</code>","text":"<pre><code>datas: Sequence[DataFeed]\n</code></pre> <p>Getter of all DataFeed</p> <p>Returns:</p> <ul> <li> <code>Sequence[DataFeed]</code>           \u2013            <p>Sequence[DataFeed]: description</p> </li> </ul>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.exchange","title":"exchange  <code>property</code>","text":"<pre><code>exchange: Exchange\n</code></pre> <p>Getter of <code>Exchange</code></p> <p>Returns:</p> <ul> <li> <code>Exchange</code> (              <code>Exchange</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.feeder","title":"feeder  <code>property</code>","text":"<pre><code>feeder: DataFeeder\n</code></pre> <p>Getter of <code>DataFeeder</code></p> <p>Returns:</p> <ul> <li> <code>DataFeeder</code> (              <code>DataFeeder</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.history_orders","title":"history_orders  <code>property</code>","text":"<pre><code>history_orders: dict[str, Order]\n</code></pre> <p>Getter of history <code>Order</code> dict</p> <p>Returns:</p> <ul> <li> <code>dict[str, Order]</code>           \u2013            <p>dict[str, Order]: description</p> </li> </ul>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.history_trades","title":"history_trades  <code>property</code>","text":"<pre><code>history_trades: dict[str, Trade]\n</code></pre> <p>Getter of history <code>Trade</code> dict</p> <p>Returns:</p> <ul> <li> <code>dict[str, Trade]</code>           \u2013            <p>dict[str, Trade]: description</p> </li> </ul>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.is_backtest","title":"is_backtest  <code>property</code>","text":"<pre><code>is_backtest: bool\n</code></pre> <p>Flag to check strategy is running in backtest DataFeeder</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.is_live","title":"is_live  <code>property</code>","text":"<pre><code>is_live: bool\n</code></pre> <p>Flag to check strategy is running in live DataFeeder</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.is_optimize","title":"is_optimize  <code>property</code>","text":"<pre><code>is_optimize: bool\n</code></pre> <p>Flag to check strategy is running in optimize session</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.now","title":"now  <code>property</code>","text":"<pre><code>now: datetime\n</code></pre> <p>Getter of current datetime</p> <p>Returns:</p> <ul> <li> <code>datetime</code> (              <code>datetime</code> )          \u2013            <p>current datetime of bar</p> </li> </ul>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.orders","title":"orders  <code>property</code>","text":"<pre><code>orders: dict[str, Order]\n</code></pre> <p>Getter of <code>Order</code> dict</p> <p>Returns:</p> <ul> <li> <code>dict[str, Order]</code>           \u2013            <p>dict[str, Order]: description</p> </li> </ul>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.positions","title":"positions  <code>property</code>","text":"<pre><code>positions: dict[str, Position]\n</code></pre> <p>Getter of <code>Position</code> dict</p>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.trades","title":"trades  <code>property</code>","text":"<pre><code>trades: dict[str, Trade]\n</code></pre> <p>Getter of <code>Trade</code> dict</p> <p>Returns:</p> <ul> <li> <code>dict[str, Trade]</code>           \u2013            <p>dict[str, Trade]: description</p> </li> </ul>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.buy","title":"buy","text":"<pre><code>buy(\n    size: Optional[float] = None,\n    limit: Optional[float] = None,\n    stop: Optional[float] = None,\n    sl: Optional[float] = None,\n    tp: Optional[float] = None,\n    tag: Optional[object] = None,\n    **kwargs\n) -&gt; OrderResult\n</code></pre> <p>Place a new long order.</p> <p>Parameters:</p> <ul> <li> <code>size</code>               (<code>Optional[float]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>limit</code>               (<code>Optional[float]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>stop</code>               (<code>Optional[float]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>sl</code>               (<code>Optional[float]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>tp</code>               (<code>Optional[float]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>tag</code>               (<code>Optional[object]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>**kwargs</code>               (<code>Optional[dict]</code>, default:                   <code>{}</code> )           \u2013            <p>Extra-parameters send to <code>Exchange.new_order</code></p> </li> </ul> <p>Returns:</p> <ul> <li> <code>OrderResult</code> (              <code>OrderResult</code> )          \u2013            <p>order result information</p> </li> </ul> Source code in <code>lettrade/strategy/strategy.py</code> <pre><code>@final\ndef buy(\n    self,\n    size: Optional[float] = None,\n    limit: Optional[float] = None,\n    stop: Optional[float] = None,\n    sl: Optional[float] = None,\n    tp: Optional[float] = None,\n    tag: Optional[object] = None,\n    **kwargs,\n) -&gt; OrderResult:\n    \"\"\"Place a new long order.\n\n    Args:\n        size (Optional[float], optional): _description_. Defaults to None.\n        limit (Optional[float], optional): _description_. Defaults to None.\n        stop (Optional[float], optional): _description_. Defaults to None.\n        sl (Optional[float], optional): _description_. Defaults to None.\n        tp (Optional[float], optional): _description_. Defaults to None.\n        tag (Optional[object], optional): _description_. Defaults to None.\n        **kwargs (Optional[dict], optional): Extra-parameters send to `Exchange.new_order`\n\n    Returns:\n        OrderResult: order result information\n    \"\"\"\n    params = dict(\n        size=size,\n        limit=limit,\n        stop=stop,\n        sl=sl,\n        tp=tp,\n        tag=tag,\n        **kwargs,\n    )\n    params[\"size\"] = abs(self.__account.risk(side=OrderSide.Buy, **params))\n\n    return self.__exchange.new_order(**params)\n</code></pre>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.indicators","title":"indicators","text":"<pre><code>indicators(df: DataFeed) -&gt; None\n</code></pre> <p>All indicator and signal should implement here to cacheable. Because of <code>lettrade</code> will cache/pre-load all <code>DataFeed</code></p> <p>Parameters:</p> <ul> <li> <code>df</code>               (<code>DataFeed</code>)           \u2013            <p>main data of strategy</p> </li> </ul> Source code in <code>lettrade/strategy/strategy.py</code> <pre><code>def indicators(self, df: DataFeed) -&gt; None:\n    \"\"\"All indicator and signal should implement here to cacheable.\n    Because of `lettrade` will cache/pre-load all `DataFeed`\n\n    Args:\n        df (DataFeed): main data of strategy\n    \"\"\"\n</code></pre>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.init","title":"init","text":"<pre><code>init() -&gt; None\n</code></pre> <p>Init strategy variables</p> Source code in <code>lettrade/strategy/strategy.py</code> <pre><code>@final\ndef init(self) -&gt; None:\n    \"\"\"Init strategy variables\"\"\"\n</code></pre>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.next","title":"next","text":"<pre><code>next(df: DataFeed, *others: list[DataFeed]) -&gt; None\n</code></pre> <p>Next bar event</p> Source code in <code>lettrade/strategy/strategy.py</code> <pre><code>def next(self, df: DataFeed, *others: list[DataFeed]) -&gt; None:\n    \"\"\"Next bar event\"\"\"\n</code></pre>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.on_execute","title":"on_execute","text":"<pre><code>on_execute(execute: Execute)\n</code></pre> <p>Listen for <code>Execute</code> event</p> <p>Parameters:</p> <ul> <li> <code>execute</code>               (<code>Execute</code>)           \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/strategy/strategy.py</code> <pre><code>@final\ndef on_execute(self, execute: Execute):\n    \"\"\"Listen for `Execute` event\n\n    Args:\n        execute (Execute): _description_\n    \"\"\"\n</code></pre>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.on_notify","title":"on_notify","text":"<pre><code>on_notify(*args, **kwargs) -&gt; None\n</code></pre> <p>Listen for <code>notify</code> event</p> <p>Returns:</p> <ul> <li> <code>_type_</code> (              <code>None</code> )          \u2013            <p><code>None</code></p> </li> </ul> Source code in <code>lettrade/strategy/strategy.py</code> <pre><code>@final\ndef on_notify(self, *args, **kwargs) -&gt; None:\n    \"\"\"Listen for `notify` event\n\n    Returns:\n        _type_: `None`\n    \"\"\"\n</code></pre>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.on_order","title":"on_order","text":"<pre><code>on_order(order: Order)\n</code></pre> <p>Listen for <code>Order</code> event</p> <p>Parameters:</p> <ul> <li> <code>order</code>               (<code>Order</code>)           \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/strategy/strategy.py</code> <pre><code>@final\ndef on_order(self, order: Order):\n    \"\"\"Listen for `Order` event\n\n    Args:\n        order (Order): _description_\n    \"\"\"\n</code></pre>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.on_position","title":"on_position","text":"<pre><code>on_position(position: Position)\n</code></pre> <p>Listen for <code>Position</code> event</p> <p>Parameters:</p> <ul> <li> <code>position</code>               (<code>Position</code>)           \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/strategy/strategy.py</code> <pre><code>@final\ndef on_position(self, position: Position):\n    \"\"\"Listen for `Position` event\n\n    Args:\n        position (Position): _description_\n    \"\"\"\n</code></pre>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.on_trade","title":"on_trade","text":"<pre><code>on_trade(trade: Trade)\n</code></pre> <p>Listen for <code>Trade</code> event</p> <p>Parameters:</p> <ul> <li> <code>trade</code>               (<code>Trade</code>)           \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/strategy/strategy.py</code> <pre><code>@final\ndef on_trade(self, trade: Trade):\n    \"\"\"Listen for `Trade` event\n\n    Args:\n        trade (Trade): _description_\n    \"\"\"\n</code></pre>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.on_transaction","title":"on_transaction","text":"<pre><code>on_transaction(trans: Execute | Order | Trade)\n</code></pre> <p>Listen for transaction events</p> <p>Parameters:</p> <ul> <li> <code>trans</code>               (<code>Execute | Order | Trade</code>)           \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/strategy/strategy.py</code> <pre><code>@final\ndef on_transaction(self, trans: Execute | Order | Trade):\n    \"\"\"Listen for transaction events\n\n    Args:\n        trans (Execute | Order | Trade): _description_\n    \"\"\"\n</code></pre>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.plot","title":"plot","text":"<pre><code>plot(df: DataFeed, *others: list[DataFeed]) -&gt; dict\n</code></pre> <p>Custom config of plot</p> <p>Parameters:</p> <ul> <li> <code>df</code>               (<code>DataFeed</code>)           \u2013            <p>plot DataFeed</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict</code> (              <code>dict</code> )          \u2013            <p>config</p> </li> </ul> Source code in <code>lettrade/strategy/strategy.py</code> <pre><code>def plot(self, df: DataFeed, *others: list[DataFeed]) -&gt; dict:\n    \"\"\"Custom config of plot\n\n    Args:\n        df (DataFeed): plot DataFeed\n\n    Returns:\n        dict: config\n    \"\"\"\n    return dict()\n</code></pre>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.sell","title":"sell","text":"<pre><code>sell(\n    size: Optional[float] = None,\n    limit: Optional[float] = None,\n    stop: Optional[float] = None,\n    sl: Optional[float] = None,\n    tp: Optional[float] = None,\n    tag: Optional[object] = None,\n    **kwargs\n) -&gt; OrderResult\n</code></pre> <p>Place a new short order.</p> <p>Parameters:</p> <ul> <li> <code>size</code>               (<code>Optional[float]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>limit</code>               (<code>Optional[float]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>stop</code>               (<code>Optional[float]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>sl</code>               (<code>Optional[float]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>tp</code>               (<code>Optional[float]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>tag</code>               (<code>Optional[object]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>**kwargs</code>               (<code>Optional[dict]</code>, default:                   <code>{}</code> )           \u2013            <p>Extra-parameters send to <code>Exchange.new_order</code></p> </li> </ul> <p>Returns:</p> <ul> <li> <code>OrderResult</code> (              <code>OrderResult</code> )          \u2013            <p>order result information</p> </li> </ul> Source code in <code>lettrade/strategy/strategy.py</code> <pre><code>@final\ndef sell(\n    self,\n    size: Optional[float] = None,\n    limit: Optional[float] = None,\n    stop: Optional[float] = None,\n    sl: Optional[float] = None,\n    tp: Optional[float] = None,\n    tag: Optional[object] = None,\n    **kwargs,\n) -&gt; OrderResult:\n    \"\"\"Place a new short order.\n\n    Args:\n        size (Optional[float], optional): _description_. Defaults to None.\n        limit (Optional[float], optional): _description_. Defaults to None.\n        stop (Optional[float], optional): _description_. Defaults to None.\n        sl (Optional[float], optional): _description_. Defaults to None.\n        tp (Optional[float], optional): _description_. Defaults to None.\n        tag (Optional[object], optional): _description_. Defaults to None.\n        **kwargs (Optional[dict], optional): Extra-parameters send to `Exchange.new_order`\n\n    Returns:\n        OrderResult: order result information\n    \"\"\"\n    params = dict(\n        size=size,\n        limit=limit,\n        stop=stop,\n        sl=sl,\n        tp=tp,\n        tag=tag,\n        **kwargs,\n    )\n    params[\"size\"] = -abs(self.__account.risk(side=OrderSide.Sell, **params))\n\n    return self.__exchange.new_order(**params)\n</code></pre>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.send","title":"send","text":"<pre><code>send(msg: str, **kwargs) -&gt; Any\n</code></pre> <p>Send message to commander</p> <p>Parameters:</p> <ul> <li> <code>msg</code>               (<code>str</code>)           \u2013            <p>message string</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Any</code> (              <code>Any</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/strategy/strategy.py</code> <pre><code>@final\ndef send(self, msg: str, **kwargs) -&gt; Any:\n    \"\"\"Send message to commander\n\n    Args:\n        msg (str): message string\n\n    Returns:\n        Any: _description_\n    \"\"\"\n    return self.commander.send_message(msg=msg, **kwargs)\n</code></pre>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.start","title":"start","text":"<pre><code>start(df: DataFeed, *others: list[DataFeed]) -&gt; None\n</code></pre> <p>call after <code>init()</code> and before first <code>next()</code> is called</p> <p>Parameters:</p> <ul> <li> <code>df</code>               (<code>DataFeed</code>)           \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>_type_</code> (              <code>None</code> )          \u2013            <p><code>None</code></p> </li> </ul> Source code in <code>lettrade/strategy/strategy.py</code> <pre><code>def start(self, df: DataFeed, *others: list[DataFeed]) -&gt; None:\n    \"\"\"call after `init()` and before first `next()` is called\n\n    Args:\n        df (DataFeed): _description_\n\n    Returns:\n        _type_: `None`\n    \"\"\"\n</code></pre>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.stop","title":"stop","text":"<pre><code>stop(df: DataFeed, *others: list[DataFeed]) -&gt; None\n</code></pre> <p>Call when strategy run completed</p> <p>Parameters:</p> <ul> <li> <code>df</code>               (<code>DataFeed</code>)           \u2013            <p>main data of strategy</p> </li> </ul> Source code in <code>lettrade/strategy/strategy.py</code> <pre><code>def stop(self, df: DataFeed, *others: list[DataFeed]) -&gt; None:\n    \"\"\"Call when strategy run completed\n\n    Args:\n        df (DataFeed): main data of strategy\n    \"\"\"\n</code></pre>"},{"location":"reference/utils/","title":"Index","text":""},{"location":"reference/utils/#lettrade.utils","title":"utils","text":""},{"location":"reference/utils/docs/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> docs","text":""},{"location":"reference/utils/docs/#lettrade.utils.docs","title":"docs","text":""},{"location":"reference/utils/notebook/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> notebook","text":""},{"location":"reference/utils/notebook/#lettrade.utils.notebook","title":"notebook","text":""},{"location":"tutorial/tut-001/","title":"Tutorial 001","text":"<p>This tutorial tend to help understand basic of <code>lettrade</code></p>"},{"location":"tutorial/tut-001/#main-object","title":"Main object","text":"<ul> <li>DataFeed: is data for your bot to running, this is a implement of <code>pandas.DataFrame</code>, so it have all <code>pandas.DataFrame</code> feature</li> <li>Strategy: is base Strategy of your bot, implement your bot with this as base class</li> <li>Exchange: is base Exchange of your bot, where control trading event and logic</li> <li>Account: is base class, where your bot will control account cash, equity, risk, size, commission...</li> <li>Commander: is base class, where your bot will communicate with you in realtime</li> <li>Brain: is brain of your bot, it just internal object, so don't need to care about it</li> </ul>"},{"location":"tutorial/tut-001/#init-your-bot","title":"Init your bot","text":""},{"location":"tutorial/tut-001/#init-datafeed","title":"Init DataFeed","text":"<p><pre><code>from lettrade import DataFeed\nimport yfinance as yf\n\n# Your pandas.Dataframe\nmsft = yf.Ticker(\"MSFT\")\ndf = msft.history(period=\"1mo\")\n\nprint(\"pandas DataFrame:\\n\", df.tail())\n\ndata = DataFeed(data=df, name=\"MSFT\")\n\nprint(\"LetTrade DataFeed:\\n\", data.tail())\n</code></pre> <pre><code>pandas DataFrame:\n                                  Open        High         Low       Close    Volume  Dividends  Stock Splits\nDate                                                                                                        \n2024-05-15 00:00:00-04:00  417.899994  423.809998  417.269989  423.079987  22239500       0.75           0.0\n2024-05-16 00:00:00-04:00  421.799988  425.420013  420.350006  420.989990  17530100       0.00           0.0\n2024-05-17 00:00:00-04:00  422.540009  422.920013  418.029999  420.209991  15352200       0.00           0.0\n2024-05-20 00:00:00-04:00  420.209991  426.769989  419.989990  425.339996  16272100       0.00           0.0\n2024-05-21 00:00:00-04:00  426.829987  432.970001  424.850006  429.040009  21428700       0.00           0.0\nLetTrade DataFeed:\n                         Date        Open        High         Low       Close    Volume  Dividends  Stock Splits\n17 2024-05-15 00:00:00-04:00  417.899994  423.809998  417.269989  423.079987  22239500       0.75           0.0\n18 2024-05-16 00:00:00-04:00  421.799988  425.420013  420.350006  420.989990  17530100       0.00           0.0\n19 2024-05-17 00:00:00-04:00  422.540009  422.920013  418.029999  420.209991  15352200       0.00           0.0\n20 2024-05-20 00:00:00-04:00  420.209991  426.769989  419.989990  425.339996  16272100       0.00           0.0\n21 2024-05-21 00:00:00-04:00  426.829987  432.970001  424.850006  429.040009  21428700       0.00           0.0\n</code></pre></p>"},{"location":"tutorial/tut-001/#strategy-implement","title":"Strategy implement","text":"<pre><code>class SmaCross(Strategy):\n    ema1_period = 9\n    ema2_period = 21\n</code></pre>"},{"location":"tutorial/tut-001/#indicatorsignal-implement","title":"Indicator/signal implement","text":"<pre><code>import talib.abstract as ta\nfrom lettrade import DataFeed\n\ndef indicators(self, df: DataFeed):\n    df[\"ema1\"] = ta.EMA(df, timeperiod=self.ema1_period)\n    df[\"ema2\"] = ta.EMA(df, timeperiod=self.ema2_period)\n\n    df[\"signal_ema_crossover\"] = crossover(df.ema1, df.ema2)\n    df[\"signal_ema_crossunder\"] = crossunder(df.ema1, df.ema2)\n</code></pre>"},{"location":"tutorial/metatrader/feeder/","title":"Interactive with MetaTraderDataFeeder","text":"In\u00a0[1]: Copied! <pre>from dotenv import load_dotenv\nimport os\nfrom lettrade.exchange.live.metatrader import MetaTraderDataFeeder\n\nload_dotenv()\n\nfeeder = MetaTraderDataFeeder.instance(\n    api_kwargs=dict(\n        login=int(os.environ[\"MT5_LOGIN\"]),\n        password=os.environ[\"MT5_PASSWORD\"],\n        server=os.environ[\"MT5_SERVER\"],\n        # wine=os.getenv(\"MT5_WINE\", None),\n    )\n)\n</pre> from dotenv import load_dotenv import os from lettrade.exchange.live.metatrader import MetaTraderDataFeeder  load_dotenv()  feeder = MetaTraderDataFeeder.instance(     api_kwargs=dict(         login=int(os.environ[\"MT5_LOGIN\"]),         password=os.environ[\"MT5_PASSWORD\"],         server=os.environ[\"MT5_SERVER\"],         # wine=os.getenv(\"MT5_WINE\", None),     ) ) In\u00a0[2]: Copied! <pre>data = feeder.data_new(symbol=\"EURUSD\", timeframe=\"1h\")\ndata\n</pre> data = feeder.data_new(symbol=\"EURUSD\", timeframe=\"1h\") data Out[2]: open high low close volume datetime In\u00a0[3]: Copied! <pre>data.bars_load(since=0, to=1000)\ndata\n</pre> data.bars_load(since=0, to=1000) data Out[3]: open high low close volume datetime 2024-04-10 16:00:00+00:00 1.07808 1.07813 1.07496 1.0751 8742 2024-04-10 17:00:00+00:00 1.07511 1.07671 1.07457 1.07534 6100 2024-04-10 18:00:00+00:00 1.07534 1.07548 1.07335 1.07368 3773 2024-04-10 19:00:00+00:00 1.07368 1.07375 1.07288 1.0736 2439 2024-04-10 20:00:00+00:00 1.07362 1.07544 1.07292 1.07504 5373 ... ... ... ... ... ... 2024-06-07 03:00:00+00:00 1.08918 1.08925 1.08869 1.08896 1113 2024-06-07 04:00:00+00:00 1.08896 1.08959 1.08872 1.08958 1487 2024-06-07 05:00:00+00:00 1.08958 1.08979 1.08945 1.0897 858 2024-06-07 06:00:00+00:00 1.0897 1.08979 1.08937 1.08946 782 2024-06-07 07:00:00+00:00 1.08946 1.08969 1.08936 1.08961 427 <p>1000 rows \u00d7 5 columns</p> In\u00a0[4]: Copied! <pre>import plotly.io as pio\n\npio.renderers.default = \"notebook\"\npio.templates.default = \"plotly_dark\"\n</pre> import plotly.io as pio  pio.renderers.default = \"notebook\" pio.templates.default = \"plotly_dark\" In\u00a0[5]: Copied! <pre>import plotly.graph_objects as go\n\nfig = go.Figure(\n    data=[\n        go.Candlestick(\n            x=data.index,\n            open=data.open,\n            high=data.high,\n            low=data.low,\n            close=data.close,\n        )\n    ]\n)\n\nfig.show()\n</pre> import plotly.graph_objects as go  fig = go.Figure(     data=[         go.Candlestick(             x=data.index,             open=data.open,             high=data.high,             low=data.low,             close=data.close,         )     ] )  fig.show() In\u00a0[6]: Copied! <pre>markets = feeder.markets(\"*EUR*\")\n</pre> markets = feeder.markets(\"*EUR*\") In\u00a0[7]: Copied! <pre>for s in markets:\n    print(s._asdict())\n</pre> for s in markets:     print(s._asdict()) <pre>{'custom': False, 'chart_mode': 0, 'select': False, 'visible': False, 'session_deals': 0, 'session_buy_orders': 0, 'session_sell_orders': 0, 'volume': 0, 'volumehigh': 0, 'volumelow': 0, 'time': 0, 'digits': 3, 'spread': 0, 'spread_float': True, 'ticks_bookdepth': 0, 'trade_calc_mode': 2, 'trade_mode': 4, 'start_time': 0, 'expiration_time': 0, 'trade_stops_level': 0, 'trade_freeze_level': 0, 'trade_exemode': 2, 'swap_mode': 5, 'swap_rollover3days': 5, 'margin_hedged_use_leg': False, 'expiration_mode': 15, 'filling_mode': 2, 'order_mode': 127, 'order_gtc_mode': 0, 'option_mode': 0, 'option_right': 0, 'bid': 0.0, 'bidhigh': 0.0, 'bidlow': 0.0, 'ask': 0.0, 'askhigh': 0.0, 'asklow': 0.0, 'last': 0.0, 'lasthigh': 0.0, 'lastlow': 0.0, 'volume_real': 0.0, 'volumehigh_real': 0.0, 'volumelow_real': 0.0, 'option_strike': 0.0, 'point': 0.001, 'trade_tick_value': 0.001, 'trade_tick_value_profit': 0.001, 'trade_tick_value_loss': 0.001, 'trade_tick_size': 0.001, 'trade_contract_size': 1.0, 'trade_accrued_interest': 0.0, 'trade_face_value': 0.0, 'trade_liquidity_rate': 0.0, 'volume_min': 1.0, 'volume_max': 10000.0, 'volume_step': 1.0, 'volume_limit': 0.0, 'swap_long': -1.18, 'swap_short': -4.07, 'margin_initial': 0.0, 'margin_maintenance': 0.0, 'session_volume': 0.0, 'session_turnover': 0.0, 'session_interest': 0.0, 'session_buy_orders_volume': 0.0, 'session_sell_orders_volume': 0.0, 'session_open': 0.0, 'session_close': 0.0, 'session_aw': 0.0, 'session_price_settlement': 0.0, 'session_price_limit_min': 0.0, 'session_price_limit_max': 0.0, 'margin_hedged': 0.0, 'price_change': 0.0, 'price_volatility': 0.0, 'price_theoretical': 0.0, 'price_greeks_delta': 0.0, 'price_greeks_theta': 0.0, 'price_greeks_gamma': 0.0, 'price_greeks_vega': 0.0, 'price_greeks_rho': 0.0, 'price_greeks_omega': 0.0, 'price_sensitivity': 0.0, 'basis': '', 'category': '', 'currency_base': 'EUR', 'currency_profit': 'EUR', 'currency_margin': 'EUR', 'bank': '', 'description': 'Euro Bobl Cash - FGBM', 'exchange': '', 'formula': '', 'isin': '', 'name': '#EURBOBL', 'page': '', 'path': 'Treasuries\\\\#EURBOBL'}\n{'custom': False, 'chart_mode': 0, 'select': False, 'visible': False, 'session_deals': 0, 'session_buy_orders': 0, 'session_sell_orders': 0, 'volume': 0, 'volumehigh': 0, 'volumelow': 0, 'time': 0, 'digits': 3, 'spread': 0, 'spread_float': True, 'ticks_bookdepth': 0, 'trade_calc_mode': 2, 'trade_mode': 4, 'start_time': 0, 'expiration_time': 0, 'trade_stops_level': 0, 'trade_freeze_level': 0, 'trade_exemode': 2, 'swap_mode': 5, 'swap_rollover3days': 5, 'margin_hedged_use_leg': False, 'expiration_mode': 15, 'filling_mode': 2, 'order_mode': 127, 'order_gtc_mode': 0, 'option_mode': 0, 'option_right': 0, 'bid': 0.0, 'bidhigh': 0.0, 'bidlow': 0.0, 'ask': 0.0, 'askhigh': 0.0, 'asklow': 0.0, 'last': 0.0, 'lasthigh': 0.0, 'lastlow': 0.0, 'volume_real': 0.0, 'volumehigh_real': 0.0, 'volumelow_real': 0.0, 'option_strike': 0.0, 'point': 0.001, 'trade_tick_value': 0.001, 'trade_tick_value_profit': 0.001, 'trade_tick_value_loss': 0.001, 'trade_tick_size': 0.001, 'trade_contract_size': 1.0, 'trade_accrued_interest': 0.0, 'trade_face_value': 0.0, 'trade_liquidity_rate': 0.0, 'volume_min': 1.0, 'volume_max': 10000.0, 'volume_step': 1.0, 'volume_limit': 0.0, 'swap_long': -4.53, 'swap_short': -0.72, 'margin_initial': 0.0, 'margin_maintenance': 0.0, 'session_volume': 0.0, 'session_turnover': 0.0, 'session_interest': 0.0, 'session_buy_orders_volume': 0.0, 'session_sell_orders_volume': 0.0, 'session_open': 0.0, 'session_close': 0.0, 'session_aw': 0.0, 'session_price_settlement': 0.0, 'session_price_limit_min': 0.0, 'session_price_limit_max': 0.0, 'margin_hedged': 0.0, 'price_change': 0.0, 'price_volatility': 0.0, 'price_theoretical': 0.0, 'price_greeks_delta': 0.0, 'price_greeks_theta': 0.0, 'price_greeks_gamma': 0.0, 'price_greeks_vega': 0.0, 'price_greeks_rho': 0.0, 'price_greeks_omega': 0.0, 'price_sensitivity': 0.0, 'basis': '', 'category': '', 'currency_base': 'EUR', 'currency_profit': 'EUR', 'currency_margin': 'EUR', 'bank': '', 'description': 'Euro Bund Cash - FGBL', 'exchange': '', 'formula': '', 'isin': '', 'name': '#EURBUND', 'page': '', 'path': 'Treasuries\\\\#EURBUND'}\n{'custom': False, 'chart_mode': 0, 'select': False, 'visible': False, 'session_deals': 0, 'session_buy_orders': 0, 'session_sell_orders': 0, 'volume': 0, 'volumehigh': 0, 'volumelow': 0, 'time': 0, 'digits': 3, 'spread': 0, 'spread_float': True, 'ticks_bookdepth': 0, 'trade_calc_mode': 2, 'trade_mode': 4, 'start_time': 0, 'expiration_time': 0, 'trade_stops_level': 0, 'trade_freeze_level': 0, 'trade_exemode': 2, 'swap_mode': 5, 'swap_rollover3days': 5, 'margin_hedged_use_leg': False, 'expiration_mode': 15, 'filling_mode': 2, 'order_mode': 127, 'order_gtc_mode': 0, 'option_mode': 0, 'option_right': 0, 'bid': 0.0, 'bidhigh': 0.0, 'bidlow': 0.0, 'ask': 0.0, 'askhigh': 0.0, 'asklow': 0.0, 'last': 0.0, 'lasthigh': 0.0, 'lastlow': 0.0, 'volume_real': 0.0, 'volumehigh_real': 0.0, 'volumelow_real': 0.0, 'option_strike': 0.0, 'point': 0.001, 'trade_tick_value': 0.001, 'trade_tick_value_profit': 0.001, 'trade_tick_value_loss': 0.001, 'trade_tick_size': 0.001, 'trade_contract_size': 1.0, 'trade_accrued_interest': 0.0, 'trade_face_value': 0.0, 'trade_liquidity_rate': 0.0, 'volume_min': 1.0, 'volume_max': 10000.0, 'volume_step': 1.0, 'volume_limit': 0.0, 'swap_long': -7.59, 'swap_short': 2.12, 'margin_initial': 0.0, 'margin_maintenance': 0.0, 'session_volume': 0.0, 'session_turnover': 0.0, 'session_interest': 0.0, 'session_buy_orders_volume': 0.0, 'session_sell_orders_volume': 0.0, 'session_open': 0.0, 'session_close': 0.0, 'session_aw': 0.0, 'session_price_settlement': 0.0, 'session_price_limit_min': 0.0, 'session_price_limit_max': 0.0, 'margin_hedged': 0.0, 'price_change': 0.0, 'price_volatility': 0.0, 'price_theoretical': 0.0, 'price_greeks_delta': 0.0, 'price_greeks_theta': 0.0, 'price_greeks_gamma': 0.0, 'price_greeks_vega': 0.0, 'price_greeks_rho': 0.0, 'price_greeks_omega': 0.0, 'price_sensitivity': 0.0, 'basis': '', 'category': '', 'currency_base': 'EUR', 'currency_profit': 'EUR', 'currency_margin': 'EUR', 'bank': '', 'description': 'Euro Buxl Cash - FGBX', 'exchange': '', 'formula': '', 'isin': '', 'name': '#EURBUXL', 'page': '', 'path': 'Treasuries\\\\#EURBUXL'}\n{'custom': False, 'chart_mode': 0, 'select': False, 'visible': False, 'session_deals': 0, 'session_buy_orders': 0, 'session_sell_orders': 0, 'volume': 0, 'volumehigh': 0, 'volumelow': 0, 'time': 0, 'digits': 3, 'spread': 0, 'spread_float': True, 'ticks_bookdepth': 0, 'trade_calc_mode': 2, 'trade_mode': 4, 'start_time': 0, 'expiration_time': 0, 'trade_stops_level': 0, 'trade_freeze_level': 0, 'trade_exemode': 2, 'swap_mode': 5, 'swap_rollover3days': 5, 'margin_hedged_use_leg': False, 'expiration_mode': 15, 'filling_mode': 2, 'order_mode': 127, 'order_gtc_mode': 0, 'option_mode': 0, 'option_right': 0, 'bid': 0.0, 'bidhigh': 0.0, 'bidlow': 0.0, 'ask': 0.0, 'askhigh': 0.0, 'asklow': 0.0, 'last': 0.0, 'lasthigh': 0.0, 'lastlow': 0.0, 'volume_real': 0.0, 'volumehigh_real': 0.0, 'volumelow_real': 0.0, 'option_strike': 0.0, 'point': 0.001, 'trade_tick_value': 0.001, 'trade_tick_value_profit': 0.001, 'trade_tick_value_loss': 0.001, 'trade_tick_size': 0.001, 'trade_contract_size': 1.0, 'trade_accrued_interest': 0.0, 'trade_face_value': 0.0, 'trade_liquidity_rate': 0.0, 'volume_min': 1.0, 'volume_max': 10000.0, 'volume_step': 1.0, 'volume_limit': 0.0, 'swap_long': -3.68, 'swap_short': -1.5699999999999998, 'margin_initial': 0.0, 'margin_maintenance': 0.0, 'session_volume': 0.0, 'session_turnover': 0.0, 'session_interest': 0.0, 'session_buy_orders_volume': 0.0, 'session_sell_orders_volume': 0.0, 'session_open': 0.0, 'session_close': 0.0, 'session_aw': 0.0, 'session_price_settlement': 0.0, 'session_price_limit_min': 0.0, 'session_price_limit_max': 0.0, 'margin_hedged': 0.0, 'price_change': 0.0, 'price_volatility': 0.0, 'price_theoretical': 0.0, 'price_greeks_delta': 0.0, 'price_greeks_theta': 0.0, 'price_greeks_gamma': 0.0, 'price_greeks_vega': 0.0, 'price_greeks_rho': 0.0, 'price_greeks_omega': 0.0, 'price_sensitivity': 0.0, 'basis': '', 'category': '', 'currency_base': 'EUR', 'currency_profit': 'EUR', 'currency_margin': 'EUR', 'bank': '', 'description': 'Euro Schatz Cash - FGBS', 'exchange': '', 'formula': '', 'isin': '', 'name': '#EURSCHA', 'page': '', 'path': 'Treasuries\\\\#EURSCHA'}\n{'custom': False, 'chart_mode': 0, 'select': True, 'visible': True, 'session_deals': 0, 'session_buy_orders': 0, 'session_sell_orders': 0, 'volume': 0, 'volumehigh': 0, 'volumelow': 0, 'time': 1717745820, 'digits': 5, 'spread': 16, 'spread_float': True, 'ticks_bookdepth': 0, 'trade_calc_mode': 0, 'trade_mode': 4, 'start_time': 0, 'expiration_time': 0, 'trade_stops_level': 0, 'trade_freeze_level': 0, 'trade_exemode': 2, 'swap_mode': 1, 'swap_rollover3days': 3, 'margin_hedged_use_leg': False, 'expiration_mode': 15, 'filling_mode': 2, 'order_mode': 127, 'order_gtc_mode': 0, 'option_mode': 0, 'option_right': 0, 'bid': 1.0895299999999999, 'bidhigh': 1.08971, 'bidlow': 1.08861, 'ask': 1.08969, 'askhigh': 1.08987, 'asklow': 1.08877, 'last': 0.0, 'lasthigh': 0.0, 'lastlow': 0.0, 'volume_real': 0.0, 'volumehigh_real': 0.0, 'volumelow_real': 0.0, 'option_strike': 0.0, 'point': 1e-05, 'trade_tick_value': 1.0, 'trade_tick_value_profit': 1.0, 'trade_tick_value_loss': 1.0, 'trade_tick_size': 1e-05, 'trade_contract_size': 100000.0, 'trade_accrued_interest': 0.0, 'trade_face_value': 0.0, 'trade_liquidity_rate': 0.0, 'volume_min': 0.01, 'volume_max': 100.0, 'volume_step': 0.01, 'volume_limit': 0.0, 'swap_long': -5.64, 'swap_short': 2.79, 'margin_initial': 0.0, 'margin_maintenance': 0.0, 'session_volume': 0.0, 'session_turnover': 0.0, 'session_interest': 0.0, 'session_buy_orders_volume': 0.0, 'session_sell_orders_volume': 0.0, 'session_open': 1.0887, 'session_close': 1.08878, 'session_aw': 0.0, 'session_price_settlement': 0.0, 'session_price_limit_min': 0.0, 'session_price_limit_max': 0.0, 'margin_hedged': 0.0, 'price_change': 0.0762, 'price_volatility': 0.0, 'price_theoretical': 0.0, 'price_greeks_delta': 0.0, 'price_greeks_theta': 0.0, 'price_greeks_gamma': 0.0, 'price_greeks_vega': 0.0, 'price_greeks_rho': 0.0, 'price_greeks_omega': 0.0, 'price_sensitivity': 0.0, 'basis': '', 'category': '', 'currency_base': 'EUR', 'currency_profit': 'USD', 'currency_margin': 'EUR', 'bank': 'Tickmill', 'description': 'Euro vs US Dollar', 'exchange': '', 'formula': '', 'isin': '', 'name': 'EURUSD', 'page': '', 'path': 'Forex\\\\EURUSD'}\n{'custom': False, 'chart_mode': 0, 'select': False, 'visible': False, 'session_deals': 0, 'session_buy_orders': 0, 'session_sell_orders': 0, 'volume': 0, 'volumehigh': 0, 'volumelow': 0, 'time': 0, 'digits': 5, 'spread': 0, 'spread_float': True, 'ticks_bookdepth': 0, 'trade_calc_mode': 0, 'trade_mode': 4, 'start_time': 0, 'expiration_time': 0, 'trade_stops_level': 0, 'trade_freeze_level': 0, 'trade_exemode': 2, 'swap_mode': 1, 'swap_rollover3days': 3, 'margin_hedged_use_leg': False, 'expiration_mode': 15, 'filling_mode': 2, 'order_mode': 127, 'order_gtc_mode': 0, 'option_mode': 0, 'option_right': 0, 'bid': 0.0, 'bidhigh': 0.0, 'bidlow': 0.0, 'ask': 0.0, 'askhigh': 0.0, 'asklow': 0.0, 'last': 0.0, 'lasthigh': 0.0, 'lastlow': 0.0, 'volume_real': 0.0, 'volumehigh_real': 0.0, 'volumelow_real': 0.0, 'option_strike': 0.0, 'point': 1e-05, 'trade_tick_value': 0.66758, 'trade_tick_value_profit': 0.66758, 'trade_tick_value_loss': 0.6677700000000001, 'trade_tick_size': 1e-05, 'trade_contract_size': 100000.0, 'trade_accrued_interest': 0.0, 'trade_face_value': 0.0, 'trade_liquidity_rate': 0.0, 'volume_min': 0.01, 'volume_max': 100.0, 'volume_step': 0.01, 'volume_limit': 0.0, 'swap_long': -4.83, 'swap_short': -1.79, 'margin_initial': 0.0, 'margin_maintenance': 0.0, 'session_volume': 0.0, 'session_turnover': 0.0, 'session_interest': 0.0, 'session_buy_orders_volume': 0.0, 'session_sell_orders_volume': 0.0, 'session_open': 0.0, 'session_close': 0.0, 'session_aw': 0.0, 'session_price_settlement': 0.0, 'session_price_limit_min': 0.0, 'session_price_limit_max': 0.0, 'margin_hedged': 0.0, 'price_change': 0.0, 'price_volatility': 0.0, 'price_theoretical': 0.0, 'price_greeks_delta': 0.0, 'price_greeks_theta': 0.0, 'price_greeks_gamma': 0.0, 'price_greeks_vega': 0.0, 'price_greeks_rho': 0.0, 'price_greeks_omega': 0.0, 'price_sensitivity': 0.0, 'basis': '', 'category': '', 'currency_base': 'EUR', 'currency_profit': 'AUD', 'currency_margin': 'EUR', 'bank': '', 'description': 'Euro vs Australian Dollar', 'exchange': '', 'formula': '', 'isin': '', 'name': 'EURAUD', 'page': '', 'path': 'Forex\\\\EURAUD'}\n{'custom': False, 'chart_mode': 0, 'select': False, 'visible': False, 'session_deals': 0, 'session_buy_orders': 0, 'session_sell_orders': 0, 'volume': 0, 'volumehigh': 0, 'volumelow': 0, 'time': 0, 'digits': 5, 'spread': 0, 'spread_float': True, 'ticks_bookdepth': 0, 'trade_calc_mode': 0, 'trade_mode': 4, 'start_time': 0, 'expiration_time': 0, 'trade_stops_level': 0, 'trade_freeze_level': 0, 'trade_exemode': 2, 'swap_mode': 1, 'swap_rollover3days': 3, 'margin_hedged_use_leg': False, 'expiration_mode': 15, 'filling_mode': 2, 'order_mode': 127, 'order_gtc_mode': 0, 'option_mode': 0, 'option_right': 0, 'bid': 0.0, 'bidhigh': 0.0, 'bidlow': 0.0, 'ask': 0.0, 'askhigh': 0.0, 'asklow': 0.0, 'last': 0.0, 'lasthigh': 0.0, 'lastlow': 0.0, 'volume_real': 0.0, 'volumehigh_real': 0.0, 'volumelow_real': 0.0, 'option_strike': 0.0, 'point': 1e-05, 'trade_tick_value': 0.7317215945676988, 'trade_tick_value_profit': 0.7317215945676988, 'trade_tick_value_loss': 0.7318179822314596, 'trade_tick_size': 1e-05, 'trade_contract_size': 100000.0, 'trade_accrued_interest': 0.0, 'trade_face_value': 0.0, 'trade_liquidity_rate': 0.0, 'volume_min': 0.01, 'volume_max': 100.0, 'volume_step': 0.01, 'volume_limit': 0.0, 'swap_long': -5.67, 'swap_short': -0.11, 'margin_initial': 0.0, 'margin_maintenance': 0.0, 'session_volume': 0.0, 'session_turnover': 0.0, 'session_interest': 0.0, 'session_buy_orders_volume': 0.0, 'session_sell_orders_volume': 0.0, 'session_open': 0.0, 'session_close': 0.0, 'session_aw': 0.0, 'session_price_settlement': 0.0, 'session_price_limit_min': 0.0, 'session_price_limit_max': 0.0, 'margin_hedged': 0.0, 'price_change': 0.0, 'price_volatility': 0.0, 'price_theoretical': 0.0, 'price_greeks_delta': 0.0, 'price_greeks_theta': 0.0, 'price_greeks_gamma': 0.0, 'price_greeks_vega': 0.0, 'price_greeks_rho': 0.0, 'price_greeks_omega': 0.0, 'price_sensitivity': 0.0, 'basis': '', 'category': '', 'currency_base': 'EUR', 'currency_profit': 'CAD', 'currency_margin': 'EUR', 'bank': '', 'description': 'Euro vs Canadian Dollar', 'exchange': '', 'formula': '', 'isin': '', 'name': 'EURCAD', 'page': '', 'path': 'Forex\\\\EURCAD'}\n{'custom': False, 'chart_mode': 0, 'select': False, 'visible': False, 'session_deals': 0, 'session_buy_orders': 0, 'session_sell_orders': 0, 'volume': 0, 'volumehigh': 0, 'volumelow': 0, 'time': 0, 'digits': 5, 'spread': 0, 'spread_float': True, 'ticks_bookdepth': 0, 'trade_calc_mode': 0, 'trade_mode': 4, 'start_time': 0, 'expiration_time': 0, 'trade_stops_level': 0, 'trade_freeze_level': 0, 'trade_exemode': 2, 'swap_mode': 1, 'swap_rollover3days': 3, 'margin_hedged_use_leg': False, 'expiration_mode': 15, 'filling_mode': 2, 'order_mode': 127, 'order_gtc_mode': 0, 'option_mode': 0, 'option_right': 0, 'bid': 0.0, 'bidhigh': 0.0, 'bidlow': 0.0, 'ask': 0.0, 'askhigh': 0.0, 'asklow': 0.0, 'last': 0.0, 'lasthigh': 0.0, 'lastlow': 0.0, 'volume_real': 0.0, 'volumehigh_real': 0.0, 'volumelow_real': 0.0, 'option_strike': 0.0, 'point': 1e-05, 'trade_tick_value': 1.1238227956215865, 'trade_tick_value_profit': 1.1238227956215865, 'trade_tick_value_loss': 1.1240880835422264, 'trade_tick_size': 1e-05, 'trade_contract_size': 100000.0, 'trade_accrued_interest': 0.0, 'trade_face_value': 0.0, 'trade_liquidity_rate': 0.0, 'volume_min': 0.01, 'volume_max': 100.0, 'volume_step': 0.01, 'volume_limit': 0.0, 'swap_long': 4.9399999999999995, 'swap_short': -9.24, 'margin_initial': 0.0, 'margin_maintenance': 0.0, 'session_volume': 0.0, 'session_turnover': 0.0, 'session_interest': 0.0, 'session_buy_orders_volume': 0.0, 'session_sell_orders_volume': 0.0, 'session_open': 0.0, 'session_close': 0.0, 'session_aw': 0.0, 'session_price_settlement': 0.0, 'session_price_limit_min': 0.0, 'session_price_limit_max': 0.0, 'margin_hedged': 0.0, 'price_change': 0.0, 'price_volatility': 0.0, 'price_theoretical': 0.0, 'price_greeks_delta': 0.0, 'price_greeks_theta': 0.0, 'price_greeks_gamma': 0.0, 'price_greeks_vega': 0.0, 'price_greeks_rho': 0.0, 'price_greeks_omega': 0.0, 'price_sensitivity': 0.0, 'basis': '', 'category': '', 'currency_base': 'EUR', 'currency_profit': 'CHF', 'currency_margin': 'EUR', 'bank': '', 'description': 'Euro vs Swiss Franc', 'exchange': '', 'formula': '', 'isin': '', 'name': 'EURCHF', 'page': '', 'path': 'Forex\\\\EURCHF'}\n{'custom': False, 'chart_mode': 0, 'select': False, 'visible': False, 'session_deals': 0, 'session_buy_orders': 0, 'session_sell_orders': 0, 'volume': 0, 'volumehigh': 0, 'volumelow': 0, 'time': 0, 'digits': 3, 'spread': 0, 'spread_float': True, 'ticks_bookdepth': 0, 'trade_calc_mode': 0, 'trade_mode': 4, 'start_time': 0, 'expiration_time': 0, 'trade_stops_level': 0, 'trade_freeze_level': 0, 'trade_exemode': 2, 'swap_mode': 1, 'swap_rollover3days': 3, 'margin_hedged_use_leg': False, 'expiration_mode': 15, 'filling_mode': 2, 'order_mode': 127, 'order_gtc_mode': 0, 'option_mode': 0, 'option_right': 0, 'bid': 0.0, 'bidhigh': 0.0, 'bidlow': 0.0, 'ask': 0.0, 'askhigh': 0.0, 'asklow': 0.0, 'last': 0.0, 'lasthigh': 0.0, 'lastlow': 0.0, 'volume_real': 0.0, 'volumehigh_real': 0.0, 'volumelow_real': 0.0, 'option_strike': 0.0, 'point': 0.001, 'trade_tick_value': 0.0, 'trade_tick_value_profit': 0.0, 'trade_tick_value_loss': 0.0, 'trade_tick_size': 0.001, 'trade_contract_size': 100000.0, 'trade_accrued_interest': 0.0, 'trade_face_value': 0.0, 'trade_liquidity_rate': 0.0, 'volume_min': 0.01, 'volume_max': 100.0, 'volume_step': 0.01, 'volume_limit': 0.0, 'swap_long': -1.16, 'swap_short': 0.52, 'margin_initial': 0.0, 'margin_maintenance': 0.0, 'session_volume': 0.0, 'session_turnover': 0.0, 'session_interest': 0.0, 'session_buy_orders_volume': 0.0, 'session_sell_orders_volume': 0.0, 'session_open': 0.0, 'session_close': 0.0, 'session_aw': 0.0, 'session_price_settlement': 0.0, 'session_price_limit_min': 0.0, 'session_price_limit_max': 0.0, 'margin_hedged': 0.0, 'price_change': 0.0, 'price_volatility': 0.0, 'price_theoretical': 0.0, 'price_greeks_delta': 0.0, 'price_greeks_theta': 0.0, 'price_greeks_gamma': 0.0, 'price_greeks_vega': 0.0, 'price_greeks_rho': 0.0, 'price_greeks_omega': 0.0, 'price_sensitivity': 0.0, 'basis': '', 'category': '', 'currency_base': 'EUR', 'currency_profit': 'CZK', 'currency_margin': 'EUR', 'bank': '', 'description': 'Euro vs Czech Koruna', 'exchange': '', 'formula': '', 'isin': '', 'name': 'EURCZK', 'page': '', 'path': 'Forex\\\\EURCZK'}\n{'custom': False, 'chart_mode': 0, 'select': False, 'visible': False, 'session_deals': 0, 'session_buy_orders': 0, 'session_sell_orders': 0, 'volume': 0, 'volumehigh': 0, 'volumelow': 0, 'time': 0, 'digits': 5, 'spread': 0, 'spread_float': True, 'ticks_bookdepth': 0, 'trade_calc_mode': 0, 'trade_mode': 4, 'start_time': 0, 'expiration_time': 0, 'trade_stops_level': 0, 'trade_freeze_level': 0, 'trade_exemode': 2, 'swap_mode': 1, 'swap_rollover3days': 3, 'margin_hedged_use_leg': False, 'expiration_mode': 15, 'filling_mode': 2, 'order_mode': 127, 'order_gtc_mode': 0, 'option_mode': 0, 'option_right': 0, 'bid': 0.0, 'bidhigh': 0.0, 'bidlow': 0.0, 'ask': 0.0, 'askhigh': 0.0, 'asklow': 0.0, 'last': 0.0, 'lasthigh': 0.0, 'lastlow': 0.0, 'volume_real': 0.0, 'volumehigh_real': 0.0, 'volumelow_real': 0.0, 'option_strike': 0.0, 'point': 1e-05, 'trade_tick_value': 0.0, 'trade_tick_value_profit': 0.0, 'trade_tick_value_loss': 0.0, 'trade_tick_size': 1e-05, 'trade_contract_size': 100000.0, 'trade_accrued_interest': 0.0, 'trade_face_value': 0.0, 'trade_liquidity_rate': 0.0, 'volume_min': 0.01, 'volume_max': 100.0, 'volume_step': 0.01, 'volume_limit': 0.0, 'swap_long': 2.91, 'swap_short': -22.86, 'margin_initial': 0.0, 'margin_maintenance': 0.0, 'session_volume': 0.0, 'session_turnover': 0.0, 'session_interest': 0.0, 'session_buy_orders_volume': 0.0, 'session_sell_orders_volume': 0.0, 'session_open': 0.0, 'session_close': 0.0, 'session_aw': 0.0, 'session_price_settlement': 0.0, 'session_price_limit_min': 0.0, 'session_price_limit_max': 0.0, 'margin_hedged': 0.0, 'price_change': 0.0, 'price_volatility': 0.0, 'price_theoretical': 0.0, 'price_greeks_delta': 0.0, 'price_greeks_theta': 0.0, 'price_greeks_gamma': 0.0, 'price_greeks_vega': 0.0, 'price_greeks_rho': 0.0, 'price_greeks_omega': 0.0, 'price_sensitivity': 0.0, 'basis': '', 'category': '', 'currency_base': 'EUR', 'currency_profit': 'DKK', 'currency_margin': 'EUR', 'bank': '', 'description': 'Euro vs Danish Krone', 'exchange': '', 'formula': '', 'isin': '', 'name': 'EURDKK', 'page': '', 'path': 'Forex\\\\EURDKK'}\n{'custom': False, 'chart_mode': 0, 'select': True, 'visible': True, 'session_deals': 0, 'session_buy_orders': 0, 'session_sell_orders': 0, 'volume': 0, 'volumehigh': 0, 'volumelow': 0, 'time': 1717745822, 'digits': 5, 'spread': 16, 'spread_float': True, 'ticks_bookdepth': 0, 'trade_calc_mode': 0, 'trade_mode': 4, 'start_time': 0, 'expiration_time': 0, 'trade_stops_level': 0, 'trade_freeze_level': 0, 'trade_exemode': 2, 'swap_mode': 1, 'swap_rollover3days': 3, 'margin_hedged_use_leg': False, 'expiration_mode': 15, 'filling_mode': 2, 'order_mode': 127, 'order_gtc_mode': 0, 'option_mode': 0, 'option_right': 0, 'bid': 0.85178, 'bidhigh': 0.85197, 'bidlow': 0.85026, 'ask': 0.85194, 'askhigh': 0.85236, 'asklow': 0.85139, 'last': 0.0, 'lasthigh': 0.0, 'lastlow': 0.0, 'volume_real': 0.0, 'volumehigh_real': 0.0, 'volumelow_real': 0.0, 'option_strike': 0.0, 'point': 1e-05, 'trade_tick_value': 1.27898, 'trade_tick_value_profit': 1.27898, 'trade_tick_value_loss': 1.2791400000000002, 'trade_tick_size': 1e-05, 'trade_contract_size': 100000.0, 'trade_accrued_interest': 0.0, 'trade_face_value': 0.0, 'trade_liquidity_rate': 0.0, 'volume_min': 0.01, 'volume_max': 100.0, 'volume_step': 0.01, 'volume_limit': 0.0, 'swap_long': -3.7800000000000002, 'swap_short': 1.62, 'margin_initial': 0.0, 'margin_maintenance': 0.0, 'session_volume': 0.0, 'session_turnover': 0.0, 'session_interest': 0.0, 'session_buy_orders_volume': 0.0, 'session_sell_orders_volume': 0.0, 'session_open': 0.85105, 'session_close': 0.85117, 'session_aw': 0.0, 'session_price_settlement': 0.0, 'session_price_limit_min': 0.0, 'session_price_limit_max': 0.0, 'margin_hedged': 0.0, 'price_change': 0.0811, 'price_volatility': 0.0, 'price_theoretical': 0.0, 'price_greeks_delta': 0.0, 'price_greeks_theta': 0.0, 'price_greeks_gamma': 0.0, 'price_greeks_vega': 0.0, 'price_greeks_rho': 0.0, 'price_greeks_omega': 0.0, 'price_sensitivity': 0.0, 'basis': '', 'category': '', 'currency_base': 'EUR', 'currency_profit': 'GBP', 'currency_margin': 'EUR', 'bank': 'Tickmill', 'description': 'Euro vs Great Britain Pound ', 'exchange': '', 'formula': '', 'isin': '', 'name': 'EURGBP', 'page': '', 'path': 'Forex\\\\EURGBP'}\n{'custom': False, 'chart_mode': 0, 'select': False, 'visible': False, 'session_deals': 0, 'session_buy_orders': 0, 'session_sell_orders': 0, 'volume': 0, 'volumehigh': 0, 'volumelow': 0, 'time': 0, 'digits': 5, 'spread': 0, 'spread_float': True, 'ticks_bookdepth': 0, 'trade_calc_mode': 0, 'trade_mode': 4, 'start_time': 0, 'expiration_time': 0, 'trade_stops_level': 0, 'trade_freeze_level': 0, 'trade_exemode': 2, 'swap_mode': 1, 'swap_rollover3days': 3, 'margin_hedged_use_leg': False, 'expiration_mode': 15, 'filling_mode': 2, 'order_mode': 127, 'order_gtc_mode': 0, 'option_mode': 0, 'option_right': 0, 'bid': 0.0, 'bidhigh': 0.0, 'bidlow': 0.0, 'ask': 0.0, 'askhigh': 0.0, 'asklow': 0.0, 'last': 0.0, 'lasthigh': 0.0, 'lastlow': 0.0, 'volume_real': 0.0, 'volumehigh_real': 0.0, 'volumelow_real': 0.0, 'option_strike': 0.0, 'point': 1e-05, 'trade_tick_value': 0.0, 'trade_tick_value_profit': 0.0, 'trade_tick_value_loss': 0.0, 'trade_tick_size': 1e-05, 'trade_contract_size': 100000.0, 'trade_accrued_interest': 0.0, 'trade_face_value': 0.0, 'trade_liquidity_rate': 0.0, 'volume_min': 0.01, 'volume_max': 100.0, 'volume_step': 0.01, 'volume_limit': 0.0, 'swap_long': -18.27, 'swap_short': -17.01, 'margin_initial': 0.0, 'margin_maintenance': 0.0, 'session_volume': 0.0, 'session_turnover': 0.0, 'session_interest': 0.0, 'session_buy_orders_volume': 0.0, 'session_sell_orders_volume': 0.0, 'session_open': 0.0, 'session_close': 0.0, 'session_aw': 0.0, 'session_price_settlement': 0.0, 'session_price_limit_min': 0.0, 'session_price_limit_max': 0.0, 'margin_hedged': 0.0, 'price_change': 0.0, 'price_volatility': 0.0, 'price_theoretical': 0.0, 'price_greeks_delta': 0.0, 'price_greeks_theta': 0.0, 'price_greeks_gamma': 0.0, 'price_greeks_vega': 0.0, 'price_greeks_rho': 0.0, 'price_greeks_omega': 0.0, 'price_sensitivity': 0.0, 'basis': '', 'category': '', 'currency_base': 'EUR', 'currency_profit': 'HKD', 'currency_margin': 'EUR', 'bank': '', 'description': 'Euro vs Hong Kong Dollar', 'exchange': '', 'formula': '', 'isin': '', 'name': 'EURHKD', 'page': '', 'path': 'Forex\\\\EURHKD'}\n{'custom': False, 'chart_mode': 0, 'select': False, 'visible': False, 'session_deals': 0, 'session_buy_orders': 0, 'session_sell_orders': 0, 'volume': 0, 'volumehigh': 0, 'volumelow': 0, 'time': 0, 'digits': 3, 'spread': 0, 'spread_float': True, 'ticks_bookdepth': 0, 'trade_calc_mode': 0, 'trade_mode': 4, 'start_time': 0, 'expiration_time': 0, 'trade_stops_level': 0, 'trade_freeze_level': 0, 'trade_exemode': 2, 'swap_mode': 1, 'swap_rollover3days': 3, 'margin_hedged_use_leg': False, 'expiration_mode': 15, 'filling_mode': 2, 'order_mode': 127, 'order_gtc_mode': 0, 'option_mode': 0, 'option_right': 0, 'bid': 0.0, 'bidhigh': 0.0, 'bidlow': 0.0, 'ask': 0.0, 'askhigh': 0.0, 'asklow': 0.0, 'last': 0.0, 'lasthigh': 0.0, 'lastlow': 0.0, 'volume_real': 0.0, 'volumehigh_real': 0.0, 'volumelow_real': 0.0, 'option_strike': 0.0, 'point': 0.001, 'trade_tick_value': 0.0, 'trade_tick_value_profit': 0.0, 'trade_tick_value_loss': 0.0, 'trade_tick_size': 0.001, 'trade_contract_size': 100000.0, 'trade_accrued_interest': 0.0, 'trade_face_value': 0.0, 'trade_liquidity_rate': 0.0, 'volume_min': 0.01, 'volume_max': 100.0, 'volume_step': 0.01, 'volume_limit': 0.0, 'swap_long': -39.76, 'swap_short': 27.71, 'margin_initial': 0.0, 'margin_maintenance': 0.0, 'session_volume': 0.0, 'session_turnover': 0.0, 'session_interest': 0.0, 'session_buy_orders_volume': 0.0, 'session_sell_orders_volume': 0.0, 'session_open': 0.0, 'session_close': 0.0, 'session_aw': 0.0, 'session_price_settlement': 0.0, 'session_price_limit_min': 0.0, 'session_price_limit_max': 0.0, 'margin_hedged': 0.0, 'price_change': 0.0, 'price_volatility': 0.0, 'price_theoretical': 0.0, 'price_greeks_delta': 0.0, 'price_greeks_theta': 0.0, 'price_greeks_gamma': 0.0, 'price_greeks_vega': 0.0, 'price_greeks_rho': 0.0, 'price_greeks_omega': 0.0, 'price_sensitivity': 0.0, 'basis': '', 'category': '', 'currency_base': 'EUR', 'currency_profit': 'HUF', 'currency_margin': 'EUR', 'bank': '', 'description': 'Euro vs Hungarian Forint', 'exchange': '', 'formula': '', 'isin': '', 'name': 'EURHUF', 'page': '', 'path': 'Forex\\\\EURHUF'}\n{'custom': False, 'chart_mode': 0, 'select': False, 'visible': False, 'session_deals': 0, 'session_buy_orders': 0, 'session_sell_orders': 0, 'volume': 0, 'volumehigh': 0, 'volumelow': 0, 'time': 0, 'digits': 3, 'spread': 0, 'spread_float': True, 'ticks_bookdepth': 0, 'trade_calc_mode': 0, 'trade_mode': 4, 'start_time': 0, 'expiration_time': 0, 'trade_stops_level': 0, 'trade_freeze_level': 0, 'trade_exemode': 2, 'swap_mode': 1, 'swap_rollover3days': 3, 'margin_hedged_use_leg': False, 'expiration_mode': 15, 'filling_mode': 2, 'order_mode': 127, 'order_gtc_mode': 0, 'option_mode': 0, 'option_right': 0, 'bid': 0.0, 'bidhigh': 0.0, 'bidlow': 0.0, 'ask': 0.0, 'askhigh': 0.0, 'asklow': 0.0, 'last': 0.0, 'lasthigh': 0.0, 'lastlow': 0.0, 'volume_real': 0.0, 'volumehigh_real': 0.0, 'volumelow_real': 0.0, 'option_strike': 0.0, 'point': 0.001, 'trade_tick_value': 0.6428098504181479, 'trade_tick_value_profit': 0.6428098504181479, 'trade_tick_value_loss': 0.6428842358356531, 'trade_tick_size': 0.001, 'trade_contract_size': 100000.0, 'trade_accrued_interest': 0.0, 'trade_face_value': 0.0, 'trade_liquidity_rate': 0.0, 'volume_min': 0.01, 'volume_max': 100.0, 'volume_step': 0.01, 'volume_limit': 0.0, 'swap_long': 8.71, 'swap_short': -23.1, 'margin_initial': 0.0, 'margin_maintenance': 0.0, 'session_volume': 0.0, 'session_turnover': 0.0, 'session_interest': 0.0, 'session_buy_orders_volume': 0.0, 'session_sell_orders_volume': 0.0, 'session_open': 0.0, 'session_close': 0.0, 'session_aw': 0.0, 'session_price_settlement': 0.0, 'session_price_limit_min': 0.0, 'session_price_limit_max': 0.0, 'margin_hedged': 0.0, 'price_change': 0.0, 'price_volatility': 0.0, 'price_theoretical': 0.0, 'price_greeks_delta': 0.0, 'price_greeks_theta': 0.0, 'price_greeks_gamma': 0.0, 'price_greeks_vega': 0.0, 'price_greeks_rho': 0.0, 'price_greeks_omega': 0.0, 'price_sensitivity': 0.0, 'basis': '', 'category': '', 'currency_base': 'EUR', 'currency_profit': 'JPY', 'currency_margin': 'EUR', 'bank': '', 'description': 'Euro vs Japanese Yen', 'exchange': '', 'formula': '', 'isin': '', 'name': 'EURJPY', 'page': '', 'path': 'Forex\\\\EURJPY'}\n{'custom': False, 'chart_mode': 0, 'select': False, 'visible': False, 'session_deals': 0, 'session_buy_orders': 0, 'session_sell_orders': 0, 'volume': 0, 'volumehigh': 0, 'volumelow': 0, 'time': 0, 'digits': 5, 'spread': 0, 'spread_float': True, 'ticks_bookdepth': 0, 'trade_calc_mode': 0, 'trade_mode': 4, 'start_time': 0, 'expiration_time': 0, 'trade_stops_level': 0, 'trade_freeze_level': 0, 'trade_exemode': 2, 'swap_mode': 1, 'swap_rollover3days': 3, 'margin_hedged_use_leg': False, 'expiration_mode': 15, 'filling_mode': 2, 'order_mode': 127, 'order_gtc_mode': 0, 'option_mode': 0, 'option_right': 0, 'bid': 0.0, 'bidhigh': 0.0, 'bidlow': 0.0, 'ask': 0.0, 'askhigh': 0.0, 'asklow': 0.0, 'last': 0.0, 'lasthigh': 0.0, 'lastlow': 0.0, 'volume_real': 0.0, 'volumehigh_real': 0.0, 'volumelow_real': 0.0, 'option_strike': 0.0, 'point': 1e-05, 'trade_tick_value': 0.0, 'trade_tick_value_profit': 0.0, 'trade_tick_value_loss': 0.0, 'trade_tick_size': 1e-05, 'trade_contract_size': 100000.0, 'trade_accrued_interest': 0.0, 'trade_face_value': 0.0, 'trade_liquidity_rate': 0.0, 'volume_min': 0.01, 'volume_max': 100.0, 'volume_step': 0.01, 'volume_limit': 0.0, 'swap_long': -457.24, 'swap_short': 307.77, 'margin_initial': 0.0, 'margin_maintenance': 0.0, 'session_volume': 0.0, 'session_turnover': 0.0, 'session_interest': 0.0, 'session_buy_orders_volume': 0.0, 'session_sell_orders_volume': 0.0, 'session_open': 0.0, 'session_close': 0.0, 'session_aw': 0.0, 'session_price_settlement': 0.0, 'session_price_limit_min': 0.0, 'session_price_limit_max': 0.0, 'margin_hedged': 0.0, 'price_change': 0.0, 'price_volatility': 0.0, 'price_theoretical': 0.0, 'price_greeks_delta': 0.0, 'price_greeks_theta': 0.0, 'price_greeks_gamma': 0.0, 'price_greeks_vega': 0.0, 'price_greeks_rho': 0.0, 'price_greeks_omega': 0.0, 'price_sensitivity': 0.0, 'basis': '', 'category': '', 'currency_base': 'EUR', 'currency_profit': 'MXN', 'currency_margin': 'EUR', 'bank': '', 'description': 'Euro vs Mexican Pesos', 'exchange': '', 'formula': '', 'isin': '', 'name': 'EURMXN', 'page': '', 'path': 'Forex\\\\EURMXN'}\n{'custom': False, 'chart_mode': 0, 'select': False, 'visible': False, 'session_deals': 0, 'session_buy_orders': 0, 'session_sell_orders': 0, 'volume': 0, 'volumehigh': 0, 'volumelow': 0, 'time': 0, 'digits': 5, 'spread': 0, 'spread_float': True, 'ticks_bookdepth': 0, 'trade_calc_mode': 0, 'trade_mode': 4, 'start_time': 0, 'expiration_time': 0, 'trade_stops_level': 0, 'trade_freeze_level': 0, 'trade_exemode': 2, 'swap_mode': 1, 'swap_rollover3days': 3, 'margin_hedged_use_leg': False, 'expiration_mode': 15, 'filling_mode': 2, 'order_mode': 127, 'order_gtc_mode': 0, 'option_mode': 0, 'option_right': 0, 'bid': 0.0, 'bidhigh': 0.0, 'bidlow': 0.0, 'ask': 0.0, 'askhigh': 0.0, 'asklow': 0.0, 'last': 0.0, 'lasthigh': 0.0, 'lastlow': 0.0, 'volume_real': 0.0, 'volumehigh_real': 0.0, 'volumelow_real': 0.0, 'option_strike': 0.0, 'point': 1e-05, 'trade_tick_value': 0.0, 'trade_tick_value_profit': 0.0, 'trade_tick_value_loss': 0.0, 'trade_tick_size': 1e-05, 'trade_contract_size': 100000.0, 'trade_accrued_interest': 0.0, 'trade_face_value': 0.0, 'trade_liquidity_rate': 0.0, 'volume_min': 0.01, 'volume_max': 100.0, 'volume_step': 0.01, 'volume_limit': 0.0, 'swap_long': -30.52, 'swap_short': 3.33, 'margin_initial': 0.0, 'margin_maintenance': 0.0, 'session_volume': 0.0, 'session_turnover': 0.0, 'session_interest': 0.0, 'session_buy_orders_volume': 0.0, 'session_sell_orders_volume': 0.0, 'session_open': 0.0, 'session_close': 0.0, 'session_aw': 0.0, 'session_price_settlement': 0.0, 'session_price_limit_min': 0.0, 'session_price_limit_max': 0.0, 'margin_hedged': 0.0, 'price_change': 0.0, 'price_volatility': 0.0, 'price_theoretical': 0.0, 'price_greeks_delta': 0.0, 'price_greeks_theta': 0.0, 'price_greeks_gamma': 0.0, 'price_greeks_vega': 0.0, 'price_greeks_rho': 0.0, 'price_greeks_omega': 0.0, 'price_sensitivity': 0.0, 'basis': '', 'category': '', 'currency_base': 'EUR', 'currency_profit': 'NOK', 'currency_margin': 'EUR', 'bank': '', 'description': 'Euro vs Norwegian Kroner', 'exchange': '', 'formula': '', 'isin': '', 'name': 'EURNOK', 'page': '', 'path': 'Forex\\\\EURNOK'}\n{'custom': False, 'chart_mode': 0, 'select': False, 'visible': False, 'session_deals': 0, 'session_buy_orders': 0, 'session_sell_orders': 0, 'volume': 0, 'volumehigh': 0, 'volumelow': 0, 'time': 0, 'digits': 5, 'spread': 0, 'spread_float': True, 'ticks_bookdepth': 0, 'trade_calc_mode': 0, 'trade_mode': 4, 'start_time': 0, 'expiration_time': 0, 'trade_stops_level': 0, 'trade_freeze_level': 0, 'trade_exemode': 2, 'swap_mode': 1, 'swap_rollover3days': 3, 'margin_hedged_use_leg': False, 'expiration_mode': 15, 'filling_mode': 2, 'order_mode': 127, 'order_gtc_mode': 0, 'option_mode': 0, 'option_right': 0, 'bid': 0.0, 'bidhigh': 0.0, 'bidlow': 0.0, 'ask': 0.0, 'askhigh': 0.0, 'asklow': 0.0, 'last': 0.0, 'lasthigh': 0.0, 'lastlow': 0.0, 'volume_real': 0.0, 'volumehigh_real': 0.0, 'volumelow_real': 0.0, 'option_strike': 0.0, 'point': 1e-05, 'trade_tick_value': 0.62005, 'trade_tick_value_profit': 0.62005, 'trade_tick_value_loss': 0.62023, 'trade_tick_size': 1e-05, 'trade_contract_size': 100000.0, 'trade_accrued_interest': 0.0, 'trade_face_value': 0.0, 'trade_liquidity_rate': 0.0, 'volume_min': 0.01, 'volume_max': 100.0, 'volume_step': 0.01, 'volume_limit': 0.0, 'swap_long': -8.58, 'swap_short': 4.05, 'margin_initial': 0.0, 'margin_maintenance': 0.0, 'session_volume': 0.0, 'session_turnover': 0.0, 'session_interest': 0.0, 'session_buy_orders_volume': 0.0, 'session_sell_orders_volume': 0.0, 'session_open': 0.0, 'session_close': 0.0, 'session_aw': 0.0, 'session_price_settlement': 0.0, 'session_price_limit_min': 0.0, 'session_price_limit_max': 0.0, 'margin_hedged': 0.0, 'price_change': 0.0, 'price_volatility': 0.0, 'price_theoretical': 0.0, 'price_greeks_delta': 0.0, 'price_greeks_theta': 0.0, 'price_greeks_gamma': 0.0, 'price_greeks_vega': 0.0, 'price_greeks_rho': 0.0, 'price_greeks_omega': 0.0, 'price_sensitivity': 0.0, 'basis': '', 'category': '', 'currency_base': 'EUR', 'currency_profit': 'NZD', 'currency_margin': 'EUR', 'bank': '', 'description': 'Euro vs New Zealand Dollar', 'exchange': '', 'formula': '', 'isin': '', 'name': 'EURNZD', 'page': '', 'path': 'Forex\\\\EURNZD'}\n{'custom': False, 'chart_mode': 0, 'select': False, 'visible': False, 'session_deals': 0, 'session_buy_orders': 0, 'session_sell_orders': 0, 'volume': 0, 'volumehigh': 0, 'volumelow': 0, 'time': 0, 'digits': 5, 'spread': 0, 'spread_float': True, 'ticks_bookdepth': 0, 'trade_calc_mode': 0, 'trade_mode': 4, 'start_time': 0, 'expiration_time': 0, 'trade_stops_level': 0, 'trade_freeze_level': 0, 'trade_exemode': 2, 'swap_mode': 1, 'swap_rollover3days': 3, 'margin_hedged_use_leg': False, 'expiration_mode': 15, 'filling_mode': 2, 'order_mode': 127, 'order_gtc_mode': 0, 'option_mode': 0, 'option_right': 0, 'bid': 0.0, 'bidhigh': 0.0, 'bidlow': 0.0, 'ask': 0.0, 'askhigh': 0.0, 'asklow': 0.0, 'last': 0.0, 'lasthigh': 0.0, 'lastlow': 0.0, 'volume_real': 0.0, 'volumehigh_real': 0.0, 'volumelow_real': 0.0, 'option_strike': 0.0, 'point': 1e-05, 'trade_tick_value': 0.0, 'trade_tick_value_profit': 0.0, 'trade_tick_value_loss': 0.0, 'trade_tick_size': 1e-05, 'trade_contract_size': 100000.0, 'trade_accrued_interest': 0.0, 'trade_face_value': 0.0, 'trade_liquidity_rate': 0.0, 'volume_min': 0.01, 'volume_max': 100.0, 'volume_step': 0.01, 'volume_limit': 0.0, 'swap_long': -25.69, 'swap_short': 14.16, 'margin_initial': 0.0, 'margin_maintenance': 0.0, 'session_volume': 0.0, 'session_turnover': 0.0, 'session_interest': 0.0, 'session_buy_orders_volume': 0.0, 'session_sell_orders_volume': 0.0, 'session_open': 0.0, 'session_close': 0.0, 'session_aw': 0.0, 'session_price_settlement': 0.0, 'session_price_limit_min': 0.0, 'session_price_limit_max': 0.0, 'margin_hedged': 0.0, 'price_change': 0.0, 'price_volatility': 0.0, 'price_theoretical': 0.0, 'price_greeks_delta': 0.0, 'price_greeks_theta': 0.0, 'price_greeks_gamma': 0.0, 'price_greeks_vega': 0.0, 'price_greeks_rho': 0.0, 'price_greeks_omega': 0.0, 'price_sensitivity': 0.0, 'basis': '', 'category': '', 'currency_base': 'EUR', 'currency_profit': 'PLN', 'currency_margin': 'EUR', 'bank': '', 'description': 'Euro vs Polish Zloty', 'exchange': '', 'formula': '', 'isin': '', 'name': 'EURPLN', 'page': '', 'path': 'Forex\\\\EURPLN'}\n{'custom': False, 'chart_mode': 0, 'select': False, 'visible': False, 'session_deals': 0, 'session_buy_orders': 0, 'session_sell_orders': 0, 'volume': 0, 'volumehigh': 0, 'volumelow': 0, 'time': 0, 'digits': 5, 'spread': 0, 'spread_float': True, 'ticks_bookdepth': 0, 'trade_calc_mode': 0, 'trade_mode': 4, 'start_time': 0, 'expiration_time': 0, 'trade_stops_level': 0, 'trade_freeze_level': 0, 'trade_exemode': 2, 'swap_mode': 1, 'swap_rollover3days': 3, 'margin_hedged_use_leg': False, 'expiration_mode': 15, 'filling_mode': 2, 'order_mode': 127, 'order_gtc_mode': 0, 'option_mode': 0, 'option_right': 0, 'bid': 0.0, 'bidhigh': 0.0, 'bidlow': 0.0, 'ask': 0.0, 'askhigh': 0.0, 'asklow': 0.0, 'last': 0.0, 'lasthigh': 0.0, 'lastlow': 0.0, 'volume_real': 0.0, 'volumehigh_real': 0.0, 'volumelow_real': 0.0, 'option_strike': 0.0, 'point': 1e-05, 'trade_tick_value': 0.0, 'trade_tick_value_profit': 0.0, 'trade_tick_value_loss': 0.0, 'trade_tick_size': 1e-05, 'trade_contract_size': 100000.0, 'trade_accrued_interest': 0.0, 'trade_face_value': 0.0, 'trade_liquidity_rate': 0.0, 'volume_min': 0.01, 'volume_max': 100.0, 'volume_step': 0.01, 'volume_limit': 0.0, 'swap_long': -3.4699999999999998, 'swap_short': -22.89, 'margin_initial': 0.0, 'margin_maintenance': 0.0, 'session_volume': 0.0, 'session_turnover': 0.0, 'session_interest': 0.0, 'session_buy_orders_volume': 0.0, 'session_sell_orders_volume': 0.0, 'session_open': 0.0, 'session_close': 0.0, 'session_aw': 0.0, 'session_price_settlement': 0.0, 'session_price_limit_min': 0.0, 'session_price_limit_max': 0.0, 'margin_hedged': 0.0, 'price_change': 0.0, 'price_volatility': 0.0, 'price_theoretical': 0.0, 'price_greeks_delta': 0.0, 'price_greeks_theta': 0.0, 'price_greeks_gamma': 0.0, 'price_greeks_vega': 0.0, 'price_greeks_rho': 0.0, 'price_greeks_omega': 0.0, 'price_sensitivity': 0.0, 'basis': '', 'category': '', 'currency_base': 'EUR', 'currency_profit': 'SEK', 'currency_margin': 'EUR', 'bank': '', 'description': 'Euro vs Swedish Kroner', 'exchange': '', 'formula': '', 'isin': '', 'name': 'EURSEK', 'page': '', 'path': 'Forex\\\\EURSEK'}\n{'custom': False, 'chart_mode': 0, 'select': False, 'visible': False, 'session_deals': 0, 'session_buy_orders': 0, 'session_sell_orders': 0, 'volume': 0, 'volumehigh': 0, 'volumelow': 0, 'time': 0, 'digits': 5, 'spread': 0, 'spread_float': True, 'ticks_bookdepth': 0, 'trade_calc_mode': 0, 'trade_mode': 4, 'start_time': 0, 'expiration_time': 0, 'trade_stops_level': 0, 'trade_freeze_level': 0, 'trade_exemode': 2, 'swap_mode': 1, 'swap_rollover3days': 3, 'margin_hedged_use_leg': False, 'expiration_mode': 15, 'filling_mode': 2, 'order_mode': 127, 'order_gtc_mode': 0, 'option_mode': 0, 'option_right': 0, 'bid': 0.0, 'bidhigh': 0.0, 'bidlow': 0.0, 'ask': 0.0, 'askhigh': 0.0, 'asklow': 0.0, 'last': 0.0, 'lasthigh': 0.0, 'lastlow': 0.0, 'volume_real': 0.0, 'volumehigh_real': 0.0, 'volumelow_real': 0.0, 'option_strike': 0.0, 'point': 1e-05, 'trade_tick_value': 0.0, 'trade_tick_value_profit': 0.0, 'trade_tick_value_loss': 0.0, 'trade_tick_size': 1e-05, 'trade_contract_size': 100000.0, 'trade_accrued_interest': 0.0, 'trade_face_value': 0.0, 'trade_liquidity_rate': 0.0, 'volume_min': 0.01, 'volume_max': 100.0, 'volume_step': 0.01, 'volume_limit': 0.0, 'swap_long': -0.81, 'swap_short': -2.63, 'margin_initial': 0.0, 'margin_maintenance': 0.0, 'session_volume': 0.0, 'session_turnover': 0.0, 'session_interest': 0.0, 'session_buy_orders_volume': 0.0, 'session_sell_orders_volume': 0.0, 'session_open': 0.0, 'session_close': 0.0, 'session_aw': 0.0, 'session_price_settlement': 0.0, 'session_price_limit_min': 0.0, 'session_price_limit_max': 0.0, 'margin_hedged': 0.0, 'price_change': 0.0, 'price_volatility': 0.0, 'price_theoretical': 0.0, 'price_greeks_delta': 0.0, 'price_greeks_theta': 0.0, 'price_greeks_gamma': 0.0, 'price_greeks_vega': 0.0, 'price_greeks_rho': 0.0, 'price_greeks_omega': 0.0, 'price_sensitivity': 0.0, 'basis': '', 'category': '', 'currency_base': 'EUR', 'currency_profit': 'SGD', 'currency_margin': 'EUR', 'bank': '', 'description': 'Euro vs Singapore Dollar', 'exchange': '', 'formula': '', 'isin': '', 'name': 'EURSGD', 'page': '', 'path': 'Forex\\\\EURSGD'}\n{'custom': False, 'chart_mode': 0, 'select': False, 'visible': False, 'session_deals': 0, 'session_buy_orders': 0, 'session_sell_orders': 0, 'volume': 0, 'volumehigh': 0, 'volumelow': 0, 'time': 0, 'digits': 5, 'spread': 0, 'spread_float': True, 'ticks_bookdepth': 0, 'trade_calc_mode': 0, 'trade_mode': 3, 'start_time': 0, 'expiration_time': 0, 'trade_stops_level': 0, 'trade_freeze_level': 0, 'trade_exemode': 2, 'swap_mode': 1, 'swap_rollover3days': 3, 'margin_hedged_use_leg': False, 'expiration_mode': 15, 'filling_mode': 2, 'order_mode': 127, 'order_gtc_mode': 0, 'option_mode': 0, 'option_right': 0, 'bid': 0.0, 'bidhigh': 0.0, 'bidlow': 0.0, 'ask': 0.0, 'askhigh': 0.0, 'asklow': 0.0, 'last': 0.0, 'lasthigh': 0.0, 'lastlow': 0.0, 'volume_real': 0.0, 'volumehigh_real': 0.0, 'volumelow_real': 0.0, 'option_strike': 0.0, 'point': 1e-05, 'trade_tick_value': 0.0, 'trade_tick_value_profit': 0.0, 'trade_tick_value_loss': 0.0, 'trade_tick_size': 1e-05, 'trade_contract_size': 100000.0, 'trade_accrued_interest': 0.0, 'trade_face_value': 0.0, 'trade_liquidity_rate': 0.0, 'volume_min': 0.01, 'volume_max': 100.0, 'volume_step': 0.01, 'volume_limit': 0.0, 'swap_long': -4647.43, 'swap_short': 2448.19, 'margin_initial': 0.0, 'margin_maintenance': 0.0, 'session_volume': 0.0, 'session_turnover': 0.0, 'session_interest': 0.0, 'session_buy_orders_volume': 0.0, 'session_sell_orders_volume': 0.0, 'session_open': 0.0, 'session_close': 0.0, 'session_aw': 0.0, 'session_price_settlement': 0.0, 'session_price_limit_min': 0.0, 'session_price_limit_max': 0.0, 'margin_hedged': 0.0, 'price_change': 0.0, 'price_volatility': 0.0, 'price_theoretical': 0.0, 'price_greeks_delta': 0.0, 'price_greeks_theta': 0.0, 'price_greeks_gamma': 0.0, 'price_greeks_vega': 0.0, 'price_greeks_rho': 0.0, 'price_greeks_omega': 0.0, 'price_sensitivity': 0.0, 'basis': '', 'category': '', 'currency_base': 'EUR', 'currency_profit': 'TRY', 'currency_margin': 'EUR', 'bank': '', 'description': 'Euro vs Turkish Lira', 'exchange': '', 'formula': '', 'isin': '', 'name': 'EURTRY', 'page': '', 'path': 'Forex\\\\EURTRY'}\n{'custom': False, 'chart_mode': 0, 'select': False, 'visible': False, 'session_deals': 0, 'session_buy_orders': 0, 'session_sell_orders': 0, 'volume': 0, 'volumehigh': 0, 'volumelow': 0, 'time': 0, 'digits': 5, 'spread': 0, 'spread_float': True, 'ticks_bookdepth': 0, 'trade_calc_mode': 0, 'trade_mode': 4, 'start_time': 0, 'expiration_time': 0, 'trade_stops_level': 0, 'trade_freeze_level': 0, 'trade_exemode': 2, 'swap_mode': 1, 'swap_rollover3days': 3, 'margin_hedged_use_leg': False, 'expiration_mode': 15, 'filling_mode': 2, 'order_mode': 127, 'order_gtc_mode': 0, 'option_mode': 0, 'option_right': 0, 'bid': 0.0, 'bidhigh': 0.0, 'bidlow': 0.0, 'ask': 0.0, 'askhigh': 0.0, 'asklow': 0.0, 'last': 0.0, 'lasthigh': 0.0, 'lastlow': 0.0, 'volume_real': 0.0, 'volumehigh_real': 0.0, 'volumelow_real': 0.0, 'option_strike': 0.0, 'point': 1e-05, 'trade_tick_value': 0.0, 'trade_tick_value_profit': 0.0, 'trade_tick_value_loss': 0.0, 'trade_tick_size': 1e-05, 'trade_contract_size': 100000.0, 'trade_accrued_interest': 0.0, 'trade_face_value': 0.0, 'trade_liquidity_rate': 0.0, 'volume_min': 0.01, 'volume_max': 100.0, 'volume_step': 0.01, 'volume_limit': 0.0, 'swap_long': -298.06, 'swap_short': 161.72, 'margin_initial': 0.0, 'margin_maintenance': 0.0, 'session_volume': 0.0, 'session_turnover': 0.0, 'session_interest': 0.0, 'session_buy_orders_volume': 0.0, 'session_sell_orders_volume': 0.0, 'session_open': 0.0, 'session_close': 0.0, 'session_aw': 0.0, 'session_price_settlement': 0.0, 'session_price_limit_min': 0.0, 'session_price_limit_max': 0.0, 'margin_hedged': 0.0, 'price_change': 0.0, 'price_volatility': 0.0, 'price_theoretical': 0.0, 'price_greeks_delta': 0.0, 'price_greeks_theta': 0.0, 'price_greeks_gamma': 0.0, 'price_greeks_vega': 0.0, 'price_greeks_rho': 0.0, 'price_greeks_omega': 0.0, 'price_sensitivity': 0.0, 'basis': '', 'category': '', 'currency_base': 'EUR', 'currency_profit': 'ZAR', 'currency_margin': 'EUR', 'bank': '', 'description': 'Euro vs South African Rand', 'exchange': '', 'formula': '', 'isin': '', 'name': 'EURZAR', 'page': '', 'path': 'Forex\\\\EURZAR'}\n{'custom': False, 'chart_mode': 0, 'select': False, 'visible': False, 'session_deals': 0, 'session_buy_orders': 0, 'session_sell_orders': 0, 'volume': 0, 'volumehigh': 0, 'volumelow': 0, 'time': 0, 'digits': 2, 'spread': 0, 'spread_float': True, 'ticks_bookdepth': 0, 'trade_calc_mode': 0, 'trade_mode': 4, 'start_time': 0, 'expiration_time': 0, 'trade_stops_level': 0, 'trade_freeze_level': 0, 'trade_exemode': 2, 'swap_mode': 1, 'swap_rollover3days': 3, 'margin_hedged_use_leg': False, 'expiration_mode': 15, 'filling_mode': 2, 'order_mode': 127, 'order_gtc_mode': 0, 'option_mode': 0, 'option_right': 0, 'bid': 0.0, 'bidhigh': 0.0, 'bidlow': 0.0, 'ask': 0.0, 'askhigh': 0.0, 'asklow': 0.0, 'last': 0.0, 'lasthigh': 0.0, 'lastlow': 0.0, 'volume_real': 0.0, 'volumehigh_real': 0.0, 'volumelow_real': 0.0, 'option_strike': 0.0, 'point': 0.01, 'trade_tick_value': 1.0895299999999999, 'trade_tick_value_profit': 1.0895299999999999, 'trade_tick_value_loss': 1.08969, 'trade_tick_size': 0.01, 'trade_contract_size': 100.0, 'trade_accrued_interest': 0.0, 'trade_face_value': 0.0, 'trade_liquidity_rate': 0.0, 'volume_min': 0.01, 'volume_max': 100.0, 'volume_step': 0.01, 'volume_limit': 0.0, 'swap_long': -33.68, 'swap_short': 15.68, 'margin_initial': 0.0, 'margin_maintenance': 0.0, 'session_volume': 0.0, 'session_turnover': 0.0, 'session_interest': 0.0, 'session_buy_orders_volume': 0.0, 'session_sell_orders_volume': 0.0, 'session_open': 0.0, 'session_close': 0.0, 'session_aw': 0.0, 'session_price_settlement': 0.0, 'session_price_limit_min': 0.0, 'session_price_limit_max': 0.0, 'margin_hedged': 0.0, 'price_change': 0.0, 'price_volatility': 0.0, 'price_theoretical': 0.0, 'price_greeks_delta': 0.0, 'price_greeks_theta': 0.0, 'price_greeks_gamma': 0.0, 'price_greeks_vega': 0.0, 'price_greeks_rho': 0.0, 'price_greeks_omega': 0.0, 'price_sensitivity': 0.0, 'basis': '', 'category': '', 'currency_base': 'XAU', 'currency_profit': 'EUR', 'currency_margin': 'XAU', 'bank': '', 'description': 'Gold vs. Euro', 'exchange': '', 'formula': '', 'isin': '', 'name': 'XAUEUR', 'page': '', 'path': 'Forex\\\\XAUEUR'}\n</pre>"},{"location":"tutorial/metatrader/feeder/#interactive-with-metatraderdatafeeder","title":"Interactive with MetaTraderDataFeeder\u00b6","text":""},{"location":"tutorial/metatrader/feeder/#metatraderdatafeeder-init","title":"MetaTraderDataFeeder init\u00b6","text":""},{"location":"tutorial/metatrader/feeder/#build-a-datafeed","title":"Build a DataFeed\u00b6","text":""},{"location":"tutorial/metatrader/feeder/#load-datafeed-data","title":"Load DataFeed data\u00b6","text":""},{"location":"tutorial/metatrader/feeder/#plot","title":"Plot\u00b6","text":""},{"location":"tutorial/metatrader/feeder/#init-plotly-environment","title":"Init Plotly environment\u00b6","text":""},{"location":"tutorial/metatrader/feeder/#show","title":"Show\u00b6","text":""},{"location":"tutorial/metatrader/feeder/#load-markets","title":"Load markets\u00b6","text":""},{"location":"tutorial/optimize/1.hyperopt/","title":"Optimize with Hyperopt","text":"In\u00a0[\u00a0]: Copied! <pre>!pip install hyperopt\n</pre> !pip install hyperopt In\u00a0[1]: Copied! <pre># import talib.abstract as ta\n\nfrom lettrade import DataFeed, Strategy, crossover, crossunder\nfrom lettrade.exchange.backtest import ForexBackTestAccount, let_backtest\nfrom lettrade.indicator.vendor.qtpylib import inject_indicators\n\ninject_indicators()\n\n\nclass SmaCross(Strategy):\n    ema1_period = 9\n    ema2_period = 21\n\n    def indicators(self, df: DataFeed):\n        # df[\"ema1\"] = ta.EMA(df, timeperiod=self.ema1_period)\n        # df[\"ema2\"] = ta.EMA(df, timeperiod=self.ema2_period)\n        df[\"ema1\"] = df.close.ema(window=self.ema1_period)\n        df[\"ema2\"] = df.close.ema(window=self.ema2_period)\n\n        df[\"signal_ema_crossover\"] = crossover(df.ema1, df.ema2)\n        df[\"signal_ema_crossunder\"] = crossunder(df.ema1, df.ema2)\n\n    def next(self, df: DataFeed):\n        if len(self.orders) &gt; 0 or len(self.trades) &gt; 0:\n            return\n\n        if df.l.signal_ema_crossover[-1]:\n            price = df.l.close[-1]\n            self.buy(size=0.1, sl=price - 0.001, tp=price + 0.001)\n        elif df.l.signal_ema_crossunder[-1]:\n            price = df.l.close[-1]\n            self.sell(size=0.1, sl=price + 0.001, tp=price - 0.001)\n\n\nlt = let_backtest(\n    strategy=SmaCross,\n    datas=\"example/data/data/EURUSD_5m_0_10000.csv\",\n    account=ForexBackTestAccount,\n    # plotter=None,\n)\n</pre> # import talib.abstract as ta  from lettrade import DataFeed, Strategy, crossover, crossunder from lettrade.exchange.backtest import ForexBackTestAccount, let_backtest from lettrade.indicator.vendor.qtpylib import inject_indicators  inject_indicators()   class SmaCross(Strategy):     ema1_period = 9     ema2_period = 21      def indicators(self, df: DataFeed):         # df[\"ema1\"] = ta.EMA(df, timeperiod=self.ema1_period)         # df[\"ema2\"] = ta.EMA(df, timeperiod=self.ema2_period)         df[\"ema1\"] = df.close.ema(window=self.ema1_period)         df[\"ema2\"] = df.close.ema(window=self.ema2_period)          df[\"signal_ema_crossover\"] = crossover(df.ema1, df.ema2)         df[\"signal_ema_crossunder\"] = crossunder(df.ema1, df.ema2)      def next(self, df: DataFeed):         if len(self.orders) &gt; 0 or len(self.trades) &gt; 0:             return          if df.l.signal_ema_crossover[-1]:             price = df.l.close[-1]             self.buy(size=0.1, sl=price - 0.001, tp=price + 0.001)         elif df.l.signal_ema_crossunder[-1]:             price = df.l.close[-1]             self.sell(size=0.1, sl=price + 0.001, tp=price - 0.001)   lt = let_backtest(     strategy=SmaCross,     datas=\"example/data/data/EURUSD_5m_0_10000.csv\",     account=ForexBackTestAccount,     # plotter=None, ) In\u00a0[2]: Copied! <pre># define a search space\nfrom hyperopt import fmin, tpe, space_eval, Trials\nfrom hyperopt import hp\n\n\nlettrade_model = lt.optimize_model()\n\n\ndef train_model(params):\n    # Model\n    result = lettrade_model(params)\n\n    # Score\n    return -result[\"equity\"]\n\n\n# Hyperopt\nsearch_space = {\n    \"ema1_period\": hp.uniformint(\"ema1_period\", 5, 25, q=1),\n    \"ema2_period\": hp.uniformint(\"ema2_period\", 10, 50, q=1),\n}\n\ntrials = Trials()\nbest_params = fmin(\n    train_model,\n    search_space,\n    algo=tpe.suggest,\n    max_evals=1_000,\n    trials=trials,\n)\n</pre> # define a search space from hyperopt import fmin, tpe, space_eval, Trials from hyperopt import hp   lettrade_model = lt.optimize_model()   def train_model(params):     # Model     result = lettrade_model(params)      # Score     return -result[\"equity\"]   # Hyperopt search_space = {     \"ema1_period\": hp.uniformint(\"ema1_period\", 5, 25, q=1),     \"ema2_period\": hp.uniformint(\"ema2_period\", 10, 50, q=1), }  trials = Trials() best_params = fmin(     train_model,     search_space,     algo=tpe.suggest,     max_evals=1_000,     trials=trials, ) <pre>100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1000/1000 [00:25&lt;00:00, 38.53trial/s, best loss: -1183.88]\n</pre> In\u00a0[3]: Copied! <pre>hyperparams = space_eval(search_space, best_params)\n\nprint(best_params)\nprint(hyperparams)\n</pre> hyperparams = space_eval(search_space, best_params)  print(best_params) print(hyperparams) <pre>{'ema1_period': 14.0, 'ema2_period': 10.0}\n{'ema1_period': 14, 'ema2_period': 10}\n</pre> In\u00a0[9]: Copied! <pre>lt.plotter.heatmap(x=\"ema1_period\", y=\"ema2_period\", z=\"equity\")\n</pre> lt.plotter.heatmap(x=\"ema1_period\", y=\"ema2_period\", z=\"equity\") In\u00a0[10]: Copied! <pre>lt.plotter.contour(x=\"ema1_period\", y=\"ema2_period\", z=\"equity\")\n</pre> lt.plotter.contour(x=\"ema1_period\", y=\"ema2_period\", z=\"equity\") In\u00a0[4]: Copied! <pre>import plotly.io as pio\n\npio.renderers.default = \"notebook\"\npio.templates.default = \"plotly_dark\"\n</pre> import plotly.io as pio  pio.renderers.default = \"notebook\" pio.templates.default = \"plotly_dark\" In\u00a0[5]: Copied! <pre>import pandas as pd\nimport numpy as np\n\n\ndef unpack(x):\n    if x:\n        return x[0]\n    return np.nan\n\n\n# We'll first turn each trial into a series and then stack those series together as a dataframe.\ndf = pd.DataFrame([pd.Series(t[\"misc\"][\"vals\"]).apply(unpack) for t in trials])\n# Then we'll add other relevant bits of information to the correct rows and perform a couple of\n# mappings for convenience\ndf[\"loss\"] = [t[\"result\"][\"loss\"] for t in trials]\ndf[\"trial_number\"] = df.index\n\n\ndf[\"win\"] = -df[\"loss\"]\ndf\n</pre> import pandas as pd import numpy as np   def unpack(x):     if x:         return x[0]     return np.nan   # We'll first turn each trial into a series and then stack those series together as a dataframe. df = pd.DataFrame([pd.Series(t[\"misc\"][\"vals\"]).apply(unpack) for t in trials]) # Then we'll add other relevant bits of information to the correct rows and perform a couple of # mappings for convenience df[\"loss\"] = [t[\"result\"][\"loss\"] for t in trials] df[\"trial_number\"] = df.index   df[\"win\"] = -df[\"loss\"] df Out[5]: ema1_period ema2_period loss trial_number win 0 8.0 34.0 -930.18 0 930.18 1 16.0 44.0 -937.28 1 937.28 2 23.0 39.0 -931.58 2 931.58 3 17.0 24.0 -989.78 3 989.78 4 17.0 11.0 -1059.08 4 1059.08 ... ... ... ... ... ... 995 15.0 13.0 -1009.38 995 1009.38 996 13.0 17.0 -971.58 996 971.58 997 16.0 15.0 -1055.88 997 1055.88 998 15.0 13.0 -1009.38 998 1009.38 999 11.0 12.0 -826.08 999 826.08 <p>1000 rows \u00d7 5 columns</p> In\u00a0[6]: Copied! <pre>from plotly import express as px\n\nfig = px.scatter(df, x=\"trial_number\", y=\"win\")\nfig.show()\n</pre> from plotly import express as px  fig = px.scatter(df, x=\"trial_number\", y=\"win\") fig.show() In\u00a0[7]: Copied! <pre>import plotly.express as px\n\n\nfig = px.density_contour(\n    df,\n    x=\"ema1_period\",\n    y=\"ema2_period\",\n    z=\"win\",\n    histfunc=\"max\",\n)\nfig.update_traces(contours_coloring=\"fill\", contours_showlabels=True)\nfig.show()\n</pre> import plotly.express as px   fig = px.density_contour(     df,     x=\"ema1_period\",     y=\"ema2_period\",     z=\"win\",     histfunc=\"max\", ) fig.update_traces(contours_coloring=\"fill\", contours_showlabels=True) fig.show() In\u00a0[8]: Copied! <pre>import plotly.express as px\n\nfig = px.density_heatmap(\n    df,\n    x=\"ema1_period\",\n    y=\"ema2_period\",\n    z=\"win\",\n    nbinsx=20,\n    nbinsy=40,\n    histfunc=\"max\",\n    color_continuous_scale=\"Viridis\",\n)\nfig.show()\n</pre> import plotly.express as px  fig = px.density_heatmap(     df,     x=\"ema1_period\",     y=\"ema2_period\",     z=\"win\",     nbinsx=20,     nbinsy=40,     histfunc=\"max\",     color_continuous_scale=\"Viridis\", ) fig.show()"},{"location":"tutorial/optimize/1.hyperopt/#optimize-with-hyperopt","title":"Optimize with Hyperopt\u00b6","text":"<p>Home | Document</p>"},{"location":"tutorial/optimize/1.hyperopt/#installation","title":"Installation\u00b6","text":""},{"location":"tutorial/optimize/1.hyperopt/#sample-strategy","title":"Sample Strategy\u00b6","text":""},{"location":"tutorial/optimize/1.hyperopt/#optimize","title":"Optimize\u00b6","text":""},{"location":"tutorial/optimize/1.hyperopt/#plot","title":"Plot\u00b6","text":""},{"location":"tutorial/optimize/1.hyperopt/#plot-plotly","title":"Plot plotly\u00b6","text":"<p>Tutorial</p>"},{"location":"tutorial/optimize/1.hyperopt/#init-plotly-environment","title":"Init Plotly environment\u00b6","text":""},{"location":"tutorial/optimize/1.hyperopt/#type-1","title":"Type 1\u00b6","text":""},{"location":"tutorial/optimize/1.hyperopt/#type-2","title":"Type 2\u00b6","text":""},{"location":"tutorial/optimize/1.hyperopt/#type-3","title":"Type 3\u00b6","text":""},{"location":"tutorial/optimize/2.blackbox/","title":"Optimize with blackbox","text":"In\u00a0[\u00a0]: Copied! <pre>!pip install git+https://github.com/paulknysh/blackbox.git@master\n</pre> !pip install git+https://github.com/paulknysh/blackbox.git@master In\u00a0[1]: Copied! <pre>import talib.abstract as ta\n\nfrom lettrade import DataFeed, Strategy, crossover, crossunder\nfrom lettrade.exchange.backtest import ForexBackTestAccount, let_backtest\n\n\nclass SmaCross(Strategy):\n    ema1_period = 9\n    ema2_period = 21\n\n    def indicators(self, df: DataFeed):\n        df[\"ema1\"] = ta.EMA(df, timeperiod=self.ema1_period)\n        df[\"ema2\"] = ta.EMA(df, timeperiod=self.ema2_period)\n\n        df[\"signal_ema_crossover\"] = crossover(df.ema1, df.ema2)\n        df[\"signal_ema_crossunder\"] = crossunder(df.ema1, df.ema2)\n\n    def next(self, df: DataFeed):\n        if len(self.orders) &gt; 0 or len(self.trades) &gt; 0:\n            return\n\n        if df.l.signal_ema_crossover[-1]:\n            price = self.data.l.close[-1]\n            self.buy(size=0.1, sl=price - 0.001, tp=price + 0.001)\n        elif df.l.signal_ema_crossunder[-1]:\n            price = self.data.l.close[-1]\n            self.sell(size=0.1, sl=price + 0.001, tp=price - 0.001)\n\n\nlt = let_backtest(\n    strategy=SmaCross,\n    datas=\"example/data/data/EURUSD_5m_0_10000.csv\",\n    account=ForexBackTestAccount,\n)\n</pre> import talib.abstract as ta  from lettrade import DataFeed, Strategy, crossover, crossunder from lettrade.exchange.backtest import ForexBackTestAccount, let_backtest   class SmaCross(Strategy):     ema1_period = 9     ema2_period = 21      def indicators(self, df: DataFeed):         df[\"ema1\"] = ta.EMA(df, timeperiod=self.ema1_period)         df[\"ema2\"] = ta.EMA(df, timeperiod=self.ema2_period)          df[\"signal_ema_crossover\"] = crossover(df.ema1, df.ema2)         df[\"signal_ema_crossunder\"] = crossunder(df.ema1, df.ema2)      def next(self, df: DataFeed):         if len(self.orders) &gt; 0 or len(self.trades) &gt; 0:             return          if df.l.signal_ema_crossover[-1]:             price = self.data.l.close[-1]             self.buy(size=0.1, sl=price - 0.001, tp=price + 0.001)         elif df.l.signal_ema_crossunder[-1]:             price = self.data.l.close[-1]             self.sell(size=0.1, sl=price + 0.001, tp=price - 0.001)   lt = let_backtest(     strategy=SmaCross,     datas=\"example/data/data/EURUSD_5m_0_10000.csv\",     account=ForexBackTestAccount, ) In\u00a0[2]: Copied! <pre>import blackbox as bb\n\n\ndef params_parser(args):\n    return {\"ema1_period\": int(args[0]), \"ema2_period\": int(args[1])}\n\n\ndef result_parser(result):\n    return result[\"equity\"]\n\n\nresult = bb.minimize(\n    f=lt.optimize_model(\n        params_parser=params_parser,\n        result_parser=result_parser,\n    ),\n    domain=[[5, 25, 1], [10, 50, 1]],  # ranges of each parameter\n    budget=300,  # total number of function calls available\n    batch=12,  # number of calls that will be evaluated in parallel\n)\n</pre> import blackbox as bb   def params_parser(args):     return {\"ema1_period\": int(args[0]), \"ema2_period\": int(args[1])}   def result_parser(result):     return result[\"equity\"]   result = bb.minimize(     f=lt.optimize_model(         params_parser=params_parser,         result_parser=result_parser,     ),     domain=[[5, 25, 1], [10, 50, 1]],  # ranges of each parameter     budget=300,  # total number of function calls available     batch=12,  # number of calls that will be evaluated in parallel ) <pre>INFO     evaluating batch 1/25 (samples 1..12/300) 06-13 05:59:26\nINFO     evaluating batch 2/25 (samples 13..24/300) 06-13 05:59:26\nINFO     evaluating batch 3/25 (samples 25..36/300) 06-13 05:59:27\nINFO     evaluating batch 4/25 (samples 37..48/300) 06-13 05:59:27\nINFO     evaluating batch 5/25 (samples 49..60/300) 06-13 05:59:27\nINFO     evaluating batch 6/25 (samples 61..72/300) 06-13 05:59:27\nINFO     evaluating batch 7/25 (samples 73..84/300) 06-13 05:59:27\nINFO     evaluating batch 8/25 (samples 85..96/300) 06-13 05:59:27\nINFO     evaluating batch 9/25 (samples 97..108/300) 06-13 05:59:28\nINFO     evaluating batch 10/25 (samples 109..120/300) 06-13 05:59:28\nINFO     evaluating batch 11/25 (samples 121..132/300) 06-13 05:59:28\nINFO     evaluating batch 12/25 (samples 133..144/300) 06-13 05:59:28\nINFO     evaluating batch 13/25 (samples 145..156/300) 06-13 05:59:28\nINFO     evaluating batch 14/25 (samples 157..168/300) 06-13 05:59:28\nINFO     evaluating batch 15/25 (samples 169..180/300) 06-13 05:59:30\nINFO     evaluating batch 16/25 (samples 181..192/300) 06-13 05:59:32\nINFO     evaluating batch 17/25 (samples 193..204/300) 06-13 05:59:34\nINFO     evaluating batch 18/25 (samples 205..216/300) 06-13 05:59:37\nINFO     evaluating batch 19/25 (samples 217..228/300) 06-13 05:59:39\nINFO     evaluating batch 20/25 (samples 229..240/300) 06-13 05:59:41\nINFO     evaluating batch 21/25 (samples 241..252/300) 06-13 05:59:44\nINFO     evaluating batch 22/25 (samples 253..264/300) 06-13 05:59:47\nINFO     evaluating batch 23/25 (samples 265..276/300) 06-13 05:59:49\nINFO     evaluating batch 24/25 (samples 277..288/300) 06-13 05:59:52\nINFO     evaluating batch 25/25 (samples 289..300/300) 06-13 05:59:55\nINFO     DONE 06-13 05:59:59\n</pre> In\u00a0[3]: Copied! <pre>lt.plotter.heatmap(x=\"ema1_period\", y=\"ema2_period\")\n</pre> lt.plotter.heatmap(x=\"ema1_period\", y=\"ema2_period\") In\u00a0[4]: Copied! <pre>lt.plotter.contour(x=\"ema1_period\", y=\"ema2_period\")\n</pre> lt.plotter.contour(x=\"ema1_period\", y=\"ema2_period\") In\u00a0[5]: Copied! <pre>import plotly.io as pio\n\npio.renderers.default = \"notebook\"\npio.templates.default = \"plotly_dark\"\n</pre> import plotly.io as pio  pio.renderers.default = \"notebook\" pio.templates.default = \"plotly_dark\" In\u00a0[6]: Copied! <pre>import pandas as pd\n\ndf = pd.DataFrame(\n    {\n        \"ema1_period\": [r[0] for r in result[\"all_xs\"]],\n        \"ema2_period\": [r[1] for r in result[\"all_xs\"]],\n        \"equity\": result[\"all_fs\"],\n    }\n)\n\ndf.columns = [\"x\", \"y\", \"z\"]\ndf.x = df.x.astype(int)\ndf.y = df.y.astype(int)\n\ndf\n</pre> import pandas as pd  df = pd.DataFrame(     {         \"ema1_period\": [r[0] for r in result[\"all_xs\"]],         \"ema2_period\": [r[1] for r in result[\"all_xs\"]],         \"equity\": result[\"all_fs\"],     } )  df.columns = [\"x\", \"y\", \"z\"] df.x = df.x.astype(int) df.y = df.y.astype(int)  df Out[6]: x y z 0 10 12 840.88 1 5 35 880.68 2 20 18 1080.18 3 15 41 986.28 4 10 23 863.78 ... ... ... ... 295 8 45 940.58 296 18 47 918.98 297 8 45 940.58 298 19 11 987.48 299 16 32 932.08 <p>300 rows \u00d7 3 columns</p> In\u00a0[7]: Copied! <pre>import plotly.express as px\n\nfig = px.density_contour(\n    df,\n    x=\"x\",\n    y=\"y\",\n    z=\"z\",\n    histfunc=\"max\",\n)\nfig.update_traces(contours_coloring=\"fill\", contours_showlabels=True)\nfig.show()\n</pre> import plotly.express as px  fig = px.density_contour(     df,     x=\"x\",     y=\"y\",     z=\"z\",     histfunc=\"max\", ) fig.update_traces(contours_coloring=\"fill\", contours_showlabels=True) fig.show() In\u00a0[8]: Copied! <pre>import plotly.express as px\n\nfig = px.density_heatmap(\n    df,\n    x=\"x\",\n    y=\"y\",\n    z=\"z\",\n    nbinsx=20,\n    nbinsy=40,\n    histfunc=\"max\",\n    color_continuous_scale=\"Viridis\",\n)\nfig.show()\n</pre> import plotly.express as px  fig = px.density_heatmap(     df,     x=\"x\",     y=\"y\",     z=\"z\",     nbinsx=20,     nbinsy=40,     histfunc=\"max\",     color_continuous_scale=\"Viridis\", ) fig.show() In\u00a0[9]: Copied! <pre>import plotly.graph_objects as go\n\nfig = go.Figure(\n    go.Histogram2d(\n        x=df.x,\n        y=df.y,\n        z=df.z,\n        nbinsx=20,\n        nbinsy=40,\n        histfunc=\"max\",\n    )\n)\n\nfig.show()\n</pre> import plotly.graph_objects as go  fig = go.Figure(     go.Histogram2d(         x=df.x,         y=df.y,         z=df.z,         nbinsx=20,         nbinsy=40,         histfunc=\"max\",     ) )  fig.show()"},{"location":"tutorial/optimize/2.blackbox/#optimize-with-blackbox","title":"Optimize with blackbox\u00b6","text":"<p>Home</p> <p>Install latest blackbox optimize from PyPi</p>"},{"location":"tutorial/optimize/2.blackbox/#sample-strategy","title":"Sample strategy\u00b6","text":""},{"location":"tutorial/optimize/2.blackbox/#run-optimize","title":"Run optimize\u00b6","text":""},{"location":"tutorial/optimize/2.blackbox/#plot","title":"Plot\u00b6","text":""},{"location":"tutorial/optimize/2.blackbox/#plot-plotly","title":"Plot Plotly\u00b6","text":""},{"location":"tutorial/optimize/2.blackbox/#init-plotly-environment","title":"Init Plotly environment\u00b6","text":""},{"location":"tutorial/optimize/2.blackbox/#clean-data","title":"Clean data\u00b6","text":""},{"location":"tutorial/optimize/2.blackbox/#type-1","title":"Type 1\u00b6","text":""},{"location":"tutorial/optimize/2.blackbox/#type-2","title":"Type 2\u00b6","text":""},{"location":"tutorial/optimize/2.blackbox/#type-3","title":"Type 3\u00b6","text":""},{"location":"tutorial/optimize/2.blackbox/#source","title":"Source\u00b6","text":"<pre>--8&lt;-- \"example/optimize/blackbox.py\"\n</pre>"},{"location":"tutorial/optimize/3.hyperactive/","title":"Optimize with Hyperactive","text":"In\u00a0[\u00a0]: Copied! <pre>!pip install hyperactive\n# Re-install pandas 2.2\n!pip install --upgrade pandas\n</pre> !pip install hyperactive # Re-install pandas 2.2 !pip install --upgrade pandas In\u00a0[1]: Copied! <pre># import talib.abstract as ta\n\nfrom lettrade import DataFeed, Strategy, crossover, crossunder\nfrom lettrade.exchange.backtest import ForexBackTestAccount, let_backtest\nfrom lettrade.indicator.vendor.qtpylib import inject_indicators\n\ninject_indicators()\n\n\nclass SmaCross(Strategy):\n    ema1_period = 9\n    ema2_period = 21\n\n    def indicators(self, df: DataFeed):\n        # df[\"ema1\"] = ta.EMA(df, timeperiod=self.ema1_period)\n        # df[\"ema2\"] = ta.EMA(df, timeperiod=self.ema2_period)\n        df[\"ema1\"] = df.close.ema(window=self.ema1_period)\n        df[\"ema2\"] = df.close.ema(window=self.ema2_period)\n\n        df[\"signal_ema_crossover\"] = crossover(df.ema1, df.ema2)\n        df[\"signal_ema_crossunder\"] = crossunder(df.ema1, df.ema2)\n\n    def next(self, df: DataFeed):\n        if len(self.orders) &gt; 0 or len(self.trades) &gt; 0:\n            return\n\n        if df.l.signal_ema_crossover[-1]:\n            price = df.l.close[-1]\n            self.buy(size=0.1, sl=price - 0.001, tp=price + 0.001)\n        elif df.l.signal_ema_crossunder[-1]:\n            price = df.l.close[-1]\n            self.sell(size=0.1, sl=price + 0.001, tp=price - 0.001)\n\n\nlt = let_backtest(\n    strategy=SmaCross,\n    datas=\"example/data/data/EURUSD_5m_0_10000.csv\",\n    account=ForexBackTestAccount,\n    # plotter=None,\n)\n</pre> # import talib.abstract as ta  from lettrade import DataFeed, Strategy, crossover, crossunder from lettrade.exchange.backtest import ForexBackTestAccount, let_backtest from lettrade.indicator.vendor.qtpylib import inject_indicators  inject_indicators()   class SmaCross(Strategy):     ema1_period = 9     ema2_period = 21      def indicators(self, df: DataFeed):         # df[\"ema1\"] = ta.EMA(df, timeperiod=self.ema1_period)         # df[\"ema2\"] = ta.EMA(df, timeperiod=self.ema2_period)         df[\"ema1\"] = df.close.ema(window=self.ema1_period)         df[\"ema2\"] = df.close.ema(window=self.ema2_period)          df[\"signal_ema_crossover\"] = crossover(df.ema1, df.ema2)         df[\"signal_ema_crossunder\"] = crossunder(df.ema1, df.ema2)      def next(self, df: DataFeed):         if len(self.orders) &gt; 0 or len(self.trades) &gt; 0:             return          if df.l.signal_ema_crossover[-1]:             price = df.l.close[-1]             self.buy(size=0.1, sl=price - 0.001, tp=price + 0.001)         elif df.l.signal_ema_crossunder[-1]:             price = df.l.close[-1]             self.sell(size=0.1, sl=price + 0.001, tp=price - 0.001)   lt = let_backtest(     strategy=SmaCross,     datas=\"example/data/data/EURUSD_5m_0_10000.csv\",     account=ForexBackTestAccount,     # plotter=None, ) In\u00a0[2]: Copied! <pre>from hyperactive import Hyperactive\nfrom hyperactive.optimizers import HillClimbingOptimizer\n\n\n# define the model in a function\ndef params_parser(args):\n    return {\n        \"ema1_period\": args[\"ema1_period\"],\n        \"ema2_period\": args[\"ema2_period\"],\n    }\n\n\ndef result_parser(result):\n    return result[\"equity\"]\n\n\nmodel = lt.optimize_model(\n    params_parser=params_parser,\n    result_parser=result_parser,\n)\n\n# search space determines the ranges of parameters you want the optimizer to search through\nsearch_space = {\n    \"ema1_period\": list(range(5, 25, 1)),\n    \"ema2_period\": list(range(10, 50)),\n}\n\noptimizer = HillClimbingOptimizer(epsilon=0.1, distribution=\"laplace\", n_neighbours=4)\n\n# start the optimization run\nhyper = Hyperactive()\nhyper.add_search(model, search_space, optimizer=optimizer, n_iter=1000)\nhyper.run()\n</pre> from hyperactive import Hyperactive from hyperactive.optimizers import HillClimbingOptimizer   # define the model in a function def params_parser(args):     return {         \"ema1_period\": args[\"ema1_period\"],         \"ema2_period\": args[\"ema2_period\"],     }   def result_parser(result):     return result[\"equity\"]   model = lt.optimize_model(     params_parser=params_parser,     result_parser=result_parser, )  # search space determines the ranges of parameters you want the optimizer to search through search_space = {     \"ema1_period\": list(range(5, 25, 1)),     \"ema2_period\": list(range(10, 50)), }  optimizer = HillClimbingOptimizer(epsilon=0.1, distribution=\"laplace\", n_neighbours=4)  # start the optimization run hyper = Hyperactive() hyper.add_search(model, search_space, optimizer=optimizer, n_iter=1000) hyper.run() <pre>[0] _optimize_model (Hill Climbing): 100%|\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500| 1000/1000 [00:01&lt;00:00, 758.47it/s, best_iter=0, best_pos=[9 0], best_score=1183.88] \n</pre> <pre>\n\nResults: '_optimize_model'  \n   Best score: 1183.88  \n   Best parameter set:\n      'ema1_period' : 14.0  \n      'ema2_period' : 10.0  \n   Best iteration: 0  \n \n   Random seed: 1082602856  \n \n   Evaluation time   : 0.4881856441497803 sec    [83.53 %]\n   Optimization time : 0.09622955322265625 sec    [16.47 %]\n   Iteration time    : 0.5844151973724365 sec    [1711.11 iter/sec]\n \n</pre> In\u00a0[3]: Copied! <pre>df = hyper.search_data(model)\ndf\n</pre> df = hyper.search_data(model) df Out[3]: ema1_period ema2_period score 0 9 29 850.48 1 23 27 971.48 2 11 23 851.68 3 11 36 940.68 4 17 23 959.68 ... ... ... ... 995 11 24 831.78 996 8 20 879.48 997 21 11 1096.68 998 8 35 890.58 999 15 14 1007.28 <p>1000 rows \u00d7 3 columns</p> In\u00a0[4]: Copied! <pre>lt.plotter.heatmap()\n</pre> lt.plotter.heatmap() In\u00a0[5]: Copied! <pre>lt.plotter.contour(x=\"ema1_period\", y=\"ema2_period\", z=\"equity\")\n</pre> lt.plotter.contour(x=\"ema1_period\", y=\"ema2_period\", z=\"equity\") In\u00a0[6]: Copied! <pre>import plotly.io as pio\n\npio.renderers.default = \"notebook\"\npio.templates.default = \"plotly_dark\"\n</pre> import plotly.io as pio  pio.renderers.default = \"notebook\" pio.templates.default = \"plotly_dark\" In\u00a0[9]: Copied! <pre>import plotly.express as px\n\nfig = px.density_heatmap(\n    df,\n    x=\"ema1_period\",\n    y=\"ema2_period\",\n    z=\"score\",\n    nbinsx=20,\n    nbinsy=40,\n    histfunc=\"max\",\n    color_continuous_scale=\"Viridis\",\n)\nfig.show()\n</pre> import plotly.express as px  fig = px.density_heatmap(     df,     x=\"ema1_period\",     y=\"ema2_period\",     z=\"score\",     nbinsx=20,     nbinsy=40,     histfunc=\"max\",     color_continuous_scale=\"Viridis\", ) fig.show() In\u00a0[8]: Copied! <pre>import plotly.express as px\n\nfig = px.density_contour(\n    df,\n    x=\"ema1_period\",\n    y=\"ema2_period\",\n    z=\"score\",\n    histfunc=\"max\",\n)\nfig.update_traces(contours_coloring=\"fill\", contours_showlabels=True)\nfig.show()\n</pre> import plotly.express as px  fig = px.density_contour(     df,     x=\"ema1_period\",     y=\"ema2_period\",     z=\"score\",     histfunc=\"max\", ) fig.update_traces(contours_coloring=\"fill\", contours_showlabels=True) fig.show()"},{"location":"tutorial/optimize/3.hyperactive/#optimize-with-hyperactive","title":"Optimize with Hyperactive\u00b6","text":"<p>Home</p>"},{"location":"tutorial/optimize/3.hyperactive/#install","title":"Install\u00b6","text":""},{"location":"tutorial/optimize/3.hyperactive/#sample-strategy","title":"Sample strategy\u00b6","text":""},{"location":"tutorial/optimize/3.hyperactive/#example","title":"Example\u00b6","text":""},{"location":"tutorial/optimize/3.hyperactive/#plot","title":"Plot\u00b6","text":""},{"location":"tutorial/optimize/3.hyperactive/#plot-plotly","title":"Plot plotly\u00b6","text":""},{"location":"tutorial/optimize/3.hyperactive/#init-plotly-environment","title":"Init Plotly environment\u00b6","text":""},{"location":"tutorial/optimize/3.hyperactive/#type-1","title":"Type 1\u00b6","text":""},{"location":"tutorial/optimize/3.hyperactive/#type-2","title":"Type 2\u00b6","text":""},{"location":"tutorial/plot/candlestick/","title":"Plot EMA and Candlestick","text":"In\u00a0[1]: Copied! <pre>import talib.abstract as ta\nimport pandas_ta as pdta\n\nfrom lettrade import DataFeed, Strategy, crossover, crossunder\nfrom lettrade.exchange.backtest import ForexBackTestAccount, let_backtest\n\n\nclass SmaCross(Strategy):\n    ema1_period = 9\n    ema2_period = 21\n\n    def indicators(self, df: DataFeed):\n        df[\"ema1\"] = ta.EMA(df, timeperiod=self.ema1_period)\n        df[\"ema2\"] = ta.EMA(df, timeperiod=self.ema2_period)\n\n        df[\"signal_ema_crossover\"] = crossover(df.ema1, df.ema2)\n        df[\"signal_ema_crossunder\"] = crossunder(df.ema1, df.ema2)\n\n        df[\"cdl_doji\"] = pdta.cdl_doji(df.open, df.high, df.low, df.close)\n\n    def next(self, df: DataFeed):\n        if len(self.orders) &gt; 0 or len(self.trades) &gt; 0:\n            return\n\n        if df.l.signal_ema_crossover[-1]:\n            price = df.l.close[-1]\n            self.buy(size=0.1, sl=price - 0.001, tp=price + 0.001)\n        elif df.l.signal_ema_crossunder[-1]:\n            price = df.l.close[-1]\n            self.sell(size=0.1, sl=price + 0.001, tp=price - 0.001)\n\n    def plot(self, df: DataFeed) -&gt; dict:\n        from lettrade.plot import PlotColor\n        from lettrade.plot.plotly import (\n            plot_candle_highlight,\n            plot_line,\n            plot_merge,\n        )\n\n        plot_ema1 = plot_line(df[\"ema1\"], color=\"yellow\")\n        plot_ema2 = plot_line(df[\"ema2\"], color=\"green\")\n        plot_cdl_doji = plot_candle_highlight(\n            df[df[\"cdl_doji\"] != 0],\n            name=f\"Doji {df.name}\",\n            width=3,\n        )\n        return plot_merge(\n            plot_ema1,\n            plot_ema2,\n            plot_cdl_doji,\n        )\n\n\nlt = let_backtest(\n    strategy=SmaCross,\n    datas=\"example/data/data/EURUSD_5m_0_1000.csv\",\n    account=ForexBackTestAccount,\n    # plotter=None,\n)\n</pre> import talib.abstract as ta import pandas_ta as pdta  from lettrade import DataFeed, Strategy, crossover, crossunder from lettrade.exchange.backtest import ForexBackTestAccount, let_backtest   class SmaCross(Strategy):     ema1_period = 9     ema2_period = 21      def indicators(self, df: DataFeed):         df[\"ema1\"] = ta.EMA(df, timeperiod=self.ema1_period)         df[\"ema2\"] = ta.EMA(df, timeperiod=self.ema2_period)          df[\"signal_ema_crossover\"] = crossover(df.ema1, df.ema2)         df[\"signal_ema_crossunder\"] = crossunder(df.ema1, df.ema2)          df[\"cdl_doji\"] = pdta.cdl_doji(df.open, df.high, df.low, df.close)      def next(self, df: DataFeed):         if len(self.orders) &gt; 0 or len(self.trades) &gt; 0:             return          if df.l.signal_ema_crossover[-1]:             price = df.l.close[-1]             self.buy(size=0.1, sl=price - 0.001, tp=price + 0.001)         elif df.l.signal_ema_crossunder[-1]:             price = df.l.close[-1]             self.sell(size=0.1, sl=price + 0.001, tp=price - 0.001)      def plot(self, df: DataFeed) -&gt; dict:         from lettrade.plot import PlotColor         from lettrade.plot.plotly import (             plot_candle_highlight,             plot_line,             plot_merge,         )          plot_ema1 = plot_line(df[\"ema1\"], color=\"yellow\")         plot_ema2 = plot_line(df[\"ema2\"], color=\"green\")         plot_cdl_doji = plot_candle_highlight(             df[df[\"cdl_doji\"] != 0],             name=f\"Doji {df.name}\",             width=3,         )         return plot_merge(             plot_ema1,             plot_ema2,             plot_cdl_doji,         )   lt = let_backtest(     strategy=SmaCross,     datas=\"example/data/data/EURUSD_5m_0_1000.csv\",     account=ForexBackTestAccount,     # plotter=None, ) In\u00a0[2]: Copied! <pre>lt.run()\n</pre> lt.run() <pre># Strategy                &lt;class '__main__.SmaCross'&gt;\nStart                       2024-05-13 21:15:00+00:00\nEnd                         2024-05-17 08:30:00+00:00\nDuration                              3 days 11:15:00\nStart Balance                                    1000\nEquity [$]                                     975.88\nPL [$]                                         -24.12\nPL [%]                                          -2.41\nBuy &amp; Hold PL [%]                                 2.0\nMax. Drawdown [%]                              -33.08\nAvg. Drawdown [%]                               -5.58\nMax. Drawdown Duration              688 days 00:00:00\nAvg. Drawdown Duration               41 days 00:00:00\n                                                     \n# Trades                                           15\nWin Rate [%]                                     40.0\nFee [$]                                         -0.58\nBest Trade [%]                                  10.06\nWorst Trade [%]                                -10.14\nProfit Factor                                    2.13\nSQN                                              1.78\n</pre> In\u00a0[3]: Copied! <pre>lt.plot()\n</pre> lt.plot()"},{"location":"tutorial/plot/candlestick/#plot-ema-and-candlestick","title":"Plot EMA and Candlestick\u00b6","text":""},{"location":"tutorial/plot/candlestick/#strategy","title":"Strategy\u00b6","text":""},{"location":"tutorial/plot/candlestick/#run","title":"Run\u00b6","text":""},{"location":"tutorial/plot/candlestick/#plot","title":"Plot\u00b6","text":""}]}