{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"LetTrade","text":"<p>A lightweight trading framework compatible with Stock, Forex, Crypto... markets</p> <p>Inspired by <code>freqtrade</code>, <code>backtrader</code>, <code>backtesting.py</code>...</p> <p>Let make algo trading simple :)</p> <p>Find more at Documentation</p>"},{"location":"#installation","title":"Installation","text":"<p>Stable version</p> <pre><code>pip install lettrade\n</code></pre> <p>Developing version</p> <pre><code>pip install git+https://git@github.com/AwesomeTrading/lettrade.git@main\n</code></pre>"},{"location":"#example","title":"Example","text":"<pre><code>import talib.abstract as ta\n\nfrom lettrade.all import DataFeed, Strategy, let_backtest, crossover, crossunder\n\n\nclass SmaCross(Strategy):\n    ema1_period = 9\n    ema2_period = 21\n\n    def indicators(self, df: DataFeed):\n        df[\"ema1\"] = ta.EMA(df, timeperiod=self.ema1_period)\n        df[\"ema2\"] = ta.EMA(df, timeperiod=self.ema2_period)\n\n        df[\"crossover\"] = crossover(df.ema1, df.ema2)\n        df[\"crossunder\"] = crossunder(df.ema1, df.ema2)\n\n    def next(self, df: DataFeed):\n        if df.crossover[-1]:\n            self.buy(0.1)\n        elif df.crossunder[-1]:\n            self.sell(0.1)\n\nlt = let_backtest(\n    strategy=SmaCross,\n    datas=\"example/data/data/EURUSD_5m_0_1000.csv\",\n)\n\nlt.run()\nlt.plot()\n</code></pre> <pre><code># Strategy                       &lt;class 'SmaCross'&gt;\nStart                     2024-05-13 21:15:00+00:00\nEnd                       2024-05-17 08:30:00+00:00\nDuration                            3 days 11:15:00\nStart Balance [$]                             10000\nEquity [$]                                  10000.0\nPL [$]                                          0.0\nPL [%]                                          0.0\nBuy &amp; Hold PL [%]                               2.0\nMax. Drawdown [%]                            -33.08\nAvg. Drawdown [%]                             -5.58\nMax. Drawdown Duration            688 days 00:00:00\nAvg. Drawdown Duration             41 days 00:00:00\n\n# Trades                                         34\nBest Trade [%]                               0.0007\nWorst Trade [%]                           -0.000732\nProfit Factor                                  2.13\nSQN                                            1.78\n</code></pre>"},{"location":"#start-a-strategy","title":"Start a strategy","text":"<p>All example in <code>example/</code> directory</p>"},{"location":"#download-data","title":"Download data","text":"<pre><code>python -m example.data.yfinance\n</code></pre>"},{"location":"#backtest-strategy","title":"Backtest strategy","text":"<pre><code>python -m example.strategy.backtest_sma_cross\n</code></pre> <pre><code>2024-05-25 08:47:09,147   INFO     lettrade.bot         __init__(): New bot: None-22337-example/data/data/EURUSD_1h.csv\n</code></pre>"},{"location":"#live-trading","title":"Live Trading","text":""},{"location":"#official","title":"Official","text":"<ul> <li><code>MetaTrader</code>: Support MetaTrader 5 Terminal trading</li> <li><code>CCXT</code>: Support most of cryptocurrency exchange from CCXT library</li> </ul>"},{"location":"#development","title":"Development","text":"<p>Set up conda environment</p> <pre><code>conda create -y -n LetTrade python=3.10\nconda activate LetTrade\nconda install -c conda-forge ta-lib\npip install -r requirements-dev.txt\n</code></pre>"},{"location":"dev/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p>"},{"location":"dev/#development","title":"Development","text":"<p>Guide for developer to install <code>lettrade</code></p>"},{"location":"dev/#environment-setup","title":"Environment setup","text":"<p>Set up conda environment</p> <pre><code>conda create -y -n LetTrade python=3.10\nconda activate LetTrade\nconda install -c conda-forge ta-lib\npip install -r requirements-dev.txt\n</code></pre>"},{"location":"dev/#document","title":"Document","text":"<p>Building <code>lettrade</code> document guide</p>"},{"location":"dev/#dependencies","title":"Dependencies","text":"<p>Install <code>lettrade</code> as module</p> <pre><code>pip install .\n</code></pre> <p>Install python document requirements</p> <pre><code>pip install -r docs/requirements-docs.txt\n</code></pre>"},{"location":"dev/#view-document","title":"View document","text":"<p>Start mkdocs local server</p> <pre><code>mkdocs serve\n</code></pre>"},{"location":"talib/","title":"TA Library","text":""},{"location":"talib/#ta-lib","title":"TA-Lib","text":"<p>Home | Indicators</p>"},{"location":"talib/#build-from-source","title":"Build from source","text":"<p>Download ta-lib from github ta-lib-0.4.0-src.tar.gz</p> <pre><code>tar zxvf ta-lib-0.4.0-src.tar.gz\ncd ta-lib\n./configure --prefix=/usr\nmake\nsudo make install\n</code></pre> <p>Full install tutorial from TA-Lib</p>"},{"location":"talib/#conda-forge","title":"Conda-Forge","text":"<pre><code>conda install -c conda-forge ta-lib\n</code></pre>"},{"location":"talib/#python-library","title":"Python library","text":"<pre><code>pip install TA-Lib\n</code></pre>"},{"location":"talib/#pandas-ta","title":"Pandas-TA","text":"<p>Home | Indicators</p> <pre><code>pip install pandas_ta\n</code></pre>"},{"location":"install/","title":"LetTrade install","text":"<p>Guide to quick install <code>lettrade</code></p>"},{"location":"install/#installation","title":"Installation","text":"<p>Stable version</p> <pre><code>pip install lettrade\n</code></pre> <p>Developing version</p> <pre><code>pip install git+https://git@github.com/AwesomeTrading/lettrade.git@main\n</code></pre>"},{"location":"install/metatrader/","title":"MetaTrader 5 Install","text":"<p><code>MetaTrader 5</code> is exchange server of module MetaTrader</p>"},{"location":"install/metatrader/#ubuntu","title":"Ubuntu","text":""},{"location":"install/metatrader/#wine","title":"Wine","text":"<pre><code>wget https://download.mql5.com/cdn/web/metaquotes.software.corp/mt5/mt5ubuntu.sh ; chmod +x mt5ubuntu.sh ; ./mt5ubuntu.sh\n</code></pre>"},{"location":"install/metatrader/#python","title":"Python","text":"<pre><code>wget https://www.python.org/ftp/python/3.10.9/python-3.10.9.exe\n\nexport WINEPREFIX=$HOME/.mt5\nwine python-3.10.9.exe\n</code></pre>"},{"location":"install/metatrader/#python-requirements","title":"Python requirements","text":"<pre><code>export WINEPREFIX=$HOME/.mt5\n\ncd $HOME/.mt5/dosdevices/c:/users/$USER/AppData/Local/Programs/Python/Python310-32/\n\nwine python.exe -m pip install --upgrade pip\nwine python.exe -m pip install MetaTrader5\nwine python.exe -m pip install https://github.com/AwesomeTrading/mt5linux/archive/master.zip\n</code></pre>"},{"location":"install/metatrader/#start-server","title":"Start Server","text":"<pre><code>export WINEPREFIX=$HOME/.mt5\n\npython -m mt5linux \"$HOME/.mt5/dosdevices/c:/users/$USER/AppData/Local/Programs/Python/Python310-32/python.exe\"\n</code></pre>"},{"location":"install/metatrader/#metatrader-terminal","title":"MetaTrader Terminal","text":""},{"location":"install/metatrader/#load-broker-information","title":"Load broker information","text":"<p>Load broker information before start by steps:</p> <ul> <li><code>File</code> menu</li> <li><code>Open an Account</code> action</li> <li>Search your broker (ex: <code>Tickmill</code>, <code>Roboforex</code>...)</li> <li><code>Enter</code> to load</li> <li><code>Cancel</code> (Done)</li> </ul>"},{"location":"install/metatrader/#enable-automatic-algo-trading","title":"Enable Automatic Algo Trading","text":"<ul> <li><code>Tools</code> menu</li> <li><code>Options</code> menu</li> <li><code>Expert Advisors</code> tab</li> <li><code>Allow Auto Trading</code> checkbox</li> <li>Uncheck <code>Disable automated trading when switching accounts</code> and <code>Disable automated trading when switching profiles</code></li> </ul>"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li> account<ul> <li> account</li> </ul> </li> <li> all</li> <li> bot</li> <li> brain<ul> <li> brain</li> </ul> </li> <li> calendar<ul> <li> calendar</li> </ul> </li> <li> commander<ul> <li> commander</li> <li> telegram</li> </ul> </li> <li> data<ul> <li> csv</li> <li> data</li> <li> exporter<ul> <li> csv</li> </ul> </li> <li> feeder</li> <li> replay</li> </ul> </li> <li> exchange<ul> <li> backtest<ul> <li> account</li> <li> backtest</li> <li> commander</li> <li> data<ul> <li> data</li> <li> yfinance</li> </ul> </li> <li> exchange</li> <li> feeder</li> <li> trade</li> </ul> </li> <li> base</li> <li> ccxt<ul> <li> ccxt</li> </ul> </li> <li> exchange</li> <li> execute</li> <li> metatrader<ul> <li> account</li> <li> api</li> <li> data</li> <li> exchange</li> <li> feeder</li> <li> metatrader</li> <li> trade</li> </ul> </li> <li> order</li> <li> position</li> <li> trade</li> </ul> </li> <li> indicator<ul> <li> function</li> <li> indicator</li> </ul> </li> <li> lettrade</li> <li> plot<ul> <li> plot</li> <li> plotly<ul> <li> plotly</li> </ul> </li> </ul> </li> <li> stats<ul> <li> stats</li> </ul> </li> <li> strategy<ul> <li> strategy</li> </ul> </li> <li> utils<ul> <li> docs</li> </ul> </li> </ul>"},{"location":"reference/all/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> all","text":""},{"location":"reference/all/#lettrade.all","title":"all","text":"<p>Import everything in one. Import some unnecessary but convenient for everyone</p>"},{"location":"reference/bot/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> bot","text":""},{"location":"reference/bot/#lettrade.bot","title":"bot","text":""},{"location":"reference/bot/#lettrade.bot.LetTradeBot","title":"LetTradeBot","text":"<pre><code>LetTradeBot(\n    strategy: Type[Strategy],\n    datas: DataFeed | list[DataFeed] | str | list[str],\n    feeder: Type[DataFeeder],\n    exchange: Type[Exchange],\n    account: Type[Account],\n    commander: Optional[Type[Commander]] = None,\n    plotter: Optional[Type[Plotter]] = None,\n    stats: Optional[Type[Statistic]] = None,\n    name: Optional[str] = None,\n    **kwargs\n)\n</code></pre> Source code in <code>lettrade/bot.py</code> <pre><code>def __init__(\n    self,\n    strategy: Type[Strategy],\n    datas: DataFeed | list[DataFeed] | str | list[str],\n    feeder: Type[DataFeeder],\n    exchange: Type[Exchange],\n    account: Type[Account],\n    commander: Optional[Type[Commander]] = None,\n    plotter: Optional[Type[\"Plotter\"]] = None,\n    stats: Optional[Type[\"Statistic\"]] = None,\n    name: Optional[str] = None,\n    **kwargs,\n) -&gt; None:\n    logger.info(\"New bot: %s\", name)\n\n    self._strategy_cls = strategy\n    self._feeder_cls = feeder\n    self._exchange_cls = exchange\n    self._account_cls = account\n    self._commander_cls = commander\n    self._plotter_cls = plotter\n    self._stats_cls = stats\n\n    self._name = name\n    self._kwargs = kwargs\n\n    # DataFeeds\n    self.datas = datas\n    self.data = self.datas[0]\n\n    self._is_multiprocess = None\n</code></pre>"},{"location":"reference/bot/#lettrade.bot.LetTradeBot.account","title":"account  <code>instance-attribute</code>","text":"<pre><code>account: Account\n</code></pre> <p>Trading account handler</p>"},{"location":"reference/bot/#lettrade.bot.LetTradeBot.brain","title":"brain  <code>instance-attribute</code>","text":"<pre><code>brain: Brain\n</code></pre> <p>Brain of bot</p>"},{"location":"reference/bot/#lettrade.bot.LetTradeBot.commander","title":"commander  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>commander: Commander = None\n</code></pre> <p>Control the bot</p>"},{"location":"reference/bot/#lettrade.bot.LetTradeBot.data","title":"data  <code>instance-attribute</code>","text":"<pre><code>data: DataFeed = datas[0]\n</code></pre> <p>Main DataFeed for bot</p>"},{"location":"reference/bot/#lettrade.bot.LetTradeBot.datas","title":"datas  <code>instance-attribute</code>","text":"<pre><code>datas: list[DataFeed] = datas\n</code></pre> <p>DataFeed list for bot</p>"},{"location":"reference/bot/#lettrade.bot.LetTradeBot.exchange","title":"exchange  <code>instance-attribute</code>","text":"<pre><code>exchange: Exchange\n</code></pre> <p>Trading exchange and events</p>"},{"location":"reference/bot/#lettrade.bot.LetTradeBot.feeder","title":"feeder  <code>instance-attribute</code>","text":"<pre><code>feeder: DataFeeder\n</code></pre> <p>DataFeeder help to handle <code>datas</code></p>"},{"location":"reference/bot/#lettrade.bot.LetTradeBot.plotter","title":"plotter  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>plotter: Plotter = None\n</code></pre> <p>Plot graphic results</p>"},{"location":"reference/bot/#lettrade.bot.LetTradeBot.strategy","title":"strategy  <code>instance-attribute</code>","text":"<pre><code>strategy: Strategy\n</code></pre> <p>Strategy</p>"},{"location":"reference/bot/#lettrade.bot.LetTradeBot.plot","title":"plot","text":"<pre><code>plot(*args, **kwargs)\n</code></pre> <p>Plot strategy result</p> Source code in <code>lettrade/bot.py</code> <pre><code>def plot(self, *args, **kwargs):\n    \"\"\"Plot strategy result\"\"\"\n\n    # if main process of multiprocessing\n    if self._is_multiprocess == \"main\":\n        logger.warning(\"Plot in multiprocessing is not implement yet\")\n        return\n\n    if __debug__:\n        from .utils.docs import is_docs_session\n\n        if is_docs_session():\n            return\n\n    if self.plotter is None:\n        if self._plotter_cls is None:\n            raise RuntimeError(\"Plotter class is None\")\n\n        self.plotter = self._plotter_cls(\n            feeder=self.feeder,\n            exchange=self.exchange,\n            account=self.account,\n            strategy=self.strategy,\n            **self._kwargs.get(\"plotter_kwargs\", {}),\n        )\n\n    self.plotter.plot(*args, **kwargs)\n</code></pre>"},{"location":"reference/bot/#lettrade.bot.LetTradeBot.stop","title":"stop","text":"<pre><code>stop()\n</code></pre> <p>Stop strategy</p> Source code in <code>lettrade/bot.py</code> <pre><code>def stop(self):\n    \"\"\"Stop strategy\"\"\"\n    self.brain.stop()\n    if self.plotter is not None:\n        self.plotter.stop()\n</code></pre>"},{"location":"reference/lettrade/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> lettrade","text":""},{"location":"reference/lettrade/#lettrade.lettrade","title":"lettrade","text":""},{"location":"reference/lettrade/#lettrade.lettrade.LetTrade","title":"LetTrade","text":"<pre><code>LetTrade(\n    strategy: Type[Strategy],\n    datas: DataFeed | list[DataFeed] | str | list[str],\n    feeder: Type[DataFeeder],\n    exchange: Type[Exchange],\n    account: Type[Account],\n    commander: Optional[Type[Commander]] = None,\n    plotter: Optional[Type[Plotter]] = None,\n    stats: Optional[Type[Statistic]] = None,\n    name: Optional[str] = None,\n    bot: Optional[Type[LetTradeBot]] = LetTradeBot,\n    **kwargs\n)\n</code></pre> <p>Help to load and connect module</p> Source code in <code>lettrade/lettrade.py</code> <pre><code>def __init__(\n    self,\n    strategy: Type[Strategy],\n    datas: DataFeed | list[DataFeed] | str | list[str],\n    feeder: Type[DataFeeder],\n    exchange: Type[Exchange],\n    account: Type[Account],\n    commander: Optional[Type[Commander]] = None,\n    plotter: Optional[Type[\"Plotter\"]] = None,\n    stats: Optional[Type[\"Statistic\"]] = None,\n    name: Optional[str] = None,\n    bot: Optional[Type[LetTradeBot]] = LetTradeBot,\n    **kwargs,\n) -&gt; None:\n    self._strategy_cls = strategy\n    self._feeder_cls = feeder\n    self._exchange_cls = exchange\n    self._account_cls = account\n    self._commander_cls = commander\n    self._plotter_cls = plotter\n    self._stats_cls = stats\n    self._bot_cls = bot\n    self._name = name\n    self._kwargs = kwargs\n\n    # DataFeeds\n    self.datas = self._init_datafeeds(datas)\n    self.data = self.datas[0]\n</code></pre>"},{"location":"reference/lettrade/#lettrade.lettrade.LetTrade.data","title":"data  <code>instance-attribute</code>","text":"<pre><code>data: DataFeed = datas[0]\n</code></pre> <p>Main DataFeed for bot</p>"},{"location":"reference/lettrade/#lettrade.lettrade.LetTrade.datas","title":"datas  <code>instance-attribute</code>","text":"<pre><code>datas: list[DataFeed] = _init_datafeeds(datas)\n</code></pre> <p>DataFeed list for bot</p>"},{"location":"reference/lettrade/#lettrade.lettrade.LetTrade.plot","title":"plot","text":"<pre><code>plot(*args, **kwargs)\n</code></pre> <p>Plot strategy result</p> Source code in <code>lettrade/lettrade.py</code> <pre><code>def plot(self, *args, **kwargs):\n    \"\"\"Plot strategy result\"\"\"\n    if self._plotter is not None:\n        return self._plotter.plot(*args, **kwargs)\n    if self._bot is not None:\n        return self._bot.plot(*args, **kwargs)\n</code></pre>"},{"location":"reference/lettrade/#lettrade.lettrade.LetTrade.run","title":"run","text":"<pre><code>run(worker: Optional[int] = None, *args, **kwargs)\n</code></pre> <p>Run strategy in single or multiple processing</p> <p>Parameters:</p> <ul> <li> <code>worker</code>               (<code>Optional[int]</code>, default:                   <code>None</code> )           \u2013            <p>Number of processing. Defaults to None.</p> </li> </ul> Source code in <code>lettrade/lettrade.py</code> <pre><code>def run(self, worker: Optional[int] = None, *args, **kwargs):\n    \"\"\"Run strategy in single or multiple processing\n\n    Args:\n        worker (Optional[int], optional): Number of processing. Defaults to None.\n    \"\"\"\n    if worker or isinstance(self.data, list):\n        if not isinstance(self.data, list):\n            self.data = self.datas\n            self.datas = [self.data]\n\n        if not worker:\n            worker = len(self.datas)\n        elif worker &gt; len(self.datas):\n            logger.warning(\n                \"Worker size %s is more then datas size %s\",\n                worker,\n                len(self.datas),\n            )\n            worker = len(self.datas)\n\n        self._multiprocess()\n        with ProcessPoolExecutor(max_workers=worker) as executor:\n            futures = [\n                executor.submit(\n                    self._run_process,\n                    datas=datas,\n                    index=i,\n                    multiprocess=\"worker\",\n                )\n                for i, datas in enumerate(self.datas)\n            ]\n            for future in futures:\n                result = future.result()\n                print(result)\n    else:\n        return self._run_process(*args, **kwargs)\n</code></pre>"},{"location":"reference/lettrade/#lettrade.lettrade.LetTrade.stop","title":"stop","text":"<pre><code>stop()\n</code></pre> <p>Stop strategy</p> Source code in <code>lettrade/lettrade.py</code> <pre><code>def stop(self):\n    \"\"\"Stop strategy\"\"\"\n    if self._bot is not None:\n        return self._bot.stop()\n</code></pre>"},{"location":"reference/account/","title":"Index","text":""},{"location":"reference/account/#lettrade.account","title":"account","text":""},{"location":"reference/account/account/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> account","text":""},{"location":"reference/account/account/#lettrade.account.account","title":"account","text":""},{"location":"reference/account/account/#lettrade.account.account.Account","title":"Account","text":"<pre><code>Account(\n    risk: Optional[float] = 0.02,\n    cash: Optional[float] = 10000,\n    commission: Optional[float] = 0.0,\n    margin: Optional[float] = None,\n    leverage: Optional[float] = 1.0,\n    **kwargs\n)\n</code></pre> <p>Manage account balance, leverage, commission. Risk calculate and control</p> <p>Parameters:</p> <ul> <li> <code>risk</code>               (<code>Optional[float]</code>, default:                   <code>0.02</code> )           \u2013            <p>description. Defaults to 0.02.</p> </li> <li> <code>cash</code>               (<code>Optional[float]</code>, default:                   <code>10000</code> )           \u2013            <p>description. Defaults to 10_000.</p> </li> <li> <code>commission</code>               (<code>Optional[float]</code>, default:                   <code>0.0</code> )           \u2013            <p>description. Defaults to 0.0.</p> </li> <li> <code>margin</code>               (<code>Optional[float]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>leverage</code>               (<code>Optional[float]</code>, default:                   <code>1.0</code> )           \u2013            <p>description. Defaults to 1.0.</p> </li> </ul> Source code in <code>lettrade/account/account.py</code> <pre><code>def __init__(\n    self,\n    risk: Optional[float] = 0.02,\n    cash: Optional[float] = 10_000,\n    commission: Optional[float] = 0.0,\n    margin: Optional[float] = None,\n    leverage: Optional[float] = 1.0,\n    **kwargs,\n) -&gt; None:\n    \"\"\"_summary_\n\n    Args:\n        risk (Optional[float], optional): _description_. Defaults to 0.02.\n        cash (Optional[float], optional): _description_. Defaults to 10_000.\n        commission (Optional[float], optional): _description_. Defaults to 0.0.\n        margin (Optional[float], optional): _description_. Defaults to None.\n        leverage (Optional[float], optional): _description_. Defaults to 1.0.\n    \"\"\"\n    self._risk: risk\n    self._cash: float = cash\n    self._commission: float = commission\n    self._margin = margin\n    self._leverage: float = leverage\n\n    self._equities: dict[str, object] = dict()\n    self._do_snapshot_equity = True  # Snapshot balance\n</code></pre>"},{"location":"reference/account/account/#lettrade.account.account.Account.pl","title":"pl","text":"<pre><code>pl(size, entry_price: float, exit_price=None)\n</code></pre> <p>Estimate temporary profit and loss</p> Source code in <code>lettrade/account/account.py</code> <pre><code>def pl(self, size, entry_price: float, exit_price=None):\n    \"\"\"Estimate temporary profit and loss\"\"\"\n    if exit_price is None:\n        exit_price = self._exchange.data.open[0]\n\n    return size * (exit_price - entry_price)\n</code></pre>"},{"location":"reference/account/account/#lettrade.account.account.Account.risk","title":"risk","text":"<pre><code>risk(size, **kwargs)\n</code></pre> <p>Risk calculation</p> Source code in <code>lettrade/account/account.py</code> <pre><code>def risk(self, size, **kwargs):\n    \"\"\"\n    Risk calculation\n    \"\"\"\n    if size is None:\n        return self._risk\n    return size\n</code></pre>"},{"location":"reference/brain/","title":"Index","text":""},{"location":"reference/brain/#lettrade.brain","title":"brain","text":""},{"location":"reference/brain/brain/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> brain","text":""},{"location":"reference/brain/brain/#lettrade.brain.brain","title":"brain","text":""},{"location":"reference/brain/brain/#lettrade.brain.brain.Brain","title":"Brain","text":"<pre><code>Brain(\n    strategy: Strategy,\n    exchange: Exchange,\n    feeder: DataFeeder,\n    commander: Commander,\n    *args,\n    **kwargs\n)\n</code></pre> <p>Brain of bot</p> <p>Parameters:</p> <ul> <li> <code>strategy</code>               (<code>Strategy</code>)           \u2013            <p>description</p> </li> <li> <code>exchange</code>               (<code>Exchange</code>)           \u2013            <p>description</p> </li> <li> <code>feeder</code>               (<code>DataFeeder</code>)           \u2013            <p>description</p> </li> <li> <code>commander</code>               (<code>Commander</code>)           \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/brain/brain.py</code> <pre><code>def __init__(\n    self,\n    strategy: Strategy,\n    exchange: Exchange,\n    feeder: DataFeeder,\n    commander: Commander,\n    *args,\n    **kwargs,\n) -&gt; None:\n    \"\"\"_summary_\n\n    Args:\n        strategy (Strategy): _description_\n        exchange (Exchange): _description_\n        feeder (DataFeeder): _description_\n        commander (Commander): _description_\n    \"\"\"\n    self.strategy = strategy\n    self.exchange = exchange\n    self.feeder = feeder\n    self.commander = commander\n\n    self.datas = self.feeder.datas\n    self.data = self.feeder.data\n</code></pre>"},{"location":"reference/brain/brain/#lettrade.brain.brain.Brain.on_execute","title":"on_execute","text":"<pre><code>on_execute(execute: Execute)\n</code></pre> <p>Receive new <code>Execution</code> event and send to <code>Strategy</code></p> Source code in <code>lettrade/brain/brain.py</code> <pre><code>def on_execute(self, execute: Execute):\n    \"\"\"Receive new `Execution` event and send to `Strategy`\"\"\"\n    self.on_transaction(execute)\n    self.strategy.on_execute(execute)\n</code></pre>"},{"location":"reference/brain/brain/#lettrade.brain.brain.Brain.on_notify","title":"on_notify","text":"<pre><code>on_notify(*args, **kwargs)\n</code></pre> <p>Receive new notify and send to Strategy</p> Source code in <code>lettrade/brain/brain.py</code> <pre><code>def on_notify(self, *args, **kwargs):\n    \"\"\"Receive new notify and send to Strategy\"\"\"\n    self.strategy.on_notify(*args, **kwargs)\n</code></pre>"},{"location":"reference/brain/brain/#lettrade.brain.brain.Brain.on_order","title":"on_order","text":"<pre><code>on_order(order: Order)\n</code></pre> <p>Receive new <code>Order</code> event and send to <code>Strategy</code></p> Source code in <code>lettrade/brain/brain.py</code> <pre><code>def on_order(self, order: Order):\n    \"\"\"Receive new `Order` event and send to `Strategy`\"\"\"\n    self.on_transaction(order)\n    self.strategy.on_order(order)\n</code></pre>"},{"location":"reference/brain/brain/#lettrade.brain.brain.Brain.on_position","title":"on_position","text":"<pre><code>on_position(position: Position)\n</code></pre> <p>Receive new <code>Position</code> event and send to <code>Strategy</code></p> Source code in <code>lettrade/brain/brain.py</code> <pre><code>def on_position(self, position: Position):\n    \"\"\"Receive new `Position` event and send to `Strategy`\"\"\"\n    self.on_transaction(position)\n    self.strategy.on_position(position)\n</code></pre>"},{"location":"reference/brain/brain/#lettrade.brain.brain.Brain.on_trade","title":"on_trade","text":"<pre><code>on_trade(trade: Trade)\n</code></pre> <p>Receive new <code>Trade</code> event and send to <code>Strategy</code></p> Source code in <code>lettrade/brain/brain.py</code> <pre><code>def on_trade(self, trade: Trade):\n    \"\"\"Receive new `Trade` event and send to `Strategy`\"\"\"\n    self.on_transaction(trade)\n    self.strategy.on_trade(trade)\n</code></pre>"},{"location":"reference/brain/brain/#lettrade.brain.brain.Brain.on_transaction","title":"on_transaction","text":"<pre><code>on_transaction(transaction)\n</code></pre> <p>Receive new transaction event and send to <code>Strategy</code></p> Source code in <code>lettrade/brain/brain.py</code> <pre><code>def on_transaction(self, transaction):\n    \"\"\"Receive new transaction event and send to `Strategy`\"\"\"\n    if self.commander is not None:\n        # TODO: send message to commander when new transaction\n        self.commander.send_message(f\"New transaction: {str(transaction)}\")\n\n    self.strategy.on_transaction(transaction)\n</code></pre>"},{"location":"reference/brain/brain/#lettrade.brain.brain.Brain.run","title":"run","text":"<pre><code>run()\n</code></pre> <p>Run the trading bot</p> Source code in <code>lettrade/brain/brain.py</code> <pre><code>def run(self):\n    \"\"\"Run the trading bot\"\"\"\n    self.data._set_main()\n\n    self.strategy.init()\n\n    self.feeder.start()\n    self.exchange.start()\n    self.strategy.indicators(self.data)\n    self.strategy.start(self.data)\n\n    while self.feeder.alive():\n        # Load feeder next data\n        self.feeder.next()\n        self.exchange.next()\n\n        # Realtime continous update data, then rebuild indicator data\n        if self.feeder.is_continous:\n            self.strategy.indicators(self.data)\n\n        self.strategy.next(self.data)\n\n    self.strategy.end(self.data)\n</code></pre>"},{"location":"reference/brain/brain/#lettrade.brain.brain.Brain.stop","title":"stop","text":"<pre><code>stop()\n</code></pre> <p>Stop the trading bot</p> Source code in <code>lettrade/brain/brain.py</code> <pre><code>def stop(self):\n    \"\"\"Stop the trading bot\"\"\"\n    self.feeder.stop()\n    self.exchange.stop()\n</code></pre>"},{"location":"reference/calendar/","title":"Index","text":""},{"location":"reference/calendar/#lettrade.calendar","title":"calendar","text":""},{"location":"reference/calendar/calendar/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> calendar","text":""},{"location":"reference/calendar/calendar/#lettrade.calendar.calendar","title":"calendar","text":""},{"location":"reference/commander/","title":"Index","text":""},{"location":"reference/commander/#lettrade.commander","title":"commander","text":""},{"location":"reference/commander/commander/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> commander","text":""},{"location":"reference/commander/commander/#lettrade.commander.commander","title":"commander","text":""},{"location":"reference/commander/commander/#lettrade.commander.commander.Commander","title":"Commander","text":"<pre><code>Commander()\n</code></pre> <p>               Bases: <code>ABC</code></p> <p>Abstract class for strategy commander. Help to manage and report strategy real-time</p> Source code in <code>lettrade/commander/commander.py</code> <pre><code>def __init__(self) -&gt; None:\n    super().__init__()\n</code></pre>"},{"location":"reference/commander/commander/#lettrade.commander.commander.Commander.init","title":"init","text":"<pre><code>init(\n    lettrade: LetTrade,\n    brain: Brain,\n    exchange: Exchange,\n    strategy: Strategy,\n)\n</code></pre> <p>Init commander dependencies</p> <p>Parameters:</p> <ul> <li> <code>lettrade</code>               (<code>LetTrade</code>)           \u2013            <p>LetTrade object</p> </li> <li> <code>brain</code>               (<code>Brain</code>)           \u2013            <p>Brain of bot</p> </li> <li> <code>exchange</code>               (<code>Exchange</code>)           \u2013            <p>Manage bot trading</p> </li> <li> <code>strategy</code>               (<code>Strategy</code>)           \u2013            <p>Strategy of bot</p> </li> </ul> Source code in <code>lettrade/commander/commander.py</code> <pre><code>def init(\n    self,\n    lettrade: \"LetTrade\",\n    brain: \"Brain\",\n    exchange: \"Exchange\",\n    strategy: \"Strategy\",\n):\n    \"\"\"Init commander dependencies\n\n    Args:\n        lettrade (LetTrade): LetTrade object\n        brain (Brain): Brain of bot\n        exchange (Exchange): Manage bot trading\n        strategy (Strategy): Strategy of bot\n    \"\"\"\n    self.lettrade = lettrade\n    self.brain = brain\n    self.exchange = exchange\n    self.strategy = strategy\n\n    self._name = self.lettrade._name\n</code></pre>"},{"location":"reference/commander/telegram/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> telegram","text":""},{"location":"reference/commander/telegram/#lettrade.commander.telegram","title":"telegram","text":"<p>Module help LetTrade send notify and receive command from Telegram Bot</p>"},{"location":"reference/commander/telegram/#lettrade.commander.telegram--example","title":"Example","text":"Example <pre><code>import logging\nimport os\nfrom datetime import datetime\n\nimport talib.abstract as ta\nfrom dotenv import load_dotenv\n\n# import example.logger\nfrom lettrade.all import (\n    DataFeed,\n    Strategy,\n    TelegramCommander,\n    crossover,\n    crossunder,\n    let_metatrader,\n)\n\nlogger = logging.getLogger(__name__)\nload_dotenv()\n\n\nclass SmaCross(Strategy):\n    ema1_period = 9\n    ema2_period = 21\n\n    _now: datetime\n\n    def indicators(self, df: DataFeed):\n        df[\"ema1\"] = ta.EMA(df, timeperiod=self.ema1_period)\n        df[\"ema2\"] = ta.EMA(df, timeperiod=self.ema2_period)\n\n        df[\"signal_ema_crossover\"] = crossover(df.ema1, df.ema2)\n        df[\"signal_ema_crossunder\"] = crossunder(df.ema1, df.ema2)\n        return df\n\n    def start(self, df: DataFeed):\n        self._now = df.now\n\n    def next(self, df: DataFeed):\n        if self.is_live:\n            # Filter start of new bar\n            if self._now == df.now:\n                return\n            self._now = df.now\n\n        if len(self.orders) &gt; 0 or len(self.trades) &gt; 0:\n            return\n\n        if df.signal_ema_crossover[-1]:\n            price = self.data.close[-1]\n            self.buy(size=0.1, sl=price - 0.01, tp=price + 0.01)\n        elif df.signal_ema_crossunder[-1]:\n            price = self.data.close[-1]\n            self.sell(size=0.1, sl=price + 0.01, tp=price - 0.01)\n\n    def end(self, df: DataFeed):\n        print(df.tail())\n        print(self.orders)\n\n    def plot(self, df: DataFeed):\n        return dict(\n            scatters=[\n                dict(\n                    x=df.index,\n                    y=df[\"ema1\"],\n                    line=dict(color=\"blue\", width=1),\n                    name=\"ema1\",\n                ),\n                dict(\n                    x=df.index,\n                    y=df[\"ema2\"],\n                    line=dict(color=\"green\", width=1),\n                    name=\"ema2\",\n                ),\n            ]\n        )\n\n\nif __name__ == \"__main__\":\n    lt = let_metatrader(\n        strategy=SmaCross,\n        datas={(\"EURGBP\", \"5m\")},\n        login=os.getenv(\"MT5_LOGIN\"),\n        password=os.getenv(\"MT5_PASSWORD\"),\n        server=os.getenv(\"MT5_SERVER\"),\n        commander=TelegramCommander(\n            token=os.getenv(\"TELEGRAM_TOKEN\"),\n            chat_id=os.getenv(\"TELEGRAM_CHAT_ID\"),\n        ),\n    )\n\n    lt.run()\n</code></pre>"},{"location":"reference/commander/telegram/#lettrade.commander.telegram.TelegramAPI","title":"TelegramAPI","text":"<pre><code>TelegramAPI(token: str, chat_id: int, *args, **kwargs)\n</code></pre> <p>Singleton object communicate across multipprocessing</p> Source code in <code>lettrade/commander/telegram.py</code> <pre><code>def __init__(self, token: str, chat_id: int, *args, **kwargs) -&gt; None:\n    self._token: str = token\n    self._chat_id: int = int(chat_id)\n    self._action_queues = dict()\n</code></pre>"},{"location":"reference/commander/telegram/#lettrade.commander.telegram.TelegramAPI.cleanup","title":"cleanup","text":"<pre><code>cleanup() -&gt; None\n</code></pre> <p>Stops all running telegram threads.</p> Source code in <code>lettrade/commander/telegram.py</code> <pre><code>def cleanup(self) -&gt; None:\n    \"\"\"Stops all running telegram threads.\"\"\"\n    # This can take up to `timeout` from the call to `start_polling`.\n    asyncio.run_coroutine_threadsafe(self._cleanup_telegram(), self._loop)\n    self._thread.join()\n</code></pre>"},{"location":"reference/commander/telegram/#lettrade.commander.telegram.TelegramAPI.send_message","title":"send_message","text":"<pre><code>send_message(msg: str, pname: str, **kwargs) -&gt; None\n</code></pre> <p>Send message to Telegram Bot</p> <p>Parameters:</p> <ul> <li> <code>msg</code>               (<code>str</code>)           \u2013            <p>Message</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>_type_</code> (              <code>None</code> )          \u2013            <p><code>None</code></p> </li> </ul> Source code in <code>lettrade/commander/telegram.py</code> <pre><code>def send_message(self, msg: str, pname: str, **kwargs) -&gt; None:\n    \"\"\"Send message to Telegram Bot\n\n    Args:\n        msg (str): Message\n\n    Returns:\n        _type_: `None`\n    \"\"\"\n    msg = f\"*[Process: {pname}]*\\n{msg}\"\n    asyncio.run_coroutine_threadsafe(self._send_msg(msg, **kwargs), self._loop)\n</code></pre>"},{"location":"reference/commander/telegram/#lettrade.commander.telegram.TelegramAPI.start","title":"start","text":"<pre><code>start(pname: str, action_queue: Queue)\n</code></pre> <p>Start</p> Source code in <code>lettrade/commander/telegram.py</code> <pre><code>def start(self, pname: str, action_queue: Queue):\n    \"\"\"Start\"\"\"\n    if pname in self._action_queues:\n        logger.warning(\"Process name %s override existed action queue\", pname)\n    self._action_queues[pname] = action_queue\n\n    logger.info(\"New join process: %s\", pname)\n\n    # TODO: Lock for safe multipleprocessing\n    if hasattr(self, \"_keyboard\"):\n        return\n\n    self._init_keyboard()\n    self._start_thread()\n</code></pre>"},{"location":"reference/commander/telegram/#lettrade.commander.telegram.TelegramCommander","title":"TelegramCommander","text":"<pre><code>TelegramCommander(\n    token: str,\n    chat_id: int,\n    api: Optional[TelegramAPI] = None,\n    *args,\n    **kwargs\n)\n</code></pre> <p>               Bases: <code>Commander</code></p> <p>Send notify and receive command from Telegram Bot</p> <p>Parameters:</p> <ul> <li> <code>token</code>               (<code>str</code>)           \u2013            <p>Telegram Bot token</p> </li> <li> <code>chat_id</code>               (<code>int</code>)           \u2013            <p>Telegram chat_id</p> </li> </ul> Source code in <code>lettrade/commander/telegram.py</code> <pre><code>def __init__(\n    self,\n    token: str,\n    chat_id: int,\n    api: Optional[TelegramAPI] = None,\n    *args,\n    **kwargs,\n) -&gt; None:\n    \"\"\"_summary_\n\n    Args:\n        token (str): Telegram Bot token\n        chat_id (int): Telegram chat_id\n    \"\"\"\n    super().__init__(*args, **kwargs)\n    self._api = api or TelegramAPI(token=token, chat_id=chat_id)\n    self._is_running = True\n</code></pre>"},{"location":"reference/commander/telegram/#lettrade.commander.telegram.TelegramCommander.init","title":"init","text":"<pre><code>init(\n    lettrade: LetTrade,\n    brain: Brain,\n    exchange: Exchange,\n    strategy: Strategy,\n)\n</code></pre> <p>Init commander dependencies</p> <p>Parameters:</p> <ul> <li> <code>lettrade</code>               (<code>LetTrade</code>)           \u2013            <p>LetTrade object</p> </li> <li> <code>brain</code>               (<code>Brain</code>)           \u2013            <p>Brain of bot</p> </li> <li> <code>exchange</code>               (<code>Exchange</code>)           \u2013            <p>Manage bot trading</p> </li> <li> <code>strategy</code>               (<code>Strategy</code>)           \u2013            <p>Strategy of bot</p> </li> </ul> Source code in <code>lettrade/commander/commander.py</code> <pre><code>def init(\n    self,\n    lettrade: \"LetTrade\",\n    brain: \"Brain\",\n    exchange: \"Exchange\",\n    strategy: \"Strategy\",\n):\n    \"\"\"Init commander dependencies\n\n    Args:\n        lettrade (LetTrade): LetTrade object\n        brain (Brain): Brain of bot\n        exchange (Exchange): Manage bot trading\n        strategy (Strategy): Strategy of bot\n    \"\"\"\n    self.lettrade = lettrade\n    self.brain = brain\n    self.exchange = exchange\n    self.strategy = strategy\n\n    self._name = self.lettrade._name\n</code></pre>"},{"location":"reference/commander/telegram/#lettrade.commander.telegram.TelegramCommander.start","title":"start","text":"<pre><code>start()\n</code></pre> <p>Start</p> Source code in <code>lettrade/commander/telegram.py</code> <pre><code>def start(self):\n    \"\"\"Start\"\"\"\n    q = self._t_action()\n    self._api.start(pname=self._name, action_queue=q)\n</code></pre>"},{"location":"reference/commander/telegram/#lettrade.commander.telegram.TelegramCommander.stop","title":"stop","text":"<pre><code>stop()\n</code></pre> <p>Stop</p> Source code in <code>lettrade/commander/telegram.py</code> <pre><code>def stop(self):\n    \"\"\"Stop\"\"\"\n    self._api.cleanup()\n    self._is_running = False\n</code></pre>"},{"location":"reference/commander/telegram/#lettrade.commander.telegram.authorized_only","title":"authorized_only","text":"<pre><code>authorized_only(\n    command_handler: Callable[\n        ..., Coroutine[Any, Any, None]\n    ]\n)\n</code></pre> <p>Decorator to check if the message comes from the correct chat_id</p> <p>Parameters:</p> <ul> <li> <code>command_handler</code>               (<code>Callable[..., Coroutine[Any, Any, None]]</code>)           \u2013            <p>Telegram CommandHandler</p> </li> </ul> Source code in <code>lettrade/commander/telegram.py</code> <pre><code>def authorized_only(command_handler: Callable[..., Coroutine[Any, Any, None]]):\n    \"\"\"Decorator to check if the message comes from the correct chat_id\n\n    Args:\n        command_handler (Callable[..., Coroutine[Any, Any, None]]): Telegram CommandHandler\n    \"\"\"\n\n    @wraps(command_handler)\n    async def wrapper(self: \"TelegramCommander\", *args, **kwargs):\n        \"\"\"Decorator logic\"\"\"\n        update = kwargs.get(\"update\") or args[0]\n\n        # Reject unauthorized messages\n        if update.callback_query:\n            cchat_id = int(update.callback_query.message.chat.id)\n        else:\n            cchat_id = int(update.message.chat_id)\n\n        if cchat_id != self._chat_id:\n            logger.info(f\"Rejected unauthorized message from: {update.message.chat_id}\")\n            return wrapper\n\n        logger.debug(\n            \"Executing handler: %s for chat_id: %s\",\n            command_handler.__name__,\n            self._chat_id,\n        )\n        try:\n            return await command_handler(self, *args, **kwargs)\n        except Exception as e:\n            await self._send_msg(str(e))\n            # except BaseException:\n            logger.exception(\"Exception occurred within Telegram module\", exc_info=e)\n\n    return wrapper\n</code></pre>"},{"location":"reference/data/","title":"Index","text":""},{"location":"reference/data/#lettrade.data","title":"data","text":""},{"location":"reference/data/csv/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> csv","text":""},{"location":"reference/data/csv/#lettrade.data.csv","title":"csv","text":""},{"location":"reference/data/csv/#lettrade.data.csv.CSVDataFeed","title":"CSVDataFeed","text":"<pre><code>CSVDataFeed(\n    path: str = None,\n    name: str = None,\n    delimiter: str = \",\",\n    index_col: int = 0,\n    header: int = 0,\n    meta: dict = None,\n    data: DataFeed = None,\n    *args: list,\n    **kwargs: dict\n)\n</code></pre> <p>               Bases: <code>DataFeed</code></p> <p>Implement help to load DataFeed from csv file</p> <p>Parameters:</p> <ul> <li> <code>name</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>Path to csv file</p> </li> <li> <code>delimiter</code>               (<code>str</code>, default:                   <code>','</code> )           \u2013            <p>description. Defaults to \",\".</p> </li> <li> <code>index_col</code>               (<code>int</code>, default:                   <code>0</code> )           \u2013            <p>description. Defaults to 0.</p> </li> <li> <code>header</code>               (<code>int</code>, default:                   <code>0</code> )           \u2013            <p>description. Defaults to 0.</p> </li> <li> <code>*args</code>               (<code>list</code>, default:                   <code>()</code> )           \u2013            <p>DataFeed list parameters</p> </li> <li> <code>**kwargs</code>               (<code>dict</code>, default:                   <code>{}</code> )           \u2013            <p>DataFeed dict parameters</p> </li> </ul> Source code in <code>lettrade/data/csv.py</code> <pre><code>def __init__(\n    self,\n    path: str = None,\n    name: str = None,\n    delimiter: str = \",\",\n    index_col: int = 0,\n    header: int = 0,\n    meta: dict = None,\n    data: DataFeed = None,\n    *args: list,\n    **kwargs: dict,\n) -&gt; None:\n    \"\"\"_summary_\n\n    Args:\n        name (str): Path to csv file\n        delimiter (str, optional): _description_. Defaults to \",\".\n        index_col (int, optional): _description_. Defaults to 0.\n        header (int, optional): _description_. Defaults to 0.\n        *args (list): [DataFeed](./data.md#lettrade.data.data.DataFeed) list parameters\n        **kwargs (dict): [DataFeed](./data.md#lettrade.data.data.DataFeed) dict parameters\n    \"\"\"\n    if name is None:\n        name = path\n\n    if data is None:\n        data = pd.read_csv(\n            path,\n            index_col=index_col,\n            parse_dates=[\"datetime\"],\n            delimiter=delimiter,\n            header=header,\n        )\n    # df.reset_index(inplace=True)\n\n    super().__init__(name=name, data=data, meta=meta, *args, **kwargs)\n</code></pre>"},{"location":"reference/data/data/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> data","text":""},{"location":"reference/data/data/#lettrade.data.data","title":"data","text":""},{"location":"reference/data/data/#lettrade.data.data.DataFeed","title":"DataFeed","text":"<pre><code>DataFeed(\n    name: str, meta: Optional[dict] = None, *args, **kwargs\n)\n</code></pre> <p>               Bases: <code>DataFrame</code></p> <p>Data for Strategy. A implement of pandas.DataFrame</p> <p>Parameters:</p> <ul> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>Name of DataFeed</p> </li> <li> <code>meta</code>               (<code>Optional[dict]</code>, default:                   <code>None</code> )           \u2013            <p>metadata of DataFeed. Defaults to None.</p> </li> <li> <code>*args</code>               (<code>list</code>, default:                   <code>()</code> )           \u2013            <p><code>pandas.DataFrame</code> list parameters</p> </li> <li> <code>**kwargs</code>               (<code>dict</code>, default:                   <code>{}</code> )           \u2013            <p><code>pandas.DataFrame</code> dict parameters</p> </li> </ul> Source code in <code>lettrade/data/data.py</code> <pre><code>def __init__(\n    self,\n    name: str,\n    # data: pd.DataFrame,\n    meta: Optional[dict] = None,\n    # dtype={},\n    *args,\n    **kwargs,\n) -&gt; None:\n    \"\"\"_summary_\n\n    Args:\n        name (str): Name of DataFeed\n        meta (Optional[dict], optional): metadata of DataFeed. Defaults to None.\n        *args (list): `pandas.DataFrame` list parameters\n        **kwargs (dict): `pandas.DataFrame` dict parameters\n    \"\"\"\n\n    # dtype.update(\n    #     {\n    #         \"datetime\": \"datetime64[ns, UTC]\",\n    #         \"open\": \"float\",\n    #         \"high\": \"float\",\n    #         \"low\": \"float\",\n    #         \"close\": \"float\",\n    #         \"volume\": \"float\",\n    #     }\n    # )\n    # print(dtype)\n    # data.set_index(\n    #     pd.DatetimeIndex(data.datetime, dtype=\"datetime64[ns, UTC]\"), inplace=True\n    # )\n    # print(data.index.tz_convert(pytz.utc))\n\n    super().__init__(*args, **kwargs)\n    if not isinstance(self.index, pd.RangeIndex):\n        self.reset_index(inplace=True)\n        # self.index = pd.RangeIndex(start=0, stop=len(self.index), step=1)\n\n    # Metadata\n    if not meta:\n        meta = dict()\n    meta[\"name\"] = name\n    self.attrs = {\"lt_meta\": meta}\n</code></pre>"},{"location":"reference/data/feeder/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> feeder","text":""},{"location":"reference/data/feeder/#lettrade.data.feeder","title":"feeder","text":""},{"location":"reference/data/feeder/#lettrade.data.feeder.DataFeeder","title":"DataFeeder","text":""},{"location":"reference/data/feeder/#lettrade.data.feeder.DataFeeder.is_continous","title":"is_continous  <code>property</code>","text":"<pre><code>is_continous\n</code></pre> <p>Flag check is realtime continous datafeeder</p>"},{"location":"reference/data/replay/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> replay","text":""},{"location":"reference/data/replay/#lettrade.data.replay","title":"replay","text":""},{"location":"reference/data/exporter/","title":"Index","text":""},{"location":"reference/data/exporter/#lettrade.data.exporter","title":"exporter","text":""},{"location":"reference/data/exporter/csv/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> csv","text":""},{"location":"reference/data/exporter/csv/#lettrade.data.exporter.csv","title":"csv","text":""},{"location":"reference/exchange/","title":"Index","text":""},{"location":"reference/exchange/#lettrade.exchange","title":"exchange","text":"<p>Exchange implements</p>"},{"location":"reference/exchange/#lettrade.exchange--stable-exchanges","title":"Stable Exchanges","text":"<ul> <li>BackTest: Backtesting exchange</li> <li>MetaTrader: MetaTrader 5 live data and trading</li> <li>CCXT: CCXT CryptoCurrency live data and trading</li> </ul>"},{"location":"reference/exchange/base/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> base","text":""},{"location":"reference/exchange/base/#lettrade.exchange.base","title":"base","text":""},{"location":"reference/exchange/exchange/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> exchange","text":""},{"location":"reference/exchange/exchange/#lettrade.exchange.exchange","title":"exchange","text":""},{"location":"reference/exchange/exchange/#lettrade.exchange.exchange.Exchange","title":"Exchange","text":"<pre><code>Exchange()\n</code></pre> <p>Base Exchange class to handle trading</p> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def __init__(self):\n    self.executes = dict()\n    self.orders = dict()\n    self.history_orders = dict()\n    self.trades = dict()\n    self.history_trades = dict()\n    self.positions = dict()\n\n    self._state = ExchangeState.Init\n</code></pre>"},{"location":"reference/exchange/exchange/#lettrade.exchange.exchange.Exchange.data","title":"data  <code>instance-attribute</code>","text":"<pre><code>data: DataFeed\n</code></pre> <p>main DataFeed</p>"},{"location":"reference/exchange/exchange/#lettrade.exchange.exchange.Exchange.datas","title":"datas  <code>instance-attribute</code>","text":"<pre><code>datas: list[DataFeed]\n</code></pre> <p>List of all available DataFeed</p>"},{"location":"reference/exchange/exchange/#lettrade.exchange.exchange.Exchange.executes","title":"executes  <code>instance-attribute</code>","text":"<pre><code>executes: dict[str, Execute] = dict()\n</code></pre> <p>Execute dict by <code>Execute.id</code> key</p>"},{"location":"reference/exchange/exchange/#lettrade.exchange.exchange.Exchange.history_orders","title":"history_orders  <code>instance-attribute</code>","text":"<pre><code>history_orders: dict[str, Order] = dict()\n</code></pre> <p>History Order dict by <code>Order.id</code> key</p>"},{"location":"reference/exchange/exchange/#lettrade.exchange.exchange.Exchange.history_trades","title":"history_trades  <code>instance-attribute</code>","text":"<pre><code>history_trades: dict[str, Trade] = dict()\n</code></pre> <p>History Order dict by <code>Order.id</code> key</p>"},{"location":"reference/exchange/exchange/#lettrade.exchange.exchange.Exchange.orders","title":"orders  <code>instance-attribute</code>","text":"<pre><code>orders: dict[str, Order] = dict()\n</code></pre> <p>Available Order dict by <code>Order.id</code> key</p>"},{"location":"reference/exchange/exchange/#lettrade.exchange.exchange.Exchange.positions","title":"positions  <code>instance-attribute</code>","text":"<pre><code>positions: dict[str, Position] = dict()\n</code></pre> <p>Available Position dict by <code>Position.id</code> key</p>"},{"location":"reference/exchange/exchange/#lettrade.exchange.exchange.Exchange.trades","title":"trades  <code>instance-attribute</code>","text":"<pre><code>trades: dict[str, Trade] = dict()\n</code></pre> <p>Available Trade dict by <code>Trade.id</code> key</p>"},{"location":"reference/exchange/exchange/#lettrade.exchange.exchange.Exchange.init","title":"init","text":"<pre><code>init(\n    brain: Brain,\n    feeder: DataFeeder,\n    account: Account,\n    commander: Commander,\n) -&gt; None\n</code></pre> <p>Init Exchange dependencies. Set data/datas from feeder. Set state to <code>ExchangeState.Start</code>.</p> <p>Parameters:</p> <ul> <li> <code>brain</code>               (<code>Brain</code>)           \u2013            <p>description</p> </li> <li> <code>feeder</code>               (<code>DataFeeder</code>)           \u2013            <p>description</p> </li> <li> <code>account</code>               (<code>Account</code>)           \u2013            <p>description</p> </li> <li> <code>commander</code>               (<code>Commander</code>)           \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def init(\n    self,\n    brain: \"Brain\",\n    feeder: DataFeeder,\n    account: Account,\n    commander: Commander,\n) -&gt; None:\n    \"\"\"Init Exchange dependencies.\n    Set data/datas from feeder.\n    Set state to `ExchangeState.Start`.\n\n    Args:\n        brain (Brain): _description_\n        feeder (DataFeeder): _description_\n        account (Account): _description_\n        commander (Commander): _description_\n    \"\"\"\n    self._brain = brain\n    self._feeder = feeder\n    self._account = account\n    self._commander = commander\n\n    self.data = self._feeder.data\n    self.datas = self._feeder.datas\n\n    self._account.init(exchange=self)\n\n    self._state = ExchangeState.Start\n</code></pre>"},{"location":"reference/exchange/exchange/#lettrade.exchange.exchange.Exchange.new_order","title":"new_order  <code>abstractmethod</code>","text":"<pre><code>new_order(\n    size: float,\n    limit: Optional[float] = None,\n    stop: Optional[float] = None,\n    sl: Optional[float] = None,\n    tp: Optional[float] = None,\n    tag: Optional[object] = None,\n    *args,\n    **kwargs\n) -&gt; OrderResult\n</code></pre> <p>Place new <code>Order</code></p> <p>Parameters:</p> <ul> <li> <code>size</code>               (<code>float</code>)           \u2013            <p>description</p> </li> <li> <code>limit</code>               (<code>Optional[float]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>stop</code>               (<code>Optional[float]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>sl</code>               (<code>Optional[float]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>tp</code>               (<code>Optional[float]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>tag</code>               (<code>Optional[object]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>OrderResult</code> (              <code>OrderResult</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>@abstractmethod\ndef new_order(\n    self,\n    size: float,\n    limit: Optional[float] = None,\n    stop: Optional[float] = None,\n    sl: Optional[float] = None,\n    tp: Optional[float] = None,\n    tag: Optional[object] = None,\n    *args,\n    **kwargs,\n) -&gt; OrderResult:\n    \"\"\"Place new `Order`\n\n    Args:\n        size (float): _description_\n        limit (Optional[float], optional): _description_. Defaults to None.\n        stop (Optional[float], optional): _description_. Defaults to None.\n        sl (Optional[float], optional): _description_. Defaults to None.\n        tp (Optional[float], optional): _description_. Defaults to None.\n        tag (Optional[object], optional): _description_. Defaults to None.\n\n    Returns:\n        OrderResult: _description_\n    \"\"\"\n    raise NotImplementedError(\"Exchange.new_order not implement yet\")\n</code></pre>"},{"location":"reference/exchange/exchange/#lettrade.exchange.exchange.Exchange.next","title":"next","text":"<pre><code>next()\n</code></pre> <p>Call when new data feeded</p> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def next(self):\n    \"Call when new data feeded\"\n    self._account._snapshot_equity()\n</code></pre>"},{"location":"reference/exchange/exchange/#lettrade.exchange.exchange.Exchange.on_execute","title":"on_execute","text":"<pre><code>on_execute(\n    execute: Execute,\n    broadcast: Optional[bool] = True,\n    **kwargs\n) -&gt; None\n</code></pre> <p>Receive Execute event from exchange then store and notify Brain</p> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def on_execute(\n    self,\n    execute: Execute,\n    broadcast: Optional[bool] = True,\n    **kwargs,\n) -&gt; None:\n    \"\"\"\n    Receive Execute event from exchange then store and notify Brain\n    \"\"\"\n    if not isinstance(execute, Execute):\n        raise RuntimeError(f\"{execute} is not instance of type Execute\")\n\n    if execute.id in self.executes:\n        # Merge to keep Execute handler for strategy using\n        # when strategy want to store Execute object\n        # and object will be automatic update directly\n        self.executes[execute.id].merge(execute)\n        execute = self.executes[execute.id]\n    else:\n        self.executes[execute.id] = execute\n\n    if self._state != ExchangeState.Run:\n        return\n\n    if broadcast:\n        self._brain.on_execute(execute)\n</code></pre>"},{"location":"reference/exchange/exchange/#lettrade.exchange.exchange.Exchange.on_order","title":"on_order","text":"<pre><code>on_order(\n    order: Order, broadcast: Optional[bool] = True, **kwargs\n) -&gt; None\n</code></pre> <p>Receive Order event from exchange then store and notify Brain</p> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def on_order(\n    self,\n    order: Order,\n    broadcast: Optional[bool] = True,\n    **kwargs,\n) -&gt; None:\n    \"\"\"\n    Receive Order event from exchange then store and notify Brain\n    \"\"\"\n    if not isinstance(order, Order):\n        raise RuntimeError(f\"{order} is not instance of type Order\")\n\n    if order.state in [OrderState.Executed, OrderState.Canceled]:\n        self.history_orders[order.id] = order\n        if order.id in self.orders:\n            del self.orders[order.id]\n    else:\n        if order.id in self.history_orders:\n            raise RuntimeError(f\"Order {order.id} closed\")\n\n        if order.id in self.orders:\n            # Merge to keep Order handler for strategy using\n            # when strategy want to store Order object\n            # and object will be automatic update directly\n            self.orders[order.id].merge(order)\n            order = self.orders[order.id]\n        else:\n            self.orders[order.id] = order\n\n    if self._state != ExchangeState.Run:\n        return\n\n    if broadcast:\n        self._brain.on_order(order)\n</code></pre>"},{"location":"reference/exchange/exchange/#lettrade.exchange.exchange.Exchange.on_position","title":"on_position","text":"<pre><code>on_position(\n    position: Position,\n    broadcast: Optional[bool] = True,\n    *args,\n    **kwargs\n) -&gt; None\n</code></pre> <p>Receive Position event from exchange then store and notify Brain</p> <p>Parameters:</p> <ul> <li> <code>position</code>               (<code>Position</code>)           \u2013            <p>description</p> </li> <li> <code>broadcast</code>               (<code>Optional[bool]</code>, default:                   <code>True</code> )           \u2013            <p>description. Defaults to True.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>check <code>Position</code> instance</p> </li> </ul> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def on_position(\n    self,\n    position: Position,\n    broadcast: Optional[bool] = True,\n    *args,\n    **kwargs,\n) -&gt; None:\n    \"\"\"Receive Position event from exchange then store and notify Brain\n\n\n    Args:\n        position (Position): _description_\n        broadcast (Optional[bool], optional): _description_. Defaults to True.\n\n    Raises:\n        RuntimeError: check `Position` instance\n    \"\"\"\n    if not isinstance(position, Position):\n        raise RuntimeError(f\"{position} is not instance of type Position\")\n\n    if position.id in self.positions:\n        # Merge to keep Position handler for strategy using\n        # when strategy want to store Position object\n        # and object will be automatic update directly\n        self.positions[position.id].merge(position)\n    else:\n        self.positions[position.id] = position\n\n    if self._state != ExchangeState.Run:\n        return\n\n    if broadcast:\n        self._brain.on_position(position)\n</code></pre>"},{"location":"reference/exchange/exchange/#lettrade.exchange.exchange.Exchange.on_trade","title":"on_trade","text":"<pre><code>on_trade(\n    trade: Trade,\n    broadcast: Optional[bool] = True,\n    *args,\n    **kwargs\n) -&gt; None\n</code></pre> <p>Receive Trade event from exchange then store and notify Brain</p> <p>Parameters:</p> <ul> <li> <code>trade</code>               (<code>Trade</code>)           \u2013            <p>new comming <code>Trade</code></p> </li> <li> <code>broadcast</code>               (<code>Optional[bool]</code>, default:                   <code>True</code> )           \u2013            <p>Flag notify for Brain. Defaults to True.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>validat <code>Trade</code> instance</p> </li> </ul> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def on_trade(\n    self,\n    trade: Trade,\n    broadcast: Optional[bool] = True,\n    *args,\n    **kwargs,\n) -&gt; None:\n    \"\"\"Receive Trade event from exchange then store and notify Brain\n\n    Args:\n        trade (Trade): new comming `Trade`\n        broadcast (Optional[bool], optional): Flag notify for Brain. Defaults to True.\n\n    Raises:\n        RuntimeError: validat `Trade` instance\n    \"\"\"\n    if not isinstance(trade, Trade):\n        raise RuntimeError(f\"{trade} is not instance of type Trade\")\n\n    if trade.state == TradeState.Exit:\n        self.history_trades[trade.id] = trade\n        if trade.id in self.trades:\n            del self.trades[trade.id]\n\n        self._account._on_trade_exit(trade)\n    else:\n        if trade.id in self.history_trades:\n            raise RuntimeError(f\"Order {trade.id} closed\")\n        if trade.id in self.trades:\n            # Merge to keep Trade handler for strategy using\n            # when strategy want to store Trade object\n            # and object will be automatic update directly\n            self.trades[trade.id].merge(trade)\n            trade = self.trades[trade.id]\n        else:\n            self.trades[trade.id] = trade\n\n    if self._state != ExchangeState.Run:\n        return\n\n    if broadcast:\n        self._brain.on_trade(trade)\n</code></pre>"},{"location":"reference/exchange/exchange/#lettrade.exchange.exchange.Exchange.start","title":"start","text":"<pre><code>start() -&gt; None\n</code></pre> <p>Start of Exchange by: - Start account. - Set state to <code>ExchangeState.Run</code> ready for next().</p> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def start(self) -&gt; None:\n    \"\"\"Start of Exchange by:\n    - Start account.\n    - Set state to `ExchangeState.Run` ready for next().\n    \"\"\"\n    self._account.start()\n    self._state = ExchangeState.Run\n</code></pre>"},{"location":"reference/exchange/exchange/#lettrade.exchange.exchange.Exchange.stop","title":"stop","text":"<pre><code>stop() -&gt; None\n</code></pre> <p>Stop Exchange</p> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def stop(self) -&gt; None:\n    \"\"\"Stop Exchange\"\"\"\n    self._state = ExchangeState.Stop\n    self._account.stop()\n</code></pre>"},{"location":"reference/exchange/execute/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> execute","text":""},{"location":"reference/exchange/execute/#lettrade.exchange.execute","title":"execute","text":""},{"location":"reference/exchange/execute/#lettrade.exchange.execute.Execute","title":"Execute","text":"<pre><code>Execute(\n    id: str,\n    exchange: Exchange,\n    data: DataFeed,\n    size: float,\n    price: float,\n    at: float,\n    order_id: str = None,\n    order: Order = None,\n    trade_id: str = None,\n    trade: Trade = None,\n)\n</code></pre> <p>               Bases: <code>BaseTransaction</code></p> <p>Place new orders through <code>Strategy.buy()</code> and <code>Strategy.sell()</code>. Query existing orders through <code>Strategy.orders</code>.</p> <p>When an order is executed or filled, it results in a <code>Trade</code>.</p> <p>If you wish to modify aspects of a placed but not yet filled order, cancel it and place a new one instead.</p> <p>All placed orders are Good 'Til Canceled.</p> Source code in <code>lettrade/exchange/execute.py</code> <pre><code>def __init__(\n    self,\n    id: str,\n    exchange: \"Exchange\",\n    data: \"DataFeed\",\n    size: float,\n    price: float,\n    at: float,\n    order_id: str = None,\n    order: \"Order\" = None,\n    trade_id: str = None,\n    trade: \"Trade\" = None,\n):\n    super().__init__(\n        id=id,\n        exchange=exchange,\n        data=data,\n        size=size,\n    )\n    self.order_id = order_id\n    self.order: \"Order\" = order\n    self.trade_id = trade_id\n    self.trade: \"Trade\" = trade\n    self.price = price\n    self.at = at\n</code></pre>"},{"location":"reference/exchange/execute/#lettrade.exchange.execute.Execute.merge","title":"merge","text":"<pre><code>merge(other: Execute)\n</code></pre> <p>Merge to keep object handler but not overwrite for Strategy using when Strategy want to store object and object will be automatic update directly</p> Source code in <code>lettrade/exchange/execute.py</code> <pre><code>def merge(self, other: \"Execute\"):\n    \"\"\"\n    Merge to keep object handler but not overwrite for Strategy using when Strategy want to store object and object will be automatic update directly\n    \"\"\"\n    if other is self:\n        return\n\n    if self.id != other.id:\n        raise RuntimeError(f\"Merge difference id {self.id} != {other.id} execute\")\n\n    self.price = other.price\n    self.size = other.size\n\n    if other.at:\n        self.at = other.at\n    if other.order_id:\n        self.order_id = other.order_id\n    if other.order:\n        self.order = other.order\n    if other.trade_id:\n        self.trade_id = other.trade_id\n    if other.trade:\n        self.trade = other.trade\n</code></pre>"},{"location":"reference/exchange/order/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> order","text":""},{"location":"reference/exchange/order/#lettrade.exchange.order","title":"order","text":""},{"location":"reference/exchange/order/#lettrade.exchange.order.Order","title":"Order","text":"<pre><code>Order(\n    id: str,\n    exchange: Exchange,\n    data: DataFeed,\n    size: float,\n    state: OrderState = OrderState.Pending,\n    type: OrderType = OrderType.Market,\n    limit_price: Optional[float] = None,\n    stop_price: Optional[float] = None,\n    sl_price: Optional[float] = None,\n    tp_price: Optional[float] = None,\n    trade: Optional[Trade] = None,\n    tag: object = None,\n    open_at: int = None,\n    open_price: int = None,\n)\n</code></pre> <p>               Bases: <code>BaseTransaction</code></p> Source code in <code>lettrade/exchange/order.py</code> <pre><code>def __init__(\n    self,\n    id: str,\n    exchange: \"Exchange\",\n    data: \"DataFeed\",\n    size: float,\n    state: OrderState = OrderState.Pending,\n    type: OrderType = OrderType.Market,\n    limit_price: Optional[float] = None,\n    stop_price: Optional[float] = None,\n    sl_price: Optional[float] = None,\n    tp_price: Optional[float] = None,\n    trade: Optional[\"Trade\"] = None,\n    tag: object = None,\n    open_at: int = None,\n    open_price: int = None,\n):\n    super().__init__(\n        id=id,\n        exchange=exchange,\n        data=data,\n        size=size,\n    )\n\n    self.type: OrderType = type\n    self.state: OrderState = state\n    self.limit_price: Optional[float] = limit_price\n    self.stop_price: Optional[float] = stop_price\n    self.sl_price: Optional[float] = sl_price\n    self.tp_price: Optional[float] = tp_price\n    self.trade: Optional[\"Trade\"] = trade\n    self.tag: object = tag\n\n    self.open_at: int = open_at\n    self.open_price: int = open_price\n    self.entry_at: int = None\n    self.entry_price: int = None\n</code></pre>"},{"location":"reference/exchange/order/#lettrade.exchange.order.Order.is_alive","title":"is_alive  <code>property</code>","text":"<pre><code>is_alive: bool\n</code></pre> <p>Flag to check <code>Order</code> still alive</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True if <code>state</code> in [OrderState.Pending, OrderState.Placed]</p> </li> </ul>"},{"location":"reference/exchange/order/#lettrade.exchange.order.Order.is_long","title":"is_long  <code>property</code>","text":"<pre><code>is_long: bool\n</code></pre> <p>True if the order is long (order size is positive).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True/False</p> </li> </ul>"},{"location":"reference/exchange/order/#lettrade.exchange.order.Order.is_short","title":"is_short  <code>property</code>","text":"<pre><code>is_short: bool\n</code></pre> <p>True if the order is short (order size is negative).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/order/#lettrade.exchange.order.Order.is_sl_order","title":"is_sl_order  <code>property</code>","text":"<pre><code>is_sl_order: bool\n</code></pre> <p><code>Order</code> is stop-loss order of a <code>Trade</code></p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/order/#lettrade.exchange.order.Order.is_tp_order","title":"is_tp_order  <code>property</code>","text":"<pre><code>is_tp_order: bool\n</code></pre> <p><code>Order</code> is take-profit order of a <code>Trade</code></p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/order/#lettrade.exchange.order.Order.limit","title":"limit  <code>property</code>","text":"<pre><code>limit: Optional[float]\n</code></pre> <p>Getter of limit_price</p> <p>Returns:</p> <ul> <li> <code>Optional[float]</code>           \u2013            <p>Optional[float]: <code>float</code> or <code>None</code></p> </li> </ul>"},{"location":"reference/exchange/order/#lettrade.exchange.order.Order.sl","title":"sl  <code>property</code>","text":"<pre><code>sl: Optional[float]\n</code></pre> <p>Getter of sl_price</p> <p>Returns:</p> <ul> <li> <code>Optional[float]</code>           \u2013            <p>Optional[float]: <code>float</code> or <code>None</code></p> </li> </ul>"},{"location":"reference/exchange/order/#lettrade.exchange.order.Order.stop","title":"stop  <code>property</code>","text":"<pre><code>stop: Optional[float]\n</code></pre> <p>Getter of stop_price</p> <p>Returns:</p> <ul> <li> <code>Optional[float]</code>           \u2013            <p>Optional[float]: <code>float</code> or <code>None</code></p> </li> </ul>"},{"location":"reference/exchange/order/#lettrade.exchange.order.Order.tp","title":"tp  <code>property</code>","text":"<pre><code>tp: Optional[float]\n</code></pre> <p>Getter of tp_price</p> <p>Returns:</p> <ul> <li> <code>Optional[float]</code>           \u2013            <p>Optional[float]: <code>float</code> or <code>None</code></p> </li> </ul>"},{"location":"reference/exchange/order/#lettrade.exchange.order.Order.cancel","title":"cancel","text":"<pre><code>cancel() -&gt; OrderResult\n</code></pre> <p>Cancel <code>Order</code> Set <code>status</code> to <code>OrderState.Canceled</code>. Send event to <code>Exchange</code></p> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>Validate state is <code>OrderState.Placed</code></p> </li> </ul> <p>Returns:</p> <ul> <li> <code>OrderResult</code> (              <code>OrderResult</code> )          \u2013            <p>result of <code>Order</code></p> </li> </ul> Source code in <code>lettrade/exchange/order.py</code> <pre><code>def cancel(self) -&gt; \"OrderResult\":\n    \"\"\"Cancel `Order`\n    Set `status` to `OrderState.Canceled`.\n    Send event to `Exchange`\n\n    Raises:\n        RuntimeError: Validate state is `OrderState.Placed`\n\n    Returns:\n        OrderResult: result of `Order`\n    \"\"\"\n    if self.state != OrderState.Placed:\n        raise RuntimeError(f\"Order {self.id} state {self.state} is not Placed\")\n\n    self.state = OrderState.Canceled\n    self.exchange.on_order(self)\n    return OrderResultOk(order=self)\n</code></pre>"},{"location":"reference/exchange/order/#lettrade.exchange.order.Order.execute","title":"execute","text":"<pre><code>execute(price: float, at: object) -&gt; OrderResult\n</code></pre> <p>Execute <code>Order</code>. Set <code>status</code> to <code>OrderState.Executed</code>. Send event to <code>Exchange</code></p> <p>Parameters:</p> <ul> <li> <code>price</code>               (<code>float</code>)           \u2013            <p>Executed price</p> </li> <li> <code>at</code>               (<code>object</code>)           \u2013            <p>Executed bar</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>OrderResult</code> (              <code>OrderResult</code> )          \u2013            <p>result of <code>Order</code></p> </li> </ul> Source code in <code>lettrade/exchange/order.py</code> <pre><code>def execute(self, price: float, at: object) -&gt; \"OrderResult\":\n    \"\"\"Execute `Order`.\n    Set `status` to `OrderState.Executed`.\n    Send event to `Exchange`\n\n    Args:\n        price (float): Executed price\n        at (object): Executed bar\n\n    Raises:\n        RuntimeError: _description_\n\n    Returns:\n        OrderResult: result of `Order`\n    \"\"\"\n    if self.state != OrderState.Placed:\n        raise RuntimeError(f\"Order {self.id} state {self.state} is not Placed\")\n\n    self.entry_at = at\n    self.entry_price = price\n    self.state = OrderState.Executed\n    self.exchange.on_order(self)\n    return OrderResultOk(order=self)\n</code></pre>"},{"location":"reference/exchange/order/#lettrade.exchange.order.Order.merge","title":"merge","text":"<pre><code>merge(other: Order)\n</code></pre> <p>Update current <code>Order</code> variables by other <code>Order</code></p> <p>Parameters:</p> <ul> <li> <code>other</code>               (<code>Order</code>)           \u2013            <p>Merge source <code>Order</code></p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>Validate same id</p> </li> </ul> Source code in <code>lettrade/exchange/order.py</code> <pre><code>def merge(self, other: \"Order\"):\n    \"\"\"Update current `Order` variables by other `Order`\n\n    Args:\n        other (Order): Merge source `Order`\n\n    Raises:\n        RuntimeError: Validate same id\n    \"\"\"\n    if other is self:\n        return\n\n    if self.id != other.id:\n        raise RuntimeError(f\"Merge difference id {self.id} != {other.id} order\")\n\n    self.size = other.size\n    self.sl_price = other.sl_price\n    self.tp_price = other.tp_price\n\n    if other.open_price:\n        self.open_price = other.open_price\n    if other.open_at:\n        self.open_at = other.open_at\n    if other.entry_price:\n        self.entry_price = other.entry_price\n    if other.entry_at:\n        self.entry_at = other.entry_at\n    if other.trade:\n        self.trade = other.trade\n</code></pre>"},{"location":"reference/exchange/order/#lettrade.exchange.order.Order.place","title":"place","text":"<pre><code>place() -&gt; OrderResult\n</code></pre> <p>Place <code>Order</code> Set <code>status</code> to <code>OrderState.Placed</code>. Send event to <code>Exchange</code></p> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>OrderResult</code> (              <code>OrderResult</code> )          \u2013            <p>result of <code>Order</code></p> </li> </ul> Source code in <code>lettrade/exchange/order.py</code> <pre><code>def place(self) -&gt; \"OrderResult\":\n    \"\"\"Place `Order`\n    Set `status` to `OrderState.Placed`.\n    Send event to `Exchange`\n\n    Raises:\n        RuntimeError: _description_\n\n    Returns:\n        OrderResult: result of `Order`\n    \"\"\"\n    if self.state != OrderState.Pending:\n        raise RuntimeError(f\"Order {self.id} state {self.state} is not Pending\")\n\n    self.state = OrderState.Placed\n    self.exchange.on_order(self)\n    return OrderResultOk(order=self)\n</code></pre>"},{"location":"reference/exchange/order/#lettrade.exchange.order.OrderResult","title":"OrderResult","text":"<pre><code>OrderResult(\n    ok: Optional[bool] = True,\n    order: Optional[Order] = None,\n    code: Optional[int] = 0,\n    raw: Optional[object] = None,\n)\n</code></pre> <p>Result of <code>Order</code></p> <p>Parameters:</p> <ul> <li> <code>ok</code>               (<code>Optional[bool]</code>, default:                   <code>True</code> )           \u2013            <p>Flag to check <code>Order</code> is success or not. Defaults to True.</p> </li> <li> <code>order</code>               (<code>Optional[Order]</code>, default:                   <code>None</code> )           \u2013            <p>Order own the result. Defaults to None.</p> </li> <li> <code>code</code>               (<code>Optional[int]</code>, default:                   <code>0</code> )           \u2013            <p>Error code of result. Defaults to 0.</p> </li> <li> <code>raw</code>               (<code>Optional[object]</code>, default:                   <code>None</code> )           \u2013            <p>Raw object of <code>Order</code>. Defaults to None.</p> </li> </ul> Source code in <code>lettrade/exchange/order.py</code> <pre><code>def __init__(\n    self,\n    ok: Optional[bool] = True,\n    order: Optional[\"Order\"] = None,\n    code: Optional[int] = 0,\n    raw: Optional[object] = None,\n) -&gt; None:\n    \"\"\"_summary_\n\n    Args:\n        ok (Optional[bool], optional): Flag to check `Order` is success or not. Defaults to True.\n        order (Optional[Order], optional): Order own the result. Defaults to None.\n        code (Optional[int], optional): Error code of result. Defaults to 0.\n        raw (Optional[object], optional): Raw object of `Order`. Defaults to None.\n    \"\"\"\n    self.ok: bool = ok\n    self.order: \"Order\" = order\n    self.code: int = code\n    self.raw: object = raw\n</code></pre>"},{"location":"reference/exchange/order/#lettrade.exchange.order.OrderResultError","title":"OrderResultError","text":"<pre><code>OrderResultError(\n    error: str,\n    code: int,\n    order: Optional[Order] = None,\n    raw: Optional[object] = None,\n)\n</code></pre> <p>               Bases: <code>OrderResult</code></p> <p>Result of a error <code>Order</code></p> <p>Parameters:</p> <ul> <li> <code>error</code>               (<code>str</code>)           \u2013            <p>Error message</p> </li> <li> <code>code</code>               (<code>int</code>)           \u2013            <p>Error code of result</p> </li> <li> <code>order</code>               (<code>Optional[Order]</code>, default:                   <code>None</code> )           \u2013            <p>Order own the result. Defaults to None.</p> </li> <li> <code>raw</code>               (<code>Optional[object]</code>, default:                   <code>None</code> )           \u2013            <p>Raw object of <code>Order</code>. Defaults to None.</p> </li> </ul> Source code in <code>lettrade/exchange/order.py</code> <pre><code>def __init__(\n    self,\n    error: str,\n    code: int,\n    order: Optional[\"Order\"] = None,\n    raw: Optional[object] = None,\n) -&gt; None:\n    \"\"\"_summary_\n\n    Args:\n        error (str): Error message\n        code (int): Error code of result\n        order (Optional[Order], optional): Order own the result. Defaults to None.\n        raw (Optional[object], optional): Raw object of `Order`. Defaults to None.\n    \"\"\"\n    super().__init__(ok=False, order=order, code=code, raw=raw)\n    self.error: str = error\n</code></pre>"},{"location":"reference/exchange/order/#lettrade.exchange.order.OrderResultOk","title":"OrderResultOk","text":"<pre><code>OrderResultOk(\n    order: Optional[Order] = None,\n    raw: Optional[object] = None,\n)\n</code></pre> <p>               Bases: <code>OrderResult</code></p> <p>Result of a success <code>Order</code></p> <p>Parameters:</p> <ul> <li> <code>order</code>               (<code>Optional[Order]</code>, default:                   <code>None</code> )           \u2013            <p>Order own the result. Defaults to None.</p> </li> <li> <code>raw</code>               (<code>Optional[object]</code>, default:                   <code>None</code> )           \u2013            <p>Raw object of <code>Order</code>. Defaults to None.</p> </li> </ul> Source code in <code>lettrade/exchange/order.py</code> <pre><code>def __init__(\n    self,\n    order: Optional[\"Order\"] = None,\n    raw: Optional[object] = None,\n) -&gt; None:\n    \"\"\"_summary_\n\n    Args:\n        order (Optional[Order], optional): Order own the result. Defaults to None.\n        raw (Optional[object], optional): Raw object of `Order`. Defaults to None.\n    \"\"\"\n    super().__init__(ok=True, order=order, raw=raw)\n</code></pre>"},{"location":"reference/exchange/position/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> position","text":""},{"location":"reference/exchange/position/#lettrade.exchange.position","title":"position","text":""},{"location":"reference/exchange/position/#lettrade.exchange.position.Position","title":"Position","text":"<pre><code>Position(exchange: Exchange)\n</code></pre> Source code in <code>lettrade/exchange/position.py</code> <pre><code>def __init__(self, exchange: \"Exchange\"):\n    self.__exchange = exchange\n</code></pre>"},{"location":"reference/exchange/position/#lettrade.exchange.position.Position.is_long","title":"is_long  <code>property</code>","text":"<pre><code>is_long: bool\n</code></pre> <p>True if the position is long (position size is positive).</p>"},{"location":"reference/exchange/position/#lettrade.exchange.position.Position.is_short","title":"is_short  <code>property</code>","text":"<pre><code>is_short: bool\n</code></pre> <p>True if the position is short (position size is negative).</p>"},{"location":"reference/exchange/position/#lettrade.exchange.position.Position.pl","title":"pl  <code>property</code>","text":"<pre><code>pl: float\n</code></pre> <p>Profit (positive) or loss (negative) of the current position in cash units.</p>"},{"location":"reference/exchange/position/#lettrade.exchange.position.Position.pl_pct","title":"pl_pct  <code>property</code>","text":"<pre><code>pl_pct: float\n</code></pre> <p>Profit (positive) or loss (negative) of the current position in percent.</p>"},{"location":"reference/exchange/position/#lettrade.exchange.position.Position.size","title":"size  <code>property</code>","text":"<pre><code>size: float\n</code></pre> <p>Position size in units of asset. Negative if position is short.</p>"},{"location":"reference/exchange/position/#lettrade.exchange.position.Position.close","title":"close","text":"<pre><code>close(portion: float = 1.0)\n</code></pre> <p>Close portion of position by closing <code>portion</code> of each active trade. See <code>Trade.close</code>.</p> Source code in <code>lettrade/exchange/position.py</code> <pre><code>def close(self, portion: float = 1.0):\n    \"\"\"\n    Close portion of position by closing `portion` of each active trade. See `Trade.close`.\n    \"\"\"\n    for trade in self.__exchange.trades:\n        trade.close(portion)\n</code></pre>"},{"location":"reference/exchange/trade/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> trade","text":""},{"location":"reference/exchange/trade/#lettrade.exchange.trade","title":"trade","text":""},{"location":"reference/exchange/trade/#lettrade.exchange.trade.Trade","title":"Trade","text":"<pre><code>Trade(\n    id: str,\n    exchange: Exchange,\n    data: DataFeed,\n    size: float,\n    parent: Order,\n    tag: object = \"\",\n    state: TradeState = TradeState.Open,\n    entry_price: Optional[float] = None,\n    entry_at: Optional[int] = None,\n    sl_order: Optional[Order] = None,\n    tp_order: Optional[Order] = None,\n)\n</code></pre> <p>               Bases: <code>BaseTransaction</code></p> <p>When an <code>Order</code> is filled, it results in an active <code>Trade</code>. Find active trades in <code>Strategy.trades</code> and closed, settled trades in <code>Strategy.closed_trades</code>.</p> Source code in <code>lettrade/exchange/trade.py</code> <pre><code>def __init__(\n    self,\n    id: str,\n    exchange: \"Exchange\",\n    data: \"DataFeed\",\n    size: float,\n    parent: \"Order\",\n    tag: object = \"\",\n    state: TradeState = TradeState.Open,\n    entry_price: Optional[float] = None,\n    entry_at: Optional[int] = None,\n    sl_order: Optional[Order] = None,\n    tp_order: Optional[Order] = None,\n):\n    super().__init__(\n        id=id,\n        exchange=exchange,\n        data=data,\n        size=size,\n    )\n    self._account = self.exchange._account\n\n    self.state = state\n    self.tag: object = tag\n    self.parent: \"Order\" = parent\n\n    self.entry_price: Optional[float] = entry_price\n    self.entry_at: Optional[int] = entry_at\n    self.exit_price: Optional[float] = None\n    self.exit_at: Optional[int] = None\n    self.exit_pl: Optional[float] = None\n    self.exit_fee: Optional[float] = None\n    self.sl_order: Optional[Order] = sl_order\n    self.tp_order: Optional[Order] = tp_order\n</code></pre>"},{"location":"reference/exchange/trade/#lettrade.exchange.trade.Trade.fee","title":"fee  <code>property</code>","text":"<pre><code>fee: float\n</code></pre> <p>Fee/Estimate Fee for trade</p> <p>Returns:</p> <ul> <li> <code>float</code> (              <code>float</code> )          \u2013            <p>Fee</p> </li> </ul>"},{"location":"reference/exchange/trade/#lettrade.exchange.trade.Trade.is_exited","title":"is_exited  <code>property</code>","text":"<pre><code>is_exited: bool\n</code></pre> <p>Flag to check Trade state.</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True if the trade exited</p> </li> </ul>"},{"location":"reference/exchange/trade/#lettrade.exchange.trade.Trade.is_long","title":"is_long  <code>property</code>","text":"<pre><code>is_long: bool\n</code></pre> <p>Flag to check Trade is long side.</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True if the trade is long (trade size is positive).</p> </li> </ul>"},{"location":"reference/exchange/trade/#lettrade.exchange.trade.Trade.is_short","title":"is_short  <code>property</code>","text":"<pre><code>is_short: bool\n</code></pre> <p>Flag to check Trade is short side.</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True if the trade is short (trade size is negative).</p> </li> </ul>"},{"location":"reference/exchange/trade/#lettrade.exchange.trade.Trade.pl","title":"pl  <code>property</code>","text":"<pre><code>pl: float\n</code></pre> <p>Estimate Profit or Loss of Trade</p> <p>Returns:</p> <ul> <li> <code>float</code> (              <code>float</code> )          \u2013            <p>PnL</p> </li> </ul>"},{"location":"reference/exchange/backtest/","title":"Index","text":""},{"location":"reference/exchange/backtest/#lettrade.exchange.backtest","title":"backtest","text":""},{"location":"reference/exchange/backtest/account/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> account","text":""},{"location":"reference/exchange/backtest/account/#lettrade.exchange.backtest.account","title":"account","text":""},{"location":"reference/exchange/backtest/backtest/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> backtest","text":""},{"location":"reference/exchange/backtest/backtest/#lettrade.exchange.backtest.backtest","title":"backtest","text":""},{"location":"reference/exchange/backtest/backtest/#lettrade.exchange.backtest.backtest.LetTradeBackTest","title":"LetTradeBackTest","text":"<pre><code>LetTradeBackTest(\n    strategy: Type[Strategy],\n    datas: DataFeed | list[DataFeed] | str | list[str],\n    feeder: Type[DataFeeder],\n    exchange: Type[Exchange],\n    account: Type[Account],\n    commander: Optional[Type[Commander]] = None,\n    plotter: Optional[Type[Plotter]] = None,\n    stats: Optional[Type[Statistic]] = None,\n    name: Optional[str] = None,\n    bot: Optional[Type[LetTradeBot]] = LetTradeBot,\n    **kwargs\n)\n</code></pre> <p>               Bases: <code>LetTrade</code></p> Source code in <code>lettrade/lettrade.py</code> <pre><code>def __init__(\n    self,\n    strategy: Type[Strategy],\n    datas: DataFeed | list[DataFeed] | str | list[str],\n    feeder: Type[DataFeeder],\n    exchange: Type[Exchange],\n    account: Type[Account],\n    commander: Optional[Type[Commander]] = None,\n    plotter: Optional[Type[\"Plotter\"]] = None,\n    stats: Optional[Type[\"Statistic\"]] = None,\n    name: Optional[str] = None,\n    bot: Optional[Type[LetTradeBot]] = LetTradeBot,\n    **kwargs,\n) -&gt; None:\n    self._strategy_cls = strategy\n    self._feeder_cls = feeder\n    self._exchange_cls = exchange\n    self._account_cls = account\n    self._commander_cls = commander\n    self._plotter_cls = plotter\n    self._stats_cls = stats\n    self._bot_cls = bot\n    self._name = name\n    self._kwargs = kwargs\n\n    # DataFeeds\n    self.datas = self._init_datafeeds(datas)\n    self.data = self.datas[0]\n</code></pre>"},{"location":"reference/exchange/backtest/backtest/#lettrade.exchange.backtest.backtest.LetTradeBackTest.data","title":"data  <code>instance-attribute</code>","text":"<pre><code>data: DataFeed = datas[0]\n</code></pre> <p>Main DataFeed for bot</p>"},{"location":"reference/exchange/backtest/backtest/#lettrade.exchange.backtest.backtest.LetTradeBackTest.datas","title":"datas  <code>instance-attribute</code>","text":"<pre><code>datas: list[DataFeed] = _init_datafeeds(datas)\n</code></pre> <p>DataFeed list for bot</p>"},{"location":"reference/exchange/backtest/backtest/#lettrade.exchange.backtest.backtest.LetTradeBackTest.optimize","title":"optimize","text":"<pre><code>optimize(\n    multiprocessing: Optional[str] = \"auto\",\n    workers: int = None,\n    **kwargs\n)\n</code></pre> <p>Backtest optimization</p> <p>Parameters:</p> <ul> <li> <code>multiprocessing</code>               (<code>Optional[str]</code>, default:                   <code>'auto'</code> )           \u2013            <p>description. Defaults to \"auto\".</p> </li> </ul> Source code in <code>lettrade/exchange/backtest/backtest.py</code> <pre><code>def optimize(\n    self,\n    multiprocessing: Optional[str] = \"auto\",\n    workers: int = None,\n    **kwargs,\n):\n    \"\"\"Backtest optimization\n\n    Args:\n        multiprocessing (Optional[str], optional): _description_. Defaults to \"auto\".\n    \"\"\"\n    if self.data.index.start != 0:\n        # TODO: Can drop unnecessary columns by snapshort data.columns from init time\n        raise RuntimeError(\n            \"Optimize datas is not clean, don't run() backtest before optimize()\"\n        )\n\n    optimizes = list(product(*(zip(repeat(k), v) for k, v in kwargs.items())))\n\n    # Disable logging\n    logging_filter_optimize()\n\n    # Disable commander\n    if self._commander_cls:\n        self._commander_cls = None\n\n    # Disable Plotter\n    if self._plotter_cls:\n        self._plotter_cls = None\n\n    # Queue to update process bar\n    processbar_queue = _t_process_bar(size=len(optimizes))\n\n    # Run optimize in multiprocessing\n    results = self._optimizes_multiproccess(\n        optimizes=optimizes,\n        multiprocessing=multiprocessing,\n        processbar_queue=processbar_queue,\n        workers=workers,\n    )\n\n    # Process bar queue None mean Done\n    try:\n        processbar_queue.put(None)\n    except Exception:\n        pass\n\n    print(\"results\", results)\n</code></pre>"},{"location":"reference/exchange/backtest/backtest/#lettrade.exchange.backtest.backtest.LetTradeBackTest.optimize_model","title":"optimize_model","text":"<pre><code>optimize_model(\n    params_parser: Callable[[Any], list[set[str, Any]]],\n    result_parser: Callable[[Statistic], float],\n    fork_data: bool = False,\n) -&gt; float | Any\n</code></pre> <p>Optimize function help to integrated with external optimizer</p> <p>Parameters:</p> <ul> <li> <code>params_parser</code>               (<code>Callable[[Any], list[set[str, Any]]]</code>)           \u2013            <p>Function help to parse external parameters to LetTrade optimize parameters. Example return: <code>[('ema_period', 21)]</code></p> </li> <li> <code>result_parser</code>               (<code>Callable[[Statistic], float]</code>)           \u2013            <p>Function help to get/calculate <code>score</code> from LetTrade <code>Statistic</code> result</p> </li> <li> <code>fork_data</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Flag to reset data everytime rerun optimize function. Defaults to False.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>float | Any</code>           \u2013            <p>float | Any: Return score and more for external optimizer</p> </li> </ul> Source code in <code>lettrade/exchange/backtest/backtest.py</code> <pre><code>def optimize_model(\n    self,\n    params_parser: Callable[[Any], list[set[str, Any]]],\n    result_parser: Callable[[Statistic], float],\n    fork_data: bool = False,\n) -&gt; float | Any:\n    \"\"\"Optimize function help to integrated with external optimizer\n\n    Args:\n        params_parser (Callable[[Any], list[set[str, Any]]]): Function help to parse external parameters to LetTrade optimize parameters. Example return: `[('ema_period', 21)]`\n        result_parser (Callable[[Statistic], float]): Function help to get/calculate `score` from LetTrade `Statistic` result\n        fork_data (bool, optional): Flag to reset data everytime rerun optimize function. Defaults to False.\n\n    Returns:\n        float | Any: Return score and more for external optimizer\n    \"\"\"\n    if self.data.index.start != 0:\n        raise RuntimeError(\n            \"Optimize datas is not clean, don't run() backtest before optimize()\"\n        )\n\n    self._opt_params_parser = params_parser\n    self._opt_result_parser = result_parser\n    self._opt_fork_data = fork_data\n\n    # Disable logging\n    logging_filter_optimize()\n\n    # Disable commander\n    if self._commander_cls:\n        self._commander_cls = None\n\n    # Disable Plotter\n    if self._plotter_cls:\n        self._plotter_cls = None\n\n    return self._optimize_model\n</code></pre>"},{"location":"reference/exchange/backtest/backtest/#lettrade.exchange.backtest.backtest.LetTradeBackTest.plot","title":"plot","text":"<pre><code>plot(*args, **kwargs)\n</code></pre> <p>Plot strategy result</p> Source code in <code>lettrade/lettrade.py</code> <pre><code>def plot(self, *args, **kwargs):\n    \"\"\"Plot strategy result\"\"\"\n    if self._plotter is not None:\n        return self._plotter.plot(*args, **kwargs)\n    if self._bot is not None:\n        return self._bot.plot(*args, **kwargs)\n</code></pre>"},{"location":"reference/exchange/backtest/backtest/#lettrade.exchange.backtest.backtest.LetTradeBackTest.run","title":"run","text":"<pre><code>run(worker: Optional[int] = None, *args, **kwargs)\n</code></pre> <p>Run strategy in single or multiple processing</p> <p>Parameters:</p> <ul> <li> <code>worker</code>               (<code>Optional[int]</code>, default:                   <code>None</code> )           \u2013            <p>Number of processing. Defaults to None.</p> </li> </ul> Source code in <code>lettrade/lettrade.py</code> <pre><code>def run(self, worker: Optional[int] = None, *args, **kwargs):\n    \"\"\"Run strategy in single or multiple processing\n\n    Args:\n        worker (Optional[int], optional): Number of processing. Defaults to None.\n    \"\"\"\n    if worker or isinstance(self.data, list):\n        if not isinstance(self.data, list):\n            self.data = self.datas\n            self.datas = [self.data]\n\n        if not worker:\n            worker = len(self.datas)\n        elif worker &gt; len(self.datas):\n            logger.warning(\n                \"Worker size %s is more then datas size %s\",\n                worker,\n                len(self.datas),\n            )\n            worker = len(self.datas)\n\n        self._multiprocess()\n        with ProcessPoolExecutor(max_workers=worker) as executor:\n            futures = [\n                executor.submit(\n                    self._run_process,\n                    datas=datas,\n                    index=i,\n                    multiprocess=\"worker\",\n                )\n                for i, datas in enumerate(self.datas)\n            ]\n            for future in futures:\n                result = future.result()\n                print(result)\n    else:\n        return self._run_process(*args, **kwargs)\n</code></pre>"},{"location":"reference/exchange/backtest/backtest/#lettrade.exchange.backtest.backtest.LetTradeBackTest.stop","title":"stop","text":"<pre><code>stop()\n</code></pre> <p>Stop strategy</p> Source code in <code>lettrade/lettrade.py</code> <pre><code>def stop(self):\n    \"\"\"Stop strategy\"\"\"\n    if self._bot is not None:\n        return self._bot.stop()\n</code></pre>"},{"location":"reference/exchange/backtest/backtest/#lettrade.exchange.backtest.backtest.let_backtest","title":"let_backtest","text":"<pre><code>let_backtest(\n    strategy: Type[Strategy],\n    datas: DataFeed | list[DataFeed] | str | list[str],\n    feeder: Type[DataFeeder] = BackTestDataFeeder,\n    exchange: Type[Exchange] = BackTestExchange,\n    account: Type[Account] = BackTestAccount,\n    commander: Optional[\n        Type[Commander]\n    ] = BackTestCommander,\n    plotter: Optional[Type[Plotter]] = PlotlyPlotter,\n    stats: Optional[Type[Statistic]] = Statistic,\n    cash: Optional[float] = 1000,\n    commission: Optional[float] = 0.002,\n    leverage: Optional[float] = 20,\n    bot: Optional[\n        Type[LetTradeBackTestBot]\n    ] = LetTradeBackTestBot,\n    **kwargs\n) -&gt; LetTradeBackTest\n</code></pre> <p>Complete <code>lettrade</code> backtest depenencies</p> <p>Parameters:</p> <ul> <li> <code>strategy</code>               (<code>Type[Strategy]</code>)           \u2013            <p>The Strategy implement class</p> </li> <li> <code>datas</code>               (<code>DataFeed | list[DataFeed] | str | list[str]</code>)           \u2013            <p>description</p> </li> <li> <code>feeder</code>               (<code>Type[DataFeeder]</code>, default:                   <code>BackTestDataFeeder</code> )           \u2013            <p>description. Defaults to BackTestDataFeeder.</p> </li> <li> <code>exchange</code>               (<code>Type[Exchange]</code>, default:                   <code>BackTestExchange</code> )           \u2013            <p>description. Defaults to BackTestExchange.</p> </li> <li> <code>account</code>               (<code>Type[Account]</code>, default:                   <code>BackTestAccount</code> )           \u2013            <p>description. Defaults to BackTestAccount.</p> </li> <li> <code>commander</code>               (<code>Optional[Type[Commander]]</code>, default:                   <code>BackTestCommander</code> )           \u2013            <p>description. Defaults to BackTestCommander.</p> </li> <li> <code>plotter</code>               (<code>Optional[Type[Plotter]]</code>, default:                   <code>PlotlyPlotter</code> )           \u2013            <p>description. Defaults to PlotlyPlotter.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>The validate parameter error</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>LetTradeBackTest</code> (              <code>LetTradeBackTest</code> )          \u2013            <p>The LetTrade backtesting object</p> </li> </ul> Source code in <code>lettrade/exchange/backtest/backtest.py</code> <pre><code>def let_backtest(\n    strategy: Type[Strategy],\n    datas: DataFeed | list[DataFeed] | str | list[str],\n    feeder: Type[DataFeeder] = BackTestDataFeeder,\n    exchange: Type[Exchange] = BackTestExchange,\n    account: Type[Account] = BackTestAccount,\n    commander: Optional[Type[Commander]] = BackTestCommander,\n    plotter: Optional[Type[\"Plotter\"]] = PlotlyPlotter,\n    stats: Optional[Type[Statistic]] = Statistic,\n    cash: Optional[float] = 1_000,\n    commission: Optional[float] = 0.002,\n    leverage: Optional[float] = 20,\n    bot: Optional[Type[LetTradeBackTestBot]] = LetTradeBackTestBot,\n    **kwargs,\n) -&gt; \"LetTradeBackTest\":\n    \"\"\"Complete `lettrade` backtest depenencies\n\n    Args:\n        strategy (Type[Strategy]): The Strategy implement class\n        datas (DataFeed | list[DataFeed] | str | list[str]): _description_\n        feeder (Type[DataFeeder], optional): _description_. Defaults to BackTestDataFeeder.\n        exchange (Type[Exchange], optional): _description_. Defaults to BackTestExchange.\n        account (Type[Account], optional): _description_. Defaults to BackTestAccount.\n        commander (Optional[Type[Commander]], optional): _description_. Defaults to BackTestCommander.\n        plotter (Optional[Type[Plotter]], optional): _description_. Defaults to PlotlyPlotter.\n\n    Raises:\n        RuntimeError: The validate parameter error\n\n    Returns:\n        LetTradeBackTest: The LetTrade backtesting object\n    \"\"\"\n    account_kwargs: dict = kwargs.setdefault(\"account_kwargs\", {})\n    account_kwargs.update(\n        cash=cash,\n        commission=commission,\n        leverage=leverage,\n    )\n\n    return LetTradeBackTest(\n        strategy=strategy,\n        datas=datas,\n        feeder=feeder,\n        exchange=exchange,\n        commander=commander,\n        account=account,\n        plotter=plotter,\n        stats=stats,\n        bot=bot,\n        **kwargs,\n    )\n</code></pre>"},{"location":"reference/exchange/backtest/commander/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> commander","text":""},{"location":"reference/exchange/backtest/commander/#lettrade.exchange.backtest.commander","title":"commander","text":""},{"location":"reference/exchange/backtest/commander/#lettrade.exchange.backtest.commander.BackTestCommander","title":"BackTestCommander","text":"<pre><code>BackTestCommander()\n</code></pre> <p>               Bases: <code>Commander</code></p> <p>BackTest Commander to debug commander notify</p> Source code in <code>lettrade/commander/commander.py</code> <pre><code>def __init__(self) -&gt; None:\n    super().__init__()\n</code></pre>"},{"location":"reference/exchange/backtest/commander/#lettrade.exchange.backtest.commander.BackTestCommander.init","title":"init","text":"<pre><code>init(\n    lettrade: LetTrade,\n    brain: Brain,\n    exchange: Exchange,\n    strategy: Strategy,\n)\n</code></pre> <p>Init commander dependencies</p> <p>Parameters:</p> <ul> <li> <code>lettrade</code>               (<code>LetTrade</code>)           \u2013            <p>LetTrade object</p> </li> <li> <code>brain</code>               (<code>Brain</code>)           \u2013            <p>Brain of bot</p> </li> <li> <code>exchange</code>               (<code>Exchange</code>)           \u2013            <p>Manage bot trading</p> </li> <li> <code>strategy</code>               (<code>Strategy</code>)           \u2013            <p>Strategy of bot</p> </li> </ul> Source code in <code>lettrade/commander/commander.py</code> <pre><code>def init(\n    self,\n    lettrade: \"LetTrade\",\n    brain: \"Brain\",\n    exchange: \"Exchange\",\n    strategy: \"Strategy\",\n):\n    \"\"\"Init commander dependencies\n\n    Args:\n        lettrade (LetTrade): LetTrade object\n        brain (Brain): Brain of bot\n        exchange (Exchange): Manage bot trading\n        strategy (Strategy): Strategy of bot\n    \"\"\"\n    self.lettrade = lettrade\n    self.brain = brain\n    self.exchange = exchange\n    self.strategy = strategy\n\n    self._name = self.lettrade._name\n</code></pre>"},{"location":"reference/exchange/backtest/exchange/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> exchange","text":""},{"location":"reference/exchange/backtest/exchange/#lettrade.exchange.backtest.exchange","title":"exchange","text":""},{"location":"reference/exchange/backtest/exchange/#lettrade.exchange.backtest.exchange.BackTestExchange","title":"BackTestExchange","text":"<pre><code>BackTestExchange()\n</code></pre> <p>               Bases: <code>Exchange</code></p> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def __init__(self):\n    self.executes = dict()\n    self.orders = dict()\n    self.history_orders = dict()\n    self.trades = dict()\n    self.history_trades = dict()\n    self.positions = dict()\n\n    self._state = ExchangeState.Init\n</code></pre>"},{"location":"reference/exchange/backtest/exchange/#lettrade.exchange.backtest.exchange.BackTestExchange.data","title":"data  <code>instance-attribute</code>","text":"<pre><code>data: DataFeed\n</code></pre> <p>main DataFeed</p>"},{"location":"reference/exchange/backtest/exchange/#lettrade.exchange.backtest.exchange.BackTestExchange.datas","title":"datas  <code>instance-attribute</code>","text":"<pre><code>datas: list[DataFeed]\n</code></pre> <p>List of all available DataFeed</p>"},{"location":"reference/exchange/backtest/exchange/#lettrade.exchange.backtest.exchange.BackTestExchange.executes","title":"executes  <code>instance-attribute</code>","text":"<pre><code>executes: dict[str, Execute] = dict()\n</code></pre> <p>Execute dict by <code>Execute.id</code> key</p>"},{"location":"reference/exchange/backtest/exchange/#lettrade.exchange.backtest.exchange.BackTestExchange.history_orders","title":"history_orders  <code>instance-attribute</code>","text":"<pre><code>history_orders: dict[str, Order] = dict()\n</code></pre> <p>History Order dict by <code>Order.id</code> key</p>"},{"location":"reference/exchange/backtest/exchange/#lettrade.exchange.backtest.exchange.BackTestExchange.history_trades","title":"history_trades  <code>instance-attribute</code>","text":"<pre><code>history_trades: dict[str, Trade] = dict()\n</code></pre> <p>History Order dict by <code>Order.id</code> key</p>"},{"location":"reference/exchange/backtest/exchange/#lettrade.exchange.backtest.exchange.BackTestExchange.orders","title":"orders  <code>instance-attribute</code>","text":"<pre><code>orders: dict[str, Order] = dict()\n</code></pre> <p>Available Order dict by <code>Order.id</code> key</p>"},{"location":"reference/exchange/backtest/exchange/#lettrade.exchange.backtest.exchange.BackTestExchange.positions","title":"positions  <code>instance-attribute</code>","text":"<pre><code>positions: dict[str, Position] = dict()\n</code></pre> <p>Available Position dict by <code>Position.id</code> key</p>"},{"location":"reference/exchange/backtest/exchange/#lettrade.exchange.backtest.exchange.BackTestExchange.trades","title":"trades  <code>instance-attribute</code>","text":"<pre><code>trades: dict[str, Trade] = dict()\n</code></pre> <p>Available Trade dict by <code>Trade.id</code> key</p>"},{"location":"reference/exchange/backtest/exchange/#lettrade.exchange.backtest.exchange.BackTestExchange.init","title":"init","text":"<pre><code>init(\n    brain: Brain,\n    feeder: DataFeeder,\n    account: Account,\n    commander: Commander,\n) -&gt; None\n</code></pre> <p>Init Exchange dependencies. Set data/datas from feeder. Set state to <code>ExchangeState.Start</code>.</p> <p>Parameters:</p> <ul> <li> <code>brain</code>               (<code>Brain</code>)           \u2013            <p>description</p> </li> <li> <code>feeder</code>               (<code>DataFeeder</code>)           \u2013            <p>description</p> </li> <li> <code>account</code>               (<code>Account</code>)           \u2013            <p>description</p> </li> <li> <code>commander</code>               (<code>Commander</code>)           \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def init(\n    self,\n    brain: \"Brain\",\n    feeder: DataFeeder,\n    account: Account,\n    commander: Commander,\n) -&gt; None:\n    \"\"\"Init Exchange dependencies.\n    Set data/datas from feeder.\n    Set state to `ExchangeState.Start`.\n\n    Args:\n        brain (Brain): _description_\n        feeder (DataFeeder): _description_\n        account (Account): _description_\n        commander (Commander): _description_\n    \"\"\"\n    self._brain = brain\n    self._feeder = feeder\n    self._account = account\n    self._commander = commander\n\n    self.data = self._feeder.data\n    self.datas = self._feeder.datas\n\n    self._account.init(exchange=self)\n\n    self._state = ExchangeState.Start\n</code></pre>"},{"location":"reference/exchange/backtest/exchange/#lettrade.exchange.backtest.exchange.BackTestExchange.new_order","title":"new_order","text":"<pre><code>new_order(\n    size: float,\n    type: Optional[OrderType] = OrderType.Market,\n    limit: Optional[float] = None,\n    stop: Optional[float] = None,\n    sl: Optional[float] = None,\n    tp: Optional[float] = None,\n    tag: Optional[object] = None,\n    data: Optional[DataFeed] = None,\n    **kwargs\n) -&gt; OrderResult\n</code></pre> <p>Place new order. Then send order events to <code>Brain</code></p> <p>Parameters:</p> <ul> <li> <code>size</code>               (<code>float</code>)           \u2013            <p>description</p> </li> <li> <code>type</code>               (<code>Optional[OrderType]</code>, default:                   <code>Market</code> )           \u2013            <p>description. Defaults to OrderType.Market.</p> </li> <li> <code>limit</code>               (<code>Optional[float]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>stop</code>               (<code>Optional[float]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>sl</code>               (<code>Optional[float]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>tp</code>               (<code>Optional[float]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>tag</code>               (<code>Optional[object]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>data</code>               (<code>Optional[DataFeed]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>**kwargs</code>               (<code>Optional[dict]</code>, default:                   <code>{}</code> )           \u2013            <p>Extra-parameters</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>OrderResult</code> (              <code>OrderResult</code> )          \u2013            <p>Result when place new <code>Order</code></p> </li> </ul> Source code in <code>lettrade/exchange/backtest/exchange.py</code> <pre><code>def new_order(\n    self,\n    size: float,\n    type: Optional[OrderType] = OrderType.Market,\n    limit: Optional[float] = None,\n    stop: Optional[float] = None,\n    sl: Optional[float] = None,\n    tp: Optional[float] = None,\n    tag: Optional[object] = None,\n    data: Optional[DataFeed] = None,\n    **kwargs\n) -&gt; OrderResult:\n    \"\"\"Place new order.\n    Then send order events to `Brain`\n\n    Args:\n        size (float): _description_\n        type (Optional[OrderType], optional): _description_. Defaults to OrderType.Market.\n        limit (Optional[float], optional): _description_. Defaults to None.\n        stop (Optional[float], optional): _description_. Defaults to None.\n        sl (Optional[float], optional): _description_. Defaults to None.\n        tp (Optional[float], optional): _description_. Defaults to None.\n        tag (Optional[object], optional): _description_. Defaults to None.\n        data (Optional[DataFeed], optional): _description_. Defaults to None.\n        **kwargs (Optional[dict], optional): Extra-parameters\n\n    Returns:\n        OrderResult: Result when place new `Order`\n    \"\"\"\n    if not data:\n        data = self.data\n\n    if type == OrderType.Market:\n        limit = 0\n        stop = 0\n\n    order = BackTestOrder(\n        id=self._id(),\n        exchange=self,\n        data=data,\n        size=size,\n        type=type,\n        limit_price=limit,\n        stop_price=stop,\n        sl_price=sl,\n        tp_price=tp,\n        tag=tag,\n        open_price=self.data.open[0],\n        open_at=self.data.bar(),\n    )\n    ok = order.place()\n\n    if __debug__:\n        logger.info(\"New order %s at %s\", order, self.data.now)\n\n    # Simulate market order will send event before return order result\n    self._simulate_orders()\n\n    return ok\n</code></pre>"},{"location":"reference/exchange/backtest/exchange/#lettrade.exchange.backtest.exchange.BackTestExchange.next","title":"next","text":"<pre><code>next()\n</code></pre> <p>Execute when new data feeded</p> Source code in <code>lettrade/exchange/backtest/exchange.py</code> <pre><code>def next(self):\n    \"\"\"Execute when new data feeded\"\"\"\n    self._simulate_orders()\n    super().next()\n</code></pre>"},{"location":"reference/exchange/backtest/exchange/#lettrade.exchange.backtest.exchange.BackTestExchange.on_execute","title":"on_execute","text":"<pre><code>on_execute(\n    execute: Execute,\n    broadcast: Optional[bool] = True,\n    **kwargs\n) -&gt; None\n</code></pre> <p>Receive Execute event from exchange then store and notify Brain</p> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def on_execute(\n    self,\n    execute: Execute,\n    broadcast: Optional[bool] = True,\n    **kwargs,\n) -&gt; None:\n    \"\"\"\n    Receive Execute event from exchange then store and notify Brain\n    \"\"\"\n    if not isinstance(execute, Execute):\n        raise RuntimeError(f\"{execute} is not instance of type Execute\")\n\n    if execute.id in self.executes:\n        # Merge to keep Execute handler for strategy using\n        # when strategy want to store Execute object\n        # and object will be automatic update directly\n        self.executes[execute.id].merge(execute)\n        execute = self.executes[execute.id]\n    else:\n        self.executes[execute.id] = execute\n\n    if self._state != ExchangeState.Run:\n        return\n\n    if broadcast:\n        self._brain.on_execute(execute)\n</code></pre>"},{"location":"reference/exchange/backtest/exchange/#lettrade.exchange.backtest.exchange.BackTestExchange.on_order","title":"on_order","text":"<pre><code>on_order(\n    order: Order, broadcast: Optional[bool] = True, **kwargs\n) -&gt; None\n</code></pre> <p>Receive Order event from exchange then store and notify Brain</p> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def on_order(\n    self,\n    order: Order,\n    broadcast: Optional[bool] = True,\n    **kwargs,\n) -&gt; None:\n    \"\"\"\n    Receive Order event from exchange then store and notify Brain\n    \"\"\"\n    if not isinstance(order, Order):\n        raise RuntimeError(f\"{order} is not instance of type Order\")\n\n    if order.state in [OrderState.Executed, OrderState.Canceled]:\n        self.history_orders[order.id] = order\n        if order.id in self.orders:\n            del self.orders[order.id]\n    else:\n        if order.id in self.history_orders:\n            raise RuntimeError(f\"Order {order.id} closed\")\n\n        if order.id in self.orders:\n            # Merge to keep Order handler for strategy using\n            # when strategy want to store Order object\n            # and object will be automatic update directly\n            self.orders[order.id].merge(order)\n            order = self.orders[order.id]\n        else:\n            self.orders[order.id] = order\n\n    if self._state != ExchangeState.Run:\n        return\n\n    if broadcast:\n        self._brain.on_order(order)\n</code></pre>"},{"location":"reference/exchange/backtest/exchange/#lettrade.exchange.backtest.exchange.BackTestExchange.on_position","title":"on_position","text":"<pre><code>on_position(\n    position: Position,\n    broadcast: Optional[bool] = True,\n    *args,\n    **kwargs\n) -&gt; None\n</code></pre> <p>Receive Position event from exchange then store and notify Brain</p> <p>Parameters:</p> <ul> <li> <code>position</code>               (<code>Position</code>)           \u2013            <p>description</p> </li> <li> <code>broadcast</code>               (<code>Optional[bool]</code>, default:                   <code>True</code> )           \u2013            <p>description. Defaults to True.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>check <code>Position</code> instance</p> </li> </ul> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def on_position(\n    self,\n    position: Position,\n    broadcast: Optional[bool] = True,\n    *args,\n    **kwargs,\n) -&gt; None:\n    \"\"\"Receive Position event from exchange then store and notify Brain\n\n\n    Args:\n        position (Position): _description_\n        broadcast (Optional[bool], optional): _description_. Defaults to True.\n\n    Raises:\n        RuntimeError: check `Position` instance\n    \"\"\"\n    if not isinstance(position, Position):\n        raise RuntimeError(f\"{position} is not instance of type Position\")\n\n    if position.id in self.positions:\n        # Merge to keep Position handler for strategy using\n        # when strategy want to store Position object\n        # and object will be automatic update directly\n        self.positions[position.id].merge(position)\n    else:\n        self.positions[position.id] = position\n\n    if self._state != ExchangeState.Run:\n        return\n\n    if broadcast:\n        self._brain.on_position(position)\n</code></pre>"},{"location":"reference/exchange/backtest/exchange/#lettrade.exchange.backtest.exchange.BackTestExchange.on_trade","title":"on_trade","text":"<pre><code>on_trade(\n    trade: Trade,\n    broadcast: Optional[bool] = True,\n    *args,\n    **kwargs\n) -&gt; None\n</code></pre> <p>Receive Trade event from exchange then store and notify Brain</p> <p>Parameters:</p> <ul> <li> <code>trade</code>               (<code>Trade</code>)           \u2013            <p>new comming <code>Trade</code></p> </li> <li> <code>broadcast</code>               (<code>Optional[bool]</code>, default:                   <code>True</code> )           \u2013            <p>Flag notify for Brain. Defaults to True.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>validat <code>Trade</code> instance</p> </li> </ul> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def on_trade(\n    self,\n    trade: Trade,\n    broadcast: Optional[bool] = True,\n    *args,\n    **kwargs,\n) -&gt; None:\n    \"\"\"Receive Trade event from exchange then store and notify Brain\n\n    Args:\n        trade (Trade): new comming `Trade`\n        broadcast (Optional[bool], optional): Flag notify for Brain. Defaults to True.\n\n    Raises:\n        RuntimeError: validat `Trade` instance\n    \"\"\"\n    if not isinstance(trade, Trade):\n        raise RuntimeError(f\"{trade} is not instance of type Trade\")\n\n    if trade.state == TradeState.Exit:\n        self.history_trades[trade.id] = trade\n        if trade.id in self.trades:\n            del self.trades[trade.id]\n\n        self._account._on_trade_exit(trade)\n    else:\n        if trade.id in self.history_trades:\n            raise RuntimeError(f\"Order {trade.id} closed\")\n        if trade.id in self.trades:\n            # Merge to keep Trade handler for strategy using\n            # when strategy want to store Trade object\n            # and object will be automatic update directly\n            self.trades[trade.id].merge(trade)\n            trade = self.trades[trade.id]\n        else:\n            self.trades[trade.id] = trade\n\n    if self._state != ExchangeState.Run:\n        return\n\n    if broadcast:\n        self._brain.on_trade(trade)\n</code></pre>"},{"location":"reference/exchange/backtest/exchange/#lettrade.exchange.backtest.exchange.BackTestExchange.start","title":"start","text":"<pre><code>start() -&gt; None\n</code></pre> <p>Start of Exchange by: - Start account. - Set state to <code>ExchangeState.Run</code> ready for next().</p> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def start(self) -&gt; None:\n    \"\"\"Start of Exchange by:\n    - Start account.\n    - Set state to `ExchangeState.Run` ready for next().\n    \"\"\"\n    self._account.start()\n    self._state = ExchangeState.Run\n</code></pre>"},{"location":"reference/exchange/backtest/exchange/#lettrade.exchange.backtest.exchange.BackTestExchange.stop","title":"stop","text":"<pre><code>stop() -&gt; None\n</code></pre> <p>Stop Exchange</p> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def stop(self) -&gt; None:\n    \"\"\"Stop Exchange\"\"\"\n    self._state = ExchangeState.Stop\n    self._account.stop()\n</code></pre>"},{"location":"reference/exchange/backtest/feeder/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> feeder","text":""},{"location":"reference/exchange/backtest/feeder/#lettrade.exchange.backtest.feeder","title":"feeder","text":""},{"location":"reference/exchange/backtest/feeder/#lettrade.exchange.backtest.feeder.BackTestDataFeeder","title":"BackTestDataFeeder","text":"<p>               Bases: <code>DataFeeder</code></p> <p>BackTest DataFeeder</p>"},{"location":"reference/exchange/backtest/feeder/#lettrade.exchange.backtest.feeder.BackTestDataFeeder.is_continous","title":"is_continous  <code>property</code>","text":"<pre><code>is_continous\n</code></pre> <p>Flag check is realtime continous datafeeder</p>"},{"location":"reference/exchange/backtest/trade/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> trade","text":""},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade","title":"trade","text":""},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestExecute","title":"BackTestExecute","text":"<pre><code>BackTestExecute(\n    id: str,\n    exchange: Exchange,\n    data: DataFeed,\n    size: float,\n    price: float,\n    at: float,\n    order_id: str = None,\n    order: Order = None,\n    trade_id: str = None,\n    trade: Trade = None,\n)\n</code></pre> <p>               Bases: <code>Execute</code></p> <p>Execute for backtesting</p> Source code in <code>lettrade/exchange/execute.py</code> <pre><code>def __init__(\n    self,\n    id: str,\n    exchange: \"Exchange\",\n    data: \"DataFeed\",\n    size: float,\n    price: float,\n    at: float,\n    order_id: str = None,\n    order: \"Order\" = None,\n    trade_id: str = None,\n    trade: \"Trade\" = None,\n):\n    super().__init__(\n        id=id,\n        exchange=exchange,\n        data=data,\n        size=size,\n    )\n    self.order_id = order_id\n    self.order: \"Order\" = order\n    self.trade_id = trade_id\n    self.trade: \"Trade\" = trade\n    self.price = price\n    self.at = at\n</code></pre>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestOrder","title":"BackTestOrder","text":"<pre><code>BackTestOrder(\n    id: str,\n    exchange: Exchange,\n    data: DataFeed,\n    size: float,\n    state: OrderState = OrderState.Pending,\n    type: OrderType = OrderType.Market,\n    limit_price: Optional[float] = None,\n    stop_price: Optional[float] = None,\n    sl_price: Optional[float] = None,\n    tp_price: Optional[float] = None,\n    trade: Optional[Trade] = None,\n    tag: object = None,\n    open_at: int = None,\n    open_price: int = None,\n)\n</code></pre> <p>               Bases: <code>Order</code></p> <p>Order for backtesting</p> Source code in <code>lettrade/exchange/order.py</code> <pre><code>def __init__(\n    self,\n    id: str,\n    exchange: \"Exchange\",\n    data: \"DataFeed\",\n    size: float,\n    state: OrderState = OrderState.Pending,\n    type: OrderType = OrderType.Market,\n    limit_price: Optional[float] = None,\n    stop_price: Optional[float] = None,\n    sl_price: Optional[float] = None,\n    tp_price: Optional[float] = None,\n    trade: Optional[\"Trade\"] = None,\n    tag: object = None,\n    open_at: int = None,\n    open_price: int = None,\n):\n    super().__init__(\n        id=id,\n        exchange=exchange,\n        data=data,\n        size=size,\n    )\n\n    self.type: OrderType = type\n    self.state: OrderState = state\n    self.limit_price: Optional[float] = limit_price\n    self.stop_price: Optional[float] = stop_price\n    self.sl_price: Optional[float] = sl_price\n    self.tp_price: Optional[float] = tp_price\n    self.trade: Optional[\"Trade\"] = trade\n    self.tag: object = tag\n\n    self.open_at: int = open_at\n    self.open_price: int = open_price\n    self.entry_at: int = None\n    self.entry_price: int = None\n</code></pre>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestOrder.is_alive","title":"is_alive  <code>property</code>","text":"<pre><code>is_alive: bool\n</code></pre> <p>Flag to check <code>Order</code> still alive</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True if <code>state</code> in [OrderState.Pending, OrderState.Placed]</p> </li> </ul>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestOrder.is_long","title":"is_long  <code>property</code>","text":"<pre><code>is_long: bool\n</code></pre> <p>True if the order is long (order size is positive).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True/False</p> </li> </ul>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestOrder.is_short","title":"is_short  <code>property</code>","text":"<pre><code>is_short: bool\n</code></pre> <p>True if the order is short (order size is negative).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestOrder.is_sl_order","title":"is_sl_order  <code>property</code>","text":"<pre><code>is_sl_order: bool\n</code></pre> <p><code>Order</code> is stop-loss order of a <code>Trade</code></p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestOrder.is_tp_order","title":"is_tp_order  <code>property</code>","text":"<pre><code>is_tp_order: bool\n</code></pre> <p><code>Order</code> is take-profit order of a <code>Trade</code></p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestOrder.limit","title":"limit  <code>property</code>","text":"<pre><code>limit: Optional[float]\n</code></pre> <p>Getter of limit_price</p> <p>Returns:</p> <ul> <li> <code>Optional[float]</code>           \u2013            <p>Optional[float]: <code>float</code> or <code>None</code></p> </li> </ul>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestOrder.sl","title":"sl  <code>property</code>","text":"<pre><code>sl: Optional[float]\n</code></pre> <p>Getter of sl_price</p> <p>Returns:</p> <ul> <li> <code>Optional[float]</code>           \u2013            <p>Optional[float]: <code>float</code> or <code>None</code></p> </li> </ul>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestOrder.stop","title":"stop  <code>property</code>","text":"<pre><code>stop: Optional[float]\n</code></pre> <p>Getter of stop_price</p> <p>Returns:</p> <ul> <li> <code>Optional[float]</code>           \u2013            <p>Optional[float]: <code>float</code> or <code>None</code></p> </li> </ul>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestOrder.tp","title":"tp  <code>property</code>","text":"<pre><code>tp: Optional[float]\n</code></pre> <p>Getter of tp_price</p> <p>Returns:</p> <ul> <li> <code>Optional[float]</code>           \u2013            <p>Optional[float]: <code>float</code> or <code>None</code></p> </li> </ul>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestOrder.build_execute","title":"build_execute","text":"<pre><code>build_execute(\n    price: float, at: object, size: Optional[float] = None\n) -&gt; BackTestExecute\n</code></pre> <p>Method help to build Execute object from Order object</p> <p>Parameters:</p> <ul> <li> <code>price</code>               (<code>float</code>)           \u2013            <p>Executed price</p> </li> <li> <code>at</code>               (<code>object</code>)           \u2013            <p>Executed bar</p> </li> <li> <code>size</code>               (<code>Optional[float]</code>, default:                   <code>None</code> )           \u2013            <p>Executed size. Defaults to None.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>BackTestExecute</code> (              <code>BackTestExecute</code> )          \u2013            <p>Execute object</p> </li> </ul> Source code in <code>lettrade/exchange/backtest/trade.py</code> <pre><code>def build_execute(\n    self,\n    price: float,\n    at: object,\n    size: Optional[float] = None,\n) -&gt; BackTestExecute:\n    \"\"\"Method help to build Execute object from Order object\n\n    Args:\n        price (float): Executed price\n        at (object): Executed bar\n        size (Optional[float], optional): Executed size. Defaults to None.\n\n    Returns:\n        BackTestExecute: Execute object\n    \"\"\"\n    return BackTestExecute(\n        id=self.id,\n        size=size or self.size,\n        exchange=self.exchange,\n        data=self.data,\n        price=price,\n        at=at,\n        order=self,\n    )\n</code></pre>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestOrder.build_trade","title":"build_trade","text":"<pre><code>build_trade(\n    size: float = None, state: TradeState = TradeState.Open\n) -&gt; BackTestTrade\n</code></pre> <p>Build Trade object from Order object</p> <p>Parameters:</p> <ul> <li> <code>size</code>               (<code>float</code>, default:                   <code>None</code> )           \u2013            <p>Size of Trade object. Defaults to None.</p> </li> <li> <code>state</code>               (<code>TradeState</code>, default:                   <code>Open</code> )           \u2013            <p>State of Trade object. Defaults to TradeState.Open.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>BackTestTrade</code> (              <code>BackTestTrade</code> )          \u2013            <p>Trade object</p> </li> </ul> Source code in <code>lettrade/exchange/backtest/trade.py</code> <pre><code>def build_trade(\n    self,\n    size: float = None,\n    state: TradeState = TradeState.Open,\n) -&gt; \"BackTestTrade\":\n    \"\"\"Build Trade object from Order object\n\n    Args:\n        size (float, optional): Size of Trade object. Defaults to None.\n        state (TradeState, optional): State of Trade object. Defaults to TradeState.Open.\n\n    Returns:\n        BackTestTrade: Trade object\n    \"\"\"\n    trade = BackTestTrade(\n        id=self.id,\n        size=size or self.size,\n        exchange=self.exchange,\n        data=self.data,\n        state=state,\n        parent=self,\n    )\n    self.trade = trade\n    return trade\n</code></pre>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestOrder.cancel","title":"cancel","text":"<pre><code>cancel()\n</code></pre> <p>Cancel the Order and notify Exchange</p> Source code in <code>lettrade/exchange/backtest/trade.py</code> <pre><code>def cancel(self):\n    \"\"\"Cancel the Order and notify Exchange\"\"\"\n    if self.state is not OrderState.Placed:\n        return\n\n    self.state = OrderState.Canceled\n    if self.trade:\n        if self is self.trade.sl_order:\n            self.trade.sl_order = None\n        elif self is self.trade.tp_order:\n            self.trade.tp_order = None\n\n    self.exchange.on_order(self)\n</code></pre>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestOrder.execute","title":"execute","text":"<pre><code>execute(price: float, at: object) -&gt; BackTestExecute\n</code></pre> <p>Execute order and notify for Exchange</p> <p>Parameters:</p> <ul> <li> <code>price</code>               (<code>float</code>)           \u2013            <p>Executed price</p> </li> <li> <code>at</code>               (<code>object</code>)           \u2013            <p>Executed bar</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>BackTestExecute</code> (              <code>BackTestExecute</code> )          \u2013            <p>Execute object</p> </li> </ul> Source code in <code>lettrade/exchange/backtest/trade.py</code> <pre><code>def execute(self, price: float, at: object) -&gt; BackTestExecute:\n    \"\"\"Execute order and notify for Exchange\n\n    Args:\n        price (float): Executed price\n        at (object): Executed bar\n\n    Raises:\n        RuntimeError: _description_\n\n    Returns:\n        BackTestExecute: Execute object\n    \"\"\"\n    if self.state != OrderState.Placed:\n        raise RuntimeError(f\"Execute a {self.state} order\")\n\n    # Order\n    super().execute(price=price, at=at)\n\n    # Execute\n    execute: BackTestExecute = self.build_execute(price=price, at=at)\n    execute.execute()\n\n    # Trade hit SL/TP\n    if self.trade:\n        self.trade.exit(price=price, at=at, caller=self)\n    else:\n        # Trade: Place and create new trade\n        trade = self.build_trade()\n        if self.sl_price:\n            trade._new_sl_order()\n        if self.tp_price:\n            trade._new_tp_order()\n        trade.entry(price=price, at=at)\n\n    return execute\n</code></pre>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestOrder.merge","title":"merge","text":"<pre><code>merge(other: Order)\n</code></pre> <p>Update current <code>Order</code> variables by other <code>Order</code></p> <p>Parameters:</p> <ul> <li> <code>other</code>               (<code>Order</code>)           \u2013            <p>Merge source <code>Order</code></p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>Validate same id</p> </li> </ul> Source code in <code>lettrade/exchange/order.py</code> <pre><code>def merge(self, other: \"Order\"):\n    \"\"\"Update current `Order` variables by other `Order`\n\n    Args:\n        other (Order): Merge source `Order`\n\n    Raises:\n        RuntimeError: Validate same id\n    \"\"\"\n    if other is self:\n        return\n\n    if self.id != other.id:\n        raise RuntimeError(f\"Merge difference id {self.id} != {other.id} order\")\n\n    self.size = other.size\n    self.sl_price = other.sl_price\n    self.tp_price = other.tp_price\n\n    if other.open_price:\n        self.open_price = other.open_price\n    if other.open_at:\n        self.open_at = other.open_at\n    if other.entry_price:\n        self.entry_price = other.entry_price\n    if other.entry_at:\n        self.entry_at = other.entry_at\n    if other.trade:\n        self.trade = other.trade\n</code></pre>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestOrder.place","title":"place","text":"<pre><code>place() -&gt; OrderResult\n</code></pre> <p>Place <code>Order</code> Set <code>status</code> to <code>OrderState.Placed</code>. Send event to <code>Exchange</code></p> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>OrderResult</code> (              <code>OrderResult</code> )          \u2013            <p>result of <code>Order</code></p> </li> </ul> Source code in <code>lettrade/exchange/order.py</code> <pre><code>def place(self) -&gt; \"OrderResult\":\n    \"\"\"Place `Order`\n    Set `status` to `OrderState.Placed`.\n    Send event to `Exchange`\n\n    Raises:\n        RuntimeError: _description_\n\n    Returns:\n        OrderResult: result of `Order`\n    \"\"\"\n    if self.state != OrderState.Pending:\n        raise RuntimeError(f\"Order {self.id} state {self.state} is not Pending\")\n\n    self.state = OrderState.Placed\n    self.exchange.on_order(self)\n    return OrderResultOk(order=self)\n</code></pre>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestTrade","title":"BackTestTrade","text":"<pre><code>BackTestTrade(\n    id: str,\n    exchange: Exchange,\n    data: DataFeed,\n    size: float,\n    parent: Order,\n    tag: object = \"\",\n    state: TradeState = TradeState.Open,\n    entry_price: Optional[float] = None,\n    entry_at: Optional[int] = None,\n    sl_order: Optional[Order] = None,\n    tp_order: Optional[Order] = None,\n)\n</code></pre> <p>               Bases: <code>Trade</code></p> <p>Trade for backtesting</p> Source code in <code>lettrade/exchange/trade.py</code> <pre><code>def __init__(\n    self,\n    id: str,\n    exchange: \"Exchange\",\n    data: \"DataFeed\",\n    size: float,\n    parent: \"Order\",\n    tag: object = \"\",\n    state: TradeState = TradeState.Open,\n    entry_price: Optional[float] = None,\n    entry_at: Optional[int] = None,\n    sl_order: Optional[Order] = None,\n    tp_order: Optional[Order] = None,\n):\n    super().__init__(\n        id=id,\n        exchange=exchange,\n        data=data,\n        size=size,\n    )\n    self._account = self.exchange._account\n\n    self.state = state\n    self.tag: object = tag\n    self.parent: \"Order\" = parent\n\n    self.entry_price: Optional[float] = entry_price\n    self.entry_at: Optional[int] = entry_at\n    self.exit_price: Optional[float] = None\n    self.exit_at: Optional[int] = None\n    self.exit_pl: Optional[float] = None\n    self.exit_fee: Optional[float] = None\n    self.sl_order: Optional[Order] = sl_order\n    self.tp_order: Optional[Order] = tp_order\n</code></pre>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestTrade.fee","title":"fee  <code>property</code>","text":"<pre><code>fee: float\n</code></pre> <p>Fee/Estimate Fee for trade</p> <p>Returns:</p> <ul> <li> <code>float</code> (              <code>float</code> )          \u2013            <p>Fee</p> </li> </ul>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestTrade.is_exited","title":"is_exited  <code>property</code>","text":"<pre><code>is_exited: bool\n</code></pre> <p>Flag to check Trade state.</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True if the trade exited</p> </li> </ul>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestTrade.is_long","title":"is_long  <code>property</code>","text":"<pre><code>is_long: bool\n</code></pre> <p>Flag to check Trade is long side.</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True if the trade is long (trade size is positive).</p> </li> </ul>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestTrade.is_short","title":"is_short  <code>property</code>","text":"<pre><code>is_short: bool\n</code></pre> <p>Flag to check Trade is short side.</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True if the trade is short (trade size is negative).</p> </li> </ul>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestTrade.pl","title":"pl  <code>property</code>","text":"<pre><code>pl: float\n</code></pre> <p>Estimate Profit or Loss of Trade</p> <p>Returns:</p> <ul> <li> <code>float</code> (              <code>float</code> )          \u2013            <p>PnL</p> </li> </ul>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestTrade.exit","title":"exit","text":"<pre><code>exit(price: float, at: object, caller=None)\n</code></pre> <p>Exit trade</p> <p>Parameters:</p> <ul> <li> <code>price</code>               (<code>float</code>)           \u2013            <p>Exit price</p> </li> <li> <code>at</code>               (<code>object</code>)           \u2013            <p>Exit bar</p> </li> <li> <code>caller</code>               (<code>_type_</code>, default:                   <code>None</code> )           \u2013            <p>Skip caller to prevent infinite recursion loop. Defaults to None.</p> </li> </ul> Source code in <code>lettrade/exchange/backtest/trade.py</code> <pre><code>def exit(self, price: float, at: object, caller=None):\n    \"\"\"Exit trade\n\n    Args:\n        price (float): Exit price\n        at (object): Exit bar\n        caller (_type_, optional): Skip caller to prevent infinite recursion loop. Defaults to None.\n    \"\"\"\n    if self.state != TradeState.Open:\n        return\n\n    # PnL\n    pl = self._account.pl(\n        size=self.size,\n        entry_price=self.entry_price,\n        exit_price=price,\n    )\n\n    # State\n    super().exit(price=price, at=at, pl=pl, fee=0)\n\n    # Caller is trade close by tp/sl order\n    if caller is None or (self.sl_order and self.sl_order is not caller):\n        self.sl_order.cancel()\n    if caller is None or (self.tp_order and self.tp_order is not caller):\n        self.tp_order.cancel()\n</code></pre>"},{"location":"reference/exchange/backtest/data/","title":"Index","text":""},{"location":"reference/exchange/backtest/data/#lettrade.exchange.backtest.data","title":"data","text":""},{"location":"reference/exchange/backtest/data/data/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> data","text":""},{"location":"reference/exchange/backtest/data/data/#lettrade.exchange.backtest.data.data","title":"data","text":""},{"location":"reference/exchange/backtest/data/yfinance/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> yfinance","text":""},{"location":"reference/exchange/backtest/data/yfinance/#lettrade.exchange.backtest.data.yfinance","title":"yfinance","text":""},{"location":"reference/exchange/ccxt/","title":"Index","text":""},{"location":"reference/exchange/ccxt/#lettrade.exchange.ccxt","title":"ccxt","text":""},{"location":"reference/exchange/ccxt/ccxt/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> ccxt","text":""},{"location":"reference/exchange/ccxt/ccxt/#lettrade.exchange.ccxt.ccxt","title":"ccxt","text":"<p>Wip</p> <p>CCXT Exchange implement</p>"},{"location":"reference/exchange/metatrader/","title":"Index","text":""},{"location":"reference/exchange/metatrader/#lettrade.exchange.metatrader","title":"metatrader","text":""},{"location":"reference/exchange/metatrader/account/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> account","text":""},{"location":"reference/exchange/metatrader/account/#lettrade.exchange.metatrader.account","title":"account","text":""},{"location":"reference/exchange/metatrader/api/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> api","text":""},{"location":"reference/exchange/metatrader/api/#lettrade.exchange.metatrader.api","title":"api","text":""},{"location":"reference/exchange/metatrader/data/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> data","text":""},{"location":"reference/exchange/metatrader/data/#lettrade.exchange.metatrader.data","title":"data","text":""},{"location":"reference/exchange/metatrader/exchange/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> exchange","text":""},{"location":"reference/exchange/metatrader/exchange/#lettrade.exchange.metatrader.exchange","title":"exchange","text":""},{"location":"reference/exchange/metatrader/exchange/#lettrade.exchange.metatrader.exchange.MetaTraderExchange","title":"MetaTraderExchange","text":"<pre><code>MetaTraderExchange(api: MetaTraderAPI, *args, **kwargs)\n</code></pre> <p>               Bases: <code>Exchange</code></p> <p>MetaTrade 5 exchange module for <code>lettrade</code></p> <p>Parameters:</p> <ul> <li> <code>api</code>               (<code>MetaTraderAPI</code>)           \u2013            <p>API connect to rpyc MeTrader 5 Terminal server through module <code>mt5linux</code></p> </li> <li> <code>*args</code>               (<code>list</code>, default:                   <code>()</code> )           \u2013            <p><code>Exchange</code> list parameters</p> </li> <li> <code>**kwargs</code>               (<code>dict</code>, default:                   <code>{}</code> )           \u2013            <p><code>Exchange</code> dict parameters</p> </li> </ul> Source code in <code>lettrade/exchange/metatrader/exchange.py</code> <pre><code>def __init__(self, api: MetaTraderAPI, *args, **kwargs):\n    \"\"\"_summary_\n\n    Args:\n        api (MetaTraderAPI): API connect to rpyc MeTrader 5 Terminal server through module `mt5linux`\n        *args (list): `Exchange` list parameters\n        **kwargs (dict): `Exchange` dict parameters\n    \"\"\"\n    super().__init__(*args, **kwargs)\n    self._api = api\n</code></pre>"},{"location":"reference/exchange/metatrader/exchange/#lettrade.exchange.metatrader.exchange.MetaTraderExchange.data","title":"data  <code>instance-attribute</code>","text":"<pre><code>data: DataFeed\n</code></pre> <p>main DataFeed</p>"},{"location":"reference/exchange/metatrader/exchange/#lettrade.exchange.metatrader.exchange.MetaTraderExchange.datas","title":"datas  <code>instance-attribute</code>","text":"<pre><code>datas: list[DataFeed]\n</code></pre> <p>List of all available DataFeed</p>"},{"location":"reference/exchange/metatrader/exchange/#lettrade.exchange.metatrader.exchange.MetaTraderExchange.executes","title":"executes  <code>instance-attribute</code>","text":"<pre><code>executes: dict[str, Execute] = dict()\n</code></pre> <p>Execute dict by <code>Execute.id</code> key</p>"},{"location":"reference/exchange/metatrader/exchange/#lettrade.exchange.metatrader.exchange.MetaTraderExchange.history_orders","title":"history_orders  <code>instance-attribute</code>","text":"<pre><code>history_orders: dict[str, Order] = dict()\n</code></pre> <p>History Order dict by <code>Order.id</code> key</p>"},{"location":"reference/exchange/metatrader/exchange/#lettrade.exchange.metatrader.exchange.MetaTraderExchange.history_trades","title":"history_trades  <code>instance-attribute</code>","text":"<pre><code>history_trades: dict[str, Trade] = dict()\n</code></pre> <p>History Order dict by <code>Order.id</code> key</p>"},{"location":"reference/exchange/metatrader/exchange/#lettrade.exchange.metatrader.exchange.MetaTraderExchange.orders","title":"orders  <code>instance-attribute</code>","text":"<pre><code>orders: dict[str, Order] = dict()\n</code></pre> <p>Available Order dict by <code>Order.id</code> key</p>"},{"location":"reference/exchange/metatrader/exchange/#lettrade.exchange.metatrader.exchange.MetaTraderExchange.positions","title":"positions  <code>instance-attribute</code>","text":"<pre><code>positions: dict[str, Position] = dict()\n</code></pre> <p>Available Position dict by <code>Position.id</code> key</p>"},{"location":"reference/exchange/metatrader/exchange/#lettrade.exchange.metatrader.exchange.MetaTraderExchange.trades","title":"trades  <code>instance-attribute</code>","text":"<pre><code>trades: dict[str, Trade] = dict()\n</code></pre> <p>Available Trade dict by <code>Trade.id</code> key</p>"},{"location":"reference/exchange/metatrader/exchange/#lettrade.exchange.metatrader.exchange.MetaTraderExchange.init","title":"init","text":"<pre><code>init(\n    brain: Brain,\n    feeder: DataFeeder,\n    account: Account,\n    commander: Commander,\n) -&gt; None\n</code></pre> <p>Init Exchange dependencies. Set data/datas from feeder. Set state to <code>ExchangeState.Start</code>.</p> <p>Parameters:</p> <ul> <li> <code>brain</code>               (<code>Brain</code>)           \u2013            <p>description</p> </li> <li> <code>feeder</code>               (<code>DataFeeder</code>)           \u2013            <p>description</p> </li> <li> <code>account</code>               (<code>Account</code>)           \u2013            <p>description</p> </li> <li> <code>commander</code>               (<code>Commander</code>)           \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def init(\n    self,\n    brain: \"Brain\",\n    feeder: DataFeeder,\n    account: Account,\n    commander: Commander,\n) -&gt; None:\n    \"\"\"Init Exchange dependencies.\n    Set data/datas from feeder.\n    Set state to `ExchangeState.Start`.\n\n    Args:\n        brain (Brain): _description_\n        feeder (DataFeeder): _description_\n        account (Account): _description_\n        commander (Commander): _description_\n    \"\"\"\n    self._brain = brain\n    self._feeder = feeder\n    self._account = account\n    self._commander = commander\n\n    self.data = self._feeder.data\n    self.datas = self._feeder.datas\n\n    self._account.init(exchange=self)\n\n    self._state = ExchangeState.Start\n</code></pre>"},{"location":"reference/exchange/metatrader/exchange/#lettrade.exchange.metatrader.exchange.MetaTraderExchange.new_order","title":"new_order","text":"<pre><code>new_order(\n    size: float,\n    type: Optional[OrderType] = OrderType.Market,\n    limit: Optional[float] = None,\n    stop: Optional[float] = None,\n    sl: Optional[float] = None,\n    tp: Optional[float] = None,\n    tag: Optional[str] = None,\n    data: Optional[DataFeed] = None,\n    *args,\n    **kwargs\n) -&gt; OrderResult\n</code></pre> <p>Place new order to server</p> <p>Parameters:</p> <ul> <li> <code>size</code>               (<code>float</code>)           \u2013            <p>description</p> </li> <li> <code>type</code>               (<code>Optional[OrderType]</code>, default:                   <code>Market</code> )           \u2013            <p>description. Defaults to OrderType.Market.</p> </li> <li> <code>limit</code>               (<code>Optional[float]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>stop</code>               (<code>Optional[float]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>sl</code>               (<code>Optional[float]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>tp</code>               (<code>Optional[float]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>tag</code>               (<code>Optional[str]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>data</code>               (<code>Optional[DataFeed]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>OrderResult</code> (              <code>OrderResult</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/metatrader/exchange.py</code> <pre><code>def new_order(\n    self,\n    size: float,\n    type: Optional[OrderType] = OrderType.Market,\n    limit: Optional[float] = None,\n    stop: Optional[float] = None,\n    sl: Optional[float] = None,\n    tp: Optional[float] = None,\n    tag: Optional[str] = None,\n    data: Optional[DataFeed] = None,\n    *args,\n    **kwargs\n) -&gt; OrderResult:\n    \"\"\"Place new order to server\n\n    Args:\n        size (float): _description_\n        type (Optional[OrderType], optional): _description_. Defaults to OrderType.Market.\n        limit (Optional[float], optional): _description_. Defaults to None.\n        stop (Optional[float], optional): _description_. Defaults to None.\n        sl (Optional[float], optional): _description_. Defaults to None.\n        tp (Optional[float], optional): _description_. Defaults to None.\n        tag (Optional[str], optional): _description_. Defaults to None.\n        data (Optional[DataFeed], optional): _description_. Defaults to None.\n\n    Returns:\n        OrderResult: _description_\n    \"\"\"\n    if not data:\n        data = self.data\n\n    if type == OrderType.Market:\n        limit = 0\n        stop = 0\n\n    order = MetaTraderOrder(\n        id=-1,\n        exchange=self,\n        data=data,\n        size=size,\n        type=type,\n        limit_price=limit,\n        stop_price=stop,\n        sl_price=sl,\n        tp_price=tp,\n        tag=tag,\n        open_price=self.data.open[0],\n        open_at=self.data.bar(),\n    )\n    ok = order.place()\n\n    if __debug__:\n        logger.info(\"New order %s at %s\", order, self.data.now)\n\n    return ok\n</code></pre>"},{"location":"reference/exchange/metatrader/exchange/#lettrade.exchange.metatrader.exchange.MetaTraderExchange.on_execute","title":"on_execute","text":"<pre><code>on_execute(\n    execute: Execute,\n    broadcast: Optional[bool] = True,\n    **kwargs\n) -&gt; None\n</code></pre> <p>Receive Execute event from exchange then store and notify Brain</p> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def on_execute(\n    self,\n    execute: Execute,\n    broadcast: Optional[bool] = True,\n    **kwargs,\n) -&gt; None:\n    \"\"\"\n    Receive Execute event from exchange then store and notify Brain\n    \"\"\"\n    if not isinstance(execute, Execute):\n        raise RuntimeError(f\"{execute} is not instance of type Execute\")\n\n    if execute.id in self.executes:\n        # Merge to keep Execute handler for strategy using\n        # when strategy want to store Execute object\n        # and object will be automatic update directly\n        self.executes[execute.id].merge(execute)\n        execute = self.executes[execute.id]\n    else:\n        self.executes[execute.id] = execute\n\n    if self._state != ExchangeState.Run:\n        return\n\n    if broadcast:\n        self._brain.on_execute(execute)\n</code></pre>"},{"location":"reference/exchange/metatrader/exchange/#lettrade.exchange.metatrader.exchange.MetaTraderExchange.on_order","title":"on_order","text":"<pre><code>on_order(\n    order: Order, broadcast: Optional[bool] = True, **kwargs\n) -&gt; None\n</code></pre> <p>Receive Order event from exchange then store and notify Brain</p> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def on_order(\n    self,\n    order: Order,\n    broadcast: Optional[bool] = True,\n    **kwargs,\n) -&gt; None:\n    \"\"\"\n    Receive Order event from exchange then store and notify Brain\n    \"\"\"\n    if not isinstance(order, Order):\n        raise RuntimeError(f\"{order} is not instance of type Order\")\n\n    if order.state in [OrderState.Executed, OrderState.Canceled]:\n        self.history_orders[order.id] = order\n        if order.id in self.orders:\n            del self.orders[order.id]\n    else:\n        if order.id in self.history_orders:\n            raise RuntimeError(f\"Order {order.id} closed\")\n\n        if order.id in self.orders:\n            # Merge to keep Order handler for strategy using\n            # when strategy want to store Order object\n            # and object will be automatic update directly\n            self.orders[order.id].merge(order)\n            order = self.orders[order.id]\n        else:\n            self.orders[order.id] = order\n\n    if self._state != ExchangeState.Run:\n        return\n\n    if broadcast:\n        self._brain.on_order(order)\n</code></pre>"},{"location":"reference/exchange/metatrader/exchange/#lettrade.exchange.metatrader.exchange.MetaTraderExchange.on_position","title":"on_position","text":"<pre><code>on_position(\n    position: Position,\n    broadcast: Optional[bool] = True,\n    *args,\n    **kwargs\n) -&gt; None\n</code></pre> <p>Receive Position event from exchange then store and notify Brain</p> <p>Parameters:</p> <ul> <li> <code>position</code>               (<code>Position</code>)           \u2013            <p>description</p> </li> <li> <code>broadcast</code>               (<code>Optional[bool]</code>, default:                   <code>True</code> )           \u2013            <p>description. Defaults to True.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>check <code>Position</code> instance</p> </li> </ul> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def on_position(\n    self,\n    position: Position,\n    broadcast: Optional[bool] = True,\n    *args,\n    **kwargs,\n) -&gt; None:\n    \"\"\"Receive Position event from exchange then store and notify Brain\n\n\n    Args:\n        position (Position): _description_\n        broadcast (Optional[bool], optional): _description_. Defaults to True.\n\n    Raises:\n        RuntimeError: check `Position` instance\n    \"\"\"\n    if not isinstance(position, Position):\n        raise RuntimeError(f\"{position} is not instance of type Position\")\n\n    if position.id in self.positions:\n        # Merge to keep Position handler for strategy using\n        # when strategy want to store Position object\n        # and object will be automatic update directly\n        self.positions[position.id].merge(position)\n    else:\n        self.positions[position.id] = position\n\n    if self._state != ExchangeState.Run:\n        return\n\n    if broadcast:\n        self._brain.on_position(position)\n</code></pre>"},{"location":"reference/exchange/metatrader/exchange/#lettrade.exchange.metatrader.exchange.MetaTraderExchange.on_trade","title":"on_trade","text":"<pre><code>on_trade(\n    trade: Trade,\n    broadcast: Optional[bool] = True,\n    *args,\n    **kwargs\n) -&gt; None\n</code></pre> <p>Receive Trade event from exchange then store and notify Brain</p> <p>Parameters:</p> <ul> <li> <code>trade</code>               (<code>Trade</code>)           \u2013            <p>new comming <code>Trade</code></p> </li> <li> <code>broadcast</code>               (<code>Optional[bool]</code>, default:                   <code>True</code> )           \u2013            <p>Flag notify for Brain. Defaults to True.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>validat <code>Trade</code> instance</p> </li> </ul> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def on_trade(\n    self,\n    trade: Trade,\n    broadcast: Optional[bool] = True,\n    *args,\n    **kwargs,\n) -&gt; None:\n    \"\"\"Receive Trade event from exchange then store and notify Brain\n\n    Args:\n        trade (Trade): new comming `Trade`\n        broadcast (Optional[bool], optional): Flag notify for Brain. Defaults to True.\n\n    Raises:\n        RuntimeError: validat `Trade` instance\n    \"\"\"\n    if not isinstance(trade, Trade):\n        raise RuntimeError(f\"{trade} is not instance of type Trade\")\n\n    if trade.state == TradeState.Exit:\n        self.history_trades[trade.id] = trade\n        if trade.id in self.trades:\n            del self.trades[trade.id]\n\n        self._account._on_trade_exit(trade)\n    else:\n        if trade.id in self.history_trades:\n            raise RuntimeError(f\"Order {trade.id} closed\")\n        if trade.id in self.trades:\n            # Merge to keep Trade handler for strategy using\n            # when strategy want to store Trade object\n            # and object will be automatic update directly\n            self.trades[trade.id].merge(trade)\n            trade = self.trades[trade.id]\n        else:\n            self.trades[trade.id] = trade\n\n    if self._state != ExchangeState.Run:\n        return\n\n    if broadcast:\n        self._brain.on_trade(trade)\n</code></pre>"},{"location":"reference/exchange/metatrader/exchange/#lettrade.exchange.metatrader.exchange.MetaTraderExchange.start","title":"start","text":"<pre><code>start() -&gt; None\n</code></pre> <p>Start MetaTrader exchange by: Sync orders from server, Sync trades from server</p> Source code in <code>lettrade/exchange/metatrader/exchange.py</code> <pre><code>def start(self) -&gt; None:\n    \"\"\"Start MetaTrader exchange by: Sync orders from server, Sync trades from server\"\"\"\n    # self._sync_orders()\n    # self._sync_trades()\n    self._api.start(callbacker=self)\n    return super().start()\n</code></pre>"},{"location":"reference/exchange/metatrader/exchange/#lettrade.exchange.metatrader.exchange.MetaTraderExchange.stop","title":"stop","text":"<pre><code>stop() -&gt; None\n</code></pre> <p>Stop Exchange</p> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def stop(self) -&gt; None:\n    \"\"\"Stop Exchange\"\"\"\n    self._state = ExchangeState.Stop\n    self._account.stop()\n</code></pre>"},{"location":"reference/exchange/metatrader/feeder/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> feeder","text":""},{"location":"reference/exchange/metatrader/feeder/#lettrade.exchange.metatrader.feeder","title":"feeder","text":""},{"location":"reference/exchange/metatrader/feeder/#lettrade.exchange.metatrader.feeder.MetaTraderDataFeeder","title":"MetaTraderDataFeeder","text":"<pre><code>MetaTraderDataFeeder(api: MetaTraderAPI, tick: bool = 5)\n</code></pre> <p>               Bases: <code>DataFeeder</code></p> <pre><code>tick == 0: wait until new bar change value\ntick &gt; 0: sleep tick time (in seconds) then update\n</code></pre> Source code in <code>lettrade/exchange/metatrader/feeder.py</code> <pre><code>def __init__(self, api: MetaTraderAPI, tick: bool = 5) -&gt; None:\n    \"\"\"\n    tick:\n        tick &lt; 0: no tick, just get completed bar\n        tick == 0: wait until new bar change value\n        tick &gt; 0: sleep tick time (in seconds) then update\n    \"\"\"\n    super().__init__()\n    self._api = api\n    self._tick = tick\n</code></pre>"},{"location":"reference/exchange/metatrader/feeder/#lettrade.exchange.metatrader.feeder.MetaTraderDataFeeder.is_continous","title":"is_continous  <code>property</code>","text":"<pre><code>is_continous\n</code></pre> <p>Flag check is realtime continous datafeeder</p>"},{"location":"reference/exchange/metatrader/metatrader/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> metatrader","text":""},{"location":"reference/exchange/metatrader/metatrader/#lettrade.exchange.metatrader.metatrader","title":"metatrader","text":""},{"location":"reference/exchange/metatrader/metatrader/#lettrade.exchange.metatrader.metatrader.LetTradeMetaTrader","title":"LetTradeMetaTrader","text":"<pre><code>LetTradeMetaTrader(\n    strategy: type[Strategy],\n    datas: set[set[str]],\n    feeder: Type[\n        MetaTraderDataFeeder\n    ] = MetaTraderDataFeeder,\n    exchange: Type[MetaTraderExchange] = MetaTraderExchange,\n    account: Type[MetaTraderAccount] = MetaTraderAccount,\n    api: Optional[Type[MetaTraderAPI]] = MetaTraderAPI,\n    wine: Optional[str] = None,\n    **kwargs\n)\n</code></pre> <p>               Bases: <code>LetTrade</code></p> <p>Help to maintain metatrader bots</p> <p>Parameters:</p> <ul> <li> <code>strategy</code>               (<code>type[Strategy]</code>)           \u2013            <p>description</p> </li> <li> <code>datas</code>               (<code>set[set[str]]</code>)           \u2013            <p>description</p> </li> <li> <code>feeder</code>               (<code>Type[MetaTraderDataFeeder]</code>, default:                   <code>MetaTraderDataFeeder</code> )           \u2013            <p>description. Defaults to MetaTraderDataFeeder.</p> </li> <li> <code>exchange</code>               (<code>Type[MetaTraderExchange]</code>, default:                   <code>MetaTraderExchange</code> )           \u2013            <p>description. Defaults to MetaTraderExchange.</p> </li> <li> <code>account</code>               (<code>Type[MetaTraderAccount]</code>, default:                   <code>MetaTraderAccount</code> )           \u2013            <p>description. Defaults to MetaTraderAccount.</p> </li> <li> <code>api</code>               (<code>Optional[Type[MetaTraderAPI]]</code>, default:                   <code>MetaTraderAPI</code> )           \u2013            <p>description. Defaults to MetaTraderAPI.</p> </li> </ul> Source code in <code>lettrade/exchange/metatrader/metatrader.py</code> <pre><code>def __init__(\n    self,\n    strategy: type[Strategy],\n    datas: set[set[str]],\n    feeder: Type[MetaTraderDataFeeder] = MetaTraderDataFeeder,\n    exchange: Type[MetaTraderExchange] = MetaTraderExchange,\n    account: Type[MetaTraderAccount] = MetaTraderAccount,\n    api: Optional[Type[MetaTraderAPI]] = MetaTraderAPI,\n    wine: Optional[str] = None,\n    **kwargs,\n) -&gt; None:\n    \"\"\"_summary_\n\n    Args:\n        strategy (type[Strategy]): _description_\n        datas (set[set[str]]): _description_\n        feeder (Type[MetaTraderDataFeeder], optional): _description_. Defaults to MetaTraderDataFeeder.\n        exchange (Type[MetaTraderExchange], optional): _description_. Defaults to MetaTraderExchange.\n        account (Type[MetaTraderAccount], optional): _description_. Defaults to MetaTraderAccount.\n        api (Optional[Type[MetaTraderAPI]], optional): _description_. Defaults to MetaTraderAPI.\n    \"\"\"\n    # self._api_cls: Type[MetaTraderAPI] = api\n    self._api: MetaTraderAPI = api(wine=wine)\n    kwargs[\"api\"] = self._api\n\n    kwargs.setdefault(\"feeder_kwargs\", dict()).update(api=self._api)\n    kwargs.setdefault(\"exchange_kwargs\", dict()).update(api=self._api)\n    kwargs.setdefault(\"account_kwargs\", dict()).update(api=self._api)\n\n    super().__init__(\n        strategy=strategy,\n        datas=datas,\n        feeder=feeder,\n        exchange=exchange,\n        account=account,\n        **kwargs,\n    )\n</code></pre>"},{"location":"reference/exchange/metatrader/metatrader/#lettrade.exchange.metatrader.metatrader.LetTradeMetaTrader.data","title":"data  <code>instance-attribute</code>","text":"<pre><code>data: DataFeed = datas[0]\n</code></pre> <p>Main DataFeed for bot</p>"},{"location":"reference/exchange/metatrader/metatrader/#lettrade.exchange.metatrader.metatrader.LetTradeMetaTrader.datas","title":"datas  <code>instance-attribute</code>","text":"<pre><code>datas: list[DataFeed] = _init_datafeeds(datas)\n</code></pre> <p>DataFeed list for bot</p>"},{"location":"reference/exchange/metatrader/metatrader/#lettrade.exchange.metatrader.metatrader.LetTradeMetaTrader.plot","title":"plot","text":"<pre><code>plot(*args, **kwargs)\n</code></pre> <p>Plot strategy result</p> Source code in <code>lettrade/lettrade.py</code> <pre><code>def plot(self, *args, **kwargs):\n    \"\"\"Plot strategy result\"\"\"\n    if self._plotter is not None:\n        return self._plotter.plot(*args, **kwargs)\n    if self._bot is not None:\n        return self._bot.plot(*args, **kwargs)\n</code></pre>"},{"location":"reference/exchange/metatrader/metatrader/#lettrade.exchange.metatrader.metatrader.LetTradeMetaTrader.run","title":"run","text":"<pre><code>run(worker: Optional[int] = None, *args, **kwargs)\n</code></pre> <p>Run strategy in single or multiple processing</p> <p>Parameters:</p> <ul> <li> <code>worker</code>               (<code>Optional[int]</code>, default:                   <code>None</code> )           \u2013            <p>Number of processing. Defaults to None.</p> </li> </ul> Source code in <code>lettrade/lettrade.py</code> <pre><code>def run(self, worker: Optional[int] = None, *args, **kwargs):\n    \"\"\"Run strategy in single or multiple processing\n\n    Args:\n        worker (Optional[int], optional): Number of processing. Defaults to None.\n    \"\"\"\n    if worker or isinstance(self.data, list):\n        if not isinstance(self.data, list):\n            self.data = self.datas\n            self.datas = [self.data]\n\n        if not worker:\n            worker = len(self.datas)\n        elif worker &gt; len(self.datas):\n            logger.warning(\n                \"Worker size %s is more then datas size %s\",\n                worker,\n                len(self.datas),\n            )\n            worker = len(self.datas)\n\n        self._multiprocess()\n        with ProcessPoolExecutor(max_workers=worker) as executor:\n            futures = [\n                executor.submit(\n                    self._run_process,\n                    datas=datas,\n                    index=i,\n                    multiprocess=\"worker\",\n                )\n                for i, datas in enumerate(self.datas)\n            ]\n            for future in futures:\n                result = future.result()\n                print(result)\n    else:\n        return self._run_process(*args, **kwargs)\n</code></pre>"},{"location":"reference/exchange/metatrader/metatrader/#lettrade.exchange.metatrader.metatrader.LetTradeMetaTrader.stop","title":"stop","text":"<pre><code>stop()\n</code></pre> <p>Stop strategy</p> Source code in <code>lettrade/lettrade.py</code> <pre><code>def stop(self):\n    \"\"\"Stop strategy\"\"\"\n    if self._bot is not None:\n        return self._bot.stop()\n</code></pre>"},{"location":"reference/exchange/metatrader/metatrader/#lettrade.exchange.metatrader.metatrader.let_metatrader","title":"let_metatrader","text":"<pre><code>let_metatrader(\n    strategy: Type[Strategy],\n    datas: set[set[str]],\n    login: int,\n    password: str,\n    server: str,\n    commander: Optional[Commander] = None,\n    plotter: Optional[Type[Plotter]] = None,\n    stats: Optional[Type[Statistic]] = Statistic,\n    api: Optional[Type[MetaTraderAPI]] = MetaTraderAPI,\n    wine: Optional[str] = None,\n    bot: Optional[\n        Type[LetTradeMetaTraderBot]\n    ] = LetTradeMetaTraderBot,\n    **kwargs\n) -&gt; LetTradeMetaTrader\n</code></pre> <p>Help to build <code>LetTradeMetaTrader</code></p> <p>Parameters:</p> <ul> <li> <code>strategy</code>               (<code>Type[Strategy]</code>)           \u2013            <p>description</p> </li> <li> <code>datas</code>               (<code>set[set[str]]</code>)           \u2013            <p>description</p> </li> <li> <code>login</code>               (<code>int</code>)           \u2013            <p>description</p> </li> <li> <code>password</code>               (<code>str</code>)           \u2013            <p>description</p> </li> <li> <code>server</code>               (<code>str</code>)           \u2013            <p>description</p> </li> <li> <code>commander</code>               (<code>Optional[Commander]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>plotter</code>               (<code>Optional[Type[Plotter]]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>stats</code>               (<code>Optional[Type[Statistic]]</code>, default:                   <code>Statistic</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>api</code>               (<code>Optional[Type[MetaTraderAPI]]</code>, default:                   <code>MetaTraderAPI</code> )           \u2013            <p>description. Defaults to MetaTraderAPI.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>LetTradeMetaTrader</code> (              <code>LetTradeMetaTrader</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/metatrader/metatrader.py</code> <pre><code>def let_metatrader(\n    strategy: Type[Strategy],\n    datas: set[set[str]],\n    login: int,\n    password: str,\n    server: str,\n    commander: Optional[Commander] = None,\n    plotter: Optional[Type[\"Plotter\"]] = None,\n    stats: Optional[Type[\"Statistic\"]] = Statistic,\n    api: Optional[Type[MetaTraderAPI]] = MetaTraderAPI,\n    wine: Optional[str] = None,\n    bot: Optional[Type[LetTradeMetaTraderBot]] = LetTradeMetaTraderBot,\n    **kwargs,\n) -&gt; \"LetTradeMetaTrader\":\n    \"\"\"Help to build `LetTradeMetaTrader`\n\n    Args:\n        strategy (Type[Strategy]): _description_\n        datas (set[set[str]]): _description_\n        login (int): _description_\n        password (str): _description_\n        server (str): _description_\n        commander (Optional[Commander], optional): _description_. Defaults to None.\n        plotter (Optional[Type[\"Plotter\"]], optional): _description_. Defaults to None.\n        stats (Optional[Type[\"Statistic\"]], optional): _description_. Defaults to None.\n        api (Optional[Type[MetaTraderAPI]], optional): _description_. Defaults to MetaTraderAPI.\n\n    Returns:\n        LetTradeMetaTrader: _description_\n    \"\"\"\n    api_kwargs: dict = kwargs.setdefault(\"api_kwargs\", {})\n    api_kwargs.update(\n        login=int(login),\n        password=password,\n        server=server,\n    )\n\n    return LetTradeMetaTrader(\n        strategy=strategy,\n        datas=datas,\n        commander=commander,\n        plotter=plotter,\n        stats=stats,\n        bot=bot,\n        api=api,\n        wine=wine,\n        **kwargs,\n    )\n</code></pre>"},{"location":"reference/exchange/metatrader/trade/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> trade","text":""},{"location":"reference/exchange/metatrader/trade/#lettrade.exchange.metatrader.trade","title":"trade","text":""},{"location":"reference/exchange/metatrader/trade/#lettrade.exchange.metatrader.trade.MetaTraderExecute","title":"MetaTraderExecute","text":"<pre><code>MetaTraderExecute(\n    id: str,\n    exchange: MetaTraderExchange,\n    data: DataFeed,\n    size: float,\n    price: float,\n    at: float,\n    order_id: Optional[str] = None,\n    order: Optional[Order] = None,\n    trade_id: Optional[str] = None,\n    trade: Optional[Trade] = None,\n    tag: Optional[str] = \"\",\n    raw: Optional[object] = None,\n)\n</code></pre> <p>               Bases: <code>Execute</code></p> <p>Execute for MetaTrader</p> Source code in <code>lettrade/exchange/metatrader/trade.py</code> <pre><code>def __init__(\n    self,\n    id: str,\n    exchange: \"MetaTraderExchange\",\n    data: \"DataFeed\",\n    size: float,\n    price: float,\n    at: float,\n    order_id: Optional[str] = None,\n    order: Optional[\"Order\"] = None,\n    trade_id: Optional[str] = None,\n    trade: Optional[\"Trade\"] = None,\n    tag: Optional[str] = \"\",\n    raw: Optional[object] = None,\n):\n    super().__init__(\n        id=id,\n        exchange=exchange,\n        data=data,\n        size=size,\n        price=price,\n        at=at,\n        order_id=order_id,\n        order=order,\n        trade_id=trade_id,\n        trade=trade,\n    )\n    self.tag: str = tag\n    self.raw: object = raw\n    self._api: MetaTraderAPI = exchange._api\n</code></pre>"},{"location":"reference/exchange/metatrader/trade/#lettrade.exchange.metatrader.trade.MetaTraderExecute.from_raw","title":"from_raw  <code>classmethod</code>","text":"<pre><code>from_raw(\n    raw, exchange: MetaTraderExchange\n) -&gt; MetaTraderExecute\n</code></pre> <p>Building new MetaTraderExecute from metatrader api deal object</p> <pre><code>Raw deal: TradeDeal(ticket=33889131, order=41290404, time=1715837856, time_msc=1715837856798, type=0, entry=0, magic=0, position_id=41290404, reason=0, volume=0.01, price=0.85795, commission=0.0, swap=0.0, profit=0.0, fee=0.0, symbol='EURGBP', comment='', external_id='')\n</code></pre> Source code in <code>lettrade/exchange/metatrader/trade.py</code> <pre><code>@classmethod\ndef from_raw(cls, raw, exchange: \"MetaTraderExchange\") -&gt; \"MetaTraderExecute\":\n    \"\"\"\n    Building new MetaTraderExecute from metatrader api deal object\n\n        Raw deal: TradeDeal(ticket=33889131, order=41290404, time=1715837856, time_msc=1715837856798, type=0, entry=0, magic=0, position_id=41290404, reason=0, volume=0.01, price=0.85795, commission=0.0, swap=0.0, profit=0.0, fee=0.0, symbol='EURGBP', comment='', external_id='')\n    \"\"\"\n\n    return MetaTraderExecute(\n        exchange=exchange,\n        id=raw.ticket,\n        # TODO: Fix by get data from symbol\n        data=exchange.data,\n        # TODO: size and type from raw.type\n        size=raw.volume,\n        price=raw.price,\n        # TODO: set bar time\n        at=None,\n        order_id=raw.order,\n        trade_id=raw.position_id,\n        tag=raw.comment,\n        raw=raw,\n    )\n</code></pre>"},{"location":"reference/exchange/metatrader/trade/#lettrade.exchange.metatrader.trade.MetaTraderExecute.merge","title":"merge","text":"<pre><code>merge(other: Execute)\n</code></pre> <p>Merge to keep object handler but not overwrite for Strategy using when Strategy want to store object and object will be automatic update directly</p> Source code in <code>lettrade/exchange/execute.py</code> <pre><code>def merge(self, other: \"Execute\"):\n    \"\"\"\n    Merge to keep object handler but not overwrite for Strategy using when Strategy want to store object and object will be automatic update directly\n    \"\"\"\n    if other is self:\n        return\n\n    if self.id != other.id:\n        raise RuntimeError(f\"Merge difference id {self.id} != {other.id} execute\")\n\n    self.price = other.price\n    self.size = other.size\n\n    if other.at:\n        self.at = other.at\n    if other.order_id:\n        self.order_id = other.order_id\n    if other.order:\n        self.order = other.order\n    if other.trade_id:\n        self.trade_id = other.trade_id\n    if other.trade:\n        self.trade = other.trade\n</code></pre>"},{"location":"reference/indicator/","title":"Index","text":""},{"location":"reference/indicator/#lettrade.indicator","title":"indicator","text":""},{"location":"reference/indicator/function/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> function","text":""},{"location":"reference/indicator/function/#lettrade.indicator.function","title":"function","text":""},{"location":"reference/indicator/function/#lettrade.indicator.function.above","title":"above","text":"<pre><code>above(series1: Series, series2: Series) -&gt; Series\n</code></pre> <p>Check a Series is above another Series</p> <p>Parameters:</p> <ul> <li> <code>series1</code>               (<code>Series</code>)           \u2013            <p>first Series</p> </li> <li> <code>series2</code>               (<code>Series</code>)           \u2013            <p>second Series</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Series</code>           \u2013            <p>pd.Series: True series1 is above series2 else False</p> </li> </ul> Source code in <code>lettrade/indicator/function.py</code> <pre><code>def above(series1: pd.Series, series2: pd.Series) -&gt; pd.Series:\n    \"\"\"Check a Series is above another Series\n\n    Args:\n        series1 (pd.Series): first Series\n        series2 (pd.Series): second Series\n\n    Returns:\n        pd.Series: True series1 is above series2 else False\n    \"\"\"\n    diffed = diff(series1, series2)\n    return diffed.apply(lambda v: True if v &gt; 0 else False).astype(bool)\n</code></pre>"},{"location":"reference/indicator/function/#lettrade.indicator.function.below","title":"below","text":"<pre><code>below(series1: Series, series2: Series) -&gt; Series\n</code></pre> <p>Check a Series is below another Series</p> <p>Parameters:</p> <ul> <li> <code>series1</code>               (<code>Series</code>)           \u2013            <p>first Series</p> </li> <li> <code>series2</code>               (<code>Series</code>)           \u2013            <p>second Series</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Series</code>           \u2013            <p>pd.Series: True series1 is below series2 else False</p> </li> </ul> Source code in <code>lettrade/indicator/function.py</code> <pre><code>def below(series1: pd.Series, series2: pd.Series) -&gt; pd.Series:\n    \"\"\"Check a Series is below another Series\n\n    Args:\n        series1 (pd.Series): first Series\n        series2 (pd.Series): second Series\n\n    Returns:\n        pd.Series: True series1 is below series2 else False\n    \"\"\"\n    diffed = diff(series1, series2)\n    return diffed.apply(lambda v: True if v &lt; 0 else False).astype(bool)\n</code></pre>"},{"location":"reference/indicator/function/#lettrade.indicator.function.crossover","title":"crossover","text":"<pre><code>crossover(series1: Series, series2: Series) -&gt; Series\n</code></pre> <p>Check if a Series cross over another Series</p> <p>Parameters:</p> <ul> <li> <code>series1</code>               (<code>Series</code>)           \u2013            <p>first Series</p> </li> <li> <code>series2</code>               (<code>Series</code>)           \u2013            <p>second Series</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Series</code>           \u2013            <p>pd.Series: True if series1 cross over series2 else False</p> </li> </ul> Source code in <code>lettrade/indicator/function.py</code> <pre><code>def crossover(series1: pd.Series, series2: pd.Series) -&gt; pd.Series:\n    \"\"\"Check if a Series cross over another Series\n\n    Args:\n        series1 (pd.Series): first Series\n        series2 (pd.Series): second Series\n\n    Returns:\n        pd.Series: True if series1 cross over series2 else False\n    \"\"\"\n    below1 = below(series1, series2).shift(1)\n    above0 = above(series1, series2)\n    return below1 &amp; above0\n</code></pre>"},{"location":"reference/indicator/function/#lettrade.indicator.function.crossunder","title":"crossunder","text":"<pre><code>crossunder(series1: Series, series2: Series) -&gt; Series\n</code></pre> <p>Check if a Series cross under another Series</p> <p>Parameters:</p> <ul> <li> <code>series1</code>               (<code>Series</code>)           \u2013            <p>first Series</p> </li> <li> <code>series2</code>               (<code>Series</code>)           \u2013            <p>second Series</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Series</code>           \u2013            <p>pd.Series: True if series1 cross under series2 else False</p> </li> </ul> Source code in <code>lettrade/indicator/function.py</code> <pre><code>def crossunder(series1: pd.Series, series2: pd.Series) -&gt; pd.Series:\n    \"\"\"Check if a Series cross under another Series\n\n    Args:\n        series1 (pd.Series): first Series\n        series2 (pd.Series): second Series\n\n    Returns:\n        pd.Series: True if series1 cross under series2 else False\n    \"\"\"\n    above1 = above(series1, series2).shift(1)\n    below0 = below(series1, series2)\n    return below0 &amp; above1\n</code></pre>"},{"location":"reference/indicator/function/#lettrade.indicator.function.diff","title":"diff","text":"<pre><code>diff(series1: Series, series2: Series) -&gt; Series\n</code></pre> <p>Difference between 2 series</p> <p>Parameters:</p> <ul> <li> <code>series1</code>               (<code>Series</code>)           \u2013            <p>description</p> </li> <li> <code>series2</code>               (<code>Series</code>)           \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Series</code>           \u2013            <p>pd.Series: Diff of 2 series</p> </li> </ul> Source code in <code>lettrade/indicator/function.py</code> <pre><code>def diff(series1: pd.Series, series2: pd.Series) -&gt; pd.Series:\n    \"\"\"Difference between 2 series\n\n    Args:\n        series1 (pd.Series): _description_\n        series2 (pd.Series): _description_\n\n    Returns:\n        pd.Series: Diff of 2 series\n    \"\"\"\n    return series1 - series2\n</code></pre>"},{"location":"reference/indicator/indicator/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> indicator","text":""},{"location":"reference/indicator/indicator/#lettrade.indicator.indicator","title":"indicator","text":""},{"location":"reference/plot/","title":"Index","text":""},{"location":"reference/plot/#lettrade.plot","title":"plot","text":""},{"location":"reference/plot/plot/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> plot","text":""},{"location":"reference/plot/plot/#lettrade.plot.plot","title":"plot","text":""},{"location":"reference/plot/plot/#lettrade.plot.plot.Plotter","title":"Plotter","text":"<pre><code>Plotter(\n    feeder: DataFeeder,\n    exchange: Exchange,\n    account: Account,\n    strategy: Strategy,\n)\n</code></pre> <p>               Bases: <code>ABC</code></p> <p>Base class help to plot strategy</p> Source code in <code>lettrade/plot/plot.py</code> <pre><code>def __init__(\n    self,\n    feeder: DataFeeder,\n    exchange: Exchange,\n    account: Account,\n    strategy: Strategy,\n) -&gt; None:\n    self.feeder: DataFeeder = feeder\n    self.exchange: Exchange = exchange\n    self.account: Account = account\n    self.strategy: Strategy = strategy\n\n    self.datas: list[DataFeed] = self.feeder.datas\n    self.data: DataFeed = self.feeder.data\n</code></pre>"},{"location":"reference/plot/plot/#lettrade.plot.plot.Plotter.load","title":"load  <code>abstractmethod</code>","text":"<pre><code>load()\n</code></pre> <p>Load plot config from <code>Strategy.plot()</code> and setup candlestick/equity</p> Source code in <code>lettrade/plot/plot.py</code> <pre><code>@abstractmethod\ndef load(self):\n    \"\"\"Load plot config from `Strategy.plot()` and setup candlestick/equity\"\"\"\n</code></pre>"},{"location":"reference/plot/plot/#lettrade.plot.plot.Plotter.plot","title":"plot  <code>abstractmethod</code>","text":"<pre><code>plot(**kwargs)\n</code></pre> <p>Plot <code>equity</code>, <code>orders</code>, and <code>trades</code> then show</p> Source code in <code>lettrade/plot/plot.py</code> <pre><code>@abstractmethod\ndef plot(self, **kwargs):\n    \"\"\"Plot `equity`, `orders`, and `trades` then show\"\"\"\n</code></pre>"},{"location":"reference/plot/plot/#lettrade.plot.plot.Plotter.stop","title":"stop  <code>abstractmethod</code>","text":"<pre><code>stop()\n</code></pre> <p>stop plotter</p> Source code in <code>lettrade/plot/plot.py</code> <pre><code>@abstractmethod\ndef stop(self):\n    \"\"\"stop plotter\"\"\"\n</code></pre>"},{"location":"reference/plot/plotly/","title":"Index","text":""},{"location":"reference/plot/plotly/#lettrade.plot.plotly","title":"plotly","text":""},{"location":"reference/plot/plotly/plotly/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> plotly","text":""},{"location":"reference/plot/plotly/plotly/#lettrade.plot.plotly.plotly","title":"plotly","text":""},{"location":"reference/plot/plotly/plotly/#lettrade.plot.plotly.plotly.PlotlyPlotter","title":"PlotlyPlotter","text":"<pre><code>PlotlyPlotter(\n    feeder: DataFeeder,\n    exchange: Exchange,\n    account: Account,\n    strategy: Strategy,\n)\n</code></pre> <p>               Bases: <code>Plotter</code></p> <p>Class help to plot <code>lettrade</code></p> Source code in <code>lettrade/plot/plot.py</code> <pre><code>def __init__(\n    self,\n    feeder: DataFeeder,\n    exchange: Exchange,\n    account: Account,\n    strategy: Strategy,\n) -&gt; None:\n    self.feeder: DataFeeder = feeder\n    self.exchange: Exchange = exchange\n    self.account: Account = account\n    self.strategy: Strategy = strategy\n\n    self.datas: list[DataFeed] = self.feeder.datas\n    self.data: DataFeed = self.feeder.data\n</code></pre>"},{"location":"reference/plot/plotly/plotly/#lettrade.plot.plotly.plotly.PlotlyPlotter.load","title":"load","text":"<pre><code>load()\n</code></pre> <p>Load plot config from <code>Strategy.plot()</code> and setup candlestick/equity</p> Source code in <code>lettrade/plot/plotly/plotly.py</code> <pre><code>def load(self):\n    \"\"\"Load plot config from `Strategy.plot()` and setup candlestick/equity\"\"\"\n    df = self.data\n\n    # Strategy plot\n    config: dict = self.strategy.plot(df)\n\n    # Params\n    params = dict(\n        rows=max(config.get(\"rows\", 2), 2),\n        shared_xaxes=True,\n        vertical_spacing=0.03,\n        row_width=[0.2, 0.7],\n    )\n    if \"params\" in config:\n        params.update(**config[\"params\"])\n\n    # Init\n    self.figure = make_subplots(**params)\n\n    # Plot candles\n    self.figure.add_trace(\n        go.Candlestick(\n            x=df.index,\n            open=df[\"open\"],\n            high=df[\"high\"],\n            low=df[\"low\"],\n            close=df[\"close\"],\n            name=\"Price\",\n            hoverinfo=\"x+y\",\n        ),\n        row=1,\n        col=1,\n    )\n    self.figure.update_yaxes(\n        title_text=\"Price $\",\n        row=1,\n        col=1,\n    )\n\n    if \"scatters\" in config:\n        for s in config[\"scatters\"]:\n            # s.setdefault(\"row\", 1)\n            if \"row\" not in s:\n                s[\"row\"] = 1\n            if \"col\" not in s:\n                s[\"col\"] = 1\n            self.figure.add_scatter(**s)\n\n    # Layout\n    layout_params = dict(\n        title=dict(\n            text=str(self.strategy),\n            font=dict(size=24),\n            x=0.5,\n            xref=\"paper\",\n        ),\n        # hovermode=\"x unified\",\n    )\n    if \"layout\" in config:\n        layout_params.update(config[\"layout\"])\n    self.figure.update_layout(**layout_params)\n</code></pre>"},{"location":"reference/plot/plotly/plotly/#lettrade.plot.plotly.plotly.PlotlyPlotter.plot","title":"plot","text":"<pre><code>plot(**kwargs)\n</code></pre> <p>Plot <code>equity</code>, <code>orders</code>, and <code>trades</code> then show</p> Source code in <code>lettrade/plot/plotly/plotly.py</code> <pre><code>def plot(self, **kwargs):\n    \"\"\"Plot `equity`, `orders`, and `trades` then show\"\"\"\n    if self.figure is None:\n        self.load()\n\n    self._plot_equity()\n    self._plot_orders()\n    self._plot_trades()\n\n    params = dict(layout_xaxis_rangeslider_visible=False)\n    params.update(**kwargs)\n    self.figure.update(**params)\n\n    if __debug__:\n        if self._docs_plot(**kwargs):\n            return\n\n    self.figure.show()\n</code></pre>"},{"location":"reference/plot/plotly/plotly/#lettrade.plot.plotly.plotly.PlotlyPlotter.stop","title":"stop","text":"<pre><code>stop()\n</code></pre> <p>stop plotter</p> Source code in <code>lettrade/plot/plotly/plotly.py</code> <pre><code>def stop(self):\n    \"\"\"stop plotter\"\"\"\n</code></pre>"},{"location":"reference/stats/","title":"Index","text":""},{"location":"reference/stats/#lettrade.stats","title":"stats","text":""},{"location":"reference/stats/stats/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> stats","text":""},{"location":"reference/stats/stats/#lettrade.stats.stats","title":"stats","text":""},{"location":"reference/stats/stats/#lettrade.stats.stats.Statistic","title":"Statistic","text":"<pre><code>Statistic(\n    feeder: DataFeeder,\n    exchange: Exchange,\n    strategy: Strategy,\n)\n</code></pre> <p>Compute strategy result</p> Source code in <code>lettrade/stats/stats.py</code> <pre><code>def __init__(\n    self,\n    feeder: DataFeeder,\n    exchange: Exchange,\n    strategy: Strategy,\n) -&gt; None:\n    self.feeder: DataFeeder = feeder\n    self.exchange: Exchange = exchange\n    self.strategy: Strategy = strategy\n    self.account: Account = strategy.account\n</code></pre>"},{"location":"reference/stats/stats/#lettrade.stats.stats.Statistic.compute","title":"compute","text":"<pre><code>compute()\n</code></pre> <p>Calculate strategy report</p> Source code in <code>lettrade/stats/stats.py</code> <pre><code>def compute(self):\n    \"\"\"\n    Calculate strategy report\n    \"\"\"\n    data: pd.DataFrame = self.feeder.data\n    self.result = pd.Series(dtype=object)\n\n    self.result.loc[\"# Strategy\"] = str(self.strategy.__class__)\n    self.result.loc[\"Start\"] = data.datetime.iloc[0]\n    self.result.loc[\"End\"] = data.datetime.iloc[-1]\n    self.result.loc[\"Duration\"] = self.result.End - self.result.Start\n\n    # Equity\n    equities = list(self.account._equities.values())\n    self.result.loc[\"Start Balance [$]\"] = round(equities[0], 2)\n    self.result.loc[\"Equity [$]\"] = round(equities[-1], 2)\n\n    pl = equities[-1] - equities[0]\n    self.result.loc[\"PL [$]\"] = round(pl, 2)\n    self.result.loc[\"PL [%]\"] = round(pl / equities[0] * 100, 2)\n\n    # TODO\n    self.result.loc[\"Buy &amp; Hold PL [%]\"] = 2.0\n    self.result.loc[\"Max. Drawdown [%]\"] = -33.08\n    self.result.loc[\"Avg. Drawdown [%]\"] = -5.58\n    self.result.loc[\"Max. Drawdown Duration\"] = \"688 days 00:00:00\"\n    self.result.loc[\"Avg. Drawdown Duration\"] = \"41 days 00:00:00\"\n\n    # Separator\n    self.result.loc[\"\"] = \"\"\n\n    # Trades\n    trades = list(self.exchange.history_trades.values()) + list(\n        self.exchange.trades.values()\n    )\n    self.result.loc[\"# Trades\"] = len(trades)\n    self.result.loc[\"Best Trade [%]\"] = max(t.pl for t in trades) if trades else 0\n    self.result.loc[\"Worst Trade [%]\"] = min(t.pl for t in trades) if trades else 0\n\n    # TODO\n    self.result.loc[\"Profit Factor\"] = 2.13\n    self.result.loc[\"SQN\"] = 1.78\n\n    return self.result\n</code></pre>"},{"location":"reference/stats/stats/#lettrade.stats.stats.Statistic.show","title":"show","text":"<pre><code>show()\n</code></pre> <p>Show statistic report</p> Source code in <code>lettrade/stats/stats.py</code> <pre><code>def show(self):\n    \"\"\"\n    Show statistic report\n    \"\"\"\n    if \"Start\" not in self.result:\n        logger.warning(\"call compute() before show()\")\n        self.compute()\n\n    # Show result inside docs session\n    if __debug__:\n        show = self._docs_show()\n        if show:\n            print(show)\n            return show\n\n    logger.info(\n        \"\\n============= Statistic result =============\\n%s\\n\",\n        self.result.to_string(),\n    )\n</code></pre>"},{"location":"reference/strategy/","title":"Index","text":""},{"location":"reference/strategy/#lettrade.strategy","title":"strategy","text":""},{"location":"reference/strategy/strategy/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> strategy","text":""},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy","title":"strategy","text":""},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy","title":"Strategy","text":"<pre><code>Strategy(\n    feeder: DataFeeder,\n    exchange: Exchange,\n    account: Account,\n    commander: Commander,\n    is_optimize: Optional[bool] = False,\n)\n</code></pre> <p>               Bases: <code>ABC</code></p> <p>Base class to implement a strategy</p> <p>Parameters:</p> <ul> <li> <code>feeder</code>               (<code>DataFeeder</code>)           \u2013            <p>DataFeeder for strategy</p> </li> <li> <code>exchange</code>               (<code>Exchange</code>)           \u2013            <p>Trading exchange</p> </li> <li> <code>account</code>               (<code>Account</code>)           \u2013            <p>Account manager</p> </li> <li> <code>commander</code>               (<code>Commander</code>)           \u2013            <p>Event/Command manager</p> </li> <li> <code>is_optimize</code>               (<code>Optional[bool]</code>, default:                   <code>False</code> )           \u2013            <p>flag validate optimize condiction. Defaults to False.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>Validate valid is_optimize flag</p> </li> </ul> Source code in <code>lettrade/strategy/strategy.py</code> <pre><code>def __init__(\n    self,\n    feeder: DataFeeder,\n    exchange: Exchange,\n    account: Account,\n    commander: Commander,\n    is_optimize: Optional[bool] = False,\n):\n    \"\"\"_summary_\n\n    Args:\n        feeder (DataFeeder): DataFeeder for strategy\n        exchange (Exchange): Trading exchange\n        account (Account): Account manager\n        commander (Commander): Event/Command manager\n        is_optimize (Optional[bool], optional): flag validate optimize condiction. Defaults to False.\n\n    Raises:\n        RuntimeError: Validate valid is_optimize flag\n    \"\"\"\n    self.__feeder: DataFeeder = feeder\n    self.__exchange: Exchange = exchange\n    self.__account: Account = account\n    self.__commander: Commander = commander\n\n    self.__datas: list[DataFeed] = self.__feeder.datas\n    self.__data: DataFeed = self.__feeder.data\n\n    if is_optimize and self.is_live:\n        raise RuntimeError(\"Optimize a live datafeeder\")\n    self.__is_optimize: bool = is_optimize\n</code></pre>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.account","title":"account  <code>property</code>","text":"<pre><code>account: Account\n</code></pre> <p>Getter of <code>Account</code></p> <p>Returns:</p> <ul> <li> <code>Account</code> (              <code>Account</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.commander","title":"commander  <code>property</code>","text":"<pre><code>commander: Commander\n</code></pre> <p>Getter of <code>Commander</code></p> <p>Returns:</p> <ul> <li> <code>Commander</code> (              <code>Commander</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.data","title":"data  <code>property</code>","text":"<pre><code>data: DataFeed\n</code></pre> <p>Getter of main DataFeed</p> <p>Returns:</p> <ul> <li> <code>DataFeed</code> (              <code>DataFeed</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.datas","title":"datas  <code>property</code>","text":"<pre><code>datas: list[DataFeed]\n</code></pre> <p>Getter of all DataFeed</p> <p>Returns:</p> <ul> <li> <code>list[DataFeed]</code>           \u2013            <p>list[DataFeed]: description</p> </li> </ul>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.exchange","title":"exchange  <code>property</code>","text":"<pre><code>exchange: Exchange\n</code></pre> <p>Getter of <code>Exchange</code></p> <p>Returns:</p> <ul> <li> <code>Exchange</code> (              <code>Exchange</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.feeder","title":"feeder  <code>property</code>","text":"<pre><code>feeder: DataFeeder\n</code></pre> <p>Getter of <code>DataFeeder</code></p> <p>Returns:</p> <ul> <li> <code>DataFeeder</code> (              <code>DataFeeder</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.history_orders","title":"history_orders  <code>property</code>","text":"<pre><code>history_orders: dict[str, Order]\n</code></pre> <p>Getter of history <code>Order</code> dict</p> <p>Returns:</p> <ul> <li> <code>dict[str, Order]</code>           \u2013            <p>dict[str, Order]: description</p> </li> </ul>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.history_trades","title":"history_trades  <code>property</code>","text":"<pre><code>history_trades: dict[str, Trade]\n</code></pre> <p>Getter of history <code>Trade</code> dict</p> <p>Returns:</p> <ul> <li> <code>dict[str, Trade]</code>           \u2013            <p>dict[str, Trade]: description</p> </li> </ul>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.is_backtest","title":"is_backtest  <code>property</code>","text":"<pre><code>is_backtest: bool\n</code></pre> <p>Flag to check strategy is running in backtest DataFeeder</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.is_live","title":"is_live  <code>property</code>","text":"<pre><code>is_live: bool\n</code></pre> <p>Flag to check strategy is running in live DataFeeder</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.is_optimize","title":"is_optimize  <code>property</code>","text":"<pre><code>is_optimize: bool\n</code></pre> <p>Flag to check strategy is running in optimize session</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.now","title":"now  <code>property</code>","text":"<pre><code>now: datetime\n</code></pre> <p>Getter of current datetime</p> <p>Returns:</p> <ul> <li> <code>datetime</code> (              <code>datetime</code> )          \u2013            <p>current datetime of bar</p> </li> </ul>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.orders","title":"orders  <code>property</code>","text":"<pre><code>orders: dict[str, Order]\n</code></pre> <p>Getter of <code>Order</code> dict</p> <p>Returns:</p> <ul> <li> <code>dict[str, Order]</code>           \u2013            <p>dict[str, Order]: description</p> </li> </ul>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.positions","title":"positions  <code>property</code>","text":"<pre><code>positions: dict[str, Position]\n</code></pre> <p>Getter of <code>Position</code> dict</p>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.trades","title":"trades  <code>property</code>","text":"<pre><code>trades: dict[str, Trade]\n</code></pre> <p>Getter of <code>Trade</code> dict</p> <p>Returns:</p> <ul> <li> <code>dict[str, Trade]</code>           \u2013            <p>dict[str, Trade]: description</p> </li> </ul>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.buy","title":"buy","text":"<pre><code>buy(\n    size: Optional[float] = None,\n    limit: Optional[float] = None,\n    stop: Optional[float] = None,\n    sl: Optional[float] = None,\n    tp: Optional[float] = None,\n    tag: Optional[object] = None,\n    **kwargs\n) -&gt; OrderResult\n</code></pre> <p>Place a new long order.</p> <p>Parameters:</p> <ul> <li> <code>size</code>               (<code>Optional[float]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>limit</code>               (<code>Optional[float]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>stop</code>               (<code>Optional[float]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>sl</code>               (<code>Optional[float]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>tp</code>               (<code>Optional[float]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>tag</code>               (<code>Optional[object]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>**kwargs</code>               (<code>Optional[dict]</code>, default:                   <code>{}</code> )           \u2013            <p>Extra-parameters send to <code>Exchange.new_order</code></p> </li> </ul> <p>Returns:</p> <ul> <li> <code>OrderResult</code> (              <code>OrderResult</code> )          \u2013            <p>order result information</p> </li> </ul> Source code in <code>lettrade/strategy/strategy.py</code> <pre><code>def buy(\n    self,\n    size: Optional[float] = None,\n    limit: Optional[float] = None,\n    stop: Optional[float] = None,\n    sl: Optional[float] = None,\n    tp: Optional[float] = None,\n    tag: Optional[object] = None,\n    **kwargs,\n) -&gt; OrderResult:\n    \"\"\"Place a new long order.\n\n    Args:\n        size (Optional[float], optional): _description_. Defaults to None.\n        limit (Optional[float], optional): _description_. Defaults to None.\n        stop (Optional[float], optional): _description_. Defaults to None.\n        sl (Optional[float], optional): _description_. Defaults to None.\n        tp (Optional[float], optional): _description_. Defaults to None.\n        tag (Optional[object], optional): _description_. Defaults to None.\n        **kwargs (Optional[dict], optional): Extra-parameters send to `Exchange.new_order`\n\n    Returns:\n        OrderResult: order result information\n    \"\"\"\n    params = dict(\n        size=abs(size),\n        limit=limit,\n        stop=stop,\n        sl=sl,\n        tp=tp,\n        tag=tag,\n        **kwargs,\n    )\n    params[\"size\"] = abs(self.__account.risk(**params))\n\n    return self.__exchange.new_order(**params)\n</code></pre>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.end","title":"end","text":"<pre><code>end(df: DataFeed) -&gt; None\n</code></pre> <p>Call when strategy run completed</p> <p>Parameters:</p> <ul> <li> <code>df</code>               (<code>DataFeed</code>)           \u2013            <p>main data of strategy</p> </li> </ul> Source code in <code>lettrade/strategy/strategy.py</code> <pre><code>def end(self, df: DataFeed) -&gt; None:\n    \"\"\"Call when strategy run completed\n\n    Args:\n        df (DataFeed): main data of strategy\n    \"\"\"\n</code></pre>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.indicators","title":"indicators","text":"<pre><code>indicators(df: DataFeed) -&gt; None\n</code></pre> <p>All indicator and signal should implement here to cacheable. Because of <code>lettrade</code> will cache/pre-load all <code>DataFeed</code></p> <p>Parameters:</p> <ul> <li> <code>df</code>               (<code>DataFeed</code>)           \u2013            <p>main data of strategy</p> </li> </ul> Source code in <code>lettrade/strategy/strategy.py</code> <pre><code>def indicators(self, df: DataFeed) -&gt; None:\n    \"\"\"All indicator and signal should implement here to cacheable.\n    Because of `lettrade` will cache/pre-load all `DataFeed`\n\n    Args:\n        df (DataFeed): main data of strategy\n    \"\"\"\n</code></pre>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.init","title":"init","text":"<pre><code>init() -&gt; None\n</code></pre> <p>Init strategy variables</p> Source code in <code>lettrade/strategy/strategy.py</code> <pre><code>def init(self) -&gt; None:\n    \"\"\"Init strategy variables\"\"\"\n</code></pre>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.notify","title":"notify","text":"<pre><code>notify(msg: str, **kwargs) -&gt; Any\n</code></pre> <p>Notify message to commander</p> <p>Parameters:</p> <ul> <li> <code>msg</code>               (<code>str</code>)           \u2013            <p>message string</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Any</code> (              <code>Any</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/strategy/strategy.py</code> <pre><code>def notify(self, msg: str, **kwargs) -&gt; Any:\n    \"\"\"Notify message to commander\n\n    Args:\n        msg (str): message string\n\n    Returns:\n        Any: _description_\n    \"\"\"\n    return self.commander.send_message(msg=msg, **kwargs)\n</code></pre>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.on_execute","title":"on_execute","text":"<pre><code>on_execute(execute: Execute)\n</code></pre> <p>Listen for <code>Execute</code> event</p> <p>Parameters:</p> <ul> <li> <code>execute</code>               (<code>Execute</code>)           \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/strategy/strategy.py</code> <pre><code>def on_execute(self, execute: Execute):\n    \"\"\"Listen for `Execute` event\n\n    Args:\n        execute (Execute): _description_\n    \"\"\"\n</code></pre>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.on_notify","title":"on_notify","text":"<pre><code>on_notify(*args, **kwargs) -&gt; None\n</code></pre> <p>Listen for <code>notify</code> event</p> <p>Returns:</p> <ul> <li> <code>_type_</code> (              <code>None</code> )          \u2013            <p><code>None</code></p> </li> </ul> Source code in <code>lettrade/strategy/strategy.py</code> <pre><code>def on_notify(self, *args, **kwargs) -&gt; None:\n    \"\"\"Listen for `notify` event\n\n    Returns:\n        _type_: `None`\n    \"\"\"\n</code></pre>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.on_order","title":"on_order","text":"<pre><code>on_order(order: Order)\n</code></pre> <p>Listen for <code>Order</code> event</p> <p>Parameters:</p> <ul> <li> <code>order</code>               (<code>Order</code>)           \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/strategy/strategy.py</code> <pre><code>def on_order(self, order: Order):\n    \"\"\"Listen for `Order` event\n\n    Args:\n        order (Order): _description_\n    \"\"\"\n</code></pre>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.on_position","title":"on_position","text":"<pre><code>on_position(position: Position)\n</code></pre> <p>Listen for <code>Position</code> event</p> <p>Parameters:</p> <ul> <li> <code>position</code>               (<code>Position</code>)           \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/strategy/strategy.py</code> <pre><code>def on_position(self, position: Position):\n    \"\"\"Listen for `Position` event\n\n    Args:\n        position (Position): _description_\n    \"\"\"\n</code></pre>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.on_trade","title":"on_trade","text":"<pre><code>on_trade(trade: Trade)\n</code></pre> <p>Listen for <code>Trade</code> event</p> <p>Parameters:</p> <ul> <li> <code>trade</code>               (<code>Trade</code>)           \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/strategy/strategy.py</code> <pre><code>def on_trade(self, trade: Trade):\n    \"\"\"Listen for `Trade` event\n\n    Args:\n        trade (Trade): _description_\n    \"\"\"\n</code></pre>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.on_transaction","title":"on_transaction","text":"<pre><code>on_transaction(trans: Execute | Order | Trade)\n</code></pre> <p>Listen for transaction events</p> <p>Parameters:</p> <ul> <li> <code>trans</code>               (<code>Execute | Order | Trade</code>)           \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/strategy/strategy.py</code> <pre><code>def on_transaction(self, trans: Execute | Order | Trade):\n    \"\"\"Listen for transaction events\n\n    Args:\n        trans (Execute | Order | Trade): _description_\n    \"\"\"\n</code></pre>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.plot","title":"plot","text":"<pre><code>plot(df: DataFeed) -&gt; dict\n</code></pre> <p>Custom config of plot</p> <p>Parameters:</p> <ul> <li> <code>df</code>               (<code>DataFeed</code>)           \u2013            <p>plot DataFeed</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict</code> (              <code>dict</code> )          \u2013            <p>config</p> </li> </ul> Source code in <code>lettrade/strategy/strategy.py</code> <pre><code>def plot(self, df: DataFeed) -&gt; dict:\n    \"\"\"Custom config of plot\n\n    Args:\n        df (DataFeed): plot DataFeed\n\n    Returns:\n        dict: config\n    \"\"\"\n    return dict()\n</code></pre>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.sell","title":"sell","text":"<pre><code>sell(\n    size: Optional[float] = None,\n    limit: Optional[float] = None,\n    stop: Optional[float] = None,\n    sl: Optional[float] = None,\n    tp: Optional[float] = None,\n    tag: Optional[object] = None,\n    **kwargs\n) -&gt; OrderResult\n</code></pre> <p>Place a new short order.</p> <p>Parameters:</p> <ul> <li> <code>size</code>               (<code>Optional[float]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>limit</code>               (<code>Optional[float]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>stop</code>               (<code>Optional[float]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>sl</code>               (<code>Optional[float]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>tp</code>               (<code>Optional[float]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>tag</code>               (<code>Optional[object]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>**kwargs</code>               (<code>Optional[dict]</code>, default:                   <code>{}</code> )           \u2013            <p>Extra-parameters send to <code>Exchange.new_order</code></p> </li> </ul> <p>Returns:</p> <ul> <li> <code>OrderResult</code> (              <code>OrderResult</code> )          \u2013            <p>order result information</p> </li> </ul> Source code in <code>lettrade/strategy/strategy.py</code> <pre><code>def sell(\n    self,\n    size: Optional[float] = None,\n    limit: Optional[float] = None,\n    stop: Optional[float] = None,\n    sl: Optional[float] = None,\n    tp: Optional[float] = None,\n    tag: Optional[object] = None,\n    **kwargs,\n) -&gt; OrderResult:\n    \"\"\"Place a new short order.\n\n    Args:\n        size (Optional[float], optional): _description_. Defaults to None.\n        limit (Optional[float], optional): _description_. Defaults to None.\n        stop (Optional[float], optional): _description_. Defaults to None.\n        sl (Optional[float], optional): _description_. Defaults to None.\n        tp (Optional[float], optional): _description_. Defaults to None.\n        tag (Optional[object], optional): _description_. Defaults to None.\n        **kwargs (Optional[dict], optional): Extra-parameters send to `Exchange.new_order`\n\n    Returns:\n        OrderResult: order result information\n    \"\"\"\n    params = dict(\n        size=-abs(size),\n        limit=limit,\n        stop=stop,\n        sl=sl,\n        tp=tp,\n        tag=tag,\n        **kwargs,\n    )\n    params[\"size\"] = -abs(self.__account.risk(**params))\n\n    return self.__exchange.new_order(**params)\n</code></pre>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.start","title":"start","text":"<pre><code>start(df: DataFeed) -&gt; None\n</code></pre> <p>call after <code>init()</code> and before first <code>next()</code> is called</p> <p>Parameters:</p> <ul> <li> <code>df</code>               (<code>DataFeed</code>)           \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>_type_</code> (              <code>None</code> )          \u2013            <p><code>None</code></p> </li> </ul> Source code in <code>lettrade/strategy/strategy.py</code> <pre><code>def start(self, df: DataFeed) -&gt; None:\n    \"\"\"call after `init()` and before first `next()` is called\n\n    Args:\n        df (DataFeed): _description_\n\n    Returns:\n        _type_: `None`\n    \"\"\"\n</code></pre>"},{"location":"reference/utils/","title":"Index","text":""},{"location":"reference/utils/#lettrade.utils","title":"utils","text":""},{"location":"reference/utils/docs/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> docs","text":""},{"location":"reference/utils/docs/#lettrade.utils.docs","title":"docs","text":""},{"location":"tutorial/tut-001/","title":"Tutorial 001","text":"<p>This tutorial tend to help understand basic of <code>lettrade</code></p>"},{"location":"tutorial/tut-001/#main-object","title":"Main object","text":"<ul> <li>DataFeed: is data for your bot to running, this is a implement of <code>pandas.DataFrame</code>, so it have all <code>pandas.DataFrame</code> feature</li> <li>Strategy: is base Strategy of your bot, implement your bot with this as base class</li> <li>Exchange: is base Exchange of your bot, where control trading event and logic</li> <li>Account: is base class, where your bot will control account cash, equity, risk, size, commission...</li> <li>Commander: is base class, where your bot will communicate with you in realtime</li> <li>Brain: is brain of your bot, it just internal object, so don't need to care about it</li> </ul>"},{"location":"tutorial/tut-001/#init-your-bot","title":"Init your bot","text":""},{"location":"tutorial/tut-001/#init-datafeed","title":"Init DataFeed","text":"<p><pre><code>from lettrade import DataFeed\nimport yfinance as yf\n\n# Your pandas.Dataframe\nmsft = yf.Ticker(\"MSFT\")\ndf = msft.history(period=\"1mo\")\n\nprint(\"pandas DataFrame:\\n\", df.tail())\n\ndata = DataFeed(data=df, name=\"MSFT\")\n\nprint(\"LetTrade DataFeed:\\n\", data.tail())\n</code></pre> <pre><code>pandas DataFrame:\n                                  Open        High         Low       Close    Volume  Dividends  Stock Splits\nDate                                                                                                        \n2024-05-15 00:00:00-04:00  417.899994  423.809998  417.269989  423.079987  22239500       0.75           0.0\n2024-05-16 00:00:00-04:00  421.799988  425.420013  420.350006  420.989990  17530100       0.00           0.0\n2024-05-17 00:00:00-04:00  422.540009  422.920013  418.029999  420.209991  15352200       0.00           0.0\n2024-05-20 00:00:00-04:00  420.209991  426.769989  419.989990  425.339996  16272100       0.00           0.0\n2024-05-21 00:00:00-04:00  426.829987  432.970001  424.850006  429.040009  21428700       0.00           0.0\nLetTrade DataFeed:\n                         Date        Open        High         Low       Close    Volume  Dividends  Stock Splits\n17 2024-05-15 00:00:00-04:00  417.899994  423.809998  417.269989  423.079987  22239500       0.75           0.0\n18 2024-05-16 00:00:00-04:00  421.799988  425.420013  420.350006  420.989990  17530100       0.00           0.0\n19 2024-05-17 00:00:00-04:00  422.540009  422.920013  418.029999  420.209991  15352200       0.00           0.0\n20 2024-05-20 00:00:00-04:00  420.209991  426.769989  419.989990  425.339996  16272100       0.00           0.0\n21 2024-05-21 00:00:00-04:00  426.829987  432.970001  424.850006  429.040009  21428700       0.00           0.0\n</code></pre></p>"},{"location":"tutorial/tut-001/#strategy-implement","title":"Strategy implement","text":"<pre><code>class SmaCross(Strategy):\n    ema1_period = 9\n    ema2_period = 21\n</code></pre>"},{"location":"tutorial/tut-001/#indicatorsignal-implement","title":"Indicator/signal implement","text":"<pre><code>import talib.abstract as ta\nfrom lettrade import DataFeed\n\ndef indicators(self, df: DataFeed):\n    df[\"ema1\"] = ta.EMA(df, timeperiod=self.ema1_period)\n    df[\"ema2\"] = ta.EMA(df, timeperiod=self.ema2_period)\n\n    df[\"signal_ema_crossover\"] = crossover(df.ema1, df.ema2)\n    df[\"signal_ema_crossunder\"] = crossunder(df.ema1, df.ema2)\n</code></pre>"},{"location":"tutorial/optimize/blackbox/","title":"Optimize with blackbox","text":"In\u00a0[\u00a0]: Copied! <pre>!pip install git+https://github.com/paulknysh/blackbox.git@master\n</pre> !pip install git+https://github.com/paulknysh/blackbox.git@master <p>At time of this tutorial, blackbox not work with Python 3.10. Quick fix version until update</p> In\u00a0[\u00a0]: Copied! <pre>!pip install git+https://github.com/AwesomeTrading/blackbox.git@master\n</pre> !pip install git+https://github.com/AwesomeTrading/blackbox.git@master In\u00a0[1]: Copied! <pre>import talib.abstract as ta\n\nfrom lettrade import DataFeed, Strategy, crossover, crossunder\nfrom lettrade.exchange.backtest import ForexBackTestAccount, let_backtest\n\n\nclass SmaCross(Strategy):\n    ema1_period = 9\n    ema2_period = 21\n\n    def indicators(self, df: DataFeed):\n        df[\"ema1\"] = ta.EMA(df, timeperiod=self.ema1_period)\n        df[\"ema2\"] = ta.EMA(df, timeperiod=self.ema2_period)\n\n        df[\"signal_ema_crossover\"] = crossover(df.ema1, df.ema2)\n        df[\"signal_ema_crossunder\"] = crossunder(df.ema1, df.ema2)\n\n    def next(self, df: DataFeed):\n        if len(self.orders) &gt; 0 or len(self.trades) &gt; 0:\n            return\n\n        if df.signal_ema_crossover[-1]:\n            price = self.data.close[-1]\n            self.buy(size=0.1, sl=price - 0.001, tp=price + 0.001)\n        elif df.signal_ema_crossunder[-1]:\n            price = self.data.close[-1]\n            self.sell(size=0.1, sl=price + 0.001, tp=price - 0.001)\n\nlt = let_backtest(\n    strategy=SmaCross,\n    datas=\"example/data/data/EURUSD_5m_0_10000.csv\",\n    account=ForexBackTestAccount,\n)\n</pre> import talib.abstract as ta  from lettrade import DataFeed, Strategy, crossover, crossunder from lettrade.exchange.backtest import ForexBackTestAccount, let_backtest   class SmaCross(Strategy):     ema1_period = 9     ema2_period = 21      def indicators(self, df: DataFeed):         df[\"ema1\"] = ta.EMA(df, timeperiod=self.ema1_period)         df[\"ema2\"] = ta.EMA(df, timeperiod=self.ema2_period)          df[\"signal_ema_crossover\"] = crossover(df.ema1, df.ema2)         df[\"signal_ema_crossunder\"] = crossunder(df.ema1, df.ema2)      def next(self, df: DataFeed):         if len(self.orders) &gt; 0 or len(self.trades) &gt; 0:             return          if df.signal_ema_crossover[-1]:             price = self.data.close[-1]             self.buy(size=0.1, sl=price - 0.001, tp=price + 0.001)         elif df.signal_ema_crossunder[-1]:             price = self.data.close[-1]             self.sell(size=0.1, sl=price + 0.001, tp=price - 0.001)  lt = let_backtest(     strategy=SmaCross,     datas=\"example/data/data/EURUSD_5m_0_10000.csv\",     account=ForexBackTestAccount, ) In\u00a0[2]: Copied! <pre>import black_box as bb\n\ndef params_parser(args):\n    return [\n        (\"ema1_period\", int(args[0])),\n        (\"ema2_period\", int(args[1])),\n    ]\n\n\ndef result_parser(result):\n    return result[\"Equity [$]\"]\n\n\nbest_params = bb.search_min(\n    f=lt.optimize_model(\n        params_parser=params_parser,\n        result_parser=result_parser,\n        fork_data=True,\n    ),  # given function\n    domain=[[5, 25], [10, 50]],  # ranges of each parameter\n    budget=200,  # total number of function calls available\n    batch=12,  # number of calls that will be evaluated in parallel\n    resfile=\"output.csv\",\n)  # text file where results will be saved\n</pre> import black_box as bb  def params_parser(args):     return [         (\"ema1_period\", int(args[0])),         (\"ema2_period\", int(args[1])),     ]   def result_parser(result):     return result[\"Equity [$]\"]   best_params = bb.search_min(     f=lt.optimize_model(         params_parser=params_parser,         result_parser=result_parser,         fork_data=True,     ),  # given function     domain=[[5, 25], [10, 50]],  # ranges of each parameter     budget=200,  # total number of function calls available     batch=12,  # number of calls that will be evaluated in parallel     resfile=\"output.csv\", )  # text file where results will be saved <pre>[blackbox] FYI: budget was adjusted to be 204\n[blackbox] evaluating batch 1/17 (samples 1..12/204) @ 2024-05-24 22:42:34 ...\n[blackbox] evaluating batch 2/17 (samples 13..24/204) @ 2024-05-24 22:42:35 ...\n[blackbox] evaluating batch 3/17 (samples 25..36/204) @ 2024-05-24 22:42:36 ...\n[blackbox] evaluating batch 4/17 (samples 37..48/204) @ 2024-05-24 22:42:38 ...\n[blackbox] evaluating batch 5/17 (samples 49..60/204) @ 2024-05-24 22:42:39 ...\n[blackbox] evaluating batch 6/17 (samples 61..72/204) @ 2024-05-24 22:42:40 ...\n[blackbox] evaluating batch 7/17 (samples 73..84/204) @ 2024-05-24 22:42:41 ...\n[blackbox] evaluating batch 8/17 (samples 85..96/204) @ 2024-05-24 22:42:42 ...\n[blackbox] evaluating batch 9/17 (samples 97..108/204) @ 2024-05-24 22:42:43 ...\n[blackbox] evaluating batch 10/17 (samples 109..120/204) @ 2024-05-24 22:42:44 ...\n[blackbox] evaluating batch 11/17 (samples 121..132/204) @ 2024-05-24 22:42:47 ...\n[blackbox] evaluating batch 12/17 (samples 133..144/204) @ 2024-05-24 22:42:49 ...\n[blackbox] evaluating batch 13/17 (samples 145..156/204) @ 2024-05-24 22:42:51 ...\n[blackbox] evaluating batch 14/17 (samples 157..168/204) @ 2024-05-24 22:42:54 ...\n[blackbox] evaluating batch 15/17 (samples 169..180/204) @ 2024-05-24 22:42:56 ...\n[blackbox] evaluating batch 16/17 (samples 181..192/204) @ 2024-05-24 22:42:59 ...\n[blackbox] evaluating batch 17/17 (samples 193..204/204) @ 2024-05-24 22:43:02 ...\n[blackbox] DONE: see results in output.csv @ 2024-05-24 22:43:05\n</pre> In\u00a0[3]: Copied! <pre>import pandas as pd\n\ndf = pd.read_csv(\"output.csv\")\n\ndf.columns = [\"x\", \"y\", \"z\"]\ndf.x = df.x.astype(int)\ndf.y = df.y.astype(int)\n\ndf\n</pre> import pandas as pd  df = pd.read_csv(\"output.csv\")  df.columns = [\"x\", \"y\", \"z\"] df.x = df.x.astype(int) df.y = df.y.astype(int)  df Out[3]: x y z 0 12 24 811.0 1 12 24 811.0 2 15 21 811.3 3 15 19 811.7 4 15 19 811.7 ... ... ... ... 199 21 11 1096.7 200 24 10 1118.4 201 20 15 1148.4 202 22 13 1148.5 203 12 11 1153.9 <p>204 rows \u00d7 3 columns</p> In\u00a0[4]: Copied! <pre>import plotly.io as pio\n\npio.renderers.default = \"notebook\"\n</pre> import plotly.io as pio  pio.renderers.default = \"notebook\" In\u00a0[5]: Copied! <pre>import plotly.express as px\n\nfig = px.density_contour(\n    df,\n    x=\"x\",\n    y=\"y\",\n    z=\"z\",\n    histfunc=\"max\",\n)\nfig.update_traces(contours_coloring=\"fill\", contours_showlabels=True)\nfig.show()\n</pre> import plotly.express as px  fig = px.density_contour(     df,     x=\"x\",     y=\"y\",     z=\"z\",     histfunc=\"max\", ) fig.update_traces(contours_coloring=\"fill\", contours_showlabels=True) fig.show() In\u00a0[6]: Copied! <pre>import plotly.express as px\n\nfig = px.density_heatmap(\n    df,\n    x=\"x\",\n    y=\"y\",\n    z=\"z\",\n    nbinsx=20,\n    nbinsy=40,\n    histfunc=\"max\",\n    color_continuous_scale=\"Viridis\",\n)\nfig.show()\n</pre> import plotly.express as px  fig = px.density_heatmap(     df,     x=\"x\",     y=\"y\",     z=\"z\",     nbinsx=20,     nbinsy=40,     histfunc=\"max\",     color_continuous_scale=\"Viridis\", ) fig.show() In\u00a0[7]: Copied! <pre>import plotly.graph_objects as go\n\nfig = go.Figure(\n    go.Histogram2d(\n        x=df.x,\n        y=df.y,\n        z=df.z,\n        nbinsx=20,\n        nbinsy=40,\n        histfunc=\"max\",\n    )\n)\n\nfig.show()\n</pre> import plotly.graph_objects as go  fig = go.Figure(     go.Histogram2d(         x=df.x,         y=df.y,         z=df.z,         nbinsx=20,         nbinsy=40,         histfunc=\"max\",     ) )  fig.show()"},{"location":"tutorial/optimize/blackbox/#optimize-with-blackbox","title":"Optimize with blackbox\u00b6","text":"<p>Home</p> <p>Install latest blackbox optimize from PyPi</p>"},{"location":"tutorial/optimize/blackbox/#sample-strategy","title":"Sample strategy\u00b6","text":""},{"location":"tutorial/optimize/blackbox/#run-optimize","title":"Run optimize\u00b6","text":""},{"location":"tutorial/optimize/blackbox/#clean-data","title":"Clean data\u00b6","text":""},{"location":"tutorial/optimize/blackbox/#plot-headmap","title":"Plot headmap\u00b6","text":""},{"location":"tutorial/optimize/blackbox/#init-plotly-environment","title":"Init Plotly environment\u00b6","text":""},{"location":"tutorial/optimize/blackbox/#type-1","title":"Type 1\u00b6","text":""},{"location":"tutorial/optimize/blackbox/#type-2","title":"Type 2\u00b6","text":""},{"location":"tutorial/optimize/blackbox/#type-3","title":"Type 3\u00b6","text":""},{"location":"tutorial/optimize/blackbox/#source","title":"Source\u00b6","text":"<pre>--8&lt;-- \"example/optimize/blackbox.py\"\n</pre>"},{"location":"tutorial/optimize/hyperactive/","title":"Optimize with Hyperactive","text":"In\u00a0[\u00a0]: Copied! <pre>!pip install hyperactive\n</pre> !pip install hyperactive In\u00a0[1]: Copied! <pre>import talib.abstract as ta\n\nfrom lettrade import DataFeed, Strategy, crossover, crossunder\nfrom lettrade.exchange.backtest import ForexBackTestAccount, let_backtest\n\n\nclass SmaCross(Strategy):\n    ema1_period = 9\n    ema2_period = 21\n\n    def indicators(self, df: DataFeed):\n        df[\"ema1\"] = ta.EMA(df, timeperiod=self.ema1_period)\n        df[\"ema2\"] = ta.EMA(df, timeperiod=self.ema2_period)\n\n        df[\"signal_ema_crossover\"] = crossover(df.ema1, df.ema2)\n        df[\"signal_ema_crossunder\"] = crossunder(df.ema1, df.ema2)\n\n    def next(self, df: DataFeed):\n        if len(self.orders) &gt; 0 or len(self.trades) &gt; 0:\n            return\n\n        if df.signal_ema_crossover[-1]:\n            price = self.data.close[-1]\n            self.buy(size=0.1, sl=price - 0.001, tp=price + 0.001)\n        elif df.signal_ema_crossunder[-1]:\n            price = self.data.close[-1]\n            self.sell(size=0.1, sl=price + 0.001, tp=price - 0.001)\n\n\nlt = let_backtest(\n    strategy=SmaCross,\n    datas=\"example/data/data/EURUSD_5m_0_10000.csv\",\n    account=ForexBackTestAccount,\n)\n</pre> import talib.abstract as ta  from lettrade import DataFeed, Strategy, crossover, crossunder from lettrade.exchange.backtest import ForexBackTestAccount, let_backtest   class SmaCross(Strategy):     ema1_period = 9     ema2_period = 21      def indicators(self, df: DataFeed):         df[\"ema1\"] = ta.EMA(df, timeperiod=self.ema1_period)         df[\"ema2\"] = ta.EMA(df, timeperiod=self.ema2_period)          df[\"signal_ema_crossover\"] = crossover(df.ema1, df.ema2)         df[\"signal_ema_crossunder\"] = crossunder(df.ema1, df.ema2)      def next(self, df: DataFeed):         if len(self.orders) &gt; 0 or len(self.trades) &gt; 0:             return          if df.signal_ema_crossover[-1]:             price = self.data.close[-1]             self.buy(size=0.1, sl=price - 0.001, tp=price + 0.001)         elif df.signal_ema_crossunder[-1]:             price = self.data.close[-1]             self.sell(size=0.1, sl=price + 0.001, tp=price - 0.001)   lt = let_backtest(     strategy=SmaCross,     datas=\"example/data/data/EURUSD_5m_0_10000.csv\",     account=ForexBackTestAccount, ) In\u00a0[2]: Copied! <pre>from hyperactive import Hyperactive\nfrom hyperactive.optimizers import HillClimbingOptimizer\n\n\n# define the model in a function\ndef params_parser(args):\n    params = [\n        (\"ema1_period\", int(args[\"ema1_period\"])),\n        (\"ema2_period\", int(args[\"ema2_period\"])),\n    ]\n    return params\n\n\ndef result_parser(result):\n    return result[\"Equity [$]\"]\n\n\nmodel = lt.optimize_model(\n    params_parser=params_parser,\n    result_parser=result_parser,\n    fork_data=True,\n)\n\n# search space determines the ranges of parameters you want the optimizer to search through\nsearch_space = {\n    \"ema1_period\": list(range(5, 25, 1)),\n    \"ema2_period\": list(range(10, 50)),\n}\n\noptimizer = HillClimbingOptimizer(epsilon=0.1, distribution=\"laplace\", n_neighbours=4)\n\n# start the optimization run\nhyper = Hyperactive()\nhyper.add_search(model, search_space, optimizer=optimizer, n_iter=1000)\nhyper.run()\n</pre> from hyperactive import Hyperactive from hyperactive.optimizers import HillClimbingOptimizer   # define the model in a function def params_parser(args):     params = [         (\"ema1_period\", int(args[\"ema1_period\"])),         (\"ema2_period\", int(args[\"ema2_period\"])),     ]     return params   def result_parser(result):     return result[\"Equity [$]\"]   model = lt.optimize_model(     params_parser=params_parser,     result_parser=result_parser,     fork_data=True, )  # search space determines the ranges of parameters you want the optimizer to search through search_space = {     \"ema1_period\": list(range(5, 25, 1)),     \"ema2_period\": list(range(10, 50)), }  optimizer = HillClimbingOptimizer(epsilon=0.1, distribution=\"laplace\", n_neighbours=4)  # start the optimization run hyper = Hyperactive() hyper.add_search(model, search_space, optimizer=optimizer, n_iter=1000) hyper.run() <pre>[0] _optimize_model (Hill Climbing): 100%|\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500| 1000/1000 [04:26&lt;00:00,  3.75it/s, best_iter=0, best_pos=[18  3], best_score=1169.0]</pre> <pre>\n\nResults: '_optimize_model'  \n   Best score: 1169.0  \n   Best parameter set:\n      'ema1_period' : 23.0  \n      'ema2_period' : 13.0  \n   Best iteration: 0  \n \n   Random seed: 742903516  \n \n   Evaluation time   : 265.45777797698975 sec    [99.95 %]\n   Optimization time : 0.12505793571472168 sec    [0.05 %]\n   Iteration time    : 265.58283591270447 sec    [3.77 iter/sec]\n \n</pre> <pre>\n</pre> In\u00a0[3]: Copied! <pre>df = hyper.search_data(model)\ndf\n</pre> df = hyper.search_data(model) df Out[3]: ema1_period ema2_period score 0 23 45 1008.3 1 10 20 982.3 2 11 23 851.7 3 11 36 940.7 4 17 23 959.7 ... ... ... ... 995 24 19 959.1 996 15 39 984.3 997 22 39 921.7 998 17 14 1056.1 999 23 12 1158.4 <p>1000 rows \u00d7 3 columns</p> In\u00a0[5]: Copied! <pre>import plotly.io as pio\n\npio.renderers.default = \"notebook\"\n</pre> import plotly.io as pio  pio.renderers.default = \"notebook\" In\u00a0[6]: Copied! <pre>import plotly.express as px\n\nfig = px.density_heatmap(\n    df,\n    x=\"ema1_period\",\n    y=\"ema2_period\",\n    z=\"score\",\n    nbinsx=30,\n    nbinsy=30,\n    histfunc=\"max\",\n    color_continuous_scale=\"Viridis\",\n)\nfig.show()\n</pre> import plotly.express as px  fig = px.density_heatmap(     df,     x=\"ema1_period\",     y=\"ema2_period\",     z=\"score\",     nbinsx=30,     nbinsy=30,     histfunc=\"max\",     color_continuous_scale=\"Viridis\", ) fig.show() In\u00a0[7]: Copied! <pre>import plotly.express as px\n\nfig = px.density_contour(\n    df,\n    x=\"ema1_period\",\n    y=\"ema2_period\",\n    z=\"score\",\n    histfunc=\"max\",\n)\nfig.update_traces(contours_coloring=\"fill\", contours_showlabels=True)\nfig.show()\n</pre> import plotly.express as px  fig = px.density_contour(     df,     x=\"ema1_period\",     y=\"ema2_period\",     z=\"score\",     histfunc=\"max\", ) fig.update_traces(contours_coloring=\"fill\", contours_showlabels=True) fig.show()"},{"location":"tutorial/optimize/hyperactive/#optimize-with-hyperactive","title":"Optimize with Hyperactive\u00b6","text":"<p>Home</p>"},{"location":"tutorial/optimize/hyperactive/#install","title":"Install\u00b6","text":""},{"location":"tutorial/optimize/hyperactive/#sample-strategy","title":"Sample strategy\u00b6","text":""},{"location":"tutorial/optimize/hyperactive/#example","title":"Example\u00b6","text":""},{"location":"tutorial/optimize/hyperactive/#plot","title":"Plot\u00b6","text":""},{"location":"tutorial/optimize/hyperactive/#type-1","title":"Type 1\u00b6","text":""},{"location":"tutorial/optimize/hyperactive/#type-2","title":"Type 2\u00b6","text":""}]}