{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"LetTrade","text":"<p>A lightweight trading framework compatible with Stock, Forex, Crypto... markets</p> <p>Find more at Documentation</p>"},{"location":"#installation","title":"Installation","text":"<p>[!WARNING] LetTrade is under heavy construction, features and functions may be changed.</p> <p>Using Developing version to get latest update.</p> <p>Stable version</p> <pre><code>pip install lettrade\n</code></pre> <p>Developing version</p> <pre><code>pip install git+https://git@github.com/AwesomeTrading/lettrade.git@main\n</code></pre>"},{"location":"#example","title":"Example","text":"<pre><code>import talib.abstract as ta\n\nfrom lettrade.all import DataFeed, Strategy, let_backtest, indicator as i\n\n\nclass SmaCross(Strategy):\n    ema1_period = 9\n    ema2_period = 21\n\n    def indicators(self, df: DataFeed):\n        df[\"ema1\"] = ta.EMA(df, timeperiod=self.ema1_period)\n        df[\"ema2\"] = ta.EMA(df, timeperiod=self.ema2_period)\n\n        df[\"crossover\"] = i.crossover(df.ema1, df.ema2)\n        df[\"crossunder\"] = i.crossunder(df.ema1, df.ema2)\n\n    def next(self, df: DataFeed):\n        if df.l.crossover[-1]:\n            self.buy(0.1)\n        elif df.l.crossunder[-1]:\n            self.sell(0.1)\n\nlt = let_backtest(\n    strategy=SmaCross,\n    datas=\"example/data/data/EURUSD_5m_0_1000.csv\",\n)\n\nlt.run()\nlt.plot()\n</code></pre> <pre><code># Strategy                       &lt;class 'SmaCross'&gt;\nStart                     2024-05-13 21:15:00+00:00\nEnd                       2024-05-17 08:30:00+00:00\nDuration                            3 days 11:15:00\nStart Balance [$]                             10000\nEquity [$]                                  10000.0\nPL [$]                                          0.0\nPL [%]                                          0.0\nBuy &amp; Hold PL [%]                               2.0\nMax. Drawdown [%]                            -33.08\nAvg. Drawdown [%]                             -5.58\nMax. Drawdown Duration            688 days 00:00:00\nAvg. Drawdown Duration             41 days 00:00:00\n\n# Trades                                         34\nBest Trade [%]                               0.0007\nWorst Trade [%]                           -0.000732\nProfit Factor                                  2.13\nSQN                                            1.78\n</code></pre>"},{"location":"#start-a-strategy","title":"Start a strategy","text":"<p>More examples can be found in <code>example/</code></p>"},{"location":"#download-data","title":"Download data","text":"<pre><code>python -m example.data.yfinance\n</code></pre>"},{"location":"#backtest-strategy","title":"Backtest strategy","text":"<pre><code>python -m example.strategy.backtest_sma_cross\n</code></pre> <pre><code># Strategy                &lt;class '__main__.SmaCross'&gt;\nStart                       2023-01-02 00:00:00+00:00\nEnd                         2023-12-29 21:00:00+00:00\nDuration                            361 days 21:00:00\nStart Balance                                    1000\nEquity [$]                                    1497.29\nPL [$]                                         497.29\nPL [%]                                          49.73\nBuy &amp; Hold PL [%]                                 2.0\nMax. Drawdown [%]                              -33.08\nAvg. Drawdown [%]                               -5.58\nMax. Drawdown Duration              688 days 00:00:00\nAvg. Drawdown Duration               41 days 00:00:00\n\n# Trades                                          248\nWin Rate [%]                                     50.0\nFee [$]                                         -4.96\nBest Trade [%]                             554.825333\nWorst Trade [%]                           -525.077316\nProfit Factor                                    2.13\nSQN                                              1.78\n</code></pre>"},{"location":"#live-trading","title":"Live Trading","text":""},{"location":"#official","title":"Official","text":"<ul> <li><code>MetaTrader</code>: Support MetaTrader 5 Terminal trading</li> <li><code>CCXT</code>: [WIP] Support most of cryptocurrency exchange from CCXT library</li> </ul>"},{"location":"#development","title":"Development","text":"<p>Set up conda environment</p> <pre><code>conda create -y -n LetTrade python=3.12\nconda activate LetTrade\npip install -r requirements-dev.txt\n</code></pre>"},{"location":"dev/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p>"},{"location":"dev/#development","title":"Development","text":"<p>Guide for developer to install <code>lettrade</code></p>"},{"location":"dev/#environment-setup","title":"Environment setup","text":"<p>Set up conda environment</p> <pre><code>conda create -y -n LetTrade python=3.12\nconda activate LetTrade\npip install -r requirements-dev.txt\n</code></pre>"},{"location":"dev/#document","title":"Document","text":"<p>Building <code>lettrade</code> document guide</p>"},{"location":"dev/#dependencies","title":"Dependencies","text":"<p>Install <code>lettrade</code> as module</p> <pre><code>pip install .\n</code></pre> <p>Install python document requirements</p> <pre><code>pip install -r docs/requirements-docs.txt\n</code></pre>"},{"location":"dev/#view-document","title":"View document","text":"<p>Start mkdocs local server</p> <pre><code>mkdocs serve\n</code></pre>"},{"location":"indicator/install/","title":"TA Library","text":""},{"location":"indicator/install/#ta-lib","title":"TA-Lib","text":"<p>Home | Indicators</p>"},{"location":"indicator/install/#build-from-source","title":"Build from source","text":"<p>Download ta-lib from github ta-lib-0.4.0-src.tar.gz</p> <pre><code>tar zxvf ta-lib-0.4.0-src.tar.gz\ncd ta-lib\n./configure --prefix=/usr\nmake\nsudo make install\n</code></pre> <p>Full install tutorial from TA-Lib</p>"},{"location":"indicator/install/#conda-forge","title":"Conda-Forge","text":"<pre><code>conda install -c conda-forge ta-lib\n</code></pre>"},{"location":"indicator/install/#python-library","title":"Python library","text":"<pre><code>pip install TA-Lib\n</code></pre>"},{"location":"indicator/install/#pandas-ta","title":"Pandas-TA","text":"<p>Home | Indicators</p> <pre><code>pip install pandas_ta\n</code></pre>"},{"location":"indicator/install/#technical-analysis-library-in-python","title":"Technical Analysis Library in Python","text":"<p>Home | Indicators</p> <pre><code>pip install --upgrade ta\n</code></pre>"},{"location":"indicator/install/#technical","title":"Technical","text":"<p>Home | Indicators</p> <pre><code>pip install technical\n</code></pre>"},{"location":"indicator/talib/","title":"TA-Lib","text":"<p>Home | Indicators</p>"},{"location":"indicator/talib/#installation","title":"Installation","text":""},{"location":"indicator/talib/#build-from-source","title":"Build from source","text":"<p>Download ta-lib from github ta-lib-0.4.0-src.tar.gz</p> <pre><code>tar zxvf ta-lib-0.4.0-src.tar.gz\ncd ta-lib\n./configure --prefix=/usr\nmake\nsudo make install\n</code></pre> <p>Full install tutorial from TA-Lib</p>"},{"location":"indicator/talib/#conda-forge","title":"Conda-Forge","text":"<pre><code>conda install -c conda-forge ta-lib\n</code></pre>"},{"location":"indicator/talib/#python-library","title":"Python library","text":"<pre><code>pip install TA-Lib\n</code></pre>"},{"location":"indicator/technical/","title":"Freqtrade Technical","text":"<p>Home</p>"},{"location":"indicator/technical/#installation","title":"Installation","text":"<pre><code>pip install technical\n</code></pre>"},{"location":"install/","title":"LetTrade install","text":"<p>Guide to quick install <code>lettrade</code></p>"},{"location":"install/#installation","title":"Installation","text":"<p>Stable version</p> <pre><code>pip install lettrade\n</code></pre> <p>Developing version</p> <pre><code>pip install git+https://git@github.com/AwesomeTrading/lettrade.git@main\n</code></pre>"},{"location":"install/metatrader/","title":"MetaTrader 5 Install","text":"<p><code>MetaTrader 5</code> is exchange server of module MetaTrader</p>"},{"location":"install/metatrader/#ubuntu","title":"Ubuntu","text":""},{"location":"install/metatrader/#wine","title":"Wine","text":"<pre><code>wget https://download.mql5.com/cdn/web/metaquotes.software.corp/mt5/mt5ubuntu.sh ; chmod +x mt5ubuntu.sh ; ./mt5ubuntu.sh\n</code></pre>"},{"location":"install/metatrader/#python","title":"Python","text":"<pre><code>wget https://www.python.org/ftp/python/3.10.11/python-3.10.11.exe\n\nexport WINEPREFIX=$HOME/.mt5\nwine python-3.10.11.exe\n</code></pre>"},{"location":"install/metatrader/#python-requirements","title":"Python requirements","text":"<pre><code>export WINEPREFIX=$HOME/.mt5\n\ncd $HOME/.mt5/dosdevices/c:/users/$USER/AppData/Local/Programs/Python/Python310-32/\n\nwine python.exe -m pip install --upgrade pip\nwine python.exe -m pip install MetaTrader5\nwine python.exe -m pip install https://github.com/AwesomeTrading/mt5linux/archive/master.zip\n</code></pre>"},{"location":"install/metatrader/#start-server","title":"Start Server","text":"<pre><code>export WINEPREFIX=$HOME/.mt5\n\npython -m mt5linux \"$HOME/.mt5/dosdevices/c:/users/$USER/AppData/Local/Programs/Python/Python310-32/python.exe\"\n</code></pre>"},{"location":"install/metatrader/#metatrader-terminal","title":"MetaTrader Terminal","text":""},{"location":"install/metatrader/#load-broker-information","title":"Load broker information","text":"<p>Load broker information before start by steps:</p> <ul> <li><code>File</code> menu</li> <li><code>Open an Account</code> action</li> <li>Search your broker (ex: <code>Tickmill</code>, <code>Roboforex</code>...)</li> <li><code>Enter</code> to load</li> <li><code>Cancel</code> (Done)</li> </ul>"},{"location":"install/metatrader/#enable-automatic-algo-trading","title":"Enable Automatic Algo Trading","text":"<ul> <li><code>Tools</code> menu</li> <li><code>Options</code> menu</li> <li><code>Expert Advisors</code> tab</li> <li><code>Allow Auto Trading</code> checkbox</li> <li>Uncheck <code>Disable automated trading when switching accounts</code> and <code>Disable automated trading when switching profiles</code></li> </ul>"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li> account<ul> <li> account</li> <li> error</li> </ul> </li> <li> all</li> <li> base<ul> <li> error</li> <li> flag</li> </ul> </li> <li> bot</li> <li> brain<ul> <li> brain</li> </ul> </li> <li> calendar<ul> <li> calendar</li> </ul> </li> <li> commander<ul> <li> commander</li> <li> telegram</li> </ul> </li> <li> data<ul> <li> data</li> <li> error</li> <li> extra<ul> <li> csv</li> </ul> </li> <li> feeder</li> <li> replay</li> <li> resample</li> <li> timeframe</li> <li> wrapper</li> </ul> </li> <li> exchange<ul> <li> backtest<ul> <li> account</li> <li> backtest</li> <li> commander</li> <li> data</li> <li> exchange</li> <li> extra<ul> <li> ray<ul> <li> ray</li> </ul> </li> <li> yfinance<ul> <li> yfinance</li> </ul> </li> </ul> </li> <li> feeder</li> <li> plotly<ul> <li> optimize</li> </ul> </li> <li> stats</li> <li> trade</li> </ul> </li> <li> base</li> <li> error</li> <li> exchange</li> <li> execution</li> <li> live<ul> <li> account</li> <li> api</li> <li> ccxt<ul> <li> api</li> <li> ccxt</li> </ul> </li> <li> data</li> <li> exchange</li> <li> feeder</li> <li> live</li> <li> metatrader<ul> <li> api</li> <li> metatrader</li> </ul> </li> <li> trade</li> </ul> </li> <li> order</li> <li> position</li> </ul> </li> <li> indicator<ul> <li> candlestick<ul> <li> candlestick</li> <li> talib</li> </ul> </li> <li> function</li> <li> indicator</li> <li> vendor<ul> <li> fastfinance<ul> <li> connector</li> <li> fastfinance</li> </ul> </li> <li> qtpylib<ul> <li> inject</li> <li> qtpylib</li> </ul> </li> </ul> </li> <li> volatility<ul> <li> keltner_channel</li> </ul> </li> </ul> </li> <li> lettrade</li> <li> plot<ul> <li> bot</li> <li> color</li> <li> optimize</li> <li> plot</li> <li> plotly<ul> <li> helper</li> <li> indicator</li> <li> plotly</li> </ul> </li> </ul> </li> <li> stats<ul> <li> stats</li> </ul> </li> <li> strategy<ul> <li> strategy</li> </ul> </li> <li> utils<ul> <li> docs</li> <li> notebook</li> </ul> </li> </ul>"},{"location":"reference/all/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> all","text":""},{"location":"reference/all/#lettrade.all","title":"all","text":"<p>Import everything in one. Import some unnecessary but convenient for everyone</p>"},{"location":"reference/bot/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> bot","text":""},{"location":"reference/bot/#lettrade.bot","title":"bot","text":""},{"location":"reference/bot/#lettrade.bot.LetTradeBot","title":"LetTradeBot","text":"<pre><code>LetTradeBot(\n    strategy: Type[Strategy],\n    datas: DataFeed | list[DataFeed] | str | list[str],\n    feeder: Type[DataFeeder],\n    exchange: Type[Exchange],\n    account: Type[Account],\n    commander: Optional[Type[Commander]] = None,\n    plotter: Optional[Type[Plotter]] = None,\n    stats: Optional[Type[BotStatistic]] = None,\n    name: Optional[str] = None,\n    **kwargs\n)\n</code></pre> Source code in <code>lettrade/bot.py</code> <pre><code>def __init__(\n    self,\n    strategy: Type[Strategy],\n    datas: DataFeed | list[DataFeed] | str | list[str],\n    feeder: Type[DataFeeder],\n    exchange: Type[Exchange],\n    account: Type[Account],\n    commander: Optional[Type[Commander]] = None,\n    plotter: Optional[Type[Plotter]] = None,\n    stats: Optional[Type[BotStatistic]] = None,\n    name: Optional[str] = None,\n    **kwargs,\n) -&gt; None:\n    logger.info(\"New bot: %s\", name)\n\n    self._strategy_cls = strategy\n    self._feeder_cls = feeder\n    self._exchange_cls = exchange\n    self._account_cls = account\n    self._commander_cls = commander\n    self._plotter_cls = plotter\n    self._stats_cls = stats\n\n    self._name = name\n    self._kwargs = kwargs\n\n    # DataFeeds\n    self.datas = datas\n    self.data = self.datas[0]\n</code></pre>"},{"location":"reference/bot/#lettrade.bot.LetTradeBot.account","title":"account  <code>instance-attribute</code>","text":"<pre><code>account: Account\n</code></pre> <p>Trading account handler</p>"},{"location":"reference/bot/#lettrade.bot.LetTradeBot.brain","title":"brain  <code>instance-attribute</code>","text":"<pre><code>brain: Brain\n</code></pre> <p>Brain of bot</p>"},{"location":"reference/bot/#lettrade.bot.LetTradeBot.commander","title":"commander  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>commander: Optional[Commander] = None\n</code></pre> <p>Control the bot</p>"},{"location":"reference/bot/#lettrade.bot.LetTradeBot.data","title":"data  <code>instance-attribute</code>","text":"<pre><code>data: DataFeed = datas[0]\n</code></pre> <p>Main DataFeed for bot</p>"},{"location":"reference/bot/#lettrade.bot.LetTradeBot.datas","title":"datas  <code>instance-attribute</code>","text":"<pre><code>datas: list[DataFeed] = datas\n</code></pre> <p>DataFeed list for bot</p>"},{"location":"reference/bot/#lettrade.bot.LetTradeBot.exchange","title":"exchange  <code>instance-attribute</code>","text":"<pre><code>exchange: Exchange\n</code></pre> <p>Trading exchange and events</p>"},{"location":"reference/bot/#lettrade.bot.LetTradeBot.feeder","title":"feeder  <code>instance-attribute</code>","text":"<pre><code>feeder: DataFeeder\n</code></pre> <p>DataFeeder help to handle <code>datas</code></p>"},{"location":"reference/bot/#lettrade.bot.LetTradeBot.plotter","title":"plotter  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>plotter: Optional[Plotter] = None\n</code></pre> <p>Plot graphic results</p>"},{"location":"reference/bot/#lettrade.bot.LetTradeBot.strategy","title":"strategy  <code>instance-attribute</code>","text":"<pre><code>strategy: Strategy\n</code></pre> <p>Strategy</p>"},{"location":"reference/bot/#lettrade.bot.LetTradeBot.plot","title":"plot","text":"<pre><code>plot(*args, **kwargs)\n</code></pre> <p>Plot strategy result</p> Source code in <code>lettrade/bot.py</code> <pre><code>def plot(self, *args, **kwargs):\n    \"\"\"Plot strategy result\"\"\"\n    if __debug__:\n        from .utils.docs import is_docs_session\n\n        if is_docs_session():\n            return\n\n    self.plotter.plot(*args, **kwargs)\n</code></pre>"},{"location":"reference/bot/#lettrade.bot.LetTradeBot.stop","title":"stop","text":"<pre><code>stop()\n</code></pre> <p>Stop strategy</p> Source code in <code>lettrade/bot.py</code> <pre><code>def stop(self):\n    \"\"\"Stop strategy\"\"\"\n    self.brain.stop()\n    if self.plotter is not None:\n        self.plotter.stop()\n</code></pre>"},{"location":"reference/lettrade/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> lettrade","text":""},{"location":"reference/lettrade/#lettrade.lettrade","title":"lettrade","text":""},{"location":"reference/lettrade/#lettrade.lettrade.LetTrade","title":"LetTrade","text":"<pre><code>LetTrade(\n    strategy: Type[Strategy],\n    datas: DataFeed | list[DataFeed] | str | list[str],\n    feeder: Type[DataFeeder],\n    exchange: Type[Exchange],\n    account: Type[Account],\n    commander: Optional[Type[Commander]] = None,\n    plotter: Optional[Type[Plotter]] = None,\n    stats: Optional[Type[BotStatistic]] = None,\n    name: Optional[str] = None,\n    bot: Optional[Type[LetTradeBot]] = LetTradeBot,\n    **kwargs\n)\n</code></pre> <p>Building new bot object and handle multiprocessing</p> Source code in <code>lettrade/lettrade.py</code> <pre><code>def __init__(\n    self,\n    strategy: Type[Strategy],\n    datas: DataFeed | list[DataFeed] | str | list[str],\n    feeder: Type[DataFeeder],\n    exchange: Type[Exchange],\n    account: Type[Account],\n    commander: Optional[Type[Commander]] = None,\n    plotter: Optional[Type[Plotter]] = None,\n    stats: Optional[Type[BotStatistic]] = None,\n    name: Optional[str] = None,\n    bot: Optional[Type[LetTradeBot]] = LetTradeBot,\n    **kwargs,\n) -&gt; None:\n    self._kwargs = kwargs\n    self._kwargs[\"strategy_cls\"] = strategy\n    self._kwargs[\"feeder_cls\"] = feeder\n    self._kwargs[\"exchange_cls\"] = exchange\n    self._kwargs[\"account_cls\"] = account\n    self._kwargs[\"commander_cls\"] = commander\n    self._kwargs[\"plotter_cls\"] = plotter\n    self._kwargs[\"stats_cls\"] = stats\n    self._kwargs[\"bot_cls\"] = bot\n    self._kwargs[\"name\"] = name\n\n    self._kwargs[\"datas\"] = self._init_datafeeds(datas)\n</code></pre>"},{"location":"reference/lettrade/#lettrade.lettrade.LetTrade.plot","title":"plot","text":"<pre><code>plot(*args, jump: Optional[dict] = None, **kwargs)\n</code></pre> <p>Plot strategy/optimize result</p> BotPlotter <p>Miror of BotPlotter.plot(). Plotly implement PlotlyBotPlotter.plot().</p> <p>Args:     <code>jump</code> (Optional[dict], optional): Miror of BotPlotter.jump()</p> <p>Example:     - Jump to position_id         <pre><code>lt.plot(\n    jump=dict(position_id=1, range=300),\n    layout=dict(height=2000),\n)\n</code></pre></p> OptimizePlotter <p>Miror of OptimizePlotter.plot(). Plotly implement PlotlyOptimizePlotter.plot().</p> <p>Example:     -         <pre><code>lt.plot(layout=dict(height=2000))\n</code></pre></p> Source code in <code>lettrade/lettrade.py</code> <pre><code>def plot(self, *args, jump: Optional[dict] = None, **kwargs):\n    \"\"\"Plot strategy/optimize result\n\n    BotPlotter:\n        Miror of [BotPlotter.plot()](site:/reference/plot/bot/#lettrade.plot.bot.BotPlotter.plot).\n        Plotly implement [PlotlyBotPlotter.plot()](site:/reference/plot/plotly/plotly/#lettrade.plot.plotly.plotly.PlotlyBotPlotter.plot).\n\n        Args:\n            `jump` (Optional[dict], optional): Miror of [BotPlotter.jump()](site:/reference/plot/bot/#lettrade.plot.bot.BotPlotter.jump)\n\n        Example:\n            - Jump to position_id\n                ```python\n                lt.plot(\n                    jump=dict(position_id=1, range=300),\n                    layout=dict(height=2000),\n                )\n                ```\n\n    OptimizePlotter:\n        Miror of [OptimizePlotter.plot()](site:/reference/plot/optimize/#lettrade.plot.optimize.OptimizePlotter.plot).\n        Plotly implement [PlotlyOptimizePlotter.plot()](site:/reference/exchange/backtest/plotly/optimize/#lettrade.exchange.backtest.plotly.optimize.PlotlyOptimizePlotter.plot).\n\n        Example:\n            -\n                ```python\n                lt.plot(layout=dict(height=2000))\n                ```\n    \"\"\"\n    if __debug__:\n        from .utils.docs import is_docs_session\n\n        if is_docs_session():\n            return\n\n    self.plotter.plot(*args, jump=jump, **kwargs)\n</code></pre>"},{"location":"reference/lettrade/#lettrade.lettrade.LetTrade.run","title":"run","text":"<pre><code>run(worker: Optional[int] = None, **kwargs)\n</code></pre> <p>Run strategy in single or multiple processing</p> <p>Parameters:</p> <ul> <li> <code>worker</code>               (<code>Optional[int]</code>, default:                   <code>None</code> )           \u2013            <p>Number of processing. Defaults to None.</p> </li> </ul> Source code in <code>lettrade/lettrade.py</code> <pre><code>def run(self, worker: Optional[int] = None, **kwargs):\n    \"\"\"Run strategy in single or multiple processing\n\n    Args:\n        worker (Optional[int], optional): Number of processing. Defaults to None.\n    \"\"\"\n    if worker or isinstance(self.data, list):\n        if not isinstance(self.data, list):\n            # self.data = self.datas\n            self.datas = [self.data]\n\n        worker = self._max_workers(worker)\n\n        self._multiprocess()\n\n        datas_source = self._kwargs.pop(\"datas\")\n        with ProcessPoolExecutor(max_workers=worker) as executor:\n            futures = [\n                executor.submit(\n                    self._bot_cls.run_bot,\n                    datas=datas,\n                    id=i,\n                    result=\"str\",\n                    **self._kwargs,\n                )\n                for i, datas in enumerate(datas_source)\n            ]\n            for future in futures:\n                result = future.result()\n                print(result)\n    else:\n        self._bot = self._bot_cls.run_bot(\n            bot=self._bot,\n            result=\"bot\",\n            **self._kwargs,\n        )\n        print(str(self._bot.stats))\n</code></pre>"},{"location":"reference/lettrade/#lettrade.lettrade.LetTrade.stop","title":"stop","text":"<pre><code>stop()\n</code></pre> <p>Stop strategy</p> Source code in <code>lettrade/lettrade.py</code> <pre><code>def stop(self):\n    \"\"\"Stop strategy\"\"\"\n    if self._bot is not None:\n        return self._bot.stop()\n    if self.stats:\n        self.stats.stop()\n</code></pre>"},{"location":"reference/account/","title":"Index","text":""},{"location":"reference/account/#lettrade.account","title":"account","text":""},{"location":"reference/account/account/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> account","text":""},{"location":"reference/account/account/#lettrade.account.account","title":"account","text":""},{"location":"reference/account/account/#lettrade.account.account.Account","title":"Account","text":"<pre><code>Account(\n    risk: float = 0.02,\n    cash: float = 10000,\n    margin: float = 1.0,\n    leverage: float = 1.0,\n    **kwargs\n)\n</code></pre> <p>Manage account balance, leverage, commission. Risk calculate and control</p> <p>Parameters:</p> <ul> <li> <code>risk</code>               (<code>float</code>, default:                   <code>0.02</code> )           \u2013            <p>description. Defaults to 0.02.</p> </li> <li> <code>cash</code>               (<code>float</code>, default:                   <code>10000</code> )           \u2013            <p>description. Defaults to 10_000.</p> </li> <li> <code>margin</code>               (<code>float</code>, default:                   <code>1.0</code> )           \u2013            <p>description. Defaults to 1.0.</p> </li> <li> <code>leverage</code>               (<code>float</code>, default:                   <code>1.0</code> )           \u2013            <p>description. Defaults to 1.0.</p> </li> </ul> Source code in <code>lettrade/account/account.py</code> <pre><code>def __init__(\n    self,\n    risk: float = 0.02,\n    cash: float = 10_000,\n    margin: float = 1.0,\n    leverage: float = 1.0,\n    **kwargs,\n) -&gt; None:\n    \"\"\"_summary_\n\n    Args:\n        risk (float, optional): _description_. Defaults to 0.02.\n        cash (float, optional): _description_. Defaults to 10_000.\n        margin (float, optional): _description_. Defaults to 1.0.\n        leverage (float, optional): _description_. Defaults to 1.0.\n    \"\"\"\n    self._risk = risk\n    self._cash = cash\n    self._margin = margin\n    self._leverage = leverage\n    self._config = kwargs\n\n    self._equities = dict()\n\n    self._do_equity_snapshot = True  # Snapshot balance\n</code></pre>"},{"location":"reference/account/account/#lettrade.account.account.Account.pl","title":"pl","text":"<pre><code>pl(size, entry_price: float, exit_price=None)\n</code></pre> <p>Estimate temporary profit and loss</p> Source code in <code>lettrade/account/account.py</code> <pre><code>def pl(self, size, entry_price: float, exit_price=None):\n    \"\"\"Estimate temporary profit and loss\"\"\"\n    if exit_price is None:\n        exit_price = self._exchange.data.l.open[0]\n\n    return size * (exit_price - entry_price)\n</code></pre>"},{"location":"reference/account/account/#lettrade.account.account.Account.risk","title":"risk","text":"<pre><code>risk(side: TradeSide, size: float, **kwargs) -&gt; float\n</code></pre> <p>Risk calculation</p> Source code in <code>lettrade/account/account.py</code> <pre><code>def risk(self, side: \"TradeSide\", size: float, **kwargs) -&gt; float:\n    \"\"\"Risk calculation\"\"\"\n    if size is None:\n        return side * abs(self._risk)\n    return side * abs(size)\n</code></pre>"},{"location":"reference/account/account/#lettrade.account.account.Account.start","title":"start","text":"<pre><code>start()\n</code></pre> <p>Start account</p> Source code in <code>lettrade/account/account.py</code> <pre><code>def start(self):\n    \"\"\"Start account\"\"\"\n</code></pre>"},{"location":"reference/account/account/#lettrade.account.account.Account.stop","title":"stop","text":"<pre><code>stop()\n</code></pre> <p>Stop account</p> Source code in <code>lettrade/account/account.py</code> <pre><code>def stop(self):\n    \"\"\"Stop account\"\"\"\n    try:\n        self._equity_snapshot()\n    except LetAccountInsufficientException:\n        pass\n</code></pre>"},{"location":"reference/account/error/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> error","text":""},{"location":"reference/account/error/#lettrade.account.error","title":"error","text":""},{"location":"reference/base/","title":"Index","text":""},{"location":"reference/base/#lettrade.base","title":"base","text":""},{"location":"reference/base/error/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> error","text":""},{"location":"reference/base/error/#lettrade.base.error","title":"error","text":""},{"location":"reference/base/error/#lettrade.base.error.LetException","title":"LetException","text":"<p>               Bases: <code>Exception</code></p> <p>Base LetTrade exception</p>"},{"location":"reference/base/flag/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> flag","text":""},{"location":"reference/base/flag/#lettrade.base.flag","title":"flag","text":""},{"location":"reference/base/flag/#lettrade.base.flag.validate_data_getitem_pointer","title":"validate_data_getitem_pointer  <code>module-attribute</code>","text":"<pre><code>validate_data_getitem_pointer: bool = False\n</code></pre> <p>Flag to validate <code>DataFeed</code> get data by pointer but noyt has prefix <code>DataFeed.l.</code></p>"},{"location":"reference/base/flag/#lettrade.base.flag.validate_strategy_trade","title":"validate_strategy_trade  <code>module-attribute</code>","text":"<pre><code>validate_strategy_trade: bool = False\n</code></pre> <p>Flag to validate trading object is not writing attribute from strategy</p>"},{"location":"reference/brain/","title":"Index","text":""},{"location":"reference/brain/#lettrade.brain","title":"brain","text":""},{"location":"reference/brain/brain/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> brain","text":""},{"location":"reference/brain/brain/#lettrade.brain.brain","title":"brain","text":""},{"location":"reference/brain/brain/#lettrade.brain.brain.Brain","title":"Brain","text":"<pre><code>Brain(\n    strategy: Strategy,\n    exchange: Exchange,\n    feeder: DataFeeder,\n    commander: Commander,\n    **kwargs\n)\n</code></pre> <p>Brain of bot</p> <p>Parameters:</p> <ul> <li> <code>strategy</code>               (<code>Strategy</code>)           \u2013            <p>description</p> </li> <li> <code>exchange</code>               (<code>Exchange</code>)           \u2013            <p>description</p> </li> <li> <code>feeder</code>               (<code>DataFeeder</code>)           \u2013            <p>description</p> </li> <li> <code>commander</code>               (<code>Commander</code>)           \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/brain/brain.py</code> <pre><code>def __init__(\n    self,\n    strategy: Strategy,\n    exchange: Exchange,\n    feeder: DataFeeder,\n    commander: Commander,\n    **kwargs,\n) -&gt; None:\n    \"\"\"_summary_\n\n    Args:\n        strategy (Strategy): _description_\n        exchange (Exchange): _description_\n        feeder (DataFeeder): _description_\n        commander (Commander): _description_\n    \"\"\"\n    self.strategy = strategy\n    self.exchange = exchange\n    self.feeder = feeder\n    self.commander = commander\n\n    # self.datas = self.feeder.datas\n    self.data = self.feeder.data\n</code></pre>"},{"location":"reference/brain/brain/#lettrade.brain.brain.Brain.on_execution","title":"on_execution","text":"<pre><code>on_execution(execution: Execution)\n</code></pre> <p>Receive new <code>Execution</code> event and send to <code>Strategy</code></p> Source code in <code>lettrade/brain/brain.py</code> <pre><code>def on_execution(self, execution: Execution):\n    \"\"\"Receive new `Execution` event and send to `Strategy`\"\"\"\n    self.on_transaction(execution)\n    self.strategy.on_execution(execution)\n</code></pre>"},{"location":"reference/brain/brain/#lettrade.brain.brain.Brain.on_notify","title":"on_notify","text":"<pre><code>on_notify(*args, **kwargs)\n</code></pre> <p>Receive new notify and send to Strategy</p> Source code in <code>lettrade/brain/brain.py</code> <pre><code>def on_notify(self, *args, **kwargs):\n    \"\"\"Receive new notify and send to Strategy\"\"\"\n    self.strategy.on_notify(*args, **kwargs)\n</code></pre>"},{"location":"reference/brain/brain/#lettrade.brain.brain.Brain.on_order","title":"on_order","text":"<pre><code>on_order(order: Order)\n</code></pre> <p>Receive new <code>Order</code> event and send to <code>Strategy</code></p> Source code in <code>lettrade/brain/brain.py</code> <pre><code>def on_order(self, order: Order):\n    \"\"\"Receive new `Order` event and send to `Strategy`\"\"\"\n    self.on_transaction(order)\n    self.strategy.on_order(order)\n</code></pre>"},{"location":"reference/brain/brain/#lettrade.brain.brain.Brain.on_position","title":"on_position","text":"<pre><code>on_position(position: Position)\n</code></pre> <p>Receive new <code>Position</code> event and send to <code>Strategy</code></p> Source code in <code>lettrade/brain/brain.py</code> <pre><code>def on_position(self, position: Position):\n    \"\"\"Receive new `Position` event and send to `Strategy`\"\"\"\n    self.on_transaction(position)\n    self.strategy.on_position(position)\n</code></pre>"},{"location":"reference/brain/brain/#lettrade.brain.brain.Brain.on_transaction","title":"on_transaction","text":"<pre><code>on_transaction(transaction)\n</code></pre> <p>Receive new transaction event and send to <code>Strategy</code></p> Source code in <code>lettrade/brain/brain.py</code> <pre><code>def on_transaction(self, transaction):\n    \"\"\"Receive new transaction event and send to `Strategy`\"\"\"\n    if self.commander is not None:\n        # TODO: send message to commander when new transaction\n        self.commander.send_message(f\"New transaction: {str(transaction)}\")\n\n    self.strategy.on_transaction(transaction)\n</code></pre>"},{"location":"reference/brain/brain/#lettrade.brain.brain.Brain.run","title":"run","text":"<pre><code>run()\n</code></pre> <p>Run the trading bot</p> Source code in <code>lettrade/brain/brain.py</code> <pre><code>def run(self):\n    \"\"\"Run the trading bot\"\"\"\n\n    while self.feeder.alive():\n        # Load feeder next data\n        try:\n            self.feeder.next()\n            self.exchange.next()\n            self.strategy._next()\n            self.exchange.next_next()\n        except LetOrderValidateException as e:\n            logger.error(\n                \"[%s] Order validates exception\",\n                self.data.now,\n                exc_info=e,\n            )\n            continue\n        except LetAccountInsufficientException as e:\n            logger.error(\"Account equity is insufficient\", exc_info=e)\n            break\n        except LetTradeNoMoreDataFeed:\n            break\n        except Exception as e:\n            logger.exception(\"Bot running error\", exc_info=e)\n            break\n\n    self.strategy._stop()\n</code></pre>"},{"location":"reference/brain/brain/#lettrade.brain.brain.Brain.stop","title":"stop","text":"<pre><code>stop()\n</code></pre> <p>Stop the trading bot</p> Source code in <code>lettrade/brain/brain.py</code> <pre><code>def stop(self):\n    \"\"\"Stop the trading bot\"\"\"\n    self.feeder.stop()\n    self.exchange.stop()\n</code></pre>"},{"location":"reference/calendar/","title":"Index","text":""},{"location":"reference/calendar/#lettrade.calendar","title":"calendar","text":""},{"location":"reference/calendar/calendar/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> calendar","text":""},{"location":"reference/calendar/calendar/#lettrade.calendar.calendar","title":"calendar","text":""},{"location":"reference/commander/","title":"Index","text":""},{"location":"reference/commander/#lettrade.commander","title":"commander","text":""},{"location":"reference/commander/commander/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> commander","text":""},{"location":"reference/commander/commander/#lettrade.commander.commander","title":"commander","text":""},{"location":"reference/commander/commander/#lettrade.commander.commander.Commander","title":"Commander","text":"<pre><code>Commander()\n</code></pre> <p>               Bases: <code>ABC</code></p> <p>Abstract class for strategy commander. Help to manage and report strategy real-time</p> Source code in <code>lettrade/commander/commander.py</code> <pre><code>def __init__(self) -&gt; None:\n    super().__init__()\n</code></pre>"},{"location":"reference/commander/commander/#lettrade.commander.commander.Commander.init","title":"init","text":"<pre><code>init(\n    lettrade: LetTrade,\n    brain: Brain,\n    exchange: Exchange,\n    strategy: Strategy,\n)\n</code></pre> <p>Init commander dependencies</p> <p>Parameters:</p> <ul> <li> <code>lettrade</code>               (<code>LetTrade</code>)           \u2013            <p>LetTrade object</p> </li> <li> <code>brain</code>               (<code>Brain</code>)           \u2013            <p>Brain of bot</p> </li> <li> <code>exchange</code>               (<code>Exchange</code>)           \u2013            <p>Manage bot trading</p> </li> <li> <code>strategy</code>               (<code>Strategy</code>)           \u2013            <p>Strategy of bot</p> </li> </ul> Source code in <code>lettrade/commander/commander.py</code> <pre><code>def init(\n    self,\n    lettrade: \"LetTrade\",\n    brain: \"Brain\",\n    exchange: \"Exchange\",\n    strategy: \"Strategy\",\n):\n    \"\"\"Init commander dependencies\n\n    Args:\n        lettrade (LetTrade): LetTrade object\n        brain (Brain): Brain of bot\n        exchange (Exchange): Manage bot trading\n        strategy (Strategy): Strategy of bot\n    \"\"\"\n    self.lettrade = lettrade\n    self.brain = brain\n    self.exchange = exchange\n    self.strategy = strategy\n\n    self._name = self.lettrade._name\n</code></pre>"},{"location":"reference/commander/telegram/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> telegram","text":""},{"location":"reference/commander/telegram/#lettrade.commander.telegram","title":"telegram","text":"<p>Module help LetTrade send notify and receive command from Telegram Bot</p>"},{"location":"reference/commander/telegram/#lettrade.commander.telegram--example","title":"Example","text":"Example <pre><code>import logging\nimport os\nfrom datetime import datetime\n\nimport talib.abstract as ta\nfrom dotenv import load_dotenv\n\nfrom lettrade import indicator as i\n\n# import example.logger\nfrom lettrade.all import DataFeed, Strategy, TelegramCommander, let_metatrader\n\nlogger = logging.getLogger(__name__)\nload_dotenv()\n\n\nclass SmaCross(Strategy):\n    ema1_period = 9\n    ema2_period = 21\n\n    _now: datetime\n\n    def indicators(self, df: DataFeed):\n        df[\"ema1\"] = ta.EMA(df, timeperiod=self.ema1_period)\n        df[\"ema2\"] = ta.EMA(df, timeperiod=self.ema2_period)\n\n        df[\"signal_ema_crossover\"] = i.crossover(df.ema1, df.ema2)\n        df[\"signal_ema_crossunder\"] = i.crossunder(df.ema1, df.ema2)\n        return df\n\n    def start(self, df: DataFeed):\n        self._now = df.now\n\n    def next(self, df: DataFeed):\n        if self.is_live:\n            # Filter start of new bar\n            if self._now == df.now:\n                return\n            self._now = df.now\n\n        if len(self.orders) &gt; 0 or len(self.positions) &gt; 0:\n            return\n\n        if df.l[\"signal_ema_crossover\"][-1]:\n            price = self.data.l[\"close\"][-1]\n            self.buy(size=0.1, sl=price - 0.01, tp=price + 0.01)\n        elif df.l[\"signal_ema_crossunder\"][-1]:\n            price = self.data.l[\"close\"][-1]\n            self.sell(size=0.1, sl=price + 0.01, tp=price - 0.01)\n\n    def stop(self, df: DataFeed):\n        print(df.tail())\n        print(self.orders)\n\n    def plot(self, df: DataFeed):\n        return dict(\n            scatters=[\n                dict(\n                    x=df.index,\n                    y=df[\"ema1\"],\n                    line=dict(color=\"blue\", width=1),\n                    name=\"ema1\",\n                ),\n                dict(\n                    x=df.index,\n                    y=df[\"ema2\"],\n                    line=dict(color=\"green\", width=1),\n                    name=\"ema2\",\n                ),\n            ]\n        )\n\n\nif __name__ == \"__main__\":\n    lt = let_metatrader(\n        strategy=SmaCross,\n        datas={(\"EURGBP\", \"5m\")},\n        mt5_login=os.getenv(\"MT5_LOGIN\"),\n        mt5_password=os.getenv(\"MT5_PASSWORD\"),\n        mt5_server=os.getenv(\"MT5_SERVER\"),\n        commander=TelegramCommander(\n            token=os.getenv(\"TELEGRAM_TOKEN\"),\n            chat_id=os.getenv(\"TELEGRAM_CHAT_ID\"),\n        ),\n    )\n\n    lt.run()\n</code></pre>"},{"location":"reference/commander/telegram/#lettrade.commander.telegram.TelegramAPI","title":"TelegramAPI","text":"<pre><code>TelegramAPI(token: str, chat_id: int, *args, **kwargs)\n</code></pre> <p>Singleton object communicate across multipprocessing</p> Source code in <code>lettrade/commander/telegram.py</code> <pre><code>def __init__(self, token: str, chat_id: int, *args, **kwargs) -&gt; None:\n    self._token: str = token\n    self._chat_id: int = int(chat_id)\n    self._bots_queue = dict()\n    self._bot_selected = None\n</code></pre>"},{"location":"reference/commander/telegram/#lettrade.commander.telegram.TelegramAPI.cleanup","title":"cleanup","text":"<pre><code>cleanup() -&gt; None\n</code></pre> <p>Stops all running telegram threads.</p> Source code in <code>lettrade/commander/telegram.py</code> <pre><code>def cleanup(self) -&gt; None:\n    \"\"\"Stops all running telegram threads.\"\"\"\n    # This can take up to `timeout` from the call to `start_polling`.\n    asyncio.run_coroutine_threadsafe(self._cleanup_telegram(), self._loop)\n    self._thread.join()\n</code></pre>"},{"location":"reference/commander/telegram/#lettrade.commander.telegram.TelegramAPI.send_message","title":"send_message","text":"<pre><code>send_message(msg: str, pname: str, **kwargs) -&gt; None\n</code></pre> <p>Send message to Telegram Bot</p> <p>Parameters:</p> <ul> <li> <code>msg</code>               (<code>str</code>)           \u2013            <p>Message</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>_type_</code> (              <code>None</code> )          \u2013            <p><code>None</code></p> </li> </ul> Source code in <code>lettrade/commander/telegram.py</code> <pre><code>def send_message(self, msg: str, pname: str, **kwargs) -&gt; None:\n    \"\"\"Send message to Telegram Bot\n\n    Args:\n        msg (str): Message\n\n    Returns:\n        _type_: `None`\n    \"\"\"\n    msg = f\"*[Process: {pname}]*\\n\\n{msg}\"\n    msg = escape_markdown(msg)\n    asyncio.run_coroutine_threadsafe(self._send_msg(msg, **kwargs), self._loop)\n</code></pre>"},{"location":"reference/commander/telegram/#lettrade.commander.telegram.TelegramAPI.start","title":"start","text":"<pre><code>start(pname: str, action_queue: Queue)\n</code></pre> <p>Start</p> Source code in <code>lettrade/commander/telegram.py</code> <pre><code>def start(self, pname: str, action_queue: Queue):\n    \"\"\"Start\"\"\"\n    if pname in self._bots_queue:\n        logger.warning(\"Process name %s override existed action queue\", pname)\n    self._bots_queue[pname] = action_queue\n\n    logger.info(\"New join process: %s\", pname)\n\n    # TODO: Lock for safe multipleprocessing\n    if hasattr(self, \"_keyboard\"):\n        return\n\n    self._init_keyboard()\n    self._start_thread()\n</code></pre>"},{"location":"reference/commander/telegram/#lettrade.commander.telegram.TelegramCommander","title":"TelegramCommander","text":"<pre><code>TelegramCommander(\n    token: str,\n    chat_id: int,\n    api: Optional[TelegramAPI] = None,\n    *args,\n    **kwargs\n)\n</code></pre> <p>               Bases: <code>Commander</code></p> <p>Send notify and receive command from Telegram Bot</p> <p>Parameters:</p> <ul> <li> <code>token</code>               (<code>str</code>)           \u2013            <p>Telegram Bot token</p> </li> <li> <code>chat_id</code>               (<code>int</code>)           \u2013            <p>Telegram chat_id</p> </li> </ul> Source code in <code>lettrade/commander/telegram.py</code> <pre><code>def __init__(\n    self,\n    token: str,\n    chat_id: int,\n    api: Optional[TelegramAPI] = None,\n    *args,\n    **kwargs,\n) -&gt; None:\n    \"\"\"_summary_\n\n    Args:\n        token (str): Telegram Bot token\n        chat_id (int): Telegram chat_id\n    \"\"\"\n    super().__init__(*args, **kwargs)\n    self._api = api or TelegramAPI(token=token, chat_id=chat_id)\n    self._is_running = True\n</code></pre>"},{"location":"reference/commander/telegram/#lettrade.commander.telegram.TelegramCommander.init","title":"init","text":"<pre><code>init(\n    lettrade: LetTrade,\n    brain: Brain,\n    exchange: Exchange,\n    strategy: Strategy,\n)\n</code></pre> <p>Init commander dependencies</p> <p>Parameters:</p> <ul> <li> <code>lettrade</code>               (<code>LetTrade</code>)           \u2013            <p>LetTrade object</p> </li> <li> <code>brain</code>               (<code>Brain</code>)           \u2013            <p>Brain of bot</p> </li> <li> <code>exchange</code>               (<code>Exchange</code>)           \u2013            <p>Manage bot trading</p> </li> <li> <code>strategy</code>               (<code>Strategy</code>)           \u2013            <p>Strategy of bot</p> </li> </ul> Source code in <code>lettrade/commander/commander.py</code> <pre><code>def init(\n    self,\n    lettrade: \"LetTrade\",\n    brain: \"Brain\",\n    exchange: \"Exchange\",\n    strategy: \"Strategy\",\n):\n    \"\"\"Init commander dependencies\n\n    Args:\n        lettrade (LetTrade): LetTrade object\n        brain (Brain): Brain of bot\n        exchange (Exchange): Manage bot trading\n        strategy (Strategy): Strategy of bot\n    \"\"\"\n    self.lettrade = lettrade\n    self.brain = brain\n    self.exchange = exchange\n    self.strategy = strategy\n\n    self._name = self.lettrade._name\n</code></pre>"},{"location":"reference/commander/telegram/#lettrade.commander.telegram.TelegramCommander.start","title":"start","text":"<pre><code>start()\n</code></pre> <p>Start</p> Source code in <code>lettrade/commander/telegram.py</code> <pre><code>def start(self):\n    \"\"\"Start\"\"\"\n    logger.info(\"TelegramCommander start %s\", self._name)\n    q = self._t_action()\n    self._api.start(pname=self._name, action_queue=q)\n</code></pre>"},{"location":"reference/commander/telegram/#lettrade.commander.telegram.TelegramCommander.stop","title":"stop","text":"<pre><code>stop()\n</code></pre> <p>Stop</p> Source code in <code>lettrade/commander/telegram.py</code> <pre><code>def stop(self):\n    \"\"\"Stop\"\"\"\n    logger.info(\"TelegramCommander stop %s\", self._name)\n    self._api.cleanup()\n    self._is_running = False\n</code></pre>"},{"location":"reference/commander/telegram/#lettrade.commander.telegram.authorized_only","title":"authorized_only","text":"<pre><code>authorized_only(\n    command_handler: Callable[\n        ..., Coroutine[Any, Any, None]\n    ]\n)\n</code></pre> <p>Decorator to check if the message comes from the correct chat_id</p> <p>Parameters:</p> <ul> <li> <code>command_handler</code>               (<code>Callable[..., Coroutine[Any, Any, None]]</code>)           \u2013            <p>Telegram CommandHandler</p> </li> </ul> Source code in <code>lettrade/commander/telegram.py</code> <pre><code>def authorized_only(command_handler: Callable[..., Coroutine[Any, Any, None]]):\n    \"\"\"Decorator to check if the message comes from the correct chat_id\n\n    Args:\n        command_handler (Callable[..., Coroutine[Any, Any, None]]): Telegram CommandHandler\n    \"\"\"\n\n    @wraps(command_handler)\n    async def wrapper(self: \"TelegramCommander\", *args, **kwargs):\n        \"\"\"Decorator logic\"\"\"\n        update = kwargs.get(\"update\") or args[0]\n\n        # Reject unauthorized messages\n        if update.callback_query:\n            cchat_id = int(update.callback_query.message.chat.id)\n        else:\n            cchat_id = int(update.message.chat_id)\n\n        if cchat_id != self._chat_id:\n            logger.info(f\"Rejected unauthorized message from: {update.message.chat_id}\")\n            return wrapper\n\n        logger.debug(\n            \"Executing handler: %s for chat_id: %s\",\n            command_handler.__name__,\n            self._chat_id,\n        )\n        try:\n            return await command_handler(self, *args, **kwargs)\n        except Exception as e:\n            await self._send_msg(str(e))\n            # except BaseException:\n            logger.exception(\"Exception occurred within Telegram module\", exc_info=e)\n\n    return wrapper\n</code></pre>"},{"location":"reference/data/","title":"Index","text":""},{"location":"reference/data/#lettrade.data","title":"data","text":""},{"location":"reference/data/data/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> data","text":""},{"location":"reference/data/data/#lettrade.data.data","title":"data","text":""},{"location":"reference/data/data/#lettrade.data.data.DataFeed","title":"DataFeed","text":"<pre><code>DataFeed(\n    *args,\n    name: str,\n    timeframe: TimeFrame,\n    meta: Optional[dict] = None,\n    **kwargs\n)\n</code></pre> <p>               Bases: <code>DataFrame</code></p> <p>Data for Strategy. A implement of pandas.DataFrame</p> <p>Parameters:</p> <ul> <li> <code>name</code>               (<code>str</code>)           \u2013            <p>description</p> </li> <li> <code>timeframe</code>               (<code>TimeFrame</code>)           \u2013            <p>description</p> </li> <li> <code>meta</code>               (<code>Optional[dict]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/data/data.py</code> <pre><code>def __init__(\n    self,\n    *args,\n    name: str,\n    timeframe: TimeFrame,\n    meta: Optional[dict] = None,\n    **kwargs,\n) -&gt; None:\n    \"\"\"_summary_\n\n    Args:\n        name (str): _description_\n        timeframe (TimeFrame): _description_\n        meta (Optional[dict], optional): _description_. Defaults to None.\n\n    Raises:\n        RuntimeError: _description_\n    \"\"\"\n    # Validate\n    if not _data_name_pattern.match(name):\n        raise RuntimeError(\n            f\"Bot name {name} is not valid format {_data_name_pattern}\"\n        )\n\n    # Init\n    super().__init__(*args, **kwargs)\n    self._init_index()\n\n    # Metadata\n    if not meta:\n        meta = dict()\n    meta[\"name\"] = name\n    meta[\"timeframe\"] = TimeFrame(timeframe)\n    self.attrs = {\"lt_meta\": meta}\n\n    # LetWrapper\n    object.__setattr__(self, \"l\", LetDataFeedWrapper(self))\n</code></pre>"},{"location":"reference/data/error/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> error","text":""},{"location":"reference/data/error/#lettrade.data.error","title":"error","text":""},{"location":"reference/data/error/#lettrade.data.error.LetTradeNoMoreDataFeed","title":"LetTradeNoMoreDataFeed","text":"<p>               Bases: <code>LetException</code></p> <p>DataFeeder has no more data to feed</p>"},{"location":"reference/data/feeder/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> feeder","text":""},{"location":"reference/data/feeder/#lettrade.data.feeder","title":"feeder","text":""},{"location":"reference/data/feeder/#lettrade.data.feeder.DataFeeder","title":"DataFeeder","text":""},{"location":"reference/data/feeder/#lettrade.data.feeder.DataFeeder.is_continous","title":"is_continous  <code>property</code>","text":"<pre><code>is_continous\n</code></pre> <p>Flag check is realtime continous datafeeder</p>"},{"location":"reference/data/replay/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> replay","text":""},{"location":"reference/data/replay/#lettrade.data.replay","title":"replay","text":""},{"location":"reference/data/resample/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> resample","text":""},{"location":"reference/data/resample/#lettrade.data.resample","title":"resample","text":""},{"location":"reference/data/timeframe/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> timeframe","text":""},{"location":"reference/data/timeframe/#lettrade.data.timeframe","title":"timeframe","text":""},{"location":"reference/data/timeframe/#lettrade.data.timeframe.TimeFrame","title":"TimeFrame","text":"<pre><code>TimeFrame(tf: int | str | list | Timedelta | Self)\n</code></pre> <p>DataFeed TimeFrame</p> <p>Parameters:</p> <ul> <li> <code>tf</code>               (<code>int | str | list | Timedelta | TimeFrame</code>)           \u2013            <ul> <li><code>int</code>: TimeFrame in minutes. Example: TimeFrame(5) == TimeFrame(\"5m\")</li> <li><code>str</code>: string format of TimeFrame in <code>s</code>, <code>m</code>, <code>h</code>, <code>d</code>, <code>w</code>.</li> </ul> </li> </ul> <p>Raises:     RuntimeError: description</p> Source code in <code>lettrade/data/timeframe.py</code> <pre><code>def __init__(self, tf: int | str | list | pd.Timedelta | Self) -&gt; None:\n    \"\"\"_summary_\n\n    Args:\n        tf (int | str | list | pd.Timedelta | TimeFrame):\n            - `int`: TimeFrame in minutes. Example: TimeFrame(5) == TimeFrame(\"5m\")\n            - `str`: string format of TimeFrame in `s`, `m`, `h`, `d`, `w`.\n    Raises:\n        RuntimeError: _description_\n    \"\"\"\n    if isinstance(tf, TimeFrame):\n        self.value = tf.value\n        self.unit = tf.unit\n    elif isinstance(tf, str):\n        match = _pattern_timeframe_str.search(tf)\n        if not match:\n            raise RuntimeError(f\"TimeFrame value {tf} is invalid\")\n\n        self.value = int(match.group(1))\n        self.unit = match.group(2)\n    elif isinstance(tf, int):\n        self.value = tf\n        self.unit = \"m\"\n    elif isinstance(tf, list):\n        self.value = int(tf[0])\n        self.unit = tf[1]\n    elif isinstance(tf, pd.Timedelta):\n        map = TIMEFRAME_DELTA_2_STR[tf]\n        self.value = map[0]\n        self.unit = map[1]\n    else:\n        raise RuntimeError(f\"Timeframe {tf} is invalid format\")\n\n    # Validate\n    self._validate()\n\n    # Setup\n    self.unit_pandas = TIMEFRAME_UNIT_LET_2_PANDAS[self.unit]\n    self.delta = pd.Timedelta(self.value, self.unit_pandas)\n\n    # Warning\n    if self.delta not in TIMEFRAME_DELTA_2_STR:\n        if self.unit not in [\"s\", \"m\"]:\n            logger.warning(\n                \"Unsupport TimeFrame(%s), some function may not work floor()/ceil()...\",\n                self.delta,\n            )\n</code></pre>"},{"location":"reference/data/wrapper/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> wrapper","text":""},{"location":"reference/data/wrapper/#lettrade.data.wrapper","title":"wrapper","text":""},{"location":"reference/data/extra/","title":"Index","text":""},{"location":"reference/data/extra/#lettrade.data.extra","title":"extra","text":""},{"location":"reference/data/extra/csv/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> csv","text":""},{"location":"reference/data/extra/csv/#lettrade.data.extra.csv","title":"csv","text":""},{"location":"reference/data/extra/csv/#lettrade.data.extra.csv.csv_export","title":"csv_export","text":"<pre><code>csv_export(\n    dataframe: DataFrame,\n    path: str | Path = \"data/data.csv\",\n    tz: timezone = None,\n    round: int = 5,\n    **kwargs\n) -&gt; DataFrame\n</code></pre> <p>Dump DataFeed to csv file. Inject function <code>pandas.DataFrame.let_to_csv()</code></p> <p>Parameters:</p> <ul> <li> <code>dataframe</code>               (<code>DataFrame</code>)           \u2013            <p>description</p> </li> <li> <code>path</code>               (<code>str | Path</code>, default:                   <code>'data/data.csv'</code> )           \u2013            <p>description. Defaults to \"data/data.csv\".</p> </li> <li> <code>tz</code>               (<code>timezone</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>round</code>               (<code>int</code>, default:                   <code>5</code> )           \u2013            <p>description. Defaults to 5.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>DataFrame</code>           \u2013            <p>pd.DataFrame: description</p> </li> </ul> Source code in <code>lettrade/data/extra/csv.py</code> <pre><code>def csv_export(\n    dataframe: pd.DataFrame,\n    path: str | Path = \"data/data.csv\",\n    tz: timezone = None,\n    round: int = 5,\n    **kwargs,\n) -&gt; pd.DataFrame:\n    \"\"\"Dump DataFeed to csv file. Inject function `pandas.DataFrame.let_to_csv()`\n\n    Args:\n        dataframe (pd.DataFrame): _description_\n        path (str | Path, optional): _description_. Defaults to \"data/data.csv\".\n        tz (timezone, optional): _description_. Defaults to None.\n        round (int, optional): _description_. Defaults to 5.\n\n    Returns:\n        pd.DataFrame: _description_\n    \"\"\"\n    dataframe = dataframe.astype(\n        dtype={\n            \"open\": \"float\",\n            \"high\": \"float\",\n            \"low\": \"float\",\n            \"close\": \"float\",\n            \"volume\": \"float\",\n        }\n    )\n\n    if not isinstance(dataframe.index, pd.DatetimeIndex):\n        dataframe = dataframe.set_index(\"datetime\")\n\n    if tz is not None:\n        dataframe.index = dataframe.index.tz_convert(tz)\n\n    if round &gt; 0:\n        dataframe = dataframe.round(round)\n\n    if not isinstance(path, Path):\n        path = Path(path)\n\n    path.parent.mkdir(parents=True, exist_ok=True)\n    dataframe.to_csv(path, **kwargs)\n\n    logger.info(\"Saved data to %s\", path)\n    return dataframe\n</code></pre>"},{"location":"reference/exchange/","title":"Index","text":""},{"location":"reference/exchange/#lettrade.exchange","title":"exchange","text":"<p>Exchange implements</p>"},{"location":"reference/exchange/#lettrade.exchange--stable-exchanges","title":"Stable Exchanges","text":"<ul> <li>BackTest: Backtesting exchange</li> <li>MetaTrader: MetaTrader 5 live data and trading</li> <li>CCXT: CCXT CryptoCurrency live data and trading</li> </ul>"},{"location":"reference/exchange/base/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> base","text":""},{"location":"reference/exchange/base/#lettrade.exchange.base","title":"base","text":""},{"location":"reference/exchange/base/#lettrade.exchange.base.BaseTransaction","title":"BaseTransaction","text":"<pre><code>BaseTransaction(\n    id: str, exchange: Exchange, data: DataFeed, size: float\n)\n</code></pre> <p>Base class of Execution/Order/Position</p> <p>Parameters:</p> <ul> <li> <code>id</code>               (<code>str</code>)           \u2013            <p>description</p> </li> <li> <code>exchange</code>               (<code>Exchange</code>)           \u2013            <p>description</p> </li> <li> <code>data</code>               (<code>DataFeed</code>)           \u2013            <p>description</p> </li> <li> <code>size</code>               (<code>float</code>)           \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/base.py</code> <pre><code>def __init__(\n    self,\n    id: str,\n    exchange: \"Exchange\",\n    data: \"DataFeed\",\n    size: float,\n) -&gt; None:\n    \"\"\"_summary_\n\n    Args:\n        id (str): _description_\n        exchange (Exchange): _description_\n        data (DataFeed): _description_\n        size (float): _description_\n    \"\"\"\n    self.id: str = id\n    self.exchange: \"Exchange\" = exchange\n    self.data: \"DataFeed\" = data\n    self.size: float = size\n</code></pre>"},{"location":"reference/exchange/base/#lettrade.exchange.base.BaseTransaction.is_long","title":"is_long  <code>property</code>","text":"<pre><code>is_long: bool\n</code></pre> <p>True if side is long (size is positive).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True/False</p> </li> </ul>"},{"location":"reference/exchange/base/#lettrade.exchange.base.BaseTransaction.is_short","title":"is_short  <code>property</code>","text":"<pre><code>is_short: bool\n</code></pre> <p>True if side is short (size is negative).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/base/#lettrade.exchange.base.BaseTransaction.side","title":"side  <code>property</code>","text":"<pre><code>side: TradeSide\n</code></pre> <p>True if side is short (size is negative).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>TradeSide</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/base/#lettrade.exchange.base.OrderState","title":"OrderState","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>Order state</p>"},{"location":"reference/exchange/base/#lettrade.exchange.base.OrderState.Canceled","title":"Canceled  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Canceled = 'canceled'\n</code></pre> <p>Canceled</p>"},{"location":"reference/exchange/base/#lettrade.exchange.base.OrderState.Filled","title":"Filled  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Filled = 'filled'\n</code></pre> <p>Full filled</p>"},{"location":"reference/exchange/base/#lettrade.exchange.base.OrderState.Partial","title":"Partial  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Partial = 'partial'\n</code></pre> <p>Partial filled, still wait for full fill</p>"},{"location":"reference/exchange/base/#lettrade.exchange.base.OrderState.Pending","title":"Pending  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Pending = 'pending'\n</code></pre> <p>Pending order, wait for exchange accept</p>"},{"location":"reference/exchange/base/#lettrade.exchange.base.OrderState.Placed","title":"Placed  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Placed = 'place'\n</code></pre> <p>Placed order on exchange</p>"},{"location":"reference/exchange/base/#lettrade.exchange.base.OrderType","title":"OrderType","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>Order type</p>"},{"location":"reference/exchange/base/#lettrade.exchange.base.OrderType.Limit","title":"Limit  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Limit = 'limit'\n</code></pre> <p>Limit order</p>"},{"location":"reference/exchange/base/#lettrade.exchange.base.OrderType.Market","title":"Market  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Market = 'market'\n</code></pre> <p>Market order</p>"},{"location":"reference/exchange/base/#lettrade.exchange.base.OrderType.Stop","title":"Stop  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Stop = 'stop'\n</code></pre> <p>Stop order</p>"},{"location":"reference/exchange/base/#lettrade.exchange.base.OrderType.StopLimit","title":"StopLimit  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>StopLimit = 'stoplimit'\n</code></pre> <p>Stop-Limit order</p>"},{"location":"reference/exchange/base/#lettrade.exchange.base.PositionState","title":"PositionState","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>Position state</p>"},{"location":"reference/exchange/base/#lettrade.exchange.base.PositionState.Exit","title":"Exit  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Exit = 'exit'\n</code></pre> <p>Exited state</p>"},{"location":"reference/exchange/base/#lettrade.exchange.base.PositionState.Open","title":"Open  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Open = 'open'\n</code></pre> <p>Opening state</p>"},{"location":"reference/exchange/base/#lettrade.exchange.base.TradeSide","title":"TradeSide","text":"<p>               Bases: <code>int</code>, <code>Enum</code></p> <p>Side of Trade</p>"},{"location":"reference/exchange/base/#lettrade.exchange.base.TradeSide.Buy","title":"Buy  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Buy = 1\n</code></pre> <p>Buy/Long side</p>"},{"location":"reference/exchange/base/#lettrade.exchange.base.TradeSide.Sell","title":"Sell  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>Sell = -1\n</code></pre> <p>Sell/Short side</p>"},{"location":"reference/exchange/error/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> error","text":""},{"location":"reference/exchange/error/#lettrade.exchange.error","title":"error","text":""},{"location":"reference/exchange/error/#lettrade.exchange.error.LetOrderException","title":"LetOrderException","text":"<p>               Bases: <code>LetException</code></p> <p>Base order exception</p>"},{"location":"reference/exchange/error/#lettrade.exchange.error.LetOrderValidateException","title":"LetOrderValidateException","text":"<p>               Bases: <code>LetOrderException</code></p> <p>Order attribute validate exception</p>"},{"location":"reference/exchange/exchange/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> exchange","text":""},{"location":"reference/exchange/exchange/#lettrade.exchange.exchange","title":"exchange","text":""},{"location":"reference/exchange/exchange/#lettrade.exchange.exchange.Exchange","title":"Exchange","text":"<pre><code>Exchange(**kwargs)\n</code></pre> <p>Base Exchange class to handle trading</p> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def __init__(self, **kwargs):\n    self._config = kwargs\n\n    self.orders = dict()\n    self.history_orders = dict()\n    self.positions = dict()\n    self.history_positions = dict()\n\n    # Disable Execution by defaul\n    if self._config.setdefault(\"use_execution\", False):\n        self.executions = dict()\n    else:\n        self.executions = None\n\n    self._state = ExchangeState.Init\n</code></pre>"},{"location":"reference/exchange/exchange/#lettrade.exchange.exchange.Exchange.data","title":"data  <code>instance-attribute</code>","text":"<pre><code>data: DataFeed\n</code></pre> <p>main DataFeed</p>"},{"location":"reference/exchange/exchange/#lettrade.exchange.exchange.Exchange.datas","title":"datas  <code>instance-attribute</code>","text":"<pre><code>datas: list[DataFeed]\n</code></pre> <p>List of all available DataFeed</p>"},{"location":"reference/exchange/exchange/#lettrade.exchange.exchange.Exchange.executions","title":"executions  <code>instance-attribute</code>","text":"<pre><code>executions: dict[str, Execution]\n</code></pre> <p>Execution dict by <code>Execution.id</code> key</p>"},{"location":"reference/exchange/exchange/#lettrade.exchange.exchange.Exchange.history_orders","title":"history_orders  <code>instance-attribute</code>","text":"<pre><code>history_orders: dict[str, Order] = dict()\n</code></pre> <p>History Order dict by <code>Order.id</code> key</p>"},{"location":"reference/exchange/exchange/#lettrade.exchange.exchange.Exchange.history_positions","title":"history_positions  <code>instance-attribute</code>","text":"<pre><code>history_positions: dict[str, Position] = dict()\n</code></pre> <p>History Position dict by <code>Position.id</code> key</p>"},{"location":"reference/exchange/exchange/#lettrade.exchange.exchange.Exchange.orders","title":"orders  <code>instance-attribute</code>","text":"<pre><code>orders: dict[str, Order] = dict()\n</code></pre> <p>Available Order dict by <code>Order.id</code> key</p>"},{"location":"reference/exchange/exchange/#lettrade.exchange.exchange.Exchange.positions","title":"positions  <code>instance-attribute</code>","text":"<pre><code>positions: dict[str, Position] = dict()\n</code></pre> <p>Available Position dict by <code>Position.id</code> key</p>"},{"location":"reference/exchange/exchange/#lettrade.exchange.exchange.Exchange.init","title":"init","text":"<pre><code>init(\n    brain: Brain,\n    feeder: DataFeeder,\n    account: Account,\n    commander: Commander,\n) -&gt; None\n</code></pre> <p>Init Exchange dependencies. Set data/datas from feeder. Set state to <code>ExchangeState.Start</code>.</p> <p>Parameters:</p> <ul> <li> <code>brain</code>               (<code>Brain</code>)           \u2013            <p>description</p> </li> <li> <code>feeder</code>               (<code>DataFeeder</code>)           \u2013            <p>description</p> </li> <li> <code>account</code>               (<code>Account</code>)           \u2013            <p>description</p> </li> <li> <code>commander</code>               (<code>Commander</code>)           \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def init(\n    self,\n    brain: \"Brain\",\n    feeder: DataFeeder,\n    account: Account,\n    commander: Commander,\n) -&gt; None:\n    \"\"\"Init Exchange dependencies.\n    Set data/datas from feeder.\n    Set state to `ExchangeState.Start`.\n\n    Args:\n        brain (Brain): _description_\n        feeder (DataFeeder): _description_\n        account (Account): _description_\n        commander (Commander): _description_\n    \"\"\"\n    self._brain = brain\n    self._feeder = feeder\n    self._account = account\n    self._commander = commander\n\n    self.data = self._feeder.data\n    self.datas = self._feeder.datas\n\n    self._account.init(exchange=self)\n\n    self._state = ExchangeState.Start\n</code></pre>"},{"location":"reference/exchange/exchange/#lettrade.exchange.exchange.Exchange.new_order","title":"new_order  <code>abstractmethod</code>","text":"<pre><code>new_order(\n    size: float,\n    limit: Optional[float] = None,\n    stop: Optional[float] = None,\n    sl: Optional[float] = None,\n    tp: Optional[float] = None,\n    tag: Optional[object] = None,\n    *args,\n    **kwargs\n) -&gt; OrderResult\n</code></pre> <p>Place new <code>Order</code></p> <p>Parameters:</p> <ul> <li> <code>size</code>               (<code>float</code>)           \u2013            <p>description</p> </li> <li> <code>limit</code>               (<code>Optional[float]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>stop</code>               (<code>Optional[float]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>sl</code>               (<code>Optional[float]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>tp</code>               (<code>Optional[float]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>tag</code>               (<code>Optional[object]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>OrderResult</code> (              <code>OrderResult</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>@abstractmethod\ndef new_order(\n    self,\n    size: float,\n    limit: Optional[float] = None,\n    stop: Optional[float] = None,\n    sl: Optional[float] = None,\n    tp: Optional[float] = None,\n    tag: Optional[object] = None,\n    *args,\n    **kwargs,\n) -&gt; OrderResult:\n    \"\"\"Place new `Order`\n\n    Args:\n        size (float): _description_\n        limit (Optional[float], optional): _description_. Defaults to None.\n        stop (Optional[float], optional): _description_. Defaults to None.\n        sl (Optional[float], optional): _description_. Defaults to None.\n        tp (Optional[float], optional): _description_. Defaults to None.\n        tag (Optional[object], optional): _description_. Defaults to None.\n\n    Returns:\n        OrderResult: _description_\n    \"\"\"\n    raise NotImplementedError(\"Exchange.new_order not implement yet\")\n</code></pre>"},{"location":"reference/exchange/exchange/#lettrade.exchange.exchange.Exchange.next","title":"next","text":"<pre><code>next()\n</code></pre> <p>Call after data feeded and before strategy.next()</p> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def next(self):\n    \"Call after data feeded and before strategy.next()\"\n</code></pre>"},{"location":"reference/exchange/exchange/#lettrade.exchange.exchange.Exchange.next_next","title":"next_next","text":"<pre><code>next_next()\n</code></pre> <p>Call after strategy.next()</p> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def next_next(self):\n    \"Call after strategy.next()\"\n    self._account._equity_snapshot()\n</code></pre>"},{"location":"reference/exchange/exchange/#lettrade.exchange.exchange.Exchange.on_execution","title":"on_execution","text":"<pre><code>on_execution(\n    execution: Execution,\n    broadcast: Optional[bool] = True,\n    **kwargs\n) -&gt; None\n</code></pre> <p>Receive Execution event from exchange then store and notify Brain</p> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def on_execution(\n    self,\n    execution: Execution,\n    broadcast: Optional[bool] = True,\n    **kwargs,\n) -&gt; None:\n    \"\"\"\n    Receive Execution event from exchange then store and notify Brain\n    \"\"\"\n    if self.executions is None:\n        logger.warning(\n            \"Execution transaction is disable, enable by flag: show_execution=True\"\n        )\n        return\n\n    if not isinstance(execution, Execution):\n        raise RuntimeError(f\"{execution} is not instance of type Execution\")\n\n    if execution.id in self.executions:\n        # Merge to keep Execution handler for strategy using\n        # when strategy want to store Execution object\n        # and object will be automatic update directly\n        self.executions[execution.id].merge(execution)\n        execution = self.executions[execution.id]\n    else:\n        self.executions[execution.id] = execution\n\n    if self._state != ExchangeState.Run:\n        return\n\n    if broadcast:\n        self._brain.on_execution(execution)\n</code></pre>"},{"location":"reference/exchange/exchange/#lettrade.exchange.exchange.Exchange.on_order","title":"on_order","text":"<pre><code>on_order(\n    order: Order, broadcast: Optional[bool] = True, **kwargs\n) -&gt; None\n</code></pre> <p>Receive Order event from exchange then store and notify Brain</p> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def on_order(\n    self,\n    order: Order,\n    broadcast: Optional[bool] = True,\n    **kwargs,\n) -&gt; None:\n    \"\"\"\n    Receive Order event from exchange then store and notify Brain\n    \"\"\"\n    if not isinstance(order, Order):\n        raise RuntimeError(f\"{order} is not instance of type Order\")\n\n    if order.state in [OrderState.Filled, OrderState.Canceled]:\n        self.history_orders[order.id] = order\n        if order.id in self.orders:\n            del self.orders[order.id]\n    else:\n        if order.id in self.history_orders:\n            raise RuntimeError(f\"Order {order.id} closed\")\n\n        if order.id in self.orders:\n            # Merge to keep Order handler for strategy using\n            # when strategy want to store Order object\n            # and object will be automatic update directly\n            self.orders[order.id].merge(order)\n            order = self.orders[order.id]\n        else:\n            self.orders[order.id] = order\n\n    if self._state != ExchangeState.Run:\n        return\n\n    if broadcast:\n        self._brain.on_order(order)\n</code></pre>"},{"location":"reference/exchange/exchange/#lettrade.exchange.exchange.Exchange.on_position","title":"on_position","text":"<pre><code>on_position(\n    position: Position,\n    broadcast: Optional[bool] = True,\n    *args,\n    **kwargs\n) -&gt; None\n</code></pre> <p>Receive Position event from exchange then store and notify Brain</p> <p>Parameters:</p> <ul> <li> <code>position</code>               (<code>Position</code>)           \u2013            <p>new comming <code>Position</code></p> </li> <li> <code>broadcast</code>               (<code>Optional[bool]</code>, default:                   <code>True</code> )           \u2013            <p>Flag notify for Brain. Defaults to True.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>validat <code>Position</code> instance</p> </li> </ul> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def on_position(\n    self,\n    position: Position,\n    broadcast: Optional[bool] = True,\n    *args,\n    **kwargs,\n) -&gt; None:\n    \"\"\"Receive Position event from exchange then store and notify Brain\n\n    Args:\n        position (Position): new comming `Position`\n        broadcast (Optional[bool], optional): Flag notify for Brain. Defaults to True.\n\n    Raises:\n        RuntimeError: validat `Position` instance\n    \"\"\"\n    if not isinstance(position, Position):\n        raise RuntimeError(f\"{position} is not instance of type Position\")\n\n    if position.state == PositionState.Exit:\n        self.history_positions[position.id] = position\n        if position.id in self.positions:\n            del self.positions[position.id]\n\n        self._account._on_position_exit(position)\n    else:\n        if position.id in self.history_positions:\n            raise RuntimeError(f\"Order {position.id} closed\")\n        if position.id in self.positions:\n            # Merge to keep Position handler for strategy using\n            # when strategy want to store Position object\n            # and object will be automatic update directly\n            self.positions[position.id].merge(position)\n            position = self.positions[position.id]\n        else:\n            self.positions[position.id] = position\n            self._account._on_position_entry(position)\n\n    if self._state != ExchangeState.Run:\n        return\n\n    if broadcast:\n        self._brain.on_position(position)\n</code></pre>"},{"location":"reference/exchange/exchange/#lettrade.exchange.exchange.Exchange.start","title":"start","text":"<pre><code>start() -&gt; None\n</code></pre> <p>Start of Exchange by: - Start account. - Set state to <code>ExchangeState.Run</code> ready for next().</p> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def start(self) -&gt; None:\n    \"\"\"Start of Exchange by:\n    - Start account.\n    - Set state to `ExchangeState.Run` ready for next().\n    \"\"\"\n    self._account.start()\n    self._state = ExchangeState.Run\n</code></pre>"},{"location":"reference/exchange/exchange/#lettrade.exchange.exchange.Exchange.stop","title":"stop","text":"<pre><code>stop() -&gt; None\n</code></pre> <p>Stop Exchange</p> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def stop(self) -&gt; None:\n    \"\"\"Stop Exchange\"\"\"\n    self._state = ExchangeState.Stop\n    self._account.stop()\n</code></pre>"},{"location":"reference/exchange/execution/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> execution","text":""},{"location":"reference/exchange/execution/#lettrade.exchange.execution","title":"execution","text":""},{"location":"reference/exchange/execution/#lettrade.exchange.execution.Execution","title":"Execution","text":"<pre><code>Execution(\n    id: str,\n    exchange: Exchange,\n    data: DataFeed,\n    size: float,\n    price: float,\n    at: float,\n    order_id: Optional[str] = None,\n    order: Optional[Order] = None,\n    position_id: Optional[str] = None,\n    position: Optional[Position] = None,\n    **kwargs\n)\n</code></pre> <p>               Bases: <code>BaseTransaction</code></p> <p>Execution</p> Source code in <code>lettrade/exchange/execution.py</code> <pre><code>def __init__(\n    self,\n    id: str,\n    exchange: \"Exchange\",\n    data: \"DataFeed\",\n    size: float,\n    price: float,\n    at: float,\n    order_id: Optional[str] = None,\n    order: Optional[\"Order\"] = None,\n    position_id: Optional[str] = None,\n    position: Optional[\"Position\"] = None,\n    **kwargs,\n):\n    if exchange.executions is None:\n        logger.warning(\n            \"Execution transaction is disable, enable by flag: show_execution=True\"\n        )\n        return\n\n    super().__init__(\n        id=id,\n        exchange=exchange,\n        data=data,\n        size=size,\n        **kwargs,\n    )\n    self.order_id = order_id\n    self.order: \"Order\" = order\n    self.position_id = position_id\n    self.position: \"Position\" = position\n    self.price = price\n    self.at = at\n</code></pre>"},{"location":"reference/exchange/execution/#lettrade.exchange.execution.Execution.is_long","title":"is_long  <code>property</code>","text":"<pre><code>is_long: bool\n</code></pre> <p>True if side is long (size is positive).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True/False</p> </li> </ul>"},{"location":"reference/exchange/execution/#lettrade.exchange.execution.Execution.is_short","title":"is_short  <code>property</code>","text":"<pre><code>is_short: bool\n</code></pre> <p>True if side is short (size is negative).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/execution/#lettrade.exchange.execution.Execution.side","title":"side  <code>property</code>","text":"<pre><code>side: TradeSide\n</code></pre> <p>True if side is short (size is negative).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>TradeSide</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/execution/#lettrade.exchange.execution.Execution.merge","title":"merge","text":"<pre><code>merge(other: Execution)\n</code></pre> <p>Merge to keep object handler but not overwrite for Strategy using when Strategy want to store object and object will be automatic update directly</p> Source code in <code>lettrade/exchange/execution.py</code> <pre><code>def merge(self, other: \"Execution\"):\n    \"\"\"\n    Merge to keep object handler but not overwrite for Strategy using when Strategy want to store object and object will be automatic update directly\n    \"\"\"\n    if other is self:\n        return\n\n    if self.id != other.id:\n        raise RuntimeError(f\"Merge difference id {self.id} != {other.id} execution\")\n\n    self.price = other.price\n    self.size = other.size\n\n    if other.at:\n        self.at = other.at\n    if other.order_id:\n        self.order_id = other.order_id\n    if other.order:\n        self.order = other.order\n    if other.position_id:\n        self.position_id = other.position_id\n    if other.position:\n        self.position = other.position\n</code></pre>"},{"location":"reference/exchange/order/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> order","text":""},{"location":"reference/exchange/order/#lettrade.exchange.order","title":"order","text":""},{"location":"reference/exchange/order/#lettrade.exchange.order.Order","title":"Order","text":"<pre><code>Order(\n    id: str,\n    exchange: Exchange,\n    data: DataFeed,\n    size: float,\n    state: OrderState = OrderState.Pending,\n    type: OrderType = OrderType.Market,\n    limit_price: Optional[float] = None,\n    stop_price: Optional[float] = None,\n    sl_price: Optional[float] = None,\n    tp_price: Optional[float] = None,\n    parent: Optional[Position] = None,\n    tag: Optional[object] = None,\n    placed_at: Optional[Timestamp] = None,\n    **kwargs\n)\n</code></pre> <p>               Bases: <code>BaseTransaction</code></p> Source code in <code>lettrade/exchange/order.py</code> <pre><code>def __init__(\n    self,\n    id: str,\n    exchange: \"Exchange\",\n    data: \"DataFeed\",\n    size: float,\n    state: OrderState = OrderState.Pending,\n    type: OrderType = OrderType.Market,\n    limit_price: Optional[float] = None,\n    stop_price: Optional[float] = None,\n    sl_price: Optional[float] = None,\n    tp_price: Optional[float] = None,\n    parent: Optional[\"Position\"] = None,\n    tag: Optional[object] = None,\n    placed_at: Optional[pd.Timestamp] = None,\n    **kwargs,\n):\n    super().__init__(\n        id=id,\n        exchange=exchange,\n        data=data,\n        size=size,\n        **kwargs,\n    )\n\n    self.type: OrderType = type\n    self.state: OrderState = state\n    self.limit_price: Optional[float] = limit_price\n    self.stop_price: Optional[float] = stop_price\n    self.sl_price: Optional[float] = sl_price\n    self.tp_price: Optional[float] = tp_price\n    self.parent: Optional[\"Position\"] = parent\n    self.tag: Optional[object] = tag\n    self.placed_at: Optional[pd.Timestamp] = placed_at\n    self.filled_at: Optional[pd.Timestamp] = None\n    self.filled_price: Optional[float] = None\n\n    self.validate()\n</code></pre>"},{"location":"reference/exchange/order/#lettrade.exchange.order.Order.is_closed","title":"is_closed  <code>property</code>","text":"<pre><code>is_closed: bool\n</code></pre> <p>Flag to check <code>Order</code> closed</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True if <code>state</code> in [OrderState.Filled, OrderState.Canceled]</p> </li> </ul>"},{"location":"reference/exchange/order/#lettrade.exchange.order.Order.is_long","title":"is_long  <code>property</code>","text":"<pre><code>is_long: bool\n</code></pre> <p>True if side is long (size is positive).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True/False</p> </li> </ul>"},{"location":"reference/exchange/order/#lettrade.exchange.order.Order.is_opening","title":"is_opening  <code>property</code>","text":"<pre><code>is_opening: bool\n</code></pre> <p>Flag to check <code>Order</code> still alive</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True if <code>state</code> in [OrderState.Pending, OrderState.Placed, OrderState.Partial]</p> </li> </ul>"},{"location":"reference/exchange/order/#lettrade.exchange.order.Order.is_short","title":"is_short  <code>property</code>","text":"<pre><code>is_short: bool\n</code></pre> <p>True if side is short (size is negative).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/order/#lettrade.exchange.order.Order.is_sl_order","title":"is_sl_order  <code>property</code>","text":"<pre><code>is_sl_order: bool\n</code></pre> <p><code>Order</code> is stop-loss order of a <code>Position</code></p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/order/#lettrade.exchange.order.Order.is_tp_order","title":"is_tp_order  <code>property</code>","text":"<pre><code>is_tp_order: bool\n</code></pre> <p><code>Order</code> is take-profit order of a <code>Position</code></p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/order/#lettrade.exchange.order.Order.limit","title":"limit  <code>property</code>","text":"<pre><code>limit: Optional[float]\n</code></pre> <p>Getter of limit_price</p> <p>Returns:</p> <ul> <li> <code>Optional[float]</code>           \u2013            <p>Optional[float]: <code>float</code> or <code>None</code></p> </li> </ul>"},{"location":"reference/exchange/order/#lettrade.exchange.order.Order.place_price","title":"place_price  <code>property</code>","text":"<pre><code>place_price: Optional[float]\n</code></pre> <p>Getter of place_price</p> <p>Returns:</p> <ul> <li> <code>Optional[float]</code>           \u2013            <p>Optional[float]: <code>float</code> or <code>None</code></p> </li> </ul>"},{"location":"reference/exchange/order/#lettrade.exchange.order.Order.side","title":"side  <code>property</code>","text":"<pre><code>side: TradeSide\n</code></pre> <p>True if side is short (size is negative).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>TradeSide</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/order/#lettrade.exchange.order.Order.sl","title":"sl  <code>property</code>","text":"<pre><code>sl: Optional[float]\n</code></pre> <p>Getter of sl_price</p> <p>Returns:</p> <ul> <li> <code>Optional[float]</code>           \u2013            <p>Optional[float]: <code>float</code> or <code>None</code></p> </li> </ul>"},{"location":"reference/exchange/order/#lettrade.exchange.order.Order.stop","title":"stop  <code>property</code>","text":"<pre><code>stop: Optional[float]\n</code></pre> <p>Getter of stop_price</p> <p>Returns:</p> <ul> <li> <code>Optional[float]</code>           \u2013            <p>Optional[float]: <code>float</code> or <code>None</code></p> </li> </ul>"},{"location":"reference/exchange/order/#lettrade.exchange.order.Order.tp","title":"tp  <code>property</code>","text":"<pre><code>tp: Optional[float]\n</code></pre> <p>Getter of tp_price</p> <p>Returns:</p> <ul> <li> <code>Optional[float]</code>           \u2013            <p>Optional[float]: <code>float</code> or <code>None</code></p> </li> </ul>"},{"location":"reference/exchange/order/#lettrade.exchange.order.Order.cancel","title":"cancel","text":"<pre><code>cancel() -&gt; OrderResult\n</code></pre> <p>Cancel <code>Order</code> Set <code>status</code> to <code>OrderState.Canceled</code>. Send event to <code>Exchange</code></p> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>Validate state is <code>OrderState.Placed</code></p> </li> </ul> <p>Returns:</p> <ul> <li> <code>OrderResult</code> (              <code>OrderResult</code> )          \u2013            <p>result of <code>Order</code></p> </li> </ul> Source code in <code>lettrade/exchange/order.py</code> <pre><code>def cancel(self) -&gt; \"OrderResult\":\n    \"\"\"Cancel `Order`\n    Set `status` to `OrderState.Canceled`.\n    Send event to `Exchange`\n\n    Raises:\n        RuntimeError: Validate state is `OrderState.Placed`\n\n    Returns:\n        OrderResult: result of `Order`\n    \"\"\"\n    if self.state != OrderState.Placed:\n        raise RuntimeError(f\"Order {self.id} state {self.state} is not Placed\")\n\n    self.state = OrderState.Canceled\n    self.exchange.on_order(self)\n    return OrderResultOk(order=self)\n</code></pre>"},{"location":"reference/exchange/order/#lettrade.exchange.order.Order.fill","title":"fill","text":"<pre><code>fill(price: float, at: Timestamp) -&gt; OrderResult\n</code></pre> <p>Fill <code>Order</code>. Set <code>status</code> to <code>OrderState.Executed</code>. Send event to <code>Exchange</code></p> <p>Parameters:</p> <ul> <li> <code>price</code>               (<code>float</code>)           \u2013            <p>Executed price</p> </li> <li> <code>at</code>               (<code>Timestamp</code>)           \u2013            <p>Executed bar</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>OrderResult</code> (              <code>OrderResult</code> )          \u2013            <p>result of <code>Order</code></p> </li> </ul> Source code in <code>lettrade/exchange/order.py</code> <pre><code>def fill(self, price: float, at: pd.Timestamp) -&gt; \"OrderResult\":\n    \"\"\"Fill `Order`.\n    Set `status` to `OrderState.Executed`.\n    Send event to `Exchange`\n\n    Args:\n        price (float): Executed price\n        at (pd.Timestamp): Executed bar\n\n    Raises:\n        RuntimeError: _description_\n\n    Returns:\n        OrderResult: result of `Order`\n    \"\"\"\n    if self.state != OrderState.Placed:\n        raise RuntimeError(f\"Order {self.id} state {self.state} is not Placed\")\n\n    self.filled_at = at\n    self.filled_price = price\n    self.state = OrderState.Filled\n    self.exchange.on_order(self)\n    return OrderResultOk(order=self)\n</code></pre>"},{"location":"reference/exchange/order/#lettrade.exchange.order.Order.merge","title":"merge","text":"<pre><code>merge(other: Order)\n</code></pre> <p>Update current <code>Order</code> variables by other <code>Order</code></p> <p>Parameters:</p> <ul> <li> <code>other</code>               (<code>Order</code>)           \u2013            <p>Merge source <code>Order</code></p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>Validate same id</p> </li> </ul> Source code in <code>lettrade/exchange/order.py</code> <pre><code>def merge(self, other: \"Order\"):\n    \"\"\"Update current `Order` variables by other `Order`\n\n    Args:\n        other (Order): Merge source `Order`\n\n    Raises:\n        RuntimeError: Validate same id\n    \"\"\"\n    if other is self:\n        return\n\n    if self.id != other.id:\n        raise RuntimeError(f\"Merge difference id {self.id} != {other.id} order\")\n\n    self.size = other.size\n    self.sl_price = other.sl_price\n    self.tp_price = other.tp_price\n\n    if other.limit_price:\n        self.limit_price = other.limit_price\n    if other.stop_price:\n        self.stop_price = other.stop_price\n    if other.placed_at:\n        self.placed_at = other.placed_at\n\n    if other.filled_price:\n        self.filled_price = other.filled_price\n    if other.filled_at:\n        self.filled_at = other.filled_at\n\n    if other.parent:\n        self.parent = other.parent\n</code></pre>"},{"location":"reference/exchange/order/#lettrade.exchange.order.Order.place","title":"place","text":"<pre><code>place(at: Timestamp) -&gt; OrderResult\n</code></pre> <p>Place <code>Order</code> Set <code>status</code> to <code>OrderState.Placed</code>. Send event to <code>Exchange</code></p> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>OrderResult</code> (              <code>OrderResult</code> )          \u2013            <p>result of <code>Order</code></p> </li> </ul> Source code in <code>lettrade/exchange/order.py</code> <pre><code>def place(self, at: pd.Timestamp) -&gt; \"OrderResult\":\n    \"\"\"Place `Order`\n    Set `status` to `OrderState.Placed`.\n    Send event to `Exchange`\n\n    Raises:\n        RuntimeError: _description_\n\n    Returns:\n        OrderResult: result of `Order`\n    \"\"\"\n    if self.state != OrderState.Pending:\n        raise RuntimeError(f\"Order {self.id} state {self.state} is not Pending\")\n\n    self.state = OrderState.Placed\n    self.placed_at = at\n\n    logger.info(\"Placing new order: %s\", self)\n\n    self.exchange.on_order(self)\n    return OrderResultOk(order=self)\n</code></pre>"},{"location":"reference/exchange/order/#lettrade.exchange.order.Order.update","title":"update","text":"<pre><code>update(\n    limit_price: float = None,\n    stop_price: float = None,\n    sl: float = None,\n    tp: float = None,\n    **kwargs\n)\n</code></pre> <p>Update Order</p> <p>Parameters:</p> <ul> <li> <code>limit_price</code>               (<code>float</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>stop_price</code>               (<code>float</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>sl</code>               (<code>float</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>tp</code>               (<code>float</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/order.py</code> <pre><code>def update(\n    self,\n    limit_price: float = None,\n    stop_price: float = None,\n    sl: float = None,\n    tp: float = None,\n    **kwargs,\n):\n    \"\"\"Update Order\n\n    Args:\n        limit_price (float, optional): _description_. Defaults to None.\n        stop_price (float, optional): _description_. Defaults to None.\n        sl (float, optional): _description_. Defaults to None.\n        tp (float, optional): _description_. Defaults to None.\n\n    Raises:\n        RuntimeError: _description_\n    \"\"\"\n    if self.is_closed:\n        raise RuntimeError(f\"Update a closed order {self}\")\n\n    # TODO: validate parameters\n    if limit_price is not None:\n        self.limit_price = limit_price\n    if stop_price is not None:\n        self.stop_price = stop_price\n\n    if sl is not None:\n        self.sl_price = sl\n    if tp is not None:\n        self.tp_price = tp\n\n    self.exchange.on_order(self)\n</code></pre>"},{"location":"reference/exchange/order/#lettrade.exchange.order.OrderResult","title":"OrderResult","text":"<pre><code>OrderResult(\n    ok: bool = True,\n    code: int = 0,\n    order: Optional[Order] = None,\n    raw: Optional[object] = None,\n)\n</code></pre> <p>Result of <code>Order</code></p> <p>Parameters:</p> <ul> <li> <code>ok</code>               (<code>Optional[bool]</code>, default:                   <code>True</code> )           \u2013            <p>Flag to check <code>Order</code> is success or not. Defaults to True.</p> </li> <li> <code>order</code>               (<code>Optional[Order]</code>, default:                   <code>None</code> )           \u2013            <p>Order own the result. Defaults to None.</p> </li> <li> <code>code</code>               (<code>Optional[int]</code>, default:                   <code>0</code> )           \u2013            <p>Error code of result. Defaults to 0.</p> </li> <li> <code>raw</code>               (<code>Optional[object]</code>, default:                   <code>None</code> )           \u2013            <p>Raw object of <code>Order</code>. Defaults to None.</p> </li> </ul> Source code in <code>lettrade/exchange/order.py</code> <pre><code>def __init__(\n    self,\n    ok: bool = True,\n    code: int = 0,\n    order: Optional[\"Order\"] = None,\n    raw: Optional[object] = None,\n) -&gt; None:\n    \"\"\"_summary_\n\n    Args:\n        ok (Optional[bool], optional): Flag to check `Order` is success or not. Defaults to True.\n        order (Optional[Order], optional): Order own the result. Defaults to None.\n        code (Optional[int], optional): Error code of result. Defaults to 0.\n        raw (Optional[object], optional): Raw object of `Order`. Defaults to None.\n    \"\"\"\n    self.ok: bool = ok\n    self.code: int = code\n    self.order: Optional[\"Order\"] = order\n    self.raw: Optional[object] = raw\n</code></pre>"},{"location":"reference/exchange/order/#lettrade.exchange.order.OrderResultError","title":"OrderResultError","text":"<pre><code>OrderResultError(\n    error: str,\n    code: int,\n    order: Optional[Order] = None,\n    raw: Optional[object] = None,\n)\n</code></pre> <p>               Bases: <code>OrderResult</code></p> <p>Result of a error <code>Order</code></p> <p>Parameters:</p> <ul> <li> <code>error</code>               (<code>str</code>)           \u2013            <p>Error message</p> </li> <li> <code>code</code>               (<code>int</code>)           \u2013            <p>Error code of result</p> </li> <li> <code>order</code>               (<code>Optional[Order]</code>, default:                   <code>None</code> )           \u2013            <p>Order own the result. Defaults to None.</p> </li> <li> <code>raw</code>               (<code>Optional[object]</code>, default:                   <code>None</code> )           \u2013            <p>Raw object of <code>Order</code>. Defaults to None.</p> </li> </ul> Source code in <code>lettrade/exchange/order.py</code> <pre><code>def __init__(\n    self,\n    error: str,\n    code: int,\n    order: Optional[\"Order\"] = None,\n    raw: Optional[object] = None,\n) -&gt; None:\n    \"\"\"_summary_\n\n    Args:\n        error (str): Error message\n        code (int): Error code of result\n        order (Optional[Order], optional): Order own the result. Defaults to None.\n        raw (Optional[object], optional): Raw object of `Order`. Defaults to None.\n    \"\"\"\n    super().__init__(ok=False, order=order, code=code, raw=raw)\n    self.error: str = error\n</code></pre>"},{"location":"reference/exchange/order/#lettrade.exchange.order.OrderResultOk","title":"OrderResultOk","text":"<pre><code>OrderResultOk(\n    order: Optional[Order] = None,\n    raw: Optional[object] = None,\n)\n</code></pre> <p>               Bases: <code>OrderResult</code></p> <p>Result of a success <code>Order</code></p> <p>Parameters:</p> <ul> <li> <code>order</code>               (<code>Optional[Order]</code>, default:                   <code>None</code> )           \u2013            <p>Order own the result. Defaults to None.</p> </li> <li> <code>raw</code>               (<code>Optional[object]</code>, default:                   <code>None</code> )           \u2013            <p>Raw object of <code>Order</code>. Defaults to None.</p> </li> </ul> Source code in <code>lettrade/exchange/order.py</code> <pre><code>def __init__(\n    self,\n    order: Optional[\"Order\"] = None,\n    raw: Optional[object] = None,\n) -&gt; None:\n    \"\"\"_summary_\n\n    Args:\n        order (Optional[Order], optional): Order own the result. Defaults to None.\n        raw (Optional[object], optional): Raw object of `Order`. Defaults to None.\n    \"\"\"\n    super().__init__(ok=True, order=order, raw=raw)\n</code></pre>"},{"location":"reference/exchange/position/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> position","text":""},{"location":"reference/exchange/position/#lettrade.exchange.position","title":"position","text":""},{"location":"reference/exchange/position/#lettrade.exchange.position.Position","title":"Position","text":"<pre><code>Position(\n    id: str,\n    exchange: Exchange,\n    data: DataFeed,\n    size: float,\n    parent: Order,\n    tag: object = \"\",\n    state: PositionState = PositionState.Open,\n    entry_price: Optional[float] = None,\n    entry_fee: float = 0.0,\n    entry_at: Optional[Timestamp] = None,\n    sl_order: Optional[Order] = None,\n    tp_order: Optional[Order] = None,\n    **kwargs\n)\n</code></pre> <p>               Bases: <code>BaseTransaction</code></p> <p>When an <code>Order</code> is filled, it results in an active <code>Position</code>. Find active positions in <code>Strategy.positions</code> and closed, settled positions in <code>Strategy.closed_positions</code>.</p> Source code in <code>lettrade/exchange/position.py</code> <pre><code>def __init__(\n    self,\n    id: str,\n    exchange: \"Exchange\",\n    data: \"DataFeed\",\n    size: float,\n    parent: \"Order\",\n    tag: object = \"\",\n    state: PositionState = PositionState.Open,\n    entry_price: Optional[float] = None,\n    entry_fee: float = 0.0,\n    entry_at: Optional[pd.Timestamp] = None,\n    sl_order: Optional[Order] = None,\n    tp_order: Optional[Order] = None,\n    **kwargs,\n):\n    super().__init__(\n        id=id,\n        exchange=exchange,\n        data=data,\n        size=size,\n        **kwargs,\n    )\n    self._account: \"Account\" = self.exchange._account\n\n    self.state: PositionState = state\n    self.tag: object = tag\n    self.parent: \"Order\" = parent\n\n    self.entry_price: Optional[float] = entry_price\n    self.entry_fee: float = entry_fee\n    self.entry_at: Optional[pd.Timestamp] = entry_at\n\n    self.exit_price: Optional[float] = None\n    self.exit_fee: float = 0.0\n    self.exit_at: Optional[pd.Timestamp] = None\n    self.exit_pl: Optional[float] = None\n\n    self.sl_order: Optional[Order] = sl_order\n    self.tp_order: Optional[Order] = tp_order\n</code></pre>"},{"location":"reference/exchange/position/#lettrade.exchange.position.Position.fee","title":"fee  <code>property</code>","text":"<pre><code>fee: float\n</code></pre> <p>Fee/Estimate Fee for trade</p> <p>Returns:</p> <ul> <li> <code>float</code> (              <code>float</code> )          \u2013            <p>Fee</p> </li> </ul>"},{"location":"reference/exchange/position/#lettrade.exchange.position.Position.is_exited","title":"is_exited  <code>property</code>","text":"<pre><code>is_exited: bool\n</code></pre> <p>Flag to check Position state.</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True if the trade exited</p> </li> </ul>"},{"location":"reference/exchange/position/#lettrade.exchange.position.Position.is_long","title":"is_long  <code>property</code>","text":"<pre><code>is_long: bool\n</code></pre> <p>True if side is long (size is positive).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True/False</p> </li> </ul>"},{"location":"reference/exchange/position/#lettrade.exchange.position.Position.is_opening","title":"is_opening  <code>property</code>","text":"<pre><code>is_opening: bool\n</code></pre> <p>Flag to check Position state.</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True if the trade opening</p> </li> </ul>"},{"location":"reference/exchange/position/#lettrade.exchange.position.Position.is_short","title":"is_short  <code>property</code>","text":"<pre><code>is_short: bool\n</code></pre> <p>True if side is short (size is negative).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/position/#lettrade.exchange.position.Position.pl","title":"pl  <code>property</code>","text":"<pre><code>pl: float\n</code></pre> <p>Estimate Profit or Loss of Position</p> <p>Returns:</p> <ul> <li> <code>float</code> (              <code>float</code> )          \u2013            <p>PnL</p> </li> </ul>"},{"location":"reference/exchange/position/#lettrade.exchange.position.Position.side","title":"side  <code>property</code>","text":"<pre><code>side: TradeSide\n</code></pre> <p>True if side is short (size is negative).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>TradeSide</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/position/#lettrade.exchange.position.PositionResult","title":"PositionResult","text":"<pre><code>PositionResult(\n    ok: bool = True,\n    code: int = 0,\n    position: Optional[Position] = None,\n    raw: Optional[object] = None,\n)\n</code></pre> <p>Result of <code>Position</code></p> <p>Parameters:</p> <ul> <li> <code>ok</code>               (<code>Optional[bool]</code>, default:                   <code>True</code> )           \u2013            <p>Flag to check <code>Position</code> is success or not. Defaults to True.</p> </li> <li> <code>position</code>               (<code>Optional[Position]</code>, default:                   <code>None</code> )           \u2013            <p>Position own the result. Defaults to None.</p> </li> <li> <code>code</code>               (<code>Optional[int]</code>, default:                   <code>0</code> )           \u2013            <p>Error code of result. Defaults to 0.</p> </li> <li> <code>raw</code>               (<code>Optional[object]</code>, default:                   <code>None</code> )           \u2013            <p>Raw object of <code>Position</code>. Defaults to None.</p> </li> </ul> Source code in <code>lettrade/exchange/position.py</code> <pre><code>def __init__(\n    self,\n    ok: bool = True,\n    code: int = 0,\n    position: Optional[\"Position\"] = None,\n    raw: Optional[object] = None,\n) -&gt; None:\n    \"\"\"_summary_\n\n    Args:\n        ok (Optional[bool], optional): Flag to check `Position` is success or not. Defaults to True.\n        position (Optional[Position], optional): Position own the result. Defaults to None.\n        code (Optional[int], optional): Error code of result. Defaults to 0.\n        raw (Optional[object], optional): Raw object of `Position`. Defaults to None.\n    \"\"\"\n    self.ok: bool = ok\n    self.code: int = code\n    self.position: Optional[\"Position\"] = position\n    self.raw: Optional[object] = raw\n</code></pre>"},{"location":"reference/exchange/position/#lettrade.exchange.position.PositionResultError","title":"PositionResultError","text":"<pre><code>PositionResultError(\n    error: str,\n    code: int,\n    position: Optional[Position] = None,\n    raw: Optional[object] = None,\n)\n</code></pre> <p>               Bases: <code>PositionResult</code></p> <p>Result of a error <code>Position</code></p> <p>Parameters:</p> <ul> <li> <code>error</code>               (<code>str</code>)           \u2013            <p>Error message</p> </li> <li> <code>code</code>               (<code>int</code>)           \u2013            <p>Error code of result</p> </li> <li> <code>position</code>               (<code>Optional[Position]</code>, default:                   <code>None</code> )           \u2013            <p>Position own the result. Defaults to None.</p> </li> <li> <code>raw</code>               (<code>Optional[object]</code>, default:                   <code>None</code> )           \u2013            <p>Raw object of <code>Position</code>. Defaults to None.</p> </li> </ul> Source code in <code>lettrade/exchange/position.py</code> <pre><code>def __init__(\n    self,\n    error: str,\n    code: int,\n    position: Optional[\"Position\"] = None,\n    raw: Optional[object] = None,\n) -&gt; None:\n    \"\"\"_summary_\n\n    Args:\n        error (str): Error message\n        code (int): Error code of result\n        position (Optional[Position], optional): Position own the result. Defaults to None.\n        raw (Optional[object], optional): Raw object of `Position`. Defaults to None.\n    \"\"\"\n    super().__init__(ok=False, position=position, code=code, raw=raw)\n    self.error: str = error\n</code></pre>"},{"location":"reference/exchange/position/#lettrade.exchange.position.PositionResultOk","title":"PositionResultOk","text":"<pre><code>PositionResultOk(\n    position: Optional[Position] = None,\n    raw: Optional[object] = None,\n)\n</code></pre> <p>               Bases: <code>PositionResult</code></p> <p>Result of a success <code>Position</code></p> <p>Parameters:</p> <ul> <li> <code>position</code>               (<code>Optional[Position]</code>, default:                   <code>None</code> )           \u2013            <p>Position own the result. Defaults to None.</p> </li> <li> <code>raw</code>               (<code>Optional[object]</code>, default:                   <code>None</code> )           \u2013            <p>Raw object of <code>Position</code>. Defaults to None.</p> </li> </ul> Source code in <code>lettrade/exchange/position.py</code> <pre><code>def __init__(\n    self,\n    position: Optional[\"Position\"] = None,\n    raw: Optional[object] = None,\n) -&gt; None:\n    \"\"\"_summary_\n\n    Args:\n        position (Optional[Position], optional): Position own the result. Defaults to None.\n        raw (Optional[object], optional): Raw object of `Position`. Defaults to None.\n    \"\"\"\n    super().__init__(ok=True, position=position, raw=raw)\n</code></pre>"},{"location":"reference/exchange/backtest/","title":"Index","text":""},{"location":"reference/exchange/backtest/#lettrade.exchange.backtest","title":"backtest","text":""},{"location":"reference/exchange/backtest/account/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> account","text":""},{"location":"reference/exchange/backtest/account/#lettrade.exchange.backtest.account","title":"account","text":""},{"location":"reference/exchange/backtest/account/#lettrade.exchange.backtest.account.BackTestAccount","title":"BackTestAccount","text":"<pre><code>BackTestAccount(\n    risk: float = 0.02,\n    cash: float = 10000,\n    commission: float = 0.2,\n    margin: float = 1,\n    leverage: float = 1,\n    **kwargs\n)\n</code></pre> <p>               Bases: <code>Account</code></p> <p>Parameters:</p> <ul> <li> <code>risk</code>               (<code>float</code>, default:                   <code>0.02</code> )           \u2013            <p>description. Defaults to 0.02.</p> </li> <li> <code>cash</code>               (<code>float</code>, default:                   <code>10000</code> )           \u2013            <p>description. Defaults to 10_000.</p> </li> <li> <code>commission</code>               (<code>float</code>, default:                   <code>0.2</code> )           \u2013            <p>Commission fee is percent of size. Defaults to 0.2.</p> </li> <li> <code>margin</code>               (<code>float</code>, default:                   <code>1</code> )           \u2013            <p>description. Defaults to 1.</p> </li> <li> <code>leverage</code>               (<code>float</code>, default:                   <code>1</code> )           \u2013            <p>description. Defaults to 1.</p> </li> <li> <code>**kwargs</code>               (<code>dict</code>, default:                   <code>{}</code> )           \u2013            <p>Mirror of lettrade.account.Account().</p> </li> </ul> Source code in <code>lettrade/exchange/backtest/account.py</code> <pre><code>def __init__(\n    self,\n    risk: float = 0.02,\n    cash: float = 10_000,\n    commission: float = 0.2,\n    margin: float = 1,\n    leverage: float = 1,\n    **kwargs,\n) -&gt; None:\n    \"\"\"Account for backtest\n\n    Args:\n        risk (float, optional): _description_. Defaults to 0.02.\n        cash (float, optional): _description_. Defaults to 10_000.\n        commission (float, optional): Commission fee is percent of size. Defaults to 0.2.\n        margin (float, optional): _description_. Defaults to 1.\n        leverage (float, optional): _description_. Defaults to 1.\n        **kwargs (dict, optional): Mirror of [lettrade.account.Account()](site:/reference/account/account/#lettrade.account.account.Account).\n    \"\"\"\n    super().__init__(\n        risk=risk,\n        cash=cash,\n        margin=margin,\n        leverage=leverage,\n        **kwargs,\n    )\n    self._commission = commission\n</code></pre>"},{"location":"reference/exchange/backtest/account/#lettrade.exchange.backtest.account.BackTestAccount.risk","title":"risk","text":"<pre><code>risk(side: TradeSide, size: float, **kwargs) -&gt; float\n</code></pre> <p>Risk calculation</p> Source code in <code>lettrade/account/account.py</code> <pre><code>def risk(self, side: \"TradeSide\", size: float, **kwargs) -&gt; float:\n    \"\"\"Risk calculation\"\"\"\n    if size is None:\n        return side * abs(self._risk)\n    return side * abs(size)\n</code></pre>"},{"location":"reference/exchange/backtest/account/#lettrade.exchange.backtest.account.BackTestAccount.start","title":"start","text":"<pre><code>start()\n</code></pre> <p>Start account</p> Source code in <code>lettrade/account/account.py</code> <pre><code>def start(self):\n    \"\"\"Start account\"\"\"\n</code></pre>"},{"location":"reference/exchange/backtest/account/#lettrade.exchange.backtest.account.BackTestAccount.stop","title":"stop","text":"<pre><code>stop()\n</code></pre> <p>Stop account</p> Source code in <code>lettrade/account/account.py</code> <pre><code>def stop(self):\n    \"\"\"Stop account\"\"\"\n    try:\n        self._equity_snapshot()\n    except LetAccountInsufficientException:\n        pass\n</code></pre>"},{"location":"reference/exchange/backtest/account/#lettrade.exchange.backtest.account.ForexBackTestAccount","title":"ForexBackTestAccount","text":"<pre><code>ForexBackTestAccount(\n    risk: float = 0.02,\n    cash: float = 10000,\n    commission: float = 0.2,\n    margin: float = 1,\n    leverage: float = 1,\n    **kwargs\n)\n</code></pre> <p>               Bases: <code>BackTestAccount</code></p> <p>Forex backtest account helps to handle lot size</p> <p>Parameters:</p> <ul> <li> <code>risk</code>               (<code>float</code>, default:                   <code>0.02</code> )           \u2013            <p>description. Defaults to 0.02.</p> </li> <li> <code>cash</code>               (<code>float</code>, default:                   <code>10000</code> )           \u2013            <p>description. Defaults to 10_000.</p> </li> <li> <code>commission</code>               (<code>float</code>, default:                   <code>0.2</code> )           \u2013            <p>Commission fee is percent of size. Defaults to 0.2.</p> </li> <li> <code>margin</code>               (<code>float</code>, default:                   <code>1</code> )           \u2013            <p>description. Defaults to 1.</p> </li> <li> <code>leverage</code>               (<code>float</code>, default:                   <code>1</code> )           \u2013            <p>description. Defaults to 1.</p> </li> <li> <code>**kwargs</code>               (<code>dict</code>, default:                   <code>{}</code> )           \u2013            <p>Mirror of lettrade.account.Account().</p> </li> </ul> Source code in <code>lettrade/exchange/backtest/account.py</code> <pre><code>def __init__(\n    self,\n    risk: float = 0.02,\n    cash: float = 10_000,\n    commission: float = 0.2,\n    margin: float = 1,\n    leverage: float = 1,\n    **kwargs,\n) -&gt; None:\n    \"\"\"Account for backtest\n\n    Args:\n        risk (float, optional): _description_. Defaults to 0.02.\n        cash (float, optional): _description_. Defaults to 10_000.\n        commission (float, optional): Commission fee is percent of size. Defaults to 0.2.\n        margin (float, optional): _description_. Defaults to 1.\n        leverage (float, optional): _description_. Defaults to 1.\n        **kwargs (dict, optional): Mirror of [lettrade.account.Account()](site:/reference/account/account/#lettrade.account.account.Account).\n    \"\"\"\n    super().__init__(\n        risk=risk,\n        cash=cash,\n        margin=margin,\n        leverage=leverage,\n        **kwargs,\n    )\n    self._commission = commission\n</code></pre>"},{"location":"reference/exchange/backtest/account/#lettrade.exchange.backtest.account.ForexBackTestAccount.risk","title":"risk","text":"<pre><code>risk(side: TradeSide, size: float, **kwargs) -&gt; float\n</code></pre> <p>Risk calculation</p> Source code in <code>lettrade/account/account.py</code> <pre><code>def risk(self, side: \"TradeSide\", size: float, **kwargs) -&gt; float:\n    \"\"\"Risk calculation\"\"\"\n    if size is None:\n        return side * abs(self._risk)\n    return side * abs(size)\n</code></pre>"},{"location":"reference/exchange/backtest/account/#lettrade.exchange.backtest.account.ForexBackTestAccount.start","title":"start","text":"<pre><code>start()\n</code></pre> <p>Start account</p> Source code in <code>lettrade/account/account.py</code> <pre><code>def start(self):\n    \"\"\"Start account\"\"\"\n</code></pre>"},{"location":"reference/exchange/backtest/account/#lettrade.exchange.backtest.account.ForexBackTestAccount.stop","title":"stop","text":"<pre><code>stop()\n</code></pre> <p>Stop account</p> Source code in <code>lettrade/account/account.py</code> <pre><code>def stop(self):\n    \"\"\"Stop account\"\"\"\n    try:\n        self._equity_snapshot()\n    except LetAccountInsufficientException:\n        pass\n</code></pre>"},{"location":"reference/exchange/backtest/backtest/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> backtest","text":""},{"location":"reference/exchange/backtest/backtest/#lettrade.exchange.backtest.backtest","title":"backtest","text":""},{"location":"reference/exchange/backtest/backtest/#lettrade.exchange.backtest.backtest.LetTradeBackTest","title":"LetTradeBackTest","text":"<pre><code>LetTradeBackTest(\n    strategy: Type[Strategy],\n    datas: DataFeed | list[DataFeed] | str | list[str],\n    feeder: Type[DataFeeder],\n    exchange: Type[Exchange],\n    account: Type[Account],\n    commander: Optional[Type[Commander]] = None,\n    plotter: Optional[Type[Plotter]] = None,\n    stats: Optional[Type[BotStatistic]] = None,\n    name: Optional[str] = None,\n    bot: Optional[Type[LetTradeBot]] = LetTradeBot,\n    **kwargs\n)\n</code></pre> <p>               Bases: <code>LetTrade</code></p> Source code in <code>lettrade/lettrade.py</code> <pre><code>def __init__(\n    self,\n    strategy: Type[Strategy],\n    datas: DataFeed | list[DataFeed] | str | list[str],\n    feeder: Type[DataFeeder],\n    exchange: Type[Exchange],\n    account: Type[Account],\n    commander: Optional[Type[Commander]] = None,\n    plotter: Optional[Type[Plotter]] = None,\n    stats: Optional[Type[BotStatistic]] = None,\n    name: Optional[str] = None,\n    bot: Optional[Type[LetTradeBot]] = LetTradeBot,\n    **kwargs,\n) -&gt; None:\n    self._kwargs = kwargs\n    self._kwargs[\"strategy_cls\"] = strategy\n    self._kwargs[\"feeder_cls\"] = feeder\n    self._kwargs[\"exchange_cls\"] = exchange\n    self._kwargs[\"account_cls\"] = account\n    self._kwargs[\"commander_cls\"] = commander\n    self._kwargs[\"plotter_cls\"] = plotter\n    self._kwargs[\"stats_cls\"] = stats\n    self._kwargs[\"bot_cls\"] = bot\n    self._kwargs[\"name\"] = name\n\n    self._kwargs[\"datas\"] = self._init_datafeeds(datas)\n</code></pre>"},{"location":"reference/exchange/backtest/backtest/#lettrade.exchange.backtest.backtest.LetTradeBackTest.optimize","title":"optimize","text":"<pre><code>optimize(\n    multiprocessing: Literal[\"auto\", \"fork\"] = \"auto\",\n    workers: Optional[int] = None,\n    process_bar: bool = True,\n    cache: str = \"data/optimize\",\n    **kwargs\n)\n</code></pre> <p>Backtest optimization</p> <p>Parameters:</p> <ul> <li> <code>multiprocessing</code>               (<code>Optional[str]</code>, default:                   <code>'auto'</code> )           \u2013            <p>description. Defaults to \"auto\".</p> </li> </ul> Source code in <code>lettrade/exchange/backtest/backtest.py</code> <pre><code>def optimize(\n    self,\n    multiprocessing: Literal[\"auto\", \"fork\"] = \"auto\",\n    workers: Optional[int] = None,\n    process_bar: bool = True,\n    cache: str = \"data/optimize\",\n    **kwargs,\n):\n    \"\"\"Backtest optimization\n\n    Args:\n        multiprocessing (Optional[str], optional): _description_. Defaults to \"auto\".\n    \"\"\"\n    if self.data.l.pointer != 0:\n        # TODO: Can drop unnecessary columns by snapshort data.columns from init time\n        raise RuntimeError(\n            \"Optimize datas is not clean, don't run() backtest before optimize()\"\n        )\n\n    # optimizes = list(product(*(zip(repeat(k), v) for k, v in kwargs.items())))\n    optimizes = list(\n        dict(zip(kwargs.keys(), values)) for values in product(*kwargs.values())\n    )\n\n    self._optimize_init(cache=cache, total=len(optimizes), process_bar=process_bar)\n\n    # Run optimize in multiprocessing\n    self._optimizes_multiproccess(\n        optimizes=optimizes,\n        multiprocessing=multiprocessing,\n        workers=workers,\n    )\n\n    # queue None mean Done\n    try:\n        queue = self._kwargs[\"queue\"]\n        queue.put(None)\n    except Exception:\n        pass\n</code></pre>"},{"location":"reference/exchange/backtest/backtest/#lettrade.exchange.backtest.backtest.LetTradeBackTest.optimize_cache","title":"optimize_cache","text":"<pre><code>optimize_cache(cache: str = 'data/optimize')\n</code></pre> <p>Load optimize results from cache</p> <p>Parameters:</p> <ul> <li> <code>cache</code>               (<code>str</code>, default:                   <code>'data/optimize'</code> )           \u2013            <p>Cache directory. Defaults to \"data/optimize\".</p> </li> </ul> Source code in <code>lettrade/exchange/backtest/backtest.py</code> <pre><code>def optimize_cache(self, cache: str = \"data/optimize\"):\n    \"\"\"Load optimize results from cache\n\n    Args:\n        cache (str, optional): Cache directory. Defaults to \"data/optimize\".\n    \"\"\"\n    import json\n\n    self._optimize_init(cache=cache, total=0, process_bar=False)\n    cache_dir = self._kwargs[\"cache\"]\n    queue = self._kwargs[\"queue\"]\n\n    logger.warning(\"Load caches from: %s\", cache)\n\n    for cache_file in os.listdir(cache_dir):\n        if cache_file == \"info.json\":\n            continue\n\n        try:\n            cache_path = f\"{cache_dir}/{cache_file}\"\n            data = json.load(open(cache_path, mode=\"r\", encoding=\"utf-8\"))\n\n            queue.put(\n                dict(\n                    index=cache_file,\n                    optimize=data[\"optimize\"],\n                    result=data[\"result\"],\n                )\n            )\n        except Exception as e:\n            logger.warning(\"Loading cache %s error %s\", cache_path, e)\n\n    logger.warning(\"Loaded %s caches\", len(self._stats.results))\n</code></pre>"},{"location":"reference/exchange/backtest/backtest/#lettrade.exchange.backtest.backtest.LetTradeBackTest.optimize_done","title":"optimize_done","text":"<pre><code>optimize_done()\n</code></pre> <p>Clean and close optimize handlers</p> Source code in <code>lettrade/exchange/backtest/backtest.py</code> <pre><code>def optimize_done(self):\n    \"\"\"Clean and close optimize handlers\"\"\"\n    self._stats.done()\n</code></pre>"},{"location":"reference/exchange/backtest/backtest/#lettrade.exchange.backtest.backtest.LetTradeBackTest.optimize_model","title":"optimize_model","text":"<pre><code>optimize_model(\n    params_parser: Callable[\n        [Any], list[set[str, Any]]\n    ] = None,\n    result_parser: Callable[[Series], float] = None,\n    total: int = 0,\n    cache: str = \"data/optimize\",\n    process_bar: bool = False,\n    dumper: Optional[\n        Callable[[dict, LetTradeBackTest], None]\n    ] = None,\n) -&gt; Callable[[Any], Any]\n</code></pre> <p>Optimize function help to integrated with external optimize trainer</p> <p>Parameters:</p> <ul> <li> <code>params_parser</code>               (<code>Callable[[Any], list[set[str, Any]]]</code>, default:                   <code>None</code> )           \u2013            <p>Parse external parameters to bot parameters dict. Defaults to None.</p> </li> <li> <code>result_parser</code>               (<code>Callable[[Series], float]</code>, default:                   <code>None</code> )           \u2013            <p>Parse bot result to external score. Defaults to None.</p> </li> <li> <code>total</code>               (<code>int</code>, default:                   <code>0</code> )           \u2013            <p>Total number of optimize if possible. Defaults to 0.</p> </li> <li> <code>cache</code>               (<code>str</code>, default:                   <code>'data/optimize'</code> )           \u2013            <p>Cache directory to store optimize result. Defaults to \"data/optimize\".</p> </li> <li> <code>process_bar</code>               (<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Enable/Disable process bar. Defaults to False.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Callable[[Any], Any]</code>           \u2013            <p>Callable[[Any], Any]: Optimize model function</p> </li> </ul> Source code in <code>lettrade/exchange/backtest/backtest.py</code> <pre><code>def optimize_model(\n    self,\n    params_parser: Callable[[Any], list[set[str, Any]]] = None,\n    result_parser: Callable[[pd.Series], float] = None,\n    total: int = 0,\n    cache: str = \"data/optimize\",\n    process_bar: bool = False,\n    dumper: Optional[Callable[[dict, \"LetTradeBackTest\"], None]] = None,\n) -&gt; Callable[[Any], Any]:\n    \"\"\"Optimize function help to integrated with external optimize trainer\n\n    Args:\n        params_parser (Callable[[Any], list[set[str, Any]]], optional): Parse external parameters to bot parameters dict. Defaults to None.\n        result_parser (Callable[[pd.Series], float], optional): Parse bot result to external score. Defaults to None.\n        total (int, optional): Total number of optimize if possible. Defaults to 0.\n        cache (str, optional): Cache directory to store optimize result. Defaults to \"data/optimize\".\n        process_bar (bool, optional): Enable/Disable process bar. Defaults to False.\n\n    Raises:\n        RuntimeError: _description_\n\n    Returns:\n        Callable[[Any], Any]: Optimize model function\n    \"\"\"\n    if self.data.l.pointer != 0:\n        raise RuntimeError(\n            \"Optimize datas is not clean, don't run() backtest before optimize()\"\n        )\n\n    self._optimize_init(cache=cache, total=total, process_bar=process_bar)\n\n    # Optimize parameters\n    optimizer_kwargs = dict(\n        main_pid=os.getpid(),\n        params_parser=params_parser,\n        result_parser=result_parser,\n        kwargs=self._kwargs,\n    )\n\n    if dumper is not None:\n        dumper(optimizer_kwargs, self)\n    else:\n        self.__class__._optimize_model_kwargs(optimizer_kwargs)\n\n    return self.__class__._optimize_model\n</code></pre>"},{"location":"reference/exchange/backtest/backtest/#lettrade.exchange.backtest.backtest.LetTradeBackTest.plot","title":"plot","text":"<pre><code>plot(*args, jump: Optional[dict] = None, **kwargs)\n</code></pre> <p>Plot strategy/optimize result</p> BotPlotter <p>Miror of BotPlotter.plot(). Plotly implement PlotlyBotPlotter.plot().</p> <p>Args:     <code>jump</code> (Optional[dict], optional): Miror of BotPlotter.jump()</p> <p>Example:     - Jump to position_id         <pre><code>lt.plot(\n    jump=dict(position_id=1, range=300),\n    layout=dict(height=2000),\n)\n</code></pre></p> OptimizePlotter <p>Miror of OptimizePlotter.plot(). Plotly implement PlotlyOptimizePlotter.plot().</p> <p>Example:     -         <pre><code>lt.plot(layout=dict(height=2000))\n</code></pre></p> Source code in <code>lettrade/lettrade.py</code> <pre><code>def plot(self, *args, jump: Optional[dict] = None, **kwargs):\n    \"\"\"Plot strategy/optimize result\n\n    BotPlotter:\n        Miror of [BotPlotter.plot()](site:/reference/plot/bot/#lettrade.plot.bot.BotPlotter.plot).\n        Plotly implement [PlotlyBotPlotter.plot()](site:/reference/plot/plotly/plotly/#lettrade.plot.plotly.plotly.PlotlyBotPlotter.plot).\n\n        Args:\n            `jump` (Optional[dict], optional): Miror of [BotPlotter.jump()](site:/reference/plot/bot/#lettrade.plot.bot.BotPlotter.jump)\n\n        Example:\n            - Jump to position_id\n                ```python\n                lt.plot(\n                    jump=dict(position_id=1, range=300),\n                    layout=dict(height=2000),\n                )\n                ```\n\n    OptimizePlotter:\n        Miror of [OptimizePlotter.plot()](site:/reference/plot/optimize/#lettrade.plot.optimize.OptimizePlotter.plot).\n        Plotly implement [PlotlyOptimizePlotter.plot()](site:/reference/exchange/backtest/plotly/optimize/#lettrade.exchange.backtest.plotly.optimize.PlotlyOptimizePlotter.plot).\n\n        Example:\n            -\n                ```python\n                lt.plot(layout=dict(height=2000))\n                ```\n    \"\"\"\n    if __debug__:\n        from .utils.docs import is_docs_session\n\n        if is_docs_session():\n            return\n\n    self.plotter.plot(*args, jump=jump, **kwargs)\n</code></pre>"},{"location":"reference/exchange/backtest/backtest/#lettrade.exchange.backtest.backtest.LetTradeBackTest.stop","title":"stop","text":"<pre><code>stop()\n</code></pre> <p>Stop strategy</p> Source code in <code>lettrade/lettrade.py</code> <pre><code>def stop(self):\n    \"\"\"Stop strategy\"\"\"\n    if self._bot is not None:\n        return self._bot.stop()\n    if self.stats:\n        self.stats.stop()\n</code></pre>"},{"location":"reference/exchange/backtest/backtest/#lettrade.exchange.backtest.backtest.let_backtest","title":"let_backtest","text":"<pre><code>let_backtest(\n    strategy: Type[Strategy],\n    datas: DataFeed | list[DataFeed] | str | list[str],\n    feeder: Type[DataFeeder] = BackTestDataFeeder,\n    exchange: Type[Exchange] = BackTestExchange,\n    account: Type[Account] = BackTestAccount,\n    commander: Optional[\n        Type[Commander]\n    ] = BackTestCommander,\n    stats: Optional[Type[BotStatistic]] = BotStatistic,\n    optimize_stats: Optional[\n        Type[OptimizeStatistic]\n    ] = OptimizeStatistic,\n    plotter: Optional[\n        Type[BotPlotter]\n    ] = \"PlotlyBotPlotter\",\n    optimize_plotter: Optional[\n        Type[OptimizePlotter]\n    ] = \"PlotlyOptimizePlotter\",\n    bot: Optional[\n        Type[LetTradeBackTestBot]\n    ] = LetTradeBackTestBot,\n    cash: Optional[float] = 1000,\n    commission: Optional[float] = 0.2,\n    leverage: Optional[float] = 20,\n    **kwargs\n) -&gt; LetTradeBackTest\n</code></pre> <p>Complete <code>lettrade</code> backtest depenencies</p> <p>Parameters:</p> <ul> <li> <code>strategy</code>               (<code>Type[Strategy]</code>)           \u2013            <p>The Strategy implement class</p> </li> <li> <code>datas</code>               (<code>DataFeed | list[DataFeed] | str | list[str]</code>)           \u2013            <p>description</p> </li> <li> <code>feeder</code>               (<code>Type[DataFeeder]</code>, default:                   <code>BackTestDataFeeder</code> )           \u2013            <p>description. Defaults to BackTestDataFeeder.</p> </li> <li> <code>exchange</code>               (<code>Type[Exchange]</code>, default:                   <code>BackTestExchange</code> )           \u2013            <p>description. Defaults to BackTestExchange.</p> </li> <li> <code>account</code>               (<code>Type[Account]</code>, default:                   <code>BackTestAccount</code> )           \u2013            <p>description. Defaults to BackTestAccount.</p> </li> <li> <code>commander</code>               (<code>Optional[Type[Commander]]</code>, default:                   <code>BackTestCommander</code> )           \u2013            <p>description. Defaults to BackTestCommander.</p> </li> <li> <code>plotter</code>               (<code>Optional[Type[Plotter]]</code>, default:                   <code>'PlotlyBotPlotter'</code> )           \u2013            <p>description. Defaults to PlotlyBotPlotter.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>The validate parameter error</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>LetTradeBackTest</code> (              <code>LetTradeBackTest</code> )          \u2013            <p>The LetTrade backtesting object</p> </li> </ul> Source code in <code>lettrade/exchange/backtest/backtest.py</code> <pre><code>def let_backtest(\n    strategy: Type[Strategy],\n    datas: DataFeed | list[DataFeed] | str | list[str],\n    feeder: Type[DataFeeder] = BackTestDataFeeder,\n    exchange: Type[Exchange] = BackTestExchange,\n    account: Type[Account] = BackTestAccount,\n    commander: Optional[Type[Commander]] = BackTestCommander,\n    stats: Optional[Type[BotStatistic]] = BotStatistic,\n    optimize_stats: Optional[Type[OptimizeStatistic]] = OptimizeStatistic,\n    plotter: Optional[Type[BotPlotter]] = \"PlotlyBotPlotter\",\n    optimize_plotter: Optional[Type[OptimizePlotter]] = \"PlotlyOptimizePlotter\",\n    bot: Optional[Type[LetTradeBackTestBot]] = LetTradeBackTestBot,\n    # Account kwargs\n    cash: Optional[float] = 1_000,\n    commission: Optional[float] = 0.2,\n    leverage: Optional[float] = 20,\n    **kwargs,\n) -&gt; \"LetTradeBackTest\":\n    \"\"\"Complete `lettrade` backtest depenencies\n\n    Args:\n        strategy (Type[Strategy]): The Strategy implement class\n        datas (DataFeed | list[DataFeed] | str | list[str]): _description_\n        feeder (Type[DataFeeder], optional): _description_. Defaults to BackTestDataFeeder.\n        exchange (Type[Exchange], optional): _description_. Defaults to BackTestExchange.\n        account (Type[Account], optional): _description_. Defaults to BackTestAccount.\n        commander (Optional[Type[Commander]], optional): _description_. Defaults to BackTestCommander.\n        plotter (Optional[Type[Plotter]], optional): _description_. Defaults to PlotlyBotPlotter.\n\n    Raises:\n        RuntimeError: The validate parameter error\n\n    Returns:\n        LetTradeBackTest: The LetTrade backtesting object\n    \"\"\"\n    account_kwargs: dict = kwargs.setdefault(\"account_kwargs\", {})\n    account_kwargs.update(\n        cash=cash,\n        commission=commission,\n        leverage=leverage,\n    )\n\n    return LetTradeBackTest(\n        strategy=strategy,\n        datas=datas,\n        feeder=feeder,\n        exchange=exchange,\n        commander=commander,\n        account=account,\n        stats=stats,\n        plotter=plotter,\n        bot=bot,\n        # Backtest\n        optimize_stats_cls=optimize_stats,\n        optimize_plotter_cls=optimize_plotter,\n        **kwargs,\n    )\n</code></pre>"},{"location":"reference/exchange/backtest/commander/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> commander","text":""},{"location":"reference/exchange/backtest/commander/#lettrade.exchange.backtest.commander","title":"commander","text":""},{"location":"reference/exchange/backtest/commander/#lettrade.exchange.backtest.commander.BackTestCommander","title":"BackTestCommander","text":"<pre><code>BackTestCommander()\n</code></pre> <p>               Bases: <code>Commander</code></p> <p>BackTest Commander to debug commander notify</p> Source code in <code>lettrade/commander/commander.py</code> <pre><code>def __init__(self) -&gt; None:\n    super().__init__()\n</code></pre>"},{"location":"reference/exchange/backtest/commander/#lettrade.exchange.backtest.commander.BackTestCommander.init","title":"init","text":"<pre><code>init(\n    lettrade: LetTrade,\n    brain: Brain,\n    exchange: Exchange,\n    strategy: Strategy,\n)\n</code></pre> <p>Init commander dependencies</p> <p>Parameters:</p> <ul> <li> <code>lettrade</code>               (<code>LetTrade</code>)           \u2013            <p>LetTrade object</p> </li> <li> <code>brain</code>               (<code>Brain</code>)           \u2013            <p>Brain of bot</p> </li> <li> <code>exchange</code>               (<code>Exchange</code>)           \u2013            <p>Manage bot trading</p> </li> <li> <code>strategy</code>               (<code>Strategy</code>)           \u2013            <p>Strategy of bot</p> </li> </ul> Source code in <code>lettrade/commander/commander.py</code> <pre><code>def init(\n    self,\n    lettrade: \"LetTrade\",\n    brain: \"Brain\",\n    exchange: \"Exchange\",\n    strategy: \"Strategy\",\n):\n    \"\"\"Init commander dependencies\n\n    Args:\n        lettrade (LetTrade): LetTrade object\n        brain (Brain): Brain of bot\n        exchange (Exchange): Manage bot trading\n        strategy (Strategy): Strategy of bot\n    \"\"\"\n    self.lettrade = lettrade\n    self.brain = brain\n    self.exchange = exchange\n    self.strategy = strategy\n\n    self._name = self.lettrade._name\n</code></pre>"},{"location":"reference/exchange/backtest/data/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> data","text":""},{"location":"reference/exchange/backtest/data/#lettrade.exchange.backtest.data","title":"data","text":""},{"location":"reference/exchange/backtest/data/#lettrade.exchange.backtest.data.CSVBackTestDataFeed","title":"CSVBackTestDataFeed","text":"<pre><code>CSVBackTestDataFeed(\n    path: Optional[str] = None,\n    name: Optional[str] = None,\n    timeframe: Optional[str | int | Timedelta] = None,\n    delimiter: str = \",\",\n    index_col: int = 0,\n    header: int = 0,\n    meta: Optional[dict] = None,\n    data: Optional[DataFeed] = None,\n    **kwargs: dict\n)\n</code></pre> <p>               Bases: <code>BackTestDataFeed</code></p> <p>Implement help to load DataFeed from csv file</p> <p>Parameters:</p> <ul> <li> <code>name</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>Path to csv file</p> </li> <li> <code>delimiter</code>               (<code>str</code>, default:                   <code>','</code> )           \u2013            <p>description. Defaults to \",\".</p> </li> <li> <code>index_col</code>               (<code>int</code>, default:                   <code>0</code> )           \u2013            <p>description. Defaults to 0.</p> </li> <li> <code>header</code>               (<code>int</code>, default:                   <code>0</code> )           \u2013            <p>description. Defaults to 0.</p> </li> <li> <code>**kwargs</code>               (<code>dict</code>, default:                   <code>{}</code> )           \u2013            <p>DataFeed dict parameters</p> </li> </ul> Source code in <code>lettrade/exchange/backtest/data.py</code> <pre><code>def __init__(\n    self,\n    path: Optional[str] = None,\n    name: Optional[str] = None,\n    timeframe: Optional[str | int | pd.Timedelta] = None,\n    delimiter: str = \",\",\n    index_col: int = 0,\n    header: int = 0,\n    meta: Optional[dict] = None,\n    data: Optional[DataFeed] = None,\n    **kwargs: dict,\n) -&gt; None:\n    \"\"\"_summary_\n\n    Args:\n        name (str): Path to csv file\n        delimiter (str, optional): _description_. Defaults to \",\".\n        index_col (int, optional): _description_. Defaults to 0.\n        header (int, optional): _description_. Defaults to 0.\n        **kwargs (dict): [DataFeed](../../data/data.md#lettrade.data.data.DataFeed) dict parameters\n    \"\"\"\n    if name is None:\n        name = _path_to_name(path)\n\n    if data is None:\n        data = pd.read_csv(\n            path,\n            index_col=index_col,\n            parse_dates=[\"datetime\"],\n            delimiter=delimiter,\n            header=header,\n        )\n        if not isinstance(data.index, pd.DatetimeIndex):\n            data.index = data.index.astype(\"datetime64[ns, UTC]\")\n\n    super().__init__(\n        data=data,\n        name=name,\n        timeframe=timeframe,\n        meta=meta,\n        **kwargs,\n    )\n</code></pre>"},{"location":"reference/exchange/backtest/exchange/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> exchange","text":""},{"location":"reference/exchange/backtest/exchange/#lettrade.exchange.backtest.exchange","title":"exchange","text":""},{"location":"reference/exchange/backtest/exchange/#lettrade.exchange.backtest.exchange.BackTestExchange","title":"BackTestExchange","text":"<pre><code>BackTestExchange(**kwargs)\n</code></pre> <p>               Bases: <code>Exchange</code></p> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def __init__(self, **kwargs):\n    self._config = kwargs\n\n    self.orders = dict()\n    self.history_orders = dict()\n    self.positions = dict()\n    self.history_positions = dict()\n\n    # Disable Execution by defaul\n    if self._config.setdefault(\"use_execution\", False):\n        self.executions = dict()\n    else:\n        self.executions = None\n\n    self._state = ExchangeState.Init\n</code></pre>"},{"location":"reference/exchange/backtest/exchange/#lettrade.exchange.backtest.exchange.BackTestExchange.data","title":"data  <code>instance-attribute</code>","text":"<pre><code>data: DataFeed\n</code></pre> <p>main DataFeed</p>"},{"location":"reference/exchange/backtest/exchange/#lettrade.exchange.backtest.exchange.BackTestExchange.datas","title":"datas  <code>instance-attribute</code>","text":"<pre><code>datas: list[DataFeed]\n</code></pre> <p>List of all available DataFeed</p>"},{"location":"reference/exchange/backtest/exchange/#lettrade.exchange.backtest.exchange.BackTestExchange.executions","title":"executions  <code>instance-attribute</code>","text":"<pre><code>executions: dict[str, Execution]\n</code></pre> <p>Execution dict by <code>Execution.id</code> key</p>"},{"location":"reference/exchange/backtest/exchange/#lettrade.exchange.backtest.exchange.BackTestExchange.history_orders","title":"history_orders  <code>instance-attribute</code>","text":"<pre><code>history_orders: dict[str, Order] = dict()\n</code></pre> <p>History Order dict by <code>Order.id</code> key</p>"},{"location":"reference/exchange/backtest/exchange/#lettrade.exchange.backtest.exchange.BackTestExchange.history_positions","title":"history_positions  <code>instance-attribute</code>","text":"<pre><code>history_positions: dict[str, Position] = dict()\n</code></pre> <p>History Position dict by <code>Position.id</code> key</p>"},{"location":"reference/exchange/backtest/exchange/#lettrade.exchange.backtest.exchange.BackTestExchange.orders","title":"orders  <code>instance-attribute</code>","text":"<pre><code>orders: dict[str, Order] = dict()\n</code></pre> <p>Available Order dict by <code>Order.id</code> key</p>"},{"location":"reference/exchange/backtest/exchange/#lettrade.exchange.backtest.exchange.BackTestExchange.positions","title":"positions  <code>instance-attribute</code>","text":"<pre><code>positions: dict[str, Position] = dict()\n</code></pre> <p>Available Position dict by <code>Position.id</code> key</p>"},{"location":"reference/exchange/backtest/exchange/#lettrade.exchange.backtest.exchange.BackTestExchange.init","title":"init","text":"<pre><code>init(\n    brain: Brain,\n    feeder: DataFeeder,\n    account: Account,\n    commander: Commander,\n) -&gt; None\n</code></pre> <p>Init Exchange dependencies. Set data/datas from feeder. Set state to <code>ExchangeState.Start</code>.</p> <p>Parameters:</p> <ul> <li> <code>brain</code>               (<code>Brain</code>)           \u2013            <p>description</p> </li> <li> <code>feeder</code>               (<code>DataFeeder</code>)           \u2013            <p>description</p> </li> <li> <code>account</code>               (<code>Account</code>)           \u2013            <p>description</p> </li> <li> <code>commander</code>               (<code>Commander</code>)           \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def init(\n    self,\n    brain: \"Brain\",\n    feeder: DataFeeder,\n    account: Account,\n    commander: Commander,\n) -&gt; None:\n    \"\"\"Init Exchange dependencies.\n    Set data/datas from feeder.\n    Set state to `ExchangeState.Start`.\n\n    Args:\n        brain (Brain): _description_\n        feeder (DataFeeder): _description_\n        account (Account): _description_\n        commander (Commander): _description_\n    \"\"\"\n    self._brain = brain\n    self._feeder = feeder\n    self._account = account\n    self._commander = commander\n\n    self.data = self._feeder.data\n    self.datas = self._feeder.datas\n\n    self._account.init(exchange=self)\n\n    self._state = ExchangeState.Start\n</code></pre>"},{"location":"reference/exchange/backtest/exchange/#lettrade.exchange.backtest.exchange.BackTestExchange.new_order","title":"new_order","text":"<pre><code>new_order(\n    size: float,\n    type: Optional[OrderType] = OrderType.Market,\n    limit: Optional[float] = None,\n    stop: Optional[float] = None,\n    sl: Optional[float] = None,\n    tp: Optional[float] = None,\n    tag: Optional[object] = None,\n    data: Optional[DataFeed] = None,\n    **kwargs\n) -&gt; OrderResult\n</code></pre> <p>Place new order. Then send order events to <code>Brain</code></p> <p>Parameters:</p> <ul> <li> <code>size</code>               (<code>float</code>)           \u2013            <p>description</p> </li> <li> <code>type</code>               (<code>Optional[OrderType]</code>, default:                   <code>Market</code> )           \u2013            <p>description. Defaults to OrderType.Market.</p> </li> <li> <code>limit</code>               (<code>Optional[float]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>stop</code>               (<code>Optional[float]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>sl</code>               (<code>Optional[float]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>tp</code>               (<code>Optional[float]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>tag</code>               (<code>Optional[object]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>data</code>               (<code>Optional[DataFeed]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>**kwargs</code>               (<code>Optional[dict]</code>, default:                   <code>{}</code> )           \u2013            <p>Extra-parameters</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>OrderResult</code> (              <code>OrderResult</code> )          \u2013            <p>Result when place new <code>Order</code></p> </li> </ul> Source code in <code>lettrade/exchange/backtest/exchange.py</code> <pre><code>def new_order(\n    self,\n    size: float,\n    type: Optional[OrderType] = OrderType.Market,\n    limit: Optional[float] = None,\n    stop: Optional[float] = None,\n    sl: Optional[float] = None,\n    tp: Optional[float] = None,\n    tag: Optional[object] = None,\n    data: Optional[DataFeed] = None,\n    **kwargs\n) -&gt; OrderResult:\n    \"\"\"Place new order.\n    Then send order events to `Brain`\n\n    Args:\n        size (float): _description_\n        type (Optional[OrderType], optional): _description_. Defaults to OrderType.Market.\n        limit (Optional[float], optional): _description_. Defaults to None.\n        stop (Optional[float], optional): _description_. Defaults to None.\n        sl (Optional[float], optional): _description_. Defaults to None.\n        tp (Optional[float], optional): _description_. Defaults to None.\n        tag (Optional[object], optional): _description_. Defaults to None.\n        data (Optional[DataFeed], optional): _description_. Defaults to None.\n        **kwargs (Optional[dict], optional): Extra-parameters\n\n    Returns:\n        OrderResult: Result when place new `Order`\n    \"\"\"\n    if not data:\n        data = self.data\n\n    order = BackTestOrder(\n        id=self._id(),\n        exchange=self,\n        data=data,\n        size=size,\n        type=type,\n        limit_price=limit,\n        stop_price=stop,\n        sl_price=sl,\n        tp_price=tp,\n        tag=tag,\n    )\n    ok = order.place(at=self.data.bar())\n\n    if type == OrderType.Market:\n        # Simulate market order will send event before return order result\n        self._simulate_orders()\n\n    return ok\n</code></pre>"},{"location":"reference/exchange/backtest/exchange/#lettrade.exchange.backtest.exchange.BackTestExchange.next","title":"next","text":"<pre><code>next()\n</code></pre> <p>Execution when new data feeded</p> Source code in <code>lettrade/exchange/backtest/exchange.py</code> <pre><code>def next(self):\n    \"\"\"Execution when new data feeded\"\"\"\n    self._simulate_orders()\n    super().next()\n</code></pre>"},{"location":"reference/exchange/backtest/exchange/#lettrade.exchange.backtest.exchange.BackTestExchange.next_next","title":"next_next","text":"<pre><code>next_next()\n</code></pre> <p>Call after strategy.next()</p> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def next_next(self):\n    \"Call after strategy.next()\"\n    self._account._equity_snapshot()\n</code></pre>"},{"location":"reference/exchange/backtest/exchange/#lettrade.exchange.backtest.exchange.BackTestExchange.on_execution","title":"on_execution","text":"<pre><code>on_execution(\n    execution: Execution,\n    broadcast: Optional[bool] = True,\n    **kwargs\n) -&gt; None\n</code></pre> <p>Receive Execution event from exchange then store and notify Brain</p> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def on_execution(\n    self,\n    execution: Execution,\n    broadcast: Optional[bool] = True,\n    **kwargs,\n) -&gt; None:\n    \"\"\"\n    Receive Execution event from exchange then store and notify Brain\n    \"\"\"\n    if self.executions is None:\n        logger.warning(\n            \"Execution transaction is disable, enable by flag: show_execution=True\"\n        )\n        return\n\n    if not isinstance(execution, Execution):\n        raise RuntimeError(f\"{execution} is not instance of type Execution\")\n\n    if execution.id in self.executions:\n        # Merge to keep Execution handler for strategy using\n        # when strategy want to store Execution object\n        # and object will be automatic update directly\n        self.executions[execution.id].merge(execution)\n        execution = self.executions[execution.id]\n    else:\n        self.executions[execution.id] = execution\n\n    if self._state != ExchangeState.Run:\n        return\n\n    if broadcast:\n        self._brain.on_execution(execution)\n</code></pre>"},{"location":"reference/exchange/backtest/exchange/#lettrade.exchange.backtest.exchange.BackTestExchange.on_order","title":"on_order","text":"<pre><code>on_order(\n    order: Order, broadcast: Optional[bool] = True, **kwargs\n) -&gt; None\n</code></pre> <p>Receive Order event from exchange then store and notify Brain</p> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def on_order(\n    self,\n    order: Order,\n    broadcast: Optional[bool] = True,\n    **kwargs,\n) -&gt; None:\n    \"\"\"\n    Receive Order event from exchange then store and notify Brain\n    \"\"\"\n    if not isinstance(order, Order):\n        raise RuntimeError(f\"{order} is not instance of type Order\")\n\n    if order.state in [OrderState.Filled, OrderState.Canceled]:\n        self.history_orders[order.id] = order\n        if order.id in self.orders:\n            del self.orders[order.id]\n    else:\n        if order.id in self.history_orders:\n            raise RuntimeError(f\"Order {order.id} closed\")\n\n        if order.id in self.orders:\n            # Merge to keep Order handler for strategy using\n            # when strategy want to store Order object\n            # and object will be automatic update directly\n            self.orders[order.id].merge(order)\n            order = self.orders[order.id]\n        else:\n            self.orders[order.id] = order\n\n    if self._state != ExchangeState.Run:\n        return\n\n    if broadcast:\n        self._brain.on_order(order)\n</code></pre>"},{"location":"reference/exchange/backtest/exchange/#lettrade.exchange.backtest.exchange.BackTestExchange.on_position","title":"on_position","text":"<pre><code>on_position(\n    position: Position,\n    broadcast: Optional[bool] = True,\n    *args,\n    **kwargs\n) -&gt; None\n</code></pre> <p>Receive Position event from exchange then store and notify Brain</p> <p>Parameters:</p> <ul> <li> <code>position</code>               (<code>Position</code>)           \u2013            <p>new comming <code>Position</code></p> </li> <li> <code>broadcast</code>               (<code>Optional[bool]</code>, default:                   <code>True</code> )           \u2013            <p>Flag notify for Brain. Defaults to True.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>validat <code>Position</code> instance</p> </li> </ul> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def on_position(\n    self,\n    position: Position,\n    broadcast: Optional[bool] = True,\n    *args,\n    **kwargs,\n) -&gt; None:\n    \"\"\"Receive Position event from exchange then store and notify Brain\n\n    Args:\n        position (Position): new comming `Position`\n        broadcast (Optional[bool], optional): Flag notify for Brain. Defaults to True.\n\n    Raises:\n        RuntimeError: validat `Position` instance\n    \"\"\"\n    if not isinstance(position, Position):\n        raise RuntimeError(f\"{position} is not instance of type Position\")\n\n    if position.state == PositionState.Exit:\n        self.history_positions[position.id] = position\n        if position.id in self.positions:\n            del self.positions[position.id]\n\n        self._account._on_position_exit(position)\n    else:\n        if position.id in self.history_positions:\n            raise RuntimeError(f\"Order {position.id} closed\")\n        if position.id in self.positions:\n            # Merge to keep Position handler for strategy using\n            # when strategy want to store Position object\n            # and object will be automatic update directly\n            self.positions[position.id].merge(position)\n            position = self.positions[position.id]\n        else:\n            self.positions[position.id] = position\n            self._account._on_position_entry(position)\n\n    if self._state != ExchangeState.Run:\n        return\n\n    if broadcast:\n        self._brain.on_position(position)\n</code></pre>"},{"location":"reference/exchange/backtest/exchange/#lettrade.exchange.backtest.exchange.BackTestExchange.start","title":"start","text":"<pre><code>start() -&gt; None\n</code></pre> <p>Start of Exchange by: - Start account. - Set state to <code>ExchangeState.Run</code> ready for next().</p> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def start(self) -&gt; None:\n    \"\"\"Start of Exchange by:\n    - Start account.\n    - Set state to `ExchangeState.Run` ready for next().\n    \"\"\"\n    self._account.start()\n    self._state = ExchangeState.Run\n</code></pre>"},{"location":"reference/exchange/backtest/exchange/#lettrade.exchange.backtest.exchange.BackTestExchange.stop","title":"stop","text":"<pre><code>stop() -&gt; None\n</code></pre> <p>Stop Exchange</p> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def stop(self) -&gt; None:\n    \"\"\"Stop Exchange\"\"\"\n    self._state = ExchangeState.Stop\n    self._account.stop()\n</code></pre>"},{"location":"reference/exchange/backtest/feeder/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> feeder","text":""},{"location":"reference/exchange/backtest/feeder/#lettrade.exchange.backtest.feeder","title":"feeder","text":""},{"location":"reference/exchange/backtest/feeder/#lettrade.exchange.backtest.feeder.BackTestDataFeeder","title":"BackTestDataFeeder","text":"<p>               Bases: <code>DataFeeder</code></p> <p>BackTest DataFeeder</p>"},{"location":"reference/exchange/backtest/feeder/#lettrade.exchange.backtest.feeder.BackTestDataFeeder.is_continous","title":"is_continous  <code>property</code>","text":"<pre><code>is_continous\n</code></pre> <p>Flag check is realtime continous datafeeder</p>"},{"location":"reference/exchange/backtest/stats/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> stats","text":""},{"location":"reference/exchange/backtest/stats/#lettrade.exchange.backtest.stats","title":"stats","text":""},{"location":"reference/exchange/backtest/stats/#lettrade.exchange.backtest.stats.OptimizeStatistic","title":"OptimizeStatistic","text":"<pre><code>OptimizeStatistic(\n    plotter: OptimizePlotter = None, total: int = 0\n)\n</code></pre> <p>Compute strategy result</p> Source code in <code>lettrade/exchange/backtest/stats.py</code> <pre><code>def __init__(self, plotter: OptimizePlotter = None, total: int = 0) -&gt; None:\n    self.plotter = plotter\n    self.results = []\n    self._total = total\n\n    if self.plotter is not None:\n        self.plotter.init(self.results)\n\n    self._t_wait_done()\n</code></pre>"},{"location":"reference/exchange/backtest/stats/#lettrade.exchange.backtest.stats.OptimizeStatistic.compute","title":"compute","text":"<pre><code>compute()\n</code></pre> <p>Calculate strategy report</p> Source code in <code>lettrade/exchange/backtest/stats.py</code> <pre><code>def compute(self):\n    \"\"\"\n    Calculate strategy report\n    \"\"\"\n\n    return self.result\n</code></pre>"},{"location":"reference/exchange/backtest/trade/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> trade","text":""},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade","title":"trade","text":""},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestExecution","title":"BackTestExecution","text":"<pre><code>BackTestExecution(\n    id: str,\n    exchange: Exchange,\n    data: DataFeed,\n    size: float,\n    price: float,\n    at: float,\n    order_id: Optional[str] = None,\n    order: Optional[Order] = None,\n    position_id: Optional[str] = None,\n    position: Optional[Position] = None,\n    **kwargs\n)\n</code></pre> <p>               Bases: <code>Execution</code></p> <p>Execution for backtesting</p> Source code in <code>lettrade/exchange/execution.py</code> <pre><code>def __init__(\n    self,\n    id: str,\n    exchange: \"Exchange\",\n    data: \"DataFeed\",\n    size: float,\n    price: float,\n    at: float,\n    order_id: Optional[str] = None,\n    order: Optional[\"Order\"] = None,\n    position_id: Optional[str] = None,\n    position: Optional[\"Position\"] = None,\n    **kwargs,\n):\n    if exchange.executions is None:\n        logger.warning(\n            \"Execution transaction is disable, enable by flag: show_execution=True\"\n        )\n        return\n\n    super().__init__(\n        id=id,\n        exchange=exchange,\n        data=data,\n        size=size,\n        **kwargs,\n    )\n    self.order_id = order_id\n    self.order: \"Order\" = order\n    self.position_id = position_id\n    self.position: \"Position\" = position\n    self.price = price\n    self.at = at\n</code></pre>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestExecution.is_long","title":"is_long  <code>property</code>","text":"<pre><code>is_long: bool\n</code></pre> <p>True if side is long (size is positive).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True/False</p> </li> </ul>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestExecution.is_short","title":"is_short  <code>property</code>","text":"<pre><code>is_short: bool\n</code></pre> <p>True if side is short (size is negative).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestExecution.side","title":"side  <code>property</code>","text":"<pre><code>side: TradeSide\n</code></pre> <p>True if side is short (size is negative).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>TradeSide</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestExecution.from_order","title":"from_order  <code>classmethod</code>","text":"<pre><code>from_order(\n    order: BackTestOrder,\n    price: float,\n    at: object,\n    size: Optional[float] = None,\n) -&gt; BackTestExecution\n</code></pre> <p>Method help to build Execution object from Order object</p> <p>Parameters:</p> <ul> <li> <code>price</code>               (<code>float</code>)           \u2013            <p>Executed price</p> </li> <li> <code>at</code>               (<code>object</code>)           \u2013            <p>Executed bar</p> </li> <li> <code>size</code>               (<code>Optional[float]</code>, default:                   <code>None</code> )           \u2013            <p>Executed size. Defaults to None.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>BackTestExecution</code> (              <code>BackTestExecution</code> )          \u2013            <p>Execution object</p> </li> </ul> Source code in <code>lettrade/exchange/backtest/trade.py</code> <pre><code>@classmethod\ndef from_order(\n    cls,\n    order: \"BackTestOrder\",\n    price: float,\n    at: object,\n    size: Optional[float] = None,\n) -&gt; \"BackTestExecution\":\n    \"\"\"Method help to build Execution object from Order object\n\n    Args:\n        price (float): Executed price\n        at (object): Executed bar\n        size (Optional[float], optional): Executed size. Defaults to None.\n\n    Returns:\n        BackTestExecution: Execution object\n    \"\"\"\n    return cls(\n        id=order.id,\n        size=size or order.size,\n        exchange=order.exchange,\n        data=order.data,\n        price=price,\n        at=at,\n        order=order,\n    )\n</code></pre>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestExecution.merge","title":"merge","text":"<pre><code>merge(other: Execution)\n</code></pre> <p>Merge to keep object handler but not overwrite for Strategy using when Strategy want to store object and object will be automatic update directly</p> Source code in <code>lettrade/exchange/execution.py</code> <pre><code>def merge(self, other: \"Execution\"):\n    \"\"\"\n    Merge to keep object handler but not overwrite for Strategy using when Strategy want to store object and object will be automatic update directly\n    \"\"\"\n    if other is self:\n        return\n\n    if self.id != other.id:\n        raise RuntimeError(f\"Merge difference id {self.id} != {other.id} execution\")\n\n    self.price = other.price\n    self.size = other.size\n\n    if other.at:\n        self.at = other.at\n    if other.order_id:\n        self.order_id = other.order_id\n    if other.order:\n        self.order = other.order\n    if other.position_id:\n        self.position_id = other.position_id\n    if other.position:\n        self.position = other.position\n</code></pre>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestOrder","title":"BackTestOrder","text":"<pre><code>BackTestOrder(\n    id: str,\n    exchange: Exchange,\n    data: DataFeed,\n    size: float,\n    state: OrderState = OrderState.Pending,\n    type: OrderType = OrderType.Market,\n    limit_price: Optional[float] = None,\n    stop_price: Optional[float] = None,\n    sl_price: Optional[float] = None,\n    tp_price: Optional[float] = None,\n    parent: Optional[Position] = None,\n    tag: Optional[object] = None,\n    placed_at: Optional[Timestamp] = None,\n    **kwargs\n)\n</code></pre> <p>               Bases: <code>Order</code></p> <p>Order for backtesting</p> Source code in <code>lettrade/exchange/order.py</code> <pre><code>def __init__(\n    self,\n    id: str,\n    exchange: \"Exchange\",\n    data: \"DataFeed\",\n    size: float,\n    state: OrderState = OrderState.Pending,\n    type: OrderType = OrderType.Market,\n    limit_price: Optional[float] = None,\n    stop_price: Optional[float] = None,\n    sl_price: Optional[float] = None,\n    tp_price: Optional[float] = None,\n    parent: Optional[\"Position\"] = None,\n    tag: Optional[object] = None,\n    placed_at: Optional[pd.Timestamp] = None,\n    **kwargs,\n):\n    super().__init__(\n        id=id,\n        exchange=exchange,\n        data=data,\n        size=size,\n        **kwargs,\n    )\n\n    self.type: OrderType = type\n    self.state: OrderState = state\n    self.limit_price: Optional[float] = limit_price\n    self.stop_price: Optional[float] = stop_price\n    self.sl_price: Optional[float] = sl_price\n    self.tp_price: Optional[float] = tp_price\n    self.parent: Optional[\"Position\"] = parent\n    self.tag: Optional[object] = tag\n    self.placed_at: Optional[pd.Timestamp] = placed_at\n    self.filled_at: Optional[pd.Timestamp] = None\n    self.filled_price: Optional[float] = None\n\n    self.validate()\n</code></pre>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestOrder.is_closed","title":"is_closed  <code>property</code>","text":"<pre><code>is_closed: bool\n</code></pre> <p>Flag to check <code>Order</code> closed</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True if <code>state</code> in [OrderState.Filled, OrderState.Canceled]</p> </li> </ul>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestOrder.is_long","title":"is_long  <code>property</code>","text":"<pre><code>is_long: bool\n</code></pre> <p>True if side is long (size is positive).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True/False</p> </li> </ul>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestOrder.is_opening","title":"is_opening  <code>property</code>","text":"<pre><code>is_opening: bool\n</code></pre> <p>Flag to check <code>Order</code> still alive</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True if <code>state</code> in [OrderState.Pending, OrderState.Placed, OrderState.Partial]</p> </li> </ul>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestOrder.is_short","title":"is_short  <code>property</code>","text":"<pre><code>is_short: bool\n</code></pre> <p>True if side is short (size is negative).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestOrder.is_sl_order","title":"is_sl_order  <code>property</code>","text":"<pre><code>is_sl_order: bool\n</code></pre> <p><code>Order</code> is stop-loss order of a <code>Position</code></p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestOrder.is_tp_order","title":"is_tp_order  <code>property</code>","text":"<pre><code>is_tp_order: bool\n</code></pre> <p><code>Order</code> is take-profit order of a <code>Position</code></p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestOrder.limit","title":"limit  <code>property</code>","text":"<pre><code>limit: Optional[float]\n</code></pre> <p>Getter of limit_price</p> <p>Returns:</p> <ul> <li> <code>Optional[float]</code>           \u2013            <p>Optional[float]: <code>float</code> or <code>None</code></p> </li> </ul>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestOrder.place_price","title":"place_price  <code>property</code>","text":"<pre><code>place_price: Optional[float]\n</code></pre> <p>Getter of place_price</p> <p>Returns:</p> <ul> <li> <code>Optional[float]</code>           \u2013            <p>Optional[float]: <code>float</code> or <code>None</code></p> </li> </ul>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestOrder.side","title":"side  <code>property</code>","text":"<pre><code>side: TradeSide\n</code></pre> <p>True if side is short (size is negative).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>TradeSide</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestOrder.sl","title":"sl  <code>property</code>","text":"<pre><code>sl: Optional[float]\n</code></pre> <p>Getter of sl_price</p> <p>Returns:</p> <ul> <li> <code>Optional[float]</code>           \u2013            <p>Optional[float]: <code>float</code> or <code>None</code></p> </li> </ul>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestOrder.stop","title":"stop  <code>property</code>","text":"<pre><code>stop: Optional[float]\n</code></pre> <p>Getter of stop_price</p> <p>Returns:</p> <ul> <li> <code>Optional[float]</code>           \u2013            <p>Optional[float]: <code>float</code> or <code>None</code></p> </li> </ul>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestOrder.tp","title":"tp  <code>property</code>","text":"<pre><code>tp: Optional[float]\n</code></pre> <p>Getter of tp_price</p> <p>Returns:</p> <ul> <li> <code>Optional[float]</code>           \u2013            <p>Optional[float]: <code>float</code> or <code>None</code></p> </li> </ul>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestOrder.cancel","title":"cancel","text":"<pre><code>cancel() -&gt; OrderResult\n</code></pre> <p>Cancel the Order and notify Exchange</p> Source code in <code>lettrade/exchange/backtest/trade.py</code> <pre><code>def cancel(self) -&gt; \"OrderResult\":\n    \"\"\"Cancel the Order and notify Exchange\"\"\"\n    if self.state != OrderState.Placed:\n        raise RuntimeError(f\"Order {self.id} state {self.state} is not Placed\")\n\n    if self.parent:\n        if self is self.parent.sl_order:\n            self.parent.sl_order = None\n        elif self is self.parent.tp_order:\n            self.parent.tp_order = None\n\n    return super().cancel()\n</code></pre>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestOrder.fill","title":"fill","text":"<pre><code>fill(price: float, at: object) -&gt; BackTestExecution\n</code></pre> <p>Execution order and notify for Exchange</p> <p>Parameters:</p> <ul> <li> <code>price</code>               (<code>float</code>)           \u2013            <p>Executed price</p> </li> <li> <code>at</code>               (<code>object</code>)           \u2013            <p>Executed bar</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>BackTestExecution</code> (              <code>BackTestExecution</code> )          \u2013            <p>Execution object</p> </li> </ul> Source code in <code>lettrade/exchange/backtest/trade.py</code> <pre><code>def fill(self, price: float, at: object) -&gt; BackTestExecution:\n    \"\"\"Execution order and notify for Exchange\n\n    Args:\n        price (float): Executed price\n        at (object): Executed bar\n\n    Raises:\n        RuntimeError: _description_\n\n    Returns:\n        BackTestExecution: Execution object\n    \"\"\"\n    if self.state != OrderState.Placed:\n        raise RuntimeError(f\"Execution a {self.state} order\")\n\n    # Order\n    ok = super().fill(price=price, at=at)\n\n    # Execution is enable\n    if self.exchange.executions is not None:\n        execution = BackTestExecution.from_order(order=self, price=price, at=at)\n        execution._on_execution()\n\n    # Position hit SL/TP\n    if self.parent:\n        self.parent.exit(price=price, at=at, caller=self)\n    else:\n        # Position: Place and create new position\n        position = BackTestPosition.from_order(order=self)\n\n        position.entry(price=price, at=at)\n\n    return ok\n</code></pre>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestOrder.merge","title":"merge","text":"<pre><code>merge(other: Order)\n</code></pre> <p>Update current <code>Order</code> variables by other <code>Order</code></p> <p>Parameters:</p> <ul> <li> <code>other</code>               (<code>Order</code>)           \u2013            <p>Merge source <code>Order</code></p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>Validate same id</p> </li> </ul> Source code in <code>lettrade/exchange/order.py</code> <pre><code>def merge(self, other: \"Order\"):\n    \"\"\"Update current `Order` variables by other `Order`\n\n    Args:\n        other (Order): Merge source `Order`\n\n    Raises:\n        RuntimeError: Validate same id\n    \"\"\"\n    if other is self:\n        return\n\n    if self.id != other.id:\n        raise RuntimeError(f\"Merge difference id {self.id} != {other.id} order\")\n\n    self.size = other.size\n    self.sl_price = other.sl_price\n    self.tp_price = other.tp_price\n\n    if other.limit_price:\n        self.limit_price = other.limit_price\n    if other.stop_price:\n        self.stop_price = other.stop_price\n    if other.placed_at:\n        self.placed_at = other.placed_at\n\n    if other.filled_price:\n        self.filled_price = other.filled_price\n    if other.filled_at:\n        self.filled_at = other.filled_at\n\n    if other.parent:\n        self.parent = other.parent\n</code></pre>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestOrder.place","title":"place","text":"<pre><code>place(at: Timestamp) -&gt; OrderResult\n</code></pre> <p>Place <code>Order</code> Set <code>status</code> to <code>OrderState.Placed</code>. Send event to <code>Exchange</code></p> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>OrderResult</code> (              <code>OrderResult</code> )          \u2013            <p>result of <code>Order</code></p> </li> </ul> Source code in <code>lettrade/exchange/order.py</code> <pre><code>def place(self, at: pd.Timestamp) -&gt; \"OrderResult\":\n    \"\"\"Place `Order`\n    Set `status` to `OrderState.Placed`.\n    Send event to `Exchange`\n\n    Raises:\n        RuntimeError: _description_\n\n    Returns:\n        OrderResult: result of `Order`\n    \"\"\"\n    if self.state != OrderState.Pending:\n        raise RuntimeError(f\"Order {self.id} state {self.state} is not Pending\")\n\n    self.state = OrderState.Placed\n    self.placed_at = at\n\n    logger.info(\"Placing new order: %s\", self)\n\n    self.exchange.on_order(self)\n    return OrderResultOk(order=self)\n</code></pre>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestOrder.update","title":"update","text":"<pre><code>update(\n    limit_price: float = None,\n    stop_price: float = None,\n    sl: float = None,\n    tp: float = None,\n    **kwargs\n)\n</code></pre> <p>Update Order</p> <p>Parameters:</p> <ul> <li> <code>limit_price</code>               (<code>float</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>stop_price</code>               (<code>float</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>sl</code>               (<code>float</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>tp</code>               (<code>float</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/order.py</code> <pre><code>def update(\n    self,\n    limit_price: float = None,\n    stop_price: float = None,\n    sl: float = None,\n    tp: float = None,\n    **kwargs,\n):\n    \"\"\"Update Order\n\n    Args:\n        limit_price (float, optional): _description_. Defaults to None.\n        stop_price (float, optional): _description_. Defaults to None.\n        sl (float, optional): _description_. Defaults to None.\n        tp (float, optional): _description_. Defaults to None.\n\n    Raises:\n        RuntimeError: _description_\n    \"\"\"\n    if self.is_closed:\n        raise RuntimeError(f\"Update a closed order {self}\")\n\n    # TODO: validate parameters\n    if limit_price is not None:\n        self.limit_price = limit_price\n    if stop_price is not None:\n        self.stop_price = stop_price\n\n    if sl is not None:\n        self.sl_price = sl\n    if tp is not None:\n        self.tp_price = tp\n\n    self.exchange.on_order(self)\n</code></pre>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestPosition","title":"BackTestPosition","text":"<pre><code>BackTestPosition(\n    id: str,\n    exchange: Exchange,\n    data: DataFeed,\n    size: float,\n    parent: Order,\n    tag: object = \"\",\n    state: PositionState = PositionState.Open,\n    entry_price: Optional[float] = None,\n    entry_fee: float = 0.0,\n    entry_at: Optional[Timestamp] = None,\n    sl_order: Optional[Order] = None,\n    tp_order: Optional[Order] = None,\n    **kwargs\n)\n</code></pre> <p>               Bases: <code>Position</code></p> <p>Position for backtesting</p> Source code in <code>lettrade/exchange/position.py</code> <pre><code>def __init__(\n    self,\n    id: str,\n    exchange: \"Exchange\",\n    data: \"DataFeed\",\n    size: float,\n    parent: \"Order\",\n    tag: object = \"\",\n    state: PositionState = PositionState.Open,\n    entry_price: Optional[float] = None,\n    entry_fee: float = 0.0,\n    entry_at: Optional[pd.Timestamp] = None,\n    sl_order: Optional[Order] = None,\n    tp_order: Optional[Order] = None,\n    **kwargs,\n):\n    super().__init__(\n        id=id,\n        exchange=exchange,\n        data=data,\n        size=size,\n        **kwargs,\n    )\n    self._account: \"Account\" = self.exchange._account\n\n    self.state: PositionState = state\n    self.tag: object = tag\n    self.parent: \"Order\" = parent\n\n    self.entry_price: Optional[float] = entry_price\n    self.entry_fee: float = entry_fee\n    self.entry_at: Optional[pd.Timestamp] = entry_at\n\n    self.exit_price: Optional[float] = None\n    self.exit_fee: float = 0.0\n    self.exit_at: Optional[pd.Timestamp] = None\n    self.exit_pl: Optional[float] = None\n\n    self.sl_order: Optional[Order] = sl_order\n    self.tp_order: Optional[Order] = tp_order\n</code></pre>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestPosition.fee","title":"fee  <code>property</code>","text":"<pre><code>fee: float\n</code></pre> <p>Fee/Estimate Fee for trade</p> <p>Returns:</p> <ul> <li> <code>float</code> (              <code>float</code> )          \u2013            <p>Fee</p> </li> </ul>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestPosition.is_exited","title":"is_exited  <code>property</code>","text":"<pre><code>is_exited: bool\n</code></pre> <p>Flag to check Position state.</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True if the trade exited</p> </li> </ul>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestPosition.is_long","title":"is_long  <code>property</code>","text":"<pre><code>is_long: bool\n</code></pre> <p>True if side is long (size is positive).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True/False</p> </li> </ul>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestPosition.is_opening","title":"is_opening  <code>property</code>","text":"<pre><code>is_opening: bool\n</code></pre> <p>Flag to check Position state.</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True if the trade opening</p> </li> </ul>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestPosition.is_short","title":"is_short  <code>property</code>","text":"<pre><code>is_short: bool\n</code></pre> <p>True if side is short (size is negative).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestPosition.pl","title":"pl  <code>property</code>","text":"<pre><code>pl: float\n</code></pre> <p>Estimate Profit or Loss of Position</p> <p>Returns:</p> <ul> <li> <code>float</code> (              <code>float</code> )          \u2013            <p>PnL</p> </li> </ul>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestPosition.side","title":"side  <code>property</code>","text":"<pre><code>side: TradeSide\n</code></pre> <p>True if side is short (size is negative).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>TradeSide</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestPosition.exit","title":"exit","text":"<pre><code>exit(\n    price: float,\n    at: object,\n    caller: Optional[Order | Position] = None,\n)\n</code></pre> <p>Exit Position</p> <p>Parameters:</p> <ul> <li> <code>price</code>               (<code>float</code>)           \u2013            <p>Exit price</p> </li> <li> <code>at</code>               (<code>object</code>)           \u2013            <p>Exit bar</p> </li> <li> <code>caller</code>               (<code>Order | Position</code>, default:                   <code>None</code> )           \u2013            <p>Skip caller to prevent infinite recursion loop. Defaults to None.</p> </li> </ul> Source code in <code>lettrade/exchange/backtest/trade.py</code> <pre><code>def exit(\n    self,\n    price: float,\n    at: object,\n    caller: Optional[Order | Position] = None,\n):\n    \"\"\"Exit Position\n\n    Args:\n        price (float): Exit price\n        at (object): Exit bar\n        caller (Order | Position, optional): Skip caller to prevent infinite recursion loop. Defaults to None.\n    \"\"\"\n    if self.state != PositionState.Open:\n        return\n\n    # PnL\n    pl = self._account.pl(\n        size=self.size,\n        entry_price=self.entry_price,\n        exit_price=price,\n    )\n\n    # Fee\n    fee = self._account.fee(size=self.size)\n\n    # State\n    super().exit(price=price, at=at, pl=pl, fee=fee)\n\n    # Caller is position close by tp/sl order\n    if caller is None or (self.sl_order and self.sl_order is not caller):\n        self.sl_order.cancel()\n    if caller is None or (self.tp_order and self.tp_order is not caller):\n        self.tp_order.cancel()\n</code></pre>"},{"location":"reference/exchange/backtest/trade/#lettrade.exchange.backtest.trade.BackTestPosition.from_order","title":"from_order  <code>classmethod</code>","text":"<pre><code>from_order(\n    order: BackTestOrder,\n    size: Optional[float] = None,\n    state: PositionState = PositionState.Open,\n) -&gt; BackTestPosition\n</code></pre> <p>Build Position object from Order object</p> <p>Parameters:</p> <ul> <li> <code>size</code>               (<code>float</code>, default:                   <code>None</code> )           \u2013            <p>Size of Position object. Defaults to None.</p> </li> <li> <code>state</code>               (<code>PositionState</code>, default:                   <code>Open</code> )           \u2013            <p>State of Position object. Defaults to PositionState.Open.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>BackTestPosition</code> (              <code>BackTestPosition</code> )          \u2013            <p>Position object</p> </li> </ul> Source code in <code>lettrade/exchange/backtest/trade.py</code> <pre><code>@classmethod\ndef from_order(\n    cls,\n    order: \"BackTestOrder\",\n    size: Optional[float] = None,\n    state: PositionState = PositionState.Open,\n) -&gt; \"BackTestPosition\":\n    \"\"\"Build Position object from Order object\n\n    Args:\n        size (float, optional): Size of Position object. Defaults to None.\n        state (PositionState, optional): State of Position object. Defaults to PositionState.Open.\n\n    Returns:\n        BackTestPosition: Position object\n    \"\"\"\n    position = cls(\n        id=order.id,\n        size=size or order.size,\n        exchange=order.exchange,\n        data=order.data,\n        state=state,\n        parent=order,\n    )\n    if order.sl_price:\n        position._new_sl_order(stop_price=order.sl_price)\n    if order.tp_price:\n        position._new_tp_order(limit_price=order.tp_price)\n    order.parent = position\n    return position\n</code></pre>"},{"location":"reference/exchange/backtest/extra/","title":"Index","text":""},{"location":"reference/exchange/backtest/extra/#lettrade.exchange.backtest.extra","title":"extra","text":""},{"location":"reference/exchange/backtest/extra/ray/","title":"Index","text":""},{"location":"reference/exchange/backtest/extra/ray/#lettrade.exchange.backtest.extra.ray","title":"ray","text":""},{"location":"reference/exchange/backtest/extra/ray/ray/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> ray","text":""},{"location":"reference/exchange/backtest/extra/ray/ray/#lettrade.exchange.backtest.extra.ray.ray","title":"ray","text":""},{"location":"reference/exchange/backtest/extra/yfinance/","title":"Index","text":""},{"location":"reference/exchange/backtest/extra/yfinance/#lettrade.exchange.backtest.extra.yfinance","title":"yfinance","text":""},{"location":"reference/exchange/backtest/extra/yfinance/yfinance/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> yfinance","text":""},{"location":"reference/exchange/backtest/extra/yfinance/yfinance/#lettrade.exchange.backtest.extra.yfinance.yfinance","title":"yfinance","text":""},{"location":"reference/exchange/backtest/plotly/","title":"Index","text":""},{"location":"reference/exchange/backtest/plotly/#lettrade.exchange.backtest.plotly","title":"plotly","text":""},{"location":"reference/exchange/backtest/plotly/optimize/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> optimize","text":""},{"location":"reference/exchange/backtest/plotly/optimize/#lettrade.exchange.backtest.plotly.optimize","title":"optimize","text":""},{"location":"reference/exchange/backtest/plotly/optimize/#lettrade.exchange.backtest.plotly.optimize.PlotlyOptimizePlotter","title":"PlotlyOptimizePlotter","text":"<pre><code>PlotlyOptimizePlotter(total=None, process_bar=True)\n</code></pre> <p>               Bases: <code>OptimizePlotter</code></p> Source code in <code>lettrade/exchange/backtest/plotly/optimize.py</code> <pre><code>def __init__(self, total=None, process_bar=True) -&gt; None:\n    super().__init__()\n\n    self._total = total\n\n    if process_bar:\n        from tqdm import tqdm\n\n        self._process_bar = tqdm(total=total)\n</code></pre>"},{"location":"reference/exchange/backtest/plotly/optimize/#lettrade.exchange.backtest.plotly.optimize.PlotlyOptimizePlotter.contour","title":"contour","text":"<pre><code>contour(\n    x: str = None,\n    y: str = None,\n    z: str = \"equity\",\n    histfunc=\"max\",\n    **kwargs\n)\n</code></pre> <p>Plot optimize contour</p> <p>Parameters:</p> <ul> <li> <code>x</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>y</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>z</code>               (<code>str</code>, default:                   <code>'equity'</code> )           \u2013            <p>description. Defaults to \"equity\".</p> </li> <li> <code>histfunc</code>               (<code>str</code>, default:                   <code>'max'</code> )           \u2013            <p>description. Defaults to \"max\".</p> </li> </ul> Source code in <code>lettrade/exchange/backtest/plotly/optimize.py</code> <pre><code>def contour(\n    self,\n    x: str = None,\n    y: str = None,\n    z: str = \"equity\",\n    histfunc=\"max\",\n    **kwargs,\n):\n    \"\"\"Plot optimize contour\n\n    Args:\n        x (str, optional): _description_. Defaults to None.\n        y (str, optional): _description_. Defaults to None.\n        z (str, optional): _description_. Defaults to \"equity\".\n        histfunc (str, optional): _description_. Defaults to \"max\".\n    \"\"\"\n    x, y, z = self._xyz_default(x, y, z)\n    df = pd.DataFrame(self._xyzs(x=x, y=y, z=z))\n    fig = px.density_contour(\n        df,\n        x=x,\n        y=y,\n        z=z,\n        nbinsx=int(df[x].max() - df[x].min() + 1),\n        nbinsy=int(df[y].max() - df[y].min() + 1),\n        histfunc=histfunc,\n        **kwargs,\n    )\n    fig.update_traces(contours_coloring=\"fill\", contours_showlabels=True)\n    fig.show()\n</code></pre>"},{"location":"reference/exchange/backtest/plotly/optimize/#lettrade.exchange.backtest.plotly.optimize.PlotlyOptimizePlotter.heatmap","title":"heatmap","text":"<pre><code>heatmap(\n    x: str = None,\n    y: str = None,\n    z: str = \"equity\",\n    histfunc=\"max\",\n    **kwargs\n)\n</code></pre> <p>Plot optimize heatmap</p> <p>Parameters:</p> <ul> <li> <code>x</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>y</code>               (<code>str</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>z</code>               (<code>str</code>, default:                   <code>'equity'</code> )           \u2013            <p>description. Defaults to \"equity\".</p> </li> <li> <code>histfunc</code>               (<code>str</code>, default:                   <code>'max'</code> )           \u2013            <p>description. Defaults to \"max\".</p> </li> </ul> Source code in <code>lettrade/exchange/backtest/plotly/optimize.py</code> <pre><code>def heatmap(\n    self,\n    x: str = None,\n    y: str = None,\n    z: str = \"equity\",\n    histfunc=\"max\",\n    **kwargs,\n):\n    \"\"\"Plot optimize heatmap\n\n    Args:\n        x (str, optional): _description_. Defaults to None.\n        y (str, optional): _description_. Defaults to None.\n        z (str, optional): _description_. Defaults to \"equity\".\n        histfunc (str, optional): _description_. Defaults to \"max\".\n    \"\"\"\n    x, y, z = self._xyz_default(x, y, z)\n    df = pd.DataFrame(self._xyzs(x=x, y=y, z=z))\n    fig = px.density_heatmap(\n        df,\n        x=x,\n        y=y,\n        z=z,\n        nbinsx=int(df[x].max() - df[x].min() + 1),\n        nbinsy=int(df[y].max() - df[y].min() + 1),\n        histfunc=histfunc,\n        color_continuous_scale=\"Viridis\",\n        **kwargs,\n    )\n    fig.show()\n</code></pre>"},{"location":"reference/exchange/backtest/plotly/optimize/#lettrade.exchange.backtest.plotly.optimize.PlotlyOptimizePlotter.plot","title":"plot","text":"<pre><code>plot(**kwargs)\n</code></pre> <p>Plot optimize result</p> Source code in <code>lettrade/exchange/backtest/plotly/optimize.py</code> <pre><code>def plot(self, **kwargs):\n    \"\"\"Plot optimize result\"\"\"\n    ids = []\n    equities = []\n    for result in self.results:\n        ids.append(result[\"index\"])\n        equities.append(result[\"result\"][\"equity\"])\n\n    df = pd.DataFrame({\"id\": ids, \"equity\": equities})\n\n    fig = px.scatter(df, x=\"id\", y=\"equity\")\n    fig.show()\n</code></pre>"},{"location":"reference/exchange/live/","title":"Index","text":""},{"location":"reference/exchange/live/#lettrade.exchange.live","title":"live","text":""},{"location":"reference/exchange/live/account/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> account","text":""},{"location":"reference/exchange/live/account/#lettrade.exchange.live.account","title":"account","text":""},{"location":"reference/exchange/live/account/#lettrade.exchange.live.account.LiveAccount","title":"LiveAccount","text":"<pre><code>LiveAccount(api: LiveAPI, **kwargs)\n</code></pre> <p>               Bases: <code>Account</code></p> <p>Parameters:</p> <ul> <li> <code>api</code>               (<code>LiveAPI</code>)           \u2013            <p>description</p> </li> <li> <code>**kwargs</code>               (<code>dict</code>, default:                   <code>{}</code> )           \u2013            <p>Mirror of lettrade.account.Account().</p> </li> </ul> Source code in <code>lettrade/exchange/live/account.py</code> <pre><code>def __init__(self, api: LiveAPI, **kwargs) -&gt; None:\n    \"\"\"Account for live trading\n\n    Args:\n        api (LiveAPI): _description_\n        **kwargs (dict, optional): Mirror of [lettrade.account.Account()](site:/reference/account/account/#lettrade.account.account.Account).\n    \"\"\"\n    super().__init__(**kwargs)\n    self._api = api\n</code></pre>"},{"location":"reference/exchange/live/account/#lettrade.exchange.live.account.LiveAccount.pl","title":"pl","text":"<pre><code>pl(size, entry_price: float, exit_price=None)\n</code></pre> <p>Estimate temporary profit and loss</p> Source code in <code>lettrade/account/account.py</code> <pre><code>def pl(self, size, entry_price: float, exit_price=None):\n    \"\"\"Estimate temporary profit and loss\"\"\"\n    if exit_price is None:\n        exit_price = self._exchange.data.l.open[0]\n\n    return size * (exit_price - entry_price)\n</code></pre>"},{"location":"reference/exchange/live/account/#lettrade.exchange.live.account.LiveAccount.risk","title":"risk","text":"<pre><code>risk(side: TradeSide, size: float, **kwargs) -&gt; float\n</code></pre> <p>Risk calculation</p> Source code in <code>lettrade/account/account.py</code> <pre><code>def risk(self, side: \"TradeSide\", size: float, **kwargs) -&gt; float:\n    \"\"\"Risk calculation\"\"\"\n    if size is None:\n        return side * abs(self._risk)\n    return side * abs(size)\n</code></pre>"},{"location":"reference/exchange/live/account/#lettrade.exchange.live.account.LiveAccount.stop","title":"stop","text":"<pre><code>stop()\n</code></pre> <p>Stop account</p> Source code in <code>lettrade/account/account.py</code> <pre><code>def stop(self):\n    \"\"\"Stop account\"\"\"\n    try:\n        self._equity_snapshot()\n    except LetAccountInsufficientException:\n        pass\n</code></pre>"},{"location":"reference/exchange/live/api/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> api","text":""},{"location":"reference/exchange/live/api/#lettrade.exchange.live.api","title":"api","text":""},{"location":"reference/exchange/live/api/#lettrade.exchange.live.api.LiveAPI","title":"LiveAPI","text":"<pre><code>LiveAPI(**kwargs)\n</code></pre> <p>               Bases: <code>ABC</code></p> Source code in <code>lettrade/exchange/live/api.py</code> <pre><code>def __init__(self, **kwargs):\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/live/api/#lettrade.exchange.live.api.LiveAPI.account","title":"account  <code>abstractmethod</code>","text":"<pre><code>account()\n</code></pre> Source code in <code>lettrade/exchange/live/api.py</code> <pre><code>@abstractmethod\ndef account(self):\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/live/api/#lettrade.exchange.live.api.LiveAPI.bars","title":"bars  <code>abstractmethod</code>","text":"<pre><code>bars(**kwargs)\n</code></pre> Source code in <code>lettrade/exchange/live/api.py</code> <pre><code>@abstractmethod\ndef bars(self, **kwargs):\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/live/api/#lettrade.exchange.live.api.LiveAPI.heartbeat","title":"heartbeat  <code>abstractmethod</code>","text":"<pre><code>heartbeat()\n</code></pre> Source code in <code>lettrade/exchange/live/api.py</code> <pre><code>@abstractmethod\ndef heartbeat(self):\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/live/api/#lettrade.exchange.live.api.LiveAPI.init","title":"init","text":"<pre><code>init(**kwargs)\n</code></pre> Source code in <code>lettrade/exchange/live/api.py</code> <pre><code>def init(self, **kwargs):\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/live/api/#lettrade.exchange.live.api.LiveAPI.market","title":"market  <code>abstractmethod</code>","text":"<pre><code>market(symbol: str)\n</code></pre> Source code in <code>lettrade/exchange/live/api.py</code> <pre><code>@abstractmethod\ndef market(self, symbol: str):\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/live/api/#lettrade.exchange.live.api.LiveAPI.markets","title":"markets  <code>abstractmethod</code>","text":"<pre><code>markets(symbols: list[str])\n</code></pre> Source code in <code>lettrade/exchange/live/api.py</code> <pre><code>@abstractmethod\ndef markets(self, symbols: list[str]):\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/live/api/#lettrade.exchange.live.api.LiveAPI.multiprocess","title":"multiprocess  <code>classmethod</code>","text":"<pre><code>multiprocess(kwargs: dict, **other_kwargs)\n</code></pre> Source code in <code>lettrade/exchange/live/api.py</code> <pre><code>@classmethod\ndef multiprocess(cls, kwargs: dict, **other_kwargs):\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/live/api/#lettrade.exchange.live.api.LiveAPI.next","title":"next","text":"<pre><code>next()\n</code></pre> Source code in <code>lettrade/exchange/live/api.py</code> <pre><code>def next(self):\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/live/api/#lettrade.exchange.live.api.LiveAPI.order_close","title":"order_close  <code>abstractmethod</code>","text":"<pre><code>order_close(order: LiveOrder, **kwargs)\n</code></pre> Source code in <code>lettrade/exchange/live/api.py</code> <pre><code>@abstractmethod\ndef order_close(self, order: \"LiveOrder\", **kwargs):\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/live/api/#lettrade.exchange.live.api.LiveAPI.order_open","title":"order_open  <code>abstractmethod</code>","text":"<pre><code>order_open(**kwargs)\n</code></pre> Source code in <code>lettrade/exchange/live/api.py</code> <pre><code>@abstractmethod\ndef order_open(self, **kwargs):\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/live/api/#lettrade.exchange.live.api.LiveAPI.order_update","title":"order_update  <code>abstractmethod</code>","text":"<pre><code>order_update(order: LiveOrder, sl=None, tp=None, **kwargs)\n</code></pre> Source code in <code>lettrade/exchange/live/api.py</code> <pre><code>@abstractmethod\ndef order_update(self, order: \"LiveOrder\", sl=None, tp=None, **kwargs):\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/live/api/#lettrade.exchange.live.api.LiveAPI.orders_get","title":"orders_get  <code>abstractmethod</code>","text":"<pre><code>orders_get(**kwargs)\n</code></pre> Source code in <code>lettrade/exchange/live/api.py</code> <pre><code>@abstractmethod\ndef orders_get(self, **kwargs):\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/live/api/#lettrade.exchange.live.api.LiveAPI.orders_total","title":"orders_total  <code>abstractmethod</code>","text":"<pre><code>orders_total()\n</code></pre> Source code in <code>lettrade/exchange/live/api.py</code> <pre><code>@abstractmethod\ndef orders_total(self):\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/live/api/#lettrade.exchange.live.api.LiveAPI.position_update","title":"position_update  <code>abstractmethod</code>","text":"<pre><code>position_update(\n    position: LivePosition, sl=None, tp=None, **kwargs\n)\n</code></pre> Source code in <code>lettrade/exchange/live/api.py</code> <pre><code>@abstractmethod\ndef position_update(self, position: \"LivePosition\", sl=None, tp=None, **kwargs):\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/live/api/#lettrade.exchange.live.api.LiveAPI.positions_get","title":"positions_get  <code>abstractmethod</code>","text":"<pre><code>positions_get(**kwargs)\n</code></pre> Source code in <code>lettrade/exchange/live/api.py</code> <pre><code>@abstractmethod\ndef positions_get(self, **kwargs):\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/live/api/#lettrade.exchange.live.api.LiveAPI.positions_total","title":"positions_total  <code>abstractmethod</code>","text":"<pre><code>positions_total()\n</code></pre> Source code in <code>lettrade/exchange/live/api.py</code> <pre><code>@abstractmethod\ndef positions_total(self):\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/live/api/#lettrade.exchange.live.api.LiveAPI.start","title":"start","text":"<pre><code>start(exchange=None)\n</code></pre> Source code in <code>lettrade/exchange/live/api.py</code> <pre><code>def start(self, exchange=None):\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/live/api/#lettrade.exchange.live.api.LiveAPI.stop","title":"stop","text":"<pre><code>stop()\n</code></pre> Source code in <code>lettrade/exchange/live/api.py</code> <pre><code>def stop(self):\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/live/api/#lettrade.exchange.live.api.LiveAPI.tick_get","title":"tick_get  <code>abstractmethod</code>","text":"<pre><code>tick_get(symbol)\n</code></pre> Source code in <code>lettrade/exchange/live/api.py</code> <pre><code>@abstractmethod\ndef tick_get(self, symbol):\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/live/data/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> data","text":""},{"location":"reference/exchange/live/data/#lettrade.exchange.live.data","title":"data","text":""},{"location":"reference/exchange/live/data/#lettrade.exchange.live.data.LiveDataFeed","title":"LiveDataFeed","text":"<pre><code>LiveDataFeed(\n    symbol: str,\n    timeframe: str | int | Timedelta,\n    name: Optional[str] = None,\n    api: Optional[LiveAPI] = None,\n    **kwargs\n)\n</code></pre> <p>               Bases: <code>DataFeed</code></p> Source code in <code>lettrade/exchange/live/data.py</code> <pre><code>def __init__(\n    self,\n    symbol: str,\n    timeframe: str | int | pd.Timedelta,\n    name: Optional[str] = None,\n    api: Optional[LiveAPI] = None,\n    **kwargs,\n) -&gt; None:\n    super().__init__(\n        name=name or f\"{symbol}_{timeframe}\",\n        timeframe=timeframe,\n        columns=[\"open\", \"high\", \"low\", \"close\", \"volume\"],\n        **kwargs,\n    )\n    self.meta.update(symbol=symbol)\n\n    if api is not None:\n        self._api = api\n</code></pre>"},{"location":"reference/exchange/live/data/#lettrade.exchange.live.data.LiveDataFeed.bars","title":"bars","text":"<pre><code>bars(\n    since: int | str | Timestamp, to: int | str | Timestamp\n) -&gt; list\n</code></pre> <p>Get bars from LiveAPI</p> <p>Parameters:</p> <ul> <li> <code>since</code>               (<code>int | str | Timestamp</code>)           \u2013            <p>description</p> </li> <li> <code>to</code>               (<code>int | str | Timestamp</code>)           \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list</code> (              <code>list</code> )          \u2013            <p>list of bar</p> </li> </ul> Source code in <code>lettrade/exchange/live/data.py</code> <pre><code>def bars(\n    self,\n    since: int | str | pd.Timestamp,\n    to: int | str | pd.Timestamp,\n) -&gt; list:\n    \"\"\"Get bars from LiveAPI\n\n    Args:\n        since (int | str | pd.Timestamp): _description_\n        to (int | str | pd.Timestamp): _description_\n\n    Returns:\n        list: list of bar\n    \"\"\"\n    return self._api.bars(\n        symbol=self.symbol,\n        timeframe=self.timeframe.string,\n        since=since,\n        to=to,\n    )\n</code></pre>"},{"location":"reference/exchange/live/data/#lettrade.exchange.live.data.LiveDataFeed.bars_load","title":"bars_load","text":"<pre><code>bars_load(\n    since: int | str | Timestamp, to: int | str | Timestamp\n) -&gt; bool\n</code></pre> <p>Get bar and push to DataFeed</p> <p>Parameters:</p> <ul> <li> <code>since</code>               (<code>int | str | Timestamp</code>)           \u2013            <p>description</p> </li> <li> <code>to</code>               (<code>int | str | Timestamp</code>)           \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True if has data, False if no data</p> </li> </ul> Source code in <code>lettrade/exchange/live/data.py</code> <pre><code>def bars_load(\n    self,\n    since: int | str | pd.Timestamp,\n    to: int | str | pd.Timestamp,\n) -&gt; bool:\n    \"\"\"Get bar and push to DataFeed\n\n    Args:\n        since (int | str | pd.Timestamp): _description_\n        to (int | str | pd.Timestamp): _description_\n\n    Returns:\n        bool: True if has data, False if no data\n    \"\"\"\n    bars = self.bars(since=since, to=to)\n\n    if bars is None or len(bars) == 0:\n        logger.warning(\"No bars data for %s\", self.name)\n        return False\n\n    self.push(bars)\n    return True\n</code></pre>"},{"location":"reference/exchange/live/data/#lettrade.exchange.live.data.LiveDataFeed.instance","title":"instance  <code>classmethod</code>","text":"<pre><code>instance(\n    api: Optional[LiveAPI] = None,\n    api_kwargs: Optional[dict] = None,\n    **kwargs\n) -&gt; LiveDataFeed\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>api</code>               (<code>LiveAPI</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>api_kwargs</code>               (<code>dict</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>Missing api requirement</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>LiveDataFeed</code> (              <code>LiveDataFeed</code> )          \u2013            <p>DataFeed object</p> </li> </ul> Source code in <code>lettrade/exchange/live/data.py</code> <pre><code>@classmethod\ndef instance(\n    cls,\n    api: Optional[LiveAPI] = None,\n    api_kwargs: Optional[dict] = None,\n    **kwargs,\n) -&gt; \"LiveDataFeed\":\n    \"\"\"_summary_\n\n    Args:\n        api (LiveAPI, optional): _description_. Defaults to None.\n        api_kwargs (dict, optional): _description_. Defaults to None.\n\n    Raises:\n        RuntimeError: Missing api requirement\n\n    Returns:\n        LiveDataFeed: DataFeed object\n    \"\"\"\n    if api is None:\n        if api_kwargs is None:\n            raise RuntimeError(\"api or api_kwargs cannot missing\")\n        api = cls._api_cls(**api_kwargs)\n    obj = cls(api=api, **kwargs)\n    return obj\n</code></pre>"},{"location":"reference/exchange/live/exchange/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> exchange","text":""},{"location":"reference/exchange/live/exchange/#lettrade.exchange.live.exchange","title":"exchange","text":""},{"location":"reference/exchange/live/exchange/#lettrade.exchange.live.exchange.LiveExchange","title":"LiveExchange","text":"<pre><code>LiveExchange(api: LiveAPI, *args, **kwargs)\n</code></pre> <p>               Bases: <code>Exchange</code></p> <p>MetaTrade 5 exchange module for <code>lettrade</code></p> <p>Parameters:</p> <ul> <li> <code>api</code>               (<code>LiveAPI</code>)           \u2013            <p>API connect to rpyc MeTrader 5 Terminal server through module <code>mt5linux</code></p> </li> <li> <code>*args</code>               (<code>list</code>, default:                   <code>()</code> )           \u2013            <p><code>Exchange</code> list parameters</p> </li> <li> <code>**kwargs</code>               (<code>dict</code>, default:                   <code>{}</code> )           \u2013            <p><code>Exchange</code> dict parameters</p> </li> </ul> Source code in <code>lettrade/exchange/live/exchange.py</code> <pre><code>def __init__(self, api: LiveAPI, *args, **kwargs):\n    \"\"\"_summary_\n\n    Args:\n        api (LiveAPI): API connect to rpyc MeTrader 5 Terminal server through module `mt5linux`\n        *args (list): `Exchange` list parameters\n        **kwargs (dict): `Exchange` dict parameters\n    \"\"\"\n    super().__init__(*args, **kwargs)\n    self._api = api\n</code></pre>"},{"location":"reference/exchange/live/exchange/#lettrade.exchange.live.exchange.LiveExchange.data","title":"data  <code>instance-attribute</code>","text":"<pre><code>data: DataFeed\n</code></pre> <p>main DataFeed</p>"},{"location":"reference/exchange/live/exchange/#lettrade.exchange.live.exchange.LiveExchange.datas","title":"datas  <code>instance-attribute</code>","text":"<pre><code>datas: list[DataFeed]\n</code></pre> <p>List of all available DataFeed</p>"},{"location":"reference/exchange/live/exchange/#lettrade.exchange.live.exchange.LiveExchange.executions","title":"executions  <code>instance-attribute</code>","text":"<pre><code>executions: dict[str, Execution]\n</code></pre> <p>Execution dict by <code>Execution.id</code> key</p>"},{"location":"reference/exchange/live/exchange/#lettrade.exchange.live.exchange.LiveExchange.history_orders","title":"history_orders  <code>instance-attribute</code>","text":"<pre><code>history_orders: dict[str, Order] = dict()\n</code></pre> <p>History Order dict by <code>Order.id</code> key</p>"},{"location":"reference/exchange/live/exchange/#lettrade.exchange.live.exchange.LiveExchange.history_positions","title":"history_positions  <code>instance-attribute</code>","text":"<pre><code>history_positions: dict[str, Position] = dict()\n</code></pre> <p>History Position dict by <code>Position.id</code> key</p>"},{"location":"reference/exchange/live/exchange/#lettrade.exchange.live.exchange.LiveExchange.orders","title":"orders  <code>instance-attribute</code>","text":"<pre><code>orders: dict[str, Order] = dict()\n</code></pre> <p>Available Order dict by <code>Order.id</code> key</p>"},{"location":"reference/exchange/live/exchange/#lettrade.exchange.live.exchange.LiveExchange.positions","title":"positions  <code>instance-attribute</code>","text":"<pre><code>positions: dict[str, Position] = dict()\n</code></pre> <p>Available Position dict by <code>Position.id</code> key</p>"},{"location":"reference/exchange/live/exchange/#lettrade.exchange.live.exchange.LiveExchange.init","title":"init","text":"<pre><code>init(\n    brain: Brain,\n    feeder: DataFeeder,\n    account: Account,\n    commander: Commander,\n) -&gt; None\n</code></pre> <p>Init Exchange dependencies. Set data/datas from feeder. Set state to <code>ExchangeState.Start</code>.</p> <p>Parameters:</p> <ul> <li> <code>brain</code>               (<code>Brain</code>)           \u2013            <p>description</p> </li> <li> <code>feeder</code>               (<code>DataFeeder</code>)           \u2013            <p>description</p> </li> <li> <code>account</code>               (<code>Account</code>)           \u2013            <p>description</p> </li> <li> <code>commander</code>               (<code>Commander</code>)           \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def init(\n    self,\n    brain: \"Brain\",\n    feeder: DataFeeder,\n    account: Account,\n    commander: Commander,\n) -&gt; None:\n    \"\"\"Init Exchange dependencies.\n    Set data/datas from feeder.\n    Set state to `ExchangeState.Start`.\n\n    Args:\n        brain (Brain): _description_\n        feeder (DataFeeder): _description_\n        account (Account): _description_\n        commander (Commander): _description_\n    \"\"\"\n    self._brain = brain\n    self._feeder = feeder\n    self._account = account\n    self._commander = commander\n\n    self.data = self._feeder.data\n    self.datas = self._feeder.datas\n\n    self._account.init(exchange=self)\n\n    self._state = ExchangeState.Start\n</code></pre>"},{"location":"reference/exchange/live/exchange/#lettrade.exchange.live.exchange.LiveExchange.new_order","title":"new_order","text":"<pre><code>new_order(\n    size: float,\n    type: Optional[OrderType] = OrderType.Market,\n    limit: Optional[float] = None,\n    stop: Optional[float] = None,\n    sl: Optional[float] = None,\n    tp: Optional[float] = None,\n    tag: Optional[str] = None,\n    data: Optional[DataFeed] = None,\n    *args,\n    **kwargs\n) -&gt; OrderResult\n</code></pre> <p>Place new order to server</p> <p>Parameters:</p> <ul> <li> <code>size</code>               (<code>float</code>)           \u2013            <p>description</p> </li> <li> <code>type</code>               (<code>Optional[OrderType]</code>, default:                   <code>Market</code> )           \u2013            <p>description. Defaults to OrderType.Market.</p> </li> <li> <code>limit</code>               (<code>Optional[float]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>stop</code>               (<code>Optional[float]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>sl</code>               (<code>Optional[float]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>tp</code>               (<code>Optional[float]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>tag</code>               (<code>Optional[str]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>data</code>               (<code>Optional[DataFeed]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>OrderResult</code> (              <code>OrderResult</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/live/exchange.py</code> <pre><code>def new_order(\n    self,\n    size: float,\n    type: Optional[OrderType] = OrderType.Market,\n    limit: Optional[float] = None,\n    stop: Optional[float] = None,\n    sl: Optional[float] = None,\n    tp: Optional[float] = None,\n    tag: Optional[str] = None,\n    data: Optional[DataFeed] = None,\n    *args,\n    **kwargs\n) -&gt; OrderResult:\n    \"\"\"Place new order to server\n\n    Args:\n        size (float): _description_\n        type (Optional[OrderType], optional): _description_. Defaults to OrderType.Market.\n        limit (Optional[float], optional): _description_. Defaults to None.\n        stop (Optional[float], optional): _description_. Defaults to None.\n        sl (Optional[float], optional): _description_. Defaults to None.\n        tp (Optional[float], optional): _description_. Defaults to None.\n        tag (Optional[str], optional): _description_. Defaults to None.\n        data (Optional[DataFeed], optional): _description_. Defaults to None.\n\n    Returns:\n        OrderResult: _description_\n    \"\"\"\n    if not data:\n        data = self.data\n\n    if type == OrderType.Market:\n        limit = 0\n        stop = 0\n\n    order = self._order_cls(\n        id=-1,\n        exchange=self,\n        data=data,\n        size=size,\n        type=type,\n        limit_price=limit,\n        stop_price=stop,\n        sl_price=sl,\n        tp_price=tp,\n        tag=tag,\n    )\n    ok = order.place()\n\n    # if __debug__:\n    #     logger.info(\"New order %s at %s\", order, self.data.now)\n\n    return ok\n</code></pre>"},{"location":"reference/exchange/live/exchange/#lettrade.exchange.live.exchange.LiveExchange.next_next","title":"next_next","text":"<pre><code>next_next()\n</code></pre> <p>Call after strategy.next()</p> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def next_next(self):\n    \"Call after strategy.next()\"\n    self._account._equity_snapshot()\n</code></pre>"},{"location":"reference/exchange/live/exchange/#lettrade.exchange.live.exchange.LiveExchange.on_execution","title":"on_execution","text":"<pre><code>on_execution(\n    execution: Execution,\n    broadcast: Optional[bool] = True,\n    **kwargs\n) -&gt; None\n</code></pre> <p>Receive Execution event from exchange then store and notify Brain</p> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def on_execution(\n    self,\n    execution: Execution,\n    broadcast: Optional[bool] = True,\n    **kwargs,\n) -&gt; None:\n    \"\"\"\n    Receive Execution event from exchange then store and notify Brain\n    \"\"\"\n    if self.executions is None:\n        logger.warning(\n            \"Execution transaction is disable, enable by flag: show_execution=True\"\n        )\n        return\n\n    if not isinstance(execution, Execution):\n        raise RuntimeError(f\"{execution} is not instance of type Execution\")\n\n    if execution.id in self.executions:\n        # Merge to keep Execution handler for strategy using\n        # when strategy want to store Execution object\n        # and object will be automatic update directly\n        self.executions[execution.id].merge(execution)\n        execution = self.executions[execution.id]\n    else:\n        self.executions[execution.id] = execution\n\n    if self._state != ExchangeState.Run:\n        return\n\n    if broadcast:\n        self._brain.on_execution(execution)\n</code></pre>"},{"location":"reference/exchange/live/exchange/#lettrade.exchange.live.exchange.LiveExchange.on_order","title":"on_order","text":"<pre><code>on_order(\n    order: Order, broadcast: Optional[bool] = True, **kwargs\n) -&gt; None\n</code></pre> <p>Receive Order event from exchange then store and notify Brain</p> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def on_order(\n    self,\n    order: Order,\n    broadcast: Optional[bool] = True,\n    **kwargs,\n) -&gt; None:\n    \"\"\"\n    Receive Order event from exchange then store and notify Brain\n    \"\"\"\n    if not isinstance(order, Order):\n        raise RuntimeError(f\"{order} is not instance of type Order\")\n\n    if order.state in [OrderState.Filled, OrderState.Canceled]:\n        self.history_orders[order.id] = order\n        if order.id in self.orders:\n            del self.orders[order.id]\n    else:\n        if order.id in self.history_orders:\n            raise RuntimeError(f\"Order {order.id} closed\")\n\n        if order.id in self.orders:\n            # Merge to keep Order handler for strategy using\n            # when strategy want to store Order object\n            # and object will be automatic update directly\n            self.orders[order.id].merge(order)\n            order = self.orders[order.id]\n        else:\n            self.orders[order.id] = order\n\n    if self._state != ExchangeState.Run:\n        return\n\n    if broadcast:\n        self._brain.on_order(order)\n</code></pre>"},{"location":"reference/exchange/live/exchange/#lettrade.exchange.live.exchange.LiveExchange.on_position","title":"on_position","text":"<pre><code>on_position(\n    position: Position,\n    broadcast: Optional[bool] = True,\n    *args,\n    **kwargs\n) -&gt; None\n</code></pre> <p>Receive Position event from exchange then store and notify Brain</p> <p>Parameters:</p> <ul> <li> <code>position</code>               (<code>Position</code>)           \u2013            <p>new comming <code>Position</code></p> </li> <li> <code>broadcast</code>               (<code>Optional[bool]</code>, default:                   <code>True</code> )           \u2013            <p>Flag notify for Brain. Defaults to True.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>validat <code>Position</code> instance</p> </li> </ul> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def on_position(\n    self,\n    position: Position,\n    broadcast: Optional[bool] = True,\n    *args,\n    **kwargs,\n) -&gt; None:\n    \"\"\"Receive Position event from exchange then store and notify Brain\n\n    Args:\n        position (Position): new comming `Position`\n        broadcast (Optional[bool], optional): Flag notify for Brain. Defaults to True.\n\n    Raises:\n        RuntimeError: validat `Position` instance\n    \"\"\"\n    if not isinstance(position, Position):\n        raise RuntimeError(f\"{position} is not instance of type Position\")\n\n    if position.state == PositionState.Exit:\n        self.history_positions[position.id] = position\n        if position.id in self.positions:\n            del self.positions[position.id]\n\n        self._account._on_position_exit(position)\n    else:\n        if position.id in self.history_positions:\n            raise RuntimeError(f\"Order {position.id} closed\")\n        if position.id in self.positions:\n            # Merge to keep Position handler for strategy using\n            # when strategy want to store Position object\n            # and object will be automatic update directly\n            self.positions[position.id].merge(position)\n            position = self.positions[position.id]\n        else:\n            self.positions[position.id] = position\n            self._account._on_position_entry(position)\n\n    if self._state != ExchangeState.Run:\n        return\n\n    if broadcast:\n        self._brain.on_position(position)\n</code></pre>"},{"location":"reference/exchange/live/exchange/#lettrade.exchange.live.exchange.LiveExchange.start","title":"start","text":"<pre><code>start() -&gt; None\n</code></pre> <p>Start Live exchange by: Sync positions from server</p> Source code in <code>lettrade/exchange/live/exchange.py</code> <pre><code>def start(self) -&gt; None:\n    \"\"\"Start Live exchange by: Sync positions from server\"\"\"\n    self._api.start(exchange=self)\n    return super().start()\n</code></pre>"},{"location":"reference/exchange/live/exchange/#lettrade.exchange.live.exchange.LiveExchange.stop","title":"stop","text":"<pre><code>stop() -&gt; None\n</code></pre> <p>Stop Exchange</p> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def stop(self) -&gt; None:\n    \"\"\"Stop Exchange\"\"\"\n    self._state = ExchangeState.Stop\n    self._account.stop()\n</code></pre>"},{"location":"reference/exchange/live/feeder/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> feeder","text":""},{"location":"reference/exchange/live/feeder/#lettrade.exchange.live.feeder","title":"feeder","text":""},{"location":"reference/exchange/live/feeder/#lettrade.exchange.live.feeder.LiveDataFeeder","title":"LiveDataFeeder","text":"<pre><code>LiveDataFeeder(\n    api: LiveAPI,\n    tick: bool = 5,\n    start_size: int = 500,\n    **kwargs\n)\n</code></pre> <p>               Bases: <code>DataFeeder</code></p> <pre><code>tick == 0: wait until new bar change value\ntick &gt; 0: sleep tick time (in seconds) then update\n</code></pre> Source code in <code>lettrade/exchange/live/feeder.py</code> <pre><code>def __init__(\n    self,\n    api: LiveAPI,\n    tick: bool = 5,\n    start_size: int = 500,\n    **kwargs,\n) -&gt; None:\n    \"\"\"\n    tick:\n        tick &lt; 0: no tick, just get completed bar\n        tick == 0: wait until new bar change value\n        tick &gt; 0: sleep tick time (in seconds) then update\n    \"\"\"\n    super().__init__()\n    self._api = api\n    self._tick = tick\n    self._start_size = start_size\n    self._config = kwargs\n\n    if isinstance(self._tick, int):\n        self._wait_timeframe = TimeFrame(f\"{self._tick}s\")\n    else:\n        self._wait_timeframe = None\n</code></pre>"},{"location":"reference/exchange/live/feeder/#lettrade.exchange.live.feeder.LiveDataFeeder.is_continous","title":"is_continous  <code>property</code>","text":"<pre><code>is_continous\n</code></pre> <p>Flag check is realtime continous datafeeder</p>"},{"location":"reference/exchange/live/feeder/#lettrade.exchange.live.feeder.LiveDataFeeder.instance","title":"instance  <code>classmethod</code>","text":"<pre><code>instance(\n    api: Optional[LiveAPI] = None,\n    api_kwargs: Optional[dict] = None,\n    **kwargs\n) -&gt; LiveDataFeed\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>api</code>               (<code>LiveAPI</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>api_kwargs</code>               (<code>dict</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>Missing api requirement</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>LiveDataFeed</code> (              <code>LiveDataFeed</code> )          \u2013            <p>DataFeed object</p> </li> </ul> Source code in <code>lettrade/exchange/live/feeder.py</code> <pre><code>@classmethod\ndef instance(\n    cls,\n    api: Optional[LiveAPI] = None,\n    api_kwargs: Optional[dict] = None,\n    **kwargs,\n) -&gt; \"LiveDataFeed\":\n    \"\"\"_summary_\n\n    Args:\n        api (LiveAPI, optional): _description_. Defaults to None.\n        api_kwargs (dict, optional): _description_. Defaults to None.\n\n    Raises:\n        RuntimeError: Missing api requirement\n\n    Returns:\n        LiveDataFeed: DataFeed object\n    \"\"\"\n    if api is None:\n        if api_kwargs is None:\n            raise RuntimeError(\"api or api_kwargs cannot missing\")\n        api = cls._api_cls(**api_kwargs)\n    obj = cls(api=api, **kwargs)\n    return obj\n</code></pre>"},{"location":"reference/exchange/live/live/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> live","text":""},{"location":"reference/exchange/live/live/#lettrade.exchange.live.live","title":"live","text":""},{"location":"reference/exchange/live/live/#lettrade.exchange.live.live.LetTradeLive","title":"LetTradeLive","text":"<pre><code>LetTradeLive(\n    strategy: Type[Strategy],\n    datas: DataFeed | list[DataFeed] | str | list[str],\n    feeder: Type[DataFeeder],\n    exchange: Type[Exchange],\n    account: Type[Account],\n    commander: Optional[Type[Commander]] = None,\n    plotter: Optional[Type[Plotter]] = None,\n    stats: Optional[Type[BotStatistic]] = None,\n    name: Optional[str] = None,\n    bot: Optional[Type[LetTradeBot]] = LetTradeBot,\n    **kwargs\n)\n</code></pre> <p>               Bases: <code>LetTrade</code></p> <p>Help to maintain live bots</p> Source code in <code>lettrade/lettrade.py</code> <pre><code>def __init__(\n    self,\n    strategy: Type[Strategy],\n    datas: DataFeed | list[DataFeed] | str | list[str],\n    feeder: Type[DataFeeder],\n    exchange: Type[Exchange],\n    account: Type[Account],\n    commander: Optional[Type[Commander]] = None,\n    plotter: Optional[Type[Plotter]] = None,\n    stats: Optional[Type[BotStatistic]] = None,\n    name: Optional[str] = None,\n    bot: Optional[Type[LetTradeBot]] = LetTradeBot,\n    **kwargs,\n) -&gt; None:\n    self._kwargs = kwargs\n    self._kwargs[\"strategy_cls\"] = strategy\n    self._kwargs[\"feeder_cls\"] = feeder\n    self._kwargs[\"exchange_cls\"] = exchange\n    self._kwargs[\"account_cls\"] = account\n    self._kwargs[\"commander_cls\"] = commander\n    self._kwargs[\"plotter_cls\"] = plotter\n    self._kwargs[\"stats_cls\"] = stats\n    self._kwargs[\"bot_cls\"] = bot\n    self._kwargs[\"name\"] = name\n\n    self._kwargs[\"datas\"] = self._init_datafeeds(datas)\n</code></pre>"},{"location":"reference/exchange/live/live/#lettrade.exchange.live.live.LetTradeLive.plot","title":"plot","text":"<pre><code>plot(*args, jump: Optional[dict] = None, **kwargs)\n</code></pre> <p>Plot strategy/optimize result</p> BotPlotter <p>Miror of BotPlotter.plot(). Plotly implement PlotlyBotPlotter.plot().</p> <p>Args:     <code>jump</code> (Optional[dict], optional): Miror of BotPlotter.jump()</p> <p>Example:     - Jump to position_id         <pre><code>lt.plot(\n    jump=dict(position_id=1, range=300),\n    layout=dict(height=2000),\n)\n</code></pre></p> OptimizePlotter <p>Miror of OptimizePlotter.plot(). Plotly implement PlotlyOptimizePlotter.plot().</p> <p>Example:     -         <pre><code>lt.plot(layout=dict(height=2000))\n</code></pre></p> Source code in <code>lettrade/lettrade.py</code> <pre><code>def plot(self, *args, jump: Optional[dict] = None, **kwargs):\n    \"\"\"Plot strategy/optimize result\n\n    BotPlotter:\n        Miror of [BotPlotter.plot()](site:/reference/plot/bot/#lettrade.plot.bot.BotPlotter.plot).\n        Plotly implement [PlotlyBotPlotter.plot()](site:/reference/plot/plotly/plotly/#lettrade.plot.plotly.plotly.PlotlyBotPlotter.plot).\n\n        Args:\n            `jump` (Optional[dict], optional): Miror of [BotPlotter.jump()](site:/reference/plot/bot/#lettrade.plot.bot.BotPlotter.jump)\n\n        Example:\n            - Jump to position_id\n                ```python\n                lt.plot(\n                    jump=dict(position_id=1, range=300),\n                    layout=dict(height=2000),\n                )\n                ```\n\n    OptimizePlotter:\n        Miror of [OptimizePlotter.plot()](site:/reference/plot/optimize/#lettrade.plot.optimize.OptimizePlotter.plot).\n        Plotly implement [PlotlyOptimizePlotter.plot()](site:/reference/exchange/backtest/plotly/optimize/#lettrade.exchange.backtest.plotly.optimize.PlotlyOptimizePlotter.plot).\n\n        Example:\n            -\n                ```python\n                lt.plot(layout=dict(height=2000))\n                ```\n    \"\"\"\n    if __debug__:\n        from .utils.docs import is_docs_session\n\n        if is_docs_session():\n            return\n\n    self.plotter.plot(*args, jump=jump, **kwargs)\n</code></pre>"},{"location":"reference/exchange/live/live/#lettrade.exchange.live.live.LetTradeLive.run","title":"run","text":"<pre><code>run(worker: Optional[int] = None, **kwargs)\n</code></pre> <p>Run strategy in single or multiple processing</p> <p>Parameters:</p> <ul> <li> <code>worker</code>               (<code>Optional[int]</code>, default:                   <code>None</code> )           \u2013            <p>Number of processing. Defaults to None.</p> </li> </ul> Source code in <code>lettrade/lettrade.py</code> <pre><code>def run(self, worker: Optional[int] = None, **kwargs):\n    \"\"\"Run strategy in single or multiple processing\n\n    Args:\n        worker (Optional[int], optional): Number of processing. Defaults to None.\n    \"\"\"\n    if worker or isinstance(self.data, list):\n        if not isinstance(self.data, list):\n            # self.data = self.datas\n            self.datas = [self.data]\n\n        worker = self._max_workers(worker)\n\n        self._multiprocess()\n\n        datas_source = self._kwargs.pop(\"datas\")\n        with ProcessPoolExecutor(max_workers=worker) as executor:\n            futures = [\n                executor.submit(\n                    self._bot_cls.run_bot,\n                    datas=datas,\n                    id=i,\n                    result=\"str\",\n                    **self._kwargs,\n                )\n                for i, datas in enumerate(datas_source)\n            ]\n            for future in futures:\n                result = future.result()\n                print(result)\n    else:\n        self._bot = self._bot_cls.run_bot(\n            bot=self._bot,\n            result=\"bot\",\n            **self._kwargs,\n        )\n        print(str(self._bot.stats))\n</code></pre>"},{"location":"reference/exchange/live/live/#lettrade.exchange.live.live.LetTradeLive.stop","title":"stop","text":"<pre><code>stop()\n</code></pre> <p>Stop strategy</p> Source code in <code>lettrade/lettrade.py</code> <pre><code>def stop(self):\n    \"\"\"Stop strategy\"\"\"\n    if self._bot is not None:\n        return self._bot.stop()\n    if self.stats:\n        self.stats.stop()\n</code></pre>"},{"location":"reference/exchange/live/live/#lettrade.exchange.live.live.let_live","title":"let_live","text":"<pre><code>let_live(\n    strategy: Type[Strategy],\n    datas: set[set[str]],\n    commander: Optional[Commander] = None,\n    plotter: Optional[Type[Plotter]] = None,\n    stats: Optional[Type[BotStatistic]] = BotStatistic,\n    lettrade: Optional[Type[LetTradeLive]] = LetTradeLive,\n    bot: Optional[Type[LetTradeLiveBot]] = LetTradeLiveBot,\n    api: Optional[Type[LiveAPI]] = LiveAPI,\n    **kwargs\n) -&gt; LetTradeLive\n</code></pre> <p>Help to build <code>LetTradeLive</code></p> <p>Parameters:</p> <ul> <li> <code>strategy</code>               (<code>Type[Strategy]</code>)           \u2013            <p>description</p> </li> <li> <code>datas</code>               (<code>set[set[str]]</code>)           \u2013            <p>description</p> </li> <li> <code>commander</code>               (<code>Optional[Commander]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>plotter</code>               (<code>Optional[Type[Plotter]]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>stats</code>               (<code>Optional[Type[BotStatistic]]</code>, default:                   <code>BotStatistic</code> )           \u2013            <p>description. Defaults to BotStatistic.</p> </li> <li> <code>api</code>               (<code>Optional[Type[LiveAPI]]</code>, default:                   <code>LiveAPI</code> )           \u2013            <p>description. Defaults to LiveAPI.</p> </li> <li> <code>bot</code>               (<code>Optional[Type[LetTradeLiveBot]]</code>, default:                   <code>LetTradeLiveBot</code> )           \u2013            <p>description. Defaults to LetTradeLiveBot.</p> </li> <li> <code>lettrade</code>               (<code>Optional[Type[LetTradeLive]]</code>, default:                   <code>LetTradeLive</code> )           \u2013            <p>description. Defaults to LetTradeLive.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>LetTradeLive</code> (              <code>LetTradeLive</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/live/live.py</code> <pre><code>def let_live(\n    strategy: Type[Strategy],\n    datas: set[set[str]],\n    commander: Optional[Commander] = None,\n    plotter: Optional[Type[Plotter]] = None,\n    stats: Optional[Type[BotStatistic]] = BotStatistic,\n    lettrade: Optional[Type[LetTradeLive]] = LetTradeLive,\n    bot: Optional[Type[LetTradeLiveBot]] = LetTradeLiveBot,\n    api: Optional[Type[LiveAPI]] = LiveAPI,\n    **kwargs,\n) -&gt; \"LetTradeLive\":\n    \"\"\"Help to build `LetTradeLive`\n\n    Args:\n        strategy (Type[Strategy]): _description_\n        datas (set[set[str]]): _description_\n        commander (Optional[Commander], optional): _description_. Defaults to None.\n        plotter (Optional[Type[Plotter]], optional): _description_. Defaults to None.\n        stats (Optional[Type[BotStatistic]], optional): _description_. Defaults to BotStatistic.\n        api (Optional[Type[LiveAPI]], optional): _description_. Defaults to LiveAPI.\n        bot (Optional[Type[LetTradeLiveBot]], optional): _description_. Defaults to LetTradeLiveBot.\n        lettrade (Optional[Type[LetTradeLive]], optional): _description_. Defaults to LetTradeLive.\n\n    Returns:\n        LetTradeLive: _description_\n    \"\"\"\n    return lettrade(\n        strategy=strategy,\n        datas=datas,\n        commander=commander,\n        plotter=plotter,\n        stats=stats,\n        bot=bot,\n        api=api,\n        **kwargs,\n    )\n</code></pre>"},{"location":"reference/exchange/live/trade/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> trade","text":""},{"location":"reference/exchange/live/trade/#lettrade.exchange.live.trade","title":"trade","text":""},{"location":"reference/exchange/live/trade/#lettrade.exchange.live.trade.LiveExecution","title":"LiveExecution","text":"<pre><code>LiveExecution(\n    id: str,\n    exchange: LiveExchange,\n    data: DataFeed,\n    size: float,\n    price: float,\n    at: float,\n    order_id: Optional[str] = None,\n    order: Optional[Order] = None,\n    position_id: Optional[str] = None,\n    position: Optional[Position] = None,\n    api: Optional[LiveAPI] = None,\n    raw: Optional[object] = None,\n    **kwargs\n)\n</code></pre> <p>               Bases: <code>_LiveTrade</code>, <code>Execution</code></p> <p>Execution for Live</p> Source code in <code>lettrade/exchange/live/trade.py</code> <pre><code>def __init__(\n    self,\n    id: str,\n    exchange: \"LiveExchange\",\n    data: \"DataFeed\",\n    size: float,\n    price: float,\n    at: float,\n    order_id: Optional[str] = None,\n    order: Optional[\"Order\"] = None,\n    position_id: Optional[str] = None,\n    position: Optional[\"Position\"] = None,\n    # tag: Optional[str] = \"\",\n    api: Optional[LiveAPI] = None,\n    raw: Optional[object] = None,\n    **kwargs,\n):\n    super().__init__(\n        id=id,\n        exchange=exchange,\n        data=data,\n        size=size,\n        price=price,\n        at=at,\n        order_id=order_id,\n        order=order,\n        position_id=position_id,\n        position=position,\n        api=api,\n        raw=raw,\n        **kwargs,\n    )\n</code></pre>"},{"location":"reference/exchange/live/trade/#lettrade.exchange.live.trade.LiveExecution.is_long","title":"is_long  <code>property</code>","text":"<pre><code>is_long: bool\n</code></pre> <p>True if side is long (size is positive).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True/False</p> </li> </ul>"},{"location":"reference/exchange/live/trade/#lettrade.exchange.live.trade.LiveExecution.is_short","title":"is_short  <code>property</code>","text":"<pre><code>is_short: bool\n</code></pre> <p>True if side is short (size is negative).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/live/trade/#lettrade.exchange.live.trade.LiveExecution.side","title":"side  <code>property</code>","text":"<pre><code>side: TradeSide\n</code></pre> <p>True if side is short (size is negative).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>TradeSide</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/live/trade/#lettrade.exchange.live.trade.LiveExecution.from_raw","title":"from_raw  <code>classmethod</code>","text":"<pre><code>from_raw(raw, exchange: LiveExchange) -&gt; LiveExecution\n</code></pre> <p>Building new LiveExecution from live api raw object</p> <p>Parameters:</p> <ul> <li> <code>raw</code>               (<code>_type_</code>)           \u2013            <p>description</p> </li> <li> <code>exchange</code>               (<code>LiveExchange</code>)           \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>LiveExecution</code> (              <code>LiveExecution</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/live/trade.py</code> <pre><code>@classmethod\ndef from_raw(cls, raw, exchange: \"LiveExchange\") -&gt; \"LiveExecution\":\n    \"\"\"Building new LiveExecution from live api raw object\n\n    Args:\n        raw (_type_): _description_\n        exchange (LiveExchange): _description_\n\n    Returns:\n        LiveExecution: _description_\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/exchange/live/trade/#lettrade.exchange.live.trade.LiveExecution.merge","title":"merge","text":"<pre><code>merge(other: Execution)\n</code></pre> <p>Merge to keep object handler but not overwrite for Strategy using when Strategy want to store object and object will be automatic update directly</p> Source code in <code>lettrade/exchange/execution.py</code> <pre><code>def merge(self, other: \"Execution\"):\n    \"\"\"\n    Merge to keep object handler but not overwrite for Strategy using when Strategy want to store object and object will be automatic update directly\n    \"\"\"\n    if other is self:\n        return\n\n    if self.id != other.id:\n        raise RuntimeError(f\"Merge difference id {self.id} != {other.id} execution\")\n\n    self.price = other.price\n    self.size = other.size\n\n    if other.at:\n        self.at = other.at\n    if other.order_id:\n        self.order_id = other.order_id\n    if other.order:\n        self.order = other.order\n    if other.position_id:\n        self.position_id = other.position_id\n    if other.position:\n        self.position = other.position\n</code></pre>"},{"location":"reference/exchange/live/trade/#lettrade.exchange.live.trade.LiveOrder","title":"LiveOrder","text":"<pre><code>LiveOrder(\n    id: str,\n    exchange: LiveExchange,\n    data: DataFeed,\n    size: float,\n    state: OrderState = OrderState.Pending,\n    type: OrderType = OrderType.Market,\n    limit_price: Optional[float] = None,\n    stop_price: Optional[float] = None,\n    sl_price: Optional[float] = None,\n    tp_price: Optional[float] = None,\n    parent: Optional[Position] = None,\n    tag: Optional[str] = \"\",\n    api: Optional[LiveAPI] = None,\n    raw: Optional[object] = None,\n    **kwargs\n)\n</code></pre> <p>               Bases: <code>_LiveTrade</code>, <code>Order</code></p> Source code in <code>lettrade/exchange/live/trade.py</code> <pre><code>def __init__(\n    self,\n    id: str,\n    exchange: \"LiveExchange\",\n    data: \"DataFeed\",\n    size: float,\n    state: OrderState = OrderState.Pending,\n    type: OrderType = OrderType.Market,\n    limit_price: Optional[float] = None,\n    stop_price: Optional[float] = None,\n    sl_price: Optional[float] = None,\n    tp_price: Optional[float] = None,\n    parent: Optional[\"Position\"] = None,\n    tag: Optional[str] = \"\",\n    api: Optional[LiveAPI] = None,\n    raw: Optional[object] = None,\n    **kwargs,\n):\n    super().__init__(\n        id=id,\n        exchange=exchange,\n        data=data,\n        size=size,\n        state=state,\n        type=type,\n        limit_price=limit_price,\n        stop_price=stop_price,\n        sl_price=sl_price,\n        tp_price=tp_price,\n        parent=parent,\n        tag=tag,\n        api=api,\n        raw=raw,\n        **kwargs,\n    )\n</code></pre>"},{"location":"reference/exchange/live/trade/#lettrade.exchange.live.trade.LiveOrder.is_closed","title":"is_closed  <code>property</code>","text":"<pre><code>is_closed: bool\n</code></pre> <p>Flag to check <code>Order</code> closed</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True if <code>state</code> in [OrderState.Filled, OrderState.Canceled]</p> </li> </ul>"},{"location":"reference/exchange/live/trade/#lettrade.exchange.live.trade.LiveOrder.is_long","title":"is_long  <code>property</code>","text":"<pre><code>is_long: bool\n</code></pre> <p>True if side is long (size is positive).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True/False</p> </li> </ul>"},{"location":"reference/exchange/live/trade/#lettrade.exchange.live.trade.LiveOrder.is_opening","title":"is_opening  <code>property</code>","text":"<pre><code>is_opening: bool\n</code></pre> <p>Flag to check <code>Order</code> still alive</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True if <code>state</code> in [OrderState.Pending, OrderState.Placed, OrderState.Partial]</p> </li> </ul>"},{"location":"reference/exchange/live/trade/#lettrade.exchange.live.trade.LiveOrder.is_short","title":"is_short  <code>property</code>","text":"<pre><code>is_short: bool\n</code></pre> <p>True if side is short (size is negative).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/live/trade/#lettrade.exchange.live.trade.LiveOrder.is_sl_order","title":"is_sl_order  <code>property</code>","text":"<pre><code>is_sl_order: bool\n</code></pre> <p><code>Order</code> is stop-loss order of a <code>Position</code></p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/live/trade/#lettrade.exchange.live.trade.LiveOrder.is_tp_order","title":"is_tp_order  <code>property</code>","text":"<pre><code>is_tp_order: bool\n</code></pre> <p><code>Order</code> is take-profit order of a <code>Position</code></p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/live/trade/#lettrade.exchange.live.trade.LiveOrder.limit","title":"limit  <code>property</code>","text":"<pre><code>limit: Optional[float]\n</code></pre> <p>Getter of limit_price</p> <p>Returns:</p> <ul> <li> <code>Optional[float]</code>           \u2013            <p>Optional[float]: <code>float</code> or <code>None</code></p> </li> </ul>"},{"location":"reference/exchange/live/trade/#lettrade.exchange.live.trade.LiveOrder.place_price","title":"place_price  <code>property</code>","text":"<pre><code>place_price: Optional[float]\n</code></pre> <p>Getter of place_price</p> <p>Returns:</p> <ul> <li> <code>Optional[float]</code>           \u2013            <p>Optional[float]: <code>float</code> or <code>None</code></p> </li> </ul>"},{"location":"reference/exchange/live/trade/#lettrade.exchange.live.trade.LiveOrder.side","title":"side  <code>property</code>","text":"<pre><code>side: TradeSide\n</code></pre> <p>True if side is short (size is negative).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>TradeSide</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/live/trade/#lettrade.exchange.live.trade.LiveOrder.sl","title":"sl  <code>property</code>","text":"<pre><code>sl: Optional[float]\n</code></pre> <p>Getter of sl_price</p> <p>Returns:</p> <ul> <li> <code>Optional[float]</code>           \u2013            <p>Optional[float]: <code>float</code> or <code>None</code></p> </li> </ul>"},{"location":"reference/exchange/live/trade/#lettrade.exchange.live.trade.LiveOrder.stop","title":"stop  <code>property</code>","text":"<pre><code>stop: Optional[float]\n</code></pre> <p>Getter of stop_price</p> <p>Returns:</p> <ul> <li> <code>Optional[float]</code>           \u2013            <p>Optional[float]: <code>float</code> or <code>None</code></p> </li> </ul>"},{"location":"reference/exchange/live/trade/#lettrade.exchange.live.trade.LiveOrder.tp","title":"tp  <code>property</code>","text":"<pre><code>tp: Optional[float]\n</code></pre> <p>Getter of tp_price</p> <p>Returns:</p> <ul> <li> <code>Optional[float]</code>           \u2013            <p>Optional[float]: <code>float</code> or <code>None</code></p> </li> </ul>"},{"location":"reference/exchange/live/trade/#lettrade.exchange.live.trade.LiveOrder.fill","title":"fill","text":"<pre><code>fill(price: float, at: Timestamp) -&gt; OrderResult\n</code></pre> <p>Fill <code>Order</code>. Set <code>status</code> to <code>OrderState.Executed</code>. Send event to <code>Exchange</code></p> <p>Parameters:</p> <ul> <li> <code>price</code>               (<code>float</code>)           \u2013            <p>Executed price</p> </li> <li> <code>at</code>               (<code>Timestamp</code>)           \u2013            <p>Executed bar</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>OrderResult</code> (              <code>OrderResult</code> )          \u2013            <p>result of <code>Order</code></p> </li> </ul> Source code in <code>lettrade/exchange/order.py</code> <pre><code>def fill(self, price: float, at: pd.Timestamp) -&gt; \"OrderResult\":\n    \"\"\"Fill `Order`.\n    Set `status` to `OrderState.Executed`.\n    Send event to `Exchange`\n\n    Args:\n        price (float): Executed price\n        at (pd.Timestamp): Executed bar\n\n    Raises:\n        RuntimeError: _description_\n\n    Returns:\n        OrderResult: result of `Order`\n    \"\"\"\n    if self.state != OrderState.Placed:\n        raise RuntimeError(f\"Order {self.id} state {self.state} is not Placed\")\n\n    self.filled_at = at\n    self.filled_price = price\n    self.state = OrderState.Filled\n    self.exchange.on_order(self)\n    return OrderResultOk(order=self)\n</code></pre>"},{"location":"reference/exchange/live/trade/#lettrade.exchange.live.trade.LiveOrder.from_position","title":"from_position  <code>abstractmethod</code> <code>classmethod</code>","text":"<pre><code>from_position(\n    position: LivePosition, sl=None, tp=None\n) -&gt; LiveOrder\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>position</code>               (<code>LivePosition</code>)           \u2013            <p>description</p> </li> <li> <code>sl</code>               (<code>_type_</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>tp</code>               (<code>_type_</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>LiveOrder</code> (              <code>LiveOrder</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/live/trade.py</code> <pre><code>@classmethod\n@abstractmethod\ndef from_position(cls, position: \"LivePosition\", sl=None, tp=None) -&gt; \"LiveOrder\":\n    \"\"\"_summary_\n\n    Args:\n        position (LivePosition): _description_\n        sl (_type_, optional): _description_. Defaults to None.\n        tp (_type_, optional): _description_. Defaults to None.\n\n    Returns:\n        LiveOrder: _description_\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/exchange/live/trade/#lettrade.exchange.live.trade.LiveOrder.from_raw","title":"from_raw  <code>abstractmethod</code> <code>classmethod</code>","text":"<pre><code>from_raw(raw, exchange: LiveExchange) -&gt; LiveOrder\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>raw</code>               (<code>_type_</code>)           \u2013            <p>description</p> </li> <li> <code>exchange</code>               (<code>LiveExchange</code>)           \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>LiveOrder</code> (              <code>LiveOrder</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/live/trade.py</code> <pre><code>@classmethod\n@abstractmethod\ndef from_raw(cls, raw, exchange: \"LiveExchange\") -&gt; \"LiveOrder\":\n    \"\"\"_summary_\n\n    Args:\n        raw (_type_): _description_\n        exchange (LiveExchange): _description_\n\n    Returns:\n        LiveOrder: _description_\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/exchange/live/trade/#lettrade.exchange.live.trade.LiveOrder.merge","title":"merge","text":"<pre><code>merge(other: Order)\n</code></pre> <p>Update current <code>Order</code> variables by other <code>Order</code></p> <p>Parameters:</p> <ul> <li> <code>other</code>               (<code>Order</code>)           \u2013            <p>Merge source <code>Order</code></p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>Validate same id</p> </li> </ul> Source code in <code>lettrade/exchange/order.py</code> <pre><code>def merge(self, other: \"Order\"):\n    \"\"\"Update current `Order` variables by other `Order`\n\n    Args:\n        other (Order): Merge source `Order`\n\n    Raises:\n        RuntimeError: Validate same id\n    \"\"\"\n    if other is self:\n        return\n\n    if self.id != other.id:\n        raise RuntimeError(f\"Merge difference id {self.id} != {other.id} order\")\n\n    self.size = other.size\n    self.sl_price = other.sl_price\n    self.tp_price = other.tp_price\n\n    if other.limit_price:\n        self.limit_price = other.limit_price\n    if other.stop_price:\n        self.stop_price = other.stop_price\n    if other.placed_at:\n        self.placed_at = other.placed_at\n\n    if other.filled_price:\n        self.filled_price = other.filled_price\n    if other.filled_at:\n        self.filled_at = other.filled_at\n\n    if other.parent:\n        self.parent = other.parent\n</code></pre>"},{"location":"reference/exchange/live/trade/#lettrade.exchange.live.trade.LivePosition","title":"LivePosition","text":"<pre><code>LivePosition(\n    id: str,\n    exchange: LiveExchange,\n    data: DataFeed,\n    size: float,\n    parent: Order,\n    tag: str = \"\",\n    state: PositionState = PositionState.Open,\n    entry_price: Optional[float] = None,\n    entry_at: Optional[int] = None,\n    sl_order: Optional[Order] = None,\n    tp_order: Optional[Order] = None,\n    api: Optional[LiveAPI] = None,\n    raw: Optional[object] = None,\n    **kwargs\n)\n</code></pre> <p>               Bases: <code>_LiveTrade</code>, <code>Position</code></p> Source code in <code>lettrade/exchange/live/trade.py</code> <pre><code>def __init__(\n    self,\n    id: str,\n    exchange: \"LiveExchange\",\n    data: \"DataFeed\",\n    size: float,\n    parent: Order,\n    tag: str = \"\",\n    state: PositionState = PositionState.Open,\n    entry_price: Optional[float] = None,\n    entry_at: Optional[int] = None,\n    sl_order: Optional[Order] = None,\n    tp_order: Optional[Order] = None,\n    api: Optional[LiveAPI] = None,\n    raw: Optional[object] = None,\n    **kwargs,\n):\n    super().__init__(\n        id=id,\n        exchange=exchange,\n        data=data,\n        size=size,\n        parent=parent,\n        tag=tag,\n        state=state,\n        entry_price=entry_price,\n        entry_at=entry_at,\n        sl_order=sl_order,\n        tp_order=tp_order,\n        api=api,\n        raw=raw,\n        **kwargs,\n    )\n</code></pre>"},{"location":"reference/exchange/live/trade/#lettrade.exchange.live.trade.LivePosition.fee","title":"fee  <code>property</code>","text":"<pre><code>fee: float\n</code></pre> <p>Fee/Estimate Fee for trade</p> <p>Returns:</p> <ul> <li> <code>float</code> (              <code>float</code> )          \u2013            <p>Fee</p> </li> </ul>"},{"location":"reference/exchange/live/trade/#lettrade.exchange.live.trade.LivePosition.is_exited","title":"is_exited  <code>property</code>","text":"<pre><code>is_exited: bool\n</code></pre> <p>Flag to check Position state.</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True if the trade exited</p> </li> </ul>"},{"location":"reference/exchange/live/trade/#lettrade.exchange.live.trade.LivePosition.is_long","title":"is_long  <code>property</code>","text":"<pre><code>is_long: bool\n</code></pre> <p>True if side is long (size is positive).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True/False</p> </li> </ul>"},{"location":"reference/exchange/live/trade/#lettrade.exchange.live.trade.LivePosition.is_opening","title":"is_opening  <code>property</code>","text":"<pre><code>is_opening: bool\n</code></pre> <p>Flag to check Position state.</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True if the trade opening</p> </li> </ul>"},{"location":"reference/exchange/live/trade/#lettrade.exchange.live.trade.LivePosition.is_short","title":"is_short  <code>property</code>","text":"<pre><code>is_short: bool\n</code></pre> <p>True if side is short (size is negative).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/live/trade/#lettrade.exchange.live.trade.LivePosition.pl","title":"pl  <code>property</code>","text":"<pre><code>pl: float\n</code></pre> <p>Estimate Profit or Loss of Position</p> <p>Returns:</p> <ul> <li> <code>float</code> (              <code>float</code> )          \u2013            <p>PnL</p> </li> </ul>"},{"location":"reference/exchange/live/trade/#lettrade.exchange.live.trade.LivePosition.side","title":"side  <code>property</code>","text":"<pre><code>side: TradeSide\n</code></pre> <p>True if side is short (size is negative).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>TradeSide</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/live/trade/#lettrade.exchange.live.trade.LivePosition.from_raw","title":"from_raw  <code>abstractmethod</code> <code>classmethod</code>","text":"<pre><code>from_raw(raw, exchange: LiveExchange) -&gt; LivePosition\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>raw</code>               (<code>_type_</code>)           \u2013            <p>description</p> </li> <li> <code>exchange</code>               (<code>LiveExchange</code>)           \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>LivePosition</code> (              <code>LivePosition</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/live/trade.py</code> <pre><code>@classmethod\n@abstractmethod\ndef from_raw(cls, raw, exchange: \"LiveExchange\") -&gt; \"LivePosition\":\n    \"\"\"_summary_\n\n    Args:\n        raw (_type_): _description_\n        exchange (LiveExchange): _description_\n\n    Returns:\n        LivePosition: _description_\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/exchange/live/ccxt/","title":"Index","text":""},{"location":"reference/exchange/live/ccxt/#lettrade.exchange.live.ccxt","title":"ccxt","text":""},{"location":"reference/exchange/live/ccxt/api/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> api","text":""},{"location":"reference/exchange/live/ccxt/api/#lettrade.exchange.live.ccxt.api","title":"api","text":""},{"location":"reference/exchange/live/ccxt/api/#lettrade.exchange.live.ccxt.api.CCXTAPI","title":"CCXTAPI","text":"<pre><code>CCXTAPI(\n    exchange: int,\n    key: str,\n    secret: str,\n    ccxt: Optional[CCXTAPIExchange] = None,\n    **kwargs\n)\n</code></pre> <p>               Bases: <code>LiveAPI</code></p> Source code in <code>lettrade/exchange/live/ccxt/api.py</code> <pre><code>def __init__(\n    self,\n    exchange: int,\n    key: str,\n    secret: str,\n    ccxt: Optional[CCXTAPIExchange] = None,\n    **kwargs,\n):\n    # Start wine server if not inited\n    if ccxt is None:\n        ccxt = CCXTAPIExchange(exchange=exchange, key=key, secret=secret, **kwargs)\n    self._ccxt = ccxt\n</code></pre>"},{"location":"reference/exchange/live/ccxt/api/#lettrade.exchange.live.ccxt.api.CCXTAPI.account","title":"account","text":"<pre><code>account()\n</code></pre> Source code in <code>lettrade/exchange/live/ccxt/api.py</code> <pre><code>def account(self):\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/live/ccxt/api/#lettrade.exchange.live.ccxt.api.CCXTAPI.init","title":"init","text":"<pre><code>init(**kwargs)\n</code></pre> Source code in <code>lettrade/exchange/live/api.py</code> <pre><code>def init(self, **kwargs):\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/live/ccxt/api/#lettrade.exchange.live.ccxt.api.CCXTAPI.order_close","title":"order_close","text":"<pre><code>order_close(order: LiveOrder)\n</code></pre> Source code in <code>lettrade/exchange/live/ccxt/api.py</code> <pre><code>def order_close(self, order: LiveOrder):\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/live/ccxt/api/#lettrade.exchange.live.ccxt.api.CCXTAPI.order_open","title":"order_open","text":"<pre><code>order_open(order: LiveOrder)\n</code></pre> Source code in <code>lettrade/exchange/live/ccxt/api.py</code> <pre><code>def order_open(self, order: LiveOrder):\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/live/ccxt/api/#lettrade.exchange.live.ccxt.api.CCXTAPI.orders_get","title":"orders_get","text":"<pre><code>orders_get(**kwargs)\n</code></pre> Source code in <code>lettrade/exchange/live/ccxt/api.py</code> <pre><code>def orders_get(self, **kwargs):\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/live/ccxt/api/#lettrade.exchange.live.ccxt.api.CCXTAPI.orders_total","title":"orders_total","text":"<pre><code>orders_total()\n</code></pre> Source code in <code>lettrade/exchange/live/ccxt/api.py</code> <pre><code>def orders_total(self):\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/live/ccxt/api/#lettrade.exchange.live.ccxt.api.CCXTAPI.position_update","title":"position_update  <code>abstractmethod</code>","text":"<pre><code>position_update(\n    position: LivePosition, sl=None, tp=None, **kwargs\n)\n</code></pre> Source code in <code>lettrade/exchange/live/api.py</code> <pre><code>@abstractmethod\ndef position_update(self, position: \"LivePosition\", sl=None, tp=None, **kwargs):\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/live/ccxt/api/#lettrade.exchange.live.ccxt.api.CCXTAPI.positions_get","title":"positions_get","text":"<pre><code>positions_get(**kwargs)\n</code></pre> Source code in <code>lettrade/exchange/live/ccxt/api.py</code> <pre><code>def positions_get(self, **kwargs):\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/live/ccxt/api/#lettrade.exchange.live.ccxt.api.CCXTAPI.positions_total","title":"positions_total","text":"<pre><code>positions_total()\n</code></pre> Source code in <code>lettrade/exchange/live/ccxt/api.py</code> <pre><code>def positions_total(self):\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/live/ccxt/api/#lettrade.exchange.live.ccxt.api.CCXTAPI.stop","title":"stop","text":"<pre><code>stop()\n</code></pre> Source code in <code>lettrade/exchange/live/ccxt/api.py</code> <pre><code>def stop(self):\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/live/ccxt/api/#lettrade.exchange.live.ccxt.api.CCXTAPIExchange","title":"CCXTAPIExchange","text":"<pre><code>CCXTAPIExchange(\n    exchange: str,\n    key: str,\n    secret: str,\n    options: dict = {},\n    sandbox: bool = True,\n    debug=False,\n)\n</code></pre> <p>Single instance across multiprocessing. Help pickle-able result and send across multiprocessing</p> Source code in <code>lettrade/exchange/live/ccxt/api.py</code> <pre><code>def __init__(\n    self,\n    exchange: str,\n    key: str,\n    secret: str,\n    options: dict = {},\n    sandbox: bool = True,\n    debug=False,\n) -&gt; None:\n    config = dict(\n        apiKey=key,\n        secret=secret,\n        enableRateLimit=True,\n        options={\n            \"sandboxMode\": sandbox,\n            \"warnOnFetchOpenOrdersWithoutSymbol\": False,\n            \"tradesLimit\": 1,\n            \"ordersLimit\": 1,\n            \"OHLCVLimit\": 1,\n        },\n    )\n    config[\"options\"].update(options)\n\n    self._exchange = getattr(ccxt, exchange)(config)\n\n    # Must call sanbox function instead of option sandboxMode\n    self._exchange.set_sandbox_mode(sandbox)\n    self._exchange.verbose = debug\n    logger.info(\"Starting exchange class: %s\", self._exchange)\n</code></pre>"},{"location":"reference/exchange/live/ccxt/ccxt/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> ccxt","text":""},{"location":"reference/exchange/live/ccxt/ccxt/#lettrade.exchange.live.ccxt.ccxt","title":"ccxt","text":""},{"location":"reference/exchange/live/ccxt/ccxt/#lettrade.exchange.live.ccxt.ccxt.CCXTAccount","title":"CCXTAccount","text":"<pre><code>CCXTAccount(api: LiveAPI, **kwargs)\n</code></pre> <p>               Bases: <code>LiveAccount</code></p> <p>Account for CCXT</p> <p>Parameters:</p> <ul> <li> <code>api</code>               (<code>LiveAPI</code>)           \u2013            <p>description</p> </li> <li> <code>**kwargs</code>               (<code>dict</code>, default:                   <code>{}</code> )           \u2013            <p>Mirror of lettrade.account.Account().</p> </li> </ul> Source code in <code>lettrade/exchange/live/account.py</code> <pre><code>def __init__(self, api: LiveAPI, **kwargs) -&gt; None:\n    \"\"\"Account for live trading\n\n    Args:\n        api (LiveAPI): _description_\n        **kwargs (dict, optional): Mirror of [lettrade.account.Account()](site:/reference/account/account/#lettrade.account.account.Account).\n    \"\"\"\n    super().__init__(**kwargs)\n    self._api = api\n</code></pre>"},{"location":"reference/exchange/live/ccxt/ccxt/#lettrade.exchange.live.ccxt.ccxt.CCXTDataFeed","title":"CCXTDataFeed","text":"<pre><code>CCXTDataFeed(\n    symbol: str,\n    timeframe: str | int | Timedelta,\n    name: Optional[str] = None,\n    api: Optional[LiveAPI] = None,\n    **kwargs\n)\n</code></pre> <p>               Bases: <code>LiveDataFeed</code></p> <p>DataFeed for CCXT</p> Source code in <code>lettrade/exchange/live/data.py</code> <pre><code>def __init__(\n    self,\n    symbol: str,\n    timeframe: str | int | pd.Timedelta,\n    name: Optional[str] = None,\n    api: Optional[LiveAPI] = None,\n    **kwargs,\n) -&gt; None:\n    super().__init__(\n        name=name or f\"{symbol}_{timeframe}\",\n        timeframe=timeframe,\n        columns=[\"open\", \"high\", \"low\", \"close\", \"volume\"],\n        **kwargs,\n    )\n    self.meta.update(symbol=symbol)\n\n    if api is not None:\n        self._api = api\n</code></pre>"},{"location":"reference/exchange/live/ccxt/ccxt/#lettrade.exchange.live.ccxt.ccxt.CCXTDataFeed.bars","title":"bars","text":"<pre><code>bars(\n    since: int | str | Timestamp, to: int | str | Timestamp\n) -&gt; list\n</code></pre> <p>Get bars from LiveAPI</p> <p>Parameters:</p> <ul> <li> <code>since</code>               (<code>int | str | Timestamp</code>)           \u2013            <p>description</p> </li> <li> <code>to</code>               (<code>int | str | Timestamp</code>)           \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list</code> (              <code>list</code> )          \u2013            <p>list of bar</p> </li> </ul> Source code in <code>lettrade/exchange/live/data.py</code> <pre><code>def bars(\n    self,\n    since: int | str | pd.Timestamp,\n    to: int | str | pd.Timestamp,\n) -&gt; list:\n    \"\"\"Get bars from LiveAPI\n\n    Args:\n        since (int | str | pd.Timestamp): _description_\n        to (int | str | pd.Timestamp): _description_\n\n    Returns:\n        list: list of bar\n    \"\"\"\n    return self._api.bars(\n        symbol=self.symbol,\n        timeframe=self.timeframe.string,\n        since=since,\n        to=to,\n    )\n</code></pre>"},{"location":"reference/exchange/live/ccxt/ccxt/#lettrade.exchange.live.ccxt.ccxt.CCXTDataFeed.bars_load","title":"bars_load","text":"<pre><code>bars_load(\n    since: int | str | Timestamp, to: int | str | Timestamp\n) -&gt; bool\n</code></pre> <p>Get bar and push to DataFeed</p> <p>Parameters:</p> <ul> <li> <code>since</code>               (<code>int | str | Timestamp</code>)           \u2013            <p>description</p> </li> <li> <code>to</code>               (<code>int | str | Timestamp</code>)           \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True if has data, False if no data</p> </li> </ul> Source code in <code>lettrade/exchange/live/data.py</code> <pre><code>def bars_load(\n    self,\n    since: int | str | pd.Timestamp,\n    to: int | str | pd.Timestamp,\n) -&gt; bool:\n    \"\"\"Get bar and push to DataFeed\n\n    Args:\n        since (int | str | pd.Timestamp): _description_\n        to (int | str | pd.Timestamp): _description_\n\n    Returns:\n        bool: True if has data, False if no data\n    \"\"\"\n    bars = self.bars(since=since, to=to)\n\n    if bars is None or len(bars) == 0:\n        logger.warning(\"No bars data for %s\", self.name)\n        return False\n\n    self.push(bars)\n    return True\n</code></pre>"},{"location":"reference/exchange/live/ccxt/ccxt/#lettrade.exchange.live.ccxt.ccxt.CCXTDataFeed.instance","title":"instance  <code>classmethod</code>","text":"<pre><code>instance(\n    api: Optional[LiveAPI] = None,\n    api_kwargs: Optional[dict] = None,\n    **kwargs\n) -&gt; LiveDataFeed\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>api</code>               (<code>LiveAPI</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>api_kwargs</code>               (<code>dict</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>Missing api requirement</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>LiveDataFeed</code> (              <code>LiveDataFeed</code> )          \u2013            <p>DataFeed object</p> </li> </ul> Source code in <code>lettrade/exchange/live/data.py</code> <pre><code>@classmethod\ndef instance(\n    cls,\n    api: Optional[LiveAPI] = None,\n    api_kwargs: Optional[dict] = None,\n    **kwargs,\n) -&gt; \"LiveDataFeed\":\n    \"\"\"_summary_\n\n    Args:\n        api (LiveAPI, optional): _description_. Defaults to None.\n        api_kwargs (dict, optional): _description_. Defaults to None.\n\n    Raises:\n        RuntimeError: Missing api requirement\n\n    Returns:\n        LiveDataFeed: DataFeed object\n    \"\"\"\n    if api is None:\n        if api_kwargs is None:\n            raise RuntimeError(\"api or api_kwargs cannot missing\")\n        api = cls._api_cls(**api_kwargs)\n    obj = cls(api=api, **kwargs)\n    return obj\n</code></pre>"},{"location":"reference/exchange/live/ccxt/ccxt/#lettrade.exchange.live.ccxt.ccxt.CCXTDataFeeder","title":"CCXTDataFeeder","text":"<pre><code>CCXTDataFeeder(\n    api: LiveAPI,\n    tick: bool = 5,\n    start_size: int = 500,\n    **kwargs\n)\n</code></pre> <p>               Bases: <code>LiveDataFeeder</code></p> <p>DataFeeder for CCXT</p> <pre><code>tick == 0: wait until new bar change value\ntick &gt; 0: sleep tick time (in seconds) then update\n</code></pre> Source code in <code>lettrade/exchange/live/feeder.py</code> <pre><code>def __init__(\n    self,\n    api: LiveAPI,\n    tick: bool = 5,\n    start_size: int = 500,\n    **kwargs,\n) -&gt; None:\n    \"\"\"\n    tick:\n        tick &lt; 0: no tick, just get completed bar\n        tick == 0: wait until new bar change value\n        tick &gt; 0: sleep tick time (in seconds) then update\n    \"\"\"\n    super().__init__()\n    self._api = api\n    self._tick = tick\n    self._start_size = start_size\n    self._config = kwargs\n\n    if isinstance(self._tick, int):\n        self._wait_timeframe = TimeFrame(f\"{self._tick}s\")\n    else:\n        self._wait_timeframe = None\n</code></pre>"},{"location":"reference/exchange/live/ccxt/ccxt/#lettrade.exchange.live.ccxt.ccxt.CCXTDataFeeder.is_continous","title":"is_continous  <code>property</code>","text":"<pre><code>is_continous\n</code></pre> <p>Flag check is realtime continous datafeeder</p>"},{"location":"reference/exchange/live/ccxt/ccxt/#lettrade.exchange.live.ccxt.ccxt.CCXTDataFeeder.instance","title":"instance  <code>classmethod</code>","text":"<pre><code>instance(\n    api: Optional[LiveAPI] = None,\n    api_kwargs: Optional[dict] = None,\n    **kwargs\n) -&gt; LiveDataFeed\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>api</code>               (<code>LiveAPI</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>api_kwargs</code>               (<code>dict</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>Missing api requirement</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>LiveDataFeed</code> (              <code>LiveDataFeed</code> )          \u2013            <p>DataFeed object</p> </li> </ul> Source code in <code>lettrade/exchange/live/feeder.py</code> <pre><code>@classmethod\ndef instance(\n    cls,\n    api: Optional[LiveAPI] = None,\n    api_kwargs: Optional[dict] = None,\n    **kwargs,\n) -&gt; \"LiveDataFeed\":\n    \"\"\"_summary_\n\n    Args:\n        api (LiveAPI, optional): _description_. Defaults to None.\n        api_kwargs (dict, optional): _description_. Defaults to None.\n\n    Raises:\n        RuntimeError: Missing api requirement\n\n    Returns:\n        LiveDataFeed: DataFeed object\n    \"\"\"\n    if api is None:\n        if api_kwargs is None:\n            raise RuntimeError(\"api or api_kwargs cannot missing\")\n        api = cls._api_cls(**api_kwargs)\n    obj = cls(api=api, **kwargs)\n    return obj\n</code></pre>"},{"location":"reference/exchange/live/ccxt/ccxt/#lettrade.exchange.live.ccxt.ccxt.CCXTExchange","title":"CCXTExchange","text":"<pre><code>CCXTExchange(api: LiveAPI, *args, **kwargs)\n</code></pre> <p>               Bases: <code>LiveExchange</code></p> <p>MetaTrade 5 exchange module for <code>lettrade</code></p> <p>Parameters:</p> <ul> <li> <code>api</code>               (<code>LiveAPI</code>)           \u2013            <p>API connect to rpyc MeTrader 5 Terminal server through module <code>mt5linux</code></p> </li> <li> <code>*args</code>               (<code>list</code>, default:                   <code>()</code> )           \u2013            <p><code>Exchange</code> list parameters</p> </li> <li> <code>**kwargs</code>               (<code>dict</code>, default:                   <code>{}</code> )           \u2013            <p><code>Exchange</code> dict parameters</p> </li> </ul> Source code in <code>lettrade/exchange/live/exchange.py</code> <pre><code>def __init__(self, api: LiveAPI, *args, **kwargs):\n    \"\"\"_summary_\n\n    Args:\n        api (LiveAPI): API connect to rpyc MeTrader 5 Terminal server through module `mt5linux`\n        *args (list): `Exchange` list parameters\n        **kwargs (dict): `Exchange` dict parameters\n    \"\"\"\n    super().__init__(*args, **kwargs)\n    self._api = api\n</code></pre>"},{"location":"reference/exchange/live/ccxt/ccxt/#lettrade.exchange.live.ccxt.ccxt.CCXTExchange.data","title":"data  <code>instance-attribute</code>","text":"<pre><code>data: DataFeed\n</code></pre> <p>main DataFeed</p>"},{"location":"reference/exchange/live/ccxt/ccxt/#lettrade.exchange.live.ccxt.ccxt.CCXTExchange.datas","title":"datas  <code>instance-attribute</code>","text":"<pre><code>datas: list[DataFeed]\n</code></pre> <p>List of all available DataFeed</p>"},{"location":"reference/exchange/live/ccxt/ccxt/#lettrade.exchange.live.ccxt.ccxt.CCXTExchange.executions","title":"executions  <code>instance-attribute</code>","text":"<pre><code>executions: dict[str, Execution]\n</code></pre> <p>Execution dict by <code>Execution.id</code> key</p>"},{"location":"reference/exchange/live/ccxt/ccxt/#lettrade.exchange.live.ccxt.ccxt.CCXTExchange.history_orders","title":"history_orders  <code>instance-attribute</code>","text":"<pre><code>history_orders: dict[str, Order] = dict()\n</code></pre> <p>History Order dict by <code>Order.id</code> key</p>"},{"location":"reference/exchange/live/ccxt/ccxt/#lettrade.exchange.live.ccxt.ccxt.CCXTExchange.history_positions","title":"history_positions  <code>instance-attribute</code>","text":"<pre><code>history_positions: dict[str, Position] = dict()\n</code></pre> <p>History Position dict by <code>Position.id</code> key</p>"},{"location":"reference/exchange/live/ccxt/ccxt/#lettrade.exchange.live.ccxt.ccxt.CCXTExchange.orders","title":"orders  <code>instance-attribute</code>","text":"<pre><code>orders: dict[str, Order] = dict()\n</code></pre> <p>Available Order dict by <code>Order.id</code> key</p>"},{"location":"reference/exchange/live/ccxt/ccxt/#lettrade.exchange.live.ccxt.ccxt.CCXTExchange.positions","title":"positions  <code>instance-attribute</code>","text":"<pre><code>positions: dict[str, Position] = dict()\n</code></pre> <p>Available Position dict by <code>Position.id</code> key</p>"},{"location":"reference/exchange/live/ccxt/ccxt/#lettrade.exchange.live.ccxt.ccxt.CCXTExchange.init","title":"init","text":"<pre><code>init(\n    brain: Brain,\n    feeder: DataFeeder,\n    account: Account,\n    commander: Commander,\n) -&gt; None\n</code></pre> <p>Init Exchange dependencies. Set data/datas from feeder. Set state to <code>ExchangeState.Start</code>.</p> <p>Parameters:</p> <ul> <li> <code>brain</code>               (<code>Brain</code>)           \u2013            <p>description</p> </li> <li> <code>feeder</code>               (<code>DataFeeder</code>)           \u2013            <p>description</p> </li> <li> <code>account</code>               (<code>Account</code>)           \u2013            <p>description</p> </li> <li> <code>commander</code>               (<code>Commander</code>)           \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def init(\n    self,\n    brain: \"Brain\",\n    feeder: DataFeeder,\n    account: Account,\n    commander: Commander,\n) -&gt; None:\n    \"\"\"Init Exchange dependencies.\n    Set data/datas from feeder.\n    Set state to `ExchangeState.Start`.\n\n    Args:\n        brain (Brain): _description_\n        feeder (DataFeeder): _description_\n        account (Account): _description_\n        commander (Commander): _description_\n    \"\"\"\n    self._brain = brain\n    self._feeder = feeder\n    self._account = account\n    self._commander = commander\n\n    self.data = self._feeder.data\n    self.datas = self._feeder.datas\n\n    self._account.init(exchange=self)\n\n    self._state = ExchangeState.Start\n</code></pre>"},{"location":"reference/exchange/live/ccxt/ccxt/#lettrade.exchange.live.ccxt.ccxt.CCXTExchange.new_order","title":"new_order","text":"<pre><code>new_order(\n    size: float,\n    type: Optional[OrderType] = OrderType.Market,\n    limit: Optional[float] = None,\n    stop: Optional[float] = None,\n    sl: Optional[float] = None,\n    tp: Optional[float] = None,\n    tag: Optional[str] = None,\n    data: Optional[DataFeed] = None,\n    *args,\n    **kwargs\n) -&gt; OrderResult\n</code></pre> <p>Place new order to server</p> <p>Parameters:</p> <ul> <li> <code>size</code>               (<code>float</code>)           \u2013            <p>description</p> </li> <li> <code>type</code>               (<code>Optional[OrderType]</code>, default:                   <code>Market</code> )           \u2013            <p>description. Defaults to OrderType.Market.</p> </li> <li> <code>limit</code>               (<code>Optional[float]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>stop</code>               (<code>Optional[float]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>sl</code>               (<code>Optional[float]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>tp</code>               (<code>Optional[float]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>tag</code>               (<code>Optional[str]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>data</code>               (<code>Optional[DataFeed]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>OrderResult</code> (              <code>OrderResult</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/live/exchange.py</code> <pre><code>def new_order(\n    self,\n    size: float,\n    type: Optional[OrderType] = OrderType.Market,\n    limit: Optional[float] = None,\n    stop: Optional[float] = None,\n    sl: Optional[float] = None,\n    tp: Optional[float] = None,\n    tag: Optional[str] = None,\n    data: Optional[DataFeed] = None,\n    *args,\n    **kwargs\n) -&gt; OrderResult:\n    \"\"\"Place new order to server\n\n    Args:\n        size (float): _description_\n        type (Optional[OrderType], optional): _description_. Defaults to OrderType.Market.\n        limit (Optional[float], optional): _description_. Defaults to None.\n        stop (Optional[float], optional): _description_. Defaults to None.\n        sl (Optional[float], optional): _description_. Defaults to None.\n        tp (Optional[float], optional): _description_. Defaults to None.\n        tag (Optional[str], optional): _description_. Defaults to None.\n        data (Optional[DataFeed], optional): _description_. Defaults to None.\n\n    Returns:\n        OrderResult: _description_\n    \"\"\"\n    if not data:\n        data = self.data\n\n    if type == OrderType.Market:\n        limit = 0\n        stop = 0\n\n    order = self._order_cls(\n        id=-1,\n        exchange=self,\n        data=data,\n        size=size,\n        type=type,\n        limit_price=limit,\n        stop_price=stop,\n        sl_price=sl,\n        tp_price=tp,\n        tag=tag,\n    )\n    ok = order.place()\n\n    # if __debug__:\n    #     logger.info(\"New order %s at %s\", order, self.data.now)\n\n    return ok\n</code></pre>"},{"location":"reference/exchange/live/ccxt/ccxt/#lettrade.exchange.live.ccxt.ccxt.CCXTExchange.next_next","title":"next_next","text":"<pre><code>next_next()\n</code></pre> <p>Call after strategy.next()</p> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def next_next(self):\n    \"Call after strategy.next()\"\n    self._account._equity_snapshot()\n</code></pre>"},{"location":"reference/exchange/live/ccxt/ccxt/#lettrade.exchange.live.ccxt.ccxt.CCXTExchange.on_execution","title":"on_execution","text":"<pre><code>on_execution(\n    execution: Execution,\n    broadcast: Optional[bool] = True,\n    **kwargs\n) -&gt; None\n</code></pre> <p>Receive Execution event from exchange then store and notify Brain</p> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def on_execution(\n    self,\n    execution: Execution,\n    broadcast: Optional[bool] = True,\n    **kwargs,\n) -&gt; None:\n    \"\"\"\n    Receive Execution event from exchange then store and notify Brain\n    \"\"\"\n    if self.executions is None:\n        logger.warning(\n            \"Execution transaction is disable, enable by flag: show_execution=True\"\n        )\n        return\n\n    if not isinstance(execution, Execution):\n        raise RuntimeError(f\"{execution} is not instance of type Execution\")\n\n    if execution.id in self.executions:\n        # Merge to keep Execution handler for strategy using\n        # when strategy want to store Execution object\n        # and object will be automatic update directly\n        self.executions[execution.id].merge(execution)\n        execution = self.executions[execution.id]\n    else:\n        self.executions[execution.id] = execution\n\n    if self._state != ExchangeState.Run:\n        return\n\n    if broadcast:\n        self._brain.on_execution(execution)\n</code></pre>"},{"location":"reference/exchange/live/ccxt/ccxt/#lettrade.exchange.live.ccxt.ccxt.CCXTExchange.on_order","title":"on_order","text":"<pre><code>on_order(\n    order: Order, broadcast: Optional[bool] = True, **kwargs\n) -&gt; None\n</code></pre> <p>Receive Order event from exchange then store and notify Brain</p> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def on_order(\n    self,\n    order: Order,\n    broadcast: Optional[bool] = True,\n    **kwargs,\n) -&gt; None:\n    \"\"\"\n    Receive Order event from exchange then store and notify Brain\n    \"\"\"\n    if not isinstance(order, Order):\n        raise RuntimeError(f\"{order} is not instance of type Order\")\n\n    if order.state in [OrderState.Filled, OrderState.Canceled]:\n        self.history_orders[order.id] = order\n        if order.id in self.orders:\n            del self.orders[order.id]\n    else:\n        if order.id in self.history_orders:\n            raise RuntimeError(f\"Order {order.id} closed\")\n\n        if order.id in self.orders:\n            # Merge to keep Order handler for strategy using\n            # when strategy want to store Order object\n            # and object will be automatic update directly\n            self.orders[order.id].merge(order)\n            order = self.orders[order.id]\n        else:\n            self.orders[order.id] = order\n\n    if self._state != ExchangeState.Run:\n        return\n\n    if broadcast:\n        self._brain.on_order(order)\n</code></pre>"},{"location":"reference/exchange/live/ccxt/ccxt/#lettrade.exchange.live.ccxt.ccxt.CCXTExchange.on_position","title":"on_position","text":"<pre><code>on_position(\n    position: Position,\n    broadcast: Optional[bool] = True,\n    *args,\n    **kwargs\n) -&gt; None\n</code></pre> <p>Receive Position event from exchange then store and notify Brain</p> <p>Parameters:</p> <ul> <li> <code>position</code>               (<code>Position</code>)           \u2013            <p>new comming <code>Position</code></p> </li> <li> <code>broadcast</code>               (<code>Optional[bool]</code>, default:                   <code>True</code> )           \u2013            <p>Flag notify for Brain. Defaults to True.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>validat <code>Position</code> instance</p> </li> </ul> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def on_position(\n    self,\n    position: Position,\n    broadcast: Optional[bool] = True,\n    *args,\n    **kwargs,\n) -&gt; None:\n    \"\"\"Receive Position event from exchange then store and notify Brain\n\n    Args:\n        position (Position): new comming `Position`\n        broadcast (Optional[bool], optional): Flag notify for Brain. Defaults to True.\n\n    Raises:\n        RuntimeError: validat `Position` instance\n    \"\"\"\n    if not isinstance(position, Position):\n        raise RuntimeError(f\"{position} is not instance of type Position\")\n\n    if position.state == PositionState.Exit:\n        self.history_positions[position.id] = position\n        if position.id in self.positions:\n            del self.positions[position.id]\n\n        self._account._on_position_exit(position)\n    else:\n        if position.id in self.history_positions:\n            raise RuntimeError(f\"Order {position.id} closed\")\n        if position.id in self.positions:\n            # Merge to keep Position handler for strategy using\n            # when strategy want to store Position object\n            # and object will be automatic update directly\n            self.positions[position.id].merge(position)\n            position = self.positions[position.id]\n        else:\n            self.positions[position.id] = position\n            self._account._on_position_entry(position)\n\n    if self._state != ExchangeState.Run:\n        return\n\n    if broadcast:\n        self._brain.on_position(position)\n</code></pre>"},{"location":"reference/exchange/live/ccxt/ccxt/#lettrade.exchange.live.ccxt.ccxt.CCXTExchange.start","title":"start","text":"<pre><code>start() -&gt; None\n</code></pre> <p>Start Live exchange by: Sync positions from server</p> Source code in <code>lettrade/exchange/live/exchange.py</code> <pre><code>def start(self) -&gt; None:\n    \"\"\"Start Live exchange by: Sync positions from server\"\"\"\n    self._api.start(exchange=self)\n    return super().start()\n</code></pre>"},{"location":"reference/exchange/live/ccxt/ccxt/#lettrade.exchange.live.ccxt.ccxt.CCXTExchange.stop","title":"stop","text":"<pre><code>stop() -&gt; None\n</code></pre> <p>Stop Exchange</p> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def stop(self) -&gt; None:\n    \"\"\"Stop Exchange\"\"\"\n    self._state = ExchangeState.Stop\n    self._account.stop()\n</code></pre>"},{"location":"reference/exchange/live/ccxt/ccxt/#lettrade.exchange.live.ccxt.ccxt.CCXTExecution","title":"CCXTExecution","text":"<pre><code>CCXTExecution(\n    id: str,\n    exchange: LiveExchange,\n    data: DataFeed,\n    size: float,\n    price: float,\n    at: float,\n    order_id: Optional[str] = None,\n    order: Optional[Order] = None,\n    position_id: Optional[str] = None,\n    position: Optional[Position] = None,\n    api: Optional[LiveAPI] = None,\n    raw: Optional[object] = None,\n    **kwargs\n)\n</code></pre> <p>               Bases: <code>LiveExecution</code></p> <p>Execution for CCXT</p> Source code in <code>lettrade/exchange/live/trade.py</code> <pre><code>def __init__(\n    self,\n    id: str,\n    exchange: \"LiveExchange\",\n    data: \"DataFeed\",\n    size: float,\n    price: float,\n    at: float,\n    order_id: Optional[str] = None,\n    order: Optional[\"Order\"] = None,\n    position_id: Optional[str] = None,\n    position: Optional[\"Position\"] = None,\n    # tag: Optional[str] = \"\",\n    api: Optional[LiveAPI] = None,\n    raw: Optional[object] = None,\n    **kwargs,\n):\n    super().__init__(\n        id=id,\n        exchange=exchange,\n        data=data,\n        size=size,\n        price=price,\n        at=at,\n        order_id=order_id,\n        order=order,\n        position_id=position_id,\n        position=position,\n        api=api,\n        raw=raw,\n        **kwargs,\n    )\n</code></pre>"},{"location":"reference/exchange/live/ccxt/ccxt/#lettrade.exchange.live.ccxt.ccxt.CCXTOrder","title":"CCXTOrder","text":"<pre><code>CCXTOrder(\n    id: str,\n    exchange: LiveExchange,\n    data: DataFeed,\n    size: float,\n    state: OrderState = OrderState.Pending,\n    type: OrderType = OrderType.Market,\n    limit_price: Optional[float] = None,\n    stop_price: Optional[float] = None,\n    sl_price: Optional[float] = None,\n    tp_price: Optional[float] = None,\n    parent: Optional[Position] = None,\n    tag: Optional[str] = \"\",\n    api: Optional[LiveAPI] = None,\n    raw: Optional[object] = None,\n    **kwargs\n)\n</code></pre> <p>               Bases: <code>LiveOrder</code></p> <p>Order for CCXT</p> Source code in <code>lettrade/exchange/live/trade.py</code> <pre><code>def __init__(\n    self,\n    id: str,\n    exchange: \"LiveExchange\",\n    data: \"DataFeed\",\n    size: float,\n    state: OrderState = OrderState.Pending,\n    type: OrderType = OrderType.Market,\n    limit_price: Optional[float] = None,\n    stop_price: Optional[float] = None,\n    sl_price: Optional[float] = None,\n    tp_price: Optional[float] = None,\n    parent: Optional[\"Position\"] = None,\n    tag: Optional[str] = \"\",\n    api: Optional[LiveAPI] = None,\n    raw: Optional[object] = None,\n    **kwargs,\n):\n    super().__init__(\n        id=id,\n        exchange=exchange,\n        data=data,\n        size=size,\n        state=state,\n        type=type,\n        limit_price=limit_price,\n        stop_price=stop_price,\n        sl_price=sl_price,\n        tp_price=tp_price,\n        parent=parent,\n        tag=tag,\n        api=api,\n        raw=raw,\n        **kwargs,\n    )\n</code></pre>"},{"location":"reference/exchange/live/ccxt/ccxt/#lettrade.exchange.live.ccxt.ccxt.CCXTPosition","title":"CCXTPosition","text":"<pre><code>CCXTPosition(\n    id: str,\n    exchange: LiveExchange,\n    data: DataFeed,\n    size: float,\n    parent: Order,\n    tag: str = \"\",\n    state: PositionState = PositionState.Open,\n    entry_price: Optional[float] = None,\n    entry_at: Optional[int] = None,\n    sl_order: Optional[Order] = None,\n    tp_order: Optional[Order] = None,\n    api: Optional[LiveAPI] = None,\n    raw: Optional[object] = None,\n    **kwargs\n)\n</code></pre> <p>               Bases: <code>LivePosition</code></p> <p>Trade for CCXT</p> Source code in <code>lettrade/exchange/live/trade.py</code> <pre><code>def __init__(\n    self,\n    id: str,\n    exchange: \"LiveExchange\",\n    data: \"DataFeed\",\n    size: float,\n    parent: Order,\n    tag: str = \"\",\n    state: PositionState = PositionState.Open,\n    entry_price: Optional[float] = None,\n    entry_at: Optional[int] = None,\n    sl_order: Optional[Order] = None,\n    tp_order: Optional[Order] = None,\n    api: Optional[LiveAPI] = None,\n    raw: Optional[object] = None,\n    **kwargs,\n):\n    super().__init__(\n        id=id,\n        exchange=exchange,\n        data=data,\n        size=size,\n        parent=parent,\n        tag=tag,\n        state=state,\n        entry_price=entry_price,\n        entry_at=entry_at,\n        sl_order=sl_order,\n        tp_order=tp_order,\n        api=api,\n        raw=raw,\n        **kwargs,\n    )\n</code></pre>"},{"location":"reference/exchange/live/ccxt/ccxt/#lettrade.exchange.live.ccxt.ccxt.LetTradeCCXT","title":"LetTradeCCXT","text":"<pre><code>LetTradeCCXT(\n    feeder: Type[CCXTDataFeeder] = CCXTDataFeeder,\n    exchange: Type[CCXTExchange] = CCXTExchange,\n    account: Type[CCXTAccount] = CCXTAccount,\n    **kwargs\n)\n</code></pre> <p>               Bases: <code>LetTradeLive</code></p> <p>Help to maintain CCXT bot</p> <p>Parameters:</p> <ul> <li> <code>feeder</code>               (<code>Type[CCXTDataFeeder]</code>, default:                   <code>CCXTDataFeeder</code> )           \u2013            <p>description. Defaults to CCXTDataFeeder.</p> </li> <li> <code>exchange</code>               (<code>Type[CCXTExchange]</code>, default:                   <code>CCXTExchange</code> )           \u2013            <p>description. Defaults to CCXTExchange.</p> </li> <li> <code>account</code>               (<code>Type[CCXTAccount]</code>, default:                   <code>CCXTAccount</code> )           \u2013            <p>description. Defaults to CCXTAccount.</p> </li> </ul> Source code in <code>lettrade/exchange/live/ccxt/ccxt.py</code> <pre><code>def __init__(\n    self,\n    feeder: Type[CCXTDataFeeder] = CCXTDataFeeder,\n    exchange: Type[CCXTExchange] = CCXTExchange,\n    account: Type[CCXTAccount] = CCXTAccount,\n    **kwargs,\n) -&gt; None:\n    \"\"\"_summary_\n\n    Args:\n        feeder (Type[CCXTDataFeeder], optional): _description_. Defaults to CCXTDataFeeder.\n        exchange (Type[CCXTExchange], optional): _description_. Defaults to CCXTExchange.\n        account (Type[CCXTAccount], optional): _description_. Defaults to CCXTAccount.\n    \"\"\"\n    super().__init__(\n        feeder=feeder,\n        exchange=exchange,\n        account=account,\n        **kwargs,\n    )\n</code></pre>"},{"location":"reference/exchange/live/ccxt/ccxt/#lettrade.exchange.live.ccxt.ccxt.LetTradeCCXT.plot","title":"plot","text":"<pre><code>plot(*args, jump: Optional[dict] = None, **kwargs)\n</code></pre> <p>Plot strategy/optimize result</p> BotPlotter <p>Miror of BotPlotter.plot(). Plotly implement PlotlyBotPlotter.plot().</p> <p>Args:     <code>jump</code> (Optional[dict], optional): Miror of BotPlotter.jump()</p> <p>Example:     - Jump to position_id         <pre><code>lt.plot(\n    jump=dict(position_id=1, range=300),\n    layout=dict(height=2000),\n)\n</code></pre></p> OptimizePlotter <p>Miror of OptimizePlotter.plot(). Plotly implement PlotlyOptimizePlotter.plot().</p> <p>Example:     -         <pre><code>lt.plot(layout=dict(height=2000))\n</code></pre></p> Source code in <code>lettrade/lettrade.py</code> <pre><code>def plot(self, *args, jump: Optional[dict] = None, **kwargs):\n    \"\"\"Plot strategy/optimize result\n\n    BotPlotter:\n        Miror of [BotPlotter.plot()](site:/reference/plot/bot/#lettrade.plot.bot.BotPlotter.plot).\n        Plotly implement [PlotlyBotPlotter.plot()](site:/reference/plot/plotly/plotly/#lettrade.plot.plotly.plotly.PlotlyBotPlotter.plot).\n\n        Args:\n            `jump` (Optional[dict], optional): Miror of [BotPlotter.jump()](site:/reference/plot/bot/#lettrade.plot.bot.BotPlotter.jump)\n\n        Example:\n            - Jump to position_id\n                ```python\n                lt.plot(\n                    jump=dict(position_id=1, range=300),\n                    layout=dict(height=2000),\n                )\n                ```\n\n    OptimizePlotter:\n        Miror of [OptimizePlotter.plot()](site:/reference/plot/optimize/#lettrade.plot.optimize.OptimizePlotter.plot).\n        Plotly implement [PlotlyOptimizePlotter.plot()](site:/reference/exchange/backtest/plotly/optimize/#lettrade.exchange.backtest.plotly.optimize.PlotlyOptimizePlotter.plot).\n\n        Example:\n            -\n                ```python\n                lt.plot(layout=dict(height=2000))\n                ```\n    \"\"\"\n    if __debug__:\n        from .utils.docs import is_docs_session\n\n        if is_docs_session():\n            return\n\n    self.plotter.plot(*args, jump=jump, **kwargs)\n</code></pre>"},{"location":"reference/exchange/live/ccxt/ccxt/#lettrade.exchange.live.ccxt.ccxt.LetTradeCCXT.run","title":"run","text":"<pre><code>run(worker: Optional[int] = None, **kwargs)\n</code></pre> <p>Run strategy in single or multiple processing</p> <p>Parameters:</p> <ul> <li> <code>worker</code>               (<code>Optional[int]</code>, default:                   <code>None</code> )           \u2013            <p>Number of processing. Defaults to None.</p> </li> </ul> Source code in <code>lettrade/lettrade.py</code> <pre><code>def run(self, worker: Optional[int] = None, **kwargs):\n    \"\"\"Run strategy in single or multiple processing\n\n    Args:\n        worker (Optional[int], optional): Number of processing. Defaults to None.\n    \"\"\"\n    if worker or isinstance(self.data, list):\n        if not isinstance(self.data, list):\n            # self.data = self.datas\n            self.datas = [self.data]\n\n        worker = self._max_workers(worker)\n\n        self._multiprocess()\n\n        datas_source = self._kwargs.pop(\"datas\")\n        with ProcessPoolExecutor(max_workers=worker) as executor:\n            futures = [\n                executor.submit(\n                    self._bot_cls.run_bot,\n                    datas=datas,\n                    id=i,\n                    result=\"str\",\n                    **self._kwargs,\n                )\n                for i, datas in enumerate(datas_source)\n            ]\n            for future in futures:\n                result = future.result()\n                print(result)\n    else:\n        self._bot = self._bot_cls.run_bot(\n            bot=self._bot,\n            result=\"bot\",\n            **self._kwargs,\n        )\n        print(str(self._bot.stats))\n</code></pre>"},{"location":"reference/exchange/live/ccxt/ccxt/#lettrade.exchange.live.ccxt.ccxt.LetTradeCCXT.stop","title":"stop","text":"<pre><code>stop()\n</code></pre> <p>Stop strategy</p> Source code in <code>lettrade/lettrade.py</code> <pre><code>def stop(self):\n    \"\"\"Stop strategy\"\"\"\n    if self._bot is not None:\n        return self._bot.stop()\n    if self.stats:\n        self.stats.stop()\n</code></pre>"},{"location":"reference/exchange/live/ccxt/ccxt/#lettrade.exchange.live.ccxt.ccxt.LetTradeCCXTBot","title":"LetTradeCCXTBot","text":"<pre><code>LetTradeCCXTBot(api: Optional[LiveAPI] = LiveAPI, **kwargs)\n</code></pre> <p>               Bases: <code>LetTradeLiveBot</code></p> <p>LetTradeBot for CCXT</p> Source code in <code>lettrade/exchange/live/live.py</code> <pre><code>def __init__(\n    self,\n    api: Optional[LiveAPI] = LiveAPI,\n    **kwargs,\n) -&gt; None:\n    super().__init__(**kwargs)\n\n    if issubclass(api, LiveAPI):\n        self._api = api(**self._kwargs.get(\"api_kwargs\", {}))\n    else:\n        self._api = api\n\n    self._kwargs.setdefault(\"feeder_kwargs\", dict()).update(api=self._api)\n    self._kwargs.setdefault(\"exchange_kwargs\", dict()).update(api=self._api)\n    self._kwargs.setdefault(\"account_kwargs\", dict()).update(api=self._api)\n\n    for data in self.datas:\n        data._api = self._api\n</code></pre>"},{"location":"reference/exchange/live/ccxt/ccxt/#lettrade.exchange.live.ccxt.ccxt.let_ccxt","title":"let_ccxt","text":"<pre><code>let_ccxt(\n    strategy: Type[Strategy],\n    datas: set[set[str]],\n    ccxt_exchange: str,\n    ccxt_key: str,\n    ccxt_secret: str,\n    feeder: Type[CCXTDataFeeder] = CCXTDataFeeder,\n    exchange: Type[CCXTExchange] = CCXTExchange,\n    account: Type[CCXTAccount] = CCXTAccount,\n    commander: Optional[Type[Commander]] = None,\n    plotter: Optional[Type[Plotter]] = None,\n    stats: Optional[Type[BotStatistic]] = BotStatistic,\n    lettrade: Optional[Type[LetTradeCCXT]] = LetTradeCCXT,\n    bot: Optional[Type[LetTradeCCXTBot]] = LetTradeCCXTBot,\n    api: Optional[Type[CCXTAPI]] = CCXTAPI,\n    **kwargs\n) -&gt; LetTradeCCXT\n</code></pre> <p>Help to build <code>LetTradeCCXT</code></p> <p>Parameters:</p> <ul> <li> <code>strategy</code>               (<code>Type[Strategy]</code>)           \u2013            <p>description</p> </li> <li> <code>datas</code>               (<code>set[set[str]]</code>)           \u2013            <p>description</p> </li> <li> <code>ccxt_exchange</code>               (<code>str</code>)           \u2013            <p>description</p> </li> <li> <code>ccxt_key</code>               (<code>str</code>)           \u2013            <p>description</p> </li> <li> <code>ccxt_secret</code>               (<code>str</code>)           \u2013            <p>description</p> </li> <li> <code>feeder</code>               (<code>Type[CCXTDataFeeder]</code>, default:                   <code>CCXTDataFeeder</code> )           \u2013            <p>description. Defaults to CCXTDataFeeder.</p> </li> <li> <code>exchange</code>               (<code>Type[CCXTExchange]</code>, default:                   <code>CCXTExchange</code> )           \u2013            <p>description. Defaults to CCXTExchange.</p> </li> <li> <code>account</code>               (<code>Type[CCXTAccount]</code>, default:                   <code>CCXTAccount</code> )           \u2013            <p>description. Defaults to CCXTAccount.</p> </li> <li> <code>commander</code>               (<code>Optional[Type[Commander]]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>plotter</code>               (<code>Optional[Type[Plotter]]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>stats</code>               (<code>Optional[Type[BotStatistic]]</code>, default:                   <code>BotStatistic</code> )           \u2013            <p>description. Defaults to BotStatistic.</p> </li> <li> <code>lettrade</code>               (<code>Optional[Type[LetTradeCCXT]]</code>, default:                   <code>LetTradeCCXT</code> )           \u2013            <p>description. Defaults to LetTradeCCXT.</p> </li> <li> <code>bot</code>               (<code>Optional[Type[LetTradeCCXTBot]]</code>, default:                   <code>LetTradeCCXTBot</code> )           \u2013            <p>description. Defaults to LetTradeCCXTBot.</p> </li> <li> <code>api</code>               (<code>Optional[Type[CCXTAPI]]</code>, default:                   <code>CCXTAPI</code> )           \u2013            <p>description. Defaults to CCXTAPI.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>LetTradeCCXT</code> (              <code>LetTradeCCXT</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/live/ccxt/ccxt.py</code> <pre><code>def let_ccxt(\n    strategy: Type[Strategy],\n    datas: set[set[str]],\n    ccxt_exchange: str,\n    ccxt_key: str,\n    ccxt_secret: str,\n    feeder: Type[CCXTDataFeeder] = CCXTDataFeeder,\n    exchange: Type[CCXTExchange] = CCXTExchange,\n    account: Type[CCXTAccount] = CCXTAccount,\n    commander: Optional[Type[Commander]] = None,\n    plotter: Optional[Type[Plotter]] = None,\n    stats: Optional[Type[BotStatistic]] = BotStatistic,\n    lettrade: Optional[Type[LetTradeCCXT]] = LetTradeCCXT,\n    bot: Optional[Type[LetTradeCCXTBot]] = LetTradeCCXTBot,\n    api: Optional[Type[CCXTAPI]] = CCXTAPI,\n    **kwargs,\n) -&gt; LetTradeCCXT:\n    \"\"\"Help to build `LetTradeCCXT`\n\n    Args:\n        strategy (Type[Strategy]): _description_\n        datas (set[set[str]]): _description_\n        ccxt_exchange (str): _description_\n        ccxt_key (str): _description_\n        ccxt_secret (str): _description_\n        feeder (Type[CCXTDataFeeder], optional): _description_. Defaults to CCXTDataFeeder.\n        exchange (Type[CCXTExchange], optional): _description_. Defaults to CCXTExchange.\n        account (Type[CCXTAccount], optional): _description_. Defaults to CCXTAccount.\n        commander (Optional[Type[Commander]], optional): _description_. Defaults to None.\n        plotter (Optional[Type[Plotter]], optional): _description_. Defaults to None.\n        stats (Optional[Type[BotStatistic]], optional): _description_. Defaults to BotStatistic.\n        lettrade (Optional[Type[LetTradeCCXT]], optional): _description_. Defaults to LetTradeCCXT.\n        bot (Optional[Type[LetTradeCCXTBot]], optional): _description_. Defaults to LetTradeCCXTBot.\n        api (Optional[Type[CCXTAPI]], optional): _description_. Defaults to CCXTAPI.\n\n    Returns:\n        LetTradeCCXT: _description_\n    \"\"\"\n    api_kwargs: dict = kwargs.setdefault(\"api_kwargs\", {})\n    api_kwargs.update(\n        exchange=ccxt_exchange,\n        key=ccxt_key,\n        secret=ccxt_secret,\n    )\n\n    return let_live(\n        strategy=strategy,\n        datas=datas,\n        feeder=feeder,\n        exchange=exchange,\n        account=account,\n        commander=commander,\n        plotter=plotter,\n        stats=stats,\n        lettrade=lettrade,\n        bot=bot,\n        api=api,\n        **kwargs,\n    )\n</code></pre>"},{"location":"reference/exchange/live/metatrader/","title":"Index","text":""},{"location":"reference/exchange/live/metatrader/#lettrade.exchange.live.metatrader","title":"metatrader","text":""},{"location":"reference/exchange/live/metatrader/api/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> api","text":""},{"location":"reference/exchange/live/metatrader/api/#lettrade.exchange.live.metatrader.api","title":"api","text":""},{"location":"reference/exchange/live/metatrader/api/#lettrade.exchange.live.metatrader.api.MetaTraderAPI","title":"MetaTraderAPI","text":"<pre><code>MetaTraderAPI(\n    login: int,\n    password: str,\n    server: str,\n    timeout: int = 60,\n    retry: int = 20,\n    host: str = \"localhost\",\n    port: int = 18812,\n    wine: Optional[str] = None,\n    magic: int = 88888888,\n    **kwargs\n)\n</code></pre> <p>               Bases: <code>LiveAPI</code></p> Source code in <code>lettrade/exchange/live/metatrader/api.py</code> <pre><code>def __init__(\n    self,\n    login: int,\n    password: str,\n    server: str,\n    timeout: int = 60,\n    retry: int = 20,\n    host: str = \"localhost\",\n    port: int = 18812,\n    wine: Optional[str] = None,\n    magic: int = 88888888,\n    **kwargs,\n):\n    # Parameters\n    self._magic = magic\n    self._use_execution = False\n    self.__load_history_since = datetime.now() - timedelta(days=7)\n    self.__deal_time_checked = datetime.now() - timedelta(days=1)\n    self.__orders_stored = {}\n    self.__positions_stored = {}\n\n    # Start wine server if not inited\n    if wine:\n        self.__class__._wine_process(wine)\n\n    try:\n        self._mt5 = MT5(host=host, port=port)\n    except ConnectionRefusedError as e:\n        raise ConnectionRefusedError(\n            \"Cannot connect to MetaTrader 5 Terminal rpyc server\"\n        ) from e\n    except TimeoutError as e:\n        raise RuntimeError(\"Timeout start MetaTrader 5 Terminal\") from e\n\n    # Login account\n    account = self.account()\n    if not account or account.login != login:\n        while retry &gt; 0:\n            login = self._mt5.initialize(\n                login=int(login),\n                password=password,\n                server=server,\n                # timeout=timeout,\n            )\n            if login:\n                break\n\n            if __debug__:\n                logger.info(\"Login retry: %d\", retry)\n\n            time.sleep(1)\n            retry -= 1\n\n        if retry == 0:\n            raise RuntimeError(f\"Cannot login {account}\")\n\n        # Preload trading data\n        now = datetime.now()\n        self._mt5.history_deals_get(self.__deal_time_checked, now)\n        self._mt5.history_orders_get(self.__load_history_since, now)\n        self._mt5.orders_get()\n        self._mt5.positions_get()\n        time.sleep(5)\n\n    # Terminal\n    terminal = self._mt5.terminal_info()\n    logger.info(\"Terminal information: %s\", str(terminal))\n    if not terminal.trade_allowed:\n        logger.warning(\"Terminal trading mode is not allowed\")\n\n    # Account\n    logger.info(\n        \"Login success account=%s, server=%s, version=%s\",\n        account,\n        server,\n        self._mt5.version(),\n    )\n</code></pre>"},{"location":"reference/exchange/live/metatrader/api/#lettrade.exchange.live.metatrader.api.MetaTraderAPI.init","title":"init","text":"<pre><code>init(**kwargs)\n</code></pre> Source code in <code>lettrade/exchange/live/api.py</code> <pre><code>def init(self, **kwargs):\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/exchange/live/metatrader/api/#lettrade.exchange.live.metatrader.api.MetaTraderAPI.markets","title":"markets","text":"<pre><code>markets(search=None)\n</code></pre> <p>The filter for arranging a group of necessary symbols. Optional parameter. If the group is specified, the function returns only symbols meeting a specified criteria.</p> Search example <p>Get symbols whose names do not contain USD, EUR, JPY and GBP <code>search=\"*,!*USD*,!*EUR*,!*JPY*,!*GBP*\"</code></p> Source code in <code>lettrade/exchange/live/metatrader/api.py</code> <pre><code>def markets(self, search=None):\n    \"\"\"The filter for arranging a group of necessary symbols. Optional parameter.\n    If the group is specified, the function returns only symbols meeting a specified criteria.\n\n    Search example:\n        Get symbols whose names do not contain USD, EUR, JPY and GBP\n        `search=\"*,!*USD*,!*EUR*,!*JPY*,!*GBP*\"`\n    \"\"\"\n    return self._mt5.symbols_get(search)\n</code></pre>"},{"location":"reference/exchange/live/metatrader/metatrader/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> metatrader","text":""},{"location":"reference/exchange/live/metatrader/metatrader/#lettrade.exchange.live.metatrader.metatrader","title":"metatrader","text":""},{"location":"reference/exchange/live/metatrader/metatrader/#lettrade.exchange.live.metatrader.metatrader.LetTradeMetaTrader","title":"LetTradeMetaTrader","text":"<pre><code>LetTradeMetaTrader(\n    feeder: Type[\n        MetaTraderDataFeeder\n    ] = MetaTraderDataFeeder,\n    exchange: Type[MetaTraderExchange] = MetaTraderExchange,\n    account: Type[MetaTraderAccount] = MetaTraderAccount,\n    **kwargs\n)\n</code></pre> <p>               Bases: <code>LetTradeLive</code></p> <p>Help to maintain MetaTrader bots</p> <p>Parameters:</p> <ul> <li> <code>feeder</code>               (<code>Type[MetaTraderDataFeeder]</code>, default:                   <code>MetaTraderDataFeeder</code> )           \u2013            <p>description. Defaults to MetaTraderDataFeeder.</p> </li> <li> <code>exchange</code>               (<code>Type[MetaTraderExchange]</code>, default:                   <code>MetaTraderExchange</code> )           \u2013            <p>description. Defaults to MetaTraderExchange.</p> </li> <li> <code>account</code>               (<code>Type[MetaTraderAccount]</code>, default:                   <code>MetaTraderAccount</code> )           \u2013            <p>description. Defaults to MetaTraderAccount.</p> </li> </ul> Source code in <code>lettrade/exchange/live/metatrader/metatrader.py</code> <pre><code>def __init__(\n    self,\n    feeder: Type[MetaTraderDataFeeder] = MetaTraderDataFeeder,\n    exchange: Type[MetaTraderExchange] = MetaTraderExchange,\n    account: Type[MetaTraderAccount] = MetaTraderAccount,\n    **kwargs,\n) -&gt; None:\n    \"\"\"_summary_\n\n    Args:\n        feeder (Type[MetaTraderDataFeeder], optional): _description_. Defaults to MetaTraderDataFeeder.\n        exchange (Type[MetaTraderExchange], optional): _description_. Defaults to MetaTraderExchange.\n        account (Type[MetaTraderAccount], optional): _description_. Defaults to MetaTraderAccount.\n    \"\"\"\n    super().__init__(\n        feeder=feeder,\n        exchange=exchange,\n        account=account,\n        **kwargs,\n    )\n</code></pre>"},{"location":"reference/exchange/live/metatrader/metatrader/#lettrade.exchange.live.metatrader.metatrader.LetTradeMetaTrader.plot","title":"plot","text":"<pre><code>plot(*args, jump: Optional[dict] = None, **kwargs)\n</code></pre> <p>Plot strategy/optimize result</p> BotPlotter <p>Miror of BotPlotter.plot(). Plotly implement PlotlyBotPlotter.plot().</p> <p>Args:     <code>jump</code> (Optional[dict], optional): Miror of BotPlotter.jump()</p> <p>Example:     - Jump to position_id         <pre><code>lt.plot(\n    jump=dict(position_id=1, range=300),\n    layout=dict(height=2000),\n)\n</code></pre></p> OptimizePlotter <p>Miror of OptimizePlotter.plot(). Plotly implement PlotlyOptimizePlotter.plot().</p> <p>Example:     -         <pre><code>lt.plot(layout=dict(height=2000))\n</code></pre></p> Source code in <code>lettrade/lettrade.py</code> <pre><code>def plot(self, *args, jump: Optional[dict] = None, **kwargs):\n    \"\"\"Plot strategy/optimize result\n\n    BotPlotter:\n        Miror of [BotPlotter.plot()](site:/reference/plot/bot/#lettrade.plot.bot.BotPlotter.plot).\n        Plotly implement [PlotlyBotPlotter.plot()](site:/reference/plot/plotly/plotly/#lettrade.plot.plotly.plotly.PlotlyBotPlotter.plot).\n\n        Args:\n            `jump` (Optional[dict], optional): Miror of [BotPlotter.jump()](site:/reference/plot/bot/#lettrade.plot.bot.BotPlotter.jump)\n\n        Example:\n            - Jump to position_id\n                ```python\n                lt.plot(\n                    jump=dict(position_id=1, range=300),\n                    layout=dict(height=2000),\n                )\n                ```\n\n    OptimizePlotter:\n        Miror of [OptimizePlotter.plot()](site:/reference/plot/optimize/#lettrade.plot.optimize.OptimizePlotter.plot).\n        Plotly implement [PlotlyOptimizePlotter.plot()](site:/reference/exchange/backtest/plotly/optimize/#lettrade.exchange.backtest.plotly.optimize.PlotlyOptimizePlotter.plot).\n\n        Example:\n            -\n                ```python\n                lt.plot(layout=dict(height=2000))\n                ```\n    \"\"\"\n    if __debug__:\n        from .utils.docs import is_docs_session\n\n        if is_docs_session():\n            return\n\n    self.plotter.plot(*args, jump=jump, **kwargs)\n</code></pre>"},{"location":"reference/exchange/live/metatrader/metatrader/#lettrade.exchange.live.metatrader.metatrader.LetTradeMetaTrader.run","title":"run","text":"<pre><code>run(worker: Optional[int] = None, **kwargs)\n</code></pre> <p>Run strategy in single or multiple processing</p> <p>Parameters:</p> <ul> <li> <code>worker</code>               (<code>Optional[int]</code>, default:                   <code>None</code> )           \u2013            <p>Number of processing. Defaults to None.</p> </li> </ul> Source code in <code>lettrade/lettrade.py</code> <pre><code>def run(self, worker: Optional[int] = None, **kwargs):\n    \"\"\"Run strategy in single or multiple processing\n\n    Args:\n        worker (Optional[int], optional): Number of processing. Defaults to None.\n    \"\"\"\n    if worker or isinstance(self.data, list):\n        if not isinstance(self.data, list):\n            # self.data = self.datas\n            self.datas = [self.data]\n\n        worker = self._max_workers(worker)\n\n        self._multiprocess()\n\n        datas_source = self._kwargs.pop(\"datas\")\n        with ProcessPoolExecutor(max_workers=worker) as executor:\n            futures = [\n                executor.submit(\n                    self._bot_cls.run_bot,\n                    datas=datas,\n                    id=i,\n                    result=\"str\",\n                    **self._kwargs,\n                )\n                for i, datas in enumerate(datas_source)\n            ]\n            for future in futures:\n                result = future.result()\n                print(result)\n    else:\n        self._bot = self._bot_cls.run_bot(\n            bot=self._bot,\n            result=\"bot\",\n            **self._kwargs,\n        )\n        print(str(self._bot.stats))\n</code></pre>"},{"location":"reference/exchange/live/metatrader/metatrader/#lettrade.exchange.live.metatrader.metatrader.LetTradeMetaTrader.stop","title":"stop","text":"<pre><code>stop()\n</code></pre> <p>Stop strategy</p> Source code in <code>lettrade/lettrade.py</code> <pre><code>def stop(self):\n    \"\"\"Stop strategy\"\"\"\n    if self._bot is not None:\n        return self._bot.stop()\n    if self.stats:\n        self.stats.stop()\n</code></pre>"},{"location":"reference/exchange/live/metatrader/metatrader/#lettrade.exchange.live.metatrader.metatrader.LetTradeMetaTraderBot","title":"LetTradeMetaTraderBot","text":"<pre><code>LetTradeMetaTraderBot(\n    api: Optional[LiveAPI] = LiveAPI, **kwargs\n)\n</code></pre> <p>               Bases: <code>LetTradeLiveBot</code></p> <p>LetTradeBot for MetaTrader</p> Source code in <code>lettrade/exchange/live/live.py</code> <pre><code>def __init__(\n    self,\n    api: Optional[LiveAPI] = LiveAPI,\n    **kwargs,\n) -&gt; None:\n    super().__init__(**kwargs)\n\n    if issubclass(api, LiveAPI):\n        self._api = api(**self._kwargs.get(\"api_kwargs\", {}))\n    else:\n        self._api = api\n\n    self._kwargs.setdefault(\"feeder_kwargs\", dict()).update(api=self._api)\n    self._kwargs.setdefault(\"exchange_kwargs\", dict()).update(api=self._api)\n    self._kwargs.setdefault(\"account_kwargs\", dict()).update(api=self._api)\n\n    for data in self.datas:\n        data._api = self._api\n</code></pre>"},{"location":"reference/exchange/live/metatrader/metatrader/#lettrade.exchange.live.metatrader.metatrader.MetaTraderAccount","title":"MetaTraderAccount","text":"<pre><code>MetaTraderAccount(api: LiveAPI, **kwargs)\n</code></pre> <p>               Bases: <code>LiveAccount</code></p> <p>Account for MetaTrader</p> <p>Parameters:</p> <ul> <li> <code>api</code>               (<code>LiveAPI</code>)           \u2013            <p>description</p> </li> <li> <code>**kwargs</code>               (<code>dict</code>, default:                   <code>{}</code> )           \u2013            <p>Mirror of lettrade.account.Account().</p> </li> </ul> Source code in <code>lettrade/exchange/live/account.py</code> <pre><code>def __init__(self, api: LiveAPI, **kwargs) -&gt; None:\n    \"\"\"Account for live trading\n\n    Args:\n        api (LiveAPI): _description_\n        **kwargs (dict, optional): Mirror of [lettrade.account.Account()](site:/reference/account/account/#lettrade.account.account.Account).\n    \"\"\"\n    super().__init__(**kwargs)\n    self._api = api\n</code></pre>"},{"location":"reference/exchange/live/metatrader/metatrader/#lettrade.exchange.live.metatrader.metatrader.MetaTraderDataFeed","title":"MetaTraderDataFeed","text":"<pre><code>MetaTraderDataFeed(\n    symbol: str,\n    timeframe: str | int | Timedelta,\n    name: Optional[str] = None,\n    api: Optional[LiveAPI] = None,\n    **kwargs\n)\n</code></pre> <p>               Bases: <code>LiveDataFeed</code></p> <p>DataFeed for MetaTrader</p> Source code in <code>lettrade/exchange/live/data.py</code> <pre><code>def __init__(\n    self,\n    symbol: str,\n    timeframe: str | int | pd.Timedelta,\n    name: Optional[str] = None,\n    api: Optional[LiveAPI] = None,\n    **kwargs,\n) -&gt; None:\n    super().__init__(\n        name=name or f\"{symbol}_{timeframe}\",\n        timeframe=timeframe,\n        columns=[\"open\", \"high\", \"low\", \"close\", \"volume\"],\n        **kwargs,\n    )\n    self.meta.update(symbol=symbol)\n\n    if api is not None:\n        self._api = api\n</code></pre>"},{"location":"reference/exchange/live/metatrader/metatrader/#lettrade.exchange.live.metatrader.metatrader.MetaTraderDataFeed.bars","title":"bars","text":"<pre><code>bars(\n    since: int | str | Timestamp, to: int | str | Timestamp\n) -&gt; list\n</code></pre> <p>Get bars from LiveAPI</p> <p>Parameters:</p> <ul> <li> <code>since</code>               (<code>int | str | Timestamp</code>)           \u2013            <p>description</p> </li> <li> <code>to</code>               (<code>int | str | Timestamp</code>)           \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>list</code> (              <code>list</code> )          \u2013            <p>list of bar</p> </li> </ul> Source code in <code>lettrade/exchange/live/data.py</code> <pre><code>def bars(\n    self,\n    since: int | str | pd.Timestamp,\n    to: int | str | pd.Timestamp,\n) -&gt; list:\n    \"\"\"Get bars from LiveAPI\n\n    Args:\n        since (int | str | pd.Timestamp): _description_\n        to (int | str | pd.Timestamp): _description_\n\n    Returns:\n        list: list of bar\n    \"\"\"\n    return self._api.bars(\n        symbol=self.symbol,\n        timeframe=self.timeframe.string,\n        since=since,\n        to=to,\n    )\n</code></pre>"},{"location":"reference/exchange/live/metatrader/metatrader/#lettrade.exchange.live.metatrader.metatrader.MetaTraderDataFeed.bars_load","title":"bars_load","text":"<pre><code>bars_load(\n    since: int | str | Timestamp, to: int | str | Timestamp\n) -&gt; bool\n</code></pre> <p>Get bar and push to DataFeed</p> <p>Parameters:</p> <ul> <li> <code>since</code>               (<code>int | str | Timestamp</code>)           \u2013            <p>description</p> </li> <li> <code>to</code>               (<code>int | str | Timestamp</code>)           \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True if has data, False if no data</p> </li> </ul> Source code in <code>lettrade/exchange/live/data.py</code> <pre><code>def bars_load(\n    self,\n    since: int | str | pd.Timestamp,\n    to: int | str | pd.Timestamp,\n) -&gt; bool:\n    \"\"\"Get bar and push to DataFeed\n\n    Args:\n        since (int | str | pd.Timestamp): _description_\n        to (int | str | pd.Timestamp): _description_\n\n    Returns:\n        bool: True if has data, False if no data\n    \"\"\"\n    bars = self.bars(since=since, to=to)\n\n    if bars is None or len(bars) == 0:\n        logger.warning(\"No bars data for %s\", self.name)\n        return False\n\n    self.push(bars)\n    return True\n</code></pre>"},{"location":"reference/exchange/live/metatrader/metatrader/#lettrade.exchange.live.metatrader.metatrader.MetaTraderDataFeed.instance","title":"instance  <code>classmethod</code>","text":"<pre><code>instance(\n    api: Optional[LiveAPI] = None,\n    api_kwargs: Optional[dict] = None,\n    **kwargs\n) -&gt; LiveDataFeed\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>api</code>               (<code>LiveAPI</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>api_kwargs</code>               (<code>dict</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>Missing api requirement</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>LiveDataFeed</code> (              <code>LiveDataFeed</code> )          \u2013            <p>DataFeed object</p> </li> </ul> Source code in <code>lettrade/exchange/live/data.py</code> <pre><code>@classmethod\ndef instance(\n    cls,\n    api: Optional[LiveAPI] = None,\n    api_kwargs: Optional[dict] = None,\n    **kwargs,\n) -&gt; \"LiveDataFeed\":\n    \"\"\"_summary_\n\n    Args:\n        api (LiveAPI, optional): _description_. Defaults to None.\n        api_kwargs (dict, optional): _description_. Defaults to None.\n\n    Raises:\n        RuntimeError: Missing api requirement\n\n    Returns:\n        LiveDataFeed: DataFeed object\n    \"\"\"\n    if api is None:\n        if api_kwargs is None:\n            raise RuntimeError(\"api or api_kwargs cannot missing\")\n        api = cls._api_cls(**api_kwargs)\n    obj = cls(api=api, **kwargs)\n    return obj\n</code></pre>"},{"location":"reference/exchange/live/metatrader/metatrader/#lettrade.exchange.live.metatrader.metatrader.MetaTraderDataFeeder","title":"MetaTraderDataFeeder","text":"<pre><code>MetaTraderDataFeeder(\n    api: LiveAPI,\n    tick: bool = 5,\n    start_size: int = 500,\n    **kwargs\n)\n</code></pre> <p>               Bases: <code>LiveDataFeeder</code></p> <p>DataFeeder for MetaTrader</p> <pre><code>tick == 0: wait until new bar change value\ntick &gt; 0: sleep tick time (in seconds) then update\n</code></pre> Source code in <code>lettrade/exchange/live/feeder.py</code> <pre><code>def __init__(\n    self,\n    api: LiveAPI,\n    tick: bool = 5,\n    start_size: int = 500,\n    **kwargs,\n) -&gt; None:\n    \"\"\"\n    tick:\n        tick &lt; 0: no tick, just get completed bar\n        tick == 0: wait until new bar change value\n        tick &gt; 0: sleep tick time (in seconds) then update\n    \"\"\"\n    super().__init__()\n    self._api = api\n    self._tick = tick\n    self._start_size = start_size\n    self._config = kwargs\n\n    if isinstance(self._tick, int):\n        self._wait_timeframe = TimeFrame(f\"{self._tick}s\")\n    else:\n        self._wait_timeframe = None\n</code></pre>"},{"location":"reference/exchange/live/metatrader/metatrader/#lettrade.exchange.live.metatrader.metatrader.MetaTraderDataFeeder.is_continous","title":"is_continous  <code>property</code>","text":"<pre><code>is_continous\n</code></pre> <p>Flag check is realtime continous datafeeder</p>"},{"location":"reference/exchange/live/metatrader/metatrader/#lettrade.exchange.live.metatrader.metatrader.MetaTraderDataFeeder.instance","title":"instance  <code>classmethod</code>","text":"<pre><code>instance(\n    api: Optional[LiveAPI] = None,\n    api_kwargs: Optional[dict] = None,\n    **kwargs\n) -&gt; LiveDataFeed\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>api</code>               (<code>LiveAPI</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>api_kwargs</code>               (<code>dict</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>Missing api requirement</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>LiveDataFeed</code> (              <code>LiveDataFeed</code> )          \u2013            <p>DataFeed object</p> </li> </ul> Source code in <code>lettrade/exchange/live/feeder.py</code> <pre><code>@classmethod\ndef instance(\n    cls,\n    api: Optional[LiveAPI] = None,\n    api_kwargs: Optional[dict] = None,\n    **kwargs,\n) -&gt; \"LiveDataFeed\":\n    \"\"\"_summary_\n\n    Args:\n        api (LiveAPI, optional): _description_. Defaults to None.\n        api_kwargs (dict, optional): _description_. Defaults to None.\n\n    Raises:\n        RuntimeError: Missing api requirement\n\n    Returns:\n        LiveDataFeed: DataFeed object\n    \"\"\"\n    if api is None:\n        if api_kwargs is None:\n            raise RuntimeError(\"api or api_kwargs cannot missing\")\n        api = cls._api_cls(**api_kwargs)\n    obj = cls(api=api, **kwargs)\n    return obj\n</code></pre>"},{"location":"reference/exchange/live/metatrader/metatrader/#lettrade.exchange.live.metatrader.metatrader.MetaTraderExchange","title":"MetaTraderExchange","text":"<pre><code>MetaTraderExchange(api: LiveAPI, *args, **kwargs)\n</code></pre> <p>               Bases: <code>LiveExchange</code></p> <p>MetaTrade 5 exchange module for <code>lettrade</code></p> <p>Parameters:</p> <ul> <li> <code>api</code>               (<code>LiveAPI</code>)           \u2013            <p>API connect to rpyc MeTrader 5 Terminal server through module <code>mt5linux</code></p> </li> <li> <code>*args</code>               (<code>list</code>, default:                   <code>()</code> )           \u2013            <p><code>Exchange</code> list parameters</p> </li> <li> <code>**kwargs</code>               (<code>dict</code>, default:                   <code>{}</code> )           \u2013            <p><code>Exchange</code> dict parameters</p> </li> </ul> Source code in <code>lettrade/exchange/live/exchange.py</code> <pre><code>def __init__(self, api: LiveAPI, *args, **kwargs):\n    \"\"\"_summary_\n\n    Args:\n        api (LiveAPI): API connect to rpyc MeTrader 5 Terminal server through module `mt5linux`\n        *args (list): `Exchange` list parameters\n        **kwargs (dict): `Exchange` dict parameters\n    \"\"\"\n    super().__init__(*args, **kwargs)\n    self._api = api\n</code></pre>"},{"location":"reference/exchange/live/metatrader/metatrader/#lettrade.exchange.live.metatrader.metatrader.MetaTraderExchange.data","title":"data  <code>instance-attribute</code>","text":"<pre><code>data: DataFeed\n</code></pre> <p>main DataFeed</p>"},{"location":"reference/exchange/live/metatrader/metatrader/#lettrade.exchange.live.metatrader.metatrader.MetaTraderExchange.datas","title":"datas  <code>instance-attribute</code>","text":"<pre><code>datas: list[DataFeed]\n</code></pre> <p>List of all available DataFeed</p>"},{"location":"reference/exchange/live/metatrader/metatrader/#lettrade.exchange.live.metatrader.metatrader.MetaTraderExchange.executions","title":"executions  <code>instance-attribute</code>","text":"<pre><code>executions: dict[str, Execution]\n</code></pre> <p>Execution dict by <code>Execution.id</code> key</p>"},{"location":"reference/exchange/live/metatrader/metatrader/#lettrade.exchange.live.metatrader.metatrader.MetaTraderExchange.history_orders","title":"history_orders  <code>instance-attribute</code>","text":"<pre><code>history_orders: dict[str, Order] = dict()\n</code></pre> <p>History Order dict by <code>Order.id</code> key</p>"},{"location":"reference/exchange/live/metatrader/metatrader/#lettrade.exchange.live.metatrader.metatrader.MetaTraderExchange.history_positions","title":"history_positions  <code>instance-attribute</code>","text":"<pre><code>history_positions: dict[str, Position] = dict()\n</code></pre> <p>History Position dict by <code>Position.id</code> key</p>"},{"location":"reference/exchange/live/metatrader/metatrader/#lettrade.exchange.live.metatrader.metatrader.MetaTraderExchange.orders","title":"orders  <code>instance-attribute</code>","text":"<pre><code>orders: dict[str, Order] = dict()\n</code></pre> <p>Available Order dict by <code>Order.id</code> key</p>"},{"location":"reference/exchange/live/metatrader/metatrader/#lettrade.exchange.live.metatrader.metatrader.MetaTraderExchange.positions","title":"positions  <code>instance-attribute</code>","text":"<pre><code>positions: dict[str, Position] = dict()\n</code></pre> <p>Available Position dict by <code>Position.id</code> key</p>"},{"location":"reference/exchange/live/metatrader/metatrader/#lettrade.exchange.live.metatrader.metatrader.MetaTraderExchange.init","title":"init","text":"<pre><code>init(\n    brain: Brain,\n    feeder: DataFeeder,\n    account: Account,\n    commander: Commander,\n) -&gt; None\n</code></pre> <p>Init Exchange dependencies. Set data/datas from feeder. Set state to <code>ExchangeState.Start</code>.</p> <p>Parameters:</p> <ul> <li> <code>brain</code>               (<code>Brain</code>)           \u2013            <p>description</p> </li> <li> <code>feeder</code>               (<code>DataFeeder</code>)           \u2013            <p>description</p> </li> <li> <code>account</code>               (<code>Account</code>)           \u2013            <p>description</p> </li> <li> <code>commander</code>               (<code>Commander</code>)           \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def init(\n    self,\n    brain: \"Brain\",\n    feeder: DataFeeder,\n    account: Account,\n    commander: Commander,\n) -&gt; None:\n    \"\"\"Init Exchange dependencies.\n    Set data/datas from feeder.\n    Set state to `ExchangeState.Start`.\n\n    Args:\n        brain (Brain): _description_\n        feeder (DataFeeder): _description_\n        account (Account): _description_\n        commander (Commander): _description_\n    \"\"\"\n    self._brain = brain\n    self._feeder = feeder\n    self._account = account\n    self._commander = commander\n\n    self.data = self._feeder.data\n    self.datas = self._feeder.datas\n\n    self._account.init(exchange=self)\n\n    self._state = ExchangeState.Start\n</code></pre>"},{"location":"reference/exchange/live/metatrader/metatrader/#lettrade.exchange.live.metatrader.metatrader.MetaTraderExchange.new_order","title":"new_order","text":"<pre><code>new_order(\n    size: float,\n    type: Optional[OrderType] = OrderType.Market,\n    limit: Optional[float] = None,\n    stop: Optional[float] = None,\n    sl: Optional[float] = None,\n    tp: Optional[float] = None,\n    tag: Optional[str] = None,\n    data: Optional[DataFeed] = None,\n    *args,\n    **kwargs\n) -&gt; OrderResult\n</code></pre> <p>Place new order to server</p> <p>Parameters:</p> <ul> <li> <code>size</code>               (<code>float</code>)           \u2013            <p>description</p> </li> <li> <code>type</code>               (<code>Optional[OrderType]</code>, default:                   <code>Market</code> )           \u2013            <p>description. Defaults to OrderType.Market.</p> </li> <li> <code>limit</code>               (<code>Optional[float]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>stop</code>               (<code>Optional[float]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>sl</code>               (<code>Optional[float]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>tp</code>               (<code>Optional[float]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>tag</code>               (<code>Optional[str]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>data</code>               (<code>Optional[DataFeed]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>OrderResult</code> (              <code>OrderResult</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/live/exchange.py</code> <pre><code>def new_order(\n    self,\n    size: float,\n    type: Optional[OrderType] = OrderType.Market,\n    limit: Optional[float] = None,\n    stop: Optional[float] = None,\n    sl: Optional[float] = None,\n    tp: Optional[float] = None,\n    tag: Optional[str] = None,\n    data: Optional[DataFeed] = None,\n    *args,\n    **kwargs\n) -&gt; OrderResult:\n    \"\"\"Place new order to server\n\n    Args:\n        size (float): _description_\n        type (Optional[OrderType], optional): _description_. Defaults to OrderType.Market.\n        limit (Optional[float], optional): _description_. Defaults to None.\n        stop (Optional[float], optional): _description_. Defaults to None.\n        sl (Optional[float], optional): _description_. Defaults to None.\n        tp (Optional[float], optional): _description_. Defaults to None.\n        tag (Optional[str], optional): _description_. Defaults to None.\n        data (Optional[DataFeed], optional): _description_. Defaults to None.\n\n    Returns:\n        OrderResult: _description_\n    \"\"\"\n    if not data:\n        data = self.data\n\n    if type == OrderType.Market:\n        limit = 0\n        stop = 0\n\n    order = self._order_cls(\n        id=-1,\n        exchange=self,\n        data=data,\n        size=size,\n        type=type,\n        limit_price=limit,\n        stop_price=stop,\n        sl_price=sl,\n        tp_price=tp,\n        tag=tag,\n    )\n    ok = order.place()\n\n    # if __debug__:\n    #     logger.info(\"New order %s at %s\", order, self.data.now)\n\n    return ok\n</code></pre>"},{"location":"reference/exchange/live/metatrader/metatrader/#lettrade.exchange.live.metatrader.metatrader.MetaTraderExchange.next_next","title":"next_next","text":"<pre><code>next_next()\n</code></pre> <p>Call after strategy.next()</p> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def next_next(self):\n    \"Call after strategy.next()\"\n    self._account._equity_snapshot()\n</code></pre>"},{"location":"reference/exchange/live/metatrader/metatrader/#lettrade.exchange.live.metatrader.metatrader.MetaTraderExchange.on_execution","title":"on_execution","text":"<pre><code>on_execution(\n    execution: Execution,\n    broadcast: Optional[bool] = True,\n    **kwargs\n) -&gt; None\n</code></pre> <p>Receive Execution event from exchange then store and notify Brain</p> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def on_execution(\n    self,\n    execution: Execution,\n    broadcast: Optional[bool] = True,\n    **kwargs,\n) -&gt; None:\n    \"\"\"\n    Receive Execution event from exchange then store and notify Brain\n    \"\"\"\n    if self.executions is None:\n        logger.warning(\n            \"Execution transaction is disable, enable by flag: show_execution=True\"\n        )\n        return\n\n    if not isinstance(execution, Execution):\n        raise RuntimeError(f\"{execution} is not instance of type Execution\")\n\n    if execution.id in self.executions:\n        # Merge to keep Execution handler for strategy using\n        # when strategy want to store Execution object\n        # and object will be automatic update directly\n        self.executions[execution.id].merge(execution)\n        execution = self.executions[execution.id]\n    else:\n        self.executions[execution.id] = execution\n\n    if self._state != ExchangeState.Run:\n        return\n\n    if broadcast:\n        self._brain.on_execution(execution)\n</code></pre>"},{"location":"reference/exchange/live/metatrader/metatrader/#lettrade.exchange.live.metatrader.metatrader.MetaTraderExchange.on_order","title":"on_order","text":"<pre><code>on_order(\n    order: Order, broadcast: Optional[bool] = True, **kwargs\n) -&gt; None\n</code></pre> <p>Receive Order event from exchange then store and notify Brain</p> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def on_order(\n    self,\n    order: Order,\n    broadcast: Optional[bool] = True,\n    **kwargs,\n) -&gt; None:\n    \"\"\"\n    Receive Order event from exchange then store and notify Brain\n    \"\"\"\n    if not isinstance(order, Order):\n        raise RuntimeError(f\"{order} is not instance of type Order\")\n\n    if order.state in [OrderState.Filled, OrderState.Canceled]:\n        self.history_orders[order.id] = order\n        if order.id in self.orders:\n            del self.orders[order.id]\n    else:\n        if order.id in self.history_orders:\n            raise RuntimeError(f\"Order {order.id} closed\")\n\n        if order.id in self.orders:\n            # Merge to keep Order handler for strategy using\n            # when strategy want to store Order object\n            # and object will be automatic update directly\n            self.orders[order.id].merge(order)\n            order = self.orders[order.id]\n        else:\n            self.orders[order.id] = order\n\n    if self._state != ExchangeState.Run:\n        return\n\n    if broadcast:\n        self._brain.on_order(order)\n</code></pre>"},{"location":"reference/exchange/live/metatrader/metatrader/#lettrade.exchange.live.metatrader.metatrader.MetaTraderExchange.on_position","title":"on_position","text":"<pre><code>on_position(\n    position: Position,\n    broadcast: Optional[bool] = True,\n    *args,\n    **kwargs\n) -&gt; None\n</code></pre> <p>Receive Position event from exchange then store and notify Brain</p> <p>Parameters:</p> <ul> <li> <code>position</code>               (<code>Position</code>)           \u2013            <p>new comming <code>Position</code></p> </li> <li> <code>broadcast</code>               (<code>Optional[bool]</code>, default:                   <code>True</code> )           \u2013            <p>Flag notify for Brain. Defaults to True.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>validat <code>Position</code> instance</p> </li> </ul> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def on_position(\n    self,\n    position: Position,\n    broadcast: Optional[bool] = True,\n    *args,\n    **kwargs,\n) -&gt; None:\n    \"\"\"Receive Position event from exchange then store and notify Brain\n\n    Args:\n        position (Position): new comming `Position`\n        broadcast (Optional[bool], optional): Flag notify for Brain. Defaults to True.\n\n    Raises:\n        RuntimeError: validat `Position` instance\n    \"\"\"\n    if not isinstance(position, Position):\n        raise RuntimeError(f\"{position} is not instance of type Position\")\n\n    if position.state == PositionState.Exit:\n        self.history_positions[position.id] = position\n        if position.id in self.positions:\n            del self.positions[position.id]\n\n        self._account._on_position_exit(position)\n    else:\n        if position.id in self.history_positions:\n            raise RuntimeError(f\"Order {position.id} closed\")\n        if position.id in self.positions:\n            # Merge to keep Position handler for strategy using\n            # when strategy want to store Position object\n            # and object will be automatic update directly\n            self.positions[position.id].merge(position)\n            position = self.positions[position.id]\n        else:\n            self.positions[position.id] = position\n            self._account._on_position_entry(position)\n\n    if self._state != ExchangeState.Run:\n        return\n\n    if broadcast:\n        self._brain.on_position(position)\n</code></pre>"},{"location":"reference/exchange/live/metatrader/metatrader/#lettrade.exchange.live.metatrader.metatrader.MetaTraderExchange.start","title":"start","text":"<pre><code>start() -&gt; None\n</code></pre> <p>Start Live exchange by: Sync positions from server</p> Source code in <code>lettrade/exchange/live/exchange.py</code> <pre><code>def start(self) -&gt; None:\n    \"\"\"Start Live exchange by: Sync positions from server\"\"\"\n    self._api.start(exchange=self)\n    return super().start()\n</code></pre>"},{"location":"reference/exchange/live/metatrader/metatrader/#lettrade.exchange.live.metatrader.metatrader.MetaTraderExchange.stop","title":"stop","text":"<pre><code>stop() -&gt; None\n</code></pre> <p>Stop Exchange</p> Source code in <code>lettrade/exchange/exchange.py</code> <pre><code>def stop(self) -&gt; None:\n    \"\"\"Stop Exchange\"\"\"\n    self._state = ExchangeState.Stop\n    self._account.stop()\n</code></pre>"},{"location":"reference/exchange/live/metatrader/metatrader/#lettrade.exchange.live.metatrader.metatrader.MetaTraderExecution","title":"MetaTraderExecution","text":"<pre><code>MetaTraderExecution(\n    id: str,\n    exchange: LiveExchange,\n    data: DataFeed,\n    size: float,\n    price: float,\n    at: float,\n    order_id: Optional[str] = None,\n    order: Optional[Order] = None,\n    position_id: Optional[str] = None,\n    position: Optional[Position] = None,\n    api: Optional[LiveAPI] = None,\n    raw: Optional[object] = None,\n    **kwargs\n)\n</code></pre> <p>               Bases: <code>LiveExecution</code></p> <p>Execution for MetaTrader</p> Source code in <code>lettrade/exchange/live/trade.py</code> <pre><code>def __init__(\n    self,\n    id: str,\n    exchange: \"LiveExchange\",\n    data: \"DataFeed\",\n    size: float,\n    price: float,\n    at: float,\n    order_id: Optional[str] = None,\n    order: Optional[\"Order\"] = None,\n    position_id: Optional[str] = None,\n    position: Optional[\"Position\"] = None,\n    # tag: Optional[str] = \"\",\n    api: Optional[LiveAPI] = None,\n    raw: Optional[object] = None,\n    **kwargs,\n):\n    super().__init__(\n        id=id,\n        exchange=exchange,\n        data=data,\n        size=size,\n        price=price,\n        at=at,\n        order_id=order_id,\n        order=order,\n        position_id=position_id,\n        position=position,\n        api=api,\n        raw=raw,\n        **kwargs,\n    )\n</code></pre>"},{"location":"reference/exchange/live/metatrader/metatrader/#lettrade.exchange.live.metatrader.metatrader.MetaTraderExecution.is_long","title":"is_long  <code>property</code>","text":"<pre><code>is_long: bool\n</code></pre> <p>True if side is long (size is positive).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True/False</p> </li> </ul>"},{"location":"reference/exchange/live/metatrader/metatrader/#lettrade.exchange.live.metatrader.metatrader.MetaTraderExecution.is_short","title":"is_short  <code>property</code>","text":"<pre><code>is_short: bool\n</code></pre> <p>True if side is short (size is negative).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/live/metatrader/metatrader/#lettrade.exchange.live.metatrader.metatrader.MetaTraderExecution.side","title":"side  <code>property</code>","text":"<pre><code>side: TradeSide\n</code></pre> <p>True if side is short (size is negative).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>TradeSide</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/live/metatrader/metatrader/#lettrade.exchange.live.metatrader.metatrader.MetaTraderExecution.from_raw","title":"from_raw  <code>classmethod</code>","text":"<pre><code>from_raw(\n    raw,\n    exchange: MetaTraderExchange,\n    api: MetaTraderAPI = None,\n) -&gt; MetaTraderExecution\n</code></pre> <p>Building new MetaTraderExecution from live api raw object</p> <p>Parameters:</p> <ul> <li> <code>raw</code>               (<code>_type_</code>)           \u2013            <p>description</p> </li> <li> <code>exchange</code>               (<code>MetaTraderExchange</code>)           \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>MetaTraderExecution</code> (              <code>MetaTraderExecution</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/live/metatrader/metatrader.py</code> <pre><code>@classmethod\ndef from_raw(\n    cls,\n    raw,\n    exchange: \"MetaTraderExchange\",\n    api: MetaTraderAPI = None,\n) -&gt; \"MetaTraderExecution\":\n    \"\"\"Building new MetaTraderExecution from live api raw object\n\n    Args:\n        raw (_type_): _description_\n        exchange (MetaTraderExchange): _description_\n\n    Returns:\n        MetaTraderExecution: _description_\n    \"\"\"\n\n    return cls(\n        exchange=exchange,\n        id=raw.ticket,\n        # TODO: Fix by get data from symbol\n        data=exchange.data,\n        # TODO: size and type from raw.type\n        size=raw.volume,\n        price=raw.price,\n        # TODO: set bar time\n        at=None,\n        order_id=raw.order,\n        position_id=raw.position_id,\n        tag=raw.comment,\n        api=api,\n        raw=raw,\n    )\n</code></pre>"},{"location":"reference/exchange/live/metatrader/metatrader/#lettrade.exchange.live.metatrader.metatrader.MetaTraderExecution.merge","title":"merge","text":"<pre><code>merge(other: Execution)\n</code></pre> <p>Merge to keep object handler but not overwrite for Strategy using when Strategy want to store object and object will be automatic update directly</p> Source code in <code>lettrade/exchange/execution.py</code> <pre><code>def merge(self, other: \"Execution\"):\n    \"\"\"\n    Merge to keep object handler but not overwrite for Strategy using when Strategy want to store object and object will be automatic update directly\n    \"\"\"\n    if other is self:\n        return\n\n    if self.id != other.id:\n        raise RuntimeError(f\"Merge difference id {self.id} != {other.id} execution\")\n\n    self.price = other.price\n    self.size = other.size\n\n    if other.at:\n        self.at = other.at\n    if other.order_id:\n        self.order_id = other.order_id\n    if other.order:\n        self.order = other.order\n    if other.position_id:\n        self.position_id = other.position_id\n    if other.position:\n        self.position = other.position\n</code></pre>"},{"location":"reference/exchange/live/metatrader/metatrader/#lettrade.exchange.live.metatrader.metatrader.MetaTraderOrder","title":"MetaTraderOrder","text":"<pre><code>MetaTraderOrder(\n    id: str,\n    exchange: LiveExchange,\n    data: DataFeed,\n    size: float,\n    state: OrderState = OrderState.Pending,\n    type: OrderType = OrderType.Market,\n    limit_price: Optional[float] = None,\n    stop_price: Optional[float] = None,\n    sl_price: Optional[float] = None,\n    tp_price: Optional[float] = None,\n    parent: Optional[Position] = None,\n    tag: Optional[str] = \"\",\n    api: Optional[LiveAPI] = None,\n    raw: Optional[object] = None,\n    **kwargs\n)\n</code></pre> <p>               Bases: <code>LiveOrder</code></p> <p>Order for MetaTrader</p> Source code in <code>lettrade/exchange/live/trade.py</code> <pre><code>def __init__(\n    self,\n    id: str,\n    exchange: \"LiveExchange\",\n    data: \"DataFeed\",\n    size: float,\n    state: OrderState = OrderState.Pending,\n    type: OrderType = OrderType.Market,\n    limit_price: Optional[float] = None,\n    stop_price: Optional[float] = None,\n    sl_price: Optional[float] = None,\n    tp_price: Optional[float] = None,\n    parent: Optional[\"Position\"] = None,\n    tag: Optional[str] = \"\",\n    api: Optional[LiveAPI] = None,\n    raw: Optional[object] = None,\n    **kwargs,\n):\n    super().__init__(\n        id=id,\n        exchange=exchange,\n        data=data,\n        size=size,\n        state=state,\n        type=type,\n        limit_price=limit_price,\n        stop_price=stop_price,\n        sl_price=sl_price,\n        tp_price=tp_price,\n        parent=parent,\n        tag=tag,\n        api=api,\n        raw=raw,\n        **kwargs,\n    )\n</code></pre>"},{"location":"reference/exchange/live/metatrader/metatrader/#lettrade.exchange.live.metatrader.metatrader.MetaTraderOrder.is_closed","title":"is_closed  <code>property</code>","text":"<pre><code>is_closed: bool\n</code></pre> <p>Flag to check <code>Order</code> closed</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True if <code>state</code> in [OrderState.Filled, OrderState.Canceled]</p> </li> </ul>"},{"location":"reference/exchange/live/metatrader/metatrader/#lettrade.exchange.live.metatrader.metatrader.MetaTraderOrder.is_long","title":"is_long  <code>property</code>","text":"<pre><code>is_long: bool\n</code></pre> <p>True if side is long (size is positive).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True/False</p> </li> </ul>"},{"location":"reference/exchange/live/metatrader/metatrader/#lettrade.exchange.live.metatrader.metatrader.MetaTraderOrder.is_opening","title":"is_opening  <code>property</code>","text":"<pre><code>is_opening: bool\n</code></pre> <p>Flag to check <code>Order</code> still alive</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True if <code>state</code> in [OrderState.Pending, OrderState.Placed, OrderState.Partial]</p> </li> </ul>"},{"location":"reference/exchange/live/metatrader/metatrader/#lettrade.exchange.live.metatrader.metatrader.MetaTraderOrder.is_short","title":"is_short  <code>property</code>","text":"<pre><code>is_short: bool\n</code></pre> <p>True if side is short (size is negative).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/live/metatrader/metatrader/#lettrade.exchange.live.metatrader.metatrader.MetaTraderOrder.is_sl_order","title":"is_sl_order  <code>property</code>","text":"<pre><code>is_sl_order: bool\n</code></pre> <p><code>Order</code> is stop-loss order of a <code>Position</code></p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/live/metatrader/metatrader/#lettrade.exchange.live.metatrader.metatrader.MetaTraderOrder.is_tp_order","title":"is_tp_order  <code>property</code>","text":"<pre><code>is_tp_order: bool\n</code></pre> <p><code>Order</code> is take-profit order of a <code>Position</code></p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/live/metatrader/metatrader/#lettrade.exchange.live.metatrader.metatrader.MetaTraderOrder.limit","title":"limit  <code>property</code>","text":"<pre><code>limit: Optional[float]\n</code></pre> <p>Getter of limit_price</p> <p>Returns:</p> <ul> <li> <code>Optional[float]</code>           \u2013            <p>Optional[float]: <code>float</code> or <code>None</code></p> </li> </ul>"},{"location":"reference/exchange/live/metatrader/metatrader/#lettrade.exchange.live.metatrader.metatrader.MetaTraderOrder.place_price","title":"place_price  <code>property</code>","text":"<pre><code>place_price: Optional[float]\n</code></pre> <p>Getter of place_price</p> <p>Returns:</p> <ul> <li> <code>Optional[float]</code>           \u2013            <p>Optional[float]: <code>float</code> or <code>None</code></p> </li> </ul>"},{"location":"reference/exchange/live/metatrader/metatrader/#lettrade.exchange.live.metatrader.metatrader.MetaTraderOrder.side","title":"side  <code>property</code>","text":"<pre><code>side: TradeSide\n</code></pre> <p>True if side is short (size is negative).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>TradeSide</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/live/metatrader/metatrader/#lettrade.exchange.live.metatrader.metatrader.MetaTraderOrder.sl","title":"sl  <code>property</code>","text":"<pre><code>sl: Optional[float]\n</code></pre> <p>Getter of sl_price</p> <p>Returns:</p> <ul> <li> <code>Optional[float]</code>           \u2013            <p>Optional[float]: <code>float</code> or <code>None</code></p> </li> </ul>"},{"location":"reference/exchange/live/metatrader/metatrader/#lettrade.exchange.live.metatrader.metatrader.MetaTraderOrder.stop","title":"stop  <code>property</code>","text":"<pre><code>stop: Optional[float]\n</code></pre> <p>Getter of stop_price</p> <p>Returns:</p> <ul> <li> <code>Optional[float]</code>           \u2013            <p>Optional[float]: <code>float</code> or <code>None</code></p> </li> </ul>"},{"location":"reference/exchange/live/metatrader/metatrader/#lettrade.exchange.live.metatrader.metatrader.MetaTraderOrder.tp","title":"tp  <code>property</code>","text":"<pre><code>tp: Optional[float]\n</code></pre> <p>Getter of tp_price</p> <p>Returns:</p> <ul> <li> <code>Optional[float]</code>           \u2013            <p>Optional[float]: <code>float</code> or <code>None</code></p> </li> </ul>"},{"location":"reference/exchange/live/metatrader/metatrader/#lettrade.exchange.live.metatrader.metatrader.MetaTraderOrder.fill","title":"fill","text":"<pre><code>fill(price: float, at: Timestamp) -&gt; OrderResult\n</code></pre> <p>Fill <code>Order</code>. Set <code>status</code> to <code>OrderState.Executed</code>. Send event to <code>Exchange</code></p> <p>Parameters:</p> <ul> <li> <code>price</code>               (<code>float</code>)           \u2013            <p>Executed price</p> </li> <li> <code>at</code>               (<code>Timestamp</code>)           \u2013            <p>Executed bar</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>OrderResult</code> (              <code>OrderResult</code> )          \u2013            <p>result of <code>Order</code></p> </li> </ul> Source code in <code>lettrade/exchange/order.py</code> <pre><code>def fill(self, price: float, at: pd.Timestamp) -&gt; \"OrderResult\":\n    \"\"\"Fill `Order`.\n    Set `status` to `OrderState.Executed`.\n    Send event to `Exchange`\n\n    Args:\n        price (float): Executed price\n        at (pd.Timestamp): Executed bar\n\n    Raises:\n        RuntimeError: _description_\n\n    Returns:\n        OrderResult: result of `Order`\n    \"\"\"\n    if self.state != OrderState.Placed:\n        raise RuntimeError(f\"Order {self.id} state {self.state} is not Placed\")\n\n    self.filled_at = at\n    self.filled_price = price\n    self.state = OrderState.Filled\n    self.exchange.on_order(self)\n    return OrderResultOk(order=self)\n</code></pre>"},{"location":"reference/exchange/live/metatrader/metatrader/#lettrade.exchange.live.metatrader.metatrader.MetaTraderOrder.from_position","title":"from_position  <code>classmethod</code>","text":"<pre><code>from_position(\n    position: MetaTraderPosition, sl=None, tp=None\n) -&gt; MetaTraderOrder\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>position</code>               (<code>MetaTraderPosition</code>)           \u2013            <p>description</p> </li> <li> <code>sl</code>               (<code>_type_</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>tp</code>               (<code>_type_</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>_type_</code> (              <code>MetaTraderOrder</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/live/metatrader/metatrader.py</code> <pre><code>@classmethod\ndef from_position(\n    cls, position: \"MetaTraderPosition\", sl=None, tp=None\n) -&gt; \"MetaTraderOrder\":\n    \"\"\"_summary_\n\n    Args:\n        position (MetaTraderPosition): _description_\n        sl (_type_, optional): _description_. Defaults to None.\n        tp (_type_, optional): _description_. Defaults to None.\n\n    Raises:\n        RuntimeError: _description_\n\n    Returns:\n        _type_: _description_\n    \"\"\"\n    if not sl and not tp:\n        raise RuntimeError(\"not sl and not tp\")\n    return cls(\n        id=f\"{position.id}-{'sl' if sl else 'tp'}\",\n        exchange=position.exchange,\n        data=position.data,\n        state=OrderState.Placed,\n        type=OrderType.Stop if sl else OrderType.Limit,\n        size=-position.size,\n        limit_price=tp,\n        stop_price=sl,\n        parent=position,\n        placed_at=position.entry_at,\n    )\n</code></pre>"},{"location":"reference/exchange/live/metatrader/metatrader/#lettrade.exchange.live.metatrader.metatrader.MetaTraderOrder.from_raw","title":"from_raw  <code>classmethod</code>","text":"<pre><code>from_raw(\n    raw,\n    exchange: MetaTraderExchange,\n    api: MetaTraderAPI = None,\n) -&gt; Optional[MetaTraderOrder]\n</code></pre> <p>summary</p> <p>Raises:</p> <ul> <li> <code>NotImplementedError</code>             \u2013            <p>description</p> </li> <li> <code>NotImplementedError</code>             \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>_type_</code> (              <code>Optional[MetaTraderOrder]</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/live/metatrader/metatrader.py</code> <pre><code>@classmethod\ndef from_raw(\n    cls,\n    raw,\n    exchange: \"MetaTraderExchange\",\n    api: MetaTraderAPI = None,\n) -&gt; Optional[\"MetaTraderOrder\"]:\n    \"\"\"_summary_\n\n    Raises:\n        NotImplementedError: _description_\n        NotImplementedError: _description_\n\n    Returns:\n        _type_: _description_\n    \"\"\"\n    # DataFeed\n    data = None\n    for d in exchange.datas:\n        if d.symbol == raw.symbol:\n            data = d\n            break\n    if data is None:\n        logger.warning(\"Raw order %s is not handling %s\", raw.symbol, raw)\n        return\n\n    # Prices &amp; Side &amp; Type\n    limit_price = None\n    stop_price = None\n    match raw.type:\n        case MT5.ORDER_TYPE_BUY:\n            side = TradeSide.Buy\n            type = OrderType.Market\n        case MT5.ORDER_TYPE_SELL:\n            side = TradeSide.Sell\n            type = OrderType.Market\n        case MT5.ORDER_TYPE_BUY_LIMIT:\n            side = TradeSide.Buy\n            type = OrderType.Limit\n            limit_price = raw.price_open\n        case MT5.ORDER_TYPE_SELL_LIMIT:\n            side = TradeSide.Sell\n            type = OrderType.Limit\n            limit_price = raw.price_open\n        case MT5.ORDER_TYPE_BUY_STOP:\n            side = TradeSide.Buy\n            type = OrderType.Stop\n            stop_price = raw.price_open\n        case MT5.ORDER_TYPE_SELL_STOP:\n            side = TradeSide.Sell\n            type = OrderType.Stop\n            stop_price = raw.price_open\n        # case MT5.ORDER_TYPE_BUY_STOP_LIMIT:\n        #     side = TradeSide.Buy\n        #     type = OrderType.StopLimit\n        #     # TODO\n        #     limit_price = raw.price_open\n        #     stop_price = raw.price_open\n        # case MT5.ORDER_TYPE_SELL_STOP_LIMIT:\n        #     side = TradeSide.Sell\n        #     type = OrderType.StopLimit\n        #     # TODO\n        #     limit_price = raw.price_open\n        #     stop_price = raw.price_open\n        # case MT5.ORDER_TYPE_CLOSE_BY:\n        case _:\n            raise NotImplementedError(\n                f\"Order type {raw.type} is not implement\",\n                raw,\n            )\n    # State\n    match raw.state:\n        case MT5.ORDER_STATE_STARTED:\n            state = OrderState.Pending\n        case MT5.ORDER_STATE_PLACED:\n            state = OrderState.Placed\n        case MT5.ORDER_STATE_CANCELED:\n            state = OrderState.Canceled\n        case MT5.ORDER_STATE_PARTIAL:\n            state = OrderState.Partial\n        case MT5.ORDER_STATE_FILLED:\n            state = OrderState.Filled\n        case MT5.ORDER_STATE_REJECTED:\n            state = OrderState.Canceled\n        case MT5.ORDER_STATE_EXPIRED:\n            state = OrderState.Canceled\n        case MT5.ORDER_STATE_REQUEST_ADD:\n            state = OrderState.Placed\n        case MT5.ORDER_STATE_REQUEST_MODIFY:\n            state = OrderState.Placed\n        case MT5.ORDER_STATE_REQUEST_CANCEL:\n            state = OrderState.Canceled\n        case _:\n            raise NotImplementedError(\n                f\"Raw order state {raw.state} is not implement\"\n            )\n\n    order = cls(\n        exchange=exchange,\n        id=raw.ticket,\n        state=state,\n        data=data,\n        size=side * (raw.volume_current or raw.volume_initial),\n        type=type,\n        limit_price=limit_price,\n        stop_price=stop_price,\n        sl_price=raw.sl or None,\n        tp_price=raw.tp or None,\n        tag=raw.comment,\n        api=api,\n        raw=raw,\n        placed_at=pd.to_datetime(raw.time_setup_msc, unit=\"ms\", utc=True),\n    )\n\n    if hasattr(raw, \"time_done_msc\"):\n        order.filled_price = raw.price_current\n        order.filled_at = pd.to_datetime(raw.time_done_msc, unit=\"ms\", utc=True)\n\n    return order\n</code></pre>"},{"location":"reference/exchange/live/metatrader/metatrader/#lettrade.exchange.live.metatrader.metatrader.MetaTraderOrder.merge","title":"merge","text":"<pre><code>merge(other: Order)\n</code></pre> <p>Update current <code>Order</code> variables by other <code>Order</code></p> <p>Parameters:</p> <ul> <li> <code>other</code>               (<code>Order</code>)           \u2013            <p>Merge source <code>Order</code></p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>Validate same id</p> </li> </ul> Source code in <code>lettrade/exchange/order.py</code> <pre><code>def merge(self, other: \"Order\"):\n    \"\"\"Update current `Order` variables by other `Order`\n\n    Args:\n        other (Order): Merge source `Order`\n\n    Raises:\n        RuntimeError: Validate same id\n    \"\"\"\n    if other is self:\n        return\n\n    if self.id != other.id:\n        raise RuntimeError(f\"Merge difference id {self.id} != {other.id} order\")\n\n    self.size = other.size\n    self.sl_price = other.sl_price\n    self.tp_price = other.tp_price\n\n    if other.limit_price:\n        self.limit_price = other.limit_price\n    if other.stop_price:\n        self.stop_price = other.stop_price\n    if other.placed_at:\n        self.placed_at = other.placed_at\n\n    if other.filled_price:\n        self.filled_price = other.filled_price\n    if other.filled_at:\n        self.filled_at = other.filled_at\n\n    if other.parent:\n        self.parent = other.parent\n</code></pre>"},{"location":"reference/exchange/live/metatrader/metatrader/#lettrade.exchange.live.metatrader.metatrader.MetaTraderPosition","title":"MetaTraderPosition","text":"<pre><code>MetaTraderPosition(\n    id: str,\n    exchange: LiveExchange,\n    data: DataFeed,\n    size: float,\n    parent: Order,\n    tag: str = \"\",\n    state: PositionState = PositionState.Open,\n    entry_price: Optional[float] = None,\n    entry_at: Optional[int] = None,\n    sl_order: Optional[Order] = None,\n    tp_order: Optional[Order] = None,\n    api: Optional[LiveAPI] = None,\n    raw: Optional[object] = None,\n    **kwargs\n)\n</code></pre> <p>               Bases: <code>LivePosition</code></p> <p>Position for MetaTrader</p> Source code in <code>lettrade/exchange/live/trade.py</code> <pre><code>def __init__(\n    self,\n    id: str,\n    exchange: \"LiveExchange\",\n    data: \"DataFeed\",\n    size: float,\n    parent: Order,\n    tag: str = \"\",\n    state: PositionState = PositionState.Open,\n    entry_price: Optional[float] = None,\n    entry_at: Optional[int] = None,\n    sl_order: Optional[Order] = None,\n    tp_order: Optional[Order] = None,\n    api: Optional[LiveAPI] = None,\n    raw: Optional[object] = None,\n    **kwargs,\n):\n    super().__init__(\n        id=id,\n        exchange=exchange,\n        data=data,\n        size=size,\n        parent=parent,\n        tag=tag,\n        state=state,\n        entry_price=entry_price,\n        entry_at=entry_at,\n        sl_order=sl_order,\n        tp_order=tp_order,\n        api=api,\n        raw=raw,\n        **kwargs,\n    )\n</code></pre>"},{"location":"reference/exchange/live/metatrader/metatrader/#lettrade.exchange.live.metatrader.metatrader.MetaTraderPosition.fee","title":"fee  <code>property</code>","text":"<pre><code>fee: float\n</code></pre> <p>Fee/Estimate Fee for trade</p> <p>Returns:</p> <ul> <li> <code>float</code> (              <code>float</code> )          \u2013            <p>Fee</p> </li> </ul>"},{"location":"reference/exchange/live/metatrader/metatrader/#lettrade.exchange.live.metatrader.metatrader.MetaTraderPosition.is_exited","title":"is_exited  <code>property</code>","text":"<pre><code>is_exited: bool\n</code></pre> <p>Flag to check Position state.</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True if the trade exited</p> </li> </ul>"},{"location":"reference/exchange/live/metatrader/metatrader/#lettrade.exchange.live.metatrader.metatrader.MetaTraderPosition.is_long","title":"is_long  <code>property</code>","text":"<pre><code>is_long: bool\n</code></pre> <p>True if side is long (size is positive).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True/False</p> </li> </ul>"},{"location":"reference/exchange/live/metatrader/metatrader/#lettrade.exchange.live.metatrader.metatrader.MetaTraderPosition.is_opening","title":"is_opening  <code>property</code>","text":"<pre><code>is_opening: bool\n</code></pre> <p>Flag to check Position state.</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>True if the trade opening</p> </li> </ul>"},{"location":"reference/exchange/live/metatrader/metatrader/#lettrade.exchange.live.metatrader.metatrader.MetaTraderPosition.is_short","title":"is_short  <code>property</code>","text":"<pre><code>is_short: bool\n</code></pre> <p>True if side is short (size is negative).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/live/metatrader/metatrader/#lettrade.exchange.live.metatrader.metatrader.MetaTraderPosition.pl","title":"pl  <code>property</code>","text":"<pre><code>pl: float\n</code></pre> <p>Estimate Profit or Loss of Position</p> <p>Returns:</p> <ul> <li> <code>float</code> (              <code>float</code> )          \u2013            <p>PnL</p> </li> </ul>"},{"location":"reference/exchange/live/metatrader/metatrader/#lettrade.exchange.live.metatrader.metatrader.MetaTraderPosition.side","title":"side  <code>property</code>","text":"<pre><code>side: TradeSide\n</code></pre> <p>True if side is short (size is negative).</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>TradeSide</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/exchange/live/metatrader/metatrader/#lettrade.exchange.live.metatrader.metatrader.MetaTraderPosition.from_raw","title":"from_raw  <code>classmethod</code>","text":"<pre><code>from_raw(\n    raw,\n    exchange: MetaTraderExchange,\n    data: MetaTraderDataFeed = None,\n    api: MetaTraderAPI = None,\n) -&gt; MetaTraderPosition\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>raw</code>               (<code>_type_</code>)           \u2013            <p>description</p> </li> <li> <code>exchange</code>               (<code>MetaTraderExchange</code>)           \u2013            <p>description</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>NotImplementedError</code>             \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>MetaTraderPosition</code> (              <code>MetaTraderPosition</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/live/metatrader/metatrader.py</code> <pre><code>@classmethod\ndef from_raw(\n    cls,\n    raw,\n    exchange: \"MetaTraderExchange\",\n    data: MetaTraderDataFeed = None,\n    api: MetaTraderAPI = None,\n) -&gt; \"MetaTraderPosition\":\n    \"\"\"_summary_\n\n    Args:\n        raw (_type_): _description_\n        exchange (MetaTraderExchange): _description_\n\n    Raises:\n        NotImplementedError: _description_\n\n    Returns:\n        MetaTraderPosition: _description_\n    \"\"\"\n    # DataFeed\n    if data is None:\n        for d in exchange.datas:\n            if d.symbol == raw.symbol:\n                data = d\n                break\n        if data is None:\n            logger.warning(\"Raw position %s is not handling %s\", raw.symbol, raw)\n            return\n\n    # Side\n    match raw.type:\n        case MT5.POSITION_TYPE_BUY:\n            side = TradeSide.Buy\n        case MT5.POSITION_TYPE_SELL:\n            side = TradeSide.Sell\n        case _:\n            raise NotImplementedError(\n                f\"Position type {raw.type} is not implement\",\n                raw,\n            )\n\n    position = cls(\n        exchange=exchange,\n        id=raw.ticket,\n        data=data,\n        state=PositionState.Open,\n        size=side * raw.volume,\n        entry_price=raw.price_open,\n        parent=None,\n        tag=raw.comment,\n        raw=raw,\n        api=api,\n    )\n    position.entry_at = pd.to_datetime(raw.time_msc, unit=\"ms\", utc=True)\n\n    # SL\n    if raw.sl &gt; 0.0:\n        position.sl_order = exchange._order_cls.from_position(\n            position=position, sl=raw.sl\n        )\n        exchange.on_order(position.sl_order)\n\n    # TP\n    if raw.tp &gt; 0.0:\n        position.tp_order = exchange._order_cls.from_position(\n            position=position, tp=raw.tp\n        )\n        exchange.on_order(position.tp_order)\n\n    return position\n</code></pre>"},{"location":"reference/exchange/live/metatrader/metatrader/#lettrade.exchange.live.metatrader.metatrader.let_metatrader","title":"let_metatrader","text":"<pre><code>let_metatrader(\n    strategy: Type[Strategy],\n    datas: set[set[str]],\n    mt5_login: int,\n    mt5_password: str,\n    mt5_server: str,\n    mt5_wine: Optional[str] = None,\n    feeder: Type[\n        MetaTraderDataFeeder\n    ] = MetaTraderDataFeeder,\n    exchange: Type[MetaTraderExchange] = MetaTraderExchange,\n    account: Type[MetaTraderAccount] = MetaTraderAccount,\n    commander: Optional[Type[Commander]] = None,\n    plotter: Optional[Type[Plotter]] = None,\n    stats: Optional[Type[BotStatistic]] = BotStatistic,\n    bot: Optional[\n        Type[LetTradeMetaTraderBot]\n    ] = LetTradeMetaTraderBot,\n    lettrade: Optional[\n        Type[LetTradeMetaTrader]\n    ] = LetTradeMetaTrader,\n    api: Optional[Type[MetaTraderAPI]] = MetaTraderAPI,\n    **kwargs\n) -&gt; LetTradeMetaTrader\n</code></pre> <p>Help to build <code>LetTradeMetaTrader</code></p> <p>Parameters:</p> <ul> <li> <code>strategy</code>               (<code>Type[Strategy]</code>)           \u2013            <p>description</p> </li> <li> <code>datas</code>               (<code>set[set[str]]</code>)           \u2013            <p>description</p> </li> <li> <code>mt5_login</code>               (<code>int</code>)           \u2013            <p>description</p> </li> <li> <code>mt5_password</code>               (<code>str</code>)           \u2013            <p>description</p> </li> <li> <code>mt5_server</code>               (<code>str</code>)           \u2013            <p>description</p> </li> <li> <code>mt5_wine</code>               (<code>Optional[str]</code>, default:                   <code>None</code> )           \u2013            <p>WineHQ execute path. Defaults to None.</p> </li> <li> <code>feeder</code>               (<code>Type[MetaTraderDataFeeder]</code>, default:                   <code>MetaTraderDataFeeder</code> )           \u2013            <p>description. Defaults to MetaTraderDataFeeder.</p> </li> <li> <code>exchange</code>               (<code>Type[MetaTraderExchange]</code>, default:                   <code>MetaTraderExchange</code> )           \u2013            <p>description. Defaults to MetaTraderExchange.</p> </li> <li> <code>account</code>               (<code>Type[MetaTraderAccount]</code>, default:                   <code>MetaTraderAccount</code> )           \u2013            <p>description. Defaults to MetaTraderAccount.</p> </li> <li> <code>commander</code>               (<code>Optional[Type[Commander]]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>plotter</code>               (<code>Optional[Type[Plotter]]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>stats</code>               (<code>Optional[Type[BotStatistic]]</code>, default:                   <code>BotStatistic</code> )           \u2013            <p>description. Defaults to BotStatistic.</p> </li> <li> <code>bot</code>               (<code>Optional[Type[LetTradeMetaTraderBot]]</code>, default:                   <code>LetTradeMetaTraderBot</code> )           \u2013            <p>description. Defaults to LetTradeMetaTraderBot.</p> </li> <li> <code>lettrade</code>               (<code>Optional[Type[LetTradeMetaTrader]]</code>, default:                   <code>LetTradeMetaTrader</code> )           \u2013            <p>description. Defaults to LetTradeMetaTrader.</p> </li> <li> <code>api</code>               (<code>Optional[Type[MetaTraderAPI]]</code>, default:                   <code>MetaTraderAPI</code> )           \u2013            <p>description. Defaults to MetaTraderAPI.</p> </li> <li> <code>**kwargs</code>               (<code>dict</code>, default:                   <code>{}</code> )           \u2013            <p>All remaining properties are passed to the constructor of <code>LetTradeLive</code></p> </li> </ul> <p>Returns:</p> <ul> <li> <code>LetTradeMetaTrader</code> (              <code>LetTradeMetaTrader</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/exchange/live/metatrader/metatrader.py</code> <pre><code>def let_metatrader(\n    strategy: Type[Strategy],\n    datas: set[set[str]],\n    mt5_login: int,\n    mt5_password: str,\n    mt5_server: str,\n    mt5_wine: Optional[str] = None,\n    feeder: Type[MetaTraderDataFeeder] = MetaTraderDataFeeder,\n    exchange: Type[MetaTraderExchange] = MetaTraderExchange,\n    account: Type[MetaTraderAccount] = MetaTraderAccount,\n    commander: Optional[Type[Commander]] = None,\n    plotter: Optional[Type[Plotter]] = None,\n    stats: Optional[Type[BotStatistic]] = BotStatistic,\n    bot: Optional[Type[LetTradeMetaTraderBot]] = LetTradeMetaTraderBot,\n    lettrade: Optional[Type[LetTradeMetaTrader]] = LetTradeMetaTrader,\n    api: Optional[Type[MetaTraderAPI]] = MetaTraderAPI,\n    **kwargs,\n) -&gt; LetTradeMetaTrader:\n    \"\"\"Help to build `LetTradeMetaTrader`\n\n    Args:\n        strategy (Type[Strategy]): _description_\n        datas (set[set[str]]): _description_\n        mt5_login (int): _description_\n        mt5_password (str): _description_\n        mt5_server (str): _description_\n        mt5_wine (Optional[str], optional): WineHQ execute path. Defaults to None.\n        feeder (Type[MetaTraderDataFeeder], optional): _description_. Defaults to MetaTraderDataFeeder.\n        exchange (Type[MetaTraderExchange], optional): _description_. Defaults to MetaTraderExchange.\n        account (Type[MetaTraderAccount], optional): _description_. Defaults to MetaTraderAccount.\n        commander (Optional[Type[Commander]], optional): _description_. Defaults to None.\n        plotter (Optional[Type[Plotter]], optional): _description_. Defaults to None.\n        stats (Optional[Type[BotStatistic]], optional): _description_. Defaults to BotStatistic.\n        bot (Optional[Type[LetTradeMetaTraderBot]], optional): _description_. Defaults to LetTradeMetaTraderBot.\n        lettrade (Optional[Type[LetTradeMetaTrader]], optional): _description_. Defaults to LetTradeMetaTrader.\n        api (Optional[Type[MetaTraderAPI]], optional): _description_. Defaults to MetaTraderAPI.\n        **kwargs (dict): All remaining properties are passed to the constructor of `LetTradeLive`\n\n    Returns:\n        LetTradeMetaTrader: _description_\n    \"\"\"\n    api_kwargs: dict = kwargs.setdefault(\"api_kwargs\", {})\n    api_kwargs.update(\n        login=int(mt5_login),\n        password=mt5_password,\n        server=mt5_server,\n        wine=mt5_wine,\n    )\n\n    return let_live(\n        strategy=strategy,\n        datas=datas,\n        feeder=feeder,\n        exchange=exchange,\n        account=account,\n        commander=commander,\n        plotter=plotter,\n        stats=stats,\n        bot=bot,\n        lettrade=lettrade,\n        api=api,\n        **kwargs,\n    )\n</code></pre>"},{"location":"reference/indicator/","title":"Index","text":""},{"location":"reference/indicator/#lettrade.indicator","title":"indicator","text":""},{"location":"reference/indicator/function/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> function","text":""},{"location":"reference/indicator/function/#lettrade.indicator.function","title":"function","text":""},{"location":"reference/indicator/function/#lettrade.indicator.function.above","title":"above","text":"<pre><code>above(series1: Series, series2: Series) -&gt; Series\n</code></pre> <p>Check a Series is above another Series</p> <p>Parameters:</p> <ul> <li> <code>series1</code>               (<code>Series</code>)           \u2013            <p>first Series</p> </li> <li> <code>series2</code>               (<code>Series</code>)           \u2013            <p>second Series</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Series</code>           \u2013            <p>pd.Series: True series1 is above series2 else False</p> </li> </ul> Source code in <code>lettrade/indicator/function.py</code> <pre><code>def above(series1: pd.Series, series2: pd.Series) -&gt; pd.Series:\n    \"\"\"Check a Series is above another Series\n\n    Args:\n        series1 (pd.Series): first Series\n        series2 (pd.Series): second Series\n\n    Returns:\n        pd.Series: True series1 is above series2 else False\n    \"\"\"\n    diffed = diff(series1, series2)\n    return diffed.apply(lambda v: True if v &gt; 0 else False).astype(bool)\n</code></pre>"},{"location":"reference/indicator/function/#lettrade.indicator.function.below","title":"below","text":"<pre><code>below(series1: Series, series2: Series) -&gt; Series\n</code></pre> <p>Check a Series is below another Series</p> <p>Parameters:</p> <ul> <li> <code>series1</code>               (<code>Series</code>)           \u2013            <p>first Series</p> </li> <li> <code>series2</code>               (<code>Series</code>)           \u2013            <p>second Series</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Series</code>           \u2013            <p>pd.Series: True series1 is below series2 else False</p> </li> </ul> Source code in <code>lettrade/indicator/function.py</code> <pre><code>def below(series1: pd.Series, series2: pd.Series) -&gt; pd.Series:\n    \"\"\"Check a Series is below another Series\n\n    Args:\n        series1 (pd.Series): first Series\n        series2 (pd.Series): second Series\n\n    Returns:\n        pd.Series: True series1 is below series2 else False\n    \"\"\"\n    diffed = diff(series1, series2)\n    return diffed.apply(lambda v: True if v &lt; 0 else False).astype(bool)\n</code></pre>"},{"location":"reference/indicator/function/#lettrade.indicator.function.crossover","title":"crossover","text":"<pre><code>crossover(series1: Series, series2: Series) -&gt; Series\n</code></pre> <p>Check if a Series cross over another Series</p> <p>Parameters:</p> <ul> <li> <code>series1</code>               (<code>Series</code>)           \u2013            <p>first Series</p> </li> <li> <code>series2</code>               (<code>Series</code>)           \u2013            <p>second Series</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Series</code>           \u2013            <p>pd.Series: True if series1 cross over series2 else False</p> </li> </ul> Source code in <code>lettrade/indicator/function.py</code> <pre><code>def crossover(series1: pd.Series, series2: pd.Series) -&gt; pd.Series:\n    \"\"\"Check if a Series cross over another Series\n\n    Args:\n        series1 (pd.Series): first Series\n        series2 (pd.Series): second Series\n\n    Returns:\n        pd.Series: True if series1 cross over series2 else False\n    \"\"\"\n    below1 = below(series1, series2).shift(1)\n    above0 = above(series1, series2)\n    return below1 &amp; above0\n</code></pre>"},{"location":"reference/indicator/function/#lettrade.indicator.function.crossunder","title":"crossunder","text":"<pre><code>crossunder(series1: Series, series2: Series) -&gt; Series\n</code></pre> <p>Check if a Series cross under another Series</p> <p>Parameters:</p> <ul> <li> <code>series1</code>               (<code>Series</code>)           \u2013            <p>first Series</p> </li> <li> <code>series2</code>               (<code>Series</code>)           \u2013            <p>second Series</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Series</code>           \u2013            <p>pd.Series: True if series1 cross under series2 else False</p> </li> </ul> Source code in <code>lettrade/indicator/function.py</code> <pre><code>def crossunder(series1: pd.Series, series2: pd.Series) -&gt; pd.Series:\n    \"\"\"Check if a Series cross under another Series\n\n    Args:\n        series1 (pd.Series): first Series\n        series2 (pd.Series): second Series\n\n    Returns:\n        pd.Series: True if series1 cross under series2 else False\n    \"\"\"\n    above1 = above(series1, series2).shift(1)\n    below0 = below(series1, series2)\n    return below0 &amp; above1\n</code></pre>"},{"location":"reference/indicator/function/#lettrade.indicator.function.diff","title":"diff","text":"<pre><code>diff(series1: Series, series2: Series) -&gt; Series\n</code></pre> <p>Difference between 2 series</p> <p>Parameters:</p> <ul> <li> <code>series1</code>               (<code>Series</code>)           \u2013            <p>description</p> </li> <li> <code>series2</code>               (<code>Series</code>)           \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Series</code>           \u2013            <p>pd.Series: Diff of 2 series</p> </li> </ul> Source code in <code>lettrade/indicator/function.py</code> <pre><code>def diff(series1: pd.Series, series2: pd.Series) -&gt; pd.Series:\n    \"\"\"Difference between 2 series\n\n    Args:\n        series1 (pd.Series): _description_\n        series2 (pd.Series): _description_\n\n    Returns:\n        pd.Series: Diff of 2 series\n    \"\"\"\n    return series1 - series2\n</code></pre>"},{"location":"reference/indicator/indicator/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> indicator","text":""},{"location":"reference/indicator/indicator/#lettrade.indicator.indicator","title":"indicator","text":""},{"location":"reference/indicator/candlestick/","title":"Index","text":""},{"location":"reference/indicator/candlestick/#lettrade.indicator.candlestick","title":"candlestick","text":""},{"location":"reference/indicator/candlestick/candlestick/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> candlestick","text":""},{"location":"reference/indicator/candlestick/candlestick/#lettrade.indicator.candlestick.candlestick","title":"candlestick","text":""},{"location":"reference/indicator/candlestick/candlestick/#lettrade.indicator.candlestick.candlestick.cdl_direction","title":"cdl_direction","text":"<pre><code>cdl_direction(df: DataFrame, suffix: str = '') -&gt; Series\n</code></pre> <p>Direction of candle</p> <p>Parameters:</p> <ul> <li> <code>df</code>               (<code>DataFrame</code>)           \u2013            <p>description</p> </li> <li> <code>suffix</code>               (<code>str</code>, default:                   <code>''</code> )           \u2013            <p>description. Defaults to \"\".</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Series</code>           \u2013            <p>pd.Series: [100, 0 , -100] - <code>100</code> for bull bar - <code>-100</code> for bear bar - <code>0</code> for None</p> </li> </ul> Source code in <code>lettrade/indicator/candlestick/candlestick.py</code> <pre><code>def cdl_direction(df: pd.DataFrame, suffix: str = \"\") -&gt; pd.Series:\n    \"\"\"Direction of candle\n\n    Args:\n        df (pd.DataFrame): _description_\n        suffix (str, optional): _description_. Defaults to \"\".\n\n    Returns:\n        pd.Series: [100, 0 , -100]\n            - `100` for bull bar\n            - `-100` for bear bar\n            - `0` for None\n    \"\"\"\n    i = df.apply(\n        lambda r: 100 if r.open &lt; r.close else -100 if r.open &gt; r.close else 0,\n        axis=1,\n    ).astype(int)\n    # i = pd.Series(0, index=df.index, name=f\"cdl_direction{suffix}\")\n    # i.loc[(df.open &lt; df.close)] = 100\n    # i.loc[(df.open &gt; df.close)] = -100\n    i.name = f\"cdl_direction{suffix}\"\n    return i\n</code></pre>"},{"location":"reference/indicator/candlestick/talib/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> talib","text":""},{"location":"reference/indicator/candlestick/talib/#lettrade.indicator.candlestick.talib","title":"talib","text":""},{"location":"reference/indicator/candlestick/talib/#lettrade.indicator.candlestick.talib.cdl_3blackcrows","title":"cdl_3blackcrows","text":"<pre><code>cdl_3blackcrows(df: DataFrame, suffix: str = '') -&gt; Series\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>df</code>               (<code>DataFrame</code>)           \u2013            <p>description</p> </li> <li> <code>suffix</code>               (<code>str</code>, default:                   <code>''</code> )           \u2013            <p>description. Defaults to \"\".</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Series</code>           \u2013            <p>pd.Series: description</p> </li> </ul> Source code in <code>lettrade/indicator/candlestick/talib.py</code> <pre><code>def cdl_3blackcrows(df: pd.DataFrame, suffix: str = \"\") -&gt; pd.Series:\n    \"\"\"_summary_\n\n    Args:\n        df (pd.DataFrame): _description_\n        suffix (str, optional): _description_. Defaults to \"\".\n\n    Returns:\n        pd.Series: _description_\n    \"\"\"\n    i = ta.CDL3BLACKCROWS(df)\n    i.name = f\"3blackcrows{suffix}\"\n    return i\n</code></pre>"},{"location":"reference/indicator/candlestick/talib/#lettrade.indicator.candlestick.talib.cdl_3whitesoldiers","title":"cdl_3whitesoldiers","text":"<pre><code>cdl_3whitesoldiers(\n    df: DataFrame, suffix: str = \"\"\n) -&gt; Series\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>df</code>               (<code>DataFrame</code>)           \u2013            <p>description</p> </li> <li> <code>suffix</code>               (<code>str</code>, default:                   <code>''</code> )           \u2013            <p>description. Defaults to \"\".</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Series</code>           \u2013            <p>pd.Series: description</p> </li> </ul> Source code in <code>lettrade/indicator/candlestick/talib.py</code> <pre><code>def cdl_3whitesoldiers(df: pd.DataFrame, suffix: str = \"\") -&gt; pd.Series:\n    \"\"\"_summary_\n\n    Args:\n        df (pd.DataFrame): _description_\n        suffix (str, optional): _description_. Defaults to \"\".\n\n    Returns:\n        pd.Series: _description_\n    \"\"\"\n    i = ta.CDL3WHITESOLDIERS(df)\n    i.name = f\"3whitesoldiers{suffix}\"\n    return i\n</code></pre>"},{"location":"reference/indicator/vendor/","title":"Index","text":""},{"location":"reference/indicator/vendor/#lettrade.indicator.vendor","title":"vendor","text":""},{"location":"reference/indicator/vendor/fastfinance/","title":"Index","text":""},{"location":"reference/indicator/vendor/fastfinance/#lettrade.indicator.vendor.fastfinance","title":"fastfinance","text":""},{"location":"reference/indicator/vendor/fastfinance/connector/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> connector","text":""},{"location":"reference/indicator/vendor/fastfinance/connector/#lettrade.indicator.vendor.fastfinance.connector","title":"connector","text":""},{"location":"reference/indicator/vendor/fastfinance/fastfinance/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> fastfinance","text":""},{"location":"reference/indicator/vendor/fastfinance/fastfinance/#lettrade.indicator.vendor.fastfinance.fastfinance","title":"fastfinance","text":"<p>MIT License</p> <p>Copyright (c) 2021 RomFR57 rom.fr57@gmail.com</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"reference/indicator/vendor/fastfinance/fastfinance/#lettrade.indicator.vendor.fastfinance.fastfinance.adx","title":"adx","text":"<pre><code>adx(\n    c_open,\n    c_high,\n    c_low,\n    period_adx,\n    period_dm,\n    smoothing=2.0,\n)\n</code></pre> <p>Average Directionnal Index :type c_open: np.ndarray :type c_high: np.ndarray :type c_low: np.ndarray :type period_adx: int :type period_dm: int :type smoothing: float :rtype: np.ndarray</p> Source code in <code>lettrade/indicator/vendor/fastfinance/fastfinance.py</code> <pre><code>@jit(nopython=True)\ndef adx(c_open, c_high, c_low, period_adx, period_dm, smoothing=2.0):\n    \"\"\"\n    Average Directionnal Index\n    :type c_open: np.ndarray\n    :type c_high: np.ndarray\n    :type c_low: np.ndarray\n    :type period_adx: int\n    :type period_dm: int\n    :type smoothing: float\n    :rtype: np.ndarray\n    \"\"\"\n    up = np.concatenate((np.array([np.nan]), c_high[1:] - c_high[:-1]))\n    down = np.concatenate((np.array([np.nan]), c_low[:-1] - c_low[1:]))\n    dm_up = np.array([0] * len(up))\n    up_ids = up &gt; down\n    dm_up[up_ids] = up[up_ids]\n    dm_up[dm_up &lt; 0] = 0\n    dm_down = np.array([0] * len(down))\n    down_ids = down &gt; up\n    dm_down[down_ids] = down[down_ids]\n    dm_down[dm_down &lt; 0] = 0\n    avg_tr = atr(c_open, c_high, c_low, period_dm)\n    dm_up_avg = 100 * ema(dm_up, period_dm, smoothing) / avg_tr\n    dm_down_avg = 100 * ema(dm_down, period_dm, smoothing) / avg_tr\n    return ema(\n        100 * np.abs(dm_up_avg - dm_down_avg) / (dm_up_avg + dm_down_avg),\n        period_adx,\n        smoothing,\n    )\n</code></pre>"},{"location":"reference/indicator/vendor/fastfinance/fastfinance/#lettrade.indicator.vendor.fastfinance.fastfinance.aroon","title":"aroon","text":"<pre><code>aroon(data, period)\n</code></pre> <p>Aroon :type data: np.ndarray :type period: int :rtype: (np.ndarray, np.ndarray) :return: up, down</p> Source code in <code>lettrade/indicator/vendor/fastfinance/fastfinance.py</code> <pre><code>@jit(nopython=True)\ndef aroon(data, period):\n    \"\"\"\n    Aroon\n    :type data: np.ndarray\n    :type period: int\n    :rtype: (np.ndarray, np.ndarray)\n    :return: up, down\n    \"\"\"\n    size = len(data)\n    out_up = np.array([np.nan] * size)\n    out_down = np.array([np.nan] * size)\n    for i in range(period - 1, size):\n        window = np.flip(data[i + 1 - period : i + 1])\n        out_up[i] = ((period - window.argmax()) / period) * 100\n        out_down[i] = ((period - window.argmin()) / period) * 100\n    return out_up, out_down\n</code></pre>"},{"location":"reference/indicator/vendor/fastfinance/fastfinance/#lettrade.indicator.vendor.fastfinance.fastfinance.atr","title":"atr","text":"<pre><code>atr(c_open, c_high, c_low, period)\n</code></pre> <p>Average True Range :type c_open: np.ndarray :type c_high: np.ndarray :type c_low: np.ndarray :type period: int :rtype: np.ndarray</p> Source code in <code>lettrade/indicator/vendor/fastfinance/fastfinance.py</code> <pre><code>@jit(nopython=True)\ndef atr(c_open, c_high, c_low, period):\n    \"\"\"\n    Average True Range\n    :type c_open: np.ndarray\n    :type c_high: np.ndarray\n    :type c_low: np.ndarray\n    :type period: int\n    :rtype: np.ndarray\n    \"\"\"\n    return sma(tr(c_open, c_high, c_low), period)\n</code></pre>"},{"location":"reference/indicator/vendor/fastfinance/fastfinance/#lettrade.indicator.vendor.fastfinance.fastfinance.bollinger_bands","title":"bollinger_bands","text":"<pre><code>bollinger_bands(data, period, dev_up=2.0, dev_down=2.0)\n</code></pre> <p>Bollinger Bands :type data: np.ndarray :type period: int :type dev_up: float :type dev_down: float :rtype: (np.ndarray, np.ndarray, np.ndarray, np.ndarray) :return: middle, up, down, width</p> Source code in <code>lettrade/indicator/vendor/fastfinance/fastfinance.py</code> <pre><code>@jit(nopython=True)\ndef bollinger_bands(data, period, dev_up=2.0, dev_down=2.0):\n    \"\"\"\n    Bollinger Bands\n    :type data: np.ndarray\n    :type period: int\n    :type dev_up: float\n    :type dev_down: float\n    :rtype: (np.ndarray, np.ndarray, np.ndarray, np.ndarray)\n    :return: middle, up, down, width\n    \"\"\"\n    size = len(data)\n    bb_up = np.array([np.nan] * size)\n    bb_down = np.array([np.nan] * size)\n    bb_width = np.array([np.nan] * size)\n    bb_mid = sma(data, period)\n    for i in range(period - 1, size):\n        std_dev = np.std(data[i - period + 1 : i + 1])\n        mid = bb_mid[i]\n        bb_up[i] = mid + (std_dev * dev_up)\n        bb_down[i] = mid - (std_dev * dev_down)\n        bb_width[i] = bb_up[i] - bb_down[i]\n    return bb_mid, bb_up, bb_down, bb_width\n</code></pre>"},{"location":"reference/indicator/vendor/fastfinance/fastfinance/#lettrade.indicator.vendor.fastfinance.fastfinance.chop","title":"chop","text":"<pre><code>chop(c_close, c_open, c_high, c_low, period=14)\n</code></pre> <p>Chopiness Index :type c_close: np.ndarray :type c_open: np.ndarray :type c_high: np.ndarray :type c_low: np.ndarray :type period: int :rtype: np.ndarray</p> Source code in <code>lettrade/indicator/vendor/fastfinance/fastfinance.py</code> <pre><code>@jit(nopython=True)\ndef chop(c_close, c_open, c_high, c_low, period=14):\n    \"\"\"\n    Chopiness Index\n    :type c_close: np.ndarray\n    :type c_open: np.ndarray\n    :type c_high: np.ndarray\n    :type c_low: np.ndarray\n    :type period: int\n    :rtype: np.ndarray\n    \"\"\"\n    size = len(c_close)\n    out = np.full(size, np.nan)\n    a_tr = atr(c_open, c_high, c_low, period)\n    for i in range(period - 1, size):\n        e = i + 1\n        s = e - period\n        out[i] = (\n            100\n            * np.log10(np.sum(a_tr[s:e]) / (np.max(c_high[s:e]) - np.min(c_low[s:e])))\n        ) / np.log10(period)\n    return out\n</code></pre>"},{"location":"reference/indicator/vendor/fastfinance/fastfinance/#lettrade.indicator.vendor.fastfinance.fastfinance.cma","title":"cma","text":"<pre><code>cma(data)\n</code></pre> <p>Cumulative Moving Average :type data: np.ndarray :rtype: np.ndarray</p> Source code in <code>lettrade/indicator/vendor/fastfinance/fastfinance.py</code> <pre><code>@jit(nopython=True)\ndef cma(data):\n    \"\"\"\n    Cumulative Moving Average\n    :type data: np.ndarray\n    :rtype: np.ndarray\n    \"\"\"\n    size = len(data)\n    out = np.full(size, np.nan)\n    last_sum = np.array([np.nan] * size)\n    last_sum[1] = sum(data[:2])\n    for i in range(2, size):\n        last_sum[i] = last_sum[i - 1] + data[i]\n        out[i] = last_sum[i] / (i + 1)\n    return out\n</code></pre>"},{"location":"reference/indicator/vendor/fastfinance/fastfinance/#lettrade.indicator.vendor.fastfinance.fastfinance.cmf","title":"cmf","text":"<pre><code>cmf(c_close, c_high, c_low, c_volume, period)\n</code></pre> <p>Chaikin Money Flow :type c_close: np.ndarray :type c_high: np.ndarray :type c_low: np.ndarray :type c_volume: np.ndarray :type period: int :rtype: np.ndarray</p> Source code in <code>lettrade/indicator/vendor/fastfinance/fastfinance.py</code> <pre><code>@jit(nopython=True)\ndef cmf(c_close, c_high, c_low, c_volume, period):\n    \"\"\"\n    Chaikin Money Flow\n    :type c_close: np.ndarray\n    :type c_high: np.ndarray\n    :type c_low: np.ndarray\n    :type c_volume: np.ndarray\n    :type period: int\n    :rtype: np.ndarray\n    \"\"\"\n    size = len(c_close)\n    out = np.full(size, np.nan)\n    for i in range(period - 1, size):\n        e = i + 1\n        s = e - period\n        w_close = c_close[s:e]\n        w_high = c_high[s:e]\n        w_low = c_low[s:e]\n        w_vol = c_volume[s:e]\n        out[i] = sum(\n            (((w_close - w_low) - (w_high - w_close)) / (w_high - w_low)) * w_vol\n        ) / sum(w_vol)\n    return out\n</code></pre>"},{"location":"reference/indicator/vendor/fastfinance/fastfinance/#lettrade.indicator.vendor.fastfinance.fastfinance.cmo","title":"cmo","text":"<pre><code>cmo(c_close, period, f_sma=True, f_clip=True, f_abs=True)\n</code></pre> <p>Chande Momentum Oscillator :type c_close: np.ndarray :type period: int :type f_sma: bool :type f_clip: bool :type f_abs: bool :rtype: np.ndarray</p> Source code in <code>lettrade/indicator/vendor/fastfinance/fastfinance.py</code> <pre><code>@jit(nopython=True)\ndef cmo(c_close, period, f_sma=True, f_clip=True, f_abs=True):\n    \"\"\"\n    Chande Momentum Oscillator\n    :type c_close: np.ndarray\n    :type period: int\n    :type f_sma: bool\n    :type f_clip: bool\n    :type f_abs: bool\n    :rtype: np.ndarray\n    \"\"\"\n    size = len(c_close)\n    deltas = np.array([np.nan] * size)\n    sums_up = np.array([np.nan] * size)\n    sums_down = np.array([np.nan] * size)\n    for i in range(period - 1, size):\n        window = c_close[i + 1 - period : i + 1]\n        d = np.diff(window)\n        if f_clip:\n            up, down = np.clip(d, a_min=0, a_max=np.max(d)), np.clip(\n                d, a_min=np.min(d), a_max=0\n            )\n        else:\n            up, down = d.copy(), d.copy()\n            up[d &lt; 0] = 0.0\n            down[d &gt; 0] = 0.0\n        if f_abs:\n            for j, x in enumerate(down):\n                down[j] = fabs(x)\n        else:\n            down = np.abs(down)\n        sums_up[i] = sum(up)\n        sums_down[i] = sum(down)\n    return 100 * ((sums_up - sums_down) / (sums_up + sums_down))\n</code></pre>"},{"location":"reference/indicator/vendor/fastfinance/fastfinance/#lettrade.indicator.vendor.fastfinance.fastfinance.cog","title":"cog","text":"<pre><code>cog(data, period=10)\n</code></pre> <p>Center Of Gravity :type data: np.ndarray :type period: int :rtype: np.ndarray</p> Source code in <code>lettrade/indicator/vendor/fastfinance/fastfinance.py</code> <pre><code>@jit(nopython=True)\ndef cog(data, period=10):\n    \"\"\"\n    Center Of Gravity\n    :type data: np.ndarray\n    :type period: int\n    :rtype: np.ndarray\n    \"\"\"\n    size = len(data)\n    out = np.full(size, np.nan)\n    for i in range(period - 1, size):\n        e = i + 1\n        s = e - period\n        window = data[s:e]\n        den = np.sum(window)\n        num = 0\n        for j in range(0, period):\n            num += window[j] * (period - j)\n        out[i] = -num / den\n    return out\n</code></pre>"},{"location":"reference/indicator/vendor/fastfinance/fastfinance/#lettrade.indicator.vendor.fastfinance.fastfinance.convolve","title":"convolve","text":"<pre><code>convolve(data, kernel)\n</code></pre> <p>Convolution 1D Array :type data: np.ndarray :type kernel: np.ndarray :rtype: np.ndarray</p> Source code in <code>lettrade/indicator/vendor/fastfinance/fastfinance.py</code> <pre><code>@jit(nopython=True)\ndef convolve(data, kernel):\n    \"\"\"\n    Convolution 1D Array\n    :type data: np.ndarray\n    :type kernel: np.ndarray\n    :rtype: np.ndarray\n    \"\"\"\n    size_data = len(data)\n    size_kernel = len(kernel)\n    size_out = size_data - size_kernel + 1\n    out = np.array([np.nan] * size_out)\n    kernel = np.flip(kernel)\n    for i in range(size_out):\n        window = data[i : i + size_kernel]\n        out[i] = sum([window[j] * kernel[j] for j in range(size_kernel)])\n    return out\n</code></pre>"},{"location":"reference/indicator/vendor/fastfinance/fastfinance/#lettrade.indicator.vendor.fastfinance.fastfinance.dema","title":"dema","text":"<pre><code>dema(data, period, smoothing=2.0)\n</code></pre> <p>Double Exponential Moving Average :type data: np.ndarray :type period: int :type smoothing: float :rtype: np.ndarray</p> Source code in <code>lettrade/indicator/vendor/fastfinance/fastfinance.py</code> <pre><code>@jit(nopython=True)\ndef dema(data, period, smoothing=2.0):\n    \"\"\"\n    Double Exponential Moving Average\n    :type data: np.ndarray\n    :type period: int\n    :type smoothing: float\n    :rtype: np.ndarray\n    \"\"\"\n    return (2 * ema(data, period, smoothing)) - ema(\n        ema(data, period, smoothing), period, smoothing\n    )\n</code></pre>"},{"location":"reference/indicator/vendor/fastfinance/fastfinance/#lettrade.indicator.vendor.fastfinance.fastfinance.donchian_channel","title":"donchian_channel","text":"<pre><code>donchian_channel(c_high, c_low, period)\n</code></pre> <p>Donchian Channel :type c_high: np.ndarray :type c_low: np.ndarray :type period: int :rtype: (np.ndarray, np.ndarray, np.ndarray, np.ndarray) :return: middle, up, down, width</p> Source code in <code>lettrade/indicator/vendor/fastfinance/fastfinance.py</code> <pre><code>@jit(nopython=True)\ndef donchian_channel(c_high, c_low, period):\n    \"\"\"\n    Donchian Channel\n    :type c_high: np.ndarray\n    :type c_low: np.ndarray\n    :type period: int\n    :rtype: (np.ndarray, np.ndarray, np.ndarray, np.ndarray)\n    :return: middle, up, down, width\n    \"\"\"\n    size = len(c_high)\n    out_up = np.array([np.nan] * size)\n    out_down = np.array([np.nan] * size)\n    for i in range(period - 1, size):\n        e = i + 1\n        s = e - period\n        out_up[i] = np.max(c_high[s:e])\n        out_down[i] = np.min(c_low[s:e])\n    return (out_up + out_down) / 2, out_up, out_down, out_up - out_down\n</code></pre>"},{"location":"reference/indicator/vendor/fastfinance/fastfinance/#lettrade.indicator.vendor.fastfinance.fastfinance.ema","title":"ema","text":"<pre><code>ema(data, period, smoothing=2.0)\n</code></pre> <p>Exponential Moving Average :type data: np.ndarray :type period: int :type smoothing: float :rtype: np.ndarray</p> Source code in <code>lettrade/indicator/vendor/fastfinance/fastfinance.py</code> <pre><code>@jit(nopython=True)\ndef ema(data, period, smoothing=2.0):\n    \"\"\"\n    Exponential Moving Average\n    :type data: np.ndarray\n    :type period: int\n    :type smoothing: float\n    :rtype: np.ndarray\n    \"\"\"\n    size = len(data)\n    weight = smoothing / (period + 1)\n    out = np.full(size, np.nan)\n    out[0] = data[0]\n    for i in range(1, size):\n        out[i] = (data[i] * weight) + (out[i - 1] * (1 - weight))\n    out[: period - 1] = np.nan\n    return out\n</code></pre>"},{"location":"reference/indicator/vendor/fastfinance/fastfinance/#lettrade.indicator.vendor.fastfinance.fastfinance.entropy","title":"entropy","text":"<pre><code>entropy(c_close, c_volume, period, bins=2)\n</code></pre> <p>Entropy (Experimental) :type c_close: np.ndarray :type c_volume: np.ndarray :type period: int :type bins: int :rtype: np.ndarray</p> Source code in <code>lettrade/indicator/vendor/fastfinance/fastfinance.py</code> <pre><code>@jit(nopython=True)\ndef entropy(c_close, c_volume, period, bins=2):\n    \"\"\"\n    Entropy (Experimental)\n    :type c_close: np.ndarray\n    :type c_volume: np.ndarray\n    :type period: int\n    :type bins: int\n    :rtype: np.ndarray\n    \"\"\"\n    size = len(c_close)\n    out = np.full(size, np.nan)\n    for i in range(period - 1, size):\n        e = i + 1\n        s = e - period\n        close_w = c_close[s:e]\n        volume_w = c_volume[s:e]\n        min_w = np.min(close_w)\n        norm = 1.0 / (np.max(close_w) - min_w)\n        sum_h = np.array([0.0] * bins)\n        for j in range(period):\n            sum_h[int((close_w[j] - min_w) * bins * norm)] += volume_w[j] ** 2\n        count = np.sqrt(sum_h)\n        count = count / sum(count)\n        count = count[np.nonzero(count)]\n        out[i] = -sum(count * np.log2(count))\n    return out\n</code></pre>"},{"location":"reference/indicator/vendor/fastfinance/fastfinance/#lettrade.indicator.vendor.fastfinance.fastfinance.ewma","title":"ewma","text":"<pre><code>ewma(data, period, alpha=1.0)\n</code></pre> <p>Exponential Weighted Moving Average :type data: np.ndarray :type period: int :type alpha: float :rtype: np.ndarray</p> Source code in <code>lettrade/indicator/vendor/fastfinance/fastfinance.py</code> <pre><code>@jit(nopython=True)\ndef ewma(data, period, alpha=1.0):\n    \"\"\"\n    Exponential Weighted Moving Average\n    :type data: np.ndarray\n    :type period: int\n    :type alpha: float\n    :rtype: np.ndarray\n    \"\"\"\n    weights = (1 - alpha) ** np.arange(period)\n    weights /= np.sum(weights)\n    out = convolve(data, weights)\n    return np.concatenate((np.array([np.nan] * (len(data) - len(out))), out))\n</code></pre>"},{"location":"reference/indicator/vendor/fastfinance/fastfinance/#lettrade.indicator.vendor.fastfinance.fastfinance.fdi","title":"fdi","text":"<pre><code>fdi(c_close, period)\n</code></pre> <p>Fractal Dimension Index :type c_close: np.ndarray :type period: int :rtype: np.ndarray</p> Source code in <code>lettrade/indicator/vendor/fastfinance/fastfinance.py</code> <pre><code>@jit(nopython=True)\ndef fdi(c_close, period):\n    \"\"\"\n    Fractal Dimension Index\n    :type c_close: np.ndarray\n    :type period: int\n    :rtype: np.ndarray\n    \"\"\"\n    size = len(c_close)\n    out = np.full(size, np.nan)\n    for i in range(period - 1, size):\n        window = c_close[i + 1 - period : i + 1]\n        pdiff = 0\n        length = 0\n        hc = np.max(window)\n        lc = np.min(window)\n        for j in range(1, period - 1):\n            if hc &gt; lc:\n                diff = (window[-j] - lc) / (hc - lc)\n                length += (\n                    np.sqrt(((diff - pdiff) + (1 / (period**2))) ** 2) if j &gt; 1 else 0\n                )\n                pdiff = diff\n        out[i] = (\n            (1 + (np.log(length) + np.log(2)) / np.log(2 * period)) if length &gt; 0 else 0\n        )\n    return out\n</code></pre>"},{"location":"reference/indicator/vendor/fastfinance/fastfinance/#lettrade.indicator.vendor.fastfinance.fastfinance.fourier_fit_extra","title":"fourier_fit_extra","text":"<pre><code>fourier_fit_extra(data, harmonic, extra=0)\n</code></pre> <p>Fourier Transform Fit Extrapolation :type data: np.ndarray :type harmonic: int :type extra: int :rtype: np.ndarray</p> Source code in <code>lettrade/indicator/vendor/fastfinance/fastfinance.py</code> <pre><code>@jit(nopython=True)\ndef fourier_fit_extra(data, harmonic, extra=0):\n    \"\"\"\n    Fourier Transform Fit Extrapolation\n    :type data: np.ndarray\n    :type harmonic: int\n    :type extra: int\n    :rtype: np.ndarray\n    \"\"\"\n    size = len(data)\n    x = np.arange(0, size, 1)\n    m = np.ones((x.shape[0], 2))\n    m[:, 1] = x\n    scale = np.empty((2,))\n    for n in range(0, 2):\n        norm = np.linalg.norm(m[:, n])\n        scale[n] = norm\n        m[:, n] /= norm\n    lsf = (np.linalg.lstsq(m, data, rcond=-1)[0] / scale)[::-1]\n    lsd = data - lsf[0] * x\n    size_lsd = len(lsd)\n    four = np.zeros(size_lsd, dtype=np.complex128)\n    for i in range(size_lsd):\n        sum_f = 0\n        for n in range(size_lsd):\n            sum_f += lsd[n] * np.exp(-2j * np.pi * i * n * (1 / size_lsd))\n        four[i] = sum_f\n    freq = np.empty(size)\n    mi = (size - 1) // 2 + 1\n    freq[:mi] = np.arange(0, mi)\n    freq[mi:] = np.arange(-(size // 2), 0)\n    freq *= 1.0 / size\n    lx = np.arange(0, size + extra)\n    out = np.zeros(lx.shape)\n    index = [\n        v for _, v in sorted([(np.absolute(four[v]), v) for v in list(range(size))])\n    ][::-1]\n    for i in index[: 1 + harmonic * 2]:\n        out += (abs(four[i]) / size) * np.cos(\n            2 * np.pi * freq[i] * lx + np.angle(four[i])\n        )\n    return out + lsf[0] * lx\n</code></pre>"},{"location":"reference/indicator/vendor/fastfinance/fastfinance/#lettrade.indicator.vendor.fastfinance.fastfinance.grma","title":"grma","text":"<pre><code>grma(data, period)\n</code></pre> <p>Golden Ratio Moving Average :param data: np.ndarray :param period: int :return: np.ndarray</p> Source code in <code>lettrade/indicator/vendor/fastfinance/fastfinance.py</code> <pre><code>@jit(nopython=True)\ndef grma(data, period):\n    \"\"\"\n    Golden Ratio Moving Average\n    :param data: np.ndarray\n    :param period: int\n    :return: np.ndarray\n    \"\"\"\n    size = len(data)\n    out = np.full(size, np.nan)\n    sr = np.sqrt(2)\n    alpha = (sr - 1) / (sr + 1)\n    for i in range(period - 1, size):\n        if i == period - 1:\n            out[i] = np.mean(data[: i + 1])\n        else:\n            t1 = alpha * (data[i] - out[i - 1])\n            t2 = (1 - alpha) * (data[i - 1] - out[i - 1])\n            out[i] = out[i - 1] + t1 + t2\n    return out\n</code></pre>"},{"location":"reference/indicator/vendor/fastfinance/fastfinance/#lettrade.indicator.vendor.fastfinance.fastfinance.heiken_ashi","title":"heiken_ashi","text":"<pre><code>heiken_ashi(c_open, c_high, c_low, c_close)\n</code></pre> <p>Heiken Ashi :type c_open: np.ndarray :type c_high: np.ndarray :type c_low: np.ndarray :type c_close: np.ndarray :rtype: (np.ndarray, np.ndarray, np.ndarray, np.ndarray) :return: open, high, low, close</p> Source code in <code>lettrade/indicator/vendor/fastfinance/fastfinance.py</code> <pre><code>@jit(nopython=True)\ndef heiken_ashi(c_open, c_high, c_low, c_close):\n    \"\"\"\n    Heiken Ashi\n    :type c_open: np.ndarray\n    :type c_high: np.ndarray\n    :type c_low: np.ndarray\n    :type c_close: np.ndarray\n    :rtype: (np.ndarray, np.ndarray, np.ndarray, np.ndarray)\n    :return: open, high, low, close\n    \"\"\"\n    ha_close = (c_open + c_high + c_low + c_close) / 4\n    ha_open = np.empty_like(ha_close)\n    ha_open[0] = (c_open[0] + c_close[0]) / 2\n    for i in range(1, len(c_close)):\n        ha_open[i] = (c_open[i - 1] + c_close[i - 1]) / 2\n    return (\n        ha_open,\n        np.maximum(np.maximum(ha_open, ha_close), c_high),\n        np.minimum(np.minimum(ha_open, ha_close), c_low),\n        ha_close,\n    )\n</code></pre>"},{"location":"reference/indicator/vendor/fastfinance/fastfinance/#lettrade.indicator.vendor.fastfinance.fastfinance.ichimoku","title":"ichimoku","text":"<pre><code>ichimoku(\n    data, tenkansen=9, kinjunsen=26, senkou_b=52, shift=26\n)\n</code></pre> <p>Ichimoku :type data: np.ndarray :type tenkansen: int :type kinjunsen: int :type senkou_b: int :type shift: int :rtype: (np.ndarray, np.ndarray, np.ndarray, np.ndarray, np.ndarray) :return: tenkansen, kinjunsen, chikou, senkou a, senkou b</p> Source code in <code>lettrade/indicator/vendor/fastfinance/fastfinance.py</code> <pre><code>@jit(nopython=True)\ndef ichimoku(data, tenkansen=9, kinjunsen=26, senkou_b=52, shift=26):\n    \"\"\"\n    Ichimoku\n    :type data: np.ndarray\n    :type tenkansen: int\n    :type kinjunsen: int\n    :type senkou_b: int\n    :type shift: int\n    :rtype: (np.ndarray, np.ndarray, np.ndarray, np.ndarray, np.ndarray)\n    :return: tenkansen, kinjunsen, chikou, senkou a, senkou b\n    \"\"\"\n    size = len(data)\n    n_tenkansen = np.array([np.nan] * size)\n    n_kinjunsen = np.array([np.nan] * size)\n    n_senkou_b = np.array([np.nan] * (size + shift))\n    for i in range(tenkansen - 1, size):\n        window = data[i + 1 - tenkansen : i + 1]\n        n_tenkansen[i] = (np.max(window) + np.min(window)) / 2\n    for i in range(kinjunsen - 1, size):\n        window = data[i + 1 - kinjunsen : i + 1]\n        n_kinjunsen[i] = (np.max(window) + np.min(window)) / 2\n    for i in range(senkou_b - 1, size):\n        window = data[i + 1 - senkou_b : i + 1]\n        n_senkou_b[i + shift] = (np.max(window) + np.min(window)) / 2\n    return (\n        n_tenkansen,\n        n_kinjunsen,\n        np.concatenate(((data[shift:]), (np.array([np.nan] * (size - shift))))),\n        np.concatenate((np.array([np.nan] * shift), ((n_tenkansen + n_kinjunsen) / 2))),\n        n_senkou_b,\n    )\n</code></pre>"},{"location":"reference/indicator/vendor/fastfinance/fastfinance/#lettrade.indicator.vendor.fastfinance.fastfinance.kama","title":"kama","text":"<pre><code>kama(data, period=10, fast=2, slow=30, smoothing=0.666)\n</code></pre> <p>Kaufman's Adaptive Moving Average :type data: np.ndarray :type period: int :type fast: int :type slow: int :type smoothing: float :rtype: np.ndarray</p> Source code in <code>lettrade/indicator/vendor/fastfinance/fastfinance.py</code> <pre><code>@jit(nopython=True)\ndef kama(data, period=10, fast=2, slow=30, smoothing=0.666):\n    \"\"\"\n    Kaufman's Adaptive Moving Average\n    :type data: np.ndarray\n    :type period: int\n    :type fast: int\n    :type slow: int\n    :type smoothing: float\n    :rtype: np.ndarray\n    \"\"\"\n    size = len(data)\n    out = np.full(size, np.nan)\n    er = np.full(size, np.nan)\n    sc = np.full(size, np.nan)\n    fc = np.full(size, np.nan)\n    c = np.abs(np.diff(data))\n    v = np.sum(c)\n    if v &gt; 0:\n        er[period] = c[period] / v\n        for i in range(period + 1, size):\n            er[i] = (er[i - 1] * (period - 1) + c[i - 1]) / v\n    if np.isfinite(er).any():\n        f_sc = 2 / (fast + 1)\n        s_sc = 2 / (slow + 1)\n        sc[period] = er[period] * (f_sc - s_sc) + s_sc\n        for i in range(period + 1, size):\n            sc[i] = er[i] * (f_sc - s_sc) + s_sc + sc[i - 1] * (1 - smoothing)\n        out[period] = data[period]\n        fc[period] = out[period]\n        for i in range(period + 1, size):\n            out[i] = out[i - 1] + sc[i] * (data[i] - out[i - 1])\n            fc[i] = out[i - 1] + smoothing * (data[i] - out[i - 1])\n    return out\n</code></pre>"},{"location":"reference/indicator/vendor/fastfinance/fastfinance/#lettrade.indicator.vendor.fastfinance.fastfinance.kdj","title":"kdj","text":"<pre><code>kdj(\n    c_close,\n    c_high,\n    c_low,\n    period_rsv=9,\n    period_k=3,\n    period_d=3,\n    weight_k=3,\n    weight_d=2,\n)\n</code></pre> <p>KDJ :type c_close: np.ndarray :type c_high: np.ndarray :type c_low: np.ndarray :type period_rsv: int :type period_k: int :type period_d: int :type weight_k: int :type weight_d: int :rtype: (np.ndarray, np.ndarray, np.ndarray)</p> Source code in <code>lettrade/indicator/vendor/fastfinance/fastfinance.py</code> <pre><code>@jit(nopython=True)\ndef kdj(\n    c_close, c_high, c_low, period_rsv=9, period_k=3, period_d=3, weight_k=3, weight_d=2\n):\n    \"\"\"\n    KDJ\n    :type c_close: np.ndarray\n    :type c_high: np.ndarray\n    :type c_low: np.ndarray\n    :type period_rsv: int\n    :type period_k: int\n    :type period_d: int\n    :type weight_k: int\n    :type weight_d: int\n    :rtype: (np.ndarray, np.ndarray, np.ndarray)\n    \"\"\"\n    size = len(c_close)\n    rsv = np.array([np.nan] * size)\n    for i in range(period_k - 1, size):\n        e = i + 1\n        s = e - period_k\n        ml = np.min(c_low[s:e])\n        rsv[i] = ((c_close[i] - ml) / (np.max(c_high[s:e]) - ml)) * 100\n    k = sma(rsv, period_rsv)\n    d = sma(k, period_d)\n    return k, d, (weight_k * k) - (weight_d * d)\n</code></pre>"},{"location":"reference/indicator/vendor/fastfinance/fastfinance/#lettrade.indicator.vendor.fastfinance.fastfinance.keltner_channel","title":"keltner_channel","text":"<pre><code>keltner_channel(\n    c_close, c_open, c_high, c_low, period, smoothing=2.0\n)\n</code></pre> <p>Keltner Channel :type c_close: np.ndarray :type c_open: np.ndarray :type c_high: np.ndarray :type c_low: np.ndarray :type period: int :type smoothing: float :rtype: (np.ndarray, np.ndarray, np.ndarray, np.ndarray) :return: middle, up, down, width</p> Source code in <code>lettrade/indicator/vendor/fastfinance/fastfinance.py</code> <pre><code>@jit(nopython=True)\ndef keltner_channel(c_close, c_open, c_high, c_low, period, smoothing=2.0):\n    \"\"\"\n    Keltner Channel\n    :type c_close: np.ndarray\n    :type c_open: np.ndarray\n    :type c_high: np.ndarray\n    :type c_low: np.ndarray\n    :type period: int\n    :type smoothing: float\n    :rtype: (np.ndarray, np.ndarray, np.ndarray, np.ndarray)\n    :return: middle, up, down, width\n    \"\"\"\n    e = ema(c_close, period, smoothing)\n    aa = 2 * atr(c_open, c_high, c_low, period)\n    up = e + aa\n    down = e - aa\n    return e, up, down, up - down\n</code></pre>"},{"location":"reference/indicator/vendor/fastfinance/fastfinance/#lettrade.indicator.vendor.fastfinance.fastfinance.lsma","title":"lsma","text":"<pre><code>lsma(data, period=14, regression=True)\n</code></pre> <p>Least Squares Moving Average :type data: np.ndarray :type period: int :type regression: bool :rtype: np.ndarray</p> Source code in <code>lettrade/indicator/vendor/fastfinance/fastfinance.py</code> <pre><code>@jit(nopython=True)\ndef lsma(data, period=14, regression=True):\n    \"\"\"\n    Least Squares Moving Average\n    :type data: np.ndarray\n    :type period: int\n    :type regression: bool\n    :rtype: np.ndarray\n    \"\"\"\n    size = len(data)\n    out = np.full(size, np.nan)\n    w = np.arange(1, period + 1, dtype=np.float64)\n    if regression:\n        for i in range(period - 1, size):\n            e = i + 1\n            s = e - period\n            intercept, slope = np.dot(\n                np.linalg.pinv(np.vstack((np.ones(period), w)).T), data[s:e]\n            )\n            out[i] = slope * period + intercept\n    else:\n        for i in range(period - 1, size):\n            e = i + 1\n            s = e - period\n            out[i] = np.dot(data[s:e], w) / np.sum(w)\n    return out\n</code></pre>"},{"location":"reference/indicator/vendor/fastfinance/fastfinance/#lettrade.indicator.vendor.fastfinance.fastfinance.macd","title":"macd","text":"<pre><code>macd(data, fast, slow, smoothing=2.0)\n</code></pre> <p>Moving Average Convergence Divergence :type data: np.ndarray :type fast: int :type slow: int :type smoothing: float :rtype: np.ndarray</p> Source code in <code>lettrade/indicator/vendor/fastfinance/fastfinance.py</code> <pre><code>@jit(nopython=True)\ndef macd(data, fast, slow, smoothing=2.0):\n    \"\"\"\n    Moving Average Convergence Divergence\n    :type data: np.ndarray\n    :type fast: int\n    :type slow: int\n    :type smoothing: float\n    :rtype: np.ndarray\n    \"\"\"\n    return ema(data, fast, smoothing) - ema(data, slow, smoothing)\n</code></pre>"},{"location":"reference/indicator/vendor/fastfinance/fastfinance/#lettrade.indicator.vendor.fastfinance.fastfinance.momentum","title":"momentum","text":"<pre><code>momentum(data, period)\n</code></pre> <p>Momentum :type data: np.ndarray :type period: int :rtype: np.ndarray</p> Source code in <code>lettrade/indicator/vendor/fastfinance/fastfinance.py</code> <pre><code>@jit(nopython=True)\ndef momentum(data, period):\n    \"\"\"\n    Momentum\n    :type data: np.ndarray\n    :type period: int\n    :rtype: np.ndarray\n    \"\"\"\n    size = len(data)\n    out = np.full(size, np.nan)\n    for i in range(period - 1, size):\n        out[i] = data[i] - data[i - period + 1]\n    return out\n</code></pre>"},{"location":"reference/indicator/vendor/fastfinance/fastfinance/#lettrade.indicator.vendor.fastfinance.fastfinance.np_clip","title":"np_clip","text":"<pre><code>np_clip(a, a_min, a_max, out=None)\n</code></pre> <p>Numba Overload of np.clip :type a: np.ndarray :type a_min: int :type a_max: int :type out: np.ndarray :rtype: np.ndarray</p> Source code in <code>lettrade/indicator/vendor/fastfinance/fastfinance.py</code> <pre><code>@overload(np.clip)\ndef np_clip(a, a_min, a_max, out=None):\n    \"\"\"\n    Numba Overload of np.clip\n    :type a: np.ndarray\n    :type a_min: int\n    :type a_max: int\n    :type out: np.ndarray\n    :rtype: np.ndarray\n    \"\"\"\n    if out is None:\n        out = np.empty_like(a)\n    for i in range(len(a)):\n        if a[i] &lt; a_min:\n            out[i] = a_min\n        elif a[i] &gt; a_max:\n            out[i] = a_max\n        else:\n            out[i] = a[i]\n    return out\n</code></pre>"},{"location":"reference/indicator/vendor/fastfinance/fastfinance/#lettrade.indicator.vendor.fastfinance.fastfinance.obv","title":"obv","text":"<pre><code>obv(c_close, c_volume)\n</code></pre> <p>On Balance Volume :type c_close: np.ndarray :type c_volume: np.ndarray :rtype: np.ndarray</p> Source code in <code>lettrade/indicator/vendor/fastfinance/fastfinance.py</code> <pre><code>@jit(nopython=True)\ndef obv(c_close, c_volume):\n    \"\"\"\n    On Balance Volume\n    :type c_close: np.ndarray\n    :type c_volume: np.ndarray\n    :rtype: np.ndarray\n    \"\"\"\n    size = len(c_close)\n    out = np.full(size, np.nan)\n    out[0] = 1\n    for i in range(1, size):\n        if c_close[i] &gt; c_close[i - 1]:\n            out[i] = out[i - 1] + c_volume[i]\n        elif c_close[i] &lt; c_close[i - 1]:\n            out[i] = out[i - 1] - c_volume[i]\n        else:\n            out[i] = out[i - 1]\n    return out\n</code></pre>"},{"location":"reference/indicator/vendor/fastfinance/fastfinance/#lettrade.indicator.vendor.fastfinance.fastfinance.poly_fit_extra","title":"poly_fit_extra","text":"<pre><code>poly_fit_extra(data, deg=1, extra=0)\n</code></pre> <p>Polynomial Fit Extrapolation :type data: np.ndarray :type deg: int :type extra: int :rtype: np.ndarray</p> Source code in <code>lettrade/indicator/vendor/fastfinance/fastfinance.py</code> <pre><code>@jit(nopython=True)\ndef poly_fit_extra(data, deg=1, extra=0):\n    \"\"\"\n    Polynomial Fit Extrapolation\n    :type data: np.ndarray\n    :type deg: int\n    :type extra: int\n    :rtype: np.ndarray\n    \"\"\"\n    size = len(data)\n    x = np.arange(0, size, 1)\n    m = np.ones((x.shape[0], deg + 1))\n    m[:, 1] = x\n    if deg &gt; 1:\n        for n in range(2, deg + 1):\n            m[:, n] = m[:, n - 1] * x\n    scale = np.empty((deg + 1,))\n    for n in range(0, deg + 1):\n        norm = np.linalg.norm(m[:, n])\n        scale[n] = norm\n        m[:, n] /= norm\n    lsf = (np.linalg.lstsq(m, data, rcond=-1)[0] / scale)[::-1]\n    lx = np.arange(0, size + extra, 1)\n    out = np.zeros(lx.shape)\n    for i, v in enumerate(lsf):\n        out *= lx\n        out += v\n    return out\n</code></pre>"},{"location":"reference/indicator/vendor/fastfinance/fastfinance/#lettrade.indicator.vendor.fastfinance.fastfinance.roc","title":"roc","text":"<pre><code>roc(data, period)\n</code></pre> <p>Rate Of Change :type data: np.ndarray :type period: int :rtype: np.ndarray</p> Source code in <code>lettrade/indicator/vendor/fastfinance/fastfinance.py</code> <pre><code>@jit(nopython=True)\ndef roc(data, period):\n    \"\"\"\n    Rate Of Change\n    :type data: np.ndarray\n    :type period: int\n    :rtype: np.ndarray\n    \"\"\"\n    size = len(data)\n    out = np.full(size, np.nan)\n    for i in range(period - 1, size):\n        p = data[i - period + 1]\n        out[i] = ((data[i] - p) / p) * 100\n    return out\n</code></pre>"},{"location":"reference/indicator/vendor/fastfinance/fastfinance/#lettrade.indicator.vendor.fastfinance.fastfinance.rsi","title":"rsi","text":"<pre><code>rsi(\n    data,\n    period,\n    smoothing=2.0,\n    f_sma=True,\n    f_clip=True,\n    f_abs=True,\n)\n</code></pre> <p>Relative Strengh Index :type data: np.ndarray :type period: int :type smoothing: float :type f_sma: bool :type f_clip: bool :type f_abs: bool :rtype: np.ndarray</p> Source code in <code>lettrade/indicator/vendor/fastfinance/fastfinance.py</code> <pre><code>@jit(nopython=True)\ndef rsi(data, period, smoothing=2.0, f_sma=True, f_clip=True, f_abs=True):\n    \"\"\"\n    Relative Strengh Index\n    :type data: np.ndarray\n    :type period: int\n    :type smoothing: float\n    :type f_sma: bool\n    :type f_clip: bool\n    :type f_abs: bool\n    :rtype: np.ndarray\n    \"\"\"\n    size = len(data)\n    delta = np.array([np.nan] * size)\n    up = np.array([np.nan] * size)\n    down = np.array([np.nan] * size)\n    delta = np.diff(data)\n    if f_clip:\n        up, down = np.clip(delta, a_min=0, a_max=np.max(delta)), np.clip(\n            delta, a_min=np.min(delta), a_max=0\n        )\n    else:\n        up, down = delta.copy(), delta.copy()\n        up[delta &lt; 0] = 0.0\n        down[delta &gt; 0] = 0.0\n    if f_abs:\n        for i, x in enumerate(down):\n            down[i] = fabs(x)\n    else:\n        down = np.abs(down)\n    rs = (\n        sma(up, period) / sma(down, period)\n        if f_sma\n        else ema(up, period - 1, smoothing) / ema(down, period - 1, smoothing)\n    )\n    out = np.full(size, np.nan)\n    out[1:] = 100 - 100 / (1 + rs)\n    return out\n</code></pre>"},{"location":"reference/indicator/vendor/fastfinance/fastfinance/#lettrade.indicator.vendor.fastfinance.fastfinance.sma","title":"sma","text":"<pre><code>sma(data, period)\n</code></pre> <p>Simple Moving Average :type data: np.ndarray :type period: int :rtype: np.ndarray</p> Source code in <code>lettrade/indicator/vendor/fastfinance/fastfinance.py</code> <pre><code>@jit(nopython=True)\ndef sma(data, period):\n    \"\"\"\n    Simple Moving Average\n    :type data: np.ndarray\n    :type period: int\n    :rtype: np.ndarray\n    \"\"\"\n    size = len(data)\n    out = np.full(size, np.nan)\n    for i in range(period - 1, size):\n        window = data[i - period + 1 : i + 1]\n        out[i] = np.mean(window)\n    return out\n</code></pre>"},{"location":"reference/indicator/vendor/fastfinance/fastfinance/#lettrade.indicator.vendor.fastfinance.fastfinance.srsi","title":"srsi","text":"<pre><code>srsi(\n    data,\n    period,\n    smoothing=2.0,\n    f_sma=True,\n    f_clip=True,\n    f_abs=True,\n)\n</code></pre> <p>Stochastic Relative Strengh Index :type data: np.ndarray :type period: int :type smoothing: float :type f_sma: bool :type f_clip: bool :type f_abs: bool :rtype: np.ndarray</p> Source code in <code>lettrade/indicator/vendor/fastfinance/fastfinance.py</code> <pre><code>@jit(nopython=True)\ndef srsi(data, period, smoothing=2.0, f_sma=True, f_clip=True, f_abs=True):\n    \"\"\"\n    Stochastic Relative Strengh Index\n    :type data: np.ndarray\n    :type period: int\n    :type smoothing: float\n    :type f_sma: bool\n    :type f_clip: bool\n    :type f_abs: bool\n    :rtype: np.ndarray\n    \"\"\"\n    r = rsi(data, period, smoothing, f_sma, f_clip, f_abs)[period:]\n    s = np.array([np.nan] * len(r))\n    for i in range(period - 1, len(r)):\n        window = r[i + 1 - period : i + 1]\n        mw = np.min(window)\n        s[i] = ((r[i] - mw) / (np.max(window) - mw)) * 100\n    return np.concatenate((np.array([np.nan] * (len(data) - len(s))), s))\n</code></pre>"},{"location":"reference/indicator/vendor/fastfinance/fastfinance/#lettrade.indicator.vendor.fastfinance.fastfinance.stoch","title":"stoch","text":"<pre><code>stoch(c_close, c_high, c_low, period_k, period_d)\n</code></pre> <p>Stochastic :type c_close: np.ndarray :type c_high: np.ndarray :type c_low: np.ndarray :type period_k: int :type period_d: int :rtype: (np.ndarray, np.ndarray)</p> Source code in <code>lettrade/indicator/vendor/fastfinance/fastfinance.py</code> <pre><code>@jit(nopython=True)\ndef stoch(c_close, c_high, c_low, period_k, period_d):\n    \"\"\"\n    Stochastic\n    :type c_close: np.ndarray\n    :type c_high: np.ndarray\n    :type c_low: np.ndarray\n    :type period_k: int\n    :type period_d: int\n    :rtype: (np.ndarray, np.ndarray)\n    \"\"\"\n    size = len(c_close)\n    k = np.array([np.nan] * size)\n    for i in range(period_k - 1, size):\n        e = i + 1\n        s = e - period_k\n        ml = np.min(c_low[s:e])\n        k[i] = ((c_close[i] - ml) / (np.max(c_high[s:e]) - ml)) * 100\n    return k, sma(k, period_d)\n</code></pre>"},{"location":"reference/indicator/vendor/fastfinance/fastfinance/#lettrade.indicator.vendor.fastfinance.fastfinance.super_trend","title":"super_trend","text":"<pre><code>super_trend(\n    c_close, c_open, c_high, c_low, period_atr=10, multi=3\n)\n</code></pre> <p>Supertrend :type c_close: np.ndarray :type c_open: np.ndarray :type c_high: np.ndarray :type c_low: np.ndarray :type period_atr: int :type multi: int :rtype: (np.ndarray, np.ndarray) :return: up, down</p> Source code in <code>lettrade/indicator/vendor/fastfinance/fastfinance.py</code> <pre><code>@jit(nopython=True)\ndef super_trend(c_close, c_open, c_high, c_low, period_atr=10, multi=3):\n    \"\"\"\n    Supertrend\n    :type c_close: np.ndarray\n    :type c_open: np.ndarray\n    :type c_high: np.ndarray\n    :type c_low: np.ndarray\n    :type period_atr: int\n    :type multi: int\n    :rtype: (np.ndarray, np.ndarray)\n    :return: up, down\n    \"\"\"\n    size = len(c_close)\n    avg_tr = atr(c_open, c_high, c_low, period_atr)\n    hl2 = (c_high + c_low) / 2\n    b_up = hl2 + (multi * avg_tr)\n    b_down = hl2 - (multi * avg_tr)\n    st = np.array([np.nan] * size)\n    for i in range(1, size):\n        j = i - 1\n        if c_close[i] &gt; b_up[j]:\n            st[i] = 1\n        elif c_close[i] &lt; b_down[j]:\n            st[i] = 0\n        else:\n            st[i] = st[j]\n            if st[i] == 1 and b_down[i] &lt; b_down[j]:\n                b_down[i] = b_down[j]\n            if st[i] == 0 and b_up[i] &gt; b_up[j]:\n                b_up[i] = b_up[j]\n    return np.where(st == 1, b_down, np.nan), np.where(st == 0, b_up, np.nan)\n</code></pre>"},{"location":"reference/indicator/vendor/fastfinance/fastfinance/#lettrade.indicator.vendor.fastfinance.fastfinance.tr","title":"tr","text":"<pre><code>tr(c_open, c_high, c_low)\n</code></pre> <p>True Range :type c_open: np.ndarray :type c_high: np.ndarray :type c_low: np.ndarray :rtype: np.ndarray</p> Source code in <code>lettrade/indicator/vendor/fastfinance/fastfinance.py</code> <pre><code>@jit(nopython=True)\ndef tr(c_open, c_high, c_low):\n    \"\"\"\n    True Range\n    :type c_open: np.ndarray\n    :type c_high: np.ndarray\n    :type c_low: np.ndarray\n    :rtype: np.ndarray\n    \"\"\"\n    return np.maximum(\n        np.maximum(c_open - c_low, np.abs(c_high - c_open)), np.abs(c_low - c_open)\n    )\n</code></pre>"},{"location":"reference/indicator/vendor/fastfinance/fastfinance/#lettrade.indicator.vendor.fastfinance.fastfinance.trix","title":"trix","text":"<pre><code>trix(data, period, smoothing=2.0)\n</code></pre> <p>Triple Exponential Moving Average :type data: np.ndarray :type period: int :type smoothing: float :rtype: np.ndarray</p> Source code in <code>lettrade/indicator/vendor/fastfinance/fastfinance.py</code> <pre><code>@jit(nopython=True)\ndef trix(data, period, smoothing=2.0):\n    \"\"\"\n    Triple Exponential Moving Average\n    :type data: np.ndarray\n    :type period: int\n    :type smoothing: float\n    :rtype: np.ndarray\n    \"\"\"\n    return (\n        3 * ema(data, period, smoothing)\n        - (3 * ema(ema(data, period, smoothing), period, smoothing))\n    ) + ema(ema(ema(data, period, smoothing), period, smoothing), period, smoothing)\n</code></pre>"},{"location":"reference/indicator/vendor/fastfinance/fastfinance/#lettrade.indicator.vendor.fastfinance.fastfinance.vix","title":"vix","text":"<pre><code>vix(c_close, c_low, period)\n</code></pre> <p>Volatility Index :type c_close: np.ndarray :type c_low: np.ndarray :type period: int :rtype: np.ndarray</p> Source code in <code>lettrade/indicator/vendor/fastfinance/fastfinance.py</code> <pre><code>@jit(nopython=True)\ndef vix(c_close, c_low, period):\n    \"\"\"\n    Volatility Index\n    :type c_close: np.ndarray\n    :type c_low: np.ndarray\n    :type period: int\n    :rtype: np.ndarray\n    \"\"\"\n    size = len(c_close)\n    out = np.full(size, np.nan)\n    for i in range(period - 1, size):\n        hc = np.max(c_close[i + 1 - period : i + 1])\n        out[i] = ((hc - c_low[i]) / hc) * 100\n    return out\n</code></pre>"},{"location":"reference/indicator/vendor/fastfinance/fastfinance/#lettrade.indicator.vendor.fastfinance.fastfinance.volume_profile","title":"volume_profile","text":"<pre><code>volume_profile(c_close, c_volume, bins=10)\n</code></pre> <p>Volume Profile :type c_close: np.ndarray :type c_volume: np.ndarray :type bins: int :rtype: (np.ndarray, np.ndarray) :return: count, price</p> Source code in <code>lettrade/indicator/vendor/fastfinance/fastfinance.py</code> <pre><code>@jit(nopython=True)\ndef volume_profile(c_close, c_volume, bins=10):\n    \"\"\"\n    Volume Profile\n    :type c_close: np.ndarray\n    :type c_volume: np.ndarray\n    :type bins: int\n    :rtype: (np.ndarray, np.ndarray)\n    :return: count, price\n    \"\"\"\n    min_close = np.min(c_close)\n    max_close = np.max(c_close)\n    norm = 1.0 / (max_close - min_close)\n    sum_h = np.array([0.0] * bins)\n    for i in range(len(c_close)):\n        sum_h[int((c_close[i] - min_close) * bins * norm)] += c_volume[i] ** 2\n    sq = np.sqrt(sum_h)\n    return sq / sum(sq), np.linspace(min_close, max_close, bins)\n</code></pre>"},{"location":"reference/indicator/vendor/fastfinance/fastfinance/#lettrade.indicator.vendor.fastfinance.fastfinance.wma","title":"wma","text":"<pre><code>wma(data, period)\n</code></pre> <p>Weighted Moving Average :type data: np.ndarray :type period: int :rtype: np.ndarray</p> Source code in <code>lettrade/indicator/vendor/fastfinance/fastfinance.py</code> <pre><code>@jit(nopython=True)\ndef wma(data, period):\n    \"\"\"\n    Weighted Moving Average\n    :type data: np.ndarray\n    :type period: int\n    :rtype: np.ndarray\n    \"\"\"\n    weights = np.arange(period, 0, -1)\n    weights = weights / weights.sum()\n    out = convolve(data, weights)\n    return np.concatenate((np.array([np.nan] * (len(data) - len(out))), out))\n</code></pre>"},{"location":"reference/indicator/vendor/fastfinance/fastfinance/#lettrade.indicator.vendor.fastfinance.fastfinance.wpr","title":"wpr","text":"<pre><code>wpr(c_close, c_high, c_low, period)\n</code></pre> <p>William %R :type c_close: np.ndarray :type c_high: np.ndarray :type c_low: np.ndarray :type period: int :rtype: (np.ndarray, np.ndarray)</p> Source code in <code>lettrade/indicator/vendor/fastfinance/fastfinance.py</code> <pre><code>@jit(nopython=True)\ndef wpr(c_close, c_high, c_low, period):\n    \"\"\"\n    William %R\n    :type c_close: np.ndarray\n    :type c_high: np.ndarray\n    :type c_low: np.ndarray\n    :type period: int\n    :rtype: (np.ndarray, np.ndarray)\n    \"\"\"\n    size = len(c_close)\n    out = np.full(size, np.nan)\n    for i in range(period - 1, size):\n        e = i + 1\n        s = e - period\n        mh = np.max(c_high[s:e])\n        out[i] = ((mh - c_close[i]) / (mh - np.min(c_low[s:e]))) * -100\n    return out\n</code></pre>"},{"location":"reference/indicator/vendor/fastfinance/fastfinance/#lettrade.indicator.vendor.fastfinance.fastfinance.zlsma","title":"zlsma","text":"<pre><code>zlsma(data, period=14, regression=True)\n</code></pre> <p>Zero-Lag Least Squares Moving Average :param data: np.ndarray :param period: int :param regression: bool :return: np.ndarray</p> Source code in <code>lettrade/indicator/vendor/fastfinance/fastfinance.py</code> <pre><code>@jit(nopython=True)\ndef zlsma(data, period=14, regression=True):\n    \"\"\"\n    Zero-Lag Least Squares Moving Average\n    :param data: np.ndarray\n    :param period: int\n    :param regression: bool\n    :return: np.ndarray\n    \"\"\"\n    size = len(data)\n    sum_w = np.sum(np.arange(1, period + 1, dtype=np.float64))\n    lsma_v = lsma(data, period, regression)\n    out = np.full(size, np.nan)\n    w = sum_w / (2 * np.sum(np.arange(1, period)))\n    for i in range(period - 1, size):\n        out[i] = lsma_v[i] + (data[i] - lsma_v[i]) * w\n    return out\n</code></pre>"},{"location":"reference/indicator/vendor/qtpylib/","title":"Index","text":""},{"location":"reference/indicator/vendor/qtpylib/#lettrade.indicator.vendor.qtpylib","title":"qtpylib","text":""},{"location":"reference/indicator/vendor/qtpylib/inject/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> inject","text":""},{"location":"reference/indicator/vendor/qtpylib/inject/#lettrade.indicator.vendor.qtpylib.inject","title":"inject","text":""},{"location":"reference/indicator/vendor/qtpylib/qtpylib/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> qtpylib","text":""},{"location":"reference/indicator/vendor/qtpylib/qtpylib/#lettrade.indicator.vendor.qtpylib.qtpylib","title":"qtpylib","text":""},{"location":"reference/indicator/vendor/qtpylib/qtpylib/#lettrade.indicator.vendor.qtpylib.qtpylib.cci","title":"cci","text":"<pre><code>cci(series, window=14)\n</code></pre> <p>compute commodity channel index</p> Source code in <code>lettrade/indicator/vendor/qtpylib/qtpylib.py</code> <pre><code>def cci(series, window=14):\n    \"\"\"\n    compute commodity channel index\n    \"\"\"\n    price = typical_price(series)\n    typical_mean = rolling_mean(price, window)\n    res = (price - typical_mean) / (0.015 * np.std(typical_mean))\n    return pd.Series(index=series.index, data=res)\n</code></pre>"},{"location":"reference/indicator/vendor/qtpylib/qtpylib/#lettrade.indicator.vendor.qtpylib.qtpylib.ibs","title":"ibs","text":"<pre><code>ibs(bars)\n</code></pre> <p>Internal bar strength</p> Source code in <code>lettrade/indicator/vendor/qtpylib/qtpylib.py</code> <pre><code>def ibs(bars):\n    \"\"\"Internal bar strength\"\"\"\n    res = np.round((bars[\"close\"] - bars[\"low\"]) / (bars[\"high\"] - bars[\"low\"]), 2)\n    return pd.Series(index=bars.index, data=res)\n</code></pre>"},{"location":"reference/indicator/vendor/qtpylib/qtpylib/#lettrade.indicator.vendor.qtpylib.qtpylib.macd","title":"macd","text":"<pre><code>macd(series, fast=3, slow=10, smooth=16)\n</code></pre> <p>compute the MACD (Moving Average Convergence/Divergence) using a fast and slow exponential moving avg' return value is emaslow, emafast, macd which are len(x) arrays</p> Source code in <code>lettrade/indicator/vendor/qtpylib/qtpylib.py</code> <pre><code>def macd(series, fast=3, slow=10, smooth=16):\n    \"\"\"\n    compute the MACD (Moving Average Convergence/Divergence)\n    using a fast and slow exponential moving avg'\n    return value is emaslow, emafast, macd which are len(x) arrays\n    \"\"\"\n    macd_line = rolling_weighted_mean(series, window=fast) - rolling_weighted_mean(\n        series, window=slow\n    )\n    signal = rolling_weighted_mean(macd_line, window=smooth)\n    histogram = macd_line - signal\n    # return macd_line, signal, histogram\n    return pd.DataFrame(\n        index=series.index,\n        data={\n            \"macd\": macd_line.values,\n            \"signal\": signal.values,\n            \"histogram\": histogram.values,\n        },\n    )\n</code></pre>"},{"location":"reference/indicator/vendor/qtpylib/qtpylib/#lettrade.indicator.vendor.qtpylib.qtpylib.pvt","title":"pvt","text":"<pre><code>pvt(bars)\n</code></pre> <p>Price Volume Trend</p> Source code in <code>lettrade/indicator/vendor/qtpylib/qtpylib.py</code> <pre><code>def pvt(bars):\n    \"\"\"Price Volume Trend\"\"\"\n    trend = ((bars[\"close\"] - bars[\"close\"].shift(1)) / bars[\"close\"].shift(1)) * bars[\n        \"volume\"\n    ]\n    return trend.cumsum()\n</code></pre>"},{"location":"reference/indicator/vendor/qtpylib/qtpylib/#lettrade.indicator.vendor.qtpylib.qtpylib.roc","title":"roc","text":"<pre><code>roc(series, window=14)\n</code></pre> <p>compute rate of change</p> Source code in <code>lettrade/indicator/vendor/qtpylib/qtpylib.py</code> <pre><code>def roc(series, window=14):\n    \"\"\"\n    compute rate of change\n    \"\"\"\n    res = (series - series.shift(window)) / series.shift(window)\n    return pd.Series(index=series.index, data=res)\n</code></pre>"},{"location":"reference/indicator/vendor/qtpylib/qtpylib/#lettrade.indicator.vendor.qtpylib.qtpylib.rolling_vwap","title":"rolling_vwap","text":"<pre><code>rolling_vwap(bars, window=200, min_periods=None)\n</code></pre> <p>calculate vwap using moving window (input can be pandas series or numpy array) bars are usually mid [ (h+l)/2 ] or typical [ (h+l+c)/3 ]</p> Source code in <code>lettrade/indicator/vendor/qtpylib/qtpylib.py</code> <pre><code>def rolling_vwap(bars, window=200, min_periods=None):\n    \"\"\"\n    calculate vwap using moving window\n    (input can be pandas series or numpy array)\n    bars are usually mid [ (h+l)/2 ] or typical [ (h+l+c)/3 ]\n    \"\"\"\n    min_periods = window if min_periods is None else min_periods\n\n    typical = (bars[\"high\"] + bars[\"low\"] + bars[\"close\"]) / 3\n    volume = bars[\"volume\"]\n\n    left = (volume * typical).rolling(window=window, min_periods=min_periods).sum()\n    right = volume.rolling(window=window, min_periods=min_periods).sum()\n\n    return (\n        pd.Series(index=bars.index, data=(left / right))\n        .replace([np.inf, -np.inf], float(\"NaN\"))\n        .ffill()\n    )\n</code></pre>"},{"location":"reference/indicator/vendor/qtpylib/qtpylib/#lettrade.indicator.vendor.qtpylib.qtpylib.rsi","title":"rsi","text":"<pre><code>rsi(series, window=14)\n</code></pre> <p>compute the n period relative strength indicator</p> Source code in <code>lettrade/indicator/vendor/qtpylib/qtpylib.py</code> <pre><code>def rsi(series, window=14):\n    \"\"\"\n    compute the n period relative strength indicator\n    \"\"\"\n\n    # 100-(100/relative_strength)\n    deltas = np.diff(series)\n    seed = deltas[: window + 1]\n\n    # default values\n    ups = seed[seed &gt; 0].sum() / window\n    downs = -seed[seed &lt; 0].sum() / window\n    rsival = np.zeros_like(series)\n    rsival[:window] = 100.0 - 100.0 / (1.0 + ups / downs)\n\n    # period values\n    for i in range(window, len(series)):\n        delta = deltas[i - 1]\n        if delta &gt; 0:\n            upval = delta\n            downval = 0\n        else:\n            upval = 0\n            downval = -delta\n\n        ups = (ups * (window - 1) + upval) / window\n        downs = (downs * (window - 1.0) + downval) / window\n        rsival[i] = 100.0 - 100.0 / (1.0 + ups / downs)\n\n    # return rsival\n    return pd.Series(index=series.index, data=rsival)\n</code></pre>"},{"location":"reference/indicator/vendor/qtpylib/qtpylib/#lettrade.indicator.vendor.qtpylib.qtpylib.session","title":"session","text":"<pre><code>session(df, start='17:00', end='16:00')\n</code></pre> <p>remove previous globex day from df</p> Source code in <code>lettrade/indicator/vendor/qtpylib/qtpylib.py</code> <pre><code>def session(df, start=\"17:00\", end=\"16:00\"):\n    \"\"\"remove previous globex day from df\"\"\"\n    if df.empty:\n        return df\n\n    # get start/end/now as decimals\n    int_start = list(map(int, start.split(\":\")))\n    int_start = (int_start[0] + int_start[1] - 1 / 100) - 0.0001\n    int_end = list(map(int, end.split(\":\")))\n    int_end = int_end[0] + int_end[1] / 100\n    int_now = df[-1:].index.hour[0] + (df[:1].index.minute[0]) / 100\n\n    # same-dat session?\n    is_same_day = int_end &gt; int_start\n\n    # set pointers\n    curr = prev = df[-1:].index[0].strftime(\"%Y-%m-%d\")\n\n    # globex/forex session\n    if not is_same_day:\n        prev = (datetime.strptime(curr, \"%Y-%m-%d\") - timedelta(1)).strftime(\"%Y-%m-%d\")\n\n    # slice\n    if int_now &gt;= int_start:\n        df = df[df.index &gt;= curr + \" \" + start]\n    else:\n        df = df[df.index &gt;= prev + \" \" + start]\n\n    return df.copy()\n</code></pre>"},{"location":"reference/indicator/vendor/qtpylib/qtpylib/#lettrade.indicator.vendor.qtpylib.qtpylib.stoch","title":"stoch","text":"<pre><code>stoch(df, window=14, d=3, k=3, fast=False)\n</code></pre> <p>compute the n period relative strength indicator http://excelta.blogspot.co.il/2013/09/stochastic-oscillator-technical.html</p> Source code in <code>lettrade/indicator/vendor/qtpylib/qtpylib.py</code> <pre><code>def stoch(df, window=14, d=3, k=3, fast=False):\n    \"\"\"\n    compute the n period relative strength indicator\n    http://excelta.blogspot.co.il/2013/09/stochastic-oscillator-technical.html\n    \"\"\"\n\n    my_df = pd.DataFrame(index=df.index)\n\n    my_df[\"rolling_max\"] = df[\"high\"].rolling(window).max()\n    my_df[\"rolling_min\"] = df[\"low\"].rolling(window).min()\n\n    my_df[\"fast_k\"] = (\n        100\n        * (df[\"close\"] - my_df[\"rolling_min\"])\n        / (my_df[\"rolling_max\"] - my_df[\"rolling_min\"])\n    )\n    my_df[\"fast_d\"] = my_df[\"fast_k\"].rolling(d).mean()\n\n    if fast:\n        return my_df.loc[:, [\"fast_k\", \"fast_d\"]]\n\n    my_df[\"slow_k\"] = my_df[\"fast_k\"].rolling(k).mean()\n    my_df[\"slow_d\"] = my_df[\"slow_k\"].rolling(d).mean()\n\n    return my_df.loc[:, [\"slow_k\", \"slow_d\"]]\n</code></pre>"},{"location":"reference/indicator/vendor/qtpylib/qtpylib/#lettrade.indicator.vendor.qtpylib.qtpylib.vwap","title":"vwap","text":"<pre><code>vwap(bars)\n</code></pre> <p>calculate vwap of entire time series (input can be pandas series or numpy array) bars are usually mid [ (h+l)/2 ] or typical [ (h+l+c)/3 ]</p> Source code in <code>lettrade/indicator/vendor/qtpylib/qtpylib.py</code> <pre><code>def vwap(bars):\n    \"\"\"\n    calculate vwap of entire time series\n    (input can be pandas series or numpy array)\n    bars are usually mid [ (h+l)/2 ] or typical [ (h+l+c)/3 ]\n    \"\"\"\n    raise ValueError(\n        \"using `qtpylib.vwap` facilitates lookahead bias. Please use \"\n        \"`qtpylib.rolling_vwap` instead, which calculates vwap in a rolling manner.\"\n    )\n</code></pre>"},{"location":"reference/indicator/vendor/qtpylib/qtpylib/#lettrade.indicator.vendor.qtpylib.qtpylib.zlma","title":"zlma","text":"<pre><code>zlma(series, window=20, min_periods=None, kind='ema')\n</code></pre> <p>John Ehlers' Zero lag (exponential) moving average https://en.wikipedia.org/wiki/Zero_lag_exponential_moving_average</p> Source code in <code>lettrade/indicator/vendor/qtpylib/qtpylib.py</code> <pre><code>def zlma(series, window=20, min_periods=None, kind=\"ema\"):\n    \"\"\"\n    John Ehlers' Zero lag (exponential) moving average\n    https://en.wikipedia.org/wiki/Zero_lag_exponential_moving_average\n    \"\"\"\n    min_periods = window if min_periods is None else min_periods\n\n    lag = (window - 1) // 2\n    series = 2 * series - series.shift(lag)\n    if kind in [\"ewm\", \"ema\"]:\n        return wma(series, lag, min_periods)\n    elif kind == \"hma\":\n        return hma(series, lag, min_periods)\n    return sma(series, lag, min_periods)\n</code></pre>"},{"location":"reference/indicator/vendor/qtpylib/qtpylib/#lettrade.indicator.vendor.qtpylib.qtpylib.zscore","title":"zscore","text":"<pre><code>zscore(bars, window=20, stds=1, col='close')\n</code></pre> <p>get zscore of price</p> Source code in <code>lettrade/indicator/vendor/qtpylib/qtpylib.py</code> <pre><code>def zscore(bars, window=20, stds=1, col=\"close\"):\n    \"\"\"get zscore of price\"\"\"\n    std = numpy_rolling_std(bars[col], window)\n    mean = numpy_rolling_mean(bars[col], window)\n    return (bars[col] - mean) / (std * stds)\n</code></pre>"},{"location":"reference/indicator/volatility/","title":"Index","text":""},{"location":"reference/indicator/volatility/#lettrade.indicator.volatility","title":"volatility","text":""},{"location":"reference/indicator/volatility/keltner_channel/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> keltner_channel","text":""},{"location":"reference/indicator/volatility/keltner_channel/#lettrade.indicator.volatility.keltner_channel","title":"keltner_channel","text":""},{"location":"reference/indicator/volatility/keltner_channel/#lettrade.indicator.volatility.keltner_channel.keltner_channel","title":"keltner_channel","text":"<pre><code>keltner_channel(\n    df: DataFrame,\n    ma: int = 20,\n    ma_mode: Literal[\"ema\", \"sma\"] = \"ema\",\n    atr: int = 20,\n    shift: float = 1.6,\n    suffix: str = \"\",\n) -&gt; tuple[Series]\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>df</code>               (<code>DataFrame</code>)           \u2013            <p>description</p> </li> <li> <code>ma</code>               (<code>int</code>, default:                   <code>20</code> )           \u2013            <p>description. Defaults to 20.</p> </li> <li> <code>ma_mode</code>               (<code>Literal[&amp;quot;ema&amp;quot;, &amp;quot;sma&amp;quot;]</code>, default:                   <code>'ema'</code> )           \u2013            <p>description. Defaults to \"ema\".</p> </li> <li> <code>atr</code>               (<code>int</code>, default:                   <code>20</code> )           \u2013            <p>description. Defaults to 20.</p> </li> <li> <code>shift</code>               (<code>float</code>, default:                   <code>1.6</code> )           \u2013            <p>description. Defaults to 1.6.</p> </li> <li> <code>suffix</code>               (<code>str</code>, default:                   <code>''</code> )           \u2013            <p>description. Defaults to \"\".</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>tuple[Series]</code>           \u2013            <p>tuple[pd.Series]: upper, middle, lower</p> </li> </ul> Source code in <code>lettrade/indicator/volatility/keltner_channel.py</code> <pre><code>def keltner_channel(\n    df: pd.DataFrame,\n    # high: str = \"high\",\n    # low: str = \"low\",\n    # close: str = \"close\",\n    ma: int = 20,\n    ma_mode: Literal[\"ema\", \"sma\"] = \"ema\",\n    atr: int = 20,\n    shift: float = 1.6,\n    suffix: str = \"\",\n) -&gt; tuple[pd.Series]:\n    \"\"\"_summary_\n\n    Args:\n        df (pd.DataFrame): _description_\n        ma (int, optional): _description_. Defaults to 20.\n        ma_mode (Literal[&amp;quot;ema&amp;quot;, &amp;quot;sma&amp;quot;], optional): _description_. Defaults to \"ema\".\n        atr (int, optional): _description_. Defaults to 20.\n        shift (float, optional): _description_. Defaults to 1.6.\n        suffix (str, optional): _description_. Defaults to \"\".\n\n    Returns:\n        tuple[pd.Series]: upper, middle, lower\n    \"\"\"\n    ma_fn = ta.SMA if ma_mode == \"sma\" else ta.EMA\n\n    i_basis = ma_fn(df, timeperiod=ma)\n\n    i_atr = ta.ATR(df, timeperiod=atr)\n    i_upper = i_basis + shift * i_atr\n    i_lower = i_basis - shift * i_atr\n\n    i_upper.name = f\"kc_upper{suffix}\"\n    i_basis.name = f\"kc_basis{suffix}\"\n    i_lower.name = f\"kc_lower{suffix}\"\n\n    return i_upper, i_basis, i_lower\n</code></pre>"},{"location":"reference/plot/","title":"Index","text":""},{"location":"reference/plot/#lettrade.plot","title":"plot","text":""},{"location":"reference/plot/bot/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> bot","text":""},{"location":"reference/plot/bot/#lettrade.plot.bot","title":"bot","text":""},{"location":"reference/plot/bot/#lettrade.plot.bot.BotPlotter","title":"BotPlotter","text":"<pre><code>BotPlotter(bot: LetTradeBot)\n</code></pre> <p>               Bases: <code>Plotter</code></p> <p>Class help to plot bot result</p> Source code in <code>lettrade/plot/bot.py</code> <pre><code>def __init__(self, bot: \"LetTradeBot\") -&gt; None:\n    self.bot = bot\n    self.feeder = bot.feeder\n    self.exchange = bot.exchange\n    self.account = bot.account\n    self.strategy = bot.strategy\n\n    self.datas = self.feeder.datas\n</code></pre>"},{"location":"reference/plot/bot/#lettrade.plot.bot.BotPlotter.data","title":"data  <code>property</code> <code>writable</code>","text":"<pre><code>data: DataFeed\n</code></pre> <p>Get plotting main datafeed</p> <p>Returns:</p> <ul> <li> <code>DataFeed</code> (              <code>DataFeed</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/plot/bot/#lettrade.plot.bot.BotPlotter.datas","title":"datas  <code>instance-attribute</code>","text":"<pre><code>datas: list[DataFeed] = datas\n</code></pre> <p>All plotting datafeeds</p>"},{"location":"reference/plot/bot/#lettrade.plot.bot.BotPlotter.jump","title":"jump","text":"<pre><code>jump(\n    since: int | str | Timestamp | None = None,\n    order_id: Optional[str] = None,\n    position_id: Optional[str] = None,\n    range: int = 300,\n    name: Optional[str] = None,\n)\n</code></pre> <p>Jump to place on datefeed</p> <p>Parameters:</p> <ul> <li> <code>since</code>               (<code>int | str | Timestamp | None</code>, default:                   <code>None</code> )           \u2013            <p>Jump to index/datetime. Defaults to None.</p> </li> <li> <code>order_id</code>               (<code>Optional[str]</code>, default:                   <code>None</code> )           \u2013            <p>Jump to order id. Defaults to None.</p> </li> <li> <code>position_id</code>               (<code>Optional[str]</code>, default:                   <code>None</code> )           \u2013            <p>Jump to position id. Defaults to None.</p> </li> <li> <code>range</code>               (<code>int</code>, default:                   <code>300</code> )           \u2013            <p>number of candle plot. Defaults to 300.</p> </li> <li> <code>name</code>               (<code>Optional[str]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/plot/bot.py</code> <pre><code>def jump(\n    self,\n    since: int | str | pd.Timestamp | None = None,\n    order_id: Optional[str] = None,\n    position_id: Optional[str] = None,\n    range: int = 300,\n    name: Optional[str] = None,\n):\n    \"\"\"Jump to place on datefeed\n\n    Args:\n        since (int | str | pd.Timestamp | None, optional): Jump to index/datetime. Defaults to None.\n        order_id (Optional[str], optional): Jump to order id. Defaults to None.\n        position_id (Optional[str], optional): Jump to position id. Defaults to None.\n        range (int, optional): number of candle plot. Defaults to 300.\n        name (Optional[str], optional): _description_. Defaults to None.\n\n    Raises:\n        RuntimeError: _description_\n    \"\"\"\n    if self._datas_stored is None:\n        self._datas_stored = self.datas.copy()\n\n    if since is None:\n        if order_id is not None:  # Jump to order id\n            if not isinstance(order_id, str):\n                order_id = str(order_id)\n\n            if order_id in self.exchange.orders:\n                order = self.exchange.orders[order_id]\n            elif order_id in self.exchange.history_orders:\n                order = self.exchange.history_orders[order_id]\n            else:\n                raise RuntimeError(f\"Order id {order_id} not found\")\n\n            loc = self._data_stored.l.index.get_loc(order.placed_at)\n            since = loc - int(range / 2)\n\n        elif position_id is not None:  # Jump to position id\n            if not isinstance(position_id, str):\n                position_id = str(position_id)\n\n            if position_id in self.exchange.positions:\n                position = self.exchange.positions[position_id]\n            elif position_id in self.exchange.history_positions:\n                position = self.exchange.history_positions[position_id]\n            else:\n                raise RuntimeError(f\"Position id {position_id} not found\")\n\n            loc = self._data_stored.l.index.get_loc(position.entry_at)\n            since = loc - int(range / 2)\n        else:  # Reset\n            self.jump_reset()\n            return\n\n    elif isinstance(since, str):  # Parse string to pd.Timestamp, then since=index\n        since = pd.to_datetime(since, utc=True)\n        since = self._data_stored.l.index.get_loc(since)\n    elif isinstance(since, pd.Timestamp):  # Get index of Timestamp\n        since = self._data_stored.l.index.get_loc(since)\n\n    if name is None:\n        name = self._data_stored.name\n\n    # Since min at pointer_start\n    if since &lt; self._data_stored.l.pointer_start:\n        since = self._data_stored.l.pointer_start\n    # Since max at pointer_stop\n    if since &gt; self._data_stored.l.pointer_stop - range:\n        since = self._data_stored.l.pointer_stop - range\n\n    # Jump\n    jump_start_dt = None\n    jump_stop_dt = None\n    for i, data in enumerate(self._datas_stored):\n        if i == 0:\n            self.datas[i] = data.__class__(\n                data=data.l[since : since + range],\n                name=data.name,\n                timeframe=data.timeframe,\n            )\n            jump_start_dt = self.data.index[0]\n            jump_stop_dt = self.data.index[-1]\n        else:\n            self.datas[i] = data.__class__(\n                data=data.loc[\n                    (data.index &gt;= jump_start_dt) &amp; (data.index &lt;= jump_stop_dt)\n                ],\n                name=data.name,\n                timeframe=data.timeframe,\n            )\n\n    # Reload data\n    self.load()\n</code></pre>"},{"location":"reference/plot/bot/#lettrade.plot.bot.BotPlotter.jump_reset","title":"jump_reset","text":"<pre><code>jump_reset() -&gt; bool\n</code></pre> <p>Reset jump datafeeds back to bot datafeeds</p> Source code in <code>lettrade/plot/bot.py</code> <pre><code>def jump_reset(self) -&gt; bool:\n    \"\"\"Reset jump datafeeds back to bot datafeeds\"\"\"\n    if not self._datas_stored or self.data is self._data_stored:\n        return False\n\n    self.datas = self._datas_stored.copy()\n    return True\n</code></pre>"},{"location":"reference/plot/bot/#lettrade.plot.bot.BotPlotter.load","title":"load  <code>abstractmethod</code>","text":"<pre><code>load()\n</code></pre> <p>Load plot config from <code>Strategy.plot()</code> and setup candlestick/equity</p> Source code in <code>lettrade/plot/plot.py</code> <pre><code>@abstractmethod\ndef load(self):\n    \"\"\"Load plot config from `Strategy.plot()` and setup candlestick/equity\"\"\"\n</code></pre>"},{"location":"reference/plot/bot/#lettrade.plot.bot.BotPlotter.plot","title":"plot  <code>abstractmethod</code>","text":"<pre><code>plot(**kwargs)\n</code></pre> <p>Plot <code>equity</code>, <code>orders</code>, and <code>positions</code> then show</p> Source code in <code>lettrade/plot/plot.py</code> <pre><code>@abstractmethod\ndef plot(self, **kwargs):\n    \"\"\"Plot `equity`, `orders`, and `positions` then show\"\"\"\n</code></pre>"},{"location":"reference/plot/bot/#lettrade.plot.bot.BotPlotter.stop","title":"stop  <code>abstractmethod</code>","text":"<pre><code>stop()\n</code></pre> <p>stop plotter</p> Source code in <code>lettrade/plot/plot.py</code> <pre><code>@abstractmethod\ndef stop(self):\n    \"\"\"stop plotter\"\"\"\n</code></pre>"},{"location":"reference/plot/color/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> color","text":""},{"location":"reference/plot/color/#lettrade.plot.color","title":"color","text":""},{"location":"reference/plot/color/#lettrade.plot.color.PlotColor","title":"PlotColor","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>Enum plot color</p>"},{"location":"reference/plot/optimize/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> optimize","text":""},{"location":"reference/plot/optimize/#lettrade.plot.optimize","title":"optimize","text":""},{"location":"reference/plot/optimize/#lettrade.plot.optimize.OptimizePlotter","title":"OptimizePlotter","text":"<pre><code>OptimizePlotter()\n</code></pre> <p>               Bases: <code>Plotter</code></p> <p>Class help to plot <code>lettrade</code></p> Source code in <code>lettrade/plot/optimize.py</code> <pre><code>def __init__(self) -&gt; None:\n    super().__init__()\n</code></pre>"},{"location":"reference/plot/optimize/#lettrade.plot.optimize.OptimizePlotter.contour","title":"contour","text":"<pre><code>contour(x: str, y: str, z: str = 'equity', **kwargs)\n</code></pre> Source code in <code>lettrade/plot/optimize.py</code> <pre><code>def contour(self, x: str, y: str, z: str = \"equity\", **kwargs):\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/plot/optimize/#lettrade.plot.optimize.OptimizePlotter.heatmap","title":"heatmap","text":"<pre><code>heatmap(x: str, y: str, z: str = 'equity', **kwargs)\n</code></pre> Source code in <code>lettrade/plot/optimize.py</code> <pre><code>def heatmap(self, x: str, y: str, z: str = \"equity\", **kwargs):\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/plot/optimize/#lettrade.plot.optimize.OptimizePlotter.load","title":"load  <code>abstractmethod</code>","text":"<pre><code>load()\n</code></pre> <p>Load plot config from <code>Strategy.plot()</code> and setup candlestick/equity</p> Source code in <code>lettrade/plot/plot.py</code> <pre><code>@abstractmethod\ndef load(self):\n    \"\"\"Load plot config from `Strategy.plot()` and setup candlestick/equity\"\"\"\n</code></pre>"},{"location":"reference/plot/optimize/#lettrade.plot.optimize.OptimizePlotter.on_done","title":"on_done","text":"<pre><code>on_done()\n</code></pre> Source code in <code>lettrade/plot/optimize.py</code> <pre><code>def on_done(self):\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/plot/optimize/#lettrade.plot.optimize.OptimizePlotter.on_result","title":"on_result","text":"<pre><code>on_result(result)\n</code></pre> Source code in <code>lettrade/plot/optimize.py</code> <pre><code>def on_result(self, result):\n    \"\"\"\"\"\"\n</code></pre>"},{"location":"reference/plot/optimize/#lettrade.plot.optimize.OptimizePlotter.plot","title":"plot  <code>abstractmethod</code>","text":"<pre><code>plot(**kwargs)\n</code></pre> <p>Plot <code>equity</code>, <code>orders</code>, and <code>positions</code> then show</p> Source code in <code>lettrade/plot/plot.py</code> <pre><code>@abstractmethod\ndef plot(self, **kwargs):\n    \"\"\"Plot `equity`, `orders`, and `positions` then show\"\"\"\n</code></pre>"},{"location":"reference/plot/optimize/#lettrade.plot.optimize.OptimizePlotter.stop","title":"stop  <code>abstractmethod</code>","text":"<pre><code>stop()\n</code></pre> <p>stop plotter</p> Source code in <code>lettrade/plot/plot.py</code> <pre><code>@abstractmethod\ndef stop(self):\n    \"\"\"stop plotter\"\"\"\n</code></pre>"},{"location":"reference/plot/plot/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> plot","text":""},{"location":"reference/plot/plot/#lettrade.plot.plot","title":"plot","text":""},{"location":"reference/plot/plot/#lettrade.plot.plot.Plotter","title":"Plotter","text":"<p>               Bases: <code>ABC</code></p> <p>Base class help to plot strategy</p>"},{"location":"reference/plot/plot/#lettrade.plot.plot.Plotter.load","title":"load  <code>abstractmethod</code>","text":"<pre><code>load()\n</code></pre> <p>Load plot config from <code>Strategy.plot()</code> and setup candlestick/equity</p> Source code in <code>lettrade/plot/plot.py</code> <pre><code>@abstractmethod\ndef load(self):\n    \"\"\"Load plot config from `Strategy.plot()` and setup candlestick/equity\"\"\"\n</code></pre>"},{"location":"reference/plot/plot/#lettrade.plot.plot.Plotter.plot","title":"plot  <code>abstractmethod</code>","text":"<pre><code>plot(**kwargs)\n</code></pre> <p>Plot <code>equity</code>, <code>orders</code>, and <code>positions</code> then show</p> Source code in <code>lettrade/plot/plot.py</code> <pre><code>@abstractmethod\ndef plot(self, **kwargs):\n    \"\"\"Plot `equity`, `orders`, and `positions` then show\"\"\"\n</code></pre>"},{"location":"reference/plot/plot/#lettrade.plot.plot.Plotter.stop","title":"stop  <code>abstractmethod</code>","text":"<pre><code>stop()\n</code></pre> <p>stop plotter</p> Source code in <code>lettrade/plot/plot.py</code> <pre><code>@abstractmethod\ndef stop(self):\n    \"\"\"stop plotter\"\"\"\n</code></pre>"},{"location":"reference/plot/plotly/","title":"Index","text":""},{"location":"reference/plot/plotly/#lettrade.plot.plotly","title":"plotly","text":""},{"location":"reference/plot/plotly/helper/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> helper","text":""},{"location":"reference/plot/plotly/helper/#lettrade.plot.plotly.helper","title":"helper","text":""},{"location":"reference/plot/plotly/helper/#lettrade.plot.plotly.helper.plot_merge","title":"plot_merge","text":"<pre><code>plot_merge(source: dict, *updates: list[dict]) -&gt; dict\n</code></pre> <p>Merge multiple update plot config to source config</p> <p>Parameters:</p> <ul> <li> <code>source</code>               (<code>dict</code>)           \u2013            <p>description</p> </li> <li> <code>*updates</code>               (<code>list[dict]</code>, default:                   <code>()</code> )           \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict</code> (              <code>dict</code> )          \u2013            <p>Merged config</p> </li> </ul> Source code in <code>lettrade/plot/plotly/helper.py</code> <pre><code>def plot_merge(source: dict, *updates: list[dict]) -&gt; dict:\n    \"\"\"Merge multiple update plot config to source config\n\n    Args:\n        source (dict): _description_\n        *updates (list[dict]): _description_\n\n    Returns:\n        dict: Merged config\n    \"\"\"\n    for update in updates:\n        for k, v in update.items():\n            if k not in source:\n                source[k] = v\n                continue\n            if isinstance(source[k], list):\n                source[k].extend(v)\n                continue\n            if isinstance(source[k], list):\n                s = source[k]\n                for k1, v1 in v:\n                    s[k1] = v1\n                continue\n    return source\n</code></pre>"},{"location":"reference/plot/plotly/indicator/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> indicator","text":""},{"location":"reference/plot/plotly/indicator/#lettrade.plot.plotly.indicator","title":"indicator","text":""},{"location":"reference/plot/plotly/indicator/#lettrade.plot.plotly.indicator.plot_candle_highlight","title":"plot_candle_highlight","text":"<pre><code>plot_candle_highlight(\n    dataframe: DataFrame,\n    name: str = \"Candle highlight\",\n    width: int = 1,\n    increasing_line_color=\"#26c6da\",\n    decreasing_line_color=\"#ab47bc\",\n    **kwargs\n) -&gt; dict\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>dataframe</code>               (<code>DataFrame</code>)           \u2013            <p>description</p> </li> <li> <code>name</code>               (<code>str</code>, default:                   <code>'Candle highlight'</code> )           \u2013            <p>description. Defaults to \"Candle highlight\".</p> </li> <li> <code>width</code>               (<code>int</code>, default:                   <code>1</code> )           \u2013            <p>description. Defaults to 1.</p> </li> <li> <code>increasing_line_color</code>               (<code>str</code>, default:                   <code>'#26c6da'</code> )           \u2013            <p>description. Defaults to \"#26c6da\".</p> </li> <li> <code>decreasing_line_color</code>               (<code>str</code>, default:                   <code>'#ab47bc'</code> )           \u2013            <p>description. Defaults to \"#ab47bc\".</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict</code> (              <code>dict</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/plot/plotly/indicator.py</code> <pre><code>def plot_candle_highlight(\n    dataframe: pd.DataFrame,\n    name: str = \"Candle highlight\",\n    width: int = 1,\n    increasing_line_color=\"#26c6da\",\n    decreasing_line_color=\"#ab47bc\",\n    **kwargs,\n) -&gt; dict:\n    \"\"\"_summary_\n\n    Args:\n        dataframe (pd.DataFrame): _description_\n        name (str, optional): _description_. Defaults to \"Candle highlight\".\n        width (int, optional): _description_. Defaults to 1.\n        increasing_line_color (str, optional): _description_. Defaults to \"#26c6da\".\n        decreasing_line_color (str, optional): _description_. Defaults to \"#ab47bc\".\n\n    Returns:\n        dict: _description_\n    \"\"\"\n    return dict(\n        traces=[\n            go.Candlestick(\n                x=dataframe.index,\n                open=dataframe[\"open\"],\n                high=dataframe[\"high\"],\n                low=dataframe[\"low\"],\n                close=dataframe[\"close\"],\n                name=name,\n                line=dict(width=width),\n                increasing_line_color=increasing_line_color,\n                decreasing_line_color=decreasing_line_color,\n                hoverinfo=\"text\",\n                hovertext=name,\n                **kwargs,\n            ),\n        ]\n    )\n</code></pre>"},{"location":"reference/plot/plotly/indicator/#lettrade.plot.plotly.indicator.plot_ichimoku","title":"plot_ichimoku","text":"<pre><code>plot_ichimoku(\n    dataframe: DataFrame,\n    tenkan_sen=\"tenkan_sen\",\n    kijun_sen=\"kijun_sen\",\n    senkou_span_a=\"senkou_span_a\",\n    senkou_span_b=\"senkou_span_b\",\n    chikou_span=\"chikou_span\",\n    width=1,\n    tenkan_sen_color=\"#33BDFF\",\n    kijun_sen_color=\"#D105F5\",\n    senkou_span_a_color=\"#228B22\",\n    senkou_span_b_color=\"#FF3342\",\n    chikou_span_color=\"#F1F316\",\n) -&gt; dict\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>dataframe</code>               (<code>DataFrame</code>)           \u2013            <p>description</p> </li> <li> <code>tenkan_sen</code>               (<code>str</code>, default:                   <code>'tenkan_sen'</code> )           \u2013            <p>description. Defaults to \"tenkan_sen\".</p> </li> <li> <code>kijun_sen</code>               (<code>str</code>, default:                   <code>'kijun_sen'</code> )           \u2013            <p>description. Defaults to \"kijun_sen\".</p> </li> <li> <code>senkou_span_a</code>               (<code>str</code>, default:                   <code>'senkou_span_a'</code> )           \u2013            <p>description. Defaults to \"senkou_span_a\".</p> </li> <li> <code>senkou_span_b</code>               (<code>str</code>, default:                   <code>'senkou_span_b'</code> )           \u2013            <p>description. Defaults to \"senkou_span_b\".</p> </li> <li> <code>chikou_span</code>               (<code>str</code>, default:                   <code>'chikou_span'</code> )           \u2013            <p>description. Defaults to \"chikou_span\".</p> </li> <li> <code>width</code>               (<code>int</code>, default:                   <code>1</code> )           \u2013            <p>description. Defaults to 1.</p> </li> <li> <code>tenkan_sen_color</code>               (<code>str</code>, default:                   <code>'#33BDFF'</code> )           \u2013            <p>description. Defaults to \"#33BDFF\".</p> </li> <li> <code>kijun_sen_color</code>               (<code>str</code>, default:                   <code>'#D105F5'</code> )           \u2013            <p>description. Defaults to \"#D105F5\".</p> </li> <li> <code>senkou_span_a_color</code>               (<code>str</code>, default:                   <code>'#228B22'</code> )           \u2013            <p>description. Defaults to \"#228B22\".</p> </li> <li> <code>senkou_span_b_color</code>               (<code>str</code>, default:                   <code>'#FF3342'</code> )           \u2013            <p>description. Defaults to \"#FF3342\".</p> </li> <li> <code>chikou_span_color</code>               (<code>str</code>, default:                   <code>'#F1F316'</code> )           \u2013            <p>description. Defaults to \"#F1F316\".</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict</code> (              <code>dict</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/plot/plotly/indicator.py</code> <pre><code>def plot_ichimoku(\n    dataframe: pd.DataFrame,\n    tenkan_sen=\"tenkan_sen\",\n    kijun_sen=\"kijun_sen\",\n    senkou_span_a=\"senkou_span_a\",\n    senkou_span_b=\"senkou_span_b\",\n    chikou_span=\"chikou_span\",\n    width=1,\n    tenkan_sen_color=\"#33BDFF\",\n    kijun_sen_color=\"#D105F5\",\n    senkou_span_a_color=\"#228B22\",\n    senkou_span_b_color=\"#FF3342\",\n    chikou_span_color=\"#F1F316\",\n) -&gt; dict:\n    \"\"\"_summary_\n\n    Args:\n        dataframe (pd.DataFrame): _description_\n        tenkan_sen (str, optional): _description_. Defaults to \"tenkan_sen\".\n        kijun_sen (str, optional): _description_. Defaults to \"kijun_sen\".\n        senkou_span_a (str, optional): _description_. Defaults to \"senkou_span_a\".\n        senkou_span_b (str, optional): _description_. Defaults to \"senkou_span_b\".\n        chikou_span (str, optional): _description_. Defaults to \"chikou_span\".\n        width (int, optional): _description_. Defaults to 1.\n        tenkan_sen_color (str, optional): _description_. Defaults to \"#33BDFF\".\n        kijun_sen_color (str, optional): _description_. Defaults to \"#D105F5\".\n        senkou_span_a_color (str, optional): _description_. Defaults to \"#228B22\".\n        senkou_span_b_color (str, optional): _description_. Defaults to \"#FF3342\".\n        chikou_span_color (str, optional): _description_. Defaults to \"#F1F316\".\n\n    Returns:\n        dict: _description_\n    \"\"\"\n    return dict(\n        scatters=[\n            dict(\n                x=dataframe.index,\n                y=dataframe[tenkan_sen],\n                name=tenkan_sen,\n                type=\"scatter\",\n                mode=\"lines\",\n                line=dict(color=tenkan_sen_color, width=width),\n            ),\n            dict(\n                x=dataframe.index,\n                y=dataframe[kijun_sen],\n                name=kijun_sen,\n                type=\"scatter\",\n                mode=\"lines\",\n                line=dict(color=kijun_sen_color, width=width),\n            ),\n            dict(\n                x=dataframe.index,\n                y=dataframe[senkou_span_a],\n                name=senkou_span_a,\n                type=\"scatter\",\n                mode=\"lines\",\n                line=dict(color=senkou_span_a_color, width=width),\n            ),\n            dict(\n                x=dataframe.index,\n                y=dataframe[senkou_span_b],\n                name=senkou_span_b,\n                type=\"scatter\",\n                mode=\"lines\",\n                fill=\"tonexty\",\n                line=dict(color=senkou_span_b_color, width=width),\n            ),\n            dict(\n                x=dataframe.index,\n                y=dataframe[chikou_span],\n                name=chikou_span,\n                type=\"scatter\",\n                mode=\"lines\",\n                line=dict(color=chikou_span_color, width=width),\n            ),\n        ]\n    )\n</code></pre>"},{"location":"reference/plot/plotly/indicator/#lettrade.plot.plotly.indicator.plot_line","title":"plot_line","text":"<pre><code>plot_line(\n    series: Series,\n    color: str = \"#ffee58\",\n    width: int = 1,\n    name=None,\n    mode=\"lines\",\n    **kwargs\n) -&gt; dict\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>series</code>               (<code>Series</code>)           \u2013            <p>description</p> </li> <li> <code>color</code>               (<code>str</code>, default:                   <code>'#ffee58'</code> )           \u2013            <p>description. Defaults to \"#ffee58\".</p> </li> <li> <code>width</code>               (<code>int</code>, default:                   <code>1</code> )           \u2013            <p>description. Defaults to 1.</p> </li> <li> <code>name</code>               (<code>_type_</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>mode</code>               (<code>str</code>, default:                   <code>'lines'</code> )           \u2013            <p>description. Defaults to \"lines\".</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict</code> (              <code>dict</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/plot/plotly/indicator.py</code> <pre><code>def plot_line(\n    series: pd.Series,\n    color: str = \"#ffee58\",\n    width: int = 1,\n    name=None,\n    mode=\"lines\",\n    **kwargs,\n) -&gt; dict:\n    \"\"\"_summary_\n\n    Args:\n        series (pd.Series): _description_\n        color (str, optional): _description_. Defaults to \"#ffee58\".\n        width (int, optional): _description_. Defaults to 1.\n        name (_type_, optional): _description_. Defaults to None.\n        mode (str, optional): _description_. Defaults to \"lines\".\n\n    Returns:\n        dict: _description_\n    \"\"\"\n    return dict(\n        scatters=[\n            dict(\n                x=series.index,\n                y=series,\n                line=dict(color=color, width=width),\n                name=name or series.name,\n                mode=mode,\n                **kwargs,\n            )\n        ]\n    )\n</code></pre>"},{"location":"reference/plot/plotly/indicator/#lettrade.plot.plotly.indicator.plot_lines","title":"plot_lines","text":"<pre><code>plot_lines(\n    *serieses: list[Series],\n    color: str = \"#ffee58\",\n    width: int = 1,\n    name=None,\n    mode=\"lines\",\n    **kwargs\n) -&gt; dict\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>color</code>               (<code>str</code>, default:                   <code>'#ffee58'</code> )           \u2013            <p>description. Defaults to \"#ffee58\".</p> </li> <li> <code>width</code>               (<code>int</code>, default:                   <code>1</code> )           \u2013            <p>description. Defaults to 1.</p> </li> <li> <code>name</code>               (<code>_type_</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>mode</code>               (<code>str</code>, default:                   <code>'lines'</code> )           \u2013            <p>description. Defaults to \"lines\".</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict</code> (              <code>dict</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/plot/plotly/indicator.py</code> <pre><code>def plot_lines(\n    *serieses: list[pd.Series],\n    color: str = \"#ffee58\",\n    width: int = 1,\n    name=None,\n    mode=\"lines\",\n    **kwargs,\n) -&gt; dict:\n    \"\"\"_summary_\n\n    Args:\n        color (str, optional): _description_. Defaults to \"#ffee58\".\n        width (int, optional): _description_. Defaults to 1.\n        name (_type_, optional): _description_. Defaults to None.\n        mode (str, optional): _description_. Defaults to \"lines\".\n\n    Returns:\n        dict: _description_\n    \"\"\"\n    result = {}\n    for series in serieses:\n        plot_merge(\n            result,\n            plot_line(\n                series=series,\n                color=color,\n                width=width,\n                name=name,\n                mode=mode,\n                **kwargs,\n            ),\n        )\n    return result\n</code></pre>"},{"location":"reference/plot/plotly/indicator/#lettrade.plot.plotly.indicator.plot_mark","title":"plot_mark","text":"<pre><code>plot_mark(\n    series: Series,\n    color: str = \"#ffee58\",\n    width: int = 1,\n    mode=\"markers\",\n    name=None,\n    **kwargs\n) -&gt; dict\n</code></pre> <p>summary</p> <p>Parameters:</p> <ul> <li> <code>series</code>               (<code>Series</code>)           \u2013            <p>description</p> </li> <li> <code>color</code>               (<code>str</code>, default:                   <code>'#ffee58'</code> )           \u2013            <p>description. Defaults to \"#ffee58\".</p> </li> <li> <code>width</code>               (<code>int</code>, default:                   <code>1</code> )           \u2013            <p>description. Defaults to 1.</p> </li> <li> <code>mode</code>               (<code>str</code>, default:                   <code>'markers'</code> )           \u2013            <p>description. Defaults to \"markers\".</p> </li> <li> <code>name</code>               (<code>_type_</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict</code> (              <code>dict</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/plot/plotly/indicator.py</code> <pre><code>def plot_mark(\n    series: pd.Series,\n    color: str = \"#ffee58\",\n    width: int = 1,\n    mode=\"markers\",\n    name=None,\n    **kwargs,\n) -&gt; dict:\n    \"\"\"_summary_\n\n    Args:\n        series (pd.Series): _description_\n        color (str, optional): _description_. Defaults to \"#ffee58\".\n        width (int, optional): _description_. Defaults to 1.\n        mode (str, optional): _description_. Defaults to \"markers\".\n        name (_type_, optional): _description_. Defaults to None.\n\n    Returns:\n        dict: _description_\n    \"\"\"\n    return plot_line(\n        series=series,\n        color=color,\n        width=width,\n        mode=mode,\n        name=name,\n        **kwargs,\n    )\n</code></pre>"},{"location":"reference/plot/plotly/plotly/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> plotly","text":""},{"location":"reference/plot/plotly/plotly/#lettrade.plot.plotly.plotly","title":"plotly","text":""},{"location":"reference/plot/plotly/plotly/#lettrade.plot.plotly.plotly.PlotlyBotPlotter","title":"PlotlyBotPlotter","text":"<pre><code>PlotlyBotPlotter(bot: LetTradeBot)\n</code></pre> <p>               Bases: <code>BotPlotter</code></p> <p>Class help to plot <code>lettrade</code></p> Source code in <code>lettrade/plot/bot.py</code> <pre><code>def __init__(self, bot: \"LetTradeBot\") -&gt; None:\n    self.bot = bot\n    self.feeder = bot.feeder\n    self.exchange = bot.exchange\n    self.account = bot.account\n    self.strategy = bot.strategy\n\n    self.datas = self.feeder.datas\n</code></pre>"},{"location":"reference/plot/plotly/plotly/#lettrade.plot.plotly.plotly.PlotlyBotPlotter.data","title":"data  <code>property</code> <code>writable</code>","text":"<pre><code>data: DataFeed\n</code></pre> <p>Get plotting main datafeed</p> <p>Returns:</p> <ul> <li> <code>DataFeed</code> (              <code>DataFeed</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/plot/plotly/plotly/#lettrade.plot.plotly.plotly.PlotlyBotPlotter.datas","title":"datas  <code>instance-attribute</code>","text":"<pre><code>datas: list[DataFeed] = datas\n</code></pre> <p>All plotting datafeeds</p>"},{"location":"reference/plot/plotly/plotly/#lettrade.plot.plotly.plotly.PlotlyBotPlotter.jump","title":"jump","text":"<pre><code>jump(\n    since: int | str | Timestamp | None = None,\n    order_id: Optional[str] = None,\n    position_id: Optional[str] = None,\n    range: int = 300,\n    name: Optional[str] = None,\n)\n</code></pre> <p>Jump to place on datefeed</p> <p>Parameters:</p> <ul> <li> <code>since</code>               (<code>int | str | Timestamp | None</code>, default:                   <code>None</code> )           \u2013            <p>Jump to index/datetime. Defaults to None.</p> </li> <li> <code>order_id</code>               (<code>Optional[str]</code>, default:                   <code>None</code> )           \u2013            <p>Jump to order id. Defaults to None.</p> </li> <li> <code>position_id</code>               (<code>Optional[str]</code>, default:                   <code>None</code> )           \u2013            <p>Jump to position id. Defaults to None.</p> </li> <li> <code>range</code>               (<code>int</code>, default:                   <code>300</code> )           \u2013            <p>number of candle plot. Defaults to 300.</p> </li> <li> <code>name</code>               (<code>Optional[str]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/plot/bot.py</code> <pre><code>def jump(\n    self,\n    since: int | str | pd.Timestamp | None = None,\n    order_id: Optional[str] = None,\n    position_id: Optional[str] = None,\n    range: int = 300,\n    name: Optional[str] = None,\n):\n    \"\"\"Jump to place on datefeed\n\n    Args:\n        since (int | str | pd.Timestamp | None, optional): Jump to index/datetime. Defaults to None.\n        order_id (Optional[str], optional): Jump to order id. Defaults to None.\n        position_id (Optional[str], optional): Jump to position id. Defaults to None.\n        range (int, optional): number of candle plot. Defaults to 300.\n        name (Optional[str], optional): _description_. Defaults to None.\n\n    Raises:\n        RuntimeError: _description_\n    \"\"\"\n    if self._datas_stored is None:\n        self._datas_stored = self.datas.copy()\n\n    if since is None:\n        if order_id is not None:  # Jump to order id\n            if not isinstance(order_id, str):\n                order_id = str(order_id)\n\n            if order_id in self.exchange.orders:\n                order = self.exchange.orders[order_id]\n            elif order_id in self.exchange.history_orders:\n                order = self.exchange.history_orders[order_id]\n            else:\n                raise RuntimeError(f\"Order id {order_id} not found\")\n\n            loc = self._data_stored.l.index.get_loc(order.placed_at)\n            since = loc - int(range / 2)\n\n        elif position_id is not None:  # Jump to position id\n            if not isinstance(position_id, str):\n                position_id = str(position_id)\n\n            if position_id in self.exchange.positions:\n                position = self.exchange.positions[position_id]\n            elif position_id in self.exchange.history_positions:\n                position = self.exchange.history_positions[position_id]\n            else:\n                raise RuntimeError(f\"Position id {position_id} not found\")\n\n            loc = self._data_stored.l.index.get_loc(position.entry_at)\n            since = loc - int(range / 2)\n        else:  # Reset\n            self.jump_reset()\n            return\n\n    elif isinstance(since, str):  # Parse string to pd.Timestamp, then since=index\n        since = pd.to_datetime(since, utc=True)\n        since = self._data_stored.l.index.get_loc(since)\n    elif isinstance(since, pd.Timestamp):  # Get index of Timestamp\n        since = self._data_stored.l.index.get_loc(since)\n\n    if name is None:\n        name = self._data_stored.name\n\n    # Since min at pointer_start\n    if since &lt; self._data_stored.l.pointer_start:\n        since = self._data_stored.l.pointer_start\n    # Since max at pointer_stop\n    if since &gt; self._data_stored.l.pointer_stop - range:\n        since = self._data_stored.l.pointer_stop - range\n\n    # Jump\n    jump_start_dt = None\n    jump_stop_dt = None\n    for i, data in enumerate(self._datas_stored):\n        if i == 0:\n            self.datas[i] = data.__class__(\n                data=data.l[since : since + range],\n                name=data.name,\n                timeframe=data.timeframe,\n            )\n            jump_start_dt = self.data.index[0]\n            jump_stop_dt = self.data.index[-1]\n        else:\n            self.datas[i] = data.__class__(\n                data=data.loc[\n                    (data.index &gt;= jump_start_dt) &amp; (data.index &lt;= jump_stop_dt)\n                ],\n                name=data.name,\n                timeframe=data.timeframe,\n            )\n\n    # Reload data\n    self.load()\n</code></pre>"},{"location":"reference/plot/plotly/plotly/#lettrade.plot.plotly.plotly.PlotlyBotPlotter.jump_reset","title":"jump_reset","text":"<pre><code>jump_reset() -&gt; bool\n</code></pre> <p>Reset jump datafeeds back to bot datafeeds</p> Source code in <code>lettrade/plot/bot.py</code> <pre><code>def jump_reset(self) -&gt; bool:\n    \"\"\"Reset jump datafeeds back to bot datafeeds\"\"\"\n    if not self._datas_stored or self.data is self._data_stored:\n        return False\n\n    self.datas = self._datas_stored.copy()\n    return True\n</code></pre>"},{"location":"reference/plot/plotly/plotly/#lettrade.plot.plotly.plotly.PlotlyBotPlotter.load","title":"load","text":"<pre><code>load()\n</code></pre> <p>Load plot config from <code>Strategy.plot()</code> and setup candlestick/equity</p> Source code in <code>lettrade/plot/plotly/plotly.py</code> <pre><code>def load(self):\n    \"\"\"Load plot config from `Strategy.plot()` and setup candlestick/equity\"\"\"\n\n    # Strategy plot\n    config: dict = self.strategy.plot(*self.datas)\n\n    # Params\n    plot_rows = max(config.get(\"rows\", 2), len(self.datas) + 1)\n    params = dict(\n        rows=plot_rows,\n        shared_xaxes=True,\n        vertical_spacing=0.03,\n        # row_width=[0.2, 0.7],\n    )\n    if \"params\" in config:\n        params.update(**config[\"params\"])\n\n    # Init\n    self.figure = make_subplots(**params)\n\n    # Plot candles\n    self._data_shape = dict()\n    for i, data in enumerate(self.datas):\n        shape = dict(\n            row=1 + i,\n            col=1,\n        )\n        self._data_shape[data.name] = shape\n        self.figure.add_trace(\n            go.Candlestick(\n                x=data.index,\n                open=data[\"open\"],\n                high=data[\"high\"],\n                low=data[\"low\"],\n                close=data[\"close\"],\n                name=f\"Price {data.name}\",\n                # hoverinfo=\"x+y\",\n            ),\n            **shape,\n        )\n        self.figure.update_yaxes(\n            title_text=\"Price $\",\n            # autorange=True,\n            # fixedrange=False,\n            # showspikes=True,\n            # spikemode=\"across\",\n            mirror=True,\n            ticks=\"outside\",\n            showline=True,\n            # linecolor=\"\",\n            **shape,\n        )\n        self.figure.update_xaxes(\n            title_text=data.name,\n            rangeslider_visible=False,\n            # showspikes=True,\n            # spikemode=\"across\",\n            mirror=True,\n            ticks=\"outside\",\n            showline=True,\n            # linecolor=\"\",\n            **shape,\n        )\n\n    self._load_extend(config)\n\n    # Buttons\n    buttons = [dict(step=\"all\")]\n    match self.data.timeframe.unit:\n        case \"m\":\n            count = 1\n            step = \"day\"\n        case \"h\":\n            count = 7\n            step = \"day\"\n        case _:\n            count = 1\n            step = \"month\"\n    buttons.extend(\n        [\n            dict(\n                count=6 * count,\n                label=f\"{6*count} {step}\",\n                step=step,\n                stepmode=\"backward\",\n            ),\n            dict(\n                count=3 * count,\n                label=f\"{3*count} {step}\",\n                step=step,\n                stepmode=\"backward\",\n            ),\n            dict(\n                count=count,\n                label=f\"{count} {step}\",\n                step=step,\n                stepmode=\"backward\",\n            ),\n        ]\n    )\n\n    # Layout\n    layout_params = dict(\n        xaxis=dict(\n            rangeselector=dict(\n                bgcolor=\"#282a36\",\n                activecolor=\"#5b5b66\",\n                buttons=buttons,\n            ),\n        ),\n        yaxis=dict(\n            autorange=True,\n            fixedrange=False,\n        ),\n        title=dict(\n            text=str(self.strategy),\n            font=dict(size=24),\n            x=0.5,\n            xref=\"paper\",\n        ),\n        # autosize=False,\n        # width=800,\n        height=1_000 * plot_rows,\n        modebar_add=[\n            \"v1hovermode\",\n            \"hoverclosest\",\n            \"hovercompare\",\n            \"togglehover\",\n            \"togglespikelines\",\n            \"drawline\",\n            \"drawopenpath\",\n            \"drawclosedpath\",\n            \"drawcircle\",\n            \"drawrect\",\n            \"eraseshape\",\n        ],\n        # template=\"plotly_dark\",\n        hovermode=\"x unified\",\n    )\n    if \"layout\" in config:\n        layout_params.update(config[\"layout\"])\n    self.figure.update_layout(**layout_params)\n</code></pre>"},{"location":"reference/plot/plotly/plotly/#lettrade.plot.plotly.plotly.PlotlyBotPlotter.plot","title":"plot","text":"<pre><code>plot(jump: Optional[dict] = None, **kwargs)\n</code></pre> <p>Plot <code>equity</code>, <code>orders</code>, and <code>positions</code> then show</p> Source code in <code>lettrade/plot/plotly/plotly.py</code> <pre><code>def plot(self, jump: Optional[dict] = None, **kwargs):\n    \"\"\"Plot `equity`, `orders`, and `positions` then show\"\"\"\n    if jump is not None:\n        self.jump(**jump)\n    elif self.figure is None:\n        self.load()\n    else:\n        if self.jump_reset():\n            self.load()\n\n    self._plot_equity()\n    self._plot_orders()\n    self._plot_positions()\n\n    params = dict(layout_xaxis_rangeslider_visible=False)\n    params.update(**kwargs)\n    self.figure.update(**params)\n\n    self.figure.show()\n</code></pre>"},{"location":"reference/plot/plotly/plotly/#lettrade.plot.plotly.plotly.PlotlyBotPlotter.stop","title":"stop","text":"<pre><code>stop()\n</code></pre> <p>stop plotter</p> Source code in <code>lettrade/plot/plotly/plotly.py</code> <pre><code>def stop(self):\n    \"\"\"stop plotter\"\"\"\n</code></pre>"},{"location":"reference/stats/","title":"Index","text":""},{"location":"reference/stats/#lettrade.stats","title":"stats","text":""},{"location":"reference/stats/stats/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> stats","text":""},{"location":"reference/stats/stats/#lettrade.stats.stats","title":"stats","text":""},{"location":"reference/stats/stats/#lettrade.stats.stats.BotStatistic","title":"BotStatistic","text":"<pre><code>BotStatistic(\n    feeder: DataFeeder,\n    exchange: Exchange,\n    strategy: Strategy,\n)\n</code></pre> <p>Compute strategy result</p> Source code in <code>lettrade/stats/stats.py</code> <pre><code>def __init__(\n    self,\n    feeder: DataFeeder,\n    exchange: Exchange,\n    strategy: Strategy,\n) -&gt; None:\n    self.feeder: DataFeeder = feeder\n    self.exchange: Exchange = exchange\n    self.strategy: Strategy = strategy\n    self.account: Account = strategy.account\n</code></pre>"},{"location":"reference/stats/stats/#lettrade.stats.stats.BotStatistic.compute","title":"compute","text":"<pre><code>compute()\n</code></pre> <p>Calculate strategy report</p> Source code in <code>lettrade/stats/stats.py</code> <pre><code>def compute(self):\n    \"\"\"\n    Calculate strategy report\n    \"\"\"\n    data = self.feeder.data\n\n    equities = list(self.account._equities.values())\n    positions = list(self.exchange.history_positions.values()) + list(\n        self.exchange.positions.values()\n    )\n    positions_columns = (\n        \"size\",\n        \"entry_at\",\n        \"exit_at\",\n        \"entry_price\",\n        \"exit_price\",\n        \"pl\",\n        \"fee\",\n    )\n    positions_df = pd.DataFrame(columns=positions_columns)\n    for position in positions:\n        positions_df.at[position.id, positions_columns] = (\n            position.size,\n            position.entry_at,\n            position.exit_at,\n            position.entry_price,\n            position.exit_price,\n            position.pl,\n            position.fee,\n        )\n    positions_df[\"duration\"] = positions_df[\"entry_at\"] - positions_df[\"exit_at\"]\n\n    self.result = result = pd.Series(dtype=object)\n\n    result.loc[\"strategy\"] = str(self.strategy.__class__)\n    result.loc[\"start\"] = data.index[0]\n    result.loc[\"end\"] = data.index[-1]\n    result.loc[\"duration\"] = result.end - result.start\n\n    # Equity\n    result.loc[\"start_balance\"] = round(equities[0], 2)\n    result.loc[\"equity\"] = round(equities[-1], 2)\n\n    pl = equities[-1] - equities[0]\n    result.loc[\"pl\"] = round(pl, 2)\n    result.loc[\"pl_percent\"] = round(pl / equities[0] * 100, 2)\n\n    # TODO\n    # result.loc[\"buy_hold_pl_percent\"] = 2.0\n    # result.loc[\"max_drawdown_percent\"] = -33.08\n    # result.loc[\"avg_drawdown_percent\"] = -5.58\n    # result.loc[\"max_drawdown_duration\"] = \"688 days 00:00:00\"\n    # result.loc[\"avg_drawdown_duration\"] = \"41 days 00:00:00\"\n\n    # Separator\n    result.loc[\"\"] = \"\"\n\n    # Trades\n    positions_total = len(positions)\n    pl = positions_df[\"pl\"]\n\n    result.loc[\"positions\"] = positions_total\n\n    win_rate = np.nan if not positions_total else (pl &gt; 0).mean()\n    result.loc[\"win_rate\"] = round(win_rate, 2)\n    result.loc[\"fee\"] = positions_df.fee.sum()\n    result.loc[\"best_trade_percent\"] = pl.max()\n    result.loc[\"worst_trade_percent\"] = pl.min()\n    result.loc[\"sqn\"] = round(\n        np.sqrt(positions_total) * pl.mean() / (pl.std() or np.nan),\n        2,\n    )\n    result.loc[\"kelly_criterion\"] = win_rate - (1 - win_rate) / (\n        pl[pl &gt; 0].mean() / -pl[pl &lt; 0].mean()\n    )\n    # TODO\n    result.loc[\"profit_factor\"] = pl[pl &gt; 0].sum() / (\n        abs(pl[pl &lt; 0].sum()) or np.nan\n    )\n\n    return self.result\n</code></pre>"},{"location":"reference/stats/stats/#lettrade.stats.stats.BotStatistic.show","title":"show","text":"<pre><code>show()\n</code></pre> <p>Show statistic report</p> Source code in <code>lettrade/stats/stats.py</code> <pre><code>def show(self):\n    \"\"\"\n    Show statistic report\n    \"\"\"\n    if \"Start\" not in self.result:\n        logger.warning(\"call compute() before show()\")\n        self.compute()\n\n    # Show result inside docs session\n    if __debug__:\n        from lettrade.utils.docs import is_docs_session\n\n        if is_docs_session():\n            print(str(self))\n            return\n\n    logger.info(\n        \"\\n============= Statistic result =============\\n%s\\n\",\n        str(self),\n    )\n</code></pre>"},{"location":"reference/strategy/","title":"Index","text":""},{"location":"reference/strategy/#lettrade.strategy","title":"strategy","text":""},{"location":"reference/strategy/strategy/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> strategy","text":""},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy","title":"strategy","text":""},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy","title":"Strategy","text":"<pre><code>Strategy(\n    feeder: DataFeeder,\n    exchange: Exchange,\n    account: Account,\n    commander: Commander,\n    is_optimize: bool = False,\n    **kwargs\n)\n</code></pre> <p>Base class to implement a strategy</p> <p>Parameters:</p> <ul> <li> <code>feeder</code>               (<code>DataFeeder</code>)           \u2013            <p>DataFeeder for strategy</p> </li> <li> <code>exchange</code>               (<code>Exchange</code>)           \u2013            <p>Trading exchange</p> </li> <li> <code>account</code>               (<code>Account</code>)           \u2013            <p>Account manager</p> </li> <li> <code>commander</code>               (<code>Commander</code>)           \u2013            <p>Event/Command manager</p> </li> <li> <code>is_optimize</code>               (<code>Optional[bool]</code>, default:                   <code>False</code> )           \u2013            <p>flag validate optimize condiction. Defaults to False.</p> </li> </ul> <p>Raises:</p> <ul> <li> <code>RuntimeError</code>             \u2013            <p>Validate valid is_optimize flag</p> </li> </ul> Source code in <code>lettrade/strategy/strategy.py</code> <pre><code>def __init__(\n    self,\n    feeder: DataFeeder,\n    exchange: Exchange,\n    account: Account,\n    commander: Commander,\n    is_optimize: bool = False,\n    **kwargs,\n):\n    \"\"\"_summary_\n\n    Args:\n        feeder (DataFeeder): DataFeeder for strategy\n        exchange (Exchange): Trading exchange\n        account (Account): Account manager\n        commander (Commander): Event/Command manager\n        is_optimize (Optional[bool], optional): flag validate optimize condiction. Defaults to False.\n\n    Raises:\n        RuntimeError: Validate valid is_optimize flag\n    \"\"\"\n    self.__feeder: DataFeeder = feeder\n    self.__exchange: Exchange = exchange\n    self.__account: Account = account\n    self.__commander: Commander = commander\n\n    self.__datas: list[DataFeed] = self.__feeder.datas\n    self.__data: DataFeed = self.__feeder.data\n\n    if is_optimize and self.is_live:\n        raise RuntimeError(\"Optimize a live datafeeder\")\n    self.__is_optimize: bool = is_optimize\n\n    # Set parameters\n    if kwargs:\n        logger.info(\"Update strategy parameters %s\", kwargs)\n        for k, v in kwargs.items():\n            setattr(self, k, v)\n</code></pre>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.account","title":"account  <code>property</code>","text":"<pre><code>account: Account\n</code></pre> <p>Getter of <code>Account</code></p> <p>Returns:</p> <ul> <li> <code>Account</code> (              <code>Account</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.commander","title":"commander  <code>property</code>","text":"<pre><code>commander: Commander\n</code></pre> <p>Getter of <code>Commander</code></p> <p>Returns:</p> <ul> <li> <code>Commander</code> (              <code>Commander</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.data","title":"data  <code>property</code>","text":"<pre><code>data: DataFeed\n</code></pre> <p>Getter of main DataFeed</p> <p>Returns:</p> <ul> <li> <code>DataFeed</code> (              <code>DataFeed</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.datas","title":"datas  <code>property</code>","text":"<pre><code>datas: Sequence[DataFeed]\n</code></pre> <p>Getter of all DataFeed</p> <p>Returns:</p> <ul> <li> <code>Sequence[DataFeed]</code>           \u2013            <p>Sequence[DataFeed]: description</p> </li> </ul>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.exchange","title":"exchange  <code>property</code>","text":"<pre><code>exchange: Exchange\n</code></pre> <p>Getter of <code>Exchange</code></p> <p>Returns:</p> <ul> <li> <code>Exchange</code> (              <code>Exchange</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.feeder","title":"feeder  <code>property</code>","text":"<pre><code>feeder: DataFeeder\n</code></pre> <p>Getter of <code>DataFeeder</code></p> <p>Returns:</p> <ul> <li> <code>DataFeeder</code> (              <code>DataFeeder</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.history_orders","title":"history_orders  <code>property</code>","text":"<pre><code>history_orders: dict[str, Order]\n</code></pre> <p>Getter of history <code>Order</code> dict</p> <p>Returns:</p> <ul> <li> <code>dict[str, Order]</code>           \u2013            <p>dict[str, Order]: description</p> </li> </ul>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.history_positions","title":"history_positions  <code>property</code>","text":"<pre><code>history_positions: dict[str, Position]\n</code></pre> <p>Getter of history <code>Position</code> dict</p> <p>Returns:</p> <ul> <li> <code>dict[str, Position]</code>           \u2013            <p>dict[str, Position]: description</p> </li> </ul>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.is_backtest","title":"is_backtest  <code>property</code>","text":"<pre><code>is_backtest: bool\n</code></pre> <p>Flag to check strategy is running in backtest DataFeeder</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.is_live","title":"is_live  <code>property</code>","text":"<pre><code>is_live: bool\n</code></pre> <p>Flag to check strategy is running in live DataFeeder</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.is_optimize","title":"is_optimize  <code>property</code>","text":"<pre><code>is_optimize: bool\n</code></pre> <p>Flag to check strategy is running in optimize session</p> <p>Returns:</p> <ul> <li> <code>bool</code> (              <code>bool</code> )          \u2013            <p>description</p> </li> </ul>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.now","title":"now  <code>property</code>","text":"<pre><code>now: datetime\n</code></pre> <p>Getter of current datetime</p> <p>Returns:</p> <ul> <li> <code>datetime</code> (              <code>datetime</code> )          \u2013            <p>current datetime of bar</p> </li> </ul>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.orders","title":"orders  <code>property</code>","text":"<pre><code>orders: dict[str, Order]\n</code></pre> <p>Getter of <code>Order</code> dict</p> <p>Returns:</p> <ul> <li> <code>dict[str, Order]</code>           \u2013            <p>dict[str, Order]: description</p> </li> </ul>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.positions","title":"positions  <code>property</code>","text":"<pre><code>positions: dict[str, Position]\n</code></pre> <p>Getter of <code>Position</code> dict</p> <p>Returns:</p> <ul> <li> <code>dict[str, Position]</code>           \u2013            <p>dict[str, Position]: description</p> </li> </ul>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.indicators","title":"indicators","text":"<pre><code>indicators(df: DataFeed) -&gt; None\n</code></pre> <p>All indicator and signal should implement here to cacheable. Because of <code>lettrade</code> will cache/pre-load all <code>DataFeed</code></p> <p>Parameters:</p> <ul> <li> <code>df</code>               (<code>DataFeed</code>)           \u2013            <p>main data of strategy</p> </li> </ul> Source code in <code>lettrade/strategy/strategy.py</code> <pre><code>def indicators(self, df: DataFeed) -&gt; None:\n    \"\"\"All indicator and signal should implement here to cacheable.\n    Because of `lettrade` will cache/pre-load all `DataFeed`\n\n    Args:\n        df (DataFeed): main data of strategy\n    \"\"\"\n</code></pre>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.init","title":"init","text":"<pre><code>init() -&gt; None\n</code></pre> <p>Init strategy variables</p> Source code in <code>lettrade/strategy/strategy.py</code> <pre><code>def init(self) -&gt; None:\n    \"\"\"Init strategy variables\"\"\"\n</code></pre>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.next","title":"next","text":"<pre><code>next(df: DataFeed, *others: list[DataFeed]) -&gt; None\n</code></pre> <p>Next bar event</p> Source code in <code>lettrade/strategy/strategy.py</code> <pre><code>def next(self, df: DataFeed, *others: list[DataFeed]) -&gt; None:\n    \"\"\"Next bar event\"\"\"\n</code></pre>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.on_execution","title":"on_execution","text":"<pre><code>on_execution(execution: Execution)\n</code></pre> <p>Listen for <code>Execution</code> event</p> <p>Parameters:</p> <ul> <li> <code>execution</code>               (<code>Execution</code>)           \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/strategy/strategy.py</code> <pre><code>def on_execution(self, execution: Execution):\n    \"\"\"Listen for `Execution` event\n\n    Args:\n        execution (Execution): _description_\n    \"\"\"\n</code></pre>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.on_notify","title":"on_notify","text":"<pre><code>on_notify(*args, **kwargs) -&gt; None\n</code></pre> <p>Listen for <code>notify</code> event</p> <p>Returns:</p> <ul> <li> <code>_type_</code> (              <code>None</code> )          \u2013            <p><code>None</code></p> </li> </ul> Source code in <code>lettrade/strategy/strategy.py</code> <pre><code>def on_notify(self, *args, **kwargs) -&gt; None:\n    \"\"\"Listen for `notify` event\n\n    Returns:\n        _type_: `None`\n    \"\"\"\n</code></pre>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.on_order","title":"on_order","text":"<pre><code>on_order(order: Order)\n</code></pre> <p>Listen for <code>Order</code> event</p> <p>Parameters:</p> <ul> <li> <code>order</code>               (<code>Order</code>)           \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/strategy/strategy.py</code> <pre><code>def on_order(self, order: Order):\n    \"\"\"Listen for `Order` event\n\n    Args:\n        order (Order): _description_\n    \"\"\"\n</code></pre>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.on_position","title":"on_position","text":"<pre><code>on_position(position: Position)\n</code></pre> <p>Listen for <code>Position</code> event</p> <p>Parameters:</p> <ul> <li> <code>position</code>               (<code>Position</code>)           \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/strategy/strategy.py</code> <pre><code>def on_position(self, position: Position):\n    \"\"\"Listen for `Position` event\n\n    Args:\n        position (Position): _description_\n    \"\"\"\n</code></pre>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.on_transaction","title":"on_transaction","text":"<pre><code>on_transaction(trans: Execution | Order | Position)\n</code></pre> <p>Listen for transaction events</p> <p>Parameters:</p> <ul> <li> <code>trans</code>               (<code>Execution | Order | Position</code>)           \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/strategy/strategy.py</code> <pre><code>def on_transaction(self, trans: Execution | Order | Position):\n    \"\"\"Listen for transaction events\n\n    Args:\n        trans (Execution | Order | Position): _description_\n    \"\"\"\n</code></pre>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.order_buy","title":"order_buy","text":"<pre><code>order_buy(\n    size: Optional[float] = None,\n    limit: Optional[float] = None,\n    stop: Optional[float] = None,\n    sl: Optional[float] = None,\n    tp: Optional[float] = None,\n    tag: Optional[object] = None,\n    **kwargs\n) -&gt; OrderResult\n</code></pre> <p>Place a new long order.</p> <p>Parameters:</p> <ul> <li> <code>size</code>               (<code>Optional[float]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>limit</code>               (<code>Optional[float]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>stop</code>               (<code>Optional[float]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>sl</code>               (<code>Optional[float]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>tp</code>               (<code>Optional[float]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>tag</code>               (<code>Optional[object]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>**kwargs</code>               (<code>Optional[dict]</code>, default:                   <code>{}</code> )           \u2013            <p>Extra-parameters send to <code>Exchange.new_order</code></p> </li> </ul> <p>Returns:</p> <ul> <li> <code>OrderResult</code> (              <code>OrderResult</code> )          \u2013            <p>order result information</p> </li> </ul> Source code in <code>lettrade/strategy/strategy.py</code> <pre><code>@final\ndef order_buy(\n    self,\n    size: Optional[float] = None,\n    limit: Optional[float] = None,\n    stop: Optional[float] = None,\n    sl: Optional[float] = None,\n    tp: Optional[float] = None,\n    tag: Optional[object] = None,\n    **kwargs,\n) -&gt; OrderResult:\n    \"\"\"Place a new long order.\n\n    Args:\n        size (Optional[float], optional): _description_. Defaults to None.\n        limit (Optional[float], optional): _description_. Defaults to None.\n        stop (Optional[float], optional): _description_. Defaults to None.\n        sl (Optional[float], optional): _description_. Defaults to None.\n        tp (Optional[float], optional): _description_. Defaults to None.\n        tag (Optional[object], optional): _description_. Defaults to None.\n        **kwargs (Optional[dict], optional): Extra-parameters send to `Exchange.new_order`\n\n    Returns:\n        OrderResult: order result information\n    \"\"\"\n    return self.order_place(\n        side=TradeSide.Buy,\n        size=size,\n        limit=limit,\n        stop=stop,\n        sl=sl,\n        tp=tp,\n        tag=tag,\n        **kwargs,\n    )\n</code></pre>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.order_sell","title":"order_sell","text":"<pre><code>order_sell(\n    size: Optional[float] = None,\n    limit: Optional[float] = None,\n    stop: Optional[float] = None,\n    sl: Optional[float] = None,\n    tp: Optional[float] = None,\n    tag: Optional[object] = None,\n    **kwargs\n) -&gt; OrderResult\n</code></pre> <p>Place a new short order.</p> <p>Parameters:</p> <ul> <li> <code>size</code>               (<code>Optional[float]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>limit</code>               (<code>Optional[float]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>stop</code>               (<code>Optional[float]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>sl</code>               (<code>Optional[float]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>tp</code>               (<code>Optional[float]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>tag</code>               (<code>Optional[object]</code>, default:                   <code>None</code> )           \u2013            <p>description. Defaults to None.</p> </li> <li> <code>**kwargs</code>               (<code>Optional[dict]</code>, default:                   <code>{}</code> )           \u2013            <p>Extra-parameters send to <code>Exchange.new_order</code></p> </li> </ul> <p>Returns:</p> <ul> <li> <code>OrderResult</code> (              <code>OrderResult</code> )          \u2013            <p>order result information</p> </li> </ul> Source code in <code>lettrade/strategy/strategy.py</code> <pre><code>@final\ndef order_sell(\n    self,\n    size: Optional[float] = None,\n    limit: Optional[float] = None,\n    stop: Optional[float] = None,\n    sl: Optional[float] = None,\n    tp: Optional[float] = None,\n    tag: Optional[object] = None,\n    **kwargs,\n) -&gt; OrderResult:\n    \"\"\"Place a new short order.\n\n    Args:\n        size (Optional[float], optional): _description_. Defaults to None.\n        limit (Optional[float], optional): _description_. Defaults to None.\n        stop (Optional[float], optional): _description_. Defaults to None.\n        sl (Optional[float], optional): _description_. Defaults to None.\n        tp (Optional[float], optional): _description_. Defaults to None.\n        tag (Optional[object], optional): _description_. Defaults to None.\n        **kwargs (Optional[dict], optional): Extra-parameters send to `Exchange.new_order`\n\n    Returns:\n        OrderResult: order result information\n    \"\"\"\n    return self.order_place(\n        side=TradeSide.Sell,\n        size=size,\n        limit=limit,\n        stop=stop,\n        sl=sl,\n        tp=tp,\n        tag=tag,\n        **kwargs,\n    )\n</code></pre>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.plot","title":"plot","text":"<pre><code>plot(df: DataFeed, *others: list[DataFeed]) -&gt; dict\n</code></pre> <p>Custom config of plot</p> <p>Parameters:</p> <ul> <li> <code>df</code>               (<code>DataFeed</code>)           \u2013            <p>plot DataFeed</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>dict</code> (              <code>dict</code> )          \u2013            <p>config</p> </li> </ul> Source code in <code>lettrade/strategy/strategy.py</code> <pre><code>def plot(self, df: DataFeed, *others: list[DataFeed]) -&gt; dict:\n    \"\"\"Custom config of plot\n\n    Args:\n        df (DataFeed): plot DataFeed\n\n    Returns:\n        dict: config\n    \"\"\"\n    return dict()\n</code></pre>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.send","title":"send","text":"<pre><code>send(msg: str, **kwargs) -&gt; Any\n</code></pre> <p>Send message to commander</p> <p>Parameters:</p> <ul> <li> <code>msg</code>               (<code>str</code>)           \u2013            <p>message string</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Any</code> (              <code>Any</code> )          \u2013            <p>description</p> </li> </ul> Source code in <code>lettrade/strategy/strategy.py</code> <pre><code>@final\ndef send(self, msg: str, **kwargs) -&gt; Any:\n    \"\"\"Send message to commander\n\n    Args:\n        msg (str): message string\n\n    Returns:\n        Any: _description_\n    \"\"\"\n    return self.commander.send_message(msg=msg, **kwargs)\n</code></pre>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.start","title":"start","text":"<pre><code>start(df: DataFeed, *others: list[DataFeed]) -&gt; None\n</code></pre> <p>call after <code>init()</code> and before first <code>next()</code> is called</p> <p>Parameters:</p> <ul> <li> <code>df</code>               (<code>DataFeed</code>)           \u2013            <p>description</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>_type_</code> (              <code>None</code> )          \u2013            <p><code>None</code></p> </li> </ul> Source code in <code>lettrade/strategy/strategy.py</code> <pre><code>def start(self, df: DataFeed, *others: list[DataFeed]) -&gt; None:\n    \"\"\"call after `init()` and before first `next()` is called\n\n    Args:\n        df (DataFeed): _description_\n\n    Returns:\n        _type_: `None`\n    \"\"\"\n</code></pre>"},{"location":"reference/strategy/strategy/#lettrade.strategy.strategy.Strategy.stop","title":"stop","text":"<pre><code>stop(df: DataFeed, *others: list[DataFeed]) -&gt; None\n</code></pre> <p>Call when strategy run completed</p> <p>Parameters:</p> <ul> <li> <code>df</code>               (<code>DataFeed</code>)           \u2013            <p>main data of strategy</p> </li> </ul> Source code in <code>lettrade/strategy/strategy.py</code> <pre><code>def stop(self, df: DataFeed, *others: list[DataFeed]) -&gt; None:\n    \"\"\"Call when strategy run completed\n\n    Args:\n        df (DataFeed): main data of strategy\n    \"\"\"\n</code></pre>"},{"location":"reference/utils/","title":"Index","text":""},{"location":"reference/utils/#lettrade.utils","title":"utils","text":""},{"location":"reference/utils/docs/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> docs","text":""},{"location":"reference/utils/docs/#lettrade.utils.docs","title":"docs","text":""},{"location":"reference/utils/notebook/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> notebook","text":""},{"location":"reference/utils/notebook/#lettrade.utils.notebook","title":"notebook","text":""},{"location":"tutorial/tut-001/","title":"Tutorial 001","text":"<p>This tutorial tend to help understand basic of <code>lettrade</code></p>"},{"location":"tutorial/tut-001/#main-object","title":"Main object","text":"<ul> <li>DataFeed: is data for your bot to running, this is a implement of <code>pandas.DataFrame</code>, so it have all <code>pandas.DataFrame</code> feature</li> <li>Strategy: is base Strategy of your bot, implement your bot with this as base class</li> <li>Exchange: is base Exchange of your bot, where control trading event and logic</li> <li>Account: is base class, where your bot will control account cash, equity, risk, size, commission...</li> <li>Commander: is base class, where your bot will communicate with you in realtime</li> <li>Brain: is brain of your bot, it just internal object, so don't need to care about it</li> </ul>"},{"location":"tutorial/tut-001/#init-your-bot","title":"Init your bot","text":""},{"location":"tutorial/tut-001/#init-datafeed","title":"Init DataFeed","text":"<p><pre><code>from lettrade import DataFeed\nimport yfinance as yf\n\n# Your pandas.Dataframe\nmsft = yf.Ticker(\"MSFT\")\ndf = msft.history(period=\"1mo\")\n\nprint(\"pandas DataFrame:\\n\", df.tail())\n\ndata = DataFeed(data=df, name=\"MSFT\")\n\nprint(\"LetTrade DataFeed:\\n\", data.tail())\n</code></pre> <pre><code>pandas DataFrame:\n                                  Open        High         Low       Close    Volume  Dividends  Stock Splits\nDate                                                                                                        \n2024-05-15 00:00:00-04:00  417.899994  423.809998  417.269989  423.079987  22239500       0.75           0.0\n2024-05-16 00:00:00-04:00  421.799988  425.420013  420.350006  420.989990  17530100       0.00           0.0\n2024-05-17 00:00:00-04:00  422.540009  422.920013  418.029999  420.209991  15352200       0.00           0.0\n2024-05-20 00:00:00-04:00  420.209991  426.769989  419.989990  425.339996  16272100       0.00           0.0\n2024-05-21 00:00:00-04:00  426.829987  432.970001  424.850006  429.040009  21428700       0.00           0.0\nLetTrade DataFeed:\n                         Date        Open        High         Low       Close    Volume  Dividends  Stock Splits\n17 2024-05-15 00:00:00-04:00  417.899994  423.809998  417.269989  423.079987  22239500       0.75           0.0\n18 2024-05-16 00:00:00-04:00  421.799988  425.420013  420.350006  420.989990  17530100       0.00           0.0\n19 2024-05-17 00:00:00-04:00  422.540009  422.920013  418.029999  420.209991  15352200       0.00           0.0\n20 2024-05-20 00:00:00-04:00  420.209991  426.769989  419.989990  425.339996  16272100       0.00           0.0\n21 2024-05-21 00:00:00-04:00  426.829987  432.970001  424.850006  429.040009  21428700       0.00           0.0\n</code></pre></p>"},{"location":"tutorial/tut-001/#strategy-implement","title":"Strategy implement","text":"<pre><code>class SmaCross(Strategy):\n    ema1_period = 9\n    ema2_period = 21\n</code></pre>"},{"location":"tutorial/tut-001/#indicatorsignal-implement","title":"Indicator/signal implement","text":"<pre><code>import talib.abstract as ta\nfrom lettrade import DataFeed, indicator as i\n\ndef indicators(self, df: DataFeed):\n    df[\"ema1\"] = ta.EMA(df, timeperiod=self.ema1_period)\n    df[\"ema2\"] = ta.EMA(df, timeperiod=self.ema2_period)\n\n    df[\"signal_ema_crossover\"] = i.crossover(df.ema1, df.ema2)\n    df[\"signal_ema_crossunder\"] = i.crossunder(df.ema1, df.ema2)\n</code></pre>"},{"location":"tutorial/metatrader/feeder/","title":"Interactive with MetaTraderDataFeeder","text":"In\u00a0[1]: Copied! <pre>from dotenv import load_dotenv\nimport os\nfrom lettrade.exchange.live.metatrader import MetaTraderDataFeeder\n\nload_dotenv()\n\nfeeder = MetaTraderDataFeeder.instance(\n    api_kwargs=dict(\n        login=int(os.environ[\"MT5_LOGIN\"]),\n        password=os.environ[\"MT5_PASSWORD\"],\n        server=os.environ[\"MT5_SERVER\"],\n        # wine=os.getenv(\"MT5_WINE\", None),\n    )\n)\n</pre> from dotenv import load_dotenv import os from lettrade.exchange.live.metatrader import MetaTraderDataFeeder  load_dotenv()  feeder = MetaTraderDataFeeder.instance(     api_kwargs=dict(         login=int(os.environ[\"MT5_LOGIN\"]),         password=os.environ[\"MT5_PASSWORD\"],         server=os.environ[\"MT5_SERVER\"],         # wine=os.getenv(\"MT5_WINE\", None),     ) ) In\u00a0[2]: Copied! <pre>data = feeder.data_new(symbol=\"EURUSD\", timeframe=\"1h\")\ndata\n</pre> data = feeder.data_new(symbol=\"EURUSD\", timeframe=\"1h\") data Out[2]: open high low close volume datetime In\u00a0[3]: Copied! <pre>data.bars_load(since=0, to=1000)\ndata\n</pre> data.bars_load(since=0, to=1000) data Out[3]: open high low close volume datetime 2024-04-10 16:00:00+00:00 1.07808 1.07813 1.07496 1.0751 8742 2024-04-10 17:00:00+00:00 1.07511 1.07671 1.07457 1.07534 6100 2024-04-10 18:00:00+00:00 1.07534 1.07548 1.07335 1.07368 3773 2024-04-10 19:00:00+00:00 1.07368 1.07375 1.07288 1.0736 2439 2024-04-10 20:00:00+00:00 1.07362 1.07544 1.07292 1.07504 5373 ... ... ... ... ... ... 2024-06-07 03:00:00+00:00 1.08918 1.08925 1.08869 1.08896 1113 2024-06-07 04:00:00+00:00 1.08896 1.08959 1.08872 1.08958 1487 2024-06-07 05:00:00+00:00 1.08958 1.08979 1.08945 1.0897 858 2024-06-07 06:00:00+00:00 1.0897 1.08979 1.08937 1.08946 782 2024-06-07 07:00:00+00:00 1.08946 1.08969 1.08936 1.08961 427 <p>1000 rows \u00d7 5 columns</p> In\u00a0[4]: Copied! <pre>import plotly.io as pio\n\npio.renderers.default = \"notebook\"\npio.templates.default = \"plotly_dark\"\n</pre> import plotly.io as pio  pio.renderers.default = \"notebook\" pio.templates.default = \"plotly_dark\" In\u00a0[5]: Copied! <pre>import plotly.graph_objects as go\n\nfig = go.Figure(\n    data=[\n        go.Candlestick(\n            x=data.index,\n            open=data.open,\n            high=data.high,\n            low=data.low,\n            close=data.close,\n        )\n    ]\n)\n\nfig.show()\n</pre> import plotly.graph_objects as go  fig = go.Figure(     data=[         go.Candlestick(             x=data.index,             open=data.open,             high=data.high,             low=data.low,             close=data.close,         )     ] )  fig.show() In\u00a0[6]: Copied! <pre>markets = feeder.markets(\"*EUR*\")\n</pre> markets = feeder.markets(\"*EUR*\") In\u00a0[7]: Copied! <pre>for s in markets:\n    print(s._asdict())\n</pre> for s in markets:     print(s._asdict()) <pre>{'custom': False, 'chart_mode': 0, 'select': False, 'visible': False, 'session_deals': 0, 'session_buy_orders': 0, 'session_sell_orders': 0, 'volume': 0, 'volumehigh': 0, 'volumelow': 0, 'time': 0, 'digits': 3, 'spread': 0, 'spread_float': True, 'ticks_bookdepth': 0, 'trade_calc_mode': 2, 'trade_mode': 4, 'start_time': 0, 'expiration_time': 0, 'trade_stops_level': 0, 'trade_freeze_level': 0, 'trade_exemode': 2, 'swap_mode': 5, 'swap_rollover3days': 5, 'margin_hedged_use_leg': False, 'expiration_mode': 15, 'filling_mode': 2, 'order_mode': 127, 'order_gtc_mode': 0, 'option_mode': 0, 'option_right': 0, 'bid': 0.0, 'bidhigh': 0.0, 'bidlow': 0.0, 'ask': 0.0, 'askhigh': 0.0, 'asklow': 0.0, 'last': 0.0, 'lasthigh': 0.0, 'lastlow': 0.0, 'volume_real': 0.0, 'volumehigh_real': 0.0, 'volumelow_real': 0.0, 'option_strike': 0.0, 'point': 0.001, 'trade_tick_value': 0.001, 'trade_tick_value_profit': 0.001, 'trade_tick_value_loss': 0.001, 'trade_tick_size': 0.001, 'trade_contract_size': 1.0, 'trade_accrued_interest': 0.0, 'trade_face_value': 0.0, 'trade_liquidity_rate': 0.0, 'volume_min': 1.0, 'volume_max': 10000.0, 'volume_step': 1.0, 'volume_limit': 0.0, 'swap_long': -1.18, 'swap_short': -4.07, 'margin_initial': 0.0, 'margin_maintenance': 0.0, 'session_volume': 0.0, 'session_turnover': 0.0, 'session_interest': 0.0, 'session_buy_orders_volume': 0.0, 'session_sell_orders_volume': 0.0, 'session_open': 0.0, 'session_close': 0.0, 'session_aw': 0.0, 'session_price_settlement': 0.0, 'session_price_limit_min': 0.0, 'session_price_limit_max': 0.0, 'margin_hedged': 0.0, 'price_change': 0.0, 'price_volatility': 0.0, 'price_theoretical': 0.0, 'price_greeks_delta': 0.0, 'price_greeks_theta': 0.0, 'price_greeks_gamma': 0.0, 'price_greeks_vega': 0.0, 'price_greeks_rho': 0.0, 'price_greeks_omega': 0.0, 'price_sensitivity': 0.0, 'basis': '', 'category': '', 'currency_base': 'EUR', 'currency_profit': 'EUR', 'currency_margin': 'EUR', 'bank': '', 'description': 'Euro Bobl Cash - FGBM', 'exchange': '', 'formula': '', 'isin': '', 'name': '#EURBOBL', 'page': '', 'path': 'Treasuries\\\\#EURBOBL'}\n{'custom': False, 'chart_mode': 0, 'select': False, 'visible': False, 'session_deals': 0, 'session_buy_orders': 0, 'session_sell_orders': 0, 'volume': 0, 'volumehigh': 0, 'volumelow': 0, 'time': 0, 'digits': 3, 'spread': 0, 'spread_float': True, 'ticks_bookdepth': 0, 'trade_calc_mode': 2, 'trade_mode': 4, 'start_time': 0, 'expiration_time': 0, 'trade_stops_level': 0, 'trade_freeze_level': 0, 'trade_exemode': 2, 'swap_mode': 5, 'swap_rollover3days': 5, 'margin_hedged_use_leg': False, 'expiration_mode': 15, 'filling_mode': 2, 'order_mode': 127, 'order_gtc_mode': 0, 'option_mode': 0, 'option_right': 0, 'bid': 0.0, 'bidhigh': 0.0, 'bidlow': 0.0, 'ask': 0.0, 'askhigh': 0.0, 'asklow': 0.0, 'last': 0.0, 'lasthigh': 0.0, 'lastlow': 0.0, 'volume_real': 0.0, 'volumehigh_real': 0.0, 'volumelow_real': 0.0, 'option_strike': 0.0, 'point': 0.001, 'trade_tick_value': 0.001, 'trade_tick_value_profit': 0.001, 'trade_tick_value_loss': 0.001, 'trade_tick_size': 0.001, 'trade_contract_size': 1.0, 'trade_accrued_interest': 0.0, 'trade_face_value': 0.0, 'trade_liquidity_rate': 0.0, 'volume_min': 1.0, 'volume_max': 10000.0, 'volume_step': 1.0, 'volume_limit': 0.0, 'swap_long': -4.53, 'swap_short': -0.72, 'margin_initial': 0.0, 'margin_maintenance': 0.0, 'session_volume': 0.0, 'session_turnover': 0.0, 'session_interest': 0.0, 'session_buy_orders_volume': 0.0, 'session_sell_orders_volume': 0.0, 'session_open': 0.0, 'session_close': 0.0, 'session_aw': 0.0, 'session_price_settlement': 0.0, 'session_price_limit_min': 0.0, 'session_price_limit_max': 0.0, 'margin_hedged': 0.0, 'price_change': 0.0, 'price_volatility': 0.0, 'price_theoretical': 0.0, 'price_greeks_delta': 0.0, 'price_greeks_theta': 0.0, 'price_greeks_gamma': 0.0, 'price_greeks_vega': 0.0, 'price_greeks_rho': 0.0, 'price_greeks_omega': 0.0, 'price_sensitivity': 0.0, 'basis': '', 'category': '', 'currency_base': 'EUR', 'currency_profit': 'EUR', 'currency_margin': 'EUR', 'bank': '', 'description': 'Euro Bund Cash - FGBL', 'exchange': '', 'formula': '', 'isin': '', 'name': '#EURBUND', 'page': '', 'path': 'Treasuries\\\\#EURBUND'}\n{'custom': False, 'chart_mode': 0, 'select': False, 'visible': False, 'session_deals': 0, 'session_buy_orders': 0, 'session_sell_orders': 0, 'volume': 0, 'volumehigh': 0, 'volumelow': 0, 'time': 0, 'digits': 3, 'spread': 0, 'spread_float': True, 'ticks_bookdepth': 0, 'trade_calc_mode': 2, 'trade_mode': 4, 'start_time': 0, 'expiration_time': 0, 'trade_stops_level': 0, 'trade_freeze_level': 0, 'trade_exemode': 2, 'swap_mode': 5, 'swap_rollover3days': 5, 'margin_hedged_use_leg': False, 'expiration_mode': 15, 'filling_mode': 2, 'order_mode': 127, 'order_gtc_mode': 0, 'option_mode': 0, 'option_right': 0, 'bid': 0.0, 'bidhigh': 0.0, 'bidlow': 0.0, 'ask': 0.0, 'askhigh': 0.0, 'asklow': 0.0, 'last': 0.0, 'lasthigh': 0.0, 'lastlow': 0.0, 'volume_real': 0.0, 'volumehigh_real': 0.0, 'volumelow_real': 0.0, 'option_strike': 0.0, 'point': 0.001, 'trade_tick_value': 0.001, 'trade_tick_value_profit': 0.001, 'trade_tick_value_loss': 0.001, 'trade_tick_size': 0.001, 'trade_contract_size': 1.0, 'trade_accrued_interest': 0.0, 'trade_face_value': 0.0, 'trade_liquidity_rate': 0.0, 'volume_min': 1.0, 'volume_max': 10000.0, 'volume_step': 1.0, 'volume_limit': 0.0, 'swap_long': -7.59, 'swap_short': 2.12, 'margin_initial': 0.0, 'margin_maintenance': 0.0, 'session_volume': 0.0, 'session_turnover': 0.0, 'session_interest': 0.0, 'session_buy_orders_volume': 0.0, 'session_sell_orders_volume': 0.0, 'session_open': 0.0, 'session_close': 0.0, 'session_aw': 0.0, 'session_price_settlement': 0.0, 'session_price_limit_min': 0.0, 'session_price_limit_max': 0.0, 'margin_hedged': 0.0, 'price_change': 0.0, 'price_volatility': 0.0, 'price_theoretical': 0.0, 'price_greeks_delta': 0.0, 'price_greeks_theta': 0.0, 'price_greeks_gamma': 0.0, 'price_greeks_vega': 0.0, 'price_greeks_rho': 0.0, 'price_greeks_omega': 0.0, 'price_sensitivity': 0.0, 'basis': '', 'category': '', 'currency_base': 'EUR', 'currency_profit': 'EUR', 'currency_margin': 'EUR', 'bank': '', 'description': 'Euro Buxl Cash - FGBX', 'exchange': '', 'formula': '', 'isin': '', 'name': '#EURBUXL', 'page': '', 'path': 'Treasuries\\\\#EURBUXL'}\n{'custom': False, 'chart_mode': 0, 'select': False, 'visible': False, 'session_deals': 0, 'session_buy_orders': 0, 'session_sell_orders': 0, 'volume': 0, 'volumehigh': 0, 'volumelow': 0, 'time': 0, 'digits': 3, 'spread': 0, 'spread_float': True, 'ticks_bookdepth': 0, 'trade_calc_mode': 2, 'trade_mode': 4, 'start_time': 0, 'expiration_time': 0, 'trade_stops_level': 0, 'trade_freeze_level': 0, 'trade_exemode': 2, 'swap_mode': 5, 'swap_rollover3days': 5, 'margin_hedged_use_leg': False, 'expiration_mode': 15, 'filling_mode': 2, 'order_mode': 127, 'order_gtc_mode': 0, 'option_mode': 0, 'option_right': 0, 'bid': 0.0, 'bidhigh': 0.0, 'bidlow': 0.0, 'ask': 0.0, 'askhigh': 0.0, 'asklow': 0.0, 'last': 0.0, 'lasthigh': 0.0, 'lastlow': 0.0, 'volume_real': 0.0, 'volumehigh_real': 0.0, 'volumelow_real': 0.0, 'option_strike': 0.0, 'point': 0.001, 'trade_tick_value': 0.001, 'trade_tick_value_profit': 0.001, 'trade_tick_value_loss': 0.001, 'trade_tick_size': 0.001, 'trade_contract_size': 1.0, 'trade_accrued_interest': 0.0, 'trade_face_value': 0.0, 'trade_liquidity_rate': 0.0, 'volume_min': 1.0, 'volume_max': 10000.0, 'volume_step': 1.0, 'volume_limit': 0.0, 'swap_long': -3.68, 'swap_short': -1.5699999999999998, 'margin_initial': 0.0, 'margin_maintenance': 0.0, 'session_volume': 0.0, 'session_turnover': 0.0, 'session_interest': 0.0, 'session_buy_orders_volume': 0.0, 'session_sell_orders_volume': 0.0, 'session_open': 0.0, 'session_close': 0.0, 'session_aw': 0.0, 'session_price_settlement': 0.0, 'session_price_limit_min': 0.0, 'session_price_limit_max': 0.0, 'margin_hedged': 0.0, 'price_change': 0.0, 'price_volatility': 0.0, 'price_theoretical': 0.0, 'price_greeks_delta': 0.0, 'price_greeks_theta': 0.0, 'price_greeks_gamma': 0.0, 'price_greeks_vega': 0.0, 'price_greeks_rho': 0.0, 'price_greeks_omega': 0.0, 'price_sensitivity': 0.0, 'basis': '', 'category': '', 'currency_base': 'EUR', 'currency_profit': 'EUR', 'currency_margin': 'EUR', 'bank': '', 'description': 'Euro Schatz Cash - FGBS', 'exchange': '', 'formula': '', 'isin': '', 'name': '#EURSCHA', 'page': '', 'path': 'Treasuries\\\\#EURSCHA'}\n{'custom': False, 'chart_mode': 0, 'select': True, 'visible': True, 'session_deals': 0, 'session_buy_orders': 0, 'session_sell_orders': 0, 'volume': 0, 'volumehigh': 0, 'volumelow': 0, 'time': 1717745820, 'digits': 5, 'spread': 16, 'spread_float': True, 'ticks_bookdepth': 0, 'trade_calc_mode': 0, 'trade_mode': 4, 'start_time': 0, 'expiration_time': 0, 'trade_stops_level': 0, 'trade_freeze_level': 0, 'trade_exemode': 2, 'swap_mode': 1, 'swap_rollover3days': 3, 'margin_hedged_use_leg': False, 'expiration_mode': 15, 'filling_mode': 2, 'order_mode': 127, 'order_gtc_mode': 0, 'option_mode': 0, 'option_right': 0, 'bid': 1.0895299999999999, 'bidhigh': 1.08971, 'bidlow': 1.08861, 'ask': 1.08969, 'askhigh': 1.08987, 'asklow': 1.08877, 'last': 0.0, 'lasthigh': 0.0, 'lastlow': 0.0, 'volume_real': 0.0, 'volumehigh_real': 0.0, 'volumelow_real': 0.0, 'option_strike': 0.0, 'point': 1e-05, 'trade_tick_value': 1.0, 'trade_tick_value_profit': 1.0, 'trade_tick_value_loss': 1.0, 'trade_tick_size': 1e-05, 'trade_contract_size': 100000.0, 'trade_accrued_interest': 0.0, 'trade_face_value': 0.0, 'trade_liquidity_rate': 0.0, 'volume_min': 0.01, 'volume_max': 100.0, 'volume_step': 0.01, 'volume_limit': 0.0, 'swap_long': -5.64, 'swap_short': 2.79, 'margin_initial': 0.0, 'margin_maintenance': 0.0, 'session_volume': 0.0, 'session_turnover': 0.0, 'session_interest': 0.0, 'session_buy_orders_volume': 0.0, 'session_sell_orders_volume': 0.0, 'session_open': 1.0887, 'session_close': 1.08878, 'session_aw': 0.0, 'session_price_settlement': 0.0, 'session_price_limit_min': 0.0, 'session_price_limit_max': 0.0, 'margin_hedged': 0.0, 'price_change': 0.0762, 'price_volatility': 0.0, 'price_theoretical': 0.0, 'price_greeks_delta': 0.0, 'price_greeks_theta': 0.0, 'price_greeks_gamma': 0.0, 'price_greeks_vega': 0.0, 'price_greeks_rho': 0.0, 'price_greeks_omega': 0.0, 'price_sensitivity': 0.0, 'basis': '', 'category': '', 'currency_base': 'EUR', 'currency_profit': 'USD', 'currency_margin': 'EUR', 'bank': 'Tickmill', 'description': 'Euro vs US Dollar', 'exchange': '', 'formula': '', 'isin': '', 'name': 'EURUSD', 'page': '', 'path': 'Forex\\\\EURUSD'}\n{'custom': False, 'chart_mode': 0, 'select': False, 'visible': False, 'session_deals': 0, 'session_buy_orders': 0, 'session_sell_orders': 0, 'volume': 0, 'volumehigh': 0, 'volumelow': 0, 'time': 0, 'digits': 5, 'spread': 0, 'spread_float': True, 'ticks_bookdepth': 0, 'trade_calc_mode': 0, 'trade_mode': 4, 'start_time': 0, 'expiration_time': 0, 'trade_stops_level': 0, 'trade_freeze_level': 0, 'trade_exemode': 2, 'swap_mode': 1, 'swap_rollover3days': 3, 'margin_hedged_use_leg': False, 'expiration_mode': 15, 'filling_mode': 2, 'order_mode': 127, 'order_gtc_mode': 0, 'option_mode': 0, 'option_right': 0, 'bid': 0.0, 'bidhigh': 0.0, 'bidlow': 0.0, 'ask': 0.0, 'askhigh': 0.0, 'asklow': 0.0, 'last': 0.0, 'lasthigh': 0.0, 'lastlow': 0.0, 'volume_real': 0.0, 'volumehigh_real': 0.0, 'volumelow_real': 0.0, 'option_strike': 0.0, 'point': 1e-05, 'trade_tick_value': 0.66758, 'trade_tick_value_profit': 0.66758, 'trade_tick_value_loss': 0.6677700000000001, 'trade_tick_size': 1e-05, 'trade_contract_size': 100000.0, 'trade_accrued_interest': 0.0, 'trade_face_value': 0.0, 'trade_liquidity_rate': 0.0, 'volume_min': 0.01, 'volume_max': 100.0, 'volume_step': 0.01, 'volume_limit': 0.0, 'swap_long': -4.83, 'swap_short': -1.79, 'margin_initial': 0.0, 'margin_maintenance': 0.0, 'session_volume': 0.0, 'session_turnover': 0.0, 'session_interest': 0.0, 'session_buy_orders_volume': 0.0, 'session_sell_orders_volume': 0.0, 'session_open': 0.0, 'session_close': 0.0, 'session_aw': 0.0, 'session_price_settlement': 0.0, 'session_price_limit_min': 0.0, 'session_price_limit_max': 0.0, 'margin_hedged': 0.0, 'price_change': 0.0, 'price_volatility': 0.0, 'price_theoretical': 0.0, 'price_greeks_delta': 0.0, 'price_greeks_theta': 0.0, 'price_greeks_gamma': 0.0, 'price_greeks_vega': 0.0, 'price_greeks_rho': 0.0, 'price_greeks_omega': 0.0, 'price_sensitivity': 0.0, 'basis': '', 'category': '', 'currency_base': 'EUR', 'currency_profit': 'AUD', 'currency_margin': 'EUR', 'bank': '', 'description': 'Euro vs Australian Dollar', 'exchange': '', 'formula': '', 'isin': '', 'name': 'EURAUD', 'page': '', 'path': 'Forex\\\\EURAUD'}\n{'custom': False, 'chart_mode': 0, 'select': False, 'visible': False, 'session_deals': 0, 'session_buy_orders': 0, 'session_sell_orders': 0, 'volume': 0, 'volumehigh': 0, 'volumelow': 0, 'time': 0, 'digits': 5, 'spread': 0, 'spread_float': True, 'ticks_bookdepth': 0, 'trade_calc_mode': 0, 'trade_mode': 4, 'start_time': 0, 'expiration_time': 0, 'trade_stops_level': 0, 'trade_freeze_level': 0, 'trade_exemode': 2, 'swap_mode': 1, 'swap_rollover3days': 3, 'margin_hedged_use_leg': False, 'expiration_mode': 15, 'filling_mode': 2, 'order_mode': 127, 'order_gtc_mode': 0, 'option_mode': 0, 'option_right': 0, 'bid': 0.0, 'bidhigh': 0.0, 'bidlow': 0.0, 'ask': 0.0, 'askhigh': 0.0, 'asklow': 0.0, 'last': 0.0, 'lasthigh': 0.0, 'lastlow': 0.0, 'volume_real': 0.0, 'volumehigh_real': 0.0, 'volumelow_real': 0.0, 'option_strike': 0.0, 'point': 1e-05, 'trade_tick_value': 0.7317215945676988, 'trade_tick_value_profit': 0.7317215945676988, 'trade_tick_value_loss': 0.7318179822314596, 'trade_tick_size': 1e-05, 'trade_contract_size': 100000.0, 'trade_accrued_interest': 0.0, 'trade_face_value': 0.0, 'trade_liquidity_rate': 0.0, 'volume_min': 0.01, 'volume_max': 100.0, 'volume_step': 0.01, 'volume_limit': 0.0, 'swap_long': -5.67, 'swap_short': -0.11, 'margin_initial': 0.0, 'margin_maintenance': 0.0, 'session_volume': 0.0, 'session_turnover': 0.0, 'session_interest': 0.0, 'session_buy_orders_volume': 0.0, 'session_sell_orders_volume': 0.0, 'session_open': 0.0, 'session_close': 0.0, 'session_aw': 0.0, 'session_price_settlement': 0.0, 'session_price_limit_min': 0.0, 'session_price_limit_max': 0.0, 'margin_hedged': 0.0, 'price_change': 0.0, 'price_volatility': 0.0, 'price_theoretical': 0.0, 'price_greeks_delta': 0.0, 'price_greeks_theta': 0.0, 'price_greeks_gamma': 0.0, 'price_greeks_vega': 0.0, 'price_greeks_rho': 0.0, 'price_greeks_omega': 0.0, 'price_sensitivity': 0.0, 'basis': '', 'category': '', 'currency_base': 'EUR', 'currency_profit': 'CAD', 'currency_margin': 'EUR', 'bank': '', 'description': 'Euro vs Canadian Dollar', 'exchange': '', 'formula': '', 'isin': '', 'name': 'EURCAD', 'page': '', 'path': 'Forex\\\\EURCAD'}\n{'custom': False, 'chart_mode': 0, 'select': False, 'visible': False, 'session_deals': 0, 'session_buy_orders': 0, 'session_sell_orders': 0, 'volume': 0, 'volumehigh': 0, 'volumelow': 0, 'time': 0, 'digits': 5, 'spread': 0, 'spread_float': True, 'ticks_bookdepth': 0, 'trade_calc_mode': 0, 'trade_mode': 4, 'start_time': 0, 'expiration_time': 0, 'trade_stops_level': 0, 'trade_freeze_level': 0, 'trade_exemode': 2, 'swap_mode': 1, 'swap_rollover3days': 3, 'margin_hedged_use_leg': False, 'expiration_mode': 15, 'filling_mode': 2, 'order_mode': 127, 'order_gtc_mode': 0, 'option_mode': 0, 'option_right': 0, 'bid': 0.0, 'bidhigh': 0.0, 'bidlow': 0.0, 'ask': 0.0, 'askhigh': 0.0, 'asklow': 0.0, 'last': 0.0, 'lasthigh': 0.0, 'lastlow': 0.0, 'volume_real': 0.0, 'volumehigh_real': 0.0, 'volumelow_real': 0.0, 'option_strike': 0.0, 'point': 1e-05, 'trade_tick_value': 1.1238227956215865, 'trade_tick_value_profit': 1.1238227956215865, 'trade_tick_value_loss': 1.1240880835422264, 'trade_tick_size': 1e-05, 'trade_contract_size': 100000.0, 'trade_accrued_interest': 0.0, 'trade_face_value': 0.0, 'trade_liquidity_rate': 0.0, 'volume_min': 0.01, 'volume_max': 100.0, 'volume_step': 0.01, 'volume_limit': 0.0, 'swap_long': 4.9399999999999995, 'swap_short': -9.24, 'margin_initial': 0.0, 'margin_maintenance': 0.0, 'session_volume': 0.0, 'session_turnover': 0.0, 'session_interest': 0.0, 'session_buy_orders_volume': 0.0, 'session_sell_orders_volume': 0.0, 'session_open': 0.0, 'session_close': 0.0, 'session_aw': 0.0, 'session_price_settlement': 0.0, 'session_price_limit_min': 0.0, 'session_price_limit_max': 0.0, 'margin_hedged': 0.0, 'price_change': 0.0, 'price_volatility': 0.0, 'price_theoretical': 0.0, 'price_greeks_delta': 0.0, 'price_greeks_theta': 0.0, 'price_greeks_gamma': 0.0, 'price_greeks_vega': 0.0, 'price_greeks_rho': 0.0, 'price_greeks_omega': 0.0, 'price_sensitivity': 0.0, 'basis': '', 'category': '', 'currency_base': 'EUR', 'currency_profit': 'CHF', 'currency_margin': 'EUR', 'bank': '', 'description': 'Euro vs Swiss Franc', 'exchange': '', 'formula': '', 'isin': '', 'name': 'EURCHF', 'page': '', 'path': 'Forex\\\\EURCHF'}\n{'custom': False, 'chart_mode': 0, 'select': False, 'visible': False, 'session_deals': 0, 'session_buy_orders': 0, 'session_sell_orders': 0, 'volume': 0, 'volumehigh': 0, 'volumelow': 0, 'time': 0, 'digits': 3, 'spread': 0, 'spread_float': True, 'ticks_bookdepth': 0, 'trade_calc_mode': 0, 'trade_mode': 4, 'start_time': 0, 'expiration_time': 0, 'trade_stops_level': 0, 'trade_freeze_level': 0, 'trade_exemode': 2, 'swap_mode': 1, 'swap_rollover3days': 3, 'margin_hedged_use_leg': False, 'expiration_mode': 15, 'filling_mode': 2, 'order_mode': 127, 'order_gtc_mode': 0, 'option_mode': 0, 'option_right': 0, 'bid': 0.0, 'bidhigh': 0.0, 'bidlow': 0.0, 'ask': 0.0, 'askhigh': 0.0, 'asklow': 0.0, 'last': 0.0, 'lasthigh': 0.0, 'lastlow': 0.0, 'volume_real': 0.0, 'volumehigh_real': 0.0, 'volumelow_real': 0.0, 'option_strike': 0.0, 'point': 0.001, 'trade_tick_value': 0.0, 'trade_tick_value_profit': 0.0, 'trade_tick_value_loss': 0.0, 'trade_tick_size': 0.001, 'trade_contract_size': 100000.0, 'trade_accrued_interest': 0.0, 'trade_face_value': 0.0, 'trade_liquidity_rate': 0.0, 'volume_min': 0.01, 'volume_max': 100.0, 'volume_step': 0.01, 'volume_limit': 0.0, 'swap_long': -1.16, 'swap_short': 0.52, 'margin_initial': 0.0, 'margin_maintenance': 0.0, 'session_volume': 0.0, 'session_turnover': 0.0, 'session_interest': 0.0, 'session_buy_orders_volume': 0.0, 'session_sell_orders_volume': 0.0, 'session_open': 0.0, 'session_close': 0.0, 'session_aw': 0.0, 'session_price_settlement': 0.0, 'session_price_limit_min': 0.0, 'session_price_limit_max': 0.0, 'margin_hedged': 0.0, 'price_change': 0.0, 'price_volatility': 0.0, 'price_theoretical': 0.0, 'price_greeks_delta': 0.0, 'price_greeks_theta': 0.0, 'price_greeks_gamma': 0.0, 'price_greeks_vega': 0.0, 'price_greeks_rho': 0.0, 'price_greeks_omega': 0.0, 'price_sensitivity': 0.0, 'basis': '', 'category': '', 'currency_base': 'EUR', 'currency_profit': 'CZK', 'currency_margin': 'EUR', 'bank': '', 'description': 'Euro vs Czech Koruna', 'exchange': '', 'formula': '', 'isin': '', 'name': 'EURCZK', 'page': '', 'path': 'Forex\\\\EURCZK'}\n{'custom': False, 'chart_mode': 0, 'select': False, 'visible': False, 'session_deals': 0, 'session_buy_orders': 0, 'session_sell_orders': 0, 'volume': 0, 'volumehigh': 0, 'volumelow': 0, 'time': 0, 'digits': 5, 'spread': 0, 'spread_float': True, 'ticks_bookdepth': 0, 'trade_calc_mode': 0, 'trade_mode': 4, 'start_time': 0, 'expiration_time': 0, 'trade_stops_level': 0, 'trade_freeze_level': 0, 'trade_exemode': 2, 'swap_mode': 1, 'swap_rollover3days': 3, 'margin_hedged_use_leg': False, 'expiration_mode': 15, 'filling_mode': 2, 'order_mode': 127, 'order_gtc_mode': 0, 'option_mode': 0, 'option_right': 0, 'bid': 0.0, 'bidhigh': 0.0, 'bidlow': 0.0, 'ask': 0.0, 'askhigh': 0.0, 'asklow': 0.0, 'last': 0.0, 'lasthigh': 0.0, 'lastlow': 0.0, 'volume_real': 0.0, 'volumehigh_real': 0.0, 'volumelow_real': 0.0, 'option_strike': 0.0, 'point': 1e-05, 'trade_tick_value': 0.0, 'trade_tick_value_profit': 0.0, 'trade_tick_value_loss': 0.0, 'trade_tick_size': 1e-05, 'trade_contract_size': 100000.0, 'trade_accrued_interest': 0.0, 'trade_face_value': 0.0, 'trade_liquidity_rate': 0.0, 'volume_min': 0.01, 'volume_max': 100.0, 'volume_step': 0.01, 'volume_limit': 0.0, 'swap_long': 2.91, 'swap_short': -22.86, 'margin_initial': 0.0, 'margin_maintenance': 0.0, 'session_volume': 0.0, 'session_turnover': 0.0, 'session_interest': 0.0, 'session_buy_orders_volume': 0.0, 'session_sell_orders_volume': 0.0, 'session_open': 0.0, 'session_close': 0.0, 'session_aw': 0.0, 'session_price_settlement': 0.0, 'session_price_limit_min': 0.0, 'session_price_limit_max': 0.0, 'margin_hedged': 0.0, 'price_change': 0.0, 'price_volatility': 0.0, 'price_theoretical': 0.0, 'price_greeks_delta': 0.0, 'price_greeks_theta': 0.0, 'price_greeks_gamma': 0.0, 'price_greeks_vega': 0.0, 'price_greeks_rho': 0.0, 'price_greeks_omega': 0.0, 'price_sensitivity': 0.0, 'basis': '', 'category': '', 'currency_base': 'EUR', 'currency_profit': 'DKK', 'currency_margin': 'EUR', 'bank': '', 'description': 'Euro vs Danish Krone', 'exchange': '', 'formula': '', 'isin': '', 'name': 'EURDKK', 'page': '', 'path': 'Forex\\\\EURDKK'}\n{'custom': False, 'chart_mode': 0, 'select': True, 'visible': True, 'session_deals': 0, 'session_buy_orders': 0, 'session_sell_orders': 0, 'volume': 0, 'volumehigh': 0, 'volumelow': 0, 'time': 1717745822, 'digits': 5, 'spread': 16, 'spread_float': True, 'ticks_bookdepth': 0, 'trade_calc_mode': 0, 'trade_mode': 4, 'start_time': 0, 'expiration_time': 0, 'trade_stops_level': 0, 'trade_freeze_level': 0, 'trade_exemode': 2, 'swap_mode': 1, 'swap_rollover3days': 3, 'margin_hedged_use_leg': False, 'expiration_mode': 15, 'filling_mode': 2, 'order_mode': 127, 'order_gtc_mode': 0, 'option_mode': 0, 'option_right': 0, 'bid': 0.85178, 'bidhigh': 0.85197, 'bidlow': 0.85026, 'ask': 0.85194, 'askhigh': 0.85236, 'asklow': 0.85139, 'last': 0.0, 'lasthigh': 0.0, 'lastlow': 0.0, 'volume_real': 0.0, 'volumehigh_real': 0.0, 'volumelow_real': 0.0, 'option_strike': 0.0, 'point': 1e-05, 'trade_tick_value': 1.27898, 'trade_tick_value_profit': 1.27898, 'trade_tick_value_loss': 1.2791400000000002, 'trade_tick_size': 1e-05, 'trade_contract_size': 100000.0, 'trade_accrued_interest': 0.0, 'trade_face_value': 0.0, 'trade_liquidity_rate': 0.0, 'volume_min': 0.01, 'volume_max': 100.0, 'volume_step': 0.01, 'volume_limit': 0.0, 'swap_long': -3.7800000000000002, 'swap_short': 1.62, 'margin_initial': 0.0, 'margin_maintenance': 0.0, 'session_volume': 0.0, 'session_turnover': 0.0, 'session_interest': 0.0, 'session_buy_orders_volume': 0.0, 'session_sell_orders_volume': 0.0, 'session_open': 0.85105, 'session_close': 0.85117, 'session_aw': 0.0, 'session_price_settlement': 0.0, 'session_price_limit_min': 0.0, 'session_price_limit_max': 0.0, 'margin_hedged': 0.0, 'price_change': 0.0811, 'price_volatility': 0.0, 'price_theoretical': 0.0, 'price_greeks_delta': 0.0, 'price_greeks_theta': 0.0, 'price_greeks_gamma': 0.0, 'price_greeks_vega': 0.0, 'price_greeks_rho': 0.0, 'price_greeks_omega': 0.0, 'price_sensitivity': 0.0, 'basis': '', 'category': '', 'currency_base': 'EUR', 'currency_profit': 'GBP', 'currency_margin': 'EUR', 'bank': 'Tickmill', 'description': 'Euro vs Great Britain Pound ', 'exchange': '', 'formula': '', 'isin': '', 'name': 'EURGBP', 'page': '', 'path': 'Forex\\\\EURGBP'}\n{'custom': False, 'chart_mode': 0, 'select': False, 'visible': False, 'session_deals': 0, 'session_buy_orders': 0, 'session_sell_orders': 0, 'volume': 0, 'volumehigh': 0, 'volumelow': 0, 'time': 0, 'digits': 5, 'spread': 0, 'spread_float': True, 'ticks_bookdepth': 0, 'trade_calc_mode': 0, 'trade_mode': 4, 'start_time': 0, 'expiration_time': 0, 'trade_stops_level': 0, 'trade_freeze_level': 0, 'trade_exemode': 2, 'swap_mode': 1, 'swap_rollover3days': 3, 'margin_hedged_use_leg': False, 'expiration_mode': 15, 'filling_mode': 2, 'order_mode': 127, 'order_gtc_mode': 0, 'option_mode': 0, 'option_right': 0, 'bid': 0.0, 'bidhigh': 0.0, 'bidlow': 0.0, 'ask': 0.0, 'askhigh': 0.0, 'asklow': 0.0, 'last': 0.0, 'lasthigh': 0.0, 'lastlow': 0.0, 'volume_real': 0.0, 'volumehigh_real': 0.0, 'volumelow_real': 0.0, 'option_strike': 0.0, 'point': 1e-05, 'trade_tick_value': 0.0, 'trade_tick_value_profit': 0.0, 'trade_tick_value_loss': 0.0, 'trade_tick_size': 1e-05, 'trade_contract_size': 100000.0, 'trade_accrued_interest': 0.0, 'trade_face_value': 0.0, 'trade_liquidity_rate': 0.0, 'volume_min': 0.01, 'volume_max': 100.0, 'volume_step': 0.01, 'volume_limit': 0.0, 'swap_long': -18.27, 'swap_short': -17.01, 'margin_initial': 0.0, 'margin_maintenance': 0.0, 'session_volume': 0.0, 'session_turnover': 0.0, 'session_interest': 0.0, 'session_buy_orders_volume': 0.0, 'session_sell_orders_volume': 0.0, 'session_open': 0.0, 'session_close': 0.0, 'session_aw': 0.0, 'session_price_settlement': 0.0, 'session_price_limit_min': 0.0, 'session_price_limit_max': 0.0, 'margin_hedged': 0.0, 'price_change': 0.0, 'price_volatility': 0.0, 'price_theoretical': 0.0, 'price_greeks_delta': 0.0, 'price_greeks_theta': 0.0, 'price_greeks_gamma': 0.0, 'price_greeks_vega': 0.0, 'price_greeks_rho': 0.0, 'price_greeks_omega': 0.0, 'price_sensitivity': 0.0, 'basis': '', 'category': '', 'currency_base': 'EUR', 'currency_profit': 'HKD', 'currency_margin': 'EUR', 'bank': '', 'description': 'Euro vs Hong Kong Dollar', 'exchange': '', 'formula': '', 'isin': '', 'name': 'EURHKD', 'page': '', 'path': 'Forex\\\\EURHKD'}\n{'custom': False, 'chart_mode': 0, 'select': False, 'visible': False, 'session_deals': 0, 'session_buy_orders': 0, 'session_sell_orders': 0, 'volume': 0, 'volumehigh': 0, 'volumelow': 0, 'time': 0, 'digits': 3, 'spread': 0, 'spread_float': True, 'ticks_bookdepth': 0, 'trade_calc_mode': 0, 'trade_mode': 4, 'start_time': 0, 'expiration_time': 0, 'trade_stops_level': 0, 'trade_freeze_level': 0, 'trade_exemode': 2, 'swap_mode': 1, 'swap_rollover3days': 3, 'margin_hedged_use_leg': False, 'expiration_mode': 15, 'filling_mode': 2, 'order_mode': 127, 'order_gtc_mode': 0, 'option_mode': 0, 'option_right': 0, 'bid': 0.0, 'bidhigh': 0.0, 'bidlow': 0.0, 'ask': 0.0, 'askhigh': 0.0, 'asklow': 0.0, 'last': 0.0, 'lasthigh': 0.0, 'lastlow': 0.0, 'volume_real': 0.0, 'volumehigh_real': 0.0, 'volumelow_real': 0.0, 'option_strike': 0.0, 'point': 0.001, 'trade_tick_value': 0.0, 'trade_tick_value_profit': 0.0, 'trade_tick_value_loss': 0.0, 'trade_tick_size': 0.001, 'trade_contract_size': 100000.0, 'trade_accrued_interest': 0.0, 'trade_face_value': 0.0, 'trade_liquidity_rate': 0.0, 'volume_min': 0.01, 'volume_max': 100.0, 'volume_step': 0.01, 'volume_limit': 0.0, 'swap_long': -39.76, 'swap_short': 27.71, 'margin_initial': 0.0, 'margin_maintenance': 0.0, 'session_volume': 0.0, 'session_turnover': 0.0, 'session_interest': 0.0, 'session_buy_orders_volume': 0.0, 'session_sell_orders_volume': 0.0, 'session_open': 0.0, 'session_close': 0.0, 'session_aw': 0.0, 'session_price_settlement': 0.0, 'session_price_limit_min': 0.0, 'session_price_limit_max': 0.0, 'margin_hedged': 0.0, 'price_change': 0.0, 'price_volatility': 0.0, 'price_theoretical': 0.0, 'price_greeks_delta': 0.0, 'price_greeks_theta': 0.0, 'price_greeks_gamma': 0.0, 'price_greeks_vega': 0.0, 'price_greeks_rho': 0.0, 'price_greeks_omega': 0.0, 'price_sensitivity': 0.0, 'basis': '', 'category': '', 'currency_base': 'EUR', 'currency_profit': 'HUF', 'currency_margin': 'EUR', 'bank': '', 'description': 'Euro vs Hungarian Forint', 'exchange': '', 'formula': '', 'isin': '', 'name': 'EURHUF', 'page': '', 'path': 'Forex\\\\EURHUF'}\n{'custom': False, 'chart_mode': 0, 'select': False, 'visible': False, 'session_deals': 0, 'session_buy_orders': 0, 'session_sell_orders': 0, 'volume': 0, 'volumehigh': 0, 'volumelow': 0, 'time': 0, 'digits': 3, 'spread': 0, 'spread_float': True, 'ticks_bookdepth': 0, 'trade_calc_mode': 0, 'trade_mode': 4, 'start_time': 0, 'expiration_time': 0, 'trade_stops_level': 0, 'trade_freeze_level': 0, 'trade_exemode': 2, 'swap_mode': 1, 'swap_rollover3days': 3, 'margin_hedged_use_leg': False, 'expiration_mode': 15, 'filling_mode': 2, 'order_mode': 127, 'order_gtc_mode': 0, 'option_mode': 0, 'option_right': 0, 'bid': 0.0, 'bidhigh': 0.0, 'bidlow': 0.0, 'ask': 0.0, 'askhigh': 0.0, 'asklow': 0.0, 'last': 0.0, 'lasthigh': 0.0, 'lastlow': 0.0, 'volume_real': 0.0, 'volumehigh_real': 0.0, 'volumelow_real': 0.0, 'option_strike': 0.0, 'point': 0.001, 'trade_tick_value': 0.6428098504181479, 'trade_tick_value_profit': 0.6428098504181479, 'trade_tick_value_loss': 0.6428842358356531, 'trade_tick_size': 0.001, 'trade_contract_size': 100000.0, 'trade_accrued_interest': 0.0, 'trade_face_value': 0.0, 'trade_liquidity_rate': 0.0, 'volume_min': 0.01, 'volume_max': 100.0, 'volume_step': 0.01, 'volume_limit': 0.0, 'swap_long': 8.71, 'swap_short': -23.1, 'margin_initial': 0.0, 'margin_maintenance': 0.0, 'session_volume': 0.0, 'session_turnover': 0.0, 'session_interest': 0.0, 'session_buy_orders_volume': 0.0, 'session_sell_orders_volume': 0.0, 'session_open': 0.0, 'session_close': 0.0, 'session_aw': 0.0, 'session_price_settlement': 0.0, 'session_price_limit_min': 0.0, 'session_price_limit_max': 0.0, 'margin_hedged': 0.0, 'price_change': 0.0, 'price_volatility': 0.0, 'price_theoretical': 0.0, 'price_greeks_delta': 0.0, 'price_greeks_theta': 0.0, 'price_greeks_gamma': 0.0, 'price_greeks_vega': 0.0, 'price_greeks_rho': 0.0, 'price_greeks_omega': 0.0, 'price_sensitivity': 0.0, 'basis': '', 'category': '', 'currency_base': 'EUR', 'currency_profit': 'JPY', 'currency_margin': 'EUR', 'bank': '', 'description': 'Euro vs Japanese Yen', 'exchange': '', 'formula': '', 'isin': '', 'name': 'EURJPY', 'page': '', 'path': 'Forex\\\\EURJPY'}\n{'custom': False, 'chart_mode': 0, 'select': False, 'visible': False, 'session_deals': 0, 'session_buy_orders': 0, 'session_sell_orders': 0, 'volume': 0, 'volumehigh': 0, 'volumelow': 0, 'time': 0, 'digits': 5, 'spread': 0, 'spread_float': True, 'ticks_bookdepth': 0, 'trade_calc_mode': 0, 'trade_mode': 4, 'start_time': 0, 'expiration_time': 0, 'trade_stops_level': 0, 'trade_freeze_level': 0, 'trade_exemode': 2, 'swap_mode': 1, 'swap_rollover3days': 3, 'margin_hedged_use_leg': False, 'expiration_mode': 15, 'filling_mode': 2, 'order_mode': 127, 'order_gtc_mode': 0, 'option_mode': 0, 'option_right': 0, 'bid': 0.0, 'bidhigh': 0.0, 'bidlow': 0.0, 'ask': 0.0, 'askhigh': 0.0, 'asklow': 0.0, 'last': 0.0, 'lasthigh': 0.0, 'lastlow': 0.0, 'volume_real': 0.0, 'volumehigh_real': 0.0, 'volumelow_real': 0.0, 'option_strike': 0.0, 'point': 1e-05, 'trade_tick_value': 0.0, 'trade_tick_value_profit': 0.0, 'trade_tick_value_loss': 0.0, 'trade_tick_size': 1e-05, 'trade_contract_size': 100000.0, 'trade_accrued_interest': 0.0, 'trade_face_value': 0.0, 'trade_liquidity_rate': 0.0, 'volume_min': 0.01, 'volume_max': 100.0, 'volume_step': 0.01, 'volume_limit': 0.0, 'swap_long': -457.24, 'swap_short': 307.77, 'margin_initial': 0.0, 'margin_maintenance': 0.0, 'session_volume': 0.0, 'session_turnover': 0.0, 'session_interest': 0.0, 'session_buy_orders_volume': 0.0, 'session_sell_orders_volume': 0.0, 'session_open': 0.0, 'session_close': 0.0, 'session_aw': 0.0, 'session_price_settlement': 0.0, 'session_price_limit_min': 0.0, 'session_price_limit_max': 0.0, 'margin_hedged': 0.0, 'price_change': 0.0, 'price_volatility': 0.0, 'price_theoretical': 0.0, 'price_greeks_delta': 0.0, 'price_greeks_theta': 0.0, 'price_greeks_gamma': 0.0, 'price_greeks_vega': 0.0, 'price_greeks_rho': 0.0, 'price_greeks_omega': 0.0, 'price_sensitivity': 0.0, 'basis': '', 'category': '', 'currency_base': 'EUR', 'currency_profit': 'MXN', 'currency_margin': 'EUR', 'bank': '', 'description': 'Euro vs Mexican Pesos', 'exchange': '', 'formula': '', 'isin': '', 'name': 'EURMXN', 'page': '', 'path': 'Forex\\\\EURMXN'}\n{'custom': False, 'chart_mode': 0, 'select': False, 'visible': False, 'session_deals': 0, 'session_buy_orders': 0, 'session_sell_orders': 0, 'volume': 0, 'volumehigh': 0, 'volumelow': 0, 'time': 0, 'digits': 5, 'spread': 0, 'spread_float': True, 'ticks_bookdepth': 0, 'trade_calc_mode': 0, 'trade_mode': 4, 'start_time': 0, 'expiration_time': 0, 'trade_stops_level': 0, 'trade_freeze_level': 0, 'trade_exemode': 2, 'swap_mode': 1, 'swap_rollover3days': 3, 'margin_hedged_use_leg': False, 'expiration_mode': 15, 'filling_mode': 2, 'order_mode': 127, 'order_gtc_mode': 0, 'option_mode': 0, 'option_right': 0, 'bid': 0.0, 'bidhigh': 0.0, 'bidlow': 0.0, 'ask': 0.0, 'askhigh': 0.0, 'asklow': 0.0, 'last': 0.0, 'lasthigh': 0.0, 'lastlow': 0.0, 'volume_real': 0.0, 'volumehigh_real': 0.0, 'volumelow_real': 0.0, 'option_strike': 0.0, 'point': 1e-05, 'trade_tick_value': 0.0, 'trade_tick_value_profit': 0.0, 'trade_tick_value_loss': 0.0, 'trade_tick_size': 1e-05, 'trade_contract_size': 100000.0, 'trade_accrued_interest': 0.0, 'trade_face_value': 0.0, 'trade_liquidity_rate': 0.0, 'volume_min': 0.01, 'volume_max': 100.0, 'volume_step': 0.01, 'volume_limit': 0.0, 'swap_long': -30.52, 'swap_short': 3.33, 'margin_initial': 0.0, 'margin_maintenance': 0.0, 'session_volume': 0.0, 'session_turnover': 0.0, 'session_interest': 0.0, 'session_buy_orders_volume': 0.0, 'session_sell_orders_volume': 0.0, 'session_open': 0.0, 'session_close': 0.0, 'session_aw': 0.0, 'session_price_settlement': 0.0, 'session_price_limit_min': 0.0, 'session_price_limit_max': 0.0, 'margin_hedged': 0.0, 'price_change': 0.0, 'price_volatility': 0.0, 'price_theoretical': 0.0, 'price_greeks_delta': 0.0, 'price_greeks_theta': 0.0, 'price_greeks_gamma': 0.0, 'price_greeks_vega': 0.0, 'price_greeks_rho': 0.0, 'price_greeks_omega': 0.0, 'price_sensitivity': 0.0, 'basis': '', 'category': '', 'currency_base': 'EUR', 'currency_profit': 'NOK', 'currency_margin': 'EUR', 'bank': '', 'description': 'Euro vs Norwegian Kroner', 'exchange': '', 'formula': '', 'isin': '', 'name': 'EURNOK', 'page': '', 'path': 'Forex\\\\EURNOK'}\n{'custom': False, 'chart_mode': 0, 'select': False, 'visible': False, 'session_deals': 0, 'session_buy_orders': 0, 'session_sell_orders': 0, 'volume': 0, 'volumehigh': 0, 'volumelow': 0, 'time': 0, 'digits': 5, 'spread': 0, 'spread_float': True, 'ticks_bookdepth': 0, 'trade_calc_mode': 0, 'trade_mode': 4, 'start_time': 0, 'expiration_time': 0, 'trade_stops_level': 0, 'trade_freeze_level': 0, 'trade_exemode': 2, 'swap_mode': 1, 'swap_rollover3days': 3, 'margin_hedged_use_leg': False, 'expiration_mode': 15, 'filling_mode': 2, 'order_mode': 127, 'order_gtc_mode': 0, 'option_mode': 0, 'option_right': 0, 'bid': 0.0, 'bidhigh': 0.0, 'bidlow': 0.0, 'ask': 0.0, 'askhigh': 0.0, 'asklow': 0.0, 'last': 0.0, 'lasthigh': 0.0, 'lastlow': 0.0, 'volume_real': 0.0, 'volumehigh_real': 0.0, 'volumelow_real': 0.0, 'option_strike': 0.0, 'point': 1e-05, 'trade_tick_value': 0.62005, 'trade_tick_value_profit': 0.62005, 'trade_tick_value_loss': 0.62023, 'trade_tick_size': 1e-05, 'trade_contract_size': 100000.0, 'trade_accrued_interest': 0.0, 'trade_face_value': 0.0, 'trade_liquidity_rate': 0.0, 'volume_min': 0.01, 'volume_max': 100.0, 'volume_step': 0.01, 'volume_limit': 0.0, 'swap_long': -8.58, 'swap_short': 4.05, 'margin_initial': 0.0, 'margin_maintenance': 0.0, 'session_volume': 0.0, 'session_turnover': 0.0, 'session_interest': 0.0, 'session_buy_orders_volume': 0.0, 'session_sell_orders_volume': 0.0, 'session_open': 0.0, 'session_close': 0.0, 'session_aw': 0.0, 'session_price_settlement': 0.0, 'session_price_limit_min': 0.0, 'session_price_limit_max': 0.0, 'margin_hedged': 0.0, 'price_change': 0.0, 'price_volatility': 0.0, 'price_theoretical': 0.0, 'price_greeks_delta': 0.0, 'price_greeks_theta': 0.0, 'price_greeks_gamma': 0.0, 'price_greeks_vega': 0.0, 'price_greeks_rho': 0.0, 'price_greeks_omega': 0.0, 'price_sensitivity': 0.0, 'basis': '', 'category': '', 'currency_base': 'EUR', 'currency_profit': 'NZD', 'currency_margin': 'EUR', 'bank': '', 'description': 'Euro vs New Zealand Dollar', 'exchange': '', 'formula': '', 'isin': '', 'name': 'EURNZD', 'page': '', 'path': 'Forex\\\\EURNZD'}\n{'custom': False, 'chart_mode': 0, 'select': False, 'visible': False, 'session_deals': 0, 'session_buy_orders': 0, 'session_sell_orders': 0, 'volume': 0, 'volumehigh': 0, 'volumelow': 0, 'time': 0, 'digits': 5, 'spread': 0, 'spread_float': True, 'ticks_bookdepth': 0, 'trade_calc_mode': 0, 'trade_mode': 4, 'start_time': 0, 'expiration_time': 0, 'trade_stops_level': 0, 'trade_freeze_level': 0, 'trade_exemode': 2, 'swap_mode': 1, 'swap_rollover3days': 3, 'margin_hedged_use_leg': False, 'expiration_mode': 15, 'filling_mode': 2, 'order_mode': 127, 'order_gtc_mode': 0, 'option_mode': 0, 'option_right': 0, 'bid': 0.0, 'bidhigh': 0.0, 'bidlow': 0.0, 'ask': 0.0, 'askhigh': 0.0, 'asklow': 0.0, 'last': 0.0, 'lasthigh': 0.0, 'lastlow': 0.0, 'volume_real': 0.0, 'volumehigh_real': 0.0, 'volumelow_real': 0.0, 'option_strike': 0.0, 'point': 1e-05, 'trade_tick_value': 0.0, 'trade_tick_value_profit': 0.0, 'trade_tick_value_loss': 0.0, 'trade_tick_size': 1e-05, 'trade_contract_size': 100000.0, 'trade_accrued_interest': 0.0, 'trade_face_value': 0.0, 'trade_liquidity_rate': 0.0, 'volume_min': 0.01, 'volume_max': 100.0, 'volume_step': 0.01, 'volume_limit': 0.0, 'swap_long': -25.69, 'swap_short': 14.16, 'margin_initial': 0.0, 'margin_maintenance': 0.0, 'session_volume': 0.0, 'session_turnover': 0.0, 'session_interest': 0.0, 'session_buy_orders_volume': 0.0, 'session_sell_orders_volume': 0.0, 'session_open': 0.0, 'session_close': 0.0, 'session_aw': 0.0, 'session_price_settlement': 0.0, 'session_price_limit_min': 0.0, 'session_price_limit_max': 0.0, 'margin_hedged': 0.0, 'price_change': 0.0, 'price_volatility': 0.0, 'price_theoretical': 0.0, 'price_greeks_delta': 0.0, 'price_greeks_theta': 0.0, 'price_greeks_gamma': 0.0, 'price_greeks_vega': 0.0, 'price_greeks_rho': 0.0, 'price_greeks_omega': 0.0, 'price_sensitivity': 0.0, 'basis': '', 'category': '', 'currency_base': 'EUR', 'currency_profit': 'PLN', 'currency_margin': 'EUR', 'bank': '', 'description': 'Euro vs Polish Zloty', 'exchange': '', 'formula': '', 'isin': '', 'name': 'EURPLN', 'page': '', 'path': 'Forex\\\\EURPLN'}\n{'custom': False, 'chart_mode': 0, 'select': False, 'visible': False, 'session_deals': 0, 'session_buy_orders': 0, 'session_sell_orders': 0, 'volume': 0, 'volumehigh': 0, 'volumelow': 0, 'time': 0, 'digits': 5, 'spread': 0, 'spread_float': True, 'ticks_bookdepth': 0, 'trade_calc_mode': 0, 'trade_mode': 4, 'start_time': 0, 'expiration_time': 0, 'trade_stops_level': 0, 'trade_freeze_level': 0, 'trade_exemode': 2, 'swap_mode': 1, 'swap_rollover3days': 3, 'margin_hedged_use_leg': False, 'expiration_mode': 15, 'filling_mode': 2, 'order_mode': 127, 'order_gtc_mode': 0, 'option_mode': 0, 'option_right': 0, 'bid': 0.0, 'bidhigh': 0.0, 'bidlow': 0.0, 'ask': 0.0, 'askhigh': 0.0, 'asklow': 0.0, 'last': 0.0, 'lasthigh': 0.0, 'lastlow': 0.0, 'volume_real': 0.0, 'volumehigh_real': 0.0, 'volumelow_real': 0.0, 'option_strike': 0.0, 'point': 1e-05, 'trade_tick_value': 0.0, 'trade_tick_value_profit': 0.0, 'trade_tick_value_loss': 0.0, 'trade_tick_size': 1e-05, 'trade_contract_size': 100000.0, 'trade_accrued_interest': 0.0, 'trade_face_value': 0.0, 'trade_liquidity_rate': 0.0, 'volume_min': 0.01, 'volume_max': 100.0, 'volume_step': 0.01, 'volume_limit': 0.0, 'swap_long': -3.4699999999999998, 'swap_short': -22.89, 'margin_initial': 0.0, 'margin_maintenance': 0.0, 'session_volume': 0.0, 'session_turnover': 0.0, 'session_interest': 0.0, 'session_buy_orders_volume': 0.0, 'session_sell_orders_volume': 0.0, 'session_open': 0.0, 'session_close': 0.0, 'session_aw': 0.0, 'session_price_settlement': 0.0, 'session_price_limit_min': 0.0, 'session_price_limit_max': 0.0, 'margin_hedged': 0.0, 'price_change': 0.0, 'price_volatility': 0.0, 'price_theoretical': 0.0, 'price_greeks_delta': 0.0, 'price_greeks_theta': 0.0, 'price_greeks_gamma': 0.0, 'price_greeks_vega': 0.0, 'price_greeks_rho': 0.0, 'price_greeks_omega': 0.0, 'price_sensitivity': 0.0, 'basis': '', 'category': '', 'currency_base': 'EUR', 'currency_profit': 'SEK', 'currency_margin': 'EUR', 'bank': '', 'description': 'Euro vs Swedish Kroner', 'exchange': '', 'formula': '', 'isin': '', 'name': 'EURSEK', 'page': '', 'path': 'Forex\\\\EURSEK'}\n{'custom': False, 'chart_mode': 0, 'select': False, 'visible': False, 'session_deals': 0, 'session_buy_orders': 0, 'session_sell_orders': 0, 'volume': 0, 'volumehigh': 0, 'volumelow': 0, 'time': 0, 'digits': 5, 'spread': 0, 'spread_float': True, 'ticks_bookdepth': 0, 'trade_calc_mode': 0, 'trade_mode': 4, 'start_time': 0, 'expiration_time': 0, 'trade_stops_level': 0, 'trade_freeze_level': 0, 'trade_exemode': 2, 'swap_mode': 1, 'swap_rollover3days': 3, 'margin_hedged_use_leg': False, 'expiration_mode': 15, 'filling_mode': 2, 'order_mode': 127, 'order_gtc_mode': 0, 'option_mode': 0, 'option_right': 0, 'bid': 0.0, 'bidhigh': 0.0, 'bidlow': 0.0, 'ask': 0.0, 'askhigh': 0.0, 'asklow': 0.0, 'last': 0.0, 'lasthigh': 0.0, 'lastlow': 0.0, 'volume_real': 0.0, 'volumehigh_real': 0.0, 'volumelow_real': 0.0, 'option_strike': 0.0, 'point': 1e-05, 'trade_tick_value': 0.0, 'trade_tick_value_profit': 0.0, 'trade_tick_value_loss': 0.0, 'trade_tick_size': 1e-05, 'trade_contract_size': 100000.0, 'trade_accrued_interest': 0.0, 'trade_face_value': 0.0, 'trade_liquidity_rate': 0.0, 'volume_min': 0.01, 'volume_max': 100.0, 'volume_step': 0.01, 'volume_limit': 0.0, 'swap_long': -0.81, 'swap_short': -2.63, 'margin_initial': 0.0, 'margin_maintenance': 0.0, 'session_volume': 0.0, 'session_turnover': 0.0, 'session_interest': 0.0, 'session_buy_orders_volume': 0.0, 'session_sell_orders_volume': 0.0, 'session_open': 0.0, 'session_close': 0.0, 'session_aw': 0.0, 'session_price_settlement': 0.0, 'session_price_limit_min': 0.0, 'session_price_limit_max': 0.0, 'margin_hedged': 0.0, 'price_change': 0.0, 'price_volatility': 0.0, 'price_theoretical': 0.0, 'price_greeks_delta': 0.0, 'price_greeks_theta': 0.0, 'price_greeks_gamma': 0.0, 'price_greeks_vega': 0.0, 'price_greeks_rho': 0.0, 'price_greeks_omega': 0.0, 'price_sensitivity': 0.0, 'basis': '', 'category': '', 'currency_base': 'EUR', 'currency_profit': 'SGD', 'currency_margin': 'EUR', 'bank': '', 'description': 'Euro vs Singapore Dollar', 'exchange': '', 'formula': '', 'isin': '', 'name': 'EURSGD', 'page': '', 'path': 'Forex\\\\EURSGD'}\n{'custom': False, 'chart_mode': 0, 'select': False, 'visible': False, 'session_deals': 0, 'session_buy_orders': 0, 'session_sell_orders': 0, 'volume': 0, 'volumehigh': 0, 'volumelow': 0, 'time': 0, 'digits': 5, 'spread': 0, 'spread_float': True, 'ticks_bookdepth': 0, 'trade_calc_mode': 0, 'trade_mode': 3, 'start_time': 0, 'expiration_time': 0, 'trade_stops_level': 0, 'trade_freeze_level': 0, 'trade_exemode': 2, 'swap_mode': 1, 'swap_rollover3days': 3, 'margin_hedged_use_leg': False, 'expiration_mode': 15, 'filling_mode': 2, 'order_mode': 127, 'order_gtc_mode': 0, 'option_mode': 0, 'option_right': 0, 'bid': 0.0, 'bidhigh': 0.0, 'bidlow': 0.0, 'ask': 0.0, 'askhigh': 0.0, 'asklow': 0.0, 'last': 0.0, 'lasthigh': 0.0, 'lastlow': 0.0, 'volume_real': 0.0, 'volumehigh_real': 0.0, 'volumelow_real': 0.0, 'option_strike': 0.0, 'point': 1e-05, 'trade_tick_value': 0.0, 'trade_tick_value_profit': 0.0, 'trade_tick_value_loss': 0.0, 'trade_tick_size': 1e-05, 'trade_contract_size': 100000.0, 'trade_accrued_interest': 0.0, 'trade_face_value': 0.0, 'trade_liquidity_rate': 0.0, 'volume_min': 0.01, 'volume_max': 100.0, 'volume_step': 0.01, 'volume_limit': 0.0, 'swap_long': -4647.43, 'swap_short': 2448.19, 'margin_initial': 0.0, 'margin_maintenance': 0.0, 'session_volume': 0.0, 'session_turnover': 0.0, 'session_interest': 0.0, 'session_buy_orders_volume': 0.0, 'session_sell_orders_volume': 0.0, 'session_open': 0.0, 'session_close': 0.0, 'session_aw': 0.0, 'session_price_settlement': 0.0, 'session_price_limit_min': 0.0, 'session_price_limit_max': 0.0, 'margin_hedged': 0.0, 'price_change': 0.0, 'price_volatility': 0.0, 'price_theoretical': 0.0, 'price_greeks_delta': 0.0, 'price_greeks_theta': 0.0, 'price_greeks_gamma': 0.0, 'price_greeks_vega': 0.0, 'price_greeks_rho': 0.0, 'price_greeks_omega': 0.0, 'price_sensitivity': 0.0, 'basis': '', 'category': '', 'currency_base': 'EUR', 'currency_profit': 'TRY', 'currency_margin': 'EUR', 'bank': '', 'description': 'Euro vs Turkish Lira', 'exchange': '', 'formula': '', 'isin': '', 'name': 'EURTRY', 'page': '', 'path': 'Forex\\\\EURTRY'}\n{'custom': False, 'chart_mode': 0, 'select': False, 'visible': False, 'session_deals': 0, 'session_buy_orders': 0, 'session_sell_orders': 0, 'volume': 0, 'volumehigh': 0, 'volumelow': 0, 'time': 0, 'digits': 5, 'spread': 0, 'spread_float': True, 'ticks_bookdepth': 0, 'trade_calc_mode': 0, 'trade_mode': 4, 'start_time': 0, 'expiration_time': 0, 'trade_stops_level': 0, 'trade_freeze_level': 0, 'trade_exemode': 2, 'swap_mode': 1, 'swap_rollover3days': 3, 'margin_hedged_use_leg': False, 'expiration_mode': 15, 'filling_mode': 2, 'order_mode': 127, 'order_gtc_mode': 0, 'option_mode': 0, 'option_right': 0, 'bid': 0.0, 'bidhigh': 0.0, 'bidlow': 0.0, 'ask': 0.0, 'askhigh': 0.0, 'asklow': 0.0, 'last': 0.0, 'lasthigh': 0.0, 'lastlow': 0.0, 'volume_real': 0.0, 'volumehigh_real': 0.0, 'volumelow_real': 0.0, 'option_strike': 0.0, 'point': 1e-05, 'trade_tick_value': 0.0, 'trade_tick_value_profit': 0.0, 'trade_tick_value_loss': 0.0, 'trade_tick_size': 1e-05, 'trade_contract_size': 100000.0, 'trade_accrued_interest': 0.0, 'trade_face_value': 0.0, 'trade_liquidity_rate': 0.0, 'volume_min': 0.01, 'volume_max': 100.0, 'volume_step': 0.01, 'volume_limit': 0.0, 'swap_long': -298.06, 'swap_short': 161.72, 'margin_initial': 0.0, 'margin_maintenance': 0.0, 'session_volume': 0.0, 'session_turnover': 0.0, 'session_interest': 0.0, 'session_buy_orders_volume': 0.0, 'session_sell_orders_volume': 0.0, 'session_open': 0.0, 'session_close': 0.0, 'session_aw': 0.0, 'session_price_settlement': 0.0, 'session_price_limit_min': 0.0, 'session_price_limit_max': 0.0, 'margin_hedged': 0.0, 'price_change': 0.0, 'price_volatility': 0.0, 'price_theoretical': 0.0, 'price_greeks_delta': 0.0, 'price_greeks_theta': 0.0, 'price_greeks_gamma': 0.0, 'price_greeks_vega': 0.0, 'price_greeks_rho': 0.0, 'price_greeks_omega': 0.0, 'price_sensitivity': 0.0, 'basis': '', 'category': '', 'currency_base': 'EUR', 'currency_profit': 'ZAR', 'currency_margin': 'EUR', 'bank': '', 'description': 'Euro vs South African Rand', 'exchange': '', 'formula': '', 'isin': '', 'name': 'EURZAR', 'page': '', 'path': 'Forex\\\\EURZAR'}\n{'custom': False, 'chart_mode': 0, 'select': False, 'visible': False, 'session_deals': 0, 'session_buy_orders': 0, 'session_sell_orders': 0, 'volume': 0, 'volumehigh': 0, 'volumelow': 0, 'time': 0, 'digits': 2, 'spread': 0, 'spread_float': True, 'ticks_bookdepth': 0, 'trade_calc_mode': 0, 'trade_mode': 4, 'start_time': 0, 'expiration_time': 0, 'trade_stops_level': 0, 'trade_freeze_level': 0, 'trade_exemode': 2, 'swap_mode': 1, 'swap_rollover3days': 3, 'margin_hedged_use_leg': False, 'expiration_mode': 15, 'filling_mode': 2, 'order_mode': 127, 'order_gtc_mode': 0, 'option_mode': 0, 'option_right': 0, 'bid': 0.0, 'bidhigh': 0.0, 'bidlow': 0.0, 'ask': 0.0, 'askhigh': 0.0, 'asklow': 0.0, 'last': 0.0, 'lasthigh': 0.0, 'lastlow': 0.0, 'volume_real': 0.0, 'volumehigh_real': 0.0, 'volumelow_real': 0.0, 'option_strike': 0.0, 'point': 0.01, 'trade_tick_value': 1.0895299999999999, 'trade_tick_value_profit': 1.0895299999999999, 'trade_tick_value_loss': 1.08969, 'trade_tick_size': 0.01, 'trade_contract_size': 100.0, 'trade_accrued_interest': 0.0, 'trade_face_value': 0.0, 'trade_liquidity_rate': 0.0, 'volume_min': 0.01, 'volume_max': 100.0, 'volume_step': 0.01, 'volume_limit': 0.0, 'swap_long': -33.68, 'swap_short': 15.68, 'margin_initial': 0.0, 'margin_maintenance': 0.0, 'session_volume': 0.0, 'session_turnover': 0.0, 'session_interest': 0.0, 'session_buy_orders_volume': 0.0, 'session_sell_orders_volume': 0.0, 'session_open': 0.0, 'session_close': 0.0, 'session_aw': 0.0, 'session_price_settlement': 0.0, 'session_price_limit_min': 0.0, 'session_price_limit_max': 0.0, 'margin_hedged': 0.0, 'price_change': 0.0, 'price_volatility': 0.0, 'price_theoretical': 0.0, 'price_greeks_delta': 0.0, 'price_greeks_theta': 0.0, 'price_greeks_gamma': 0.0, 'price_greeks_vega': 0.0, 'price_greeks_rho': 0.0, 'price_greeks_omega': 0.0, 'price_sensitivity': 0.0, 'basis': '', 'category': '', 'currency_base': 'XAU', 'currency_profit': 'EUR', 'currency_margin': 'XAU', 'bank': '', 'description': 'Gold vs. Euro', 'exchange': '', 'formula': '', 'isin': '', 'name': 'XAUEUR', 'page': '', 'path': 'Forex\\\\XAUEUR'}\n</pre>"},{"location":"tutorial/metatrader/feeder/#interactive-with-metatraderdatafeeder","title":"Interactive with MetaTraderDataFeeder\u00b6","text":""},{"location":"tutorial/metatrader/feeder/#metatraderdatafeeder-init","title":"MetaTraderDataFeeder init\u00b6","text":""},{"location":"tutorial/metatrader/feeder/#build-a-datafeed","title":"Build a DataFeed\u00b6","text":""},{"location":"tutorial/metatrader/feeder/#load-datafeed-data","title":"Load DataFeed data\u00b6","text":""},{"location":"tutorial/metatrader/feeder/#plot","title":"Plot\u00b6","text":""},{"location":"tutorial/metatrader/feeder/#init-plotly-environment","title":"Init Plotly environment\u00b6","text":""},{"location":"tutorial/metatrader/feeder/#show","title":"Show\u00b6","text":""},{"location":"tutorial/metatrader/feeder/#load-markets","title":"Load markets\u00b6","text":""},{"location":"tutorial/metatrader/trade/","title":"MetaTrader Trade","text":"In\u00a0[1]: Copied! <pre>from lettrade.exchange.live.metatrader import MetaTraderAPI\nfrom dotenv import load_dotenv\nimport os\n\nload_dotenv()\n\napi = MetaTraderAPI(\n    login=int(os.environ[\"MT5_LOGIN\"]),\n    password=os.environ[\"MT5_PASSWORD\"],\n    server=os.environ[\"MT5_SERVER\"],\n    # wine=os.getenv(\"MT5_WINE\", None),\n)\n</pre> from lettrade.exchange.live.metatrader import MetaTraderAPI from dotenv import load_dotenv import os  load_dotenv()  api = MetaTraderAPI(     login=int(os.environ[\"MT5_LOGIN\"]),     password=os.environ[\"MT5_PASSWORD\"],     server=os.environ[\"MT5_SERVER\"],     # wine=os.getenv(\"MT5_WINE\", None), ) In\u00a0[\u00a0]: Copied! <pre>from lettrade.exchange.live.metatrader import MetaTraderExchange\n\nexchange = MetaTraderExchange(api=api)\n</pre> from lettrade.exchange.live.metatrader import MetaTraderExchange  exchange = MetaTraderExchange(api=api) In\u00a0[\u00a0]: Copied! <pre>from lettrade.exchange.live.metatrader import MetaTraderDataFeed\n\ndata = MetaTraderDataFeed(symbol=\"USDCAD\", timeframe=\"5m\", api=api)\ndata.bars_load(since=0, to=10)\ndata\n</pre> from lettrade.exchange.live.metatrader import MetaTraderDataFeed  data = MetaTraderDataFeed(symbol=\"USDCAD\", timeframe=\"5m\", api=api) data.bars_load(since=0, to=10) data In\u00a0[\u00a0]: Copied! <pre>info = data.symbol_info()\ninfo._asdict()\n</pre> info = data.symbol_info() info._asdict() In\u00a0[\u00a0]: Copied! <pre>from lettrade.exchange.live.metatrader import MetaTraderOrder, OrderType\nfrom unittest.mock import MagicMock\n\norder = MetaTraderOrder(\n    id=\"\",\n    data=data,\n    exchange=MagicMock(),\n    type=OrderType.Market,\n    size=0.1,\n    api=api,\n)\norder.place()\n</pre> from lettrade.exchange.live.metatrader import MetaTraderOrder, OrderType from unittest.mock import MagicMock  order = MetaTraderOrder(     id=\"\",     data=data,     exchange=MagicMock(),     type=OrderType.Market,     size=0.1,     api=api, ) order.place() In\u00a0[\u00a0]: Copied! <pre>from lettrade.exchange.live.metatrader import MetaTraderPosition\n\napi.positions_get(id=\"44071680\")\n</pre> from lettrade.exchange.live.metatrader import MetaTraderPosition  api.positions_get(id=\"44071680\") In\u00a0[3]: Copied! <pre>result = api.do_position_update(id=44071680, sl=1.373)\nresult\n</pre> result = api.do_position_update(id=44071680, sl=1.373) result Out[3]: <pre>Box({'retcode': 10025, 'deal': 0, 'order': 0, 'volume': 0.0, 'price': 0.0, 'bid': 0.0, 'ask': 0.0, 'comment': 'No changes', 'request_id': 0, 'retcode_external': 0, 'request': TradeRequest(action=6, magic=88888888, order=0, symbol='', volume=0.0, price=0.0, stoplimit=0.0, sl=1.373, tp=0.0, deviation=0, type=0, type_filling=0, type_time=0, expiration=0, comment='', position=44071680, position_by=0), 'code': 10025})</pre>"},{"location":"tutorial/metatrader/trade/#metatrader-trade","title":"MetaTrader Trade\u00b6","text":""},{"location":"tutorial/metatrader/trade/#init-api","title":"Init API\u00b6","text":""},{"location":"tutorial/metatrader/trade/#init-exchange","title":"Init Exchange\u00b6","text":""},{"location":"tutorial/metatrader/trade/#init-datafeed","title":"Init DataFeed\u00b6","text":""},{"location":"tutorial/metatrader/trade/#place-new-order","title":"Place new order\u00b6","text":""},{"location":"tutorial/metatrader/trade/#position","title":"Position\u00b6","text":""},{"location":"tutorial/metatrader/trade/#get-position-by-id","title":"Get position by id\u00b6","text":""},{"location":"tutorial/optimize/0.lettrade/","title":"Optimize with LetTrade Grid Search","text":"In\u00a0[1]: Copied! <pre># import talib.abstract as ta\n\nfrom lettrade import DataFeed, Strategy, indicator as i\nfrom lettrade.exchange.backtest import ForexBackTestAccount, let_backtest\nfrom lettrade.indicator.vendor.qtpylib import inject_indicators\n\ninject_indicators()\n\n\nclass SmaCross(Strategy):\n    ema1_period = 9\n    ema2_period = 21\n\n    def indicators(self, df: DataFeed):\n        # df[\"ema1\"] = ta.EMA(df, timeperiod=self.ema1_period)\n        # df[\"ema2\"] = ta.EMA(df, timeperiod=self.ema2_period)\n        df[\"ema1\"] = df.close.ema(window=self.ema1_period)\n        df[\"ema2\"] = df.close.ema(window=self.ema2_period)\n\n        df[\"signal_ema_crossover\"] = i.crossover(df.ema1, df.ema2)\n        df[\"signal_ema_crossunder\"] = i.crossunder(df.ema1, df.ema2)\n\n    def next(self, df: DataFeed):\n        if len(self.orders) &gt; 0 or len(self.positionsonsonsons) &gt; 0:\n            return\n\n        if df.l.signal_ema_crossover[-1]:\n            price = df.l.close[-1]\n            self.buy(size=0.1, sl=price - 0.001, tp=price + 0.001)\n        elif df.l.signal_ema_crossunder[-1]:\n            price = df.l.close[-1]\n            self.sell(size=0.1, sl=price + 0.001, tp=price - 0.001)\n\n\nlt = let_backtest(\n    strategy=SmaCross,\n    datas=\"example/data/data/EURUSD_5m_0_10000.csv\",\n    account=ForexBackTestAccount,\n    # plotter=None,\n)\n</pre> # import talib.abstract as ta  from lettrade import DataFeed, Strategy, indicator as i from lettrade.exchange.backtest import ForexBackTestAccount, let_backtest from lettrade.indicator.vendor.qtpylib import inject_indicators  inject_indicators()   class SmaCross(Strategy):     ema1_period = 9     ema2_period = 21      def indicators(self, df: DataFeed):         # df[\"ema1\"] = ta.EMA(df, timeperiod=self.ema1_period)         # df[\"ema2\"] = ta.EMA(df, timeperiod=self.ema2_period)         df[\"ema1\"] = df.close.ema(window=self.ema1_period)         df[\"ema2\"] = df.close.ema(window=self.ema2_period)          df[\"signal_ema_crossover\"] = i.crossover(df.ema1, df.ema2)         df[\"signal_ema_crossunder\"] = i.crossunder(df.ema1, df.ema2)      def next(self, df: DataFeed):         if len(self.orders) &gt; 0 or len(self.positionsonsonsons) &gt; 0:             return          if df.l.signal_ema_crossover[-1]:             price = df.l.close[-1]             self.buy(size=0.1, sl=price - 0.001, tp=price + 0.001)         elif df.l.signal_ema_crossunder[-1]:             price = df.l.close[-1]             self.sell(size=0.1, sl=price + 0.001, tp=price - 0.001)   lt = let_backtest(     strategy=SmaCross,     datas=\"example/data/data/EURUSD_5m_0_10000.csv\",     account=ForexBackTestAccount,     # plotter=None, ) In\u00a0[2]: Copied! <pre>lt.optimize(ema1_period=[5, 6, 7, 8, 9, 10], ema2_period=range(10, 50, 1))\n</pre> lt.optimize(ema1_period=[5, 6, 7, 8, 9, 10], ema2_period=range(10, 50, 1)) <pre> 49%|\u2588\u2588\u2588\u2588\u2589     | 117/240 [00:00&lt;00:00, 476.26it/s]</pre> <pre>100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 240/240 [00:00&lt;00:00, 707.73it/s]\n</pre> <p>Rerun Optimize will reuse optimize result cached</p> In\u00a0[3]: Copied! <pre>lt.optimize(ema1_period=range(5, 25), ema2_period=range(10, 50, 1))\n</pre> lt.optimize(ema1_period=range(5, 25), ema2_period=range(10, 50, 1)) <pre>  6%|\u258b         | 51/800 [00:00&lt;00:05, 140.44it/s]</pre> <pre>100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 800/800 [00:00&lt;00:00, 1405.26it/s]\n</pre> In\u00a0[4]: Copied! <pre>lt.plotter.heatmap(x=\"ema1_period\", y=\"ema2_period\", z=\"equity\")\n</pre> lt.plotter.heatmap(x=\"ema1_period\", y=\"ema2_period\", z=\"equity\") In\u00a0[5]: Copied! <pre>lt.plotter.contour(x=\"ema1_period\", y=\"ema2_period\", z=\"equity\")\n</pre> lt.plotter.contour(x=\"ema1_period\", y=\"ema2_period\", z=\"equity\") In\u00a0[6]: Copied! <pre>lt.optimize_cache()\n</pre> lt.optimize_cache() <pre>Load caches from: data/optimize\nLoaded 943 caches\n</pre> In\u00a0[7]: Copied! <pre>lt.plotter.heatmap()\n</pre> lt.plotter.heatmap() In\u00a0[8]: Copied! <pre>lt.plotter.contour()\n</pre> lt.plotter.contour()"},{"location":"tutorial/optimize/0.lettrade/#optimize-with-lettrade-grid-search","title":"Optimize with LetTrade Grid Search\u00b6","text":""},{"location":"tutorial/optimize/0.lettrade/#grid-search","title":"Grid Search\u00b6","text":""},{"location":"tutorial/optimize/0.lettrade/#sample-strategy","title":"Sample Strategy\u00b6","text":""},{"location":"tutorial/optimize/0.lettrade/#optimize","title":"Optimize\u00b6","text":"<p><code>LetTrade</code> will auto cache optimize result</p>"},{"location":"tutorial/optimize/0.lettrade/#plot","title":"Plot\u00b6","text":""},{"location":"tutorial/optimize/0.lettrade/#optimize-from-cache","title":"Optimize from cache\u00b6","text":"<p>Load optimize result from cache</p>"},{"location":"tutorial/optimize/0.lettrade/#plot","title":"Plot\u00b6","text":""},{"location":"tutorial/optimize/1.optuna/","title":"Optimize with Optuna","text":"In\u00a0[\u00a0]: Copied! <pre>!pip install optuna\n</pre> !pip install optuna In\u00a0[1]: Copied! <pre># import talib.abstract as ta\n\nfrom lettrade import DataFeed, Strategy, indicator as i\nfrom lettrade.exchange.backtest import ForexBackTestAccount, let_backtest\nfrom lettrade.indicator.vendor.qtpylib import inject_indicators\n\ninject_indicators()\n\n\nclass SmaCross(Strategy):\n    ema1_period = 9\n    ema2_period = 21\n\n    def indicators(self, df: DataFeed):\n        # df[\"ema1\"] = ta.EMA(df, timeperiod=self.ema1_period)\n        # df[\"ema2\"] = ta.EMA(df, timeperiod=self.ema2_period)\n        df[\"ema1\"] = df.close.ema(window=self.ema1_period)\n        df[\"ema2\"] = df.close.ema(window=self.ema2_period)\n\n        df[\"signal_ema_crossover\"] = i.crossover(df.ema1, df.ema2)\n        df[\"signal_ema_crossunder\"] = i.crossunder(df.ema1, df.ema2)\n\n    def next(self, df: DataFeed):\n        if len(self.orders) &gt; 0 or len(self.positionsonsonsons) &gt; 0:\n            return\n\n        if df.l.signal_ema_crossover[-1]:\n            price = df.l.close[-1]\n            self.buy(size=0.1, sl=price - 0.001, tp=price + 0.001)\n        elif df.l.signal_ema_crossunder[-1]:\n            price = df.l.close[-1]\n            self.sell(size=0.1, sl=price + 0.001, tp=price - 0.001)\n\n\nlt = let_backtest(\n    strategy=SmaCross,\n    datas=\"example/data/data/EURUSD_5m_0_10000.csv\",\n    account=ForexBackTestAccount,\n    # plotter=None,\n)\n</pre> # import talib.abstract as ta  from lettrade import DataFeed, Strategy, indicator as i from lettrade.exchange.backtest import ForexBackTestAccount, let_backtest from lettrade.indicator.vendor.qtpylib import inject_indicators  inject_indicators()   class SmaCross(Strategy):     ema1_period = 9     ema2_period = 21      def indicators(self, df: DataFeed):         # df[\"ema1\"] = ta.EMA(df, timeperiod=self.ema1_period)         # df[\"ema2\"] = ta.EMA(df, timeperiod=self.ema2_period)         df[\"ema1\"] = df.close.ema(window=self.ema1_period)         df[\"ema2\"] = df.close.ema(window=self.ema2_period)          df[\"signal_ema_crossover\"] = i.crossover(df.ema1, df.ema2)         df[\"signal_ema_crossunder\"] = i.crossunder(df.ema1, df.ema2)      def next(self, df: DataFeed):         if len(self.orders) &gt; 0 or len(self.positionsonsonsons) &gt; 0:             return          if df.l.signal_ema_crossover[-1]:             price = df.l.close[-1]             self.buy(size=0.1, sl=price - 0.001, tp=price + 0.001)         elif df.l.signal_ema_crossunder[-1]:             price = df.l.close[-1]             self.sell(size=0.1, sl=price + 0.001, tp=price - 0.001)   lt = let_backtest(     strategy=SmaCross,     datas=\"example/data/data/EURUSD_5m_0_10000.csv\",     account=ForexBackTestAccount,     # plotter=None, ) In\u00a0[2]: Copied! <pre>import optuna\n\nlettrade_model = lt.optimize_model()\n\n\ndef train_model(trial):\n    params = {\n        \"ema1_period\": trial.suggest_int(\"ema1_period\", 5, 25, step=1),\n        \"ema2_period\": trial.suggest_int(\"ema2_period\", 10, 50, step=1),\n    }\n\n    # Model\n    result = lettrade_model(params)\n\n    # Score\n    return result[\"equity\"]\n\n\nstudy = optuna.create_study(\n    study_name=\"example-study\",\n    direction=\"maximize\",\n    # storage='sqlite:///example.db',\n    load_if_exists=True,\n)\n\nstudy.optimize(train_model, n_trials=1_000)\n</pre> import optuna  lettrade_model = lt.optimize_model()   def train_model(trial):     params = {         \"ema1_period\": trial.suggest_int(\"ema1_period\", 5, 25, step=1),         \"ema2_period\": trial.suggest_int(\"ema2_period\", 10, 50, step=1),     }      # Model     result = lettrade_model(params)      # Score     return result[\"equity\"]   study = optuna.create_study(     study_name=\"example-study\",     direction=\"maximize\",     # storage='sqlite:///example.db',     load_if_exists=True, )  study.optimize(train_model, n_trials=1_000) <pre>[I 2024-06-15 07:40:46,865] A new study created in memory with name: example-study\n[I 2024-06-15 07:40:46,873] Trial 0 finished with value: 852.58 and parameters: {'ema1_period': 5, 'ema2_period': 24}. Best is trial 0 with value: 852.58.\n[I 2024-06-15 07:40:46,875] Trial 1 finished with value: 1000.88 and parameters: {'ema1_period': 19, 'ema2_period': 25}. Best is trial 1 with value: 1000.88.\n[I 2024-06-15 07:40:46,877] Trial 2 finished with value: 899.78 and parameters: {'ema1_period': 16, 'ema2_period': 21}. Best is trial 1 with value: 1000.88.\n[I 2024-06-15 07:40:46,879] Trial 3 finished with value: 1021.38 and parameters: {'ema1_period': 12, 'ema2_period': 50}. Best is trial 3 with value: 1021.38.\n[I 2024-06-15 07:40:46,881] Trial 4 finished with value: 1148.48 and parameters: {'ema1_period': 22, 'ema2_period': 13}. Best is trial 4 with value: 1148.48.\n[I 2024-06-15 07:40:46,885] Trial 5 finished with value: 1118.58 and parameters: {'ema1_period': 17, 'ema2_period': 15}. Best is trial 4 with value: 1148.48.\n[I 2024-06-15 07:40:46,887] Trial 6 finished with value: 830.58 and parameters: {'ema1_period': 8, 'ema2_period': 41}. Best is trial 4 with value: 1148.48.\n[I 2024-06-15 07:40:46,890] Trial 7 finished with value: 943.88 and parameters: {'ema1_period': 14, 'ema2_period': 17}. Best is trial 4 with value: 1148.48.\n[I 2024-06-15 07:40:46,891] Trial 8 finished with value: 970.58 and parameters: {'ema1_period': 11, 'ema2_period': 39}. Best is trial 4 with value: 1148.48.\n[I 2024-06-15 07:40:46,893] Trial 9 finished with value: 893.48 and parameters: {'ema1_period': 9, 'ema2_period': 24}. Best is trial 4 with value: 1148.48.\n[I 2024-06-15 07:40:46,905] Trial 10 finished with value: 1160.28 and parameters: {'ema1_period': 25, 'ema2_period': 11}. Best is trial 10 with value: 1160.28.\n[I 2024-06-15 07:40:46,914] Trial 11 finished with value: 1160.28 and parameters: {'ema1_period': 25, 'ema2_period': 11}. Best is trial 10 with value: 1160.28.\n[I 2024-06-15 07:40:46,922] Trial 12 finished with value: 1160.28 and parameters: {'ema1_period': 25, 'ema2_period': 11}. Best is trial 10 with value: 1160.28.\n[I 2024-06-15 07:40:46,928] Trial 13 finished with value: 904.08 and parameters: {'ema1_period': 25, 'ema2_period': 32}. Best is trial 10 with value: 1160.28.\n[I 2024-06-15 07:40:46,935] Trial 14 finished with value: 1070.18 and parameters: {'ema1_period': 21, 'ema2_period': 18}. Best is trial 10 with value: 1160.28.\n[I 2024-06-15 07:40:46,941] Trial 15 finished with value: 1036.78 and parameters: {'ema1_period': 22, 'ema2_period': 10}. Best is trial 10 with value: 1160.28.\n[I 2024-06-15 07:40:46,947] Trial 16 finished with value: 884.68 and parameters: {'ema1_period': 25, 'ema2_period': 31}. Best is trial 10 with value: 1160.28.\n[I 2024-06-15 07:40:46,953] Trial 17 finished with value: 1007.28 and parameters: {'ema1_period': 19, 'ema2_period': 10}. Best is trial 10 with value: 1160.28.\n[I 2024-06-15 07:40:46,958] Trial 18 finished with value: 980.48 and parameters: {'ema1_period': 23, 'ema2_period': 18}. Best is trial 10 with value: 1160.28.\n[I 2024-06-15 07:40:46,964] Trial 19 finished with value: 901.98 and parameters: {'ema1_period': 19, 'ema2_period': 28}. Best is trial 10 with value: 1160.28.\n[I 2024-06-15 07:40:46,970] Trial 20 finished with value: 947.78 and parameters: {'ema1_period': 23, 'ema2_period': 37}. Best is trial 10 with value: 1160.28.\n[I 2024-06-15 07:40:46,976] Trial 21 finished with value: 1010.38 and parameters: {'ema1_period': 25, 'ema2_period': 13}. Best is trial 10 with value: 1160.28.\n[I 2024-06-15 07:40:46,983] Trial 22 finished with value: 1148.18 and parameters: {'ema1_period': 24, 'ema2_period': 11}. Best is trial 10 with value: 1160.28.\n[I 2024-06-15 07:40:46,989] Trial 23 finished with value: 980.58 and parameters: {'ema1_period': 21, 'ema2_period': 20}. Best is trial 10 with value: 1160.28.\n[I 2024-06-15 07:40:46,996] Trial 24 finished with value: 1148.38 and parameters: {'ema1_period': 20, 'ema2_period': 15}. Best is trial 10 with value: 1160.28.\n[I 2024-06-15 07:40:47,003] Trial 25 finished with value: 1168.98 and parameters: {'ema1_period': 23, 'ema2_period': 13}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:47,009] Trial 26 finished with value: 1090.28 and parameters: {'ema1_period': 23, 'ema2_period': 15}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:47,015] Trial 27 finished with value: 909.78 and parameters: {'ema1_period': 17, 'ema2_period': 21}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:47,022] Trial 28 finished with value: 1168.98 and parameters: {'ema1_period': 23, 'ema2_period': 13}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:47,028] Trial 29 finished with value: 1019.28 and parameters: {'ema1_period': 14, 'ema2_period': 27}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:47,034] Trial 30 finished with value: 859.58 and parameters: {'ema1_period': 6, 'ema2_period': 22}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:47,040] Trial 31 finished with value: 1100.68 and parameters: {'ema1_period': 23, 'ema2_period': 14}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:47,046] Trial 32 finished with value: 1070.18 and parameters: {'ema1_period': 21, 'ema2_period': 18}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:47,052] Trial 33 finished with value: 1168.98 and parameters: {'ema1_period': 24, 'ema2_period': 12}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:47,058] Trial 34 finished with value: 1129.28 and parameters: {'ema1_period': 24, 'ema2_period': 13}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:47,065] Trial 35 finished with value: 1036.88 and parameters: {'ema1_period': 22, 'ema2_period': 48}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:47,072] Trial 36 finished with value: 1168.38 and parameters: {'ema1_period': 19, 'ema2_period': 16}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:47,079] Trial 37 finished with value: 989.78 and parameters: {'ema1_period': 17, 'ema2_period': 24}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:47,086] Trial 38 finished with value: 1168.18 and parameters: {'ema1_period': 18, 'ema2_period': 16}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:47,093] Trial 39 finished with value: 1000.0 and parameters: {'ema1_period': 20, 'ema2_period': 20}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:47,099] Trial 40 finished with value: 1126.68 and parameters: {'ema1_period': 20, 'ema2_period': 13}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:47,106] Trial 41 finished with value: 1168.18 and parameters: {'ema1_period': 18, 'ema2_period': 16}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:47,112] Trial 42 finished with value: 863.18 and parameters: {'ema1_period': 15, 'ema2_period': 17}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:47,119] Trial 43 finished with value: 1026.28 and parameters: {'ema1_period': 18, 'ema2_period': 13}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:47,126] Trial 44 finished with value: 811.68 and parameters: {'ema1_period': 15, 'ema2_period': 19}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:47,132] Trial 45 finished with value: 990.58 and parameters: {'ema1_period': 13, 'ema2_period': 15}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:47,139] Trial 46 finished with value: 941.08 and parameters: {'ema1_period': 22, 'ema2_period': 23}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:47,145] Trial 47 finished with value: 1000.0 and parameters: {'ema1_period': 16, 'ema2_period': 16}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:47,152] Trial 48 finished with value: 1168.98 and parameters: {'ema1_period': 24, 'ema2_period': 12}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:47,159] Trial 49 finished with value: 1168.98 and parameters: {'ema1_period': 24, 'ema2_period': 12}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:47,166] Trial 50 finished with value: 1118.38 and parameters: {'ema1_period': 24, 'ema2_period': 10}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:47,173] Trial 51 finished with value: 1168.98 and parameters: {'ema1_period': 24, 'ema2_period': 12}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:47,180] Trial 52 finished with value: 1168.98 and parameters: {'ema1_period': 24, 'ema2_period': 12}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:47,186] Trial 53 finished with value: 1158.38 and parameters: {'ema1_period': 23, 'ema2_period': 12}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:47,193] Trial 54 finished with value: 1010.08 and parameters: {'ema1_period': 24, 'ema2_period': 35}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:47,201] Trial 55 finished with value: 1036.78 and parameters: {'ema1_period': 22, 'ema2_period': 10}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:47,208] Trial 56 finished with value: 802.38 and parameters: {'ema1_period': 10, 'ema2_period': 11}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:47,215] Trial 57 finished with value: 1080.18 and parameters: {'ema1_period': 25, 'ema2_period': 14}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:47,222] Trial 58 finished with value: 1097.08 and parameters: {'ema1_period': 21, 'ema2_period': 12}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:47,229] Trial 59 finished with value: 1008.28 and parameters: {'ema1_period': 23, 'ema2_period': 45}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:47,236] Trial 60 finished with value: 1090.28 and parameters: {'ema1_period': 24, 'ema2_period': 14}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:47,243] Trial 61 finished with value: 1168.98 and parameters: {'ema1_period': 24, 'ema2_period': 12}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:47,250] Trial 62 finished with value: 1161.08 and parameters: {'ema1_period': 25, 'ema2_period': 12}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:47,257] Trial 63 finished with value: 1036.78 and parameters: {'ema1_period': 22, 'ema2_period': 10}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:47,265] Trial 64 finished with value: 1100.68 and parameters: {'ema1_period': 23, 'ema2_period': 14}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:47,272] Trial 65 finished with value: 949.48 and parameters: {'ema1_period': 24, 'ema2_period': 18}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:47,278] Trial 66 finished with value: 1161.08 and parameters: {'ema1_period': 25, 'ema2_period': 12}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:47,285] Trial 67 finished with value: 1090.18 and parameters: {'ema1_period': 21, 'ema2_period': 17}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:47,292] Trial 68 finished with value: 1128.28 and parameters: {'ema1_period': 23, 'ema2_period': 11}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:47,299] Trial 69 finished with value: 1059.98 and parameters: {'ema1_period': 24, 'ema2_period': 15}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:47,306] Trial 70 finished with value: 951.38 and parameters: {'ema1_period': 22, 'ema2_period': 26}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:47,313] Trial 71 finished with value: 1161.08 and parameters: {'ema1_period': 25, 'ema2_period': 12}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:47,320] Trial 72 finished with value: 1090.28 and parameters: {'ema1_period': 24, 'ema2_period': 14}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:47,327] Trial 73 finished with value: 1116.18 and parameters: {'ema1_period': 23, 'ema2_period': 10}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:47,334] Trial 74 finished with value: 1129.28 and parameters: {'ema1_period': 24, 'ema2_period': 13}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:47,341] Trial 75 finished with value: 1160.28 and parameters: {'ema1_period': 25, 'ema2_period': 11}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:47,348] Trial 76 finished with value: 1020.28 and parameters: {'ema1_period': 23, 'ema2_period': 17}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:47,355] Trial 77 finished with value: 1148.48 and parameters: {'ema1_period': 22, 'ema2_period': 13}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:47,362] Trial 78 finished with value: 940.58 and parameters: {'ema1_period': 5, 'ema2_period': 15}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:47,369] Trial 79 finished with value: 1097.08 and parameters: {'ema1_period': 21, 'ema2_period': 12}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:47,376] Trial 80 finished with value: 959.08 and parameters: {'ema1_period': 24, 'ema2_period': 19}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:47,383] Trial 81 finished with value: 1139.08 and parameters: {'ema1_period': 20, 'ema2_period': 16}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:47,389] Trial 82 finished with value: 1160.28 and parameters: {'ema1_period': 25, 'ema2_period': 11}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:47,396] Trial 83 finished with value: 1090.28 and parameters: {'ema1_period': 24, 'ema2_period': 14}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:47,403] Trial 84 finished with value: 874.88 and parameters: {'ema1_period': 22, 'ema2_period': 33}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:47,410] Trial 85 finished with value: 1168.98 and parameters: {'ema1_period': 23, 'ema2_period': 13}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:47,417] Trial 86 finished with value: 1168.98 and parameters: {'ema1_period': 23, 'ema2_period': 13}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:47,423] Trial 87 finished with value: 991.38 and parameters: {'ema1_period': 25, 'ema2_period': 42}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:47,431] Trial 88 finished with value: 1116.18 and parameters: {'ema1_period': 23, 'ema2_period': 10}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:47,438] Trial 89 finished with value: 1059.98 and parameters: {'ema1_period': 24, 'ema2_period': 15}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:47,446] Trial 90 finished with value: 1168.28 and parameters: {'ema1_period': 22, 'ema2_period': 12}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:47,453] Trial 91 finished with value: 1168.98 and parameters: {'ema1_period': 23, 'ema2_period': 13}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:47,460] Trial 92 finished with value: 1128.28 and parameters: {'ema1_period': 23, 'ema2_period': 11}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:47,468] Trial 93 finished with value: 1129.28 and parameters: {'ema1_period': 24, 'ema2_period': 13}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:47,475] Trial 94 finished with value: 1168.68 and parameters: {'ema1_period': 21, 'ema2_period': 15}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:47,482] Trial 95 finished with value: 1100.68 and parameters: {'ema1_period': 23, 'ema2_period': 14}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:47,488] Trial 96 finished with value: 1148.18 and parameters: {'ema1_period': 24, 'ema2_period': 11}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:47,495] Trial 97 finished with value: 960.18 and parameters: {'ema1_period': 25, 'ema2_period': 17}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:47,502] Trial 98 finished with value: 932.78 and parameters: {'ema1_period': 22, 'ema2_period': 30}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:47,509] Trial 99 finished with value: 1139.08 and parameters: {'ema1_period': 12, 'ema2_period': 10}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:47,516] Trial 100 finished with value: 1168.98 and parameters: {'ema1_period': 23, 'ema2_period': 13}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:47,524] Trial 101 finished with value: 1158.38 and parameters: {'ema1_period': 23, 'ema2_period': 12}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:47,532] Trial 102 finished with value: 1090.28 and parameters: {'ema1_period': 24, 'ema2_period': 14}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:47,539] Trial 103 finished with value: 1129.28 and parameters: {'ema1_period': 24, 'ema2_period': 13}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:47,547] Trial 104 finished with value: 990.58 and parameters: {'ema1_period': 25, 'ema2_period': 16}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:47,554] Trial 105 finished with value: 1168.28 and parameters: {'ema1_period': 22, 'ema2_period': 12}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:47,561] Trial 106 finished with value: 810.48 and parameters: {'ema1_period': 8, 'ema2_period': 14}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:47,569] Trial 107 finished with value: 1128.28 and parameters: {'ema1_period': 23, 'ema2_period': 11}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:47,577] Trial 108 finished with value: 1158.28 and parameters: {'ema1_period': 21, 'ema2_period': 13}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:47,584] Trial 109 finished with value: 1080.28 and parameters: {'ema1_period': 22, 'ema2_period': 15}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:47,591] Trial 110 finished with value: 1116.18 and parameters: {'ema1_period': 23, 'ema2_period': 10}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:47,600] Trial 111 finished with value: 1168.98 and parameters: {'ema1_period': 23, 'ema2_period': 13}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:47,608] Trial 112 finished with value: 1168.98 and parameters: {'ema1_period': 24, 'ema2_period': 12}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:47,618] Trial 113 finished with value: 1010.38 and parameters: {'ema1_period': 25, 'ema2_period': 13}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:47,626] Trial 114 finished with value: 1069.98 and parameters: {'ema1_period': 23, 'ema2_period': 16}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:47,635] Trial 115 finished with value: 1160.28 and parameters: {'ema1_period': 25, 'ema2_period': 11}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:47,644] Trial 116 finished with value: 1059.98 and parameters: {'ema1_period': 24, 'ema2_period': 15}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:47,652] Trial 117 finished with value: 1100.68 and parameters: {'ema1_period': 23, 'ema2_period': 14}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:47,659] Trial 118 finished with value: 1148.48 and parameters: {'ema1_period': 22, 'ema2_period': 13}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:47,667] Trial 119 finished with value: 1168.98 and parameters: {'ema1_period': 24, 'ema2_period': 12}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:47,674] Trial 120 finished with value: 1128.28 and parameters: {'ema1_period': 23, 'ema2_period': 11}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:47,682] Trial 121 finished with value: 1168.98 and parameters: {'ema1_period': 23, 'ema2_period': 13}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:47,765] Trial 122 finished with value: 1168.28 and parameters: {'ema1_period': 22, 'ema2_period': 12}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:47,772] Trial 123 finished with value: 1118.38 and parameters: {'ema1_period': 24, 'ema2_period': 10}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:47,780] Trial 124 finished with value: 1100.68 and parameters: {'ema1_period': 23, 'ema2_period': 14}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:47,788] Trial 125 finished with value: 1129.28 and parameters: {'ema1_period': 24, 'ema2_period': 13}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:47,796] Trial 126 finished with value: 1020.28 and parameters: {'ema1_period': 23, 'ema2_period': 17}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:47,804] Trial 127 finished with value: 1160.28 and parameters: {'ema1_period': 25, 'ema2_period': 11}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:47,812] Trial 128 finished with value: 1158.88 and parameters: {'ema1_period': 22, 'ema2_period': 14}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:47,820] Trial 129 finished with value: 1161.08 and parameters: {'ema1_period': 25, 'ema2_period': 12}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:47,828] Trial 130 finished with value: 1168.68 and parameters: {'ema1_period': 21, 'ema2_period': 15}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:47,835] Trial 131 finished with value: 1168.98 and parameters: {'ema1_period': 24, 'ema2_period': 12}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:47,843] Trial 132 finished with value: 1000.18 and parameters: {'ema1_period': 24, 'ema2_period': 50}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:47,850] Trial 133 finished with value: 1129.28 and parameters: {'ema1_period': 24, 'ema2_period': 13}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:47,858] Trial 134 finished with value: 1116.18 and parameters: {'ema1_period': 23, 'ema2_period': 10}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:47,866] Trial 135 finished with value: 1148.18 and parameters: {'ema1_period': 24, 'ema2_period': 11}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:47,874] Trial 136 finished with value: 1158.38 and parameters: {'ema1_period': 23, 'ema2_period': 12}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:47,883] Trial 137 finished with value: 931.48 and parameters: {'ema1_period': 24, 'ema2_period': 38}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:47,891] Trial 138 finished with value: 1010.38 and parameters: {'ema1_period': 25, 'ema2_period': 13}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:47,899] Trial 139 finished with value: 1100.68 and parameters: {'ema1_period': 23, 'ema2_period': 14}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:47,907] Trial 140 finished with value: 1168.28 and parameters: {'ema1_period': 22, 'ema2_period': 12}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:47,914] Trial 141 finished with value: 1168.98 and parameters: {'ema1_period': 24, 'ema2_period': 12}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:47,922] Trial 142 finished with value: 1148.18 and parameters: {'ema1_period': 24, 'ema2_period': 11}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:47,930] Trial 143 finished with value: 990.58 and parameters: {'ema1_period': 25, 'ema2_period': 16}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:47,937] Trial 144 finished with value: 1118.38 and parameters: {'ema1_period': 24, 'ema2_period': 10}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:47,945] Trial 145 finished with value: 1168.98 and parameters: {'ema1_period': 23, 'ema2_period': 13}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:47,953] Trial 146 finished with value: 1168.98 and parameters: {'ema1_period': 23, 'ema2_period': 13}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:47,961] Trial 147 finished with value: 923.28 and parameters: {'ema1_period': 25, 'ema2_period': 28}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:47,970] Trial 148 finished with value: 1059.98 and parameters: {'ema1_period': 24, 'ema2_period': 15}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:47,980] Trial 149 finished with value: 1168.28 and parameters: {'ema1_period': 22, 'ema2_period': 12}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:47,989] Trial 150 finished with value: 1100.68 and parameters: {'ema1_period': 23, 'ema2_period': 14}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:47,997] Trial 151 finished with value: 1168.98 and parameters: {'ema1_period': 23, 'ema2_period': 13}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:48,005] Trial 152 finished with value: 1148.18 and parameters: {'ema1_period': 24, 'ema2_period': 11}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:48,014] Trial 153 finished with value: 1158.38 and parameters: {'ema1_period': 23, 'ema2_period': 12}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:48,022] Trial 154 finished with value: 1158.88 and parameters: {'ema1_period': 22, 'ema2_period': 14}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:48,029] Trial 155 finished with value: 1168.98 and parameters: {'ema1_period': 23, 'ema2_period': 13}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:48,037] Trial 156 finished with value: 1118.38 and parameters: {'ema1_period': 24, 'ema2_period': 10}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:48,046] Trial 157 finished with value: 1148.18 and parameters: {'ema1_period': 24, 'ema2_period': 11}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:48,055] Trial 158 finished with value: 1161.08 and parameters: {'ema1_period': 25, 'ema2_period': 12}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:48,064] Trial 159 finished with value: 1090.28 and parameters: {'ema1_period': 23, 'ema2_period': 15}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:48,072] Trial 160 finished with value: 1090.28 and parameters: {'ema1_period': 24, 'ema2_period': 14}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:48,080] Trial 161 finished with value: 1168.98 and parameters: {'ema1_period': 24, 'ema2_period': 12}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:48,088] Trial 162 finished with value: 1129.28 and parameters: {'ema1_period': 24, 'ema2_period': 13}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:48,097] Trial 163 finished with value: 1128.28 and parameters: {'ema1_period': 23, 'ema2_period': 11}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:48,105] Trial 164 finished with value: 1060.38 and parameters: {'ema1_period': 14, 'ema2_period': 12}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:48,113] Trial 165 finished with value: 1010.38 and parameters: {'ema1_period': 25, 'ema2_period': 13}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:48,121] Trial 166 finished with value: 1168.28 and parameters: {'ema1_period': 22, 'ema2_period': 12}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:48,129] Trial 167 finished with value: 1090.28 and parameters: {'ema1_period': 24, 'ema2_period': 14}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:48,138] Trial 168 finished with value: 1116.18 and parameters: {'ema1_period': 23, 'ema2_period': 10}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:48,146] Trial 169 finished with value: 1160.28 and parameters: {'ema1_period': 25, 'ema2_period': 11}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:48,155] Trial 170 finished with value: 1069.98 and parameters: {'ema1_period': 23, 'ema2_period': 16}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:48,164] Trial 171 finished with value: 1168.98 and parameters: {'ema1_period': 24, 'ema2_period': 12}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:48,172] Trial 172 finished with value: 1129.28 and parameters: {'ema1_period': 24, 'ema2_period': 13}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:48,180] Trial 173 finished with value: 1158.38 and parameters: {'ema1_period': 23, 'ema2_period': 12}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:48,188] Trial 174 finished with value: 998.88 and parameters: {'ema1_period': 24, 'ema2_period': 41}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:48,196] Trial 175 finished with value: 1129.28 and parameters: {'ema1_period': 24, 'ema2_period': 13}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:48,204] Trial 176 finished with value: 1158.38 and parameters: {'ema1_period': 23, 'ema2_period': 12}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:48,212] Trial 177 finished with value: 990.38 and parameters: {'ema1_period': 25, 'ema2_period': 48}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:48,221] Trial 178 finished with value: 1059.98 and parameters: {'ema1_period': 24, 'ema2_period': 15}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:48,230] Trial 179 finished with value: 1039.58 and parameters: {'ema1_period': 16, 'ema2_period': 11}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:48,239] Trial 180 finished with value: 1158.88 and parameters: {'ema1_period': 22, 'ema2_period': 14}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:48,248] Trial 181 finished with value: 1168.98 and parameters: {'ema1_period': 23, 'ema2_period': 13}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:48,256] Trial 182 finished with value: 1168.98 and parameters: {'ema1_period': 23, 'ema2_period': 13}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:48,264] Trial 183 finished with value: 1168.98 and parameters: {'ema1_period': 24, 'ema2_period': 12}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:48,272] Trial 184 finished with value: 1100.68 and parameters: {'ema1_period': 23, 'ema2_period': 14}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:48,282] Trial 185 finished with value: 1148.18 and parameters: {'ema1_period': 24, 'ema2_period': 11}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:48,291] Trial 186 finished with value: 832.18 and parameters: {'ema1_period': 8, 'ema2_period': 13}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:48,301] Trial 187 finished with value: 1148.48 and parameters: {'ema1_period': 22, 'ema2_period': 13}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:48,312] Trial 188 finished with value: 1116.18 and parameters: {'ema1_period': 23, 'ema2_period': 10}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:48,322] Trial 189 finished with value: 1010.08 and parameters: {'ema1_period': 24, 'ema2_period': 35}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:48,332] Trial 190 finished with value: 1020.38 and parameters: {'ema1_period': 25, 'ema2_period': 15}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:48,341] Trial 191 finished with value: 1158.38 and parameters: {'ema1_period': 23, 'ema2_period': 12}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:48,350] Trial 192 finished with value: 1168.98 and parameters: {'ema1_period': 23, 'ema2_period': 13}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:48,359] Trial 193 finished with value: 1100.68 and parameters: {'ema1_period': 23, 'ema2_period': 14}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:48,367] Trial 194 finished with value: 1148.18 and parameters: {'ema1_period': 24, 'ema2_period': 11}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:48,376] Trial 195 finished with value: 1168.28 and parameters: {'ema1_period': 22, 'ema2_period': 12}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:48,384] Trial 196 finished with value: 1090.28 and parameters: {'ema1_period': 24, 'ema2_period': 14}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:48,393] Trial 197 finished with value: 1168.98 and parameters: {'ema1_period': 23, 'ema2_period': 13}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:48,402] Trial 198 finished with value: 1158.38 and parameters: {'ema1_period': 23, 'ema2_period': 12}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:48,411] Trial 199 finished with value: 1148.18 and parameters: {'ema1_period': 24, 'ema2_period': 11}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:48,420] Trial 200 finished with value: 1148.48 and parameters: {'ema1_period': 22, 'ema2_period': 13}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:48,429] Trial 201 finished with value: 1168.98 and parameters: {'ema1_period': 23, 'ema2_period': 13}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:48,438] Trial 202 finished with value: 1158.38 and parameters: {'ema1_period': 23, 'ema2_period': 12}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:48,446] Trial 203 finished with value: 1090.28 and parameters: {'ema1_period': 24, 'ema2_period': 14}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:48,455] Trial 204 finished with value: 1168.98 and parameters: {'ema1_period': 23, 'ema2_period': 13}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:48,463] Trial 205 finished with value: 1096.78 and parameters: {'ema1_period': 22, 'ema2_period': 11}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:48,472] Trial 206 finished with value: 1090.28 and parameters: {'ema1_period': 24, 'ema2_period': 14}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:48,481] Trial 207 finished with value: 1161.08 and parameters: {'ema1_period': 25, 'ema2_period': 12}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:48,489] Trial 208 finished with value: 1128.28 and parameters: {'ema1_period': 23, 'ema2_period': 11}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:48,499] Trial 209 finished with value: 1059.98 and parameters: {'ema1_period': 24, 'ema2_period': 15}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:48,513] Trial 210 finished with value: 1168.98 and parameters: {'ema1_period': 23, 'ema2_period': 13}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:48,525] Trial 211 finished with value: 1168.98 and parameters: {'ema1_period': 23, 'ema2_period': 13}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:48,535] Trial 212 finished with value: 1168.98 and parameters: {'ema1_period': 23, 'ema2_period': 13}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:48,544] Trial 213 finished with value: 1168.98 and parameters: {'ema1_period': 24, 'ema2_period': 12}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:48,553] Trial 214 finished with value: 1168.28 and parameters: {'ema1_period': 22, 'ema2_period': 12}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:48,561] Trial 215 finished with value: 1090.28 and parameters: {'ema1_period': 24, 'ema2_period': 14}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:48,570] Trial 216 finished with value: 1168.98 and parameters: {'ema1_period': 23, 'ema2_period': 13}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:48,583] Trial 217 finished with value: 851.68 and parameters: {'ema1_period': 23, 'ema2_period': 24}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:48,597] Trial 218 finished with value: 1168.98 and parameters: {'ema1_period': 24, 'ema2_period': 12}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:48,609] Trial 219 finished with value: 1129.58 and parameters: {'ema1_period': 25, 'ema2_period': 10}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:48,617] Trial 220 finished with value: 1090.28 and parameters: {'ema1_period': 24, 'ema2_period': 14}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:48,626] Trial 221 finished with value: 1168.98 and parameters: {'ema1_period': 24, 'ema2_period': 12}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:48,635] Trial 222 finished with value: 1168.98 and parameters: {'ema1_period': 24, 'ema2_period': 12}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:48,644] Trial 223 finished with value: 1128.28 and parameters: {'ema1_period': 23, 'ema2_period': 11}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:48,653] Trial 224 finished with value: 1168.98 and parameters: {'ema1_period': 23, 'ema2_period': 13}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:48,663] Trial 225 finished with value: 1168.98 and parameters: {'ema1_period': 24, 'ema2_period': 12}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:48,678] Trial 226 finished with value: 1010.38 and parameters: {'ema1_period': 25, 'ema2_period': 13}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:48,691] Trial 227 finished with value: 1096.78 and parameters: {'ema1_period': 22, 'ema2_period': 11}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:48,700] Trial 228 finished with value: 1129.28 and parameters: {'ema1_period': 24, 'ema2_period': 13}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:48,709] Trial 229 finished with value: 1100.68 and parameters: {'ema1_period': 23, 'ema2_period': 14}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:48,718] Trial 230 finished with value: 1148.18 and parameters: {'ema1_period': 24, 'ema2_period': 11}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:48,727] Trial 231 finished with value: 1168.98 and parameters: {'ema1_period': 24, 'ema2_period': 12}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:48,736] Trial 232 finished with value: 1158.38 and parameters: {'ema1_period': 23, 'ema2_period': 12}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:48,744] Trial 233 finished with value: 1028.38 and parameters: {'ema1_period': 17, 'ema2_period': 13}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:48,758] Trial 234 finished with value: 1090.28 and parameters: {'ema1_period': 24, 'ema2_period': 14}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:48,773] Trial 235 finished with value: 1168.98 and parameters: {'ema1_period': 24, 'ema2_period': 12}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:48,786] Trial 236 finished with value: 1090.28 and parameters: {'ema1_period': 23, 'ema2_period': 15}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:48,796] Trial 237 finished with value: 1161.08 and parameters: {'ema1_period': 25, 'ema2_period': 12}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:48,805] Trial 238 finished with value: 1148.18 and parameters: {'ema1_period': 24, 'ema2_period': 11}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:48,814] Trial 239 finished with value: 826.18 and parameters: {'ema1_period': 10, 'ema2_period': 13}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:48,823] Trial 240 finished with value: 1128.28 and parameters: {'ema1_period': 23, 'ema2_period': 11}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:48,832] Trial 241 finished with value: 1168.98 and parameters: {'ema1_period': 23, 'ema2_period': 13}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:48,845] Trial 242 finished with value: 1168.98 and parameters: {'ema1_period': 23, 'ema2_period': 13}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:48,861] Trial 243 finished with value: 1158.38 and parameters: {'ema1_period': 23, 'ema2_period': 12}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:48,874] Trial 244 finished with value: 1158.88 and parameters: {'ema1_period': 22, 'ema2_period': 14}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:48,883] Trial 245 finished with value: 1168.98 and parameters: {'ema1_period': 24, 'ema2_period': 12}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:48,893] Trial 246 finished with value: 1129.28 and parameters: {'ema1_period': 24, 'ema2_period': 13}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:48,902] Trial 247 finished with value: 999.08 and parameters: {'ema1_period': 23, 'ema2_period': 21}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:48,912] Trial 248 finished with value: 1161.08 and parameters: {'ema1_period': 25, 'ema2_period': 12}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:48,921] Trial 249 finished with value: 1090.28 and parameters: {'ema1_period': 24, 'ema2_period': 14}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:48,931] Trial 250 finished with value: 1168.98 and parameters: {'ema1_period': 23, 'ema2_period': 13}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:48,942] Trial 251 finished with value: 1116.18 and parameters: {'ema1_period': 23, 'ema2_period': 10}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:48,956] Trial 252 finished with value: 1096.78 and parameters: {'ema1_period': 22, 'ema2_period': 11}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:48,972] Trial 253 finished with value: 1129.28 and parameters: {'ema1_period': 24, 'ema2_period': 13}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:48,987] Trial 254 finished with value: 1090.28 and parameters: {'ema1_period': 24, 'ema2_period': 14}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:48,999] Trial 255 finished with value: 1158.38 and parameters: {'ema1_period': 23, 'ema2_period': 12}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:49,011] Trial 256 finished with value: 1080.28 and parameters: {'ema1_period': 22, 'ema2_period': 15}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:49,021] Trial 257 finished with value: 1010.38 and parameters: {'ema1_period': 25, 'ema2_period': 13}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:49,030] Trial 258 finished with value: 1158.38 and parameters: {'ema1_period': 23, 'ema2_period': 12}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:49,041] Trial 259 finished with value: 1148.18 and parameters: {'ema1_period': 24, 'ema2_period': 11}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:49,051] Trial 260 finished with value: 913.38 and parameters: {'ema1_period': 7, 'ema2_period': 12}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:49,061] Trial 261 finished with value: 1100.68 and parameters: {'ema1_period': 23, 'ema2_period': 14}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:49,070] Trial 262 finished with value: 1118.38 and parameters: {'ema1_period': 24, 'ema2_period': 10}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:49,080] Trial 263 finished with value: 1010.38 and parameters: {'ema1_period': 25, 'ema2_period': 13}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:49,089] Trial 264 finished with value: 1148.18 and parameters: {'ema1_period': 24, 'ema2_period': 11}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:49,098] Trial 265 finished with value: 1168.98 and parameters: {'ema1_period': 23, 'ema2_period': 13}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:49,108] Trial 266 finished with value: 1059.98 and parameters: {'ema1_period': 24, 'ema2_period': 15}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:49,119] Trial 267 finished with value: 1158.38 and parameters: {'ema1_period': 23, 'ema2_period': 12}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:49,129] Trial 268 finished with value: 923.28 and parameters: {'ema1_period': 22, 'ema2_period': 32}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:49,138] Trial 269 finished with value: 1090.28 and parameters: {'ema1_period': 24, 'ema2_period': 14}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:49,148] Trial 270 finished with value: 1026.28 and parameters: {'ema1_period': 18, 'ema2_period': 13}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:49,157] Trial 271 finished with value: 1153.88 and parameters: {'ema1_period': 12, 'ema2_period': 11}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:49,167] Trial 272 finished with value: 1158.38 and parameters: {'ema1_period': 23, 'ema2_period': 12}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:49,176] Trial 273 finished with value: 1010.38 and parameters: {'ema1_period': 25, 'ema2_period': 13}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:49,186] Trial 274 finished with value: 1128.28 and parameters: {'ema1_period': 23, 'ema2_period': 11}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:49,196] Trial 275 finished with value: 1090.28 and parameters: {'ema1_period': 24, 'ema2_period': 14}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:49,206] Trial 276 finished with value: 1168.98 and parameters: {'ema1_period': 24, 'ema2_period': 12}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:49,217] Trial 277 finished with value: 941.28 and parameters: {'ema1_period': 23, 'ema2_period': 26}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:49,227] Trial 278 finished with value: 1158.88 and parameters: {'ema1_period': 22, 'ema2_period': 14}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:49,237] Trial 279 finished with value: 1158.38 and parameters: {'ema1_period': 23, 'ema2_period': 12}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:49,247] Trial 280 finished with value: 1059.98 and parameters: {'ema1_period': 24, 'ema2_period': 15}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:49,257] Trial 281 finished with value: 1116.18 and parameters: {'ema1_period': 23, 'ema2_period': 10}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:49,268] Trial 282 finished with value: 1148.48 and parameters: {'ema1_period': 22, 'ema2_period': 13}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:49,278] Trial 283 finished with value: 1148.18 and parameters: {'ema1_period': 24, 'ema2_period': 11}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:49,288] Trial 284 finished with value: 1161.08 and parameters: {'ema1_period': 25, 'ema2_period': 12}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:49,298] Trial 285 finished with value: 1168.98 and parameters: {'ema1_period': 23, 'ema2_period': 13}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:49,309] Trial 286 finished with value: 1129.28 and parameters: {'ema1_period': 24, 'ema2_period': 13}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:49,319] Trial 287 finished with value: 1096.68 and parameters: {'ema1_period': 21, 'ema2_period': 11}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:49,330] Trial 288 finished with value: 1158.38 and parameters: {'ema1_period': 23, 'ema2_period': 12}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:49,339] Trial 289 finished with value: 1148.48 and parameters: {'ema1_period': 22, 'ema2_period': 13}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:49,355] Trial 290 finished with value: 1090.28 and parameters: {'ema1_period': 24, 'ema2_period': 14}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:49,369] Trial 291 finished with value: 990.58 and parameters: {'ema1_period': 25, 'ema2_period': 16}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:49,380] Trial 292 finished with value: 1168.98 and parameters: {'ema1_period': 24, 'ema2_period': 12}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:49,390] Trial 293 finished with value: 1116.18 and parameters: {'ema1_period': 23, 'ema2_period': 10}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:49,401] Trial 294 finished with value: 1100.68 and parameters: {'ema1_period': 23, 'ema2_period': 14}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:49,412] Trial 295 finished with value: 1129.28 and parameters: {'ema1_period': 24, 'ema2_period': 13}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:49,421] Trial 296 finished with value: 883.28 and parameters: {'ema1_period': 25, 'ema2_period': 29}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:49,431] Trial 297 finished with value: 1128.28 and parameters: {'ema1_period': 23, 'ema2_period': 11}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:49,440] Trial 298 finished with value: 1168.98 and parameters: {'ema1_period': 24, 'ema2_period': 12}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:49,450] Trial 299 finished with value: 1080.28 and parameters: {'ema1_period': 22, 'ema2_period': 15}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:49,459] Trial 300 finished with value: 1129.28 and parameters: {'ema1_period': 24, 'ema2_period': 13}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:49,469] Trial 301 finished with value: 1128.28 and parameters: {'ema1_period': 23, 'ema2_period': 11}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:49,479] Trial 302 finished with value: 1090.28 and parameters: {'ema1_period': 24, 'ema2_period': 14}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:49,490] Trial 303 finished with value: 1158.38 and parameters: {'ema1_period': 23, 'ema2_period': 12}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:49,500] Trial 304 finished with value: 1148.48 and parameters: {'ema1_period': 22, 'ema2_period': 13}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:49,511] Trial 305 finished with value: 1080.18 and parameters: {'ema1_period': 25, 'ema2_period': 14}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:49,520] Trial 306 finished with value: 1158.38 and parameters: {'ema1_period': 23, 'ema2_period': 12}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:49,530] Trial 307 finished with value: 1128.28 and parameters: {'ema1_period': 24, 'ema2_period': 23}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:49,540] Trial 308 finished with value: 1039.58 and parameters: {'ema1_period': 15, 'ema2_period': 12}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:49,550] Trial 309 finished with value: 1128.28 and parameters: {'ema1_period': 23, 'ema2_period': 11}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:49,559] Trial 310 finished with value: 1118.38 and parameters: {'ema1_period': 24, 'ema2_period': 10}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:49,569] Trial 311 finished with value: 1129.28 and parameters: {'ema1_period': 24, 'ema2_period': 13}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:49,582] Trial 312 finished with value: 1090.28 and parameters: {'ema1_period': 23, 'ema2_period': 15}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:49,600] Trial 313 finished with value: 1090.28 and parameters: {'ema1_period': 24, 'ema2_period': 14}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:49,618] Trial 314 finished with value: 892.98 and parameters: {'ema1_period': 22, 'ema2_period': 36}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:49,631] Trial 315 finished with value: 1097.08 and parameters: {'ema1_period': 21, 'ema2_period': 12}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:49,642] Trial 316 finished with value: 1010.38 and parameters: {'ema1_period': 25, 'ema2_period': 13}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:49,653] Trial 317 finished with value: 1168.98 and parameters: {'ema1_period': 23, 'ema2_period': 13}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:49,663] Trial 318 finished with value: 1148.18 and parameters: {'ema1_period': 24, 'ema2_period': 11}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:49,673] Trial 319 finished with value: 1006.38 and parameters: {'ema1_period': 19, 'ema2_period': 12}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:49,683] Trial 320 finished with value: 1100.68 and parameters: {'ema1_period': 23, 'ema2_period': 14}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:49,696] Trial 321 finished with value: 1016.88 and parameters: {'ema1_period': 24, 'ema2_period': 45}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:49,713] Trial 322 finished with value: 1160.28 and parameters: {'ema1_period': 25, 'ema2_period': 11}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:49,727] Trial 323 finished with value: 1080.28 and parameters: {'ema1_period': 22, 'ema2_period': 15}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:49,737] Trial 324 finished with value: 836.38 and parameters: {'ema1_period': 11, 'ema2_period': 13}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:49,747] Trial 325 finished with value: 1017.68 and parameters: {'ema1_period': 20, 'ema2_period': 10}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:49,758] Trial 326 finished with value: 919.38 and parameters: {'ema1_period': 23, 'ema2_period': 19}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:49,768] Trial 327 finished with value: 1168.98 and parameters: {'ema1_period': 24, 'ema2_period': 12}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:49,779] Trial 328 finished with value: 880.68 and parameters: {'ema1_period': 5, 'ema2_period': 14}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:49,796] Trial 329 finished with value: 1168.98 and parameters: {'ema1_period': 23, 'ema2_period': 13}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:49,813] Trial 330 finished with value: 1148.18 and parameters: {'ema1_period': 24, 'ema2_period': 11}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:49,823] Trial 331 finished with value: 1161.08 and parameters: {'ema1_period': 25, 'ema2_period': 12}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:49,833] Trial 332 finished with value: 1168.98 and parameters: {'ema1_period': 23, 'ema2_period': 13}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:49,843] Trial 333 finished with value: 1158.38 and parameters: {'ema1_period': 23, 'ema2_period': 12}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:49,853] Trial 334 finished with value: 1090.28 and parameters: {'ema1_period': 24, 'ema2_period': 14}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:49,864] Trial 335 finished with value: 1096.78 and parameters: {'ema1_period': 22, 'ema2_period': 11}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:49,879] Trial 336 finished with value: 1129.28 and parameters: {'ema1_period': 24, 'ema2_period': 13}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:49,895] Trial 337 finished with value: 1168.98 and parameters: {'ema1_period': 24, 'ema2_period': 12}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:49,909] Trial 338 finished with value: 1128.28 and parameters: {'ema1_period': 23, 'ema2_period': 11}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:49,919] Trial 339 finished with value: 1020.38 and parameters: {'ema1_period': 25, 'ema2_period': 15}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:49,931] Trial 340 finished with value: 1158.88 and parameters: {'ema1_period': 22, 'ema2_period': 14}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:49,943] Trial 341 finished with value: 1168.98 and parameters: {'ema1_period': 23, 'ema2_period': 13}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:49,954] Trial 342 finished with value: 1168.98 and parameters: {'ema1_period': 24, 'ema2_period': 12}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:49,966] Trial 343 finished with value: 1116.18 and parameters: {'ema1_period': 23, 'ema2_period': 10}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:49,978] Trial 344 finished with value: 1020.08 and parameters: {'ema1_period': 24, 'ema2_period': 16}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:49,990] Trial 345 finished with value: 1168.28 and parameters: {'ema1_period': 22, 'ema2_period': 12}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:50,002] Trial 346 finished with value: 1000.0 and parameters: {'ema1_period': 13, 'ema2_period': 13}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:50,012] Trial 347 finished with value: 1100.68 and parameters: {'ema1_period': 23, 'ema2_period': 14}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:50,023] Trial 348 finished with value: 971.18 and parameters: {'ema1_period': 24, 'ema2_period': 40}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:50,033] Trial 349 finished with value: 1158.38 and parameters: {'ema1_period': 23, 'ema2_period': 12}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:50,044] Trial 350 finished with value: 1160.28 and parameters: {'ema1_period': 25, 'ema2_period': 11}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:50,055] Trial 351 finished with value: 1129.28 and parameters: {'ema1_period': 24, 'ema2_period': 13}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:50,067] Trial 352 finished with value: 1100.68 and parameters: {'ema1_period': 23, 'ema2_period': 14}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:50,085] Trial 353 finished with value: 1059.98 and parameters: {'ema1_period': 24, 'ema2_period': 15}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:50,100] Trial 354 finished with value: 1158.38 and parameters: {'ema1_period': 23, 'ema2_period': 12}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:50,111] Trial 355 finished with value: 1118.38 and parameters: {'ema1_period': 24, 'ema2_period': 10}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:50,122] Trial 356 finished with value: 1007.38 and parameters: {'ema1_period': 16, 'ema2_period': 13}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:50,133] Trial 357 finished with value: 1059.08 and parameters: {'ema1_period': 17, 'ema2_period': 11}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:50,143] Trial 358 finished with value: 1161.08 and parameters: {'ema1_period': 25, 'ema2_period': 12}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:50,157] Trial 359 finished with value: 1168.98 and parameters: {'ema1_period': 23, 'ema2_period': 13}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:50,174] Trial 360 finished with value: 1090.28 and parameters: {'ema1_period': 24, 'ema2_period': 14}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:50,190] Trial 361 finished with value: 1096.78 and parameters: {'ema1_period': 22, 'ema2_period': 11}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:50,201] Trial 362 finished with value: 1158.38 and parameters: {'ema1_period': 23, 'ema2_period': 12}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:50,212] Trial 363 finished with value: 1129.28 and parameters: {'ema1_period': 24, 'ema2_period': 13}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:50,222] Trial 364 finished with value: 1090.28 and parameters: {'ema1_period': 24, 'ema2_period': 14}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:50,233] Trial 365 finished with value: 1096.78 and parameters: {'ema1_period': 22, 'ema2_period': 11}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:50,247] Trial 366 finished with value: 1010.38 and parameters: {'ema1_period': 25, 'ema2_period': 13}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:50,265] Trial 367 finished with value: 959.08 and parameters: {'ema1_period': 23, 'ema2_period': 20}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:50,280] Trial 368 finished with value: 1158.38 and parameters: {'ema1_period': 23, 'ema2_period': 12}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:50,291] Trial 369 finished with value: 1059.98 and parameters: {'ema1_period': 24, 'ema2_period': 15}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:50,302] Trial 370 finished with value: 1069.98 and parameters: {'ema1_period': 23, 'ema2_period': 16}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:50,314] Trial 371 finished with value: 1118.38 and parameters: {'ema1_period': 24, 'ema2_period': 10}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:50,326] Trial 372 finished with value: 1168.28 and parameters: {'ema1_period': 22, 'ema2_period': 12}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:50,343] Trial 373 finished with value: 1100.68 and parameters: {'ema1_period': 23, 'ema2_period': 14}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:50,362] Trial 374 finished with value: 1158.28 and parameters: {'ema1_period': 21, 'ema2_period': 13}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:50,377] Trial 375 finished with value: 1161.08 and parameters: {'ema1_period': 25, 'ema2_period': 12}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:50,392] Trial 376 finished with value: 1129.28 and parameters: {'ema1_period': 24, 'ema2_period': 13}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:50,404] Trial 377 finished with value: 1128.28 and parameters: {'ema1_period': 23, 'ema2_period': 11}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:50,416] Trial 378 finished with value: 1080.18 and parameters: {'ema1_period': 25, 'ema2_period': 14}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:50,428] Trial 379 finished with value: 830.18 and parameters: {'ema1_period': 9, 'ema2_period': 12}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:50,442] Trial 380 finished with value: 1129.28 and parameters: {'ema1_period': 24, 'ema2_period': 13}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:50,460] Trial 381 finished with value: 1128.28 and parameters: {'ema1_period': 23, 'ema2_period': 11}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:50,471] Trial 382 finished with value: 1090.28 and parameters: {'ema1_period': 23, 'ema2_period': 15}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:50,482] Trial 383 finished with value: 1148.48 and parameters: {'ema1_period': 22, 'ema2_period': 13}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:50,496] Trial 384 finished with value: 1168.98 and parameters: {'ema1_period': 24, 'ema2_period': 12}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:50,507] Trial 385 finished with value: 1118.38 and parameters: {'ema1_period': 24, 'ema2_period': 10}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:50,519] Trial 386 finished with value: 1010.68 and parameters: {'ema1_period': 23, 'ema2_period': 44}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:50,532] Trial 387 finished with value: 1080.18 and parameters: {'ema1_period': 25, 'ema2_period': 14}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:50,544] Trial 388 finished with value: 1006.88 and parameters: {'ema1_period': 24, 'ema2_period': 48}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:50,555] Trial 389 finished with value: 1128.28 and parameters: {'ema1_period': 23, 'ema2_period': 11}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:50,567] Trial 390 finished with value: 1129.28 and parameters: {'ema1_period': 24, 'ema2_period': 13}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:50,578] Trial 391 finished with value: 1168.28 and parameters: {'ema1_period': 22, 'ema2_period': 12}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:50,589] Trial 392 finished with value: 1100.68 and parameters: {'ema1_period': 23, 'ema2_period': 14}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:50,600] Trial 393 finished with value: 941.28 and parameters: {'ema1_period': 24, 'ema2_period': 25}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:50,612] Trial 394 finished with value: 1168.98 and parameters: {'ema1_period': 23, 'ema2_period': 13}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:50,625] Trial 395 finished with value: 874.88 and parameters: {'ema1_period': 22, 'ema2_period': 33}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:50,637] Trial 396 finished with value: 1148.18 and parameters: {'ema1_period': 24, 'ema2_period': 11}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:50,649] Trial 397 finished with value: 1059.98 and parameters: {'ema1_period': 24, 'ema2_period': 15}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:50,660] Trial 398 finished with value: 1161.08 and parameters: {'ema1_period': 25, 'ema2_period': 12}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:50,672] Trial 399 finished with value: 1158.38 and parameters: {'ema1_period': 23, 'ema2_period': 12}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:50,683] Trial 400 finished with value: 1148.18 and parameters: {'ema1_period': 24, 'ema2_period': 11}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:50,697] Trial 401 finished with value: 1168.98 and parameters: {'ema1_period': 23, 'ema2_period': 13}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:50,713] Trial 402 finished with value: 1100.68 and parameters: {'ema1_period': 23, 'ema2_period': 14}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:50,725] Trial 403 finished with value: 1161.08 and parameters: {'ema1_period': 25, 'ema2_period': 12}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:50,737] Trial 404 finished with value: 1116.18 and parameters: {'ema1_period': 23, 'ema2_period': 10}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:50,749] Trial 405 finished with value: 1129.28 and parameters: {'ema1_period': 24, 'ema2_period': 13}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:50,763] Trial 406 finished with value: 1096.78 and parameters: {'ema1_period': 22, 'ema2_period': 11}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:50,777] Trial 407 finished with value: 1090.28 and parameters: {'ema1_period': 24, 'ema2_period': 14}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:50,789] Trial 408 finished with value: 1069.98 and parameters: {'ema1_period': 23, 'ema2_period': 16}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:50,804] Trial 409 finished with value: 1006.38 and parameters: {'ema1_period': 19, 'ema2_period': 12}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:50,822] Trial 410 finished with value: 1010.38 and parameters: {'ema1_period': 25, 'ema2_period': 13}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:50,838] Trial 411 finished with value: 1090.28 and parameters: {'ema1_period': 24, 'ema2_period': 14}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:50,849] Trial 412 finished with value: 1168.28 and parameters: {'ema1_period': 22, 'ema2_period': 12}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:50,860] Trial 413 finished with value: 1148.18 and parameters: {'ema1_period': 24, 'ema2_period': 11}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:50,872] Trial 414 finished with value: 1168.98 and parameters: {'ema1_period': 23, 'ema2_period': 13}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:50,883] Trial 415 finished with value: 1038.88 and parameters: {'ema1_period': 23, 'ema2_period': 22}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:50,897] Trial 416 finished with value: 1168.98 and parameters: {'ema1_period': 24, 'ema2_period': 12}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:50,915] Trial 417 finished with value: 1090.28 and parameters: {'ema1_period': 23, 'ema2_period': 15}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:50,932] Trial 418 finished with value: 1010.38 and parameters: {'ema1_period': 25, 'ema2_period': 13}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:50,944] Trial 419 finished with value: 1090.28 and parameters: {'ema1_period': 24, 'ema2_period': 14}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:50,955] Trial 420 finished with value: 1148.48 and parameters: {'ema1_period': 22, 'ema2_period': 13}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:50,966] Trial 421 finished with value: 1116.18 and parameters: {'ema1_period': 23, 'ema2_period': 10}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:50,978] Trial 422 finished with value: 1168.98 and parameters: {'ema1_period': 24, 'ema2_period': 12}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:50,994] Trial 423 finished with value: 1128.28 and parameters: {'ema1_period': 23, 'ema2_period': 11}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:51,013] Trial 424 finished with value: 1168.98 and parameters: {'ema1_period': 24, 'ema2_period': 12}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:51,027] Trial 425 finished with value: 1100.68 and parameters: {'ema1_period': 23, 'ema2_period': 14}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:51,039] Trial 426 finished with value: 1160.28 and parameters: {'ema1_period': 25, 'ema2_period': 11}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:51,051] Trial 427 finished with value: 1026.28 and parameters: {'ema1_period': 18, 'ema2_period': 13}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:51,062] Trial 428 finished with value: 1070.08 and parameters: {'ema1_period': 22, 'ema2_period': 17}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:51,079] Trial 429 finished with value: 1168.98 and parameters: {'ema1_period': 24, 'ema2_period': 12}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:51,096] Trial 430 finished with value: 1168.98 and parameters: {'ema1_period': 23, 'ema2_period': 13}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:51,110] Trial 431 finished with value: 1059.98 and parameters: {'ema1_period': 24, 'ema2_period': 15}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:51,123] Trial 432 finished with value: 1128.28 and parameters: {'ema1_period': 23, 'ema2_period': 11}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:51,138] Trial 433 finished with value: 1129.28 and parameters: {'ema1_period': 24, 'ema2_period': 13}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:51,151] Trial 434 finished with value: 1080.18 and parameters: {'ema1_period': 25, 'ema2_period': 14}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:51,163] Trial 435 finished with value: 1168.28 and parameters: {'ema1_period': 22, 'ema2_period': 12}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:51,179] Trial 436 finished with value: 1128.28 and parameters: {'ema1_period': 23, 'ema2_period': 11}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:51,195] Trial 437 finished with value: 1007.98 and parameters: {'ema1_period': 21, 'ema2_period': 10}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:51,208] Trial 438 finished with value: 1168.98 and parameters: {'ema1_period': 23, 'ema2_period': 13}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:51,221] Trial 439 finished with value: 931.48 and parameters: {'ema1_period': 24, 'ema2_period': 38}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:51,233] Trial 440 finished with value: 1168.98 and parameters: {'ema1_period': 24, 'ema2_period': 12}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:51,244] Trial 441 finished with value: 1080.28 and parameters: {'ema1_period': 22, 'ema2_period': 15}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:51,256] Trial 442 finished with value: 1100.68 and parameters: {'ema1_period': 23, 'ema2_period': 14}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:51,268] Trial 443 finished with value: 981.38 and parameters: {'ema1_period': 24, 'ema2_period': 27}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:51,282] Trial 444 finished with value: 1010.38 and parameters: {'ema1_period': 25, 'ema2_period': 13}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:51,299] Trial 445 finished with value: 1158.38 and parameters: {'ema1_period': 23, 'ema2_period': 12}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:51,312] Trial 446 finished with value: 1090.28 and parameters: {'ema1_period': 24, 'ema2_period': 14}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:51,324] Trial 447 finished with value: 1128.28 and parameters: {'ema1_period': 23, 'ema2_period': 11}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:51,336] Trial 448 finished with value: 1168.98 and parameters: {'ema1_period': 24, 'ema2_period': 12}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:51,348] Trial 449 finished with value: 1010.38 and parameters: {'ema1_period': 25, 'ema2_period': 13}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:51,361] Trial 450 finished with value: 1090.28 and parameters: {'ema1_period': 24, 'ema2_period': 14}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:51,373] Trial 451 finished with value: 1168.28 and parameters: {'ema1_period': 22, 'ema2_period': 12}. Best is trial 25 with value: 1168.98.\n[I 2024-06-15 07:40:51,385] Trial 452 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:51,397] Trial 453 finished with value: 1153.78 and parameters: {'ema1_period': 13, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:51,409] Trial 454 finished with value: 1129.58 and parameters: {'ema1_period': 25, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:51,424] Trial 455 finished with value: 1120.48 and parameters: {'ema1_period': 15, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:51,439] Trial 456 finished with value: 1163.58 and parameters: {'ema1_period': 13, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:51,452] Trial 457 finished with value: 1170.48 and parameters: {'ema1_period': 14, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:51,468] Trial 458 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:51,480] Trial 459 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:51,492] Trial 460 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:51,505] Trial 461 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:51,520] Trial 462 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:51,534] Trial 463 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:51,547] Trial 464 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:51,559] Trial 465 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:51,571] Trial 466 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:51,584] Trial 467 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:51,596] Trial 468 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:51,610] Trial 469 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:51,629] Trial 470 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:51,644] Trial 471 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:51,656] Trial 472 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:51,669] Trial 473 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:51,681] Trial 474 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:51,693] Trial 475 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:51,714] Trial 476 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:51,732] Trial 477 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:51,745] Trial 478 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:51,757] Trial 479 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:51,771] Trial 480 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:51,786] Trial 481 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:51,806] Trial 482 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:51,825] Trial 483 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:51,840] Trial 484 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:51,852] Trial 485 finished with value: 1120.48 and parameters: {'ema1_period': 15, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:51,864] Trial 486 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:51,876] Trial 487 finished with value: 1153.78 and parameters: {'ema1_period': 13, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:51,891] Trial 488 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:51,912] Trial 489 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:51,927] Trial 490 finished with value: 1120.48 and parameters: {'ema1_period': 15, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:51,939] Trial 491 finished with value: 1153.78 and parameters: {'ema1_period': 13, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:51,952] Trial 492 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:51,964] Trial 493 finished with value: 1120.48 and parameters: {'ema1_period': 15, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:51,981] Trial 494 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:52,000] Trial 495 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:52,015] Trial 496 finished with value: 1153.78 and parameters: {'ema1_period': 13, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:52,027] Trial 497 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:52,039] Trial 498 finished with value: 1120.48 and parameters: {'ema1_period': 15, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:52,052] Trial 499 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:52,067] Trial 500 finished with value: 1153.78 and parameters: {'ema1_period': 13, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:52,087] Trial 501 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:52,105] Trial 502 finished with value: 1120.48 and parameters: {'ema1_period': 15, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:52,118] Trial 503 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:52,130] Trial 504 finished with value: 1120.48 and parameters: {'ema1_period': 15, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:52,143] Trial 505 finished with value: 1153.78 and parameters: {'ema1_period': 13, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:52,156] Trial 506 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:52,171] Trial 507 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:52,184] Trial 508 finished with value: 1153.78 and parameters: {'ema1_period': 13, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:52,197] Trial 509 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:52,210] Trial 510 finished with value: 1120.48 and parameters: {'ema1_period': 15, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:52,224] Trial 511 finished with value: 1153.78 and parameters: {'ema1_period': 13, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:52,237] Trial 512 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:52,252] Trial 513 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:52,266] Trial 514 finished with value: 1120.48 and parameters: {'ema1_period': 15, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:52,280] Trial 515 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:52,293] Trial 516 finished with value: 1153.78 and parameters: {'ema1_period': 13, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:52,306] Trial 517 finished with value: 1170.48 and parameters: {'ema1_period': 14, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:52,318] Trial 518 finished with value: 1120.48 and parameters: {'ema1_period': 15, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:52,331] Trial 519 finished with value: 1170.48 and parameters: {'ema1_period': 14, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:52,346] Trial 520 finished with value: 1039.58 and parameters: {'ema1_period': 16, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:52,360] Trial 521 finished with value: 1153.78 and parameters: {'ema1_period': 13, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:52,373] Trial 522 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:52,386] Trial 523 finished with value: 1170.48 and parameters: {'ema1_period': 14, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:52,403] Trial 524 finished with value: 1120.48 and parameters: {'ema1_period': 15, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:52,416] Trial 525 finished with value: 1163.58 and parameters: {'ema1_period': 13, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:52,430] Trial 526 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:52,444] Trial 527 finished with value: 1170.48 and parameters: {'ema1_period': 14, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:52,462] Trial 528 finished with value: 1120.48 and parameters: {'ema1_period': 15, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:52,476] Trial 529 finished with value: 1163.58 and parameters: {'ema1_period': 13, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:52,490] Trial 530 finished with value: 1139.08 and parameters: {'ema1_period': 12, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:52,503] Trial 531 finished with value: 1170.48 and parameters: {'ema1_period': 14, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:52,521] Trial 532 finished with value: 1120.48 and parameters: {'ema1_period': 15, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:52,538] Trial 533 finished with value: 1170.48 and parameters: {'ema1_period': 14, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:52,555] Trial 534 finished with value: 1153.78 and parameters: {'ema1_period': 13, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:52,568] Trial 535 finished with value: 1170.48 and parameters: {'ema1_period': 14, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:52,581] Trial 536 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:52,594] Trial 537 finished with value: 1139.08 and parameters: {'ema1_period': 12, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:52,608] Trial 538 finished with value: 1080.48 and parameters: {'ema1_period': 15, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:52,624] Trial 539 finished with value: 1153.78 and parameters: {'ema1_period': 13, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:52,638] Trial 540 finished with value: 1170.48 and parameters: {'ema1_period': 14, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:52,651] Trial 541 finished with value: 1080.48 and parameters: {'ema1_period': 15, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:52,664] Trial 542 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:52,677] Trial 543 finished with value: 1153.78 and parameters: {'ema1_period': 13, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:52,690] Trial 544 finished with value: 1170.48 and parameters: {'ema1_period': 14, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:52,705] Trial 545 finished with value: 1120.48 and parameters: {'ema1_period': 15, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:52,727] Trial 546 finished with value: 1039.58 and parameters: {'ema1_period': 16, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:52,744] Trial 547 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:52,757] Trial 548 finished with value: 1153.78 and parameters: {'ema1_period': 13, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:52,770] Trial 549 finished with value: 1170.48 and parameters: {'ema1_period': 14, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:52,784] Trial 550 finished with value: 1170.48 and parameters: {'ema1_period': 14, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:52,802] Trial 551 finished with value: 1120.48 and parameters: {'ema1_period': 15, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:52,821] Trial 552 finished with value: 1153.78 and parameters: {'ema1_period': 13, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:52,839] Trial 553 finished with value: 1170.48 and parameters: {'ema1_period': 14, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:52,853] Trial 554 finished with value: 1120.48 and parameters: {'ema1_period': 15, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:52,866] Trial 555 finished with value: 1170.48 and parameters: {'ema1_period': 14, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:52,880] Trial 556 finished with value: 1153.78 and parameters: {'ema1_period': 13, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:52,896] Trial 557 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:52,917] Trial 558 finished with value: 1170.48 and parameters: {'ema1_period': 14, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:52,935] Trial 559 finished with value: 1120.48 and parameters: {'ema1_period': 15, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:52,949] Trial 560 finished with value: 1163.58 and parameters: {'ema1_period': 13, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:52,964] Trial 561 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:52,979] Trial 562 finished with value: 1170.48 and parameters: {'ema1_period': 14, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:52,998] Trial 563 finished with value: 1120.48 and parameters: {'ema1_period': 15, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:53,017] Trial 564 finished with value: 1163.58 and parameters: {'ema1_period': 13, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:53,034] Trial 565 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:53,048] Trial 566 finished with value: 1080.48 and parameters: {'ema1_period': 15, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:53,064] Trial 567 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:53,079] Trial 568 finished with value: 1080.48 and parameters: {'ema1_period': 15, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:53,097] Trial 569 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:53,114] Trial 570 finished with value: 1163.58 and parameters: {'ema1_period': 13, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:53,135] Trial 571 finished with value: 1153.88 and parameters: {'ema1_period': 12, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:53,149] Trial 572 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:53,164] Trial 573 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:53,182] Trial 574 finished with value: 1153.78 and parameters: {'ema1_period': 13, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:53,201] Trial 575 finished with value: 1170.48 and parameters: {'ema1_period': 14, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:53,220] Trial 576 finished with value: 1080.48 and parameters: {'ema1_period': 15, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:53,237] Trial 577 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:53,252] Trial 578 finished with value: 1170.48 and parameters: {'ema1_period': 14, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:53,266] Trial 579 finished with value: 999.58 and parameters: {'ema1_period': 13, 'ema2_period': 31}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:53,282] Trial 580 finished with value: 1120.48 and parameters: {'ema1_period': 15, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:53,304] Trial 581 finished with value: 1153.78 and parameters: {'ema1_period': 13, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:53,322] Trial 582 finished with value: 1170.48 and parameters: {'ema1_period': 14, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:53,336] Trial 583 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:53,350] Trial 584 finished with value: 913.48 and parameters: {'ema1_period': 16, 'ema2_period': 43}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:53,366] Trial 585 finished with value: 1120.48 and parameters: {'ema1_period': 15, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:53,386] Trial 586 finished with value: 1170.48 and parameters: {'ema1_period': 14, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:53,408] Trial 587 finished with value: 1163.58 and parameters: {'ema1_period': 13, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:53,422] Trial 588 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:53,438] Trial 589 finished with value: 1170.48 and parameters: {'ema1_period': 14, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:53,453] Trial 590 finished with value: 1120.48 and parameters: {'ema1_period': 15, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:53,471] Trial 591 finished with value: 1153.78 and parameters: {'ema1_period': 13, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:53,494] Trial 592 finished with value: 1170.48 and parameters: {'ema1_period': 14, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:53,701] Trial 593 finished with value: 951.68 and parameters: {'ema1_period': 14, 'ema2_period': 50}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:53,717] Trial 594 finished with value: 1080.48 and parameters: {'ema1_period': 15, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:53,731] Trial 595 finished with value: 1153.78 and parameters: {'ema1_period': 13, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:53,753] Trial 596 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:53,771] Trial 597 finished with value: 1080.48 and parameters: {'ema1_period': 15, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:53,784] Trial 598 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:53,797] Trial 599 finished with value: 1153.88 and parameters: {'ema1_period': 12, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:53,810] Trial 600 finished with value: 1153.78 and parameters: {'ema1_period': 13, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:53,828] Trial 601 finished with value: 1170.48 and parameters: {'ema1_period': 14, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:53,848] Trial 602 finished with value: 1120.48 and parameters: {'ema1_period': 15, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:53,863] Trial 603 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:53,880] Trial 604 finished with value: 1163.58 and parameters: {'ema1_period': 13, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:53,894] Trial 605 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:53,908] Trial 606 finished with value: 971.28 and parameters: {'ema1_period': 15, 'ema2_period': 35}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:53,927] Trial 607 finished with value: 1039.58 and parameters: {'ema1_period': 16, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:53,950] Trial 608 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:53,964] Trial 609 finished with value: 1163.58 and parameters: {'ema1_period': 13, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:53,977] Trial 610 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:53,990] Trial 611 finished with value: 1080.48 and parameters: {'ema1_period': 15, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:54,004] Trial 612 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:54,027] Trial 613 finished with value: 1163.58 and parameters: {'ema1_period': 13, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:54,045] Trial 614 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:54,058] Trial 615 finished with value: 1080.48 and parameters: {'ema1_period': 15, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:54,071] Trial 616 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:54,084] Trial 617 finished with value: 1163.58 and parameters: {'ema1_period': 13, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:54,104] Trial 618 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:54,130] Trial 619 finished with value: 1120.48 and parameters: {'ema1_period': 15, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:54,147] Trial 620 finished with value: 1170.48 and parameters: {'ema1_period': 14, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:54,162] Trial 621 finished with value: 1163.58 and parameters: {'ema1_period': 13, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:54,178] Trial 622 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:54,194] Trial 623 finished with value: 1120.48 and parameters: {'ema1_period': 15, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:54,218] Trial 624 finished with value: 1170.48 and parameters: {'ema1_period': 14, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:54,235] Trial 625 finished with value: 1153.78 and parameters: {'ema1_period': 13, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:54,249] Trial 626 finished with value: 1170.48 and parameters: {'ema1_period': 14, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:54,263] Trial 627 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:54,276] Trial 628 finished with value: 1120.48 and parameters: {'ema1_period': 15, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:54,296] Trial 629 finished with value: 1163.58 and parameters: {'ema1_period': 13, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:54,318] Trial 630 finished with value: 1170.48 and parameters: {'ema1_period': 14, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:54,332] Trial 631 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:54,346] Trial 632 finished with value: 970.58 and parameters: {'ema1_period': 15, 'ema2_period': 29}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:54,359] Trial 633 finished with value: 1153.78 and parameters: {'ema1_period': 13, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:54,373] Trial 634 finished with value: 1170.48 and parameters: {'ema1_period': 14, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:54,389] Trial 635 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:54,405] Trial 636 finished with value: 1080.48 and parameters: {'ema1_period': 15, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:54,420] Trial 637 finished with value: 1153.78 and parameters: {'ema1_period': 13, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:54,434] Trial 638 finished with value: 1170.48 and parameters: {'ema1_period': 14, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:54,449] Trial 639 finished with value: 1120.48 and parameters: {'ema1_period': 15, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:54,467] Trial 640 finished with value: 831.68 and parameters: {'ema1_period': 14, 'ema2_period': 20}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:54,483] Trial 641 finished with value: 1153.88 and parameters: {'ema1_period': 12, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:54,499] Trial 642 finished with value: 1140.58 and parameters: {'ema1_period': 16, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:54,513] Trial 643 finished with value: 1153.78 and parameters: {'ema1_period': 13, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:54,526] Trial 644 finished with value: 1170.48 and parameters: {'ema1_period': 14, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:54,540] Trial 645 finished with value: 1120.48 and parameters: {'ema1_period': 15, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:54,554] Trial 646 finished with value: 1170.48 and parameters: {'ema1_period': 14, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:54,569] Trial 647 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:54,584] Trial 648 finished with value: 1163.58 and parameters: {'ema1_period': 13, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:54,599] Trial 649 finished with value: 1170.48 and parameters: {'ema1_period': 14, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:54,612] Trial 650 finished with value: 1120.48 and parameters: {'ema1_period': 15, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:54,626] Trial 651 finished with value: 1170.48 and parameters: {'ema1_period': 14, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:54,640] Trial 652 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:54,655] Trial 653 finished with value: 1120.48 and parameters: {'ema1_period': 15, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:54,671] Trial 654 finished with value: 1163.58 and parameters: {'ema1_period': 13, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:54,686] Trial 655 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:54,700] Trial 656 finished with value: 1150.28 and parameters: {'ema1_period': 13, 'ema2_period': 12}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:54,716] Trial 657 finished with value: 1120.48 and parameters: {'ema1_period': 15, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:54,731] Trial 658 finished with value: 1170.48 and parameters: {'ema1_period': 14, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:54,748] Trial 659 finished with value: 1153.78 and parameters: {'ema1_period': 13, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:54,764] Trial 660 finished with value: 1170.48 and parameters: {'ema1_period': 14, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:54,780] Trial 661 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:54,801] Trial 662 finished with value: 931.88 and parameters: {'ema1_period': 15, 'ema2_period': 47}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:54,818] Trial 663 finished with value: 1150.28 and parameters: {'ema1_period': 13, 'ema2_period': 12}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:54,839] Trial 664 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:54,862] Trial 665 finished with value: 1170.48 and parameters: {'ema1_period': 14, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:54,878] Trial 666 finished with value: 959.98 and parameters: {'ema1_period': 15, 'ema2_period': 25}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:54,892] Trial 667 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:54,906] Trial 668 finished with value: 1163.58 and parameters: {'ema1_period': 13, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:54,921] Trial 669 finished with value: 879.28 and parameters: {'ema1_period': 14, 'ema2_period': 23}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:54,940] Trial 670 finished with value: 813.68 and parameters: {'ema1_period': 15, 'ema2_period': 18}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:54,964] Trial 671 finished with value: 1170.48 and parameters: {'ema1_period': 14, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:54,978] Trial 672 finished with value: 990.58 and parameters: {'ema1_period': 6, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:54,992] Trial 673 finished with value: 1150.28 and parameters: {'ema1_period': 13, 'ema2_period': 12}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:55,008] Trial 674 finished with value: 1120.48 and parameters: {'ema1_period': 15, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:55,023] Trial 675 finished with value: 1170.48 and parameters: {'ema1_period': 14, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:55,046] Trial 676 finished with value: 1000.0 and parameters: {'ema1_period': 12, 'ema2_period': 12}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:55,066] Trial 677 finished with value: 1153.78 and parameters: {'ema1_period': 13, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:55,080] Trial 678 finished with value: 1170.48 and parameters: {'ema1_period': 14, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:55,094] Trial 679 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:55,108] Trial 680 finished with value: 1080.48 and parameters: {'ema1_period': 15, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:55,127] Trial 681 finished with value: 974.08 and parameters: {'ema1_period': 14, 'ema2_period': 41}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:55,148] Trial 682 finished with value: 1153.78 and parameters: {'ema1_period': 13, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:55,163] Trial 683 finished with value: 1080.48 and parameters: {'ema1_period': 15, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:55,177] Trial 684 finished with value: 1060.38 and parameters: {'ema1_period': 14, 'ema2_period': 12}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:55,192] Trial 685 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:55,206] Trial 686 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:55,227] Trial 687 finished with value: 1163.58 and parameters: {'ema1_period': 13, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:55,247] Trial 688 finished with value: 1039.58 and parameters: {'ema1_period': 15, 'ema2_period': 12}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:55,262] Trial 689 finished with value: 1140.58 and parameters: {'ema1_period': 16, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:55,280] Trial 690 finished with value: 1153.78 and parameters: {'ema1_period': 13, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:55,296] Trial 691 finished with value: 1170.48 and parameters: {'ema1_period': 14, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:55,317] Trial 692 finished with value: 1060.38 and parameters: {'ema1_period': 14, 'ema2_period': 12}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:55,338] Trial 693 finished with value: 1170.48 and parameters: {'ema1_period': 14, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:55,352] Trial 694 finished with value: 1120.48 and parameters: {'ema1_period': 15, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:55,367] Trial 695 finished with value: 1153.78 and parameters: {'ema1_period': 13, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:55,381] Trial 696 finished with value: 1170.48 and parameters: {'ema1_period': 14, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:55,400] Trial 697 finished with value: 1120.48 and parameters: {'ema1_period': 15, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:55,423] Trial 698 finished with value: 1163.58 and parameters: {'ema1_period': 13, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:55,438] Trial 699 finished with value: 1060.38 and parameters: {'ema1_period': 14, 'ema2_period': 12}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:55,452] Trial 700 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:55,467] Trial 701 finished with value: 1120.48 and parameters: {'ema1_period': 15, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:55,486] Trial 702 finished with value: 1163.58 and parameters: {'ema1_period': 13, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:55,511] Trial 703 finished with value: 1060.38 and parameters: {'ema1_period': 14, 'ema2_period': 12}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:55,529] Trial 704 finished with value: 1170.48 and parameters: {'ema1_period': 14, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:55,546] Trial 705 finished with value: 1120.48 and parameters: {'ema1_period': 15, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:55,566] Trial 706 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:55,589] Trial 707 finished with value: 1163.58 and parameters: {'ema1_period': 13, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:55,606] Trial 708 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:55,624] Trial 709 finished with value: 1060.38 and parameters: {'ema1_period': 14, 'ema2_period': 12}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:55,638] Trial 710 finished with value: 1140.58 and parameters: {'ema1_period': 16, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:55,653] Trial 711 finished with value: 1080.48 and parameters: {'ema1_period': 15, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:55,669] Trial 712 finished with value: 1150.28 and parameters: {'ema1_period': 13, 'ema2_period': 12}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:55,694] Trial 713 finished with value: 1170.48 and parameters: {'ema1_period': 14, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:55,710] Trial 714 finished with value: 984.28 and parameters: {'ema1_period': 15, 'ema2_period': 39}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:55,725] Trial 715 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:55,739] Trial 716 finished with value: 1153.78 and parameters: {'ema1_period': 13, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:55,754] Trial 717 finished with value: 1170.48 and parameters: {'ema1_period': 14, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:55,769] Trial 718 finished with value: 1120.48 and parameters: {'ema1_period': 15, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:55,786] Trial 719 finished with value: 981.58 and parameters: {'ema1_period': 14, 'ema2_period': 33}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:55,803] Trial 720 finished with value: 1150.28 and parameters: {'ema1_period': 13, 'ema2_period': 12}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:55,818] Trial 721 finished with value: 1153.88 and parameters: {'ema1_period': 12, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:55,836] Trial 722 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:55,851] Trial 723 finished with value: 1019.28 and parameters: {'ema1_period': 14, 'ema2_period': 27}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:55,866] Trial 724 finished with value: 1080.48 and parameters: {'ema1_period': 15, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:55,888] Trial 725 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:55,909] Trial 726 finished with value: 851.48 and parameters: {'ema1_period': 13, 'ema2_period': 22}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:55,924] Trial 727 finished with value: 1060.38 and parameters: {'ema1_period': 14, 'ema2_period': 12}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:55,939] Trial 728 finished with value: 1153.78 and parameters: {'ema1_period': 13, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:55,953] Trial 729 finished with value: 971.08 and parameters: {'ema1_period': 15, 'ema2_period': 36}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:55,971] Trial 730 finished with value: 1170.48 and parameters: {'ema1_period': 14, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:55,996] Trial 731 finished with value: 1080.48 and parameters: {'ema1_period': 15, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:56,011] Trial 732 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:56,025] Trial 733 finished with value: 1153.78 and parameters: {'ema1_period': 13, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:56,040] Trial 734 finished with value: 1153.88 and parameters: {'ema1_period': 12, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:56,055] Trial 735 finished with value: 1060.38 and parameters: {'ema1_period': 14, 'ema2_period': 12}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:56,078] Trial 736 finished with value: 1120.48 and parameters: {'ema1_period': 15, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:56,101] Trial 737 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:56,116] Trial 738 finished with value: 1170.48 and parameters: {'ema1_period': 14, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:56,131] Trial 739 finished with value: 1150.28 and parameters: {'ema1_period': 13, 'ema2_period': 12}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:56,146] Trial 740 finished with value: 1170.48 and parameters: {'ema1_period': 14, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:56,163] Trial 741 finished with value: 1120.48 and parameters: {'ema1_period': 15, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:56,189] Trial 742 finished with value: 1163.58 and parameters: {'ema1_period': 13, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:56,205] Trial 743 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:56,222] Trial 744 finished with value: 1019.28 and parameters: {'ema1_period': 16, 'ema2_period': 12}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:56,240] Trial 745 finished with value: 1120.48 and parameters: {'ema1_period': 15, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:56,260] Trial 746 finished with value: 1170.48 and parameters: {'ema1_period': 14, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:56,284] Trial 747 finished with value: 1153.78 and parameters: {'ema1_period': 13, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:56,301] Trial 748 finished with value: 1060.38 and parameters: {'ema1_period': 14, 'ema2_period': 12}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:56,316] Trial 749 finished with value: 1170.48 and parameters: {'ema1_period': 14, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:56,331] Trial 750 finished with value: 1120.48 and parameters: {'ema1_period': 15, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:56,348] Trial 751 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:56,375] Trial 752 finished with value: 1163.58 and parameters: {'ema1_period': 13, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:56,393] Trial 753 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:56,408] Trial 754 finished with value: 813.68 and parameters: {'ema1_period': 15, 'ema2_period': 18}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:56,423] Trial 755 finished with value: 1163.58 and parameters: {'ema1_period': 13, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:56,438] Trial 756 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:56,463] Trial 757 finished with value: 1060.38 and parameters: {'ema1_period': 14, 'ema2_period': 12}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:56,482] Trial 758 finished with value: 1039.58 and parameters: {'ema1_period': 15, 'ema2_period': 12}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:56,497] Trial 759 finished with value: 1163.58 and parameters: {'ema1_period': 13, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:56,512] Trial 760 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:56,527] Trial 761 finished with value: 1170.48 and parameters: {'ema1_period': 14, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:56,549] Trial 762 finished with value: 1120.48 and parameters: {'ema1_period': 15, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:56,571] Trial 763 finished with value: 1060.38 and parameters: {'ema1_period': 14, 'ema2_period': 12}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:56,586] Trial 764 finished with value: 1163.58 and parameters: {'ema1_period': 13, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:56,601] Trial 765 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:56,616] Trial 766 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:56,636] Trial 767 finished with value: 1120.48 and parameters: {'ema1_period': 15, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:56,659] Trial 768 finished with value: 1163.58 and parameters: {'ema1_period': 13, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:56,678] Trial 769 finished with value: 1170.48 and parameters: {'ema1_period': 14, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:56,693] Trial 770 finished with value: 1120.48 and parameters: {'ema1_period': 15, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:56,708] Trial 771 finished with value: 1150.28 and parameters: {'ema1_period': 13, 'ema2_period': 12}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:56,723] Trial 772 finished with value: 1170.48 and parameters: {'ema1_period': 14, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:56,745] Trial 773 finished with value: 1120.48 and parameters: {'ema1_period': 15, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:56,769] Trial 774 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:56,784] Trial 775 finished with value: 1060.38 and parameters: {'ema1_period': 14, 'ema2_period': 12}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:56,799] Trial 776 finished with value: 1039.58 and parameters: {'ema1_period': 16, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:56,815] Trial 777 finished with value: 1019.18 and parameters: {'ema1_period': 12, 'ema2_period': 31}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:56,834] Trial 778 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:56,860] Trial 779 finished with value: 1153.78 and parameters: {'ema1_period': 13, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:56,875] Trial 780 finished with value: 1080.48 and parameters: {'ema1_period': 15, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:56,892] Trial 781 finished with value: 1170.48 and parameters: {'ema1_period': 14, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:56,913] Trial 782 finished with value: 1150.28 and parameters: {'ema1_period': 13, 'ema2_period': 12}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:56,937] Trial 783 finished with value: 1120.48 and parameters: {'ema1_period': 15, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:56,961] Trial 784 finished with value: 961.38 and parameters: {'ema1_period': 14, 'ema2_period': 47}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:56,977] Trial 785 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:56,994] Trial 786 finished with value: 1150.28 and parameters: {'ema1_period': 13, 'ema2_period': 12}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:57,010] Trial 787 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:57,036] Trial 788 finished with value: 1080.48 and parameters: {'ema1_period': 15, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:57,062] Trial 789 finished with value: 1163.58 and parameters: {'ema1_period': 13, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:57,079] Trial 790 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:57,096] Trial 791 finished with value: 1170.48 and parameters: {'ema1_period': 14, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:57,112] Trial 792 finished with value: 1120.48 and parameters: {'ema1_period': 15, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:57,135] Trial 793 finished with value: 1170.48 and parameters: {'ema1_period': 14, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:57,158] Trial 794 finished with value: 1153.78 and parameters: {'ema1_period': 13, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:57,175] Trial 795 finished with value: 1060.38 and parameters: {'ema1_period': 14, 'ema2_period': 12}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:57,191] Trial 796 finished with value: 1120.48 and parameters: {'ema1_period': 15, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:57,213] Trial 797 finished with value: 1170.48 and parameters: {'ema1_period': 14, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:57,236] Trial 798 finished with value: 1150.28 and parameters: {'ema1_period': 13, 'ema2_period': 12}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:57,253] Trial 799 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:57,269] Trial 800 finished with value: 1080.48 and parameters: {'ema1_period': 15, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:57,285] Trial 801 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:57,303] Trial 802 finished with value: 1163.58 and parameters: {'ema1_period': 13, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:57,328] Trial 803 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:57,346] Trial 804 finished with value: 1060.38 and parameters: {'ema1_period': 14, 'ema2_period': 12}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:57,362] Trial 805 finished with value: 1080.48 and parameters: {'ema1_period': 15, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:57,378] Trial 806 finished with value: 1139.08 and parameters: {'ema1_period': 12, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:57,394] Trial 807 finished with value: 1153.78 and parameters: {'ema1_period': 13, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:57,417] Trial 808 finished with value: 1060.38 and parameters: {'ema1_period': 14, 'ema2_period': 12}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:57,439] Trial 809 finished with value: 1000.0 and parameters: {'ema1_period': 11, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:57,457] Trial 810 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:57,473] Trial 811 finished with value: 1080.48 and parameters: {'ema1_period': 15, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:57,489] Trial 812 finished with value: 1163.58 and parameters: {'ema1_period': 13, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:57,505] Trial 813 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:57,521] Trial 814 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:57,548] Trial 815 finished with value: 1039.58 and parameters: {'ema1_period': 15, 'ema2_period': 12}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:57,566] Trial 816 finished with value: 1153.78 and parameters: {'ema1_period': 13, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:57,582] Trial 817 finished with value: 1170.48 and parameters: {'ema1_period': 14, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:57,598] Trial 818 finished with value: 950.28 and parameters: {'ema1_period': 14, 'ema2_period': 30}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:57,622] Trial 819 finished with value: 1120.48 and parameters: {'ema1_period': 15, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:57,643] Trial 820 finished with value: 1163.58 and parameters: {'ema1_period': 13, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:57,661] Trial 821 finished with value: 1060.38 and parameters: {'ema1_period': 14, 'ema2_period': 12}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:57,677] Trial 822 finished with value: 1120.48 and parameters: {'ema1_period': 15, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:57,693] Trial 823 finished with value: 1170.48 and parameters: {'ema1_period': 14, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:57,712] Trial 824 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:57,737] Trial 825 finished with value: 1150.28 and parameters: {'ema1_period': 13, 'ema2_period': 12}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:57,756] Trial 826 finished with value: 1140.58 and parameters: {'ema1_period': 16, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:57,772] Trial 827 finished with value: 1080.48 and parameters: {'ema1_period': 15, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:57,789] Trial 828 finished with value: 973.88 and parameters: {'ema1_period': 14, 'ema2_period': 42}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:57,805] Trial 829 finished with value: 1153.78 and parameters: {'ema1_period': 13, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:57,826] Trial 830 finished with value: 1170.48 and parameters: {'ema1_period': 14, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:57,856] Trial 831 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:57,874] Trial 832 finished with value: 1039.58 and parameters: {'ema1_period': 15, 'ema2_period': 12}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:57,892] Trial 833 finished with value: 901.88 and parameters: {'ema1_period': 9, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:57,910] Trial 834 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:57,934] Trial 835 finished with value: 1120.48 and parameters: {'ema1_period': 15, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:57,960] Trial 836 finished with value: 1163.58 and parameters: {'ema1_period': 13, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:57,978] Trial 837 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:57,996] Trial 838 finished with value: 1060.38 and parameters: {'ema1_period': 14, 'ema2_period': 12}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:58,012] Trial 839 finished with value: 1163.58 and parameters: {'ema1_period': 13, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:58,038] Trial 840 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:58,061] Trial 841 finished with value: 1039.58 and parameters: {'ema1_period': 15, 'ema2_period': 12}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:58,078] Trial 842 finished with value: 1163.58 and parameters: {'ema1_period': 13, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:58,095] Trial 843 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:58,112] Trial 844 finished with value: 1080.48 and parameters: {'ema1_period': 15, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:58,139] Trial 845 finished with value: 851.38 and parameters: {'ema1_period': 14, 'ema2_period': 21}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:58,161] Trial 846 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:58,178] Trial 847 finished with value: 1039.58 and parameters: {'ema1_period': 16, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:58,195] Trial 848 finished with value: 1150.28 and parameters: {'ema1_period': 13, 'ema2_period': 12}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:58,211] Trial 849 finished with value: 961.48 and parameters: {'ema1_period': 14, 'ema2_period': 34}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:58,237] Trial 850 finished with value: 1120.48 and parameters: {'ema1_period': 15, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:58,255] Trial 851 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:58,273] Trial 852 finished with value: 1163.58 and parameters: {'ema1_period': 13, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:58,290] Trial 853 finished with value: 990.58 and parameters: {'ema1_period': 6, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:58,307] Trial 854 finished with value: 1000.0 and parameters: {'ema1_period': 12, 'ema2_period': 12}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:58,325] Trial 855 finished with value: 1170.48 and parameters: {'ema1_period': 14, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:58,343] Trial 856 finished with value: 1120.48 and parameters: {'ema1_period': 15, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:58,362] Trial 857 finished with value: 1163.58 and parameters: {'ema1_period': 13, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:58,379] Trial 858 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:58,396] Trial 859 finished with value: 1060.38 and parameters: {'ema1_period': 14, 'ema2_period': 12}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:58,414] Trial 860 finished with value: 1120.48 and parameters: {'ema1_period': 15, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:58,433] Trial 861 finished with value: 863.38 and parameters: {'ema1_period': 13, 'ema2_period': 19}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:58,450] Trial 862 finished with value: 1170.48 and parameters: {'ema1_period': 14, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:58,469] Trial 863 finished with value: 1170.48 and parameters: {'ema1_period': 14, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:58,489] Trial 864 finished with value: 1120.48 and parameters: {'ema1_period': 15, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:58,509] Trial 865 finished with value: 1153.78 and parameters: {'ema1_period': 13, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:58,527] Trial 866 finished with value: 1060.38 and parameters: {'ema1_period': 14, 'ema2_period': 12}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:58,545] Trial 867 finished with value: 1080.48 and parameters: {'ema1_period': 15, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:58,572] Trial 868 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:58,595] Trial 869 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:58,613] Trial 870 finished with value: 1150.28 and parameters: {'ema1_period': 13, 'ema2_period': 12}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:58,644] Trial 871 finished with value: 1170.48 and parameters: {'ema1_period': 14, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:58,665] Trial 872 finished with value: 1120.48 and parameters: {'ema1_period': 15, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:58,683] Trial 873 finished with value: 930.88 and parameters: {'ema1_period': 14, 'ema2_period': 38}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:58,700] Trial 874 finished with value: 1000.18 and parameters: {'ema1_period': 13, 'ema2_period': 28}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:58,724] Trial 875 finished with value: 1170.48 and parameters: {'ema1_period': 14, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:58,747] Trial 876 finished with value: 960.08 and parameters: {'ema1_period': 14, 'ema2_period': 26}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:58,764] Trial 877 finished with value: 1120.48 and parameters: {'ema1_period': 15, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:58,781] Trial 878 finished with value: 920.48 and parameters: {'ema1_period': 7, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:58,802] Trial 879 finished with value: 1150.28 and parameters: {'ema1_period': 13, 'ema2_period': 12}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:58,827] Trial 880 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:58,844] Trial 881 finished with value: 1120.48 and parameters: {'ema1_period': 15, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:58,862] Trial 882 finished with value: 1163.58 and parameters: {'ema1_period': 13, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:58,878] Trial 883 finished with value: 1060.38 and parameters: {'ema1_period': 14, 'ema2_period': 12}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:58,902] Trial 884 finished with value: 966.68 and parameters: {'ema1_period': 14, 'ema2_period': 45}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:58,922] Trial 885 finished with value: 1120.48 and parameters: {'ema1_period': 15, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:58,940] Trial 886 finished with value: 1170.48 and parameters: {'ema1_period': 14, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:58,957] Trial 887 finished with value: 1153.78 and parameters: {'ema1_period': 13, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:58,977] Trial 888 finished with value: 1060.38 and parameters: {'ema1_period': 14, 'ema2_period': 12}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:59,004] Trial 889 finished with value: 1080.48 and parameters: {'ema1_period': 15, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:59,022] Trial 890 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:59,040] Trial 891 finished with value: 1139.08 and parameters: {'ema1_period': 12, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:59,058] Trial 892 finished with value: 1163.58 and parameters: {'ema1_period': 13, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:59,086] Trial 893 finished with value: 1039.58 and parameters: {'ema1_period': 16, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:59,106] Trial 894 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:59,125] Trial 895 finished with value: 1060.38 and parameters: {'ema1_period': 14, 'ema2_period': 12}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:59,144] Trial 896 finished with value: 1153.78 and parameters: {'ema1_period': 13, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:59,173] Trial 897 finished with value: 1080.48 and parameters: {'ema1_period': 15, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:59,192] Trial 898 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:59,210] Trial 899 finished with value: 919.98 and parameters: {'ema1_period': 15, 'ema2_period': 24}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:59,227] Trial 900 finished with value: 1170.48 and parameters: {'ema1_period': 14, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:59,252] Trial 901 finished with value: 1150.28 and parameters: {'ema1_period': 13, 'ema2_period': 12}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:59,276] Trial 902 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:59,293] Trial 903 finished with value: 1120.48 and parameters: {'ema1_period': 15, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:59,311] Trial 904 finished with value: 1170.48 and parameters: {'ema1_period': 14, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:59,329] Trial 905 finished with value: 1163.58 and parameters: {'ema1_period': 13, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:59,358] Trial 906 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:59,375] Trial 907 finished with value: 1060.38 and parameters: {'ema1_period': 14, 'ema2_period': 12}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:59,392] Trial 908 finished with value: 1120.48 and parameters: {'ema1_period': 15, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:59,410] Trial 909 finished with value: 1163.58 and parameters: {'ema1_period': 13, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:59,427] Trial 910 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:59,446] Trial 911 finished with value: 1039.58 and parameters: {'ema1_period': 15, 'ema2_period': 12}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:59,465] Trial 912 finished with value: 1170.48 and parameters: {'ema1_period': 14, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:59,482] Trial 913 finished with value: 1153.78 and parameters: {'ema1_period': 13, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:59,500] Trial 914 finished with value: 1170.48 and parameters: {'ema1_period': 14, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:59,518] Trial 915 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:59,546] Trial 916 finished with value: 1120.48 and parameters: {'ema1_period': 15, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:59,565] Trial 917 finished with value: 802.38 and parameters: {'ema1_period': 10, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:59,591] Trial 918 finished with value: 1150.28 and parameters: {'ema1_period': 13, 'ema2_period': 12}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:59,616] Trial 919 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:59,639] Trial 920 finished with value: 1170.48 and parameters: {'ema1_period': 14, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:59,658] Trial 921 finished with value: 1120.48 and parameters: {'ema1_period': 15, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:59,676] Trial 922 finished with value: 1150.28 and parameters: {'ema1_period': 13, 'ema2_period': 12}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:59,702] Trial 923 finished with value: 1039.58 and parameters: {'ema1_period': 16, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:59,727] Trial 924 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:59,752] Trial 925 finished with value: 1153.88 and parameters: {'ema1_period': 12, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:59,771] Trial 926 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:59,789] Trial 927 finished with value: 1039.58 and parameters: {'ema1_period': 15, 'ema2_period': 12}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:59,817] Trial 928 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:59,843] Trial 929 finished with value: 1170.48 and parameters: {'ema1_period': 14, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:59,865] Trial 930 finished with value: 1120.48 and parameters: {'ema1_period': 15, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:59,884] Trial 931 finished with value: 1163.58 and parameters: {'ema1_period': 13, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:59,904] Trial 932 finished with value: 1150.28 and parameters: {'ema1_period': 13, 'ema2_period': 12}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:59,932] Trial 933 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:59,956] Trial 934 finished with value: 1080.48 and parameters: {'ema1_period': 15, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:40:59,983] Trial 935 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:41:00,002] Trial 936 finished with value: 1060.38 and parameters: {'ema1_period': 14, 'ema2_period': 12}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:41:00,021] Trial 937 finished with value: 1163.58 and parameters: {'ema1_period': 13, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:41:00,038] Trial 938 finished with value: 1120.48 and parameters: {'ema1_period': 15, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:41:00,058] Trial 939 finished with value: 1153.78 and parameters: {'ema1_period': 13, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:41:00,086] Trial 940 finished with value: 1170.48 and parameters: {'ema1_period': 14, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:41:00,108] Trial 941 finished with value: 1039.58 and parameters: {'ema1_period': 15, 'ema2_period': 12}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:41:00,126] Trial 942 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:41:00,143] Trial 943 finished with value: 1170.48 and parameters: {'ema1_period': 14, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:41:00,161] Trial 944 finished with value: 1153.78 and parameters: {'ema1_period': 13, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:41:00,180] Trial 945 finished with value: 1170.48 and parameters: {'ema1_period': 14, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:41:00,199] Trial 946 finished with value: 1120.48 and parameters: {'ema1_period': 15, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:41:00,217] Trial 947 finished with value: 1163.58 and parameters: {'ema1_period': 13, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:41:00,234] Trial 948 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:41:00,252] Trial 949 finished with value: 1060.38 and parameters: {'ema1_period': 14, 'ema2_period': 12}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:41:00,272] Trial 950 finished with value: 1153.88 and parameters: {'ema1_period': 12, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:41:00,306] Trial 951 finished with value: 962.18 and parameters: {'ema1_period': 15, 'ema2_period': 50}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:41:00,331] Trial 952 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:41:00,350] Trial 953 finished with value: 1153.78 and parameters: {'ema1_period': 13, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:41:00,370] Trial 954 finished with value: 1060.38 and parameters: {'ema1_period': 14, 'ema2_period': 12}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:41:00,388] Trial 955 finished with value: 1060.38 and parameters: {'ema1_period': 14, 'ema2_period': 12}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:41:00,405] Trial 956 finished with value: 1080.48 and parameters: {'ema1_period': 15, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:41:00,422] Trial 957 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:41:00,441] Trial 958 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:41:00,460] Trial 959 finished with value: 1163.58 and parameters: {'ema1_period': 13, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:41:00,477] Trial 960 finished with value: 1120.48 and parameters: {'ema1_period': 15, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:41:00,495] Trial 961 finished with value: 1163.58 and parameters: {'ema1_period': 13, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:41:00,513] Trial 962 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:41:00,532] Trial 963 finished with value: 1170.48 and parameters: {'ema1_period': 14, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:41:00,552] Trial 964 finished with value: 1017.68 and parameters: {'ema1_period': 20, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:41:00,573] Trial 965 finished with value: 1039.58 and parameters: {'ema1_period': 15, 'ema2_period': 12}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:41:00,591] Trial 966 finished with value: 1153.78 and parameters: {'ema1_period': 13, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:41:00,610] Trial 967 finished with value: 1170.48 and parameters: {'ema1_period': 14, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:41:00,634] Trial 968 finished with value: 1120.48 and parameters: {'ema1_period': 15, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:41:00,652] Trial 969 finished with value: 1019.28 and parameters: {'ema1_period': 16, 'ema2_period': 12}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:41:00,669] Trial 970 finished with value: 1170.48 and parameters: {'ema1_period': 14, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:41:00,692] Trial 971 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:41:00,718] Trial 972 finished with value: 1163.58 and parameters: {'ema1_period': 13, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:41:00,736] Trial 973 finished with value: 1120.48 and parameters: {'ema1_period': 15, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:41:00,753] Trial 974 finished with value: 920.88 and parameters: {'ema1_period': 13, 'ema2_period': 40}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:41:00,774] Trial 975 finished with value: 1060.38 and parameters: {'ema1_period': 14, 'ema2_period': 12}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:41:00,797] Trial 976 finished with value: 1170.48 and parameters: {'ema1_period': 14, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:41:00,816] Trial 977 finished with value: 1120.48 and parameters: {'ema1_period': 15, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:41:00,834] Trial 978 finished with value: 1170.48 and parameters: {'ema1_period': 14, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:41:00,852] Trial 979 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:41:00,873] Trial 980 finished with value: 1163.58 and parameters: {'ema1_period': 13, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:41:00,892] Trial 981 finished with value: 1039.58 and parameters: {'ema1_period': 15, 'ema2_period': 12}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:41:00,910] Trial 982 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:41:00,928] Trial 983 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:41:00,948] Trial 984 finished with value: 1163.58 and parameters: {'ema1_period': 13, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:41:00,968] Trial 985 finished with value: 1120.48 and parameters: {'ema1_period': 15, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:41:00,989] Trial 986 finished with value: 1060.38 and parameters: {'ema1_period': 14, 'ema2_period': 12}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:41:01,012] Trial 987 finished with value: 1163.58 and parameters: {'ema1_period': 13, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:41:01,035] Trial 988 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:41:01,065] Trial 989 finished with value: 1170.48 and parameters: {'ema1_period': 14, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:41:01,084] Trial 990 finished with value: 1120.48 and parameters: {'ema1_period': 15, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:41:01,102] Trial 991 finished with value: 1170.48 and parameters: {'ema1_period': 14, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:41:01,126] Trial 992 finished with value: 930.98 and parameters: {'ema1_period': 14, 'ema2_period': 37}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:41:01,152] Trial 993 finished with value: 1150.28 and parameters: {'ema1_period': 13, 'ema2_period': 12}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:41:01,169] Trial 994 finished with value: 1120.48 and parameters: {'ema1_period': 15, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:41:01,187] Trial 995 finished with value: 1183.88 and parameters: {'ema1_period': 14, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:41:01,210] Trial 996 finished with value: 1153.78 and parameters: {'ema1_period': 13, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:41:01,235] Trial 997 finished with value: 1060.38 and parameters: {'ema1_period': 14, 'ema2_period': 12}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:41:01,253] Trial 998 finished with value: 1153.88 and parameters: {'ema1_period': 12, 'ema2_period': 11}. Best is trial 452 with value: 1183.88.\n[I 2024-06-15 07:41:01,273] Trial 999 finished with value: 1153.78 and parameters: {'ema1_period': 13, 'ema2_period': 10}. Best is trial 452 with value: 1183.88.\n</pre> In\u00a0[3]: Copied! <pre>study.best_params\n</pre> study.best_params Out[3]: <pre>{'ema1_period': 14, 'ema2_period': 10}</pre> In\u00a0[4]: Copied! <pre>lt.plotter.heatmap(x=\"ema1_period\", y=\"ema2_period\", z=\"equity\")\n</pre> lt.plotter.heatmap(x=\"ema1_period\", y=\"ema2_period\", z=\"equity\") In\u00a0[5]: Copied! <pre>lt.plotter.contour(x=\"ema1_period\", y=\"ema2_period\", z=\"equity\")\n</pre> lt.plotter.contour(x=\"ema1_period\", y=\"ema2_period\", z=\"equity\") In\u00a0[6]: Copied! <pre>fig = optuna.visualization.plot_optimization_history(study)\nfig.show()\n</pre> fig = optuna.visualization.plot_optimization_history(study) fig.show() In\u00a0[7]: Copied! <pre>fig = optuna.visualization.plot_contour(study, params=[\"ema1_period\", \"ema2_period\"])\nfig.show()\n</pre> fig = optuna.visualization.plot_contour(study, params=[\"ema1_period\", \"ema2_period\"]) fig.show() In\u00a0[8]: Copied! <pre>import plotly.io as pio\n\npio.renderers.default = \"notebook\"\npio.templates.default = \"plotly_dark\"\n</pre> import plotly.io as pio  pio.renderers.default = \"notebook\" pio.templates.default = \"plotly_dark\" In\u00a0[9]: Copied! <pre>study.trials\n</pre> study.trials Out[9]: <pre>[FrozenTrial(number=0, state=1, values=[852.58], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 46, 867560), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 46, 872865), params={'ema1_period': 5, 'ema2_period': 24}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=0, value=None),\n FrozenTrial(number=1, state=1, values=[1000.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 46, 873891), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 46, 875322), params={'ema1_period': 19, 'ema2_period': 25}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=1, value=None),\n FrozenTrial(number=2, state=1, values=[899.78], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 46, 876010), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 46, 877258), params={'ema1_period': 16, 'ema2_period': 21}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=2, value=None),\n FrozenTrial(number=3, state=1, values=[1021.38], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 46, 878366), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 46, 879495), params={'ema1_period': 12, 'ema2_period': 50}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=3, value=None),\n FrozenTrial(number=4, state=1, values=[1148.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 46, 880265), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 46, 881677), params={'ema1_period': 22, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=4, value=None),\n FrozenTrial(number=5, state=1, values=[1118.58], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 46, 883318), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 46, 885138), params={'ema1_period': 17, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=5, value=None),\n FrozenTrial(number=6, state=1, values=[830.58], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 46, 885946), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 46, 887277), params={'ema1_period': 8, 'ema2_period': 41}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=6, value=None),\n FrozenTrial(number=7, state=1, values=[943.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 46, 887978), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 46, 889981), params={'ema1_period': 14, 'ema2_period': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=7, value=None),\n FrozenTrial(number=8, state=1, values=[970.58], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 46, 890748), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 46, 891713), params={'ema1_period': 11, 'ema2_period': 39}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=8, value=None),\n FrozenTrial(number=9, state=1, values=[893.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 46, 892185), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 46, 893396), params={'ema1_period': 9, 'ema2_period': 24}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=9, value=None),\n FrozenTrial(number=10, state=1, values=[1160.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 46, 893823), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 46, 905239), params={'ema1_period': 25, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=10, value=None),\n FrozenTrial(number=11, state=1, values=[1160.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 46, 906283), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 46, 914787), params={'ema1_period': 25, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=11, value=None),\n FrozenTrial(number=12, state=1, values=[1160.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 46, 915666), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 46, 921917), params={'ema1_period': 25, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=12, value=None),\n FrozenTrial(number=13, state=1, values=[904.08], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 46, 922615), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 46, 928708), params={'ema1_period': 25, 'ema2_period': 32}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=13, value=None),\n FrozenTrial(number=14, state=1, values=[1070.18], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 46, 929625), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 46, 935329), params={'ema1_period': 21, 'ema2_period': 18}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=14, value=None),\n FrozenTrial(number=15, state=1, values=[1036.78], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 46, 935963), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 46, 941316), params={'ema1_period': 22, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=15, value=None),\n FrozenTrial(number=16, state=1, values=[884.68], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 46, 942055), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 46, 947393), params={'ema1_period': 25, 'ema2_period': 31}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=16, value=None),\n FrozenTrial(number=17, state=1, values=[1007.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 46, 947869), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 46, 953044), params={'ema1_period': 19, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=17, value=None),\n FrozenTrial(number=18, state=1, values=[980.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 46, 953511), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 46, 958680), params={'ema1_period': 23, 'ema2_period': 18}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=18, value=None),\n FrozenTrial(number=19, state=1, values=[901.98], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 46, 959001), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 46, 964391), params={'ema1_period': 19, 'ema2_period': 28}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=19, value=None),\n FrozenTrial(number=20, state=1, values=[947.78], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 46, 964867), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 46, 969990), params={'ema1_period': 23, 'ema2_period': 37}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=20, value=None),\n FrozenTrial(number=21, state=1, values=[1010.38], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 46, 970544), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 46, 976371), params={'ema1_period': 25, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=21, value=None),\n FrozenTrial(number=22, state=1, values=[1148.18], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 46, 977005), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 46, 983132), params={'ema1_period': 24, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=22, value=None),\n FrozenTrial(number=23, state=1, values=[980.58], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 46, 983727), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 46, 989675), params={'ema1_period': 21, 'ema2_period': 20}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=23, value=None),\n FrozenTrial(number=24, state=1, values=[1148.38], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 46, 990298), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 46, 996494), params={'ema1_period': 20, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=24, value=None),\n FrozenTrial(number=25, state=1, values=[1168.98], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 46, 997042), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 47, 3320), params={'ema1_period': 23, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=25, value=None),\n FrozenTrial(number=26, state=1, values=[1090.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 47, 3873), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 47, 9500), params={'ema1_period': 23, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=26, value=None),\n FrozenTrial(number=27, state=1, values=[909.78], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 47, 9983), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 47, 15667), params={'ema1_period': 17, 'ema2_period': 21}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=27, value=None),\n FrozenTrial(number=28, state=1, values=[1168.98], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 47, 16211), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 47, 21934), params={'ema1_period': 23, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=28, value=None),\n FrozenTrial(number=29, state=1, values=[1019.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 47, 22527), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 47, 28126), params={'ema1_period': 14, 'ema2_period': 27}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=29, value=None),\n FrozenTrial(number=30, state=1, values=[859.58], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 47, 28684), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 47, 34311), params={'ema1_period': 6, 'ema2_period': 22}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=30, value=None),\n FrozenTrial(number=31, state=1, values=[1100.68], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 47, 34776), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 47, 40332), params={'ema1_period': 23, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=31, value=None),\n FrozenTrial(number=32, state=1, values=[1070.18], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 47, 40942), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 47, 46653), params={'ema1_period': 21, 'ema2_period': 18}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=32, value=None),\n FrozenTrial(number=33, state=1, values=[1168.98], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 47, 47191), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 47, 52746), params={'ema1_period': 24, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=33, value=None),\n FrozenTrial(number=34, state=1, values=[1129.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 47, 53231), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 47, 58906), params={'ema1_period': 24, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=34, value=None),\n FrozenTrial(number=35, state=1, values=[1036.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 47, 59261), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 47, 65266), params={'ema1_period': 22, 'ema2_period': 48}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=35, value=None),\n FrozenTrial(number=36, state=1, values=[1168.38], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 47, 65692), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 47, 72491), params={'ema1_period': 19, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=36, value=None),\n FrozenTrial(number=37, state=1, values=[989.78], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 47, 73045), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 47, 79259), params={'ema1_period': 17, 'ema2_period': 24}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=37, value=None),\n FrozenTrial(number=38, state=1, values=[1168.18], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 47, 79795), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 47, 86220), params={'ema1_period': 18, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=38, value=None),\n FrozenTrial(number=39, state=1, values=[1000.0], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 47, 86714), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 47, 92999), params={'ema1_period': 20, 'ema2_period': 20}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=39, value=None),\n FrozenTrial(number=40, state=1, values=[1126.68], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 47, 93574), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 47, 99755), params={'ema1_period': 20, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=40, value=None),\n FrozenTrial(number=41, state=1, values=[1168.18], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 47, 100259), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 47, 106228), params={'ema1_period': 18, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=41, value=None),\n FrozenTrial(number=42, state=1, values=[863.18], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 47, 106897), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 47, 112773), params={'ema1_period': 15, 'ema2_period': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=42, value=None),\n FrozenTrial(number=43, state=1, values=[1026.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 47, 113296), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 47, 119436), params={'ema1_period': 18, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=43, value=None),\n FrozenTrial(number=44, state=1, values=[811.68], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 47, 120003), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 47, 125935), params={'ema1_period': 15, 'ema2_period': 19}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=44, value=None),\n FrozenTrial(number=45, state=1, values=[990.58], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 47, 126531), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 47, 132611), params={'ema1_period': 13, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=45, value=None),\n FrozenTrial(number=46, state=1, values=[941.08], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 47, 133129), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 47, 139141), params={'ema1_period': 22, 'ema2_period': 23}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=46, value=None),\n FrozenTrial(number=47, state=1, values=[1000.0], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 47, 139624), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 47, 145756), params={'ema1_period': 16, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=47, value=None),\n FrozenTrial(number=48, state=1, values=[1168.98], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 47, 146425), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 47, 152536), params={'ema1_period': 24, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=48, value=None),\n FrozenTrial(number=49, state=1, values=[1168.98], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 47, 153096), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 47, 159452), params={'ema1_period': 24, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=49, value=None),\n FrozenTrial(number=50, state=1, values=[1118.38], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 47, 160012), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 47, 166210), params={'ema1_period': 24, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=50, value=None),\n FrozenTrial(number=51, state=1, values=[1168.98], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 47, 166679), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 47, 173214), params={'ema1_period': 24, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=51, value=None),\n FrozenTrial(number=52, state=1, values=[1168.98], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 47, 173802), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 47, 179916), params={'ema1_period': 24, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=52, value=None),\n FrozenTrial(number=53, state=1, values=[1158.38], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 47, 180494), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 47, 186839), params={'ema1_period': 23, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=53, value=None),\n FrozenTrial(number=54, state=1, values=[1010.08], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 47, 187449), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 47, 193725), params={'ema1_period': 24, 'ema2_period': 35}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=54, value=None),\n FrozenTrial(number=55, state=1, values=[1036.78], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 47, 194249), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 47, 201476), params={'ema1_period': 22, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=55, value=None),\n FrozenTrial(number=56, state=1, values=[802.38], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 47, 202288), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 47, 208776), params={'ema1_period': 10, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=56, value=None),\n FrozenTrial(number=57, state=1, values=[1080.18], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 47, 209304), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 47, 215527), params={'ema1_period': 25, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=57, value=None),\n FrozenTrial(number=58, state=1, values=[1097.08], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 47, 216049), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 47, 222413), params={'ema1_period': 21, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=58, value=None),\n FrozenTrial(number=59, state=1, values=[1008.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 47, 223000), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 47, 229629), params={'ema1_period': 23, 'ema2_period': 45}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=59, value=None),\n FrozenTrial(number=60, state=1, values=[1090.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 47, 230143), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 47, 236249), params={'ema1_period': 24, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=60, value=None),\n FrozenTrial(number=61, state=1, values=[1168.98], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 47, 236836), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 47, 243152), params={'ema1_period': 24, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=61, value=None),\n FrozenTrial(number=62, state=1, values=[1161.08], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 47, 243769), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 47, 250610), params={'ema1_period': 25, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=62, value=None),\n FrozenTrial(number=63, state=1, values=[1036.78], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 47, 251207), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 47, 257703), params={'ema1_period': 22, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=63, value=None),\n FrozenTrial(number=64, state=1, values=[1100.68], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 47, 258239), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 47, 264919), params={'ema1_period': 23, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=64, value=None),\n FrozenTrial(number=65, state=1, values=[949.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 47, 265408), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 47, 271924), params={'ema1_period': 24, 'ema2_period': 18}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=65, value=None),\n FrozenTrial(number=66, state=1, values=[1161.08], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 47, 272436), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 47, 278592), params={'ema1_period': 25, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=66, value=None),\n FrozenTrial(number=67, state=1, values=[1090.18], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 47, 279217), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 47, 285292), params={'ema1_period': 21, 'ema2_period': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=67, value=None),\n FrozenTrial(number=68, state=1, values=[1128.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 47, 285766), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 47, 292589), params={'ema1_period': 23, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=68, value=None),\n FrozenTrial(number=69, state=1, values=[1059.98], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 47, 293270), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 47, 299721), params={'ema1_period': 24, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=69, value=None),\n FrozenTrial(number=70, state=1, values=[951.38], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 47, 300283), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 47, 306476), params={'ema1_period': 22, 'ema2_period': 26}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=70, value=None),\n FrozenTrial(number=71, state=1, values=[1161.08], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 47, 307075), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 47, 313270), params={'ema1_period': 25, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=71, value=None),\n FrozenTrial(number=72, state=1, values=[1090.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 47, 313983), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 47, 320476), params={'ema1_period': 24, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=72, value=None),\n FrozenTrial(number=73, state=1, values=[1116.18], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 47, 320969), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 47, 327214), params={'ema1_period': 23, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=73, value=None),\n FrozenTrial(number=74, state=1, values=[1129.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 47, 327686), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 47, 333971), params={'ema1_period': 24, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=74, value=None),\n FrozenTrial(number=75, state=1, values=[1160.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 47, 334484), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 47, 341188), params={'ema1_period': 25, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=75, value=None),\n FrozenTrial(number=76, state=1, values=[1020.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 47, 341686), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 47, 348263), params={'ema1_period': 23, 'ema2_period': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=76, value=None),\n FrozenTrial(number=77, state=1, values=[1148.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 47, 349020), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 47, 355609), params={'ema1_period': 22, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=77, value=None),\n FrozenTrial(number=78, state=1, values=[940.58], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 47, 356162), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 47, 362630), params={'ema1_period': 5, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=78, value=None),\n FrozenTrial(number=79, state=1, values=[1097.08], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 47, 363235), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 47, 369354), params={'ema1_period': 21, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=79, value=None),\n FrozenTrial(number=80, state=1, values=[959.08], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 47, 369895), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 47, 376088), params={'ema1_period': 24, 'ema2_period': 19}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=80, value=None),\n FrozenTrial(number=81, state=1, values=[1139.08], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 47, 376598), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 47, 383056), params={'ema1_period': 20, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=81, value=None),\n FrozenTrial(number=82, state=1, values=[1160.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 47, 383520), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 47, 389782), params={'ema1_period': 25, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=82, value=None),\n FrozenTrial(number=83, state=1, values=[1090.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 47, 390303), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 47, 396611), params={'ema1_period': 24, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=83, value=None),\n FrozenTrial(number=84, state=1, values=[874.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 47, 396983), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 47, 403516), params={'ema1_period': 22, 'ema2_period': 33}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=84, value=None),\n FrozenTrial(number=85, state=1, values=[1168.98], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 47, 403962), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 47, 410230), params={'ema1_period': 23, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=85, value=None),\n FrozenTrial(number=86, state=1, values=[1168.98], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 47, 410668), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 47, 416928), params={'ema1_period': 23, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=86, value=None),\n FrozenTrial(number=87, state=1, values=[991.38], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 47, 417438), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 47, 423716), params={'ema1_period': 25, 'ema2_period': 42}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=87, value=None),\n FrozenTrial(number=88, state=1, values=[1116.18], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 47, 424254), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 47, 431192), params={'ema1_period': 23, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=88, value=None),\n FrozenTrial(number=89, state=1, values=[1059.98], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 47, 431688), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 47, 438567), params={'ema1_period': 24, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=89, value=None),\n FrozenTrial(number=90, state=1, values=[1168.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 47, 439078), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 47, 446156), params={'ema1_period': 22, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=90, value=None),\n FrozenTrial(number=91, state=1, values=[1168.98], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 47, 446691), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 47, 453485), params={'ema1_period': 23, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=91, value=None),\n FrozenTrial(number=92, state=1, values=[1128.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 47, 453864), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 47, 460798), params={'ema1_period': 23, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=92, value=None),\n FrozenTrial(number=93, state=1, values=[1129.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 47, 461327), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 47, 467921), params={'ema1_period': 24, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=93, value=None),\n FrozenTrial(number=94, state=1, values=[1168.68], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 47, 468423), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 47, 475006), params={'ema1_period': 21, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=94, value=None),\n FrozenTrial(number=95, state=1, values=[1100.68], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 47, 475497), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 47, 482005), params={'ema1_period': 23, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=95, value=None),\n FrozenTrial(number=96, state=1, values=[1148.18], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 47, 482552), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 47, 488800), params={'ema1_period': 24, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=96, value=None),\n FrozenTrial(number=97, state=1, values=[960.18], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 47, 489394), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 47, 495848), params={'ema1_period': 25, 'ema2_period': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=97, value=None),\n FrozenTrial(number=98, state=1, values=[932.78], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 47, 496320), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 47, 502886), params={'ema1_period': 22, 'ema2_period': 30}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=98, value=None),\n FrozenTrial(number=99, state=1, values=[1139.08], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 47, 503379), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 47, 509901), params={'ema1_period': 12, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=99, value=None),\n FrozenTrial(number=100, state=1, values=[1168.98], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 47, 510377), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 47, 516881), params={'ema1_period': 23, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=100, value=None),\n FrozenTrial(number=101, state=1, values=[1158.38], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 47, 517481), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 47, 524738), params={'ema1_period': 23, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=101, value=None),\n FrozenTrial(number=102, state=1, values=[1090.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 47, 525374), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 47, 532168), params={'ema1_period': 24, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=102, value=None),\n FrozenTrial(number=103, state=1, values=[1129.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 47, 532664), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 47, 539837), params={'ema1_period': 24, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=103, value=None),\n FrozenTrial(number=104, state=1, values=[990.58], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 47, 540338), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 47, 547307), params={'ema1_period': 25, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=104, value=None),\n FrozenTrial(number=105, state=1, values=[1168.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 47, 547801), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 47, 554524), params={'ema1_period': 22, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=105, value=None),\n FrozenTrial(number=106, state=1, values=[810.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 47, 555018), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 47, 561699), params={'ema1_period': 8, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=106, value=None),\n FrozenTrial(number=107, state=1, values=[1128.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 47, 563001), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 47, 569772), params={'ema1_period': 23, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=107, value=None),\n FrozenTrial(number=108, state=1, values=[1158.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 47, 570281), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 47, 576949), params={'ema1_period': 21, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=108, value=None),\n FrozenTrial(number=109, state=1, values=[1080.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 47, 577412), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 47, 584195), params={'ema1_period': 22, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=109, value=None),\n FrozenTrial(number=110, state=1, values=[1116.18], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 47, 584657), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 47, 591342), params={'ema1_period': 23, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=110, value=None),\n FrozenTrial(number=111, state=1, values=[1168.98], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 47, 591907), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 47, 600182), params={'ema1_period': 23, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=111, value=None),\n FrozenTrial(number=112, state=1, values=[1168.98], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 47, 600980), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 47, 608643), params={'ema1_period': 24, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=112, value=None),\n FrozenTrial(number=113, state=1, values=[1010.38], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 47, 609428), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 47, 617888), params={'ema1_period': 25, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=113, value=None),\n FrozenTrial(number=114, state=1, values=[1069.98], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 47, 618622), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 47, 626852), params={'ema1_period': 23, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=114, value=None),\n FrozenTrial(number=115, state=1, values=[1160.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 47, 627559), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 47, 635736), params={'ema1_period': 25, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=115, value=None),\n FrozenTrial(number=116, state=1, values=[1059.98], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 47, 636432), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 47, 644076), params={'ema1_period': 24, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=116, value=None),\n FrozenTrial(number=117, state=1, values=[1100.68], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 47, 644819), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 47, 652216), params={'ema1_period': 23, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=117, value=None),\n FrozenTrial(number=118, state=1, values=[1148.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 47, 652763), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 47, 659887), params={'ema1_period': 22, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=118, value=None),\n FrozenTrial(number=119, state=1, values=[1168.98], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 47, 660441), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 47, 667319), params={'ema1_period': 24, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=119, value=None),\n FrozenTrial(number=120, state=1, values=[1128.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 47, 667868), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 47, 674652), params={'ema1_period': 23, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=120, value=None),\n FrozenTrial(number=121, state=1, values=[1168.98], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 47, 675183), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 47, 682079), params={'ema1_period': 23, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=121, value=None),\n FrozenTrial(number=122, state=1, values=[1168.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 47, 757114), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 47, 764956), params={'ema1_period': 22, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=122, value=None),\n FrozenTrial(number=123, state=1, values=[1118.38], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 47, 765594), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 47, 772632), params={'ema1_period': 24, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=123, value=None),\n FrozenTrial(number=124, state=1, values=[1100.68], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 47, 773180), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 47, 780123), params={'ema1_period': 23, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=124, value=None),\n FrozenTrial(number=125, state=1, values=[1129.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 47, 780606), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 47, 787905), params={'ema1_period': 24, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=125, value=None),\n FrozenTrial(number=126, state=1, values=[1020.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 47, 788539), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 47, 796031), params={'ema1_period': 23, 'ema2_period': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=126, value=None),\n FrozenTrial(number=127, state=1, values=[1160.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 47, 796621), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 47, 804289), params={'ema1_period': 25, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=127, value=None),\n FrozenTrial(number=128, state=1, values=[1158.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 47, 804891), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 47, 812235), params={'ema1_period': 22, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=128, value=None),\n FrozenTrial(number=129, state=1, values=[1161.08], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 47, 812838), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 47, 820225), params={'ema1_period': 25, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=129, value=None),\n FrozenTrial(number=130, state=1, values=[1168.68], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 47, 820791), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 47, 827994), params={'ema1_period': 21, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=130, value=None),\n FrozenTrial(number=131, state=1, values=[1168.98], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 47, 828495), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 47, 835558), params={'ema1_period': 24, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=131, value=None),\n FrozenTrial(number=132, state=1, values=[1000.18], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 47, 836100), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 47, 843089), params={'ema1_period': 24, 'ema2_period': 50}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=132, value=None),\n FrozenTrial(number=133, state=1, values=[1129.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 47, 843570), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 47, 850696), params={'ema1_period': 24, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=133, value=None),\n FrozenTrial(number=134, state=1, values=[1116.18], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 47, 851309), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 47, 858296), params={'ema1_period': 23, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=134, value=None),\n FrozenTrial(number=135, state=1, values=[1148.18], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 47, 858771), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 47, 865920), params={'ema1_period': 24, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=135, value=None),\n FrozenTrial(number=136, state=1, values=[1158.38], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 47, 866532), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 47, 874551), params={'ema1_period': 23, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=136, value=None),\n FrozenTrial(number=137, state=1, values=[931.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 47, 875217), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 47, 882999), params={'ema1_period': 24, 'ema2_period': 38}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=137, value=None),\n FrozenTrial(number=138, state=1, values=[1010.38], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 47, 883597), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 47, 891232), params={'ema1_period': 25, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=138, value=None),\n FrozenTrial(number=139, state=1, values=[1100.68], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 47, 891729), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 47, 899313), params={'ema1_period': 23, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=139, value=None),\n FrozenTrial(number=140, state=1, values=[1168.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 47, 899902), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 47, 906916), params={'ema1_period': 22, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=140, value=None),\n FrozenTrial(number=141, state=1, values=[1168.98], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 47, 907437), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 47, 914628), params={'ema1_period': 24, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=141, value=None),\n FrozenTrial(number=142, state=1, values=[1148.18], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 47, 915105), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 47, 922330), params={'ema1_period': 24, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=142, value=None),\n FrozenTrial(number=143, state=1, values=[990.58], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 47, 922778), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 47, 930052), params={'ema1_period': 25, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=143, value=None),\n FrozenTrial(number=144, state=1, values=[1118.38], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 47, 930553), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 47, 937744), params={'ema1_period': 24, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=144, value=None),\n FrozenTrial(number=145, state=1, values=[1168.98], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 47, 938108), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 47, 945786), params={'ema1_period': 23, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=145, value=None),\n FrozenTrial(number=146, state=1, values=[1168.98], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 47, 946119), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 47, 953418), params={'ema1_period': 23, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=146, value=None),\n FrozenTrial(number=147, state=1, values=[923.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 47, 953844), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 47, 961865), params={'ema1_period': 25, 'ema2_period': 28}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=147, value=None),\n FrozenTrial(number=148, state=1, values=[1059.98], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 47, 962456), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 47, 970876), params={'ema1_period': 24, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=148, value=None),\n FrozenTrial(number=149, state=1, values=[1168.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 47, 971482), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 47, 979978), params={'ema1_period': 22, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=149, value=None),\n FrozenTrial(number=150, state=1, values=[1100.68], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 47, 980753), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 47, 989069), params={'ema1_period': 23, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=150, value=None),\n FrozenTrial(number=151, state=1, values=[1168.98], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 47, 989609), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 47, 997422), params={'ema1_period': 23, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=151, value=None),\n FrozenTrial(number=152, state=1, values=[1148.18], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 47, 998065), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 48, 5846), params={'ema1_period': 24, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=152, value=None),\n FrozenTrial(number=153, state=1, values=[1158.38], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 48, 6455), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 48, 14077), params={'ema1_period': 23, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=153, value=None),\n FrozenTrial(number=154, state=1, values=[1158.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 48, 14567), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 48, 21950), params={'ema1_period': 22, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=154, value=None),\n FrozenTrial(number=155, state=1, values=[1168.98], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 48, 22470), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 48, 29921), params={'ema1_period': 23, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=155, value=None),\n FrozenTrial(number=156, state=1, values=[1118.38], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 48, 30386), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 48, 37849), params={'ema1_period': 24, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=156, value=None),\n FrozenTrial(number=157, state=1, values=[1148.18], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 48, 38324), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 48, 46318), params={'ema1_period': 24, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=157, value=None),\n FrozenTrial(number=158, state=1, values=[1161.08], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 48, 46993), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 48, 55261), params={'ema1_period': 25, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=158, value=None),\n FrozenTrial(number=159, state=1, values=[1090.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 48, 55898), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 48, 64199), params={'ema1_period': 23, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=159, value=None),\n FrozenTrial(number=160, state=1, values=[1090.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 48, 64734), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 48, 72507), params={'ema1_period': 24, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=160, value=None),\n FrozenTrial(number=161, state=1, values=[1168.98], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 48, 72975), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 48, 80741), params={'ema1_period': 24, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=161, value=None),\n FrozenTrial(number=162, state=1, values=[1129.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 48, 81269), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 48, 88839), params={'ema1_period': 24, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=162, value=None),\n FrozenTrial(number=163, state=1, values=[1128.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 48, 89385), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 48, 96951), params={'ema1_period': 23, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=163, value=None),\n FrozenTrial(number=164, state=1, values=[1060.38], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 48, 97472), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 48, 105038), params={'ema1_period': 14, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=164, value=None),\n FrozenTrial(number=165, state=1, values=[1010.38], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 48, 105632), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 48, 113180), params={'ema1_period': 25, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=165, value=None),\n FrozenTrial(number=166, state=1, values=[1168.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 48, 113700), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 48, 121288), params={'ema1_period': 22, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=166, value=None),\n FrozenTrial(number=167, state=1, values=[1090.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 48, 121749), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 48, 129462), params={'ema1_period': 24, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=167, value=None),\n FrozenTrial(number=168, state=1, values=[1116.18], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 48, 130013), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 48, 138412), params={'ema1_period': 23, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=168, value=None),\n FrozenTrial(number=169, state=1, values=[1160.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 48, 138869), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 48, 146869), params={'ema1_period': 25, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=169, value=None),\n FrozenTrial(number=170, state=1, values=[1069.98], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 48, 147487), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 48, 155452), params={'ema1_period': 23, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=170, value=None),\n FrozenTrial(number=171, state=1, values=[1168.98], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 48, 156034), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 48, 164120), params={'ema1_period': 24, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=171, value=None),\n FrozenTrial(number=172, state=1, values=[1129.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 48, 164672), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 48, 172239), params={'ema1_period': 24, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=172, value=None),\n FrozenTrial(number=173, state=1, values=[1158.38], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 48, 172703), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 48, 180330), params={'ema1_period': 23, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=173, value=None),\n FrozenTrial(number=174, state=1, values=[998.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 48, 180782), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 48, 188369), params={'ema1_period': 24, 'ema2_period': 41}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=174, value=None),\n FrozenTrial(number=175, state=1, values=[1129.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 48, 188869), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 48, 196448), params={'ema1_period': 24, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=175, value=None),\n FrozenTrial(number=176, state=1, values=[1158.38], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 48, 196979), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 48, 204507), params={'ema1_period': 23, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=176, value=None),\n FrozenTrial(number=177, state=1, values=[990.38], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 48, 205006), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 48, 212778), params={'ema1_period': 25, 'ema2_period': 48}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=177, value=None),\n FrozenTrial(number=178, state=1, values=[1059.98], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 48, 213246), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 48, 221356), params={'ema1_period': 24, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=178, value=None),\n FrozenTrial(number=179, state=1, values=[1039.58], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 48, 221976), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 48, 230119), params={'ema1_period': 16, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=179, value=None),\n FrozenTrial(number=180, state=1, values=[1158.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 48, 230920), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 48, 239251), params={'ema1_period': 22, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=180, value=None),\n FrozenTrial(number=181, state=1, values=[1168.98], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 48, 239826), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 48, 248047), params={'ema1_period': 23, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=181, value=None),\n FrozenTrial(number=182, state=1, values=[1168.98], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 48, 248593), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 48, 256318), params={'ema1_period': 23, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=182, value=None),\n FrozenTrial(number=183, state=1, values=[1168.98], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 48, 256777), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 48, 264524), params={'ema1_period': 24, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=183, value=None),\n FrozenTrial(number=184, state=1, values=[1100.68], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 48, 265024), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 48, 272837), params={'ema1_period': 23, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=184, value=None),\n FrozenTrial(number=185, state=1, values=[1148.18], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 48, 273328), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 48, 282454), params={'ema1_period': 24, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=185, value=None),\n FrozenTrial(number=186, state=1, values=[832.18], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 48, 283138), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 48, 291682), params={'ema1_period': 8, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=186, value=None),\n FrozenTrial(number=187, state=1, values=[1148.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 48, 292350), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 48, 300955), params={'ema1_period': 22, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=187, value=None),\n FrozenTrial(number=188, state=1, values=[1116.18], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 48, 301599), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 48, 312413), params={'ema1_period': 23, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=188, value=None),\n FrozenTrial(number=189, state=1, values=[1010.08], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 48, 313214), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 48, 322342), params={'ema1_period': 24, 'ema2_period': 35}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=189, value=None),\n FrozenTrial(number=190, state=1, values=[1020.38], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 48, 322960), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 48, 332464), params={'ema1_period': 25, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=190, value=None),\n FrozenTrial(number=191, state=1, values=[1158.38], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 48, 333088), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 48, 341718), params={'ema1_period': 23, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=191, value=None),\n FrozenTrial(number=192, state=1, values=[1168.98], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 48, 342305), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 48, 350478), params={'ema1_period': 23, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=192, value=None),\n FrozenTrial(number=193, state=1, values=[1100.68], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 48, 351043), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 48, 359062), params={'ema1_period': 23, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=193, value=None),\n FrozenTrial(number=194, state=1, values=[1148.18], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 48, 359606), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 48, 367503), params={'ema1_period': 24, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=194, value=None),\n FrozenTrial(number=195, state=1, values=[1168.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 48, 367907), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 48, 376167), params={'ema1_period': 22, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=195, value=None),\n FrozenTrial(number=196, state=1, values=[1090.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 48, 376672), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 48, 384798), params={'ema1_period': 24, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=196, value=None),\n FrozenTrial(number=197, state=1, values=[1168.98], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 48, 385335), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 48, 393338), params={'ema1_period': 23, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=197, value=None),\n FrozenTrial(number=198, state=1, values=[1158.38], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 48, 393854), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 48, 402122), params={'ema1_period': 23, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=198, value=None),\n FrozenTrial(number=199, state=1, values=[1148.18], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 48, 402652), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 48, 411347), params={'ema1_period': 24, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=199, value=None),\n FrozenTrial(number=200, state=1, values=[1148.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 48, 411905), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 48, 420474), params={'ema1_period': 22, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=200, value=None),\n FrozenTrial(number=201, state=1, values=[1168.98], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 48, 421063), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 48, 429471), params={'ema1_period': 23, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=201, value=None),\n FrozenTrial(number=202, state=1, values=[1158.38], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 48, 430051), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 48, 438363), params={'ema1_period': 23, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=202, value=None),\n FrozenTrial(number=203, state=1, values=[1090.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 48, 438881), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 48, 446846), params={'ema1_period': 24, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=203, value=None),\n FrozenTrial(number=204, state=1, values=[1168.98], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 48, 447365), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 48, 455288), params={'ema1_period': 23, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=204, value=None),\n FrozenTrial(number=205, state=1, values=[1096.78], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 48, 455794), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 48, 463888), params={'ema1_period': 22, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=205, value=None),\n FrozenTrial(number=206, state=1, values=[1090.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 48, 464386), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 48, 472380), params={'ema1_period': 24, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=206, value=None),\n FrozenTrial(number=207, state=1, values=[1161.08], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 48, 472893), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 48, 480949), params={'ema1_period': 25, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=207, value=None),\n FrozenTrial(number=208, state=1, values=[1128.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 48, 481327), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 48, 489855), params={'ema1_period': 23, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=208, value=None),\n FrozenTrial(number=209, state=1, values=[1059.98], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 48, 490467), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 48, 499388), params={'ema1_period': 24, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=209, value=None),\n FrozenTrial(number=210, state=1, values=[1168.98], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 48, 500128), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 48, 513033), params={'ema1_period': 23, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=210, value=None),\n FrozenTrial(number=211, state=1, values=[1168.98], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 48, 513794), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 48, 525275), params={'ema1_period': 23, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=211, value=None),\n FrozenTrial(number=212, state=1, values=[1168.98], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 48, 526147), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 48, 534922), params={'ema1_period': 23, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=212, value=None),\n FrozenTrial(number=213, state=1, values=[1168.98], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 48, 535517), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 48, 544049), params={'ema1_period': 24, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=213, value=None),\n FrozenTrial(number=214, state=1, values=[1168.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 48, 544611), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 48, 552945), params={'ema1_period': 22, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=214, value=None),\n FrozenTrial(number=215, state=1, values=[1090.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 48, 553461), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 48, 561620), params={'ema1_period': 24, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=215, value=None),\n FrozenTrial(number=216, state=1, values=[1168.98], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 48, 562182), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 48, 570337), params={'ema1_period': 23, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=216, value=None),\n FrozenTrial(number=217, state=1, values=[851.68], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 48, 570746), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 48, 583741), params={'ema1_period': 23, 'ema2_period': 24}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=217, value=None),\n FrozenTrial(number=218, state=1, values=[1168.98], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 48, 584359), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 48, 597586), params={'ema1_period': 24, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=218, value=None),\n FrozenTrial(number=219, state=1, values=[1129.58], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 48, 598278), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 48, 609085), params={'ema1_period': 25, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=219, value=None),\n FrozenTrial(number=220, state=1, values=[1090.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 48, 609602), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 48, 617766), params={'ema1_period': 24, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=220, value=None),\n FrozenTrial(number=221, state=1, values=[1168.98], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 48, 618250), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 48, 626646), params={'ema1_period': 24, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=221, value=None),\n FrozenTrial(number=222, state=1, values=[1168.98], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 48, 627186), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 48, 635444), params={'ema1_period': 24, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=222, value=None),\n FrozenTrial(number=223, state=1, values=[1128.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 48, 635991), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 48, 644281), params={'ema1_period': 23, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=223, value=None),\n FrozenTrial(number=224, state=1, values=[1168.98], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 48, 644671), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 48, 653066), params={'ema1_period': 23, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=224, value=None),\n FrozenTrial(number=225, state=1, values=[1168.98], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 48, 653608), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 48, 663463), params={'ema1_period': 24, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=225, value=None),\n FrozenTrial(number=226, state=1, values=[1010.38], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 48, 664426), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 48, 678145), params={'ema1_period': 25, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=226, value=None),\n FrozenTrial(number=227, state=1, values=[1096.78], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 48, 678790), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 48, 691364), params={'ema1_period': 22, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=227, value=None),\n FrozenTrial(number=228, state=1, values=[1129.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 48, 691989), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 48, 700466), params={'ema1_period': 24, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=228, value=None),\n FrozenTrial(number=229, state=1, values=[1100.68], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 48, 700803), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 48, 709255), params={'ema1_period': 23, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=229, value=None),\n FrozenTrial(number=230, state=1, values=[1148.18], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 48, 709610), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 48, 718290), params={'ema1_period': 24, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=230, value=None),\n FrozenTrial(number=231, state=1, values=[1168.98], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 48, 718804), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 48, 727177), params={'ema1_period': 24, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=231, value=None),\n FrozenTrial(number=232, state=1, values=[1158.38], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 48, 727623), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 48, 735977), params={'ema1_period': 23, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=232, value=None),\n FrozenTrial(number=233, state=1, values=[1028.38], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 48, 736457), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 48, 744837), params={'ema1_period': 17, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=233, value=None),\n FrozenTrial(number=234, state=1, values=[1090.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 48, 745385), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 48, 758780), params={'ema1_period': 24, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=234, value=None),\n FrozenTrial(number=235, state=1, values=[1168.98], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 48, 759660), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 48, 773845), params={'ema1_period': 24, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=235, value=None),\n FrozenTrial(number=236, state=1, values=[1090.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 48, 774709), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 48, 786737), params={'ema1_period': 23, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=236, value=None),\n FrozenTrial(number=237, state=1, values=[1161.08], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 48, 787357), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 48, 796112), params={'ema1_period': 25, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=237, value=None),\n FrozenTrial(number=238, state=1, values=[1148.18], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 48, 796500), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 48, 805198), params={'ema1_period': 24, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=238, value=None),\n FrozenTrial(number=239, state=1, values=[826.18], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 48, 805671), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 48, 814156), params={'ema1_period': 10, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=239, value=None),\n FrozenTrial(number=240, state=1, values=[1128.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 48, 814622), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 48, 823226), params={'ema1_period': 23, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=240, value=None),\n FrozenTrial(number=241, state=1, values=[1168.98], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 48, 823623), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 48, 832458), params={'ema1_period': 23, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=241, value=None),\n FrozenTrial(number=242, state=1, values=[1168.98], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 48, 833111), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 48, 845717), params={'ema1_period': 23, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=242, value=None),\n FrozenTrial(number=243, state=1, values=[1158.38], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 48, 846728), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 48, 861435), params={'ema1_period': 23, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=243, value=None),\n FrozenTrial(number=244, state=1, values=[1158.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 48, 862228), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 48, 874188), params={'ema1_period': 22, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=244, value=None),\n FrozenTrial(number=245, state=1, values=[1168.98], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 48, 874774), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 48, 883543), params={'ema1_period': 24, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=245, value=None),\n FrozenTrial(number=246, state=1, values=[1129.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 48, 884025), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 48, 893488), params={'ema1_period': 24, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=246, value=None),\n FrozenTrial(number=247, state=1, values=[999.08], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 48, 894062), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 48, 902910), params={'ema1_period': 23, 'ema2_period': 21}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=247, value=None),\n FrozenTrial(number=248, state=1, values=[1161.08], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 48, 903467), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 48, 912248), params={'ema1_period': 25, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=248, value=None),\n FrozenTrial(number=249, state=1, values=[1090.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 48, 912782), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 48, 921384), params={'ema1_period': 24, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=249, value=None),\n FrozenTrial(number=250, state=1, values=[1168.98], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 48, 921848), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 48, 931645), params={'ema1_period': 23, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=250, value=None),\n FrozenTrial(number=251, state=1, values=[1116.18], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 48, 932457), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 48, 942439), params={'ema1_period': 23, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=251, value=None),\n FrozenTrial(number=252, state=1, values=[1096.78], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 48, 943040), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 48, 956758), params={'ema1_period': 22, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=252, value=None),\n FrozenTrial(number=253, state=1, values=[1129.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 48, 957426), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 48, 972378), params={'ema1_period': 24, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=253, value=None),\n FrozenTrial(number=254, state=1, values=[1090.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 48, 973250), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 48, 987021), params={'ema1_period': 24, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=254, value=None),\n FrozenTrial(number=255, state=1, values=[1158.38], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 48, 988115), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 48, 999365), params={'ema1_period': 23, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=255, value=None),\n FrozenTrial(number=256, state=1, values=[1080.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 49, 382), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 49, 11020), params={'ema1_period': 22, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=256, value=None),\n FrozenTrial(number=257, state=1, values=[1010.38], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 49, 11911), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 49, 21253), params={'ema1_period': 25, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=257, value=None),\n FrozenTrial(number=258, state=1, values=[1158.38], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 49, 21676), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 49, 30880), params={'ema1_period': 23, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=258, value=None),\n FrozenTrial(number=259, state=1, values=[1148.18], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 49, 31502), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 49, 41151), params={'ema1_period': 24, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=259, value=None),\n FrozenTrial(number=260, state=1, values=[913.38], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 49, 41808), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 49, 51681), params={'ema1_period': 7, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=260, value=None),\n FrozenTrial(number=261, state=1, values=[1100.68], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 49, 52352), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 49, 61180), params={'ema1_period': 23, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=261, value=None),\n FrozenTrial(number=262, state=1, values=[1118.38], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 49, 61711), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 49, 70631), params={'ema1_period': 24, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=262, value=None),\n FrozenTrial(number=263, state=1, values=[1010.38], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 49, 71203), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 49, 79964), params={'ema1_period': 25, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=263, value=None),\n FrozenTrial(number=264, state=1, values=[1148.18], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 49, 80508), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 49, 89183), params={'ema1_period': 24, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=264, value=None),\n FrozenTrial(number=265, state=1, values=[1168.98], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 49, 89698), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 49, 98904), params={'ema1_period': 23, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=265, value=None),\n FrozenTrial(number=266, state=1, values=[1059.98], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 49, 99414), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 49, 108838), params={'ema1_period': 24, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=266, value=None),\n FrozenTrial(number=267, state=1, values=[1158.38], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 49, 109389), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 49, 118967), params={'ema1_period': 23, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=267, value=None),\n FrozenTrial(number=268, state=1, values=[923.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 49, 119473), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 49, 128931), params={'ema1_period': 22, 'ema2_period': 32}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=268, value=None),\n FrozenTrial(number=269, state=1, values=[1090.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 49, 129425), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 49, 138433), params={'ema1_period': 24, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=269, value=None),\n FrozenTrial(number=270, state=1, values=[1026.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 49, 138970), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 49, 148074), params={'ema1_period': 18, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=270, value=None),\n FrozenTrial(number=271, state=1, values=[1153.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 49, 148631), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 49, 157537), params={'ema1_period': 12, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=271, value=None),\n FrozenTrial(number=272, state=1, values=[1158.38], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 49, 158197), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 49, 167060), params={'ema1_period': 23, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=272, value=None),\n FrozenTrial(number=273, state=1, values=[1010.38], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 49, 167616), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 49, 176567), params={'ema1_period': 25, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=273, value=None),\n FrozenTrial(number=274, state=1, values=[1128.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 49, 176949), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 49, 186004), params={'ema1_period': 23, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=274, value=None),\n FrozenTrial(number=275, state=1, values=[1090.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 49, 186575), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 49, 196366), params={'ema1_period': 24, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=275, value=None),\n FrozenTrial(number=276, state=1, values=[1168.98], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 49, 196976), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 49, 206662), params={'ema1_period': 24, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=276, value=None),\n FrozenTrial(number=277, state=1, values=[941.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 49, 207257), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 49, 217262), params={'ema1_period': 23, 'ema2_period': 26}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=277, value=None),\n FrozenTrial(number=278, state=1, values=[1158.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 49, 217852), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 49, 227036), params={'ema1_period': 22, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=278, value=None),\n FrozenTrial(number=279, state=1, values=[1158.38], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 49, 227521), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 49, 237308), params={'ema1_period': 23, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=279, value=None),\n FrozenTrial(number=280, state=1, values=[1059.98], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 49, 237854), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 49, 247245), params={'ema1_period': 24, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=280, value=None),\n FrozenTrial(number=281, state=1, values=[1116.18], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 49, 247741), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 49, 257611), params={'ema1_period': 23, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=281, value=None),\n FrozenTrial(number=282, state=1, values=[1148.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 49, 257994), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 49, 267949), params={'ema1_period': 22, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=282, value=None),\n FrozenTrial(number=283, state=1, values=[1148.18], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 49, 268464), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 49, 278207), params={'ema1_period': 24, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=283, value=None),\n FrozenTrial(number=284, state=1, values=[1161.08], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 49, 278657), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 49, 288605), params={'ema1_period': 25, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=284, value=None),\n FrozenTrial(number=285, state=1, values=[1168.98], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 49, 289198), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 49, 298197), params={'ema1_period': 23, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=285, value=None),\n FrozenTrial(number=286, state=1, values=[1129.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 49, 298547), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 49, 309195), params={'ema1_period': 24, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=286, value=None),\n FrozenTrial(number=287, state=1, values=[1096.68], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 49, 309789), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 49, 319153), params={'ema1_period': 21, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=287, value=None),\n FrozenTrial(number=288, state=1, values=[1158.38], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 49, 319689), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 49, 329963), params={'ema1_period': 23, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=288, value=None),\n FrozenTrial(number=289, state=1, values=[1148.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 49, 330312), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 49, 339526), params={'ema1_period': 22, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=289, value=None),\n FrozenTrial(number=290, state=1, values=[1090.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 49, 339983), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 49, 355135), params={'ema1_period': 24, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=290, value=None),\n FrozenTrial(number=291, state=1, values=[990.58], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 49, 356515), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 49, 369080), params={'ema1_period': 25, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=291, value=None),\n FrozenTrial(number=292, state=1, values=[1168.98], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 49, 369817), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 49, 379970), params={'ema1_period': 24, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=292, value=None),\n FrozenTrial(number=293, state=1, values=[1116.18], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 49, 380509), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 49, 390766), params={'ema1_period': 23, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=293, value=None),\n FrozenTrial(number=294, state=1, values=[1100.68], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 49, 391332), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 49, 401357), params={'ema1_period': 23, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=294, value=None),\n FrozenTrial(number=295, state=1, values=[1129.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 49, 401978), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 49, 411941), params={'ema1_period': 24, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=295, value=None),\n FrozenTrial(number=296, state=1, values=[883.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 49, 412497), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 49, 421747), params={'ema1_period': 25, 'ema2_period': 29}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=296, value=None),\n FrozenTrial(number=297, state=1, values=[1128.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 49, 422131), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 49, 431221), params={'ema1_period': 23, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=297, value=None),\n FrozenTrial(number=298, state=1, values=[1168.98], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 49, 431646), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 49, 440644), params={'ema1_period': 24, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=298, value=None),\n FrozenTrial(number=299, state=1, values=[1080.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 49, 441175), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 49, 450135), params={'ema1_period': 22, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=299, value=None),\n FrozenTrial(number=300, state=1, values=[1129.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 49, 450581), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 49, 459636), params={'ema1_period': 24, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=300, value=None),\n FrozenTrial(number=301, state=1, values=[1128.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 49, 460169), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 49, 469511), params={'ema1_period': 23, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=301, value=None),\n FrozenTrial(number=302, state=1, values=[1090.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 49, 470049), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 49, 479467), params={'ema1_period': 24, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=302, value=None),\n FrozenTrial(number=303, state=1, values=[1158.38], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 49, 480909), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 49, 490461), params={'ema1_period': 23, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=303, value=None),\n FrozenTrial(number=304, state=1, values=[1148.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 49, 491032), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 49, 500679), params={'ema1_period': 22, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=304, value=None),\n FrozenTrial(number=305, state=1, values=[1080.18], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 49, 501216), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 49, 511111), params={'ema1_period': 25, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=305, value=None),\n FrozenTrial(number=306, state=1, values=[1158.38], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 49, 511647), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 49, 520741), params={'ema1_period': 23, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=306, value=None),\n FrozenTrial(number=307, state=1, values=[1128.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 49, 521230), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 49, 530552), params={'ema1_period': 24, 'ema2_period': 23}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=307, value=None),\n FrozenTrial(number=308, state=1, values=[1039.58], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 49, 531070), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 49, 540189), params={'ema1_period': 15, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=308, value=None),\n FrozenTrial(number=309, state=1, values=[1128.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 49, 540707), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 49, 550125), params={'ema1_period': 23, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=309, value=None),\n FrozenTrial(number=310, state=1, values=[1118.38], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 49, 550636), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 49, 559901), params={'ema1_period': 24, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=310, value=None),\n FrozenTrial(number=311, state=1, values=[1129.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 49, 560371), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 49, 569691), params={'ema1_period': 24, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=311, value=None),\n FrozenTrial(number=312, state=1, values=[1090.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 49, 570271), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 49, 582188), params={'ema1_period': 23, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=312, value=None),\n FrozenTrial(number=313, state=1, values=[1090.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 49, 583227), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 49, 600873), params={'ema1_period': 24, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=313, value=None),\n FrozenTrial(number=314, state=1, values=[892.98], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 49, 601759), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 49, 618166), params={'ema1_period': 22, 'ema2_period': 36}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=314, value=None),\n FrozenTrial(number=315, state=1, values=[1097.08], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 49, 618895), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 49, 631890), params={'ema1_period': 21, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=315, value=None),\n FrozenTrial(number=316, state=1, values=[1010.38], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 49, 632641), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 49, 642902), params={'ema1_period': 25, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=316, value=None),\n FrozenTrial(number=317, state=1, values=[1168.98], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 49, 643554), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 49, 653068), params={'ema1_period': 23, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=317, value=None),\n FrozenTrial(number=318, state=1, values=[1148.18], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 49, 653438), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 49, 663263), params={'ema1_period': 24, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=318, value=None),\n FrozenTrial(number=319, state=1, values=[1006.38], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 49, 663771), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 49, 673368), params={'ema1_period': 19, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=319, value=None),\n FrozenTrial(number=320, state=1, values=[1100.68], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 49, 673904), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 49, 683400), params={'ema1_period': 23, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=320, value=None),\n FrozenTrial(number=321, state=1, values=[1016.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 49, 683921), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 49, 696246), params={'ema1_period': 24, 'ema2_period': 45}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=321, value=None),\n FrozenTrial(number=322, state=1, values=[1160.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 49, 696844), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 49, 712960), params={'ema1_period': 25, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=322, value=None),\n FrozenTrial(number=323, state=1, values=[1080.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 49, 713589), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 49, 727506), params={'ema1_period': 22, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=323, value=None),\n FrozenTrial(number=324, state=1, values=[836.38], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 49, 728057), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 49, 737503), params={'ema1_period': 11, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=324, value=None),\n FrozenTrial(number=325, state=1, values=[1017.68], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 49, 738026), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 49, 747823), params={'ema1_period': 20, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=325, value=None),\n FrozenTrial(number=326, state=1, values=[919.38], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 49, 748358), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 49, 757943), params={'ema1_period': 23, 'ema2_period': 19}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=326, value=None),\n FrozenTrial(number=327, state=1, values=[1168.98], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 49, 758475), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 49, 768332), params={'ema1_period': 24, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=327, value=None),\n FrozenTrial(number=328, state=1, values=[880.68], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 49, 768917), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 49, 779806), params={'ema1_period': 5, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=328, value=None),\n FrozenTrial(number=329, state=1, values=[1168.98], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 49, 780578), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 49, 796805), params={'ema1_period': 23, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=329, value=None),\n FrozenTrial(number=330, state=1, values=[1148.18], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 49, 797512), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 49, 812971), params={'ema1_period': 24, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=330, value=None),\n FrozenTrial(number=331, state=1, values=[1161.08], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 49, 813568), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 49, 823365), params={'ema1_period': 25, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=331, value=None),\n FrozenTrial(number=332, state=1, values=[1168.98], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 49, 823845), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 49, 833522), params={'ema1_period': 23, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=332, value=None),\n FrozenTrial(number=333, state=1, values=[1158.38], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 49, 834097), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 49, 843761), params={'ema1_period': 23, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=333, value=None),\n FrozenTrial(number=334, state=1, values=[1090.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 49, 844263), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 49, 853876), params={'ema1_period': 24, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=334, value=None),\n FrozenTrial(number=335, state=1, values=[1096.78], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 49, 854542), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 49, 864536), params={'ema1_period': 22, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=335, value=None),\n FrozenTrial(number=336, state=1, values=[1129.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 49, 865356), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 49, 879608), params={'ema1_period': 24, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=336, value=None),\n FrozenTrial(number=337, state=1, values=[1168.98], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 49, 880588), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 49, 895494), params={'ema1_period': 24, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=337, value=None),\n FrozenTrial(number=338, state=1, values=[1128.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 49, 896170), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 49, 909579), params={'ema1_period': 23, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=338, value=None),\n FrozenTrial(number=339, state=1, values=[1020.38], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 49, 910105), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 49, 919836), params={'ema1_period': 25, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=339, value=None),\n FrozenTrial(number=340, state=1, values=[1158.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 49, 920307), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 49, 930935), params={'ema1_period': 22, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=340, value=None),\n FrozenTrial(number=341, state=1, values=[1168.98], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 49, 931618), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 49, 943035), params={'ema1_period': 23, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=341, value=None),\n FrozenTrial(number=342, state=1, values=[1168.98], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 49, 943767), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 49, 954345), params={'ema1_period': 24, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=342, value=None),\n FrozenTrial(number=343, state=1, values=[1116.18], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 49, 955024), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 49, 965951), params={'ema1_period': 23, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=343, value=None),\n FrozenTrial(number=344, state=1, values=[1020.08], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 49, 966632), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 49, 978679), params={'ema1_period': 24, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=344, value=None),\n FrozenTrial(number=345, state=1, values=[1168.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 49, 979535), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 49, 990716), params={'ema1_period': 22, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=345, value=None),\n FrozenTrial(number=346, state=1, values=[1000.0], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 49, 991453), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 50, 2162), params={'ema1_period': 13, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=346, value=None),\n FrozenTrial(number=347, state=1, values=[1100.68], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 50, 2783), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 50, 12823), params={'ema1_period': 23, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=347, value=None),\n FrozenTrial(number=348, state=1, values=[971.18], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 50, 13373), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 50, 23381), params={'ema1_period': 24, 'ema2_period': 40}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=348, value=None),\n FrozenTrial(number=349, state=1, values=[1158.38], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 50, 24000), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 50, 33907), params={'ema1_period': 23, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=349, value=None),\n FrozenTrial(number=350, state=1, values=[1160.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 50, 34531), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 50, 44363), params={'ema1_period': 25, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=350, value=None),\n FrozenTrial(number=351, state=1, values=[1129.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 50, 45043), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 50, 55273), params={'ema1_period': 24, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=351, value=None),\n FrozenTrial(number=352, state=1, values=[1100.68], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 50, 55789), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 50, 67631), params={'ema1_period': 23, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=352, value=None),\n FrozenTrial(number=353, state=1, values=[1059.98], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 50, 68540), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 50, 85528), params={'ema1_period': 24, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=353, value=None),\n FrozenTrial(number=354, state=1, values=[1158.38], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 50, 86213), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 50, 100901), params={'ema1_period': 23, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=354, value=None),\n FrozenTrial(number=355, state=1, values=[1118.38], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 50, 101476), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 50, 111445), params={'ema1_period': 24, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=355, value=None),\n FrozenTrial(number=356, state=1, values=[1007.38], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 50, 111876), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 50, 122298), params={'ema1_period': 16, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=356, value=None),\n FrozenTrial(number=357, state=1, values=[1059.08], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 50, 123028), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 50, 133104), params={'ema1_period': 17, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=357, value=None),\n FrozenTrial(number=358, state=1, values=[1161.08], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 50, 133585), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 50, 143798), params={'ema1_period': 25, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=358, value=None),\n FrozenTrial(number=359, state=1, values=[1168.98], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 50, 144328), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 50, 156862), params={'ema1_period': 23, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=359, value=None),\n FrozenTrial(number=360, state=1, values=[1090.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 50, 157853), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 50, 174667), params={'ema1_period': 24, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=360, value=None),\n FrozenTrial(number=361, state=1, values=[1096.78], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 50, 175377), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 50, 190243), params={'ema1_period': 22, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=361, value=None),\n FrozenTrial(number=362, state=1, values=[1158.38], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 50, 190804), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 50, 201074), params={'ema1_period': 23, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=362, value=None),\n FrozenTrial(number=363, state=1, values=[1129.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 50, 201479), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 50, 211946), params={'ema1_period': 24, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=363, value=None),\n FrozenTrial(number=364, state=1, values=[1090.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 50, 212461), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 50, 222636), params={'ema1_period': 24, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=364, value=None),\n FrozenTrial(number=365, state=1, values=[1096.78], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 50, 223155), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 50, 233747), params={'ema1_period': 22, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=365, value=None),\n FrozenTrial(number=366, state=1, values=[1010.38], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 50, 234377), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 50, 247002), params={'ema1_period': 25, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=366, value=None),\n FrozenTrial(number=367, state=1, values=[959.08], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 50, 247848), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 50, 265425), params={'ema1_period': 23, 'ema2_period': 20}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=367, value=None),\n FrozenTrial(number=368, state=1, values=[1158.38], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 50, 265973), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 50, 280137), params={'ema1_period': 23, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=368, value=None),\n FrozenTrial(number=369, state=1, values=[1059.98], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 50, 280700), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 50, 291004), params={'ema1_period': 24, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=369, value=None),\n FrozenTrial(number=370, state=1, values=[1069.98], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 50, 291488), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 50, 301972), params={'ema1_period': 23, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=370, value=None),\n FrozenTrial(number=371, state=1, values=[1118.38], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 50, 302611), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 50, 314364), params={'ema1_period': 24, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=371, value=None),\n FrozenTrial(number=372, state=1, values=[1168.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 50, 315237), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 50, 326779), params={'ema1_period': 22, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=372, value=None),\n FrozenTrial(number=373, state=1, values=[1100.68], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 50, 327633), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 50, 343140), params={'ema1_period': 23, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=373, value=None),\n FrozenTrial(number=374, state=1, values=[1158.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 50, 344383), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 50, 362380), params={'ema1_period': 21, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=374, value=None),\n FrozenTrial(number=375, state=1, values=[1161.08], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 50, 363264), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 50, 377557), params={'ema1_period': 25, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=375, value=None),\n FrozenTrial(number=376, state=1, values=[1129.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 50, 378018), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 50, 392645), params={'ema1_period': 24, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=376, value=None),\n FrozenTrial(number=377, state=1, values=[1128.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 50, 393780), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 50, 404671), params={'ema1_period': 23, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=377, value=None),\n FrozenTrial(number=378, state=1, values=[1080.18], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 50, 405337), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 50, 415995), params={'ema1_period': 25, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=378, value=None),\n FrozenTrial(number=379, state=1, values=[830.18], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 50, 416607), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 50, 428485), params={'ema1_period': 9, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=379, value=None),\n FrozenTrial(number=380, state=1, values=[1129.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 50, 429332), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 50, 442146), params={'ema1_period': 24, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=380, value=None),\n FrozenTrial(number=381, state=1, values=[1128.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 50, 442907), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 50, 460112), params={'ema1_period': 23, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=381, value=None),\n FrozenTrial(number=382, state=1, values=[1090.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 50, 460721), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 50, 471357), params={'ema1_period': 23, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=382, value=None),\n FrozenTrial(number=383, state=1, values=[1148.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 50, 471912), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 50, 482615), params={'ema1_period': 22, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=383, value=None),\n FrozenTrial(number=384, state=1, values=[1168.98], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 50, 483288), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 50, 495912), params={'ema1_period': 24, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=384, value=None),\n FrozenTrial(number=385, state=1, values=[1118.38], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 50, 496570), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 50, 507514), params={'ema1_period': 24, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=385, value=None),\n FrozenTrial(number=386, state=1, values=[1010.68], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 50, 508132), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 50, 519382), params={'ema1_period': 23, 'ema2_period': 44}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=386, value=None),\n FrozenTrial(number=387, state=1, values=[1080.18], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 50, 519994), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 50, 531930), params={'ema1_period': 25, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=387, value=None),\n FrozenTrial(number=388, state=1, values=[1006.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 50, 532589), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 50, 544124), params={'ema1_period': 24, 'ema2_period': 48}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=388, value=None),\n FrozenTrial(number=389, state=1, values=[1128.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 50, 544762), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 50, 555608), params={'ema1_period': 23, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=389, value=None),\n FrozenTrial(number=390, state=1, values=[1129.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 50, 556164), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 50, 567015), params={'ema1_period': 24, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=390, value=None),\n FrozenTrial(number=391, state=1, values=[1168.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 50, 567587), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 50, 578140), params={'ema1_period': 22, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=391, value=None),\n FrozenTrial(number=392, state=1, values=[1100.68], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 50, 578728), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 50, 589130), params={'ema1_period': 23, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=392, value=None),\n FrozenTrial(number=393, state=1, values=[941.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 50, 589672), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 50, 600414), params={'ema1_period': 24, 'ema2_period': 25}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=393, value=None),\n FrozenTrial(number=394, state=1, values=[1168.98], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 50, 600918), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 50, 612317), params={'ema1_period': 23, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=394, value=None),\n FrozenTrial(number=395, state=1, values=[874.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 50, 613220), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 50, 625246), params={'ema1_period': 22, 'ema2_period': 33}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=395, value=None),\n FrozenTrial(number=396, state=1, values=[1148.18], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 50, 626057), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 50, 637642), params={'ema1_period': 24, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=396, value=None),\n FrozenTrial(number=397, state=1, values=[1059.98], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 50, 638219), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 50, 649494), params={'ema1_period': 24, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=397, value=None),\n FrozenTrial(number=398, state=1, values=[1161.08], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 50, 649999), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 50, 660544), params={'ema1_period': 25, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=398, value=None),\n FrozenTrial(number=399, state=1, values=[1158.38], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 50, 661145), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 50, 671932), params={'ema1_period': 23, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=399, value=None),\n FrozenTrial(number=400, state=1, values=[1148.18], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 50, 672461), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 50, 683125), params={'ema1_period': 24, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=400, value=None),\n FrozenTrial(number=401, state=1, values=[1168.98], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 50, 683719), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 50, 697697), params={'ema1_period': 23, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=401, value=None),\n FrozenTrial(number=402, state=1, values=[1100.68], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 50, 698378), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 50, 713423), params={'ema1_period': 23, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=402, value=None),\n FrozenTrial(number=403, state=1, values=[1161.08], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 50, 714127), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 50, 725716), params={'ema1_period': 25, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=403, value=None),\n FrozenTrial(number=404, state=1, values=[1116.18], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 50, 726309), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 50, 737614), params={'ema1_period': 23, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=404, value=None),\n FrozenTrial(number=405, state=1, values=[1129.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 50, 738230), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 50, 749107), params={'ema1_period': 24, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=405, value=None),\n FrozenTrial(number=406, state=1, values=[1096.78], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 50, 749585), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 50, 763745), params={'ema1_period': 22, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=406, value=None),\n FrozenTrial(number=407, state=1, values=[1090.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 50, 764725), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 50, 777135), params={'ema1_period': 24, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=407, value=None),\n FrozenTrial(number=408, state=1, values=[1069.98], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 50, 777790), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 50, 789523), params={'ema1_period': 23, 'ema2_period': 16}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=408, value=None),\n FrozenTrial(number=409, state=1, values=[1006.38], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 50, 790000), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 50, 804438), params={'ema1_period': 19, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=409, value=None),\n FrozenTrial(number=410, state=1, values=[1010.38], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 50, 805501), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 50, 822860), params={'ema1_period': 25, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=410, value=None),\n FrozenTrial(number=411, state=1, values=[1090.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 50, 823501), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 50, 837942), params={'ema1_period': 24, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=411, value=None),\n FrozenTrial(number=412, state=1, values=[1168.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 50, 838527), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 50, 849255), params={'ema1_period': 22, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=412, value=None),\n FrozenTrial(number=413, state=1, values=[1148.18], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 50, 849841), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 50, 860850), params={'ema1_period': 24, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=413, value=None),\n FrozenTrial(number=414, state=1, values=[1168.98], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 50, 861450), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 50, 872054), params={'ema1_period': 23, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=414, value=None),\n FrozenTrial(number=415, state=1, values=[1038.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 50, 872558), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 50, 883532), params={'ema1_period': 23, 'ema2_period': 22}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=415, value=None),\n FrozenTrial(number=416, state=1, values=[1168.98], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 50, 884055), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 50, 897723), params={'ema1_period': 24, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=416, value=None),\n FrozenTrial(number=417, state=1, values=[1090.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 50, 898514), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 50, 915770), params={'ema1_period': 23, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=417, value=None),\n FrozenTrial(number=418, state=1, values=[1010.38], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 50, 916334), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 50, 932605), params={'ema1_period': 25, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=418, value=None),\n FrozenTrial(number=419, state=1, values=[1090.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 50, 933167), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 50, 944110), params={'ema1_period': 24, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=419, value=None),\n FrozenTrial(number=420, state=1, values=[1148.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 50, 944677), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 50, 955442), params={'ema1_period': 22, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=420, value=None),\n FrozenTrial(number=421, state=1, values=[1116.18], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 50, 955984), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 50, 966782), params={'ema1_period': 23, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=421, value=None),\n FrozenTrial(number=422, state=1, values=[1168.98], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 50, 967270), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 50, 978177), params={'ema1_period': 24, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=422, value=None),\n FrozenTrial(number=423, state=1, values=[1128.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 50, 978892), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 50, 994379), params={'ema1_period': 23, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=423, value=None),\n FrozenTrial(number=424, state=1, values=[1168.98], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 50, 995184), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 51, 13666), params={'ema1_period': 24, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=424, value=None),\n FrozenTrial(number=425, state=1, values=[1100.68], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 51, 14372), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 51, 27864), params={'ema1_period': 23, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=425, value=None),\n FrozenTrial(number=426, state=1, values=[1160.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 51, 28407), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 51, 39593), params={'ema1_period': 25, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=426, value=None),\n FrozenTrial(number=427, state=1, values=[1026.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 51, 40080), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 51, 51029), params={'ema1_period': 18, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=427, value=None),\n FrozenTrial(number=428, state=1, values=[1070.08], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 51, 51612), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 51, 62754), params={'ema1_period': 22, 'ema2_period': 17}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=428, value=None),\n FrozenTrial(number=429, state=1, values=[1168.98], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 51, 63462), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 51, 79301), params={'ema1_period': 24, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=429, value=None),\n FrozenTrial(number=430, state=1, values=[1168.98], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 51, 80766), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 51, 96212), params={'ema1_period': 23, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=430, value=None),\n FrozenTrial(number=431, state=1, values=[1059.98], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 51, 97114), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 51, 110286), params={'ema1_period': 24, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=431, value=None),\n FrozenTrial(number=432, state=1, values=[1128.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 51, 111019), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 51, 123592), params={'ema1_period': 23, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=432, value=None),\n FrozenTrial(number=433, state=1, values=[1129.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 51, 124268), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 51, 138559), params={'ema1_period': 24, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=433, value=None),\n FrozenTrial(number=434, state=1, values=[1080.18], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 51, 139220), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 51, 151082), params={'ema1_period': 25, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=434, value=None),\n FrozenTrial(number=435, state=1, values=[1168.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 51, 151596), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 51, 163001), params={'ema1_period': 22, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=435, value=None),\n FrozenTrial(number=436, state=1, values=[1128.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 51, 163738), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 51, 179488), params={'ema1_period': 23, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=436, value=None),\n FrozenTrial(number=437, state=1, values=[1007.98], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 51, 180175), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 51, 195800), params={'ema1_period': 21, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=437, value=None),\n FrozenTrial(number=438, state=1, values=[1168.98], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 51, 196375), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 51, 208119), params={'ema1_period': 23, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=438, value=None),\n FrozenTrial(number=439, state=1, values=[931.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 51, 208744), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 51, 220950), params={'ema1_period': 24, 'ema2_period': 38}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=439, value=None),\n FrozenTrial(number=440, state=1, values=[1168.98], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 51, 221653), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 51, 233572), params={'ema1_period': 24, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=440, value=None),\n FrozenTrial(number=441, state=1, values=[1080.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 51, 234128), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 51, 244790), params={'ema1_period': 22, 'ema2_period': 15}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=441, value=None),\n FrozenTrial(number=442, state=1, values=[1100.68], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 51, 245297), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 51, 256419), params={'ema1_period': 23, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=442, value=None),\n FrozenTrial(number=443, state=1, values=[981.38], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 51, 256826), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 51, 268000), params={'ema1_period': 24, 'ema2_period': 27}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=443, value=None),\n FrozenTrial(number=444, state=1, values=[1010.38], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 51, 268477), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 51, 282406), params={'ema1_period': 25, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=444, value=None),\n FrozenTrial(number=445, state=1, values=[1158.38], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 51, 283197), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 51, 299730), params={'ema1_period': 23, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=445, value=None),\n FrozenTrial(number=446, state=1, values=[1090.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 51, 300470), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 51, 312162), params={'ema1_period': 24, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=446, value=None),\n FrozenTrial(number=447, state=1, values=[1128.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 51, 312793), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 51, 324179), params={'ema1_period': 23, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=447, value=None),\n FrozenTrial(number=448, state=1, values=[1168.98], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 51, 324748), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 51, 336076), params={'ema1_period': 24, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=448, value=None),\n FrozenTrial(number=449, state=1, values=[1010.38], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 51, 336616), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 51, 348436), params={'ema1_period': 25, 'ema2_period': 13}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=449, value=None),\n FrozenTrial(number=450, state=1, values=[1090.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 51, 348990), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 51, 360980), params={'ema1_period': 24, 'ema2_period': 14}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=450, value=None),\n FrozenTrial(number=451, state=1, values=[1168.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 51, 361683), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 51, 373395), params={'ema1_period': 22, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=451, value=None),\n FrozenTrial(number=452, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 51, 374010), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 51, 385615), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=452, value=None),\n FrozenTrial(number=453, state=1, values=[1153.78], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 51, 386087), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 51, 397760), params={'ema1_period': 13, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=453, value=None),\n FrozenTrial(number=454, state=1, values=[1129.58], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 51, 398309), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 51, 409846), params={'ema1_period': 25, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=454, value=None),\n FrozenTrial(number=455, state=1, values=[1120.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 51, 410712), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 51, 423916), params={'ema1_period': 15, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=455, value=None),\n FrozenTrial(number=456, state=1, values=[1163.58], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 51, 424949), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 51, 438894), params={'ema1_period': 13, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=456, value=None),\n FrozenTrial(number=457, state=1, values=[1170.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 51, 439629), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 51, 452235), params={'ema1_period': 14, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=457, value=None),\n FrozenTrial(number=458, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 51, 452853), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 51, 468095), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=458, value=None),\n FrozenTrial(number=459, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 51, 468789), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 51, 480714), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=459, value=None),\n FrozenTrial(number=460, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 51, 481283), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 51, 492694), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=460, value=None),\n FrozenTrial(number=461, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 51, 493246), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 51, 505866), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=461, value=None),\n FrozenTrial(number=462, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 51, 506563), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 51, 520045), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=462, value=None),\n FrozenTrial(number=463, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 51, 520849), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 51, 534021), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=463, value=None),\n FrozenTrial(number=464, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 51, 534721), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 51, 547122), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=464, value=None),\n FrozenTrial(number=465, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 51, 547703), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 51, 559421), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=465, value=None),\n FrozenTrial(number=466, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 51, 559962), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 51, 571778), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=466, value=None),\n FrozenTrial(number=467, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 51, 572344), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 51, 584241), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=467, value=None),\n FrozenTrial(number=468, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 51, 584802), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 51, 596867), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=468, value=None),\n FrozenTrial(number=469, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 51, 597468), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 51, 610425), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=469, value=None),\n FrozenTrial(number=470, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 51, 611392), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 51, 629497), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=470, value=None),\n FrozenTrial(number=471, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 51, 630243), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 51, 644393), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=471, value=None),\n FrozenTrial(number=472, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 51, 644982), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 51, 656827), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=472, value=None),\n FrozenTrial(number=473, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 51, 657390), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 51, 669078), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=473, value=None),\n FrozenTrial(number=474, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 51, 669622), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 51, 681114), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=474, value=None),\n FrozenTrial(number=475, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 51, 681994), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 51, 693809), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=475, value=None),\n FrozenTrial(number=476, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 51, 694553), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 51, 714510), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=476, value=None),\n FrozenTrial(number=477, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 51, 715348), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 51, 732347), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=477, value=None),\n FrozenTrial(number=478, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 51, 732936), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 51, 744999), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=478, value=None),\n FrozenTrial(number=479, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 51, 745553), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 51, 757473), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=479, value=None),\n FrozenTrial(number=480, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 51, 758034), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 51, 771065), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=480, value=None),\n FrozenTrial(number=481, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 51, 771839), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 51, 785943), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=481, value=None),\n FrozenTrial(number=482, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 51, 787272), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 51, 805979), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=482, value=None),\n FrozenTrial(number=483, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 51, 806819), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 51, 825435), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=483, value=None),\n FrozenTrial(number=484, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 51, 826316), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 51, 840475), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=484, value=None),\n FrozenTrial(number=485, state=1, values=[1120.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 51, 841003), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 51, 852611), params={'ema1_period': 15, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=485, value=None),\n FrozenTrial(number=486, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 51, 853175), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 51, 864690), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=486, value=None),\n FrozenTrial(number=487, state=1, values=[1153.78], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 51, 865238), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 51, 876898), params={'ema1_period': 13, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=487, value=None),\n FrozenTrial(number=488, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 51, 877441), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 51, 891849), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=488, value=None),\n FrozenTrial(number=489, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 51, 892749), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 51, 911930), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=489, value=None),\n FrozenTrial(number=490, state=1, values=[1120.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 51, 912602), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 51, 927518), params={'ema1_period': 15, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=490, value=None),\n FrozenTrial(number=491, state=1, values=[1153.78], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 51, 928075), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 51, 939868), params={'ema1_period': 13, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=491, value=None),\n FrozenTrial(number=492, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 51, 940457), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 51, 952070), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=492, value=None),\n FrozenTrial(number=493, state=1, values=[1120.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 51, 952588), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 51, 964367), params={'ema1_period': 15, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=493, value=None),\n FrozenTrial(number=494, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 51, 965162), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 51, 981002), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=494, value=None),\n FrozenTrial(number=495, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 51, 981900), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 52, 468), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=495, value=None),\n FrozenTrial(number=496, state=1, values=[1153.78], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 52, 1054), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 52, 15286), params={'ema1_period': 13, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=496, value=None),\n FrozenTrial(number=497, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 52, 15861), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 52, 27661), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=497, value=None),\n FrozenTrial(number=498, state=1, values=[1120.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 52, 28207), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 52, 39682), params={'ema1_period': 15, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=498, value=None),\n FrozenTrial(number=499, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 52, 40181), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 52, 52024), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=499, value=None),\n FrozenTrial(number=500, state=1, values=[1153.78], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 52, 52581), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 52, 67106), params={'ema1_period': 13, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=500, value=None),\n FrozenTrial(number=501, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 52, 68177), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 52, 87849), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=501, value=None),\n FrozenTrial(number=502, state=1, values=[1120.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 52, 88593), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 52, 104975), params={'ema1_period': 15, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=502, value=None),\n FrozenTrial(number=503, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 52, 105677), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 52, 117988), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=503, value=None),\n FrozenTrial(number=504, state=1, values=[1120.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 52, 118535), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 52, 130613), params={'ema1_period': 15, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=504, value=None),\n FrozenTrial(number=505, state=1, values=[1153.78], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 52, 131165), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 52, 143048), params={'ema1_period': 13, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=505, value=None),\n FrozenTrial(number=506, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 52, 143599), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 52, 156634), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=506, value=None),\n FrozenTrial(number=507, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 52, 157469), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 52, 170916), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=507, value=None),\n FrozenTrial(number=508, state=1, values=[1153.78], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 52, 171528), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 52, 184586), params={'ema1_period': 13, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=508, value=None),\n FrozenTrial(number=509, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 52, 185180), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 52, 197316), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=509, value=None),\n FrozenTrial(number=510, state=1, values=[1120.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 52, 197871), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 52, 210572), params={'ema1_period': 15, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=510, value=None),\n FrozenTrial(number=511, state=1, values=[1153.78], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 52, 211477), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 52, 224175), params={'ema1_period': 13, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=511, value=None),\n FrozenTrial(number=512, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 52, 224748), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 52, 237708), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=512, value=None),\n FrozenTrial(number=513, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 52, 238561), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 52, 252736), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=513, value=None),\n FrozenTrial(number=514, state=1, values=[1120.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 52, 253501), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 52, 266660), params={'ema1_period': 15, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=514, value=None),\n FrozenTrial(number=515, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 52, 267319), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 52, 280091), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=515, value=None),\n FrozenTrial(number=516, state=1, values=[1153.78], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 52, 280530), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 52, 292931), params={'ema1_period': 13, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=516, value=None),\n FrozenTrial(number=517, state=1, values=[1170.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 52, 293582), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 52, 305928), params={'ema1_period': 14, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=517, value=None),\n FrozenTrial(number=518, state=1, values=[1120.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 52, 306525), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 52, 318483), params={'ema1_period': 15, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=518, value=None),\n FrozenTrial(number=519, state=1, values=[1170.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 52, 318968), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 52, 331748), params={'ema1_period': 14, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=519, value=None),\n FrozenTrial(number=520, state=1, values=[1039.58], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 52, 332673), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 52, 346666), params={'ema1_period': 16, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=520, value=None),\n FrozenTrial(number=521, state=1, values=[1153.78], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 52, 347404), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 52, 360440), params={'ema1_period': 13, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=521, value=None),\n FrozenTrial(number=522, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 52, 361038), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 52, 373364), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=522, value=None),\n FrozenTrial(number=523, state=1, values=[1170.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 52, 373946), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 52, 386131), params={'ema1_period': 14, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=523, value=None),\n FrozenTrial(number=524, state=1, values=[1120.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 52, 386709), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 52, 402915), params={'ema1_period': 15, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=524, value=None),\n FrozenTrial(number=525, state=1, values=[1163.58], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 52, 403630), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 52, 416178), params={'ema1_period': 13, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=525, value=None),\n FrozenTrial(number=526, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 52, 416745), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 52, 430595), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=526, value=None),\n FrozenTrial(number=527, state=1, values=[1170.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 52, 431388), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 52, 444575), params={'ema1_period': 14, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=527, value=None),\n FrozenTrial(number=528, state=1, values=[1120.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 52, 445252), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 52, 462539), params={'ema1_period': 15, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=528, value=None),\n FrozenTrial(number=529, state=1, values=[1163.58], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 52, 463307), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 52, 476671), params={'ema1_period': 13, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=529, value=None),\n FrozenTrial(number=530, state=1, values=[1139.08], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 52, 477468), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 52, 490237), params={'ema1_period': 12, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=530, value=None),\n FrozenTrial(number=531, state=1, values=[1170.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 52, 490902), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 52, 503802), params={'ema1_period': 14, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=531, value=None),\n FrozenTrial(number=532, state=1, values=[1120.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 52, 504483), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 52, 521202), params={'ema1_period': 15, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=532, value=None),\n FrozenTrial(number=533, state=1, values=[1170.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 52, 523157), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 52, 538423), params={'ema1_period': 14, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=533, value=None),\n FrozenTrial(number=534, state=1, values=[1153.78], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 52, 539211), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 52, 555255), params={'ema1_period': 13, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=534, value=None),\n FrozenTrial(number=535, state=1, values=[1170.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 52, 555821), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 52, 568130), params={'ema1_period': 14, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=535, value=None),\n FrozenTrial(number=536, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 52, 568599), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 52, 581230), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=536, value=None),\n FrozenTrial(number=537, state=1, values=[1139.08], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 52, 581828), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 52, 594258), params={'ema1_period': 12, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=537, value=None),\n FrozenTrial(number=538, state=1, values=[1080.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 52, 594927), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 52, 608712), params={'ema1_period': 15, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=538, value=None),\n FrozenTrial(number=539, state=1, values=[1153.78], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 52, 609731), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 52, 623900), params={'ema1_period': 13, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=539, value=None),\n FrozenTrial(number=540, state=1, values=[1170.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 52, 624680), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 52, 638004), params={'ema1_period': 14, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=540, value=None),\n FrozenTrial(number=541, state=1, values=[1080.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 52, 638768), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 52, 651372), params={'ema1_period': 15, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=541, value=None),\n FrozenTrial(number=542, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 52, 651957), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 52, 664201), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=542, value=None),\n FrozenTrial(number=543, state=1, values=[1153.78], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 52, 664850), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 52, 677230), params={'ema1_period': 13, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=543, value=None),\n FrozenTrial(number=544, state=1, values=[1170.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 52, 677793), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 52, 690288), params={'ema1_period': 14, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=544, value=None),\n FrozenTrial(number=545, state=1, values=[1120.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 52, 690793), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 52, 705786), params={'ema1_period': 15, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=545, value=None),\n FrozenTrial(number=546, state=1, values=[1039.58], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 52, 706784), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 52, 727452), params={'ema1_period': 16, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=546, value=None),\n FrozenTrial(number=547, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 52, 728182), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 52, 744048), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=547, value=None),\n FrozenTrial(number=548, state=1, values=[1153.78], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 52, 744671), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 52, 757686), params={'ema1_period': 13, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=548, value=None),\n FrozenTrial(number=549, state=1, values=[1170.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 52, 758303), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 52, 770910), params={'ema1_period': 14, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=549, value=None),\n FrozenTrial(number=550, state=1, values=[1170.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 52, 771446), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 52, 784165), params={'ema1_period': 14, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=550, value=None),\n FrozenTrial(number=551, state=1, values=[1120.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 52, 784713), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 52, 801965), params={'ema1_period': 15, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=551, value=None),\n FrozenTrial(number=552, state=1, values=[1153.78], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 52, 803160), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 52, 821796), params={'ema1_period': 13, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=552, value=None),\n FrozenTrial(number=553, state=1, values=[1170.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 52, 822360), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 52, 839619), params={'ema1_period': 14, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=553, value=None),\n FrozenTrial(number=554, state=1, values=[1120.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 52, 840239), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 52, 853114), params={'ema1_period': 15, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=554, value=None),\n FrozenTrial(number=555, state=1, values=[1170.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 52, 853585), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 52, 866585), params={'ema1_period': 14, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=555, value=None),\n FrozenTrial(number=556, state=1, values=[1153.78], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 52, 867132), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 52, 880117), params={'ema1_period': 13, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=556, value=None),\n FrozenTrial(number=557, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 52, 880667), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 52, 896252), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=557, value=None),\n FrozenTrial(number=558, state=1, values=[1170.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 52, 897081), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 52, 916942), params={'ema1_period': 14, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=558, value=None),\n FrozenTrial(number=559, state=1, values=[1120.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 52, 917628), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 52, 935243), params={'ema1_period': 15, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=559, value=None),\n FrozenTrial(number=560, state=1, values=[1163.58], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 52, 935861), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 52, 949433), params={'ema1_period': 13, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=560, value=None),\n FrozenTrial(number=561, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 52, 950320), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 52, 964294), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=561, value=None),\n FrozenTrial(number=562, state=1, values=[1170.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 52, 964958), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 52, 979040), params={'ema1_period': 14, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=562, value=None),\n FrozenTrial(number=563, state=1, values=[1120.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 52, 979763), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 52, 998177), params={'ema1_period': 15, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=563, value=None),\n FrozenTrial(number=564, state=1, values=[1163.58], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 52, 998949), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 53, 17541), params={'ema1_period': 13, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=564, value=None),\n FrozenTrial(number=565, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 53, 18342), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 53, 34198), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=565, value=None),\n FrozenTrial(number=566, state=1, values=[1080.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 53, 34871), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 53, 48716), params={'ema1_period': 15, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=566, value=None),\n FrozenTrial(number=567, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 53, 49480), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 53, 64468), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=567, value=None),\n FrozenTrial(number=568, state=1, values=[1080.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 53, 65105), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 53, 79197), params={'ema1_period': 15, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=568, value=None),\n FrozenTrial(number=569, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 53, 80080), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 53, 97647), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=569, value=None),\n FrozenTrial(number=570, state=1, values=[1163.58], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 53, 98636), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 53, 114324), params={'ema1_period': 13, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=570, value=None),\n FrozenTrial(number=571, state=1, values=[1153.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 53, 114997), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 53, 135142), params={'ema1_period': 12, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=571, value=None),\n FrozenTrial(number=572, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 53, 135993), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 53, 148919), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=572, value=None),\n FrozenTrial(number=573, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 53, 149476), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 53, 164775), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=573, value=None),\n FrozenTrial(number=574, state=1, values=[1153.78], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 53, 165721), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 53, 182394), params={'ema1_period': 13, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=574, value=None),\n FrozenTrial(number=575, state=1, values=[1170.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 53, 183317), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 53, 200972), params={'ema1_period': 14, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=575, value=None),\n FrozenTrial(number=576, state=1, values=[1080.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 53, 202001), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 53, 220197), params={'ema1_period': 15, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=576, value=None),\n FrozenTrial(number=577, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 53, 221412), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 53, 237324), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=577, value=None),\n FrozenTrial(number=578, state=1, values=[1170.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 53, 238001), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 53, 252391), params={'ema1_period': 14, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=578, value=None),\n FrozenTrial(number=579, state=1, values=[999.58], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 53, 253060), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 53, 266700), params={'ema1_period': 13, 'ema2_period': 31}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=579, value=None),\n FrozenTrial(number=580, state=1, values=[1120.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 53, 267372), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 53, 282235), params={'ema1_period': 15, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=580, value=None),\n FrozenTrial(number=581, state=1, values=[1153.78], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 53, 283242), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 53, 304576), params={'ema1_period': 13, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=581, value=None),\n FrozenTrial(number=582, state=1, values=[1170.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 53, 305457), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 53, 322849), params={'ema1_period': 14, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=582, value=None),\n FrozenTrial(number=583, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 53, 323487), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 53, 336581), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=583, value=None),\n FrozenTrial(number=584, state=1, values=[913.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 53, 337292), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 53, 350875), params={'ema1_period': 16, 'ema2_period': 43}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=584, value=None),\n FrozenTrial(number=585, state=1, values=[1120.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 53, 351556), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 53, 366275), params={'ema1_period': 15, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=585, value=None),\n FrozenTrial(number=586, state=1, values=[1170.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 53, 367034), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 53, 386568), params={'ema1_period': 14, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=586, value=None),\n FrozenTrial(number=587, state=1, values=[1163.58], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 53, 387348), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 53, 408066), params={'ema1_period': 13, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=587, value=None),\n FrozenTrial(number=588, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 53, 408854), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 53, 422602), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=588, value=None),\n FrozenTrial(number=589, state=1, values=[1170.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 53, 423236), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 53, 438510), params={'ema1_period': 14, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=589, value=None),\n FrozenTrial(number=590, state=1, values=[1120.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 53, 439324), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 53, 453366), params={'ema1_period': 15, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=590, value=None),\n FrozenTrial(number=591, state=1, values=[1153.78], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 53, 454263), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 53, 471354), params={'ema1_period': 13, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=591, value=None),\n FrozenTrial(number=592, state=1, values=[1170.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 53, 472665), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 53, 494221), params={'ema1_period': 14, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=592, value=None),\n FrozenTrial(number=593, state=1, values=[951.68], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 53, 494992), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 53, 701693), params={'ema1_period': 14, 'ema2_period': 50}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=593, value=None),\n FrozenTrial(number=594, state=1, values=[1080.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 53, 702618), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 53, 717390), params={'ema1_period': 15, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=594, value=None),\n FrozenTrial(number=595, state=1, values=[1153.78], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 53, 718119), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 53, 731626), params={'ema1_period': 13, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=595, value=None),\n FrozenTrial(number=596, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 53, 732460), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 53, 753601), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=596, value=None),\n FrozenTrial(number=597, state=1, values=[1080.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 53, 754499), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 53, 771140), params={'ema1_period': 15, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=597, value=None),\n FrozenTrial(number=598, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 53, 771769), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 53, 784332), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=598, value=None),\n FrozenTrial(number=599, state=1, values=[1153.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 53, 784721), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 53, 797497), params={'ema1_period': 12, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=599, value=None),\n FrozenTrial(number=600, state=1, values=[1153.78], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 53, 798035), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 53, 810465), params={'ema1_period': 13, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=600, value=None),\n FrozenTrial(number=601, state=1, values=[1170.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 53, 810843), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 53, 828138), params={'ema1_period': 14, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=601, value=None),\n FrozenTrial(number=602, state=1, values=[1120.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 53, 829091), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 53, 848113), params={'ema1_period': 15, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=602, value=None),\n FrozenTrial(number=603, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 53, 848800), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 53, 863690), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=603, value=None),\n FrozenTrial(number=604, state=1, values=[1163.58], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 53, 864297), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 53, 880212), params={'ema1_period': 13, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=604, value=None),\n FrozenTrial(number=605, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 53, 881055), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 53, 894517), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=605, value=None),\n FrozenTrial(number=606, state=1, values=[971.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 53, 895184), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 53, 908531), params={'ema1_period': 15, 'ema2_period': 35}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=606, value=None),\n FrozenTrial(number=607, state=1, values=[1039.58], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 53, 908990), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 53, 927729), params={'ema1_period': 16, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=607, value=None),\n FrozenTrial(number=608, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 53, 928967), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 53, 950242), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=608, value=None),\n FrozenTrial(number=609, state=1, values=[1163.58], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 53, 950904), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 53, 964013), params={'ema1_period': 13, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=609, value=None),\n FrozenTrial(number=610, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 53, 964580), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 53, 977426), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=610, value=None),\n FrozenTrial(number=611, state=1, values=[1080.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 53, 977978), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 53, 990818), params={'ema1_period': 15, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=611, value=None),\n FrozenTrial(number=612, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 53, 991399), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 54, 4497), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=612, value=None),\n FrozenTrial(number=613, state=1, values=[1163.58], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 54, 5268), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 54, 27187), params={'ema1_period': 13, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=613, value=None),\n FrozenTrial(number=614, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 54, 28106), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 54, 45150), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=614, value=None),\n FrozenTrial(number=615, state=1, values=[1080.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 54, 45712), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 54, 58531), params={'ema1_period': 15, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=615, value=None),\n FrozenTrial(number=616, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 54, 58935), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 54, 71713), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=616, value=None),\n FrozenTrial(number=617, state=1, values=[1163.58], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 54, 72174), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 54, 84873), params={'ema1_period': 13, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=617, value=None),\n FrozenTrial(number=618, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 54, 85360), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 54, 104498), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=618, value=None),\n FrozenTrial(number=619, state=1, values=[1120.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 54, 105858), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 54, 129995), params={'ema1_period': 15, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=619, value=None),\n FrozenTrial(number=620, state=1, values=[1170.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 54, 131142), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 54, 146989), params={'ema1_period': 14, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=620, value=None),\n FrozenTrial(number=621, state=1, values=[1163.58], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 54, 147968), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 54, 162445), params={'ema1_period': 13, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=621, value=None),\n FrozenTrial(number=622, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 54, 163152), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 54, 178019), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=622, value=None),\n FrozenTrial(number=623, state=1, values=[1120.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 54, 179025), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 54, 194398), params={'ema1_period': 15, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=623, value=None),\n FrozenTrial(number=624, state=1, values=[1170.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 54, 195332), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 54, 218763), params={'ema1_period': 14, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=624, value=None),\n FrozenTrial(number=625, state=1, values=[1153.78], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 54, 219644), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 54, 235606), params={'ema1_period': 13, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=625, value=None),\n FrozenTrial(number=626, state=1, values=[1170.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 54, 236225), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 54, 249571), params={'ema1_period': 14, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=626, value=None),\n FrozenTrial(number=627, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 54, 250227), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 54, 263143), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=627, value=None),\n FrozenTrial(number=628, state=1, values=[1120.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 54, 263730), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 54, 276490), params={'ema1_period': 15, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=628, value=None),\n FrozenTrial(number=629, state=1, values=[1163.58], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 54, 277316), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 54, 296665), params={'ema1_period': 13, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=629, value=None),\n FrozenTrial(number=630, state=1, values=[1170.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 54, 297514), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 54, 318799), params={'ema1_period': 14, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=630, value=None),\n FrozenTrial(number=631, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 54, 319474), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 54, 332517), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=631, value=None),\n FrozenTrial(number=632, state=1, values=[970.58], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 54, 333067), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 54, 346058), params={'ema1_period': 15, 'ema2_period': 29}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=632, value=None),\n FrozenTrial(number=633, state=1, values=[1153.78], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 54, 346711), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 54, 359798), params={'ema1_period': 13, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=633, value=None),\n FrozenTrial(number=634, state=1, values=[1170.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 54, 360451), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 54, 373507), params={'ema1_period': 14, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=634, value=None),\n FrozenTrial(number=635, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 54, 374547), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 54, 389837), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=635, value=None),\n FrozenTrial(number=636, state=1, values=[1080.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 54, 390667), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 54, 405747), params={'ema1_period': 15, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=636, value=None),\n FrozenTrial(number=637, state=1, values=[1153.78], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 54, 406418), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 54, 420613), params={'ema1_period': 13, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=637, value=None),\n FrozenTrial(number=638, state=1, values=[1170.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 54, 421348), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 54, 434762), params={'ema1_period': 14, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=638, value=None),\n FrozenTrial(number=639, state=1, values=[1120.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 54, 435365), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 54, 449135), params={'ema1_period': 15, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=639, value=None),\n FrozenTrial(number=640, state=1, values=[831.68], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 54, 449982), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 54, 466982), params={'ema1_period': 14, 'ema2_period': 20}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=640, value=None),\n FrozenTrial(number=641, state=1, values=[1153.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 54, 468411), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 54, 483687), params={'ema1_period': 12, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=641, value=None),\n FrozenTrial(number=642, state=1, values=[1140.58], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 54, 484452), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 54, 499142), params={'ema1_period': 16, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=642, value=None),\n FrozenTrial(number=643, state=1, values=[1153.78], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 54, 499857), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 54, 513203), params={'ema1_period': 13, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=643, value=None),\n FrozenTrial(number=644, state=1, values=[1170.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 54, 513829), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 54, 526847), params={'ema1_period': 14, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=644, value=None),\n FrozenTrial(number=645, state=1, values=[1120.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 54, 527470), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 54, 540542), params={'ema1_period': 15, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=645, value=None),\n FrozenTrial(number=646, state=1, values=[1170.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 54, 541117), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 54, 554161), params={'ema1_period': 14, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=646, value=None),\n FrozenTrial(number=647, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 54, 554956), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 54, 569168), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=647, value=None),\n FrozenTrial(number=648, state=1, values=[1163.58], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 54, 570122), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 54, 584396), params={'ema1_period': 13, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=648, value=None),\n FrozenTrial(number=649, state=1, values=[1170.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 54, 585331), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 54, 599160), params={'ema1_period': 14, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=649, value=None),\n FrozenTrial(number=650, state=1, values=[1120.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 54, 599789), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 54, 612691), params={'ema1_period': 15, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=650, value=None),\n FrozenTrial(number=651, state=1, values=[1170.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 54, 613276), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 54, 626650), params={'ema1_period': 14, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=651, value=None),\n FrozenTrial(number=652, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 54, 627264), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 54, 640712), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=652, value=None),\n FrozenTrial(number=653, state=1, values=[1120.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 54, 641391), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 54, 655039), params={'ema1_period': 15, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=653, value=None),\n FrozenTrial(number=654, state=1, values=[1163.58], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 54, 655881), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 54, 671196), params={'ema1_period': 13, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=654, value=None),\n FrozenTrial(number=655, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 54, 671874), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 54, 686438), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=655, value=None),\n FrozenTrial(number=656, state=1, values=[1150.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 54, 687133), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 54, 700201), params={'ema1_period': 13, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=656, value=None),\n FrozenTrial(number=657, state=1, values=[1120.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 54, 701004), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 54, 716464), params={'ema1_period': 15, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=657, value=None),\n FrozenTrial(number=658, state=1, values=[1170.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 54, 717146), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 54, 731385), params={'ema1_period': 14, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=658, value=None),\n FrozenTrial(number=659, state=1, values=[1153.78], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 54, 731828), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 54, 748846), params={'ema1_period': 13, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=659, value=None),\n FrozenTrial(number=660, state=1, values=[1170.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 54, 749620), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 54, 764484), params={'ema1_period': 14, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=660, value=None),\n FrozenTrial(number=661, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 54, 765165), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 54, 780372), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=661, value=None),\n FrozenTrial(number=662, state=1, values=[931.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 54, 781145), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 54, 801062), params={'ema1_period': 15, 'ema2_period': 47}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=662, value=None),\n FrozenTrial(number=663, state=1, values=[1150.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 54, 801953), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 54, 818476), params={'ema1_period': 13, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=663, value=None),\n FrozenTrial(number=664, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 54, 819882), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 54, 839361), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=664, value=None),\n FrozenTrial(number=665, state=1, values=[1170.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 54, 840488), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 54, 862418), params={'ema1_period': 14, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=665, value=None),\n FrozenTrial(number=666, state=1, values=[959.98], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 54, 863149), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 54, 877992), params={'ema1_period': 15, 'ema2_period': 25}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=666, value=None),\n FrozenTrial(number=667, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 54, 878589), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 54, 892266), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=667, value=None),\n FrozenTrial(number=668, state=1, values=[1163.58], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 54, 892931), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 54, 906423), params={'ema1_period': 13, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=668, value=None),\n FrozenTrial(number=669, state=1, values=[879.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 54, 907460), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 54, 921546), params={'ema1_period': 14, 'ema2_period': 23}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=669, value=None),\n FrozenTrial(number=670, state=1, values=[813.68], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 54, 922102), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 54, 940420), params={'ema1_period': 15, 'ema2_period': 18}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=670, value=None),\n FrozenTrial(number=671, state=1, values=[1170.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 54, 941352), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 54, 963939), params={'ema1_period': 14, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=671, value=None),\n FrozenTrial(number=672, state=1, values=[990.58], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 54, 964605), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 54, 978274), params={'ema1_period': 6, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=672, value=None),\n FrozenTrial(number=673, state=1, values=[1150.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 54, 978864), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 54, 992088), params={'ema1_period': 13, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=673, value=None),\n FrozenTrial(number=674, state=1, values=[1120.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 54, 992682), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 55, 8043), params={'ema1_period': 15, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=674, value=None),\n FrozenTrial(number=675, state=1, values=[1170.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 55, 8987), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 55, 23588), params={'ema1_period': 14, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=675, value=None),\n FrozenTrial(number=676, state=1, values=[1000.0], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 55, 24684), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 55, 46284), params={'ema1_period': 12, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=676, value=None),\n FrozenTrial(number=677, state=1, values=[1153.78], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 55, 47253), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 55, 65955), params={'ema1_period': 13, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=677, value=None),\n FrozenTrial(number=678, state=1, values=[1170.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 55, 66619), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 55, 79967), params={'ema1_period': 14, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=678, value=None),\n FrozenTrial(number=679, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 55, 80682), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 55, 93924), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=679, value=None),\n FrozenTrial(number=680, state=1, values=[1080.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 55, 94501), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 55, 108117), params={'ema1_period': 15, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=680, value=None),\n FrozenTrial(number=681, state=1, values=[974.08], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 55, 108744), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 55, 126995), params={'ema1_period': 14, 'ema2_period': 41}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=681, value=None),\n FrozenTrial(number=682, state=1, values=[1153.78], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 55, 127924), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 55, 148214), params={'ema1_period': 13, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=682, value=None),\n FrozenTrial(number=683, state=1, values=[1080.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 55, 149008), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 55, 163612), params={'ema1_period': 15, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=683, value=None),\n FrozenTrial(number=684, state=1, values=[1060.38], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 55, 164190), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 55, 177679), params={'ema1_period': 14, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=684, value=None),\n FrozenTrial(number=685, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 55, 178310), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 55, 191960), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=685, value=None),\n FrozenTrial(number=686, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 55, 192514), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 55, 205999), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=686, value=None),\n FrozenTrial(number=687, state=1, values=[1163.58], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 55, 206622), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 55, 227356), params={'ema1_period': 13, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=687, value=None),\n FrozenTrial(number=688, state=1, values=[1039.58], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 55, 228233), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 55, 247886), params={'ema1_period': 15, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=688, value=None),\n FrozenTrial(number=689, state=1, values=[1140.58], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 55, 248844), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 55, 262605), params={'ema1_period': 16, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=689, value=None),\n FrozenTrial(number=690, state=1, values=[1153.78], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 55, 263387), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 55, 280471), params={'ema1_period': 13, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=690, value=None),\n FrozenTrial(number=691, state=1, values=[1170.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 55, 281298), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 55, 296253), params={'ema1_period': 14, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=691, value=None),\n FrozenTrial(number=692, state=1, values=[1060.38], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 55, 296958), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 55, 317563), params={'ema1_period': 14, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=692, value=None),\n FrozenTrial(number=693, state=1, values=[1170.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 55, 318421), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 55, 338548), params={'ema1_period': 14, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=693, value=None),\n FrozenTrial(number=694, state=1, values=[1120.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 55, 339225), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 55, 352638), params={'ema1_period': 15, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=694, value=None),\n FrozenTrial(number=695, state=1, values=[1153.78], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 55, 353218), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 55, 366957), params={'ema1_period': 13, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=695, value=None),\n FrozenTrial(number=696, state=1, values=[1170.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 55, 367536), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 55, 381168), params={'ema1_period': 14, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=696, value=None),\n FrozenTrial(number=697, state=1, values=[1120.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 55, 381743), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 55, 399996), params={'ema1_period': 15, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=697, value=None),\n FrozenTrial(number=698, state=1, values=[1163.58], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 55, 400890), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 55, 423358), params={'ema1_period': 13, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=698, value=None),\n FrozenTrial(number=699, state=1, values=[1060.38], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 55, 424047), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 55, 438124), params={'ema1_period': 14, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=699, value=None),\n FrozenTrial(number=700, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 55, 438724), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 55, 452664), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=700, value=None),\n FrozenTrial(number=701, state=1, values=[1120.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 55, 453259), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 55, 467079), params={'ema1_period': 15, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=701, value=None),\n FrozenTrial(number=702, state=1, values=[1163.58], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 55, 467749), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 55, 486658), params={'ema1_period': 13, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=702, value=None),\n FrozenTrial(number=703, state=1, values=[1060.38], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 55, 487555), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 55, 511730), params={'ema1_period': 14, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=703, value=None),\n FrozenTrial(number=704, state=1, values=[1170.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 55, 512598), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 55, 529380), params={'ema1_period': 14, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=704, value=None),\n FrozenTrial(number=705, state=1, values=[1120.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 55, 530476), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 55, 546783), params={'ema1_period': 15, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=705, value=None),\n FrozenTrial(number=706, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 55, 547753), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 55, 566826), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=706, value=None),\n FrozenTrial(number=707, state=1, values=[1163.58], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 55, 567979), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 55, 588999), params={'ema1_period': 13, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=707, value=None),\n FrozenTrial(number=708, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 55, 589873), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 55, 606231), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=708, value=None),\n FrozenTrial(number=709, state=1, values=[1060.38], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 55, 609078), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 55, 624158), params={'ema1_period': 14, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=709, value=None),\n FrozenTrial(number=710, state=1, values=[1140.58], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 55, 624915), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 55, 638852), params={'ema1_period': 16, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=710, value=None),\n FrozenTrial(number=711, state=1, values=[1080.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 55, 639368), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 55, 653440), params={'ema1_period': 15, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=711, value=None),\n FrozenTrial(number=712, state=1, values=[1150.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 55, 654148), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 55, 669460), params={'ema1_period': 13, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=712, value=None),\n FrozenTrial(number=713, state=1, values=[1170.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 55, 670359), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 55, 694289), params={'ema1_period': 14, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=713, value=None),\n FrozenTrial(number=714, state=1, values=[984.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 55, 695149), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 55, 710223), params={'ema1_period': 15, 'ema2_period': 39}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=714, value=None),\n FrozenTrial(number=715, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 55, 710843), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 55, 725017), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=715, value=None),\n FrozenTrial(number=716, state=1, values=[1153.78], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 55, 725716), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 55, 739736), params={'ema1_period': 13, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=716, value=None),\n FrozenTrial(number=717, state=1, values=[1170.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 55, 740356), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 55, 754402), params={'ema1_period': 14, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=717, value=None),\n FrozenTrial(number=718, state=1, values=[1120.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 55, 755067), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 55, 769579), params={'ema1_period': 15, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=718, value=None),\n FrozenTrial(number=719, state=1, values=[981.58], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 55, 770384), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 55, 786838), params={'ema1_period': 14, 'ema2_period': 33}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=719, value=None),\n FrozenTrial(number=720, state=1, values=[1150.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 55, 787663), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 55, 802982), params={'ema1_period': 13, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=720, value=None),\n FrozenTrial(number=721, state=1, values=[1153.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 55, 803586), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 55, 818291), params={'ema1_period': 12, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=721, value=None),\n FrozenTrial(number=722, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 55, 819278), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 55, 835906), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=722, value=None),\n FrozenTrial(number=723, state=1, values=[1019.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 55, 836621), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 55, 851633), params={'ema1_period': 14, 'ema2_period': 27}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=723, value=None),\n FrozenTrial(number=724, state=1, values=[1080.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 55, 852314), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 55, 866582), params={'ema1_period': 15, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=724, value=None),\n FrozenTrial(number=725, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 55, 867211), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 55, 888789), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=725, value=None),\n FrozenTrial(number=726, state=1, values=[851.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 55, 889780), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 55, 909230), params={'ema1_period': 13, 'ema2_period': 22}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=726, value=None),\n FrozenTrial(number=727, state=1, values=[1060.38], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 55, 909978), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 55, 924357), params={'ema1_period': 14, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=727, value=None),\n FrozenTrial(number=728, state=1, values=[1153.78], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 55, 924972), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 55, 939003), params={'ema1_period': 13, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=728, value=None),\n FrozenTrial(number=729, state=1, values=[971.08], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 55, 939519), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 55, 953543), params={'ema1_period': 15, 'ema2_period': 36}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=729, value=None),\n FrozenTrial(number=730, state=1, values=[1170.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 55, 954137), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 55, 971683), params={'ema1_period': 14, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=730, value=None),\n FrozenTrial(number=731, state=1, values=[1080.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 55, 973140), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 55, 996011), params={'ema1_period': 15, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=731, value=None),\n FrozenTrial(number=732, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 55, 996801), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 56, 11315), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=732, value=None),\n FrozenTrial(number=733, state=1, values=[1153.78], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 56, 11870), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 56, 25886), params={'ema1_period': 13, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=733, value=None),\n FrozenTrial(number=734, state=1, values=[1153.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 56, 26490), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 56, 40536), params={'ema1_period': 12, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=734, value=None),\n FrozenTrial(number=735, state=1, values=[1060.38], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 56, 41183), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 56, 55441), params={'ema1_period': 14, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=735, value=None),\n FrozenTrial(number=736, state=1, values=[1120.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 56, 56098), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 56, 78071), params={'ema1_period': 15, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=736, value=None),\n FrozenTrial(number=737, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 56, 79412), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 56, 101867), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=737, value=None),\n FrozenTrial(number=738, state=1, values=[1170.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 56, 102608), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 56, 116898), params={'ema1_period': 14, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=738, value=None),\n FrozenTrial(number=739, state=1, values=[1150.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 56, 117585), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 56, 131754), params={'ema1_period': 13, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=739, value=None),\n FrozenTrial(number=740, state=1, values=[1170.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 56, 132306), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 56, 146704), params={'ema1_period': 14, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=740, value=None),\n FrozenTrial(number=741, state=1, values=[1120.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 56, 147337), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 56, 163508), params={'ema1_period': 15, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=741, value=None),\n FrozenTrial(number=742, state=1, values=[1163.58], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 56, 164632), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 56, 189118), params={'ema1_period': 13, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=742, value=None),\n FrozenTrial(number=743, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 56, 190034), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 56, 205610), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=743, value=None),\n FrozenTrial(number=744, state=1, values=[1019.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 56, 206261), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 56, 222518), params={'ema1_period': 16, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=744, value=None),\n FrozenTrial(number=745, state=1, values=[1120.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 56, 223397), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 56, 240535), params={'ema1_period': 15, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=745, value=None),\n FrozenTrial(number=746, state=1, values=[1170.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 56, 241350), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 56, 260688), params={'ema1_period': 14, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=746, value=None),\n FrozenTrial(number=747, state=1, values=[1153.78], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 56, 261805), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 56, 284730), params={'ema1_period': 13, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=747, value=None),\n FrozenTrial(number=748, state=1, values=[1060.38], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 56, 285517), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 56, 301099), params={'ema1_period': 14, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=748, value=None),\n FrozenTrial(number=749, state=1, values=[1170.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 56, 301722), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 56, 315999), params={'ema1_period': 14, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=749, value=None),\n FrozenTrial(number=750, state=1, values=[1120.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 56, 316598), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 56, 331012), params={'ema1_period': 15, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=750, value=None),\n FrozenTrial(number=751, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 56, 332154), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 56, 348187), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=751, value=None),\n FrozenTrial(number=752, state=1, values=[1163.58], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 56, 349331), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 56, 375479), params={'ema1_period': 13, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=752, value=None),\n FrozenTrial(number=753, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 56, 376488), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 56, 393168), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=753, value=None),\n FrozenTrial(number=754, state=1, values=[813.68], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 56, 393891), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 56, 408340), params={'ema1_period': 15, 'ema2_period': 18}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=754, value=None),\n FrozenTrial(number=755, state=1, values=[1163.58], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 56, 409040), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 56, 423180), params={'ema1_period': 13, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=755, value=None),\n FrozenTrial(number=756, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 56, 423951), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 56, 438783), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=756, value=None),\n FrozenTrial(number=757, state=1, values=[1060.38], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 56, 439727), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 56, 463724), params={'ema1_period': 14, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=757, value=None),\n FrozenTrial(number=758, state=1, values=[1039.58], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 56, 464622), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 56, 482246), params={'ema1_period': 15, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=758, value=None),\n FrozenTrial(number=759, state=1, values=[1163.58], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 56, 482854), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 56, 497121), params={'ema1_period': 13, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=759, value=None),\n FrozenTrial(number=760, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 56, 497735), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 56, 512078), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=760, value=None),\n FrozenTrial(number=761, state=1, values=[1170.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 56, 512809), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 56, 527161), params={'ema1_period': 14, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=761, value=None),\n FrozenTrial(number=762, state=1, values=[1120.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 56, 527806), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 56, 549028), params={'ema1_period': 15, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=762, value=None),\n FrozenTrial(number=763, state=1, values=[1060.38], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 56, 550104), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 56, 571440), params={'ema1_period': 14, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=763, value=None),\n FrozenTrial(number=764, state=1, values=[1163.58], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 56, 572112), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 56, 586449), params={'ema1_period': 13, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=764, value=None),\n FrozenTrial(number=765, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 56, 587082), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 56, 601654), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=765, value=None),\n FrozenTrial(number=766, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 56, 602240), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 56, 616773), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=766, value=None),\n FrozenTrial(number=767, state=1, values=[1120.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 56, 617431), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 56, 636339), params={'ema1_period': 15, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=767, value=None),\n FrozenTrial(number=768, state=1, values=[1163.58], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 56, 637577), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 56, 659852), params={'ema1_period': 13, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=768, value=None),\n FrozenTrial(number=769, state=1, values=[1170.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 56, 660601), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 56, 677984), params={'ema1_period': 14, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=769, value=None),\n FrozenTrial(number=770, state=1, values=[1120.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 56, 678626), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 56, 693183), params={'ema1_period': 15, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=770, value=None),\n FrozenTrial(number=771, state=1, values=[1150.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 56, 694065), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 56, 708656), params={'ema1_period': 13, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=771, value=None),\n FrozenTrial(number=772, state=1, values=[1170.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 56, 709263), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 56, 723871), params={'ema1_period': 14, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=772, value=None),\n FrozenTrial(number=773, state=1, values=[1120.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 56, 724407), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 56, 745786), params={'ema1_period': 15, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=773, value=None),\n FrozenTrial(number=774, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 56, 746728), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 56, 768973), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=774, value=None),\n FrozenTrial(number=775, state=1, values=[1060.38], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 56, 769682), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 56, 784293), params={'ema1_period': 14, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=775, value=None),\n FrozenTrial(number=776, state=1, values=[1039.58], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 56, 785074), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 56, 799760), params={'ema1_period': 16, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=776, value=None),\n FrozenTrial(number=777, state=1, values=[1019.18], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 56, 800426), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 56, 815156), params={'ema1_period': 12, 'ema2_period': 31}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=777, value=None),\n FrozenTrial(number=778, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 56, 815716), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 56, 834232), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=778, value=None),\n FrozenTrial(number=779, state=1, values=[1153.78], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 56, 835367), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 56, 860379), params={'ema1_period': 13, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=779, value=None),\n FrozenTrial(number=780, state=1, values=[1080.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 56, 861094), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 56, 875886), params={'ema1_period': 15, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=780, value=None),\n FrozenTrial(number=781, state=1, values=[1170.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 56, 876610), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 56, 892546), params={'ema1_period': 14, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=781, value=None),\n FrozenTrial(number=782, state=1, values=[1150.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 56, 893536), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 56, 913067), params={'ema1_period': 13, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=782, value=None),\n FrozenTrial(number=783, state=1, values=[1120.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 56, 913795), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 56, 936927), params={'ema1_period': 15, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=783, value=None),\n FrozenTrial(number=784, state=1, values=[961.38], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 56, 937916), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 56, 961287), params={'ema1_period': 14, 'ema2_period': 47}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=784, value=None),\n FrozenTrial(number=785, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 56, 961804), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 56, 977790), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=785, value=None),\n FrozenTrial(number=786, state=1, values=[1150.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 56, 978590), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 56, 994166), params={'ema1_period': 13, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=786, value=None),\n FrozenTrial(number=787, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 56, 994608), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 57, 10484), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=787, value=None),\n FrozenTrial(number=788, state=1, values=[1080.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 57, 11702), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 57, 35881), params={'ema1_period': 15, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=788, value=None),\n FrozenTrial(number=789, state=1, values=[1163.58], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 57, 37007), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 57, 61931), params={'ema1_period': 13, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=789, value=None),\n FrozenTrial(number=790, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 57, 62486), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 57, 79062), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=790, value=None),\n FrozenTrial(number=791, state=1, values=[1170.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 57, 80252), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 57, 96050), params={'ema1_period': 14, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=791, value=None),\n FrozenTrial(number=792, state=1, values=[1120.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 57, 96639), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 57, 112242), params={'ema1_period': 15, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=792, value=None),\n FrozenTrial(number=793, state=1, values=[1170.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 57, 112872), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 57, 134865), params={'ema1_period': 14, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=793, value=None),\n FrozenTrial(number=794, state=1, values=[1153.78], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 57, 135968), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 57, 158365), params={'ema1_period': 13, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=794, value=None),\n FrozenTrial(number=795, state=1, values=[1060.38], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 57, 159104), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 57, 174973), params={'ema1_period': 14, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=795, value=None),\n FrozenTrial(number=796, state=1, values=[1120.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 57, 175619), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 57, 191093), params={'ema1_period': 15, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=796, value=None),\n FrozenTrial(number=797, state=1, values=[1170.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 57, 191823), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 57, 213828), params={'ema1_period': 14, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=797, value=None),\n FrozenTrial(number=798, state=1, values=[1150.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 57, 214822), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 57, 236435), params={'ema1_period': 13, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=798, value=None),\n FrozenTrial(number=799, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 57, 237459), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 57, 253617), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=799, value=None),\n FrozenTrial(number=800, state=1, values=[1080.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 57, 254087), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 57, 269182), params={'ema1_period': 15, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=800, value=None),\n FrozenTrial(number=801, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 57, 269679), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 57, 285229), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=801, value=None),\n FrozenTrial(number=802, state=1, values=[1163.58], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 57, 285807), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 57, 303739), params={'ema1_period': 13, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=802, value=None),\n FrozenTrial(number=803, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 57, 304461), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 57, 328623), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=803, value=None),\n FrozenTrial(number=804, state=1, values=[1060.38], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 57, 329434), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 57, 346375), params={'ema1_period': 14, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=804, value=None),\n FrozenTrial(number=805, state=1, values=[1080.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 57, 347063), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 57, 362697), params={'ema1_period': 15, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=805, value=None),\n FrozenTrial(number=806, state=1, values=[1139.08], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 57, 363221), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 57, 378881), params={'ema1_period': 12, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=806, value=None),\n FrozenTrial(number=807, state=1, values=[1153.78], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 57, 379463), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 57, 394563), params={'ema1_period': 13, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=807, value=None),\n FrozenTrial(number=808, state=1, values=[1060.38], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 57, 395058), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 57, 417842), params={'ema1_period': 14, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=808, value=None),\n FrozenTrial(number=809, state=1, values=[1000.0], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 57, 419056), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 57, 439864), params={'ema1_period': 11, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=809, value=None),\n FrozenTrial(number=810, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 57, 440777), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 57, 456918), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=810, value=None),\n FrozenTrial(number=811, state=1, values=[1080.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 57, 458031), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 57, 473432), params={'ema1_period': 15, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=811, value=None),\n FrozenTrial(number=812, state=1, values=[1163.58], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 57, 473955), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 57, 489315), params={'ema1_period': 13, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=812, value=None),\n FrozenTrial(number=813, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 57, 490018), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 57, 505288), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=813, value=None),\n FrozenTrial(number=814, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 57, 505984), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 57, 521272), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=814, value=None),\n FrozenTrial(number=815, state=1, values=[1039.58], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 57, 522085), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 57, 548862), params={'ema1_period': 15, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=815, value=None),\n FrozenTrial(number=816, state=1, values=[1153.78], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 57, 549735), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 57, 566261), params={'ema1_period': 13, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=816, value=None),\n FrozenTrial(number=817, state=1, values=[1170.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 57, 566934), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 57, 582652), params={'ema1_period': 14, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=817, value=None),\n FrozenTrial(number=818, state=1, values=[950.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 57, 583257), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 57, 598736), params={'ema1_period': 14, 'ema2_period': 30}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=818, value=None),\n FrozenTrial(number=819, state=1, values=[1120.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 57, 599227), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 57, 622312), params={'ema1_period': 15, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=819, value=None),\n FrozenTrial(number=820, state=1, values=[1163.58], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 57, 623233), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 57, 643855), params={'ema1_period': 13, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=820, value=None),\n FrozenTrial(number=821, state=1, values=[1060.38], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 57, 644739), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 57, 661254), params={'ema1_period': 14, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=821, value=None),\n FrozenTrial(number=822, state=1, values=[1120.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 57, 661983), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 57, 677278), params={'ema1_period': 15, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=822, value=None),\n FrozenTrial(number=823, state=1, values=[1170.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 57, 677852), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 57, 693298), params={'ema1_period': 14, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=823, value=None),\n FrozenTrial(number=824, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 57, 693716), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 57, 711974), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=824, value=None),\n FrozenTrial(number=825, state=1, values=[1150.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 57, 712587), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 57, 737847), params={'ema1_period': 13, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=825, value=None),\n FrozenTrial(number=826, state=1, values=[1140.58], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 57, 738767), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 57, 755933), params={'ema1_period': 16, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=826, value=None),\n FrozenTrial(number=827, state=1, values=[1080.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 57, 756627), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 57, 772906), params={'ema1_period': 15, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=827, value=None),\n FrozenTrial(number=828, state=1, values=[973.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 57, 773694), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 57, 789264), params={'ema1_period': 14, 'ema2_period': 42}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=828, value=None),\n FrozenTrial(number=829, state=1, values=[1153.78], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 57, 789875), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 57, 805237), params={'ema1_period': 13, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=829, value=None),\n FrozenTrial(number=830, state=1, values=[1170.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 57, 805742), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 57, 826728), params={'ema1_period': 14, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=830, value=None),\n FrozenTrial(number=831, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 57, 828820), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 57, 855932), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=831, value=None),\n FrozenTrial(number=832, state=1, values=[1039.58], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 57, 856803), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 57, 874629), params={'ema1_period': 15, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=832, value=None),\n FrozenTrial(number=833, state=1, values=[901.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 57, 875459), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 57, 892169), params={'ema1_period': 9, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=833, value=None),\n FrozenTrial(number=834, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 57, 893114), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 57, 910287), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=834, value=None),\n FrozenTrial(number=835, state=1, values=[1120.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 57, 910947), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 57, 934659), params={'ema1_period': 15, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=835, value=None),\n FrozenTrial(number=836, state=1, values=[1163.58], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 57, 935489), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 57, 960826), params={'ema1_period': 13, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=836, value=None),\n FrozenTrial(number=837, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 57, 961511), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 57, 978675), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=837, value=None),\n FrozenTrial(number=838, state=1, values=[1060.38], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 57, 979342), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 57, 995973), params={'ema1_period': 14, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=838, value=None),\n FrozenTrial(number=839, state=1, values=[1163.58], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 57, 996561), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 58, 12304), params={'ema1_period': 13, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=839, value=None),\n FrozenTrial(number=840, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 58, 12744), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 58, 38261), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=840, value=None),\n FrozenTrial(number=841, state=1, values=[1039.58], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 58, 39065), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 58, 61303), params={'ema1_period': 15, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=841, value=None),\n FrozenTrial(number=842, state=1, values=[1163.58], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 58, 62020), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 58, 78543), params={'ema1_period': 13, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=842, value=None),\n FrozenTrial(number=843, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 58, 79088), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 58, 95636), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=843, value=None),\n FrozenTrial(number=844, state=1, values=[1080.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 58, 96270), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 58, 112108), params={'ema1_period': 15, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=844, value=None),\n FrozenTrial(number=845, state=1, values=[851.38], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 58, 112906), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 58, 139140), params={'ema1_period': 14, 'ema2_period': 21}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=845, value=None),\n FrozenTrial(number=846, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 58, 140105), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 58, 160968), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=846, value=None),\n FrozenTrial(number=847, state=1, values=[1039.58], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 58, 161657), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 58, 178247), params={'ema1_period': 16, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=847, value=None),\n FrozenTrial(number=848, state=1, values=[1150.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 58, 178714), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 58, 195139), params={'ema1_period': 13, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=848, value=None),\n FrozenTrial(number=849, state=1, values=[961.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 58, 195757), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 58, 211407), params={'ema1_period': 14, 'ema2_period': 34}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=849, value=None),\n FrozenTrial(number=850, state=1, values=[1120.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 58, 211954), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 58, 237001), params={'ema1_period': 15, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=850, value=None),\n FrozenTrial(number=851, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 58, 238200), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 58, 255710), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=851, value=None),\n FrozenTrial(number=852, state=1, values=[1163.58], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 58, 256890), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 58, 273890), params={'ema1_period': 13, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=852, value=None),\n FrozenTrial(number=853, state=1, values=[990.58], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 58, 274396), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 58, 290741), params={'ema1_period': 6, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=853, value=None),\n FrozenTrial(number=854, state=1, values=[1000.0], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 58, 291422), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 58, 307601), params={'ema1_period': 12, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=854, value=None),\n FrozenTrial(number=855, state=1, values=[1170.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 58, 308186), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 58, 325223), params={'ema1_period': 14, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=855, value=None),\n FrozenTrial(number=856, state=1, values=[1120.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 58, 326021), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 58, 343801), params={'ema1_period': 15, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=856, value=None),\n FrozenTrial(number=857, state=1, values=[1163.58], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 58, 344633), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 58, 362217), params={'ema1_period': 13, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=857, value=None),\n FrozenTrial(number=858, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 58, 362807), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 58, 379346), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=858, value=None),\n FrozenTrial(number=859, state=1, values=[1060.38], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 58, 379974), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 58, 396785), params={'ema1_period': 14, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=859, value=None),\n FrozenTrial(number=860, state=1, values=[1120.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 58, 397379), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 58, 414417), params={'ema1_period': 15, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=860, value=None),\n FrozenTrial(number=861, state=1, values=[863.38], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 58, 415256), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 58, 433097), params={'ema1_period': 13, 'ema2_period': 19}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=861, value=None),\n FrozenTrial(number=862, state=1, values=[1170.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 58, 433709), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 58, 450726), params={'ema1_period': 14, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=862, value=None),\n FrozenTrial(number=863, state=1, values=[1170.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 58, 451389), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 58, 469602), params={'ema1_period': 14, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=863, value=None),\n FrozenTrial(number=864, state=1, values=[1120.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 58, 470727), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 58, 489761), params={'ema1_period': 15, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=864, value=None),\n FrozenTrial(number=865, state=1, values=[1153.78], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 58, 490706), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 58, 509722), params={'ema1_period': 13, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=865, value=None),\n FrozenTrial(number=866, state=1, values=[1060.38], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 58, 510510), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 58, 527758), params={'ema1_period': 14, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=866, value=None),\n FrozenTrial(number=867, state=1, values=[1080.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 58, 528438), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 58, 545536), params={'ema1_period': 15, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=867, value=None),\n FrozenTrial(number=868, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 58, 546307), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 58, 571952), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=868, value=None),\n FrozenTrial(number=869, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 58, 572729), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 58, 595750), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=869, value=None),\n FrozenTrial(number=870, state=1, values=[1150.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 58, 596364), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 58, 613552), params={'ema1_period': 13, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=870, value=None),\n FrozenTrial(number=871, state=1, values=[1170.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 58, 615023), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 58, 643911), params={'ema1_period': 14, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=871, value=None),\n FrozenTrial(number=872, state=1, values=[1120.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 58, 645209), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 58, 665833), params={'ema1_period': 15, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=872, value=None),\n FrozenTrial(number=873, state=1, values=[930.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 58, 666698), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 58, 683729), params={'ema1_period': 14, 'ema2_period': 38}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=873, value=None),\n FrozenTrial(number=874, state=1, values=[1000.18], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 58, 684514), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 58, 700645), params={'ema1_period': 13, 'ema2_period': 28}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=874, value=None),\n FrozenTrial(number=875, state=1, values=[1170.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 58, 701425), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 58, 724232), params={'ema1_period': 14, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=875, value=None),\n FrozenTrial(number=876, state=1, values=[960.08], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 58, 725254), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 58, 747054), params={'ema1_period': 14, 'ema2_period': 26}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=876, value=None),\n FrozenTrial(number=877, state=1, values=[1120.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 58, 748041), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 58, 764710), params={'ema1_period': 15, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=877, value=None),\n FrozenTrial(number=878, state=1, values=[920.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 58, 765475), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 58, 781598), params={'ema1_period': 7, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=878, value=None),\n FrozenTrial(number=879, state=1, values=[1150.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 58, 782343), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 58, 802319), params={'ema1_period': 13, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=879, value=None),\n FrozenTrial(number=880, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 58, 803331), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 58, 826962), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=880, value=None),\n FrozenTrial(number=881, state=1, values=[1120.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 58, 827763), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 58, 844741), params={'ema1_period': 15, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=881, value=None),\n FrozenTrial(number=882, state=1, values=[1163.58], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 58, 845704), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 58, 861942), params={'ema1_period': 13, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=882, value=None),\n FrozenTrial(number=883, state=1, values=[1060.38], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 58, 862670), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 58, 878619), params={'ema1_period': 14, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=883, value=None),\n FrozenTrial(number=884, state=1, values=[966.68], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 58, 879408), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 58, 902859), params={'ema1_period': 14, 'ema2_period': 45}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=884, value=None),\n FrozenTrial(number=885, state=1, values=[1120.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 58, 903854), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 58, 922420), params={'ema1_period': 15, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=885, value=None),\n FrozenTrial(number=886, state=1, values=[1170.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 58, 923238), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 58, 940530), params={'ema1_period': 14, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=886, value=None),\n FrozenTrial(number=887, state=1, values=[1153.78], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 58, 941183), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 58, 957305), params={'ema1_period': 13, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=887, value=None),\n FrozenTrial(number=888, state=1, values=[1060.38], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 58, 957705), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 58, 977092), params={'ema1_period': 14, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=888, value=None),\n FrozenTrial(number=889, state=1, values=[1080.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 58, 978174), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 59, 4404), params={'ema1_period': 15, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=889, value=None),\n FrozenTrial(number=890, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 59, 5404), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 59, 22390), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=890, value=None),\n FrozenTrial(number=891, state=1, values=[1139.08], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 59, 23597), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 59, 40488), params={'ema1_period': 12, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=891, value=None),\n FrozenTrial(number=892, state=1, values=[1163.58], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 59, 41170), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 59, 58253), params={'ema1_period': 13, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=892, value=None),\n FrozenTrial(number=893, state=1, values=[1039.58], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 59, 59252), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 59, 86692), params={'ema1_period': 16, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=893, value=None),\n FrozenTrial(number=894, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 59, 87510), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 59, 106285), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=894, value=None),\n FrozenTrial(number=895, state=1, values=[1060.38], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 59, 107064), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 59, 125370), params={'ema1_period': 14, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=895, value=None),\n FrozenTrial(number=896, state=1, values=[1153.78], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 59, 126065), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 59, 144106), params={'ema1_period': 13, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=896, value=None),\n FrozenTrial(number=897, state=1, values=[1080.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 59, 144928), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 59, 173231), params={'ema1_period': 15, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=897, value=None),\n FrozenTrial(number=898, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 59, 174157), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 59, 192626), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=898, value=None),\n FrozenTrial(number=899, state=1, values=[919.98], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 59, 193435), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 59, 210140), params={'ema1_period': 15, 'ema2_period': 24}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=899, value=None),\n FrozenTrial(number=900, state=1, values=[1170.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 59, 210896), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 59, 227555), params={'ema1_period': 14, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=900, value=None),\n FrozenTrial(number=901, state=1, values=[1150.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 59, 228293), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 59, 252665), params={'ema1_period': 13, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=901, value=None),\n FrozenTrial(number=902, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 59, 254244), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 59, 276059), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=902, value=None),\n FrozenTrial(number=903, state=1, values=[1120.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 59, 276940), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 59, 293863), params={'ema1_period': 15, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=903, value=None),\n FrozenTrial(number=904, state=1, values=[1170.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 59, 294570), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 59, 310960), params={'ema1_period': 14, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=904, value=None),\n FrozenTrial(number=905, state=1, values=[1163.58], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 59, 311796), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 59, 329614), params={'ema1_period': 13, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=905, value=None),\n FrozenTrial(number=906, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 59, 330761), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 59, 358095), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=906, value=None),\n FrozenTrial(number=907, state=1, values=[1060.38], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 59, 358756), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 59, 375520), params={'ema1_period': 14, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=907, value=None),\n FrozenTrial(number=908, state=1, values=[1120.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 59, 376198), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 59, 392576), params={'ema1_period': 15, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=908, value=None),\n FrozenTrial(number=909, state=1, values=[1163.58], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 59, 393458), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 59, 409932), params={'ema1_period': 13, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=909, value=None),\n FrozenTrial(number=910, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 59, 410546), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 59, 427825), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=910, value=None),\n FrozenTrial(number=911, state=1, values=[1039.58], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 59, 428595), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 59, 445921), params={'ema1_period': 15, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=911, value=None),\n FrozenTrial(number=912, state=1, values=[1170.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 59, 446798), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 59, 465094), params={'ema1_period': 14, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=912, value=None),\n FrozenTrial(number=913, state=1, values=[1153.78], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 59, 465891), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 59, 482758), params={'ema1_period': 13, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=913, value=None),\n FrozenTrial(number=914, state=1, values=[1170.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 59, 483532), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 59, 500013), params={'ema1_period': 14, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=914, value=None),\n FrozenTrial(number=915, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 59, 500976), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 59, 517934), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=915, value=None),\n FrozenTrial(number=916, state=1, values=[1120.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 59, 518818), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 59, 546848), params={'ema1_period': 15, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=916, value=None),\n FrozenTrial(number=917, state=1, values=[802.38], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 59, 547712), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 59, 565398), params={'ema1_period': 10, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=917, value=None),\n FrozenTrial(number=918, state=1, values=[1150.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 59, 566175), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 59, 590924), params={'ema1_period': 13, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=918, value=None),\n FrozenTrial(number=919, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 59, 591707), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 59, 616724), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=919, value=None),\n FrozenTrial(number=920, state=1, values=[1170.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 59, 617310), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 59, 638916), params={'ema1_period': 14, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=920, value=None),\n FrozenTrial(number=921, state=1, values=[1120.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 59, 639839), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 59, 658417), params={'ema1_period': 15, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=921, value=None),\n FrozenTrial(number=922, state=1, values=[1150.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 59, 659147), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 59, 676502), params={'ema1_period': 13, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=922, value=None),\n FrozenTrial(number=923, state=1, values=[1039.58], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 59, 677076), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 59, 702097), params={'ema1_period': 16, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=923, value=None),\n FrozenTrial(number=924, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 59, 702907), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 59, 727782), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=924, value=None),\n FrozenTrial(number=925, state=1, values=[1153.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 59, 728423), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 59, 751894), params={'ema1_period': 12, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=925, value=None),\n FrozenTrial(number=926, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 59, 752644), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 59, 771274), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=926, value=None),\n FrozenTrial(number=927, state=1, values=[1039.58], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 59, 772000), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 59, 789605), params={'ema1_period': 15, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=927, value=None),\n FrozenTrial(number=928, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 59, 790365), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 59, 817274), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=928, value=None),\n FrozenTrial(number=929, state=1, values=[1170.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 59, 818133), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 59, 843010), params={'ema1_period': 14, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=929, value=None),\n FrozenTrial(number=930, state=1, values=[1120.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 59, 843998), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 59, 864958), params={'ema1_period': 15, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=930, value=None),\n FrozenTrial(number=931, state=1, values=[1163.58], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 59, 865696), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 59, 884028), params={'ema1_period': 13, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=931, value=None),\n FrozenTrial(number=932, state=1, values=[1150.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 59, 884950), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 59, 904044), params={'ema1_period': 13, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=932, value=None),\n FrozenTrial(number=933, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 59, 904730), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 59, 932379), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=933, value=None),\n FrozenTrial(number=934, state=1, values=[1080.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 59, 933200), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 59, 956257), params={'ema1_period': 15, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=934, value=None),\n FrozenTrial(number=935, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 59, 957328), datetime_complete=datetime.datetime(2024, 6, 15, 7, 40, 59, 983135), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=935, value=None),\n FrozenTrial(number=936, state=1, values=[1060.38], datetime_start=datetime.datetime(2024, 6, 15, 7, 40, 59, 984010), datetime_complete=datetime.datetime(2024, 6, 15, 7, 41, 0, 2854), params={'ema1_period': 14, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=936, value=None),\n FrozenTrial(number=937, state=1, values=[1163.58], datetime_start=datetime.datetime(2024, 6, 15, 7, 41, 0, 3567), datetime_complete=datetime.datetime(2024, 6, 15, 7, 41, 0, 20966), params={'ema1_period': 13, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=937, value=None),\n FrozenTrial(number=938, state=1, values=[1120.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 41, 0, 21764), datetime_complete=datetime.datetime(2024, 6, 15, 7, 41, 0, 38894), params={'ema1_period': 15, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=938, value=None),\n FrozenTrial(number=939, state=1, values=[1153.78], datetime_start=datetime.datetime(2024, 6, 15, 7, 41, 0, 39713), datetime_complete=datetime.datetime(2024, 6, 15, 7, 41, 0, 58346), params={'ema1_period': 13, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=939, value=None),\n FrozenTrial(number=940, state=1, values=[1170.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 41, 0, 59351), datetime_complete=datetime.datetime(2024, 6, 15, 7, 41, 0, 86632), params={'ema1_period': 14, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=940, value=None),\n FrozenTrial(number=941, state=1, values=[1039.58], datetime_start=datetime.datetime(2024, 6, 15, 7, 41, 0, 87649), datetime_complete=datetime.datetime(2024, 6, 15, 7, 41, 0, 108455), params={'ema1_period': 15, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=941, value=None),\n FrozenTrial(number=942, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 41, 0, 109243), datetime_complete=datetime.datetime(2024, 6, 15, 7, 41, 0, 126017), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=942, value=None),\n FrozenTrial(number=943, state=1, values=[1170.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 41, 0, 126756), datetime_complete=datetime.datetime(2024, 6, 15, 7, 41, 0, 143373), params={'ema1_period': 14, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=943, value=None),\n FrozenTrial(number=944, state=1, values=[1153.78], datetime_start=datetime.datetime(2024, 6, 15, 7, 41, 0, 144111), datetime_complete=datetime.datetime(2024, 6, 15, 7, 41, 0, 161550), params={'ema1_period': 13, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=944, value=None),\n FrozenTrial(number=945, state=1, values=[1170.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 41, 0, 162489), datetime_complete=datetime.datetime(2024, 6, 15, 7, 41, 0, 180801), params={'ema1_period': 14, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=945, value=None),\n FrozenTrial(number=946, state=1, values=[1120.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 41, 0, 181750), datetime_complete=datetime.datetime(2024, 6, 15, 7, 41, 0, 199498), params={'ema1_period': 15, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=946, value=None),\n FrozenTrial(number=947, state=1, values=[1163.58], datetime_start=datetime.datetime(2024, 6, 15, 7, 41, 0, 200158), datetime_complete=datetime.datetime(2024, 6, 15, 7, 41, 0, 216997), params={'ema1_period': 13, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=947, value=None),\n FrozenTrial(number=948, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 41, 0, 217674), datetime_complete=datetime.datetime(2024, 6, 15, 7, 41, 0, 234543), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=948, value=None),\n FrozenTrial(number=949, state=1, values=[1060.38], datetime_start=datetime.datetime(2024, 6, 15, 7, 41, 0, 235109), datetime_complete=datetime.datetime(2024, 6, 15, 7, 41, 0, 252127), params={'ema1_period': 14, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=949, value=None),\n FrozenTrial(number=950, state=1, values=[1153.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 41, 0, 252783), datetime_complete=datetime.datetime(2024, 6, 15, 7, 41, 0, 271994), params={'ema1_period': 12, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=950, value=None),\n FrozenTrial(number=951, state=1, values=[962.18], datetime_start=datetime.datetime(2024, 6, 15, 7, 41, 0, 272957), datetime_complete=datetime.datetime(2024, 6, 15, 7, 41, 0, 306539), params={'ema1_period': 15, 'ema2_period': 50}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=951, value=None),\n FrozenTrial(number=952, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 41, 0, 310019), datetime_complete=datetime.datetime(2024, 6, 15, 7, 41, 0, 331330), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=952, value=None),\n FrozenTrial(number=953, state=1, values=[1153.78], datetime_start=datetime.datetime(2024, 6, 15, 7, 41, 0, 332152), datetime_complete=datetime.datetime(2024, 6, 15, 7, 41, 0, 350226), params={'ema1_period': 13, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=953, value=None),\n FrozenTrial(number=954, state=1, values=[1060.38], datetime_start=datetime.datetime(2024, 6, 15, 7, 41, 0, 350984), datetime_complete=datetime.datetime(2024, 6, 15, 7, 41, 0, 369911), params={'ema1_period': 14, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=954, value=None),\n FrozenTrial(number=955, state=1, values=[1060.38], datetime_start=datetime.datetime(2024, 6, 15, 7, 41, 0, 370600), datetime_complete=datetime.datetime(2024, 6, 15, 7, 41, 0, 388035), params={'ema1_period': 14, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=955, value=None),\n FrozenTrial(number=956, state=1, values=[1080.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 41, 0, 388627), datetime_complete=datetime.datetime(2024, 6, 15, 7, 41, 0, 405429), params={'ema1_period': 15, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=956, value=None),\n FrozenTrial(number=957, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 41, 0, 405994), datetime_complete=datetime.datetime(2024, 6, 15, 7, 41, 0, 422681), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=957, value=None),\n FrozenTrial(number=958, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 41, 0, 423099), datetime_complete=datetime.datetime(2024, 6, 15, 7, 41, 0, 441275), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=958, value=None),\n FrozenTrial(number=959, state=1, values=[1163.58], datetime_start=datetime.datetime(2024, 6, 15, 7, 41, 0, 441990), datetime_complete=datetime.datetime(2024, 6, 15, 7, 41, 0, 460057), params={'ema1_period': 13, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=959, value=None),\n FrozenTrial(number=960, state=1, values=[1120.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 41, 0, 460513), datetime_complete=datetime.datetime(2024, 6, 15, 7, 41, 0, 477776), params={'ema1_period': 15, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=960, value=None),\n FrozenTrial(number=961, state=1, values=[1163.58], datetime_start=datetime.datetime(2024, 6, 15, 7, 41, 0, 478387), datetime_complete=datetime.datetime(2024, 6, 15, 7, 41, 0, 495404), params={'ema1_period': 13, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=961, value=None),\n FrozenTrial(number=962, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 41, 0, 495974), datetime_complete=datetime.datetime(2024, 6, 15, 7, 41, 0, 512920), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=962, value=None),\n FrozenTrial(number=963, state=1, values=[1170.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 41, 0, 513612), datetime_complete=datetime.datetime(2024, 6, 15, 7, 41, 0, 532412), params={'ema1_period': 14, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=963, value=None),\n FrozenTrial(number=964, state=1, values=[1017.68], datetime_start=datetime.datetime(2024, 6, 15, 7, 41, 0, 533181), datetime_complete=datetime.datetime(2024, 6, 15, 7, 41, 0, 551995), params={'ema1_period': 20, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=964, value=None),\n FrozenTrial(number=965, state=1, values=[1039.58], datetime_start=datetime.datetime(2024, 6, 15, 7, 41, 0, 552789), datetime_complete=datetime.datetime(2024, 6, 15, 7, 41, 0, 573646), params={'ema1_period': 15, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=965, value=None),\n FrozenTrial(number=966, state=1, values=[1153.78], datetime_start=datetime.datetime(2024, 6, 15, 7, 41, 0, 574327), datetime_complete=datetime.datetime(2024, 6, 15, 7, 41, 0, 591483), params={'ema1_period': 13, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=966, value=None),\n FrozenTrial(number=967, state=1, values=[1170.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 41, 0, 591878), datetime_complete=datetime.datetime(2024, 6, 15, 7, 41, 0, 610255), params={'ema1_period': 14, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=967, value=None),\n FrozenTrial(number=968, state=1, values=[1120.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 41, 0, 611000), datetime_complete=datetime.datetime(2024, 6, 15, 7, 41, 0, 634647), params={'ema1_period': 15, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=968, value=None),\n FrozenTrial(number=969, state=1, values=[1019.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 41, 0, 635266), datetime_complete=datetime.datetime(2024, 6, 15, 7, 41, 0, 652288), params={'ema1_period': 16, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=969, value=None),\n FrozenTrial(number=970, state=1, values=[1170.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 41, 0, 652843), datetime_complete=datetime.datetime(2024, 6, 15, 7, 41, 0, 669727), params={'ema1_period': 14, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=970, value=None),\n FrozenTrial(number=971, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 41, 0, 670332), datetime_complete=datetime.datetime(2024, 6, 15, 7, 41, 0, 692474), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=971, value=None),\n FrozenTrial(number=972, state=1, values=[1163.58], datetime_start=datetime.datetime(2024, 6, 15, 7, 41, 0, 693516), datetime_complete=datetime.datetime(2024, 6, 15, 7, 41, 0, 718536), params={'ema1_period': 13, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=972, value=None),\n FrozenTrial(number=973, state=1, values=[1120.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 41, 0, 719170), datetime_complete=datetime.datetime(2024, 6, 15, 7, 41, 0, 736186), params={'ema1_period': 15, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=973, value=None),\n FrozenTrial(number=974, state=1, values=[920.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 41, 0, 736698), datetime_complete=datetime.datetime(2024, 6, 15, 7, 41, 0, 753879), params={'ema1_period': 13, 'ema2_period': 40}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=974, value=None),\n FrozenTrial(number=975, state=1, values=[1060.38], datetime_start=datetime.datetime(2024, 6, 15, 7, 41, 0, 754436), datetime_complete=datetime.datetime(2024, 6, 15, 7, 41, 0, 774155), params={'ema1_period': 14, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=975, value=None),\n FrozenTrial(number=976, state=1, values=[1170.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 41, 0, 775507), datetime_complete=datetime.datetime(2024, 6, 15, 7, 41, 0, 797664), params={'ema1_period': 14, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=976, value=None),\n FrozenTrial(number=977, state=1, values=[1120.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 41, 0, 798485), datetime_complete=datetime.datetime(2024, 6, 15, 7, 41, 0, 816346), params={'ema1_period': 15, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=977, value=None),\n FrozenTrial(number=978, state=1, values=[1170.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 41, 0, 817138), datetime_complete=datetime.datetime(2024, 6, 15, 7, 41, 0, 834199), params={'ema1_period': 14, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=978, value=None),\n FrozenTrial(number=979, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 41, 0, 834780), datetime_complete=datetime.datetime(2024, 6, 15, 7, 41, 0, 852034), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=979, value=None),\n FrozenTrial(number=980, state=1, values=[1163.58], datetime_start=datetime.datetime(2024, 6, 15, 7, 41, 0, 853124), datetime_complete=datetime.datetime(2024, 6, 15, 7, 41, 0, 873011), params={'ema1_period': 13, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=980, value=None),\n FrozenTrial(number=981, state=1, values=[1039.58], datetime_start=datetime.datetime(2024, 6, 15, 7, 41, 0, 873711), datetime_complete=datetime.datetime(2024, 6, 15, 7, 41, 0, 892633), params={'ema1_period': 15, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=981, value=None),\n FrozenTrial(number=982, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 41, 0, 893317), datetime_complete=datetime.datetime(2024, 6, 15, 7, 41, 0, 910519), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=982, value=None),\n FrozenTrial(number=983, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 41, 0, 911289), datetime_complete=datetime.datetime(2024, 6, 15, 7, 41, 0, 928501), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=983, value=None),\n FrozenTrial(number=984, state=1, values=[1163.58], datetime_start=datetime.datetime(2024, 6, 15, 7, 41, 0, 929198), datetime_complete=datetime.datetime(2024, 6, 15, 7, 41, 0, 948380), params={'ema1_period': 13, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=984, value=None),\n FrozenTrial(number=985, state=1, values=[1120.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 41, 0, 949442), datetime_complete=datetime.datetime(2024, 6, 15, 7, 41, 0, 968586), params={'ema1_period': 15, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=985, value=None),\n FrozenTrial(number=986, state=1, values=[1060.38], datetime_start=datetime.datetime(2024, 6, 15, 7, 41, 0, 969320), datetime_complete=datetime.datetime(2024, 6, 15, 7, 41, 0, 989659), params={'ema1_period': 14, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=986, value=None),\n FrozenTrial(number=987, state=1, values=[1163.58], datetime_start=datetime.datetime(2024, 6, 15, 7, 41, 0, 990837), datetime_complete=datetime.datetime(2024, 6, 15, 7, 41, 1, 12446), params={'ema1_period': 13, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=987, value=None),\n FrozenTrial(number=988, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 41, 1, 13616), datetime_complete=datetime.datetime(2024, 6, 15, 7, 41, 1, 35390), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=988, value=None),\n FrozenTrial(number=989, state=1, values=[1170.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 41, 1, 37091), datetime_complete=datetime.datetime(2024, 6, 15, 7, 41, 1, 65082), params={'ema1_period': 14, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=989, value=None),\n FrozenTrial(number=990, state=1, values=[1120.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 41, 1, 65817), datetime_complete=datetime.datetime(2024, 6, 15, 7, 41, 1, 84195), params={'ema1_period': 15, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=990, value=None),\n FrozenTrial(number=991, state=1, values=[1170.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 41, 1, 84871), datetime_complete=datetime.datetime(2024, 6, 15, 7, 41, 1, 102180), params={'ema1_period': 14, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=991, value=None),\n FrozenTrial(number=992, state=1, values=[930.98], datetime_start=datetime.datetime(2024, 6, 15, 7, 41, 1, 103245), datetime_complete=datetime.datetime(2024, 6, 15, 7, 41, 1, 126416), params={'ema1_period': 14, 'ema2_period': 37}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=992, value=None),\n FrozenTrial(number=993, state=1, values=[1150.28], datetime_start=datetime.datetime(2024, 6, 15, 7, 41, 1, 127415), datetime_complete=datetime.datetime(2024, 6, 15, 7, 41, 1, 151988), params={'ema1_period': 13, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=993, value=None),\n FrozenTrial(number=994, state=1, values=[1120.48], datetime_start=datetime.datetime(2024, 6, 15, 7, 41, 1, 152629), datetime_complete=datetime.datetime(2024, 6, 15, 7, 41, 1, 169579), params={'ema1_period': 15, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=994, value=None),\n FrozenTrial(number=995, state=1, values=[1183.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 41, 1, 170281), datetime_complete=datetime.datetime(2024, 6, 15, 7, 41, 1, 187529), params={'ema1_period': 14, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=995, value=None),\n FrozenTrial(number=996, state=1, values=[1153.78], datetime_start=datetime.datetime(2024, 6, 15, 7, 41, 1, 188255), datetime_complete=datetime.datetime(2024, 6, 15, 7, 41, 1, 210275), params={'ema1_period': 13, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=996, value=None),\n FrozenTrial(number=997, state=1, values=[1060.38], datetime_start=datetime.datetime(2024, 6, 15, 7, 41, 1, 211250), datetime_complete=datetime.datetime(2024, 6, 15, 7, 41, 1, 235145), params={'ema1_period': 14, 'ema2_period': 12}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=997, value=None),\n FrozenTrial(number=998, state=1, values=[1153.88], datetime_start=datetime.datetime(2024, 6, 15, 7, 41, 1, 235894), datetime_complete=datetime.datetime(2024, 6, 15, 7, 41, 1, 253207), params={'ema1_period': 12, 'ema2_period': 11}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=998, value=None),\n FrozenTrial(number=999, state=1, values=[1153.78], datetime_start=datetime.datetime(2024, 6, 15, 7, 41, 1, 254218), datetime_complete=datetime.datetime(2024, 6, 15, 7, 41, 1, 273847), params={'ema1_period': 13, 'ema2_period': 10}, user_attrs={}, system_attrs={}, intermediate_values={}, distributions={'ema1_period': IntDistribution(high=25, log=False, low=5, step=1), 'ema2_period': IntDistribution(high=50, log=False, low=10, step=1)}, trial_id=999, value=None)]</pre> In\u00a0[10]: Copied! <pre>import pandas as pd\n\ndf = pd.DataFrame(columns=[\"ema1_period\", \"ema2_period\", \"score\"])\nfor trial in study.trials:\n    df.loc[trial.number] = [\n        trial.params[\"ema1_period\"],\n        trial.params[\"ema2_period\"],\n        trial.values[0],\n    ]\n\n\ndf\n</pre> import pandas as pd  df = pd.DataFrame(columns=[\"ema1_period\", \"ema2_period\", \"score\"]) for trial in study.trials:     df.loc[trial.number] = [         trial.params[\"ema1_period\"],         trial.params[\"ema2_period\"],         trial.values[0],     ]   df Out[10]: ema1_period ema2_period score 0 5.0 24.0 852.58 1 19.0 25.0 1000.88 2 16.0 21.0 899.78 3 12.0 50.0 1021.38 4 22.0 13.0 1148.48 ... ... ... ... 995 14.0 10.0 1183.88 996 13.0 10.0 1153.78 997 14.0 12.0 1060.38 998 12.0 11.0 1153.88 999 13.0 10.0 1153.78 <p>1000 rows \u00d7 3 columns</p> In\u00a0[11]: Copied! <pre>from plotly import express as px\n\nfig = px.scatter(df, x=df.index, y=\"score\")\nfig.show()\n</pre> from plotly import express as px  fig = px.scatter(df, x=df.index, y=\"score\") fig.show() In\u00a0[12]: Copied! <pre>import plotly.express as px\n\n\nfig = px.density_contour(\n    df,\n    x=\"ema1_period\",\n    y=\"ema2_period\",\n    z=\"score\",\n    histfunc=\"max\",\n)\nfig.update_traces(contours_coloring=\"fill\", contours_showlabels=True)\nfig.show()\n</pre> import plotly.express as px   fig = px.density_contour(     df,     x=\"ema1_period\",     y=\"ema2_period\",     z=\"score\",     histfunc=\"max\", ) fig.update_traces(contours_coloring=\"fill\", contours_showlabels=True) fig.show() In\u00a0[13]: Copied! <pre>import plotly.express as px\n\nfig = px.density_heatmap(\n    df,\n    x=\"ema1_period\",\n    y=\"ema2_period\",\n    z=\"score\",\n    nbinsx=20,\n    nbinsy=40,\n    histfunc=\"max\",\n    color_continuous_scale=\"Viridis\",\n)\nfig.show()\n</pre> import plotly.express as px  fig = px.density_heatmap(     df,     x=\"ema1_period\",     y=\"ema2_period\",     z=\"score\",     nbinsx=20,     nbinsy=40,     histfunc=\"max\",     color_continuous_scale=\"Viridis\", ) fig.show()"},{"location":"tutorial/optimize/1.optuna/#optimize-with-optuna","title":"Optimize with Optuna\u00b6","text":"<p>Home | Document</p>"},{"location":"tutorial/optimize/1.optuna/#installation","title":"Installation\u00b6","text":""},{"location":"tutorial/optimize/1.optuna/#sample-strategy","title":"Sample Strategy\u00b6","text":""},{"location":"tutorial/optimize/1.optuna/#optimize","title":"Optimize\u00b6","text":""},{"location":"tutorial/optimize/1.optuna/#plot","title":"Plot\u00b6","text":""},{"location":"tutorial/optimize/1.optuna/#plot-by-optuna","title":"Plot by Optuna\u00b6","text":"<p>API</p>"},{"location":"tutorial/optimize/1.optuna/#plot-plotly","title":"Plot plotly\u00b6","text":"<p>Tutorial</p>"},{"location":"tutorial/optimize/1.optuna/#init-plotly-environment","title":"Init Plotly environment\u00b6","text":""},{"location":"tutorial/optimize/1.optuna/#type-1","title":"Type 1\u00b6","text":""},{"location":"tutorial/optimize/1.optuna/#type-2","title":"Type 2\u00b6","text":""},{"location":"tutorial/optimize/1.optuna/#type-3","title":"Type 3\u00b6","text":""},{"location":"tutorial/optimize/2.hyperopt/","title":"Optimize with Hyperopt","text":"In\u00a0[\u00a0]: Copied! <pre>!pip install hyperopt\n</pre> !pip install hyperopt In\u00a0[1]: Copied! <pre># import talib.abstract as ta\n\nfrom lettrade import DataFeed, Strategy, indicator as i\nfrom lettrade.exchange.backtest import ForexBackTestAccount, let_backtest\nfrom lettrade.indicator.vendor.qtpylib import inject_indicators\n\ninject_indicators()\n\n\nclass SmaCross(Strategy):\n    ema1_period = 9\n    ema2_period = 21\n\n    def indicators(self, df: DataFeed):\n        # df[\"ema1\"] = ta.EMA(df, timeperiod=self.ema1_period)\n        # df[\"ema2\"] = ta.EMA(df, timeperiod=self.ema2_period)\n        df[\"ema1\"] = df.close.ema(window=self.ema1_period)\n        df[\"ema2\"] = df.close.ema(window=self.ema2_period)\n\n        df[\"signal_ema_crossover\"] = i.crossover(df.ema1, df.ema2)\n        df[\"signal_ema_crossunder\"] = i.crossunder(df.ema1, df.ema2)\n\n    def next(self, df: DataFeed):\n        if len(self.orders) &gt; 0 or len(self.positions) &gt; 0:\n            return\n\n        if df.l.signal_ema_crossover[-1]:\n            price = df.l.close[-1]\n            self.buy(size=0.1, sl=price - 0.001, tp=price + 0.001)\n        elif df.l.signal_ema_crossunder[-1]:\n            price = df.l.close[-1]\n            self.sell(size=0.1, sl=price + 0.001, tp=price - 0.001)\n\n\nlt = let_backtest(\n    strategy=SmaCross,\n    datas=\"example/data/data/EURUSD_5m_0_10000.csv\",\n    account=ForexBackTestAccount,\n    # plotter=None,\n)\n</pre> # import talib.abstract as ta  from lettrade import DataFeed, Strategy, indicator as i from lettrade.exchange.backtest import ForexBackTestAccount, let_backtest from lettrade.indicator.vendor.qtpylib import inject_indicators  inject_indicators()   class SmaCross(Strategy):     ema1_period = 9     ema2_period = 21      def indicators(self, df: DataFeed):         # df[\"ema1\"] = ta.EMA(df, timeperiod=self.ema1_period)         # df[\"ema2\"] = ta.EMA(df, timeperiod=self.ema2_period)         df[\"ema1\"] = df.close.ema(window=self.ema1_period)         df[\"ema2\"] = df.close.ema(window=self.ema2_period)          df[\"signal_ema_crossover\"] = i.crossover(df.ema1, df.ema2)         df[\"signal_ema_crossunder\"] = i.crossunder(df.ema1, df.ema2)      def next(self, df: DataFeed):         if len(self.orders) &gt; 0 or len(self.positions) &gt; 0:             return          if df.l.signal_ema_crossover[-1]:             price = df.l.close[-1]             self.buy(size=0.1, sl=price - 0.001, tp=price + 0.001)         elif df.l.signal_ema_crossunder[-1]:             price = df.l.close[-1]             self.sell(size=0.1, sl=price + 0.001, tp=price - 0.001)   lt = let_backtest(     strategy=SmaCross,     datas=\"example/data/data/EURUSD_5m_0_10000.csv\",     account=ForexBackTestAccount,     # plotter=None, ) In\u00a0[2]: Copied! <pre># define a search space\nfrom hyperopt import fmin, tpe, space_eval, Trials\nfrom hyperopt import hp\n\n\nlettrade_model = lt.optimize_model()\n\n\ndef train_model(params):\n    # Model\n    result = lettrade_model(params)\n\n    # Score\n    return -result[\"equity\"]\n\n\n# Hyperopt\nsearch_space = {\n    \"ema1_period\": hp.uniformint(\"ema1_period\", 5, 25, q=1),\n    \"ema2_period\": hp.uniformint(\"ema2_period\", 5, 50, q=1),\n}\n\ntrials = Trials()\nbest_params = fmin(\n    train_model,\n    search_space,\n    algo=tpe.suggest,\n    max_evals=1_000,\n    trials=trials,\n)\n</pre> # define a search space from hyperopt import fmin, tpe, space_eval, Trials from hyperopt import hp   lettrade_model = lt.optimize_model()   def train_model(params):     # Model     result = lettrade_model(params)      # Score     return -result[\"equity\"]   # Hyperopt search_space = {     \"ema1_period\": hp.uniformint(\"ema1_period\", 5, 25, q=1),     \"ema2_period\": hp.uniformint(\"ema2_period\", 5, 50, q=1), }  trials = Trials() best_params = fmin(     train_model,     search_space,     algo=tpe.suggest,     max_evals=1_000,     trials=trials, ) <pre>100%|\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 1000/1000 [00:41&lt;00:00, 24.10trial/s, best loss: -1196.58]\n</pre> In\u00a0[3]: Copied! <pre>hyperparams = space_eval(search_space, best_params)\n\nprint(best_params)\nprint(hyperparams)\n</pre> hyperparams = space_eval(search_space, best_params)  print(best_params) print(hyperparams) <pre>{'ema1_period': 17.0, 'ema2_period': 8.0}\n{'ema1_period': 17, 'ema2_period': 8}\n</pre> In\u00a0[4]: Copied! <pre>lt.plotter.heatmap(x=\"ema1_period\", y=\"ema2_period\", z=\"equity\")\n</pre> lt.plotter.heatmap(x=\"ema1_period\", y=\"ema2_period\", z=\"equity\") In\u00a0[5]: Copied! <pre>lt.plotter.contour(x=\"ema1_period\", y=\"ema2_period\", z=\"equity\")\n</pre> lt.plotter.contour(x=\"ema1_period\", y=\"ema2_period\", z=\"equity\") In\u00a0[6]: Copied! <pre>import plotly.io as pio\n\npio.renderers.default = \"notebook\"\npio.templates.default = \"plotly_dark\"\n</pre> import plotly.io as pio  pio.renderers.default = \"notebook\" pio.templates.default = \"plotly_dark\" In\u00a0[7]: Copied! <pre>import pandas as pd\nimport numpy as np\n\n\ndef unpack(x):\n    if x:\n        return x[0]\n    return np.nan\n\n\n# We'll first turn each trial into a series and then stack those series together as a dataframe.\ndf = pd.DataFrame([pd.Series(t[\"misc\"][\"vals\"]).apply(unpack) for t in trials])\n# Then we'll add other relevant bits of information to the correct rows and perform a couple of\n# mappings for convenience\ndf[\"loss\"] = [t[\"result\"][\"loss\"] for t in trials]\ndf[\"trial_number\"] = df.index\n\n\ndf[\"win\"] = -df[\"loss\"]\ndf\n</pre> import pandas as pd import numpy as np   def unpack(x):     if x:         return x[0]     return np.nan   # We'll first turn each trial into a series and then stack those series together as a dataframe. df = pd.DataFrame([pd.Series(t[\"misc\"][\"vals\"]).apply(unpack) for t in trials]) # Then we'll add other relevant bits of information to the correct rows and perform a couple of # mappings for convenience df[\"loss\"] = [t[\"result\"][\"loss\"] for t in trials] df[\"trial_number\"] = df.index   df[\"win\"] = -df[\"loss\"] df Out[7]: ema1_period ema2_period loss trial_number win 0 17.0 42.0 -903.38 0 903.38 1 20.0 6.0 -1096.68 1 1096.68 2 20.0 42.0 -928.18 2 928.18 3 10.0 16.0 -859.38 3 859.38 4 6.0 7.0 -872.28 4 872.28 ... ... ... ... ... ... 995 16.0 17.0 -813.68 995 813.68 996 18.0 7.0 -1147.08 996 1147.08 997 14.0 8.0 -1171.68 997 1171.68 998 15.0 12.0 -1039.58 998 1039.58 999 8.0 13.0 -832.18 999 832.18 <p>1000 rows \u00d7 5 columns</p> In\u00a0[8]: Copied! <pre>from plotly import express as px\n\nfig = px.scatter(df, x=\"trial_number\", y=\"win\")\nfig.show()\n</pre> from plotly import express as px  fig = px.scatter(df, x=\"trial_number\", y=\"win\") fig.show() In\u00a0[9]: Copied! <pre>import plotly.express as px\n\n\nfig = px.density_contour(\n    df,\n    x=\"ema1_period\",\n    y=\"ema2_period\",\n    z=\"win\",\n    histfunc=\"max\",\n)\nfig.update_traces(contours_coloring=\"fill\", contours_showlabels=True)\nfig.show()\n</pre> import plotly.express as px   fig = px.density_contour(     df,     x=\"ema1_period\",     y=\"ema2_period\",     z=\"win\",     histfunc=\"max\", ) fig.update_traces(contours_coloring=\"fill\", contours_showlabels=True) fig.show() In\u00a0[10]: Copied! <pre>import plotly.express as px\n\nfig = px.density_heatmap(\n    df,\n    x=\"ema1_period\",\n    y=\"ema2_period\",\n    z=\"win\",\n    nbinsx=20,\n    nbinsy=40,\n    histfunc=\"max\",\n    color_continuous_scale=\"Viridis\",\n)\nfig.show()\n</pre> import plotly.express as px  fig = px.density_heatmap(     df,     x=\"ema1_period\",     y=\"ema2_period\",     z=\"win\",     nbinsx=20,     nbinsy=40,     histfunc=\"max\",     color_continuous_scale=\"Viridis\", ) fig.show()"},{"location":"tutorial/optimize/2.hyperopt/#optimize-with-hyperopt","title":"Optimize with Hyperopt\u00b6","text":"<p>Home | Document</p>"},{"location":"tutorial/optimize/2.hyperopt/#installation","title":"Installation\u00b6","text":""},{"location":"tutorial/optimize/2.hyperopt/#sample-strategy","title":"Sample Strategy\u00b6","text":""},{"location":"tutorial/optimize/2.hyperopt/#optimize","title":"Optimize\u00b6","text":""},{"location":"tutorial/optimize/2.hyperopt/#plot","title":"Plot\u00b6","text":""},{"location":"tutorial/optimize/2.hyperopt/#plot-plotly","title":"Plot plotly\u00b6","text":"<p>Tutorial</p>"},{"location":"tutorial/optimize/2.hyperopt/#init-plotly-environment","title":"Init Plotly environment\u00b6","text":""},{"location":"tutorial/optimize/2.hyperopt/#type-1","title":"Type 1\u00b6","text":""},{"location":"tutorial/optimize/2.hyperopt/#type-2","title":"Type 2\u00b6","text":""},{"location":"tutorial/optimize/2.hyperopt/#type-3","title":"Type 3\u00b6","text":""},{"location":"tutorial/optimize/3.ray/","title":"Optimize with RAY","text":"In\u00a0[\u00a0]: Copied! <pre>!pip install \"ray[tune,client]\"\n!pip install optuna\n</pre> !pip install \"ray[tune,client]\" !pip install optuna In\u00a0[1]: Copied! <pre>import talib.abstract as ta\n\nfrom lettrade import DataFeed, Strategy, indicator as i\nfrom lettrade.exchange.backtest import ForexBackTestAccount, let_backtest\n\n# from lettrade.indicator.vendor.qtpylib import inject_indicators\n\n# inject_indicators()\n\n\nclass SmaCross(Strategy):\n    ema1_period = 9\n    ema2_period = 21\n\n    def indicators(self, df: DataFeed):\n        df[\"ema1\"] = ta.EMA(df, timeperiod=self.ema1_period)\n        df[\"ema2\"] = ta.EMA(df, timeperiod=self.ema2_period)\n        # df[\"ema1\"] = df.close.ema(window=self.ema1_period)\n        # df[\"ema2\"] = df.close.ema(window=self.ema2_period)\n\n        df[\"signal_ema_crossover\"] = i.crossover(df.ema1, df.ema2)\n        df[\"signal_ema_crossunder\"] = i.crossunder(df.ema1, df.ema2)\n\n    def next(self, df: DataFeed):\n        if len(self.orders) &gt; 0 or len(self.positions) &gt; 0:\n            return\n\n        if df.l.signal_ema_crossover[-1]:\n            price = df.l.close[-1]\n            self.buy(size=0.1, sl=price - 0.001, tp=price + 0.001)\n        elif df.l.signal_ema_crossunder[-1]:\n            price = df.l.close[-1]\n            self.sell(size=0.1, sl=price + 0.001, tp=price - 0.001)\n\n\nlt = let_backtest(\n    strategy=SmaCross,\n    datas=\"example/data/data/EURUSD_5m_0_10000.csv\",\n    account=ForexBackTestAccount,\n    # plotter=None,\n)\n</pre> import talib.abstract as ta  from lettrade import DataFeed, Strategy, indicator as i from lettrade.exchange.backtest import ForexBackTestAccount, let_backtest  # from lettrade.indicator.vendor.qtpylib import inject_indicators  # inject_indicators()   class SmaCross(Strategy):     ema1_period = 9     ema2_period = 21      def indicators(self, df: DataFeed):         df[\"ema1\"] = ta.EMA(df, timeperiod=self.ema1_period)         df[\"ema2\"] = ta.EMA(df, timeperiod=self.ema2_period)         # df[\"ema1\"] = df.close.ema(window=self.ema1_period)         # df[\"ema2\"] = df.close.ema(window=self.ema2_period)          df[\"signal_ema_crossover\"] = i.crossover(df.ema1, df.ema2)         df[\"signal_ema_crossunder\"] = i.crossunder(df.ema1, df.ema2)      def next(self, df: DataFeed):         if len(self.orders) &gt; 0 or len(self.positions) &gt; 0:             return          if df.l.signal_ema_crossover[-1]:             price = df.l.close[-1]             self.buy(size=0.1, sl=price - 0.001, tp=price + 0.001)         elif df.l.signal_ema_crossunder[-1]:             price = df.l.close[-1]             self.sell(size=0.1, sl=price + 0.001, tp=price - 0.001)   lt = let_backtest(     strategy=SmaCross,     datas=\"example/data/data/EURUSD_5m_0_10000.csv\",     account=ForexBackTestAccount,     # plotter=None, ) In\u00a0[2]: Copied! <pre>from ray import tune, train\nfrom ray.tune.search.optuna import OptunaSearch\nfrom lettrade.exchange.backtest.extra.ray import LetOptimizeRay\nimport logging\n\nlogging.getLogger(\"ray.tune.tune\").setLevel(logging.WARNING)\n\nletray = LetOptimizeRay()\nlettrade_model = lt.optimize_model(dumper=letray.dumps)\n\n\ndef train_model(config, data):\n    params = {\n        \"ema1_period\": config[\"ema1_period\"],\n        \"ema2_period\": config[\"ema2_period\"],\n    }\n\n    # Model\n    result = lettrade_model(params, optimizer_kwargs=data)\n\n    # Score\n    return {\"score\": result[\"equity\"]}\n\n\nsearch_space = {\n    \"ema1_period\": tune.qrandint(5, 25, q=1),\n    \"ema2_period\": tune.qrandint(10, 50, q=1),\n}\n\nalgo = OptunaSearch()\n# algo = tune.search.ConcurrencyLimiter(algo, max_concurrent=4)\n\ntuner = tune.Tuner(\n    tune.with_parameters(train_model, data=letray.data),\n    tune_config=tune.TuneConfig(\n        metric=\"score\",\n        mode=\"max\",\n        search_alg=algo,\n        num_samples=100,\n    ),\n    # run_config=train.RunConfig(verbose=0),\n    param_space=search_space,\n)\nresults = tuner.fit()\n\nlt.optimize_done()\n</pre> from ray import tune, train from ray.tune.search.optuna import OptunaSearch from lettrade.exchange.backtest.extra.ray import LetOptimizeRay import logging  logging.getLogger(\"ray.tune.tune\").setLevel(logging.WARNING)  letray = LetOptimizeRay() lettrade_model = lt.optimize_model(dumper=letray.dumps)   def train_model(config, data):     params = {         \"ema1_period\": config[\"ema1_period\"],         \"ema2_period\": config[\"ema2_period\"],     }      # Model     result = lettrade_model(params, optimizer_kwargs=data)      # Score     return {\"score\": result[\"equity\"]}   search_space = {     \"ema1_period\": tune.qrandint(5, 25, q=1),     \"ema2_period\": tune.qrandint(10, 50, q=1), }  algo = OptunaSearch() # algo = tune.search.ConcurrencyLimiter(algo, max_concurrent=4)  tuner = tune.Tuner(     tune.with_parameters(train_model, data=letray.data),     tune_config=tune.TuneConfig(         metric=\"score\",         mode=\"max\",         search_alg=algo,         num_samples=100,     ),     # run_config=train.RunConfig(verbose=0),     param_space=search_space, ) results = tuner.fit()  lt.optimize_done() Tune Status Current time:2024-06-15 09:31:24 Running for: 00:01:31.89         Memory:      9.4/62.7 GiB        System Info       Using FIFO scheduling algorithm.Logical resource usage: 1.0/32 CPUs, 0/1 GPUs (0.0/1.0 accelerator_type:G)      Trial Status Trial name          status    loc                 ema1_period  ema2_period  iter  total time (s)  score train_model_567e8489TERMINATED192.168.1.84:15993           17           14     1        0.3941291056.08 train_model_0b9c709fTERMINATED192.168.1.84:16129            7           46     1        0.219453 920.68 train_model_15f951e4TERMINATED192.168.1.84:16203           18           14     1        0.1871651116.68 train_model_1054961cTERMINATED192.168.1.84:16275            9           24     1        0.197212 893.48 train_model_aceac61dTERMINATED192.168.1.84:16341           24           38     1        0.205062 931.48 train_model_ce105e0cTERMINATED192.168.1.84:16413           23           17     1        0.1831841020.28 train_model_a5ec8f89TERMINATED192.168.1.84:16511           20           41     1        0.206701 962.68 train_model_e1ead9ceTERMINATED192.168.1.84:16577            6           35     1        0.189952 960.68 train_model_9b0198caTERMINATED192.168.1.84:16644           22           49     1        0.1967411006.88 train_model_b22a89bcTERMINATED192.168.1.84:16711            5           24     1        0.19996  852.58 train_model_b0438800TERMINATED192.168.1.84:16782            8           21     1        0.196432 962.68 train_model_aa0e7c19TERMINATED192.168.1.84:16850           13           12     1        0.1902391150.28 train_model_5efdbdc2TERMINATED192.168.1.84:16928           16           10     1        0.20991 1140.58 train_model_15871df1TERMINATED192.168.1.84:16996           12           11     1        0.2018341153.88 train_model_3b28c8c8TERMINATED192.168.1.84:17063           13           10     1        0.2007651153.78 train_model_9925dbecTERMINATED192.168.1.84:17129           13           29     1        0.1899931029.18 train_model_b2764cd3TERMINATED192.168.1.84:17195           12           29     1        0.20041  979.58 train_model_15993c9dTERMINATED192.168.1.84:17261           11           19     1        0.2256851012.48 train_model_ce4d58deTERMINATED192.168.1.84:17327           10           18     1        0.205284 950.48 train_model_2c7e1a4eTERMINATED192.168.1.84:17395           10           10     1        0.2089171000    train_model_ba0b19e2TERMINATED192.168.1.84:17461           14           10     1        0.21732 1183.88 train_model_d04dbfdaTERMINATED192.168.1.84:17547           14           25     1        0.254303 900.18 train_model_591bbf70TERMINATED192.168.1.84:17632           14           15     1        0.288824 992.68 train_model_c6e477f3TERMINATED192.168.1.84:17711           15           13     1        0.24678 1009.38 train_model_96bd7001TERMINATED192.168.1.84:17792           15           10     1        0.2216371120.48 train_model_4d4d03cdTERMINATED192.168.1.84:17876           19           21     1        0.247008 969.68 train_model_72dbb93dTERMINATED192.168.1.84:17953           12           17     1        0.184375 992.78 train_model_ef05b46bTERMINATED192.168.1.84:18020           12           16     1        0.206489 980.68 train_model_49e81eb3TERMINATED192.168.1.84:18086           17           15     1        0.1820671118.58 train_model_16349ae4TERMINATED192.168.1.84:18153           17           12     1        0.2004321006.98 train_model_43578958TERMINATED192.168.1.84:18226           17           13     1        0.1807151028.38 train_model_a74e8eb3TERMINATED192.168.1.84:18292            9           33     1        0.176146 899.68 train_model_03e41eecTERMINATED192.168.1.84:18358           13           10     1        0.1722161153.78 train_model_fa885682TERMINATED192.168.1.84:18431           13           12     1        0.18103 1150.28 train_model_80f1f623TERMINATED192.168.1.84:18497           14           10     1        0.1705971183.88 train_model_8e51adfbTERMINATED192.168.1.84:18564           11           10     1        0.1913771177.58 train_model_30471d3fTERMINATED192.168.1.84:18657           15           20     1        0.185873 851.58 train_model_fd89af7dTERMINATED192.168.1.84:18723           11           20     1        0.1741  1031.88 train_model_912afd24TERMINATED192.168.1.84:18789            8           14     1        0.179255 810.48 train_model_60db4bd0TERMINATED192.168.1.84:18855            9           14     1        0.19334  856.08 train_model_81f9d953TERMINATED192.168.1.84:18921           19           41     1        0.180821 946.88 train_model_37878487TERMINATED192.168.1.84:18987           20           26     1        0.20723  941.18 train_model_e7b0b313TERMINATED192.168.1.84:19055           11           10     1        0.2037641177.58 train_model_8298fcd9TERMINATED192.168.1.84:19121           11           11     1        0.1924591000    train_model_a61dbe0aTERMINATED192.168.1.84:19193           11           12     1        0.239823 826.08 train_model_dbf37334TERMINATED192.168.1.84:19259            7           17     1        0.204537 846.08 train_model_bae0e248TERMINATED192.168.1.84:19325            7           16     1        0.184754 850.98 train_model_b6d4bc96TERMINATED192.168.1.84:19391           14           15     1        0.170364 992.68 train_model_0be6d479TERMINATED192.168.1.84:19457           14           50     1        0.168588 951.68 train_model_8ba14f88TERMINATED192.168.1.84:19523           16           13     1        0.1873831007.38 train_model_4a7aa781TERMINATED192.168.1.84:19590           25           23     1        0.1986821049.28 train_model_9d13b950TERMINATED192.168.1.84:19656           10           47     1        0.191259 912.48 train_model_05946552TERMINATED192.168.1.84:19722           10           10     1        0.1837011000    train_model_bdc8be88TERMINATED192.168.1.84:19788           12           10     1        0.1670251139.08 train_model_cd9ef040TERMINATED192.168.1.84:19854           12           11     1        0.1717951153.88 train_model_0832acefTERMINATED192.168.1.84:19921           13           12     1        0.1826171150.28 train_model_bcea84baTERMINATED192.168.1.84:19990           13           12     1        0.1769341150.28 train_model_8478f2b2TERMINATED192.168.1.84:20056           16           14     1        0.2193771018.18 train_model_ffaab6d9TERMINATED192.168.1.84:20125           16           14     1        0.1829411018.18 train_model_641cc62cTERMINATED192.168.1.84:20207            9           11     1        0.202532 901.88 train_model_3bd484eeTERMINATED192.168.1.84:20279           11           18     1        0.207438 992.38 train_model_77212f0fTERMINATED192.168.1.84:20346           12           18     1        0.197155 991.98 train_model_20deba80TERMINATED192.168.1.84:20414           12           11     1        0.1977361153.88 train_model_263b7f9eTERMINATED192.168.1.84:20488           14           10     1        0.2021251183.88 train_model_52395f8eTERMINATED192.168.1.84:20557           14           11     1        0.2024521170.48 train_model_ed3c0fddTERMINATED192.168.1.84:20627           14           13     1        0.1947071059.38 train_model_482e6539TERMINATED192.168.1.84:20693           14           13     1        0.1918171059.38 train_model_99a3604aTERMINATED192.168.1.84:20766           15           16     1        0.188537 944.08 train_model_9962248dTERMINATED192.168.1.84:20832           15           16     1        0.201938 944.08 train_model_39a0dea5TERMINATED192.168.1.84:20904           10           10     1        0.2230731000    train_model_13d09268TERMINATED192.168.1.84:20972           13           35     1        0.2005461001.28 train_model_c9fc7cd6TERMINATED192.168.1.84:21040           13           42     1        0.197765 913.68 train_model_ebaa73f9TERMINATED192.168.1.84:21106           12           11     1        0.2162981153.88 train_model_c89fd048TERMINATED192.168.1.84:21175           11           11     1        0.2050031000    train_model_210abe74TERMINATED192.168.1.84:21258           11           11     1        0.1949781000    train_model_19a22c6eTERMINATED192.168.1.84:21328           14           12     1        0.1929421060.38 train_model_3ecca919TERMINATED192.168.1.84:21394           14           13     1        0.2062011059.38 train_model_8e85dfc0TERMINATED192.168.1.84:21494           15           15     1        0.2196321000    train_model_5601e16aTERMINATED192.168.1.84:21561           12           15     1        0.183326 960.38 train_model_4b260a19TERMINATED192.168.1.84:21631           12           10     1        0.1869711139.08 train_model_258cb360TERMINATED192.168.1.84:21697           16           10     1        0.1971861140.58 train_model_6c38c970TERMINATED192.168.1.84:21764           13           10     1        0.1888381153.78 train_model_fccdeabdTERMINATED192.168.1.84:21830           12           11     1        0.1801421153.88 train_model_3bb0fd66TERMINATED192.168.1.84:21896           12           12     1        0.2181961000    train_model_7789984eTERMINATED192.168.1.84:21962           10           13     1        0.182172 826.18 train_model_9970c744TERMINATED192.168.1.84:22029           10           13     1        0.204211 826.18 train_model_a3055312TERMINATED192.168.1.84:22095            9           11     1        0.200074 901.88 train_model_abab1cb7TERMINATED192.168.1.84:22167           22           14     1        0.2055251158.88 train_model_369f6fabTERMINATED192.168.1.84:22270           13           28     1        0.1903611000.18 train_model_d7d815b3TERMINATED192.168.1.84:22336           18           14     1        0.1943111116.68 train_model_9940ae96TERMINATED192.168.1.84:22403           22           32     1        0.194089 923.28 train_model_b6a41835TERMINATED192.168.1.84:22469           22           12     1        0.1832991168.28 train_model_38cbd8dbTERMINATED192.168.1.84:22535           15           12     1        0.1909191039.58 train_model_9e2cb1efTERMINATED192.168.1.84:22601           22           12     1        0.2091931168.28 train_model_381afd88TERMINATED192.168.1.84:22667           23           11     1        0.20926 1128.28 train_model_b587a096TERMINATED192.168.1.84:22733           23           14     1        0.1838361100.68 train_model_0db4c953TERMINATED192.168.1.84:22801           21           14     1        0.1964571148.58 train_model_a6b16ae2TERMINATED192.168.1.84:22867           21           10     1        0.2037721007.98 train_model_ce670b25TERMINATED192.168.1.84:22935           22           12     1        0.21155 1168.28 train_model_b9da7392TERMINATED192.168.1.84:23002           24           12     1        0.1976471168.98 In\u00a0[3]: Copied! <pre>lt.plotter.heatmap(x=\"ema1_period\", y=\"ema2_period\", z=\"equity\")\n</pre> lt.plotter.heatmap(x=\"ema1_period\", y=\"ema2_period\", z=\"equity\") In\u00a0[4]: Copied! <pre>lt.plotter.contour(x=\"ema1_period\", y=\"ema2_period\", z=\"equity\")\n</pre> lt.plotter.contour(x=\"ema1_period\", y=\"ema2_period\", z=\"equity\") In\u00a0[5]: Copied! <pre>import plotly.io as pio\n\npio.renderers.default = \"notebook\"\npio.templates.default = \"plotly_dark\"\n</pre> import plotly.io as pio  pio.renderers.default = \"notebook\" pio.templates.default = \"plotly_dark\" In\u00a0[6]: Copied! <pre>df = results.get_dataframe()\ndf\n</pre> df = results.get_dataframe() df Out[6]: score timestamp checkpoint_dir_name done training_iteration trial_id date time_this_iter_s time_total_s pid hostname node_ip time_since_restore iterations_since_restore config/ema1_period config/ema2_period logdir 0 1056.08 1718418594 None False 1 567e8489 2024-06-15_09-29-54 0.394129 0.394129 15993 pc 192.168.1.84 0.394129 1 17 14 567e8489 1 920.68 1718418594 None False 1 0b9c709f 2024-06-15_09-29-54 0.219453 0.219453 16129 pc 192.168.1.84 0.219453 1 7 46 0b9c709f 2 1116.68 1718418595 None False 1 15f951e4 2024-06-15_09-29-55 0.187165 0.187165 16203 pc 192.168.1.84 0.187165 1 18 14 15f951e4 3 893.48 1718418596 None False 1 1054961c 2024-06-15_09-29-56 0.197212 0.197212 16275 pc 192.168.1.84 0.197212 1 9 24 1054961c 4 931.48 1718418597 None False 1 aceac61d 2024-06-15_09-29-57 0.205062 0.205062 16341 pc 192.168.1.84 0.205062 1 24 38 aceac61d ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... 95 1100.68 1718418680 None False 1 b587a096 2024-06-15_09-31-20 0.183836 0.183836 22733 pc 192.168.1.84 0.183836 1 23 14 b587a096 96 1148.58 1718418681 None False 1 0db4c953 2024-06-15_09-31-21 0.196457 0.196457 22801 pc 192.168.1.84 0.196457 1 21 14 0db4c953 97 1007.98 1718418682 None False 1 a6b16ae2 2024-06-15_09-31-22 0.203772 0.203772 22867 pc 192.168.1.84 0.203772 1 21 10 a6b16ae2 98 1168.28 1718418683 None False 1 ce670b25 2024-06-15_09-31-23 0.211550 0.211550 22935 pc 192.168.1.84 0.211550 1 22 12 ce670b25 99 1168.98 1718418684 None False 1 b9da7392 2024-06-15_09-31-24 0.197647 0.197647 23002 pc 192.168.1.84 0.197647 1 24 12 b9da7392 <p>100 rows \u00d7 17 columns</p> In\u00a0[7]: Copied! <pre>import pandas as pd\n\ndf.rename(\n    columns={\n        \"config/ema1_period\": \"ema1_period\",\n        \"config/ema2_period\": \"ema2_period\",\n    },\n    inplace=True,\n)\ndf\n</pre> import pandas as pd  df.rename(     columns={         \"config/ema1_period\": \"ema1_period\",         \"config/ema2_period\": \"ema2_period\",     },     inplace=True, ) df Out[7]: score timestamp checkpoint_dir_name done training_iteration trial_id date time_this_iter_s time_total_s pid hostname node_ip time_since_restore iterations_since_restore ema1_period ema2_period logdir 0 1056.08 1718418594 None False 1 567e8489 2024-06-15_09-29-54 0.394129 0.394129 15993 pc 192.168.1.84 0.394129 1 17 14 567e8489 1 920.68 1718418594 None False 1 0b9c709f 2024-06-15_09-29-54 0.219453 0.219453 16129 pc 192.168.1.84 0.219453 1 7 46 0b9c709f 2 1116.68 1718418595 None False 1 15f951e4 2024-06-15_09-29-55 0.187165 0.187165 16203 pc 192.168.1.84 0.187165 1 18 14 15f951e4 3 893.48 1718418596 None False 1 1054961c 2024-06-15_09-29-56 0.197212 0.197212 16275 pc 192.168.1.84 0.197212 1 9 24 1054961c 4 931.48 1718418597 None False 1 aceac61d 2024-06-15_09-29-57 0.205062 0.205062 16341 pc 192.168.1.84 0.205062 1 24 38 aceac61d ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... 95 1100.68 1718418680 None False 1 b587a096 2024-06-15_09-31-20 0.183836 0.183836 22733 pc 192.168.1.84 0.183836 1 23 14 b587a096 96 1148.58 1718418681 None False 1 0db4c953 2024-06-15_09-31-21 0.196457 0.196457 22801 pc 192.168.1.84 0.196457 1 21 14 0db4c953 97 1007.98 1718418682 None False 1 a6b16ae2 2024-06-15_09-31-22 0.203772 0.203772 22867 pc 192.168.1.84 0.203772 1 21 10 a6b16ae2 98 1168.28 1718418683 None False 1 ce670b25 2024-06-15_09-31-23 0.211550 0.211550 22935 pc 192.168.1.84 0.211550 1 22 12 ce670b25 99 1168.98 1718418684 None False 1 b9da7392 2024-06-15_09-31-24 0.197647 0.197647 23002 pc 192.168.1.84 0.197647 1 24 12 b9da7392 <p>100 rows \u00d7 17 columns</p> In\u00a0[8]: Copied! <pre>from plotly import express as px\n\nfig = px.scatter(df, x=df.index, y=\"score\")\nfig.show()\n</pre> from plotly import express as px  fig = px.scatter(df, x=df.index, y=\"score\") fig.show() In\u00a0[9]: Copied! <pre>import plotly.express as px\n\n\nfig = px.density_contour(\n    df,\n    x=\"ema1_period\",\n    y=\"ema2_period\",\n    z=\"score\",\n    histfunc=\"max\",\n)\nfig.update_traces(contours_coloring=\"fill\", contours_showlabels=True)\nfig.show()\n</pre> import plotly.express as px   fig = px.density_contour(     df,     x=\"ema1_period\",     y=\"ema2_period\",     z=\"score\",     histfunc=\"max\", ) fig.update_traces(contours_coloring=\"fill\", contours_showlabels=True) fig.show() In\u00a0[10]: Copied! <pre>import plotly.express as px\n\nfig = px.density_heatmap(\n    df,\n    x=\"ema1_period\",\n    y=\"ema2_period\",\n    z=\"score\",\n    nbinsx=20,\n    nbinsy=40,\n    histfunc=\"max\",\n    color_continuous_scale=\"Viridis\",\n)\nfig.show()\n</pre> import plotly.express as px  fig = px.density_heatmap(     df,     x=\"ema1_period\",     y=\"ema2_period\",     z=\"score\",     nbinsx=20,     nbinsy=40,     histfunc=\"max\",     color_continuous_scale=\"Viridis\", ) fig.show()"},{"location":"tutorial/optimize/3.ray/#optimize-with-ray","title":"Optimize with RAY\u00b6","text":"<p>Home | Document | Github</p>"},{"location":"tutorial/optimize/3.ray/#installation","title":"Installation\u00b6","text":"<p>At time of this tutorial, RAY support python &lt;= 3.11, read more at Installation</p>"},{"location":"tutorial/optimize/3.ray/#sample-strategy","title":"Sample Strategy\u00b6","text":""},{"location":"tutorial/optimize/3.ray/#optimize","title":"Optimize\u00b6","text":""},{"location":"tutorial/optimize/3.ray/#plot","title":"Plot\u00b6","text":""},{"location":"tutorial/optimize/3.ray/#plot-plotly","title":"Plot plotly\u00b6","text":"<p>Tutorial</p>"},{"location":"tutorial/optimize/3.ray/#init-plotly-environment","title":"Init Plotly environment\u00b6","text":""},{"location":"tutorial/optimize/3.ray/#type-1","title":"Type 1\u00b6","text":""},{"location":"tutorial/optimize/3.ray/#type-2","title":"Type 2\u00b6","text":""},{"location":"tutorial/optimize/3.ray/#type-3","title":"Type 3\u00b6","text":""},{"location":"tutorial/optimize/7.bayesopt/","title":"Optimize with BayesOpt","text":"In\u00a0[\u00a0]: Copied! <pre>!pip install bayesian-optimization\n</pre> !pip install bayesian-optimization In\u00a0[1]: Copied! <pre># import talib.abstract as ta\n\nfrom lettrade import DataFeed, Strategy, indicator as i\nfrom lettrade.exchange.backtest import ForexBackTestAccount, let_backtest\nfrom lettrade.indicator.vendor.qtpylib import inject_indicators\n\ninject_indicators()\n\n\nclass SmaCross(Strategy):\n    ema1_period = 9\n    ema2_period = 21\n\n    def indicators(self, df: DataFeed):\n        # df[\"ema1\"] = ta.EMA(df, timeperiod=self.ema1_period)\n        # df[\"ema2\"] = ta.EMA(df, timeperiod=self.ema2_period)\n        df[\"ema1\"] = df.close.ema(window=self.ema1_period)\n        df[\"ema2\"] = df.close.ema(window=self.ema2_period)\n\n        df[\"signal_ema_crossover\"] = i.crossover(df.ema1, df.ema2)\n        df[\"signal_ema_crossunder\"] = i.crossunder(df.ema1, df.ema2)\n\n    def next(self, df: DataFeed):\n        if len(self.orders) &gt; 0 or len(self.positions) &gt; 0:\n            return\n\n        if df.l.signal_ema_crossover[-1]:\n            price = df.l.close[-1]\n            self.buy(size=0.1, sl=price - 0.001, tp=price + 0.001)\n        elif df.l.signal_ema_crossunder[-1]:\n            price = df.l.close[-1]\n            self.sell(size=0.1, sl=price + 0.001, tp=price - 0.001)\n\n\nlt = let_backtest(\n    strategy=SmaCross,\n    datas=\"example/data/data/EURUSD_5m_0_10000.csv\",\n    account=ForexBackTestAccount,\n    # plotter=None,\n)\n</pre> # import talib.abstract as ta  from lettrade import DataFeed, Strategy, indicator as i from lettrade.exchange.backtest import ForexBackTestAccount, let_backtest from lettrade.indicator.vendor.qtpylib import inject_indicators  inject_indicators()   class SmaCross(Strategy):     ema1_period = 9     ema2_period = 21      def indicators(self, df: DataFeed):         # df[\"ema1\"] = ta.EMA(df, timeperiod=self.ema1_period)         # df[\"ema2\"] = ta.EMA(df, timeperiod=self.ema2_period)         df[\"ema1\"] = df.close.ema(window=self.ema1_period)         df[\"ema2\"] = df.close.ema(window=self.ema2_period)          df[\"signal_ema_crossover\"] = i.crossover(df.ema1, df.ema2)         df[\"signal_ema_crossunder\"] = i.crossunder(df.ema1, df.ema2)      def next(self, df: DataFeed):         if len(self.orders) &gt; 0 or len(self.positions) &gt; 0:             return          if df.l.signal_ema_crossover[-1]:             price = df.l.close[-1]             self.buy(size=0.1, sl=price - 0.001, tp=price + 0.001)         elif df.l.signal_ema_crossunder[-1]:             price = df.l.close[-1]             self.sell(size=0.1, sl=price + 0.001, tp=price - 0.001)   lt = let_backtest(     strategy=SmaCross,     datas=\"example/data/data/EURUSD_5m_0_10000.csv\",     account=ForexBackTestAccount,     # plotter=None, ) In\u00a0[3]: Copied! <pre>from bayes_opt import BayesianOptimization\n\nlettrade_model = lt.optimize_model()\n\n\ndef train_model(**params):\n    params = {\n        \"ema1_period\": int(params[\"ema1_period\"]),\n        \"ema2_period\": int(params[\"ema2_period\"]),\n    }\n    # Model\n    result = lettrade_model(params)\n\n    # Score\n    return result[\"equity\"]\n\n\npbounds = {\"ema1_period\": (5, 25), \"ema2_period\": (10, 50)}\n\noptimizer = BayesianOptimization(\n    f=train_model,\n    pbounds=pbounds,\n    random_state=1,\n)\n\noptimizer.maximize(\n    init_points=2,\n    n_iter=200,\n)\n</pre> from bayes_opt import BayesianOptimization  lettrade_model = lt.optimize_model()   def train_model(**params):     params = {         \"ema1_period\": int(params[\"ema1_period\"]),         \"ema2_period\": int(params[\"ema2_period\"]),     }     # Model     result = lettrade_model(params)      # Score     return result[\"equity\"]   pbounds = {\"ema1_period\": (5, 25), \"ema2_period\": (10, 50)}  optimizer = BayesianOptimization(     f=train_model,     pbounds=pbounds,     random_state=1, )  optimizer.maximize(     init_points=2,     n_iter=200, ) <pre>|   iter    |  target   | ema1_p... | ema2_p... |\n-------------------------------------------------\n| 1         | 922.0     | 13.34     | 38.81     |\n| 2         | 875.4     | 5.002     | 22.09     |\n| 3         | 921.0     | 13.3      | 39.0      |\n| 4         | 971.3     | 18.52     | 33.86     |\n| 5         | 864.5     | 25.0      | 30.34     |\n| 6         | 1.031e+03 | 15.36     | 31.85     |\n| 7         | 1.05e+03  | 14.5      | 28.01     |\n| 8         | 909.8     | 17.22     | 21.41     |\n| 9         | 919.6     | 10.73     | 30.04     |\n| 10        | 1.011e+03 | 17.12     | 28.92     |\n| 11        | 989.6     | 13.57     | 25.4      |\n| 12        | 1.01e+03  | 25.0      | 50.0      |\n| 13        | 1e+03     | 20.13     | 50.0      |\n| 14        | 1.008e+03 | 23.5      | 45.25     |\n| 15        | 971.5     | 13.03     | 49.99     |\n| 16        | 1.118e+03 | 24.91     | 10.16     |\n| 17        | 1.008e+03 | 21.38     | 10.4      |\n| 18        | 1.169e+03 | 24.99     | 12.98     |\n| 19        | 990.6     | 25.0      | 16.16     |\n| 20        | 1.158e+03 | 23.87     | 12.29     |\n| 21        | 1.148e+03 | 24.79     | 11.96     |\n| 22        | 1.159e+03 | 22.27     | 14.03     |\n| 23        | 1.117e+03 | 18.79     | 14.72     |\n| 24        | 1.059e+03 | 14.08     | 13.05     |\n| 25        | 923.6     | 8.15      | 10.0      |\n| 26        | 905.5     | 5.0       | 50.0      |\n| 27        | 931.9     | 5.0       | 38.91     |\n| 28        | 1.001e+03 | 25.0      | 39.59     |\n| 29        | 1.139e+03 | 20.65     | 16.19     |\n| 30        | 980.7     | 12.11     | 16.74     |\n| 31        | 1.12e+03  | 15.66     | 10.0      |\n| 32        | 1.059e+03 | 17.29     | 11.85     |\n| 33        | 1.154e+03 | 13.36     | 10.19     |\n| 34        | 958.8     | 18.21     | 44.02     |\n| 35        | 1.169e+03 | 23.68     | 13.74     |\n| 36        | 1.148e+03 | 20.63     | 14.68     |\n| 37        | 1.169e+03 | 23.13     | 13.15     |\n| 38        | 1.129e+03 | 24.16     | 13.11     |\n| 39        | 1.168e+03 | 18.55     | 17.01     |\n| 40        | 1e+03     | 16.67     | 16.31     |\n| 41        | 1.1e+03   | 19.84     | 18.24     |\n| 42        | 1e+03     | 11.9      | 11.48     |\n| 43        | 1.184e+03 | 14.49     | 10.92     |\n| 44        | 1.159e+03 | 25.0      | 22.99     |\n| 45        | 941.1     | 22.97     | 23.43     |\n| 46        | 1.049e+03 | 25.0      | 21.12     |\n| 47        | 1e+03     | 24.94     | 24.76     |\n| 48        | 1.08e+03  | 22.61     | 15.52     |\n| 49        | 1.168e+03 | 19.31     | 16.32     |\n| 50        | 832.2     | 5.0       | 31.88     |\n| 51        | 990.6     | 9.272     | 44.54     |\n| 52        | 940.6     | 5.0       | 15.35     |\n| 53        | 903.3     | 20.28     | 38.8      |\n| 54        | 1.117e+03 | 20.74     | 12.74     |\n| 55        | 851.4     | 5.0       | 44.28     |\n| 56        | 991.8     | 10.69     | 21.4      |\n| 57        | 983.1     | 13.37     | 45.28     |\n| 58        | 1.128e+03 | 23.3      | 11.13     |\n| 59        | 920.4     | 25.0      | 35.58     |\n| 60        | 889.9     | 9.795     | 35.56     |\n| 61        | 951.9     | 8.697     | 25.63     |\n| 62        | 1.184e+03 | 14.27     | 10.07     |\n| 63        | 989.0     | 16.82     | 48.69     |\n| 64        | 966.4     | 9.206     | 49.78     |\n| 65        | 991.4     | 25.0      | 42.71     |\n| 66        | 1.09e+03  | 24.98     | 14.45     |\n| 67        | 805.2     | 8.466     | 17.84     |\n| 68        | 1.02e+03  | 18.29     | 25.92     |\n| 69        | 941.2     | 20.6      | 29.15     |\n| 70        | 901.6     | 5.0       | 10.0      |\n| 71        | 961.5     | 14.86     | 34.82     |\n| 72        | 931.4     | 20.66     | 46.99     |\n| 73        | 1.08e+03  | 15.34     | 11.78     |\n| 74        | 1e+03     | 18.08     | 18.34     |\n| 75        | 1.01e+03  | 22.07     | 18.61     |\n| 76        | 880.2     | 9.328     | 40.89     |\n| 77        | 1.049e+03 | 18.56     | 10.05     |\n| 78        | 882.6     | 5.0       | 26.96     |\n| 79        | 1.164e+03 | 13.78     | 11.11     |\n| 80        | 1.129e+03 | 19.37     | 17.16     |\n| 81        | 1.168e+03 | 18.14     | 16.05     |\n| 82        | 1.016e+03 | 25.0      | 47.21     |\n| 83        | 1.168e+03 | 22.34     | 12.15     |\n| 84        | 974.0     | 16.34     | 41.14     |\n| 85        | 821.7     | 13.49     | 21.54     |\n| 86        | 918.2     | 21.74     | 42.48     |\n| 87        | 1.158e+03 | 21.96     | 13.07     |\n| 88        | 923.7     | 10.85     | 46.89     |\n| 89        | 1.101e+03 | 23.06     | 14.07     |\n| 90        | 1.006e+03 | 19.01     | 12.76     |\n| 91        | 1.149e+03 | 21.56     | 14.85     |\n| 92        | 923.2     | 21.72     | 33.55     |\n| 93        | 1.158e+03 | 21.29     | 13.86     |\n| 94        | 1e+03     | 20.49     | 20.64     |\n| 95        | 1.01e+03  | 13.94     | 30.14     |\n| 96        | 1.009e+03 | 16.0      | 26.27     |\n| 97        | 841.1     | 9.332     | 13.73     |\n| 98        | 985.5     | 17.17     | 37.25     |\n| 99        | 1.01e+03  | 22.63     | 50.0      |\n| 100       | 880.7     | 5.143     | 35.8      |\n| 101       | 913.7     | 13.63     | 42.64     |\n| 102       | 1.168e+03 | 19.58     | 15.44     |\n| 103       | 932.0     | 15.93     | 46.05     |\n| 104       | 840.4     | 11.58     | 26.91     |\n| 105       | 1.01e+03  | 12.79     | 32.74     |\n| 106       | 1.158e+03 | 23.05     | 12.15     |\n| 107       | 961.2     | 17.78     | 31.3      |\n| 108       | 1.023e+03 | 8.636     | 22.57     |\n| 109       | 941.2     | 20.78     | 26.03     |\n| 110       | 1.166e+03 | 18.79     | 15.91     |\n| 111       | 1.007e+03 | 16.62     | 13.95     |\n| 112       | 1.184e+03 | 14.1      | 10.57     |\n| 113       | 940.8     | 7.458     | 47.12     |\n| 114       | 1.184e+03 | 14.89     | 10.32     |\n| 115       | 999.5     | 18.99     | 23.66     |\n| 116       | 949.5     | 24.97     | 18.99     |\n| 117       | 1.049e+03 | 24.5      | 22.33     |\n| 118       | 1.116e+03 | 23.73     | 10.0      |\n| 119       | 1.168e+03 | 18.5      | 16.46     |\n| 120       | 911.5     | 8.835     | 32.3      |\n| 121       | 880.0     | 5.046     | 18.56     |\n| 122       | 1.148e+03 | 24.21     | 11.24     |\n| 123       | 962.2     | 15.41     | 50.0      |\n| 124       | 1.097e+03 | 21.39     | 11.92     |\n| 125       | 1.178e+03 | 11.87     | 10.0      |\n| 126       | 1e+03     | 10.56     | 10.18     |\n| 127       | 1.139e+03 | 12.7      | 10.04     |\n| 128       | 990.6     | 13.53     | 15.0      |\n| 129       | 1.08e+03  | 21.78     | 16.77     |\n| 130       | 947.8     | 23.09     | 37.81     |\n| 131       | 863.8     | 10.61     | 23.71     |\n| 132       | 959.9     | 16.52     | 24.21     |\n| 133       | 1.148e+03 | 20.36     | 15.5      |\n| 134       | 1.011e+03 | 5.0       | 12.84     |\n| 135       | 1.184e+03 | 14.74     | 10.0      |\n| 136       | 1.184e+03 | 14.52     | 10.43     |\n| 137       | 960.3     | 7.708     | 28.99     |\n| 138       | 1.166e+03 | 17.95     | 16.78     |\n| 139       | 940.7     | 18.11     | 50.0      |\n| 140       | 1.017e+03 | 25.0      | 45.27     |\n| 141       | 1.168e+03 | 22.49     | 12.67     |\n| 142       | 961.8     | 19.81     | 35.99     |\n| 143       | 879.5     | 8.582     | 20.84     |\n| 144       | 1.033e+03 | 7.081     | 24.03     |\n| 145       | 996.9     | 23.18     | 47.91     |\n| 146       | 1.127e+03 | 20.13     | 13.88     |\n| 147       | 1.17e+03  | 14.2      | 11.49     |\n| 148       | 923.5     | 18.7      | 41.33     |\n| 149       | 1.049e+03 | 25.0      | 23.51     |\n| 150       | 981.4     | 24.98     | 27.02     |\n| 151       | 973.7     | 13.96     | 18.19     |\n| 152       | 1.08e+03  | 20.63     | 17.45     |\n| 153       | 970.6     | 15.55     | 29.6      |\n| 154       | 961.4     | 14.02     | 47.71     |\n| 155       | 1.049e+03 | 24.98     | 22.57     |\n| 156       | 959.1     | 23.3      | 20.83     |\n| 157       | 881.3     | 7.992     | 38.11     |\n| 158       | 1.08e+03  | 17.09     | 10.3      |\n| 159       | 922.5     | 5.0       | 41.39     |\n| 160       | 970.8     | 12.59     | 35.8      |\n| 161       | 960.8     | 18.53     | 27.76     |\n| 162       | 941.3     | 11.17     | 43.54     |\n| 163       | 1.119e+03 | 17.77     | 15.05     |\n| 164       | 940.8     | 22.92     | 27.71     |\n| 165       | 1.012e+03 | 11.51     | 19.26     |\n| 166       | 884.8     | 24.8      | 33.0      |\n| 167       | 971.5     | 15.79     | 38.79     |\n| 168       | 911.3     | 5.035     | 47.45     |\n| 169       | 937.9     | 23.42     | 40.72     |\n| 170       | 961.7     | 16.58     | 33.52     |\n| 171       | 1.148e+03 | 24.98     | 11.13     |\n| 172       | 1.129e+03 | 24.97     | 13.62     |\n| 173       | 941.5     | 20.15     | 31.63     |\n| 174       | 928.6     | 18.3      | 46.82     |\n| 175       | 1.169e+03 | 21.41     | 15.7      |\n| 176       | 891.0     | 7.671     | 42.85     |\n| 177       | 900.6     | 6.871     | 12.27     |\n| 178       | 1.15e+03  | 13.45     | 12.11     |\n| 179       | 849.7     | 12.57     | 13.27     |\n| 180       | 852.6     | 5.0       | 24.54     |\n| 181       | 949.0     | 21.04     | 44.71     |\n| 182       | 1.09e+03  | 24.07     | 14.53     |\n| 183       | 1.141e+03 | 16.05     | 10.99     |\n| 184       | 950.0     | 10.93     | 38.37     |\n| 185       | 1.12e+03  | 15.24     | 10.87     |\n| 186       | 952.7     | 11.13     | 50.0      |\n| 187       | 1.05e+03  | 20.6      | 22.67     |\n| 188       | 913.5     | 16.03     | 43.42     |\n| 189       | 987.5     | 19.71     | 11.13     |\n| 190       | 1.166e+03 | 19.73     | 14.75     |\n| 191       | 969.9     | 11.15     | 33.38     |\n| 192       | 1.097e+03 | 22.32     | 11.42     |\n| 193       | 1.06e+03  | 14.14     | 12.22     |\n| 194       | 1.007e+03 | 15.01     | 14.48     |\n| 195       | 974.5     | 7.309     | 49.96     |\n| 196       | 1.164e+03 | 13.04     | 11.62     |\n| 197       | 813.7     | 15.88     | 18.95     |\n| 198       | 1e+03     | 19.4      | 19.51     |\n| 199       | 1.139e+03 | 12.18     | 10.46     |\n| 200       | 971.1     | 15.01     | 36.88     |\n| 201       | 1.128e+03 | 24.51     | 23.1      |\n| 202       | 990.2     | 16.04     | 27.8      |\n=================================================\n</pre> In\u00a0[4]: Copied! <pre>optimizer.max\n</pre> optimizer.max Out[4]: <pre>{'target': 1183.88,\n 'params': {'ema1_period': 14.491292925643293,\n  'ema2_period': 10.915994213005602}}</pre> In\u00a0[5]: Copied! <pre>lt.plotter.heatmap(x=\"ema1_period\", y=\"ema2_period\", z=\"equity\")\n</pre> lt.plotter.heatmap(x=\"ema1_period\", y=\"ema2_period\", z=\"equity\") In\u00a0[6]: Copied! <pre>lt.plotter.contour(x=\"ema1_period\", y=\"ema2_period\", z=\"equity\")\n</pre> lt.plotter.contour(x=\"ema1_period\", y=\"ema2_period\", z=\"equity\") In\u00a0[7]: Copied! <pre>import plotly.io as pio\n\npio.renderers.default = \"notebook\"\npio.templates.default = \"plotly_dark\"\n</pre> import plotly.io as pio  pio.renderers.default = \"notebook\" pio.templates.default = \"plotly_dark\" In\u00a0[8]: Copied! <pre>optimizer.res\n</pre> optimizer.res Out[8]: <pre>[{'target': 921.98,\n  'params': {'ema1_period': 13.34044009405148,\n   'ema2_period': 38.81297973768632}},\n {'target': 875.38,\n  'params': {'ema1_period': 5.002287496346898,\n   'ema2_period': 22.09330290527359}},\n {'target': 920.98,\n  'params': {'ema1_period': 13.3001407276959,\n   'ema2_period': 39.00039537269421}},\n {'target': 971.28,\n  'params': {'ema1_period': 18.52065437272396,\n   'ema2_period': 33.863457550993026}},\n {'target': 864.48,\n  'params': {'ema1_period': 25.0, 'ema2_period': 30.33928758479602}},\n {'target': 1031.18,\n  'params': {'ema1_period': 15.357337759328532,\n   'ema2_period': 31.848048898351127}},\n {'target': 1049.68,\n  'params': {'ema1_period': 14.50054591701167,\n   'ema2_period': 28.014062012896545}},\n {'target': 909.78,\n  'params': {'ema1_period': 17.22182187422121,\n   'ema2_period': 21.409928335006267}},\n {'target': 919.58,\n  'params': {'ema1_period': 10.73144001218241,\n   'ema2_period': 30.04066974540485}},\n {'target': 1010.88,\n  'params': {'ema1_period': 17.115149925746156,\n   'ema2_period': 28.917781696081047}},\n {'target': 989.58,\n  'params': {'ema1_period': 13.570348096696343,\n   'ema2_period': 25.404096691580644}},\n {'target': 1010.28, 'params': {'ema1_period': 25.0, 'ema2_period': 50.0}},\n {'target': 1000.18,\n  'params': {'ema1_period': 20.13399772503066, 'ema2_period': 50.0}},\n {'target': 1008.28,\n  'params': {'ema1_period': 23.495361736035818,\n   'ema2_period': 45.25289027522756}},\n {'target': 971.48,\n  'params': {'ema1_period': 13.029692423735854,\n   'ema2_period': 49.99334297246561}},\n {'target': 1118.38,\n  'params': {'ema1_period': 24.906030330322487,\n   'ema2_period': 10.157182041157764}},\n {'target': 1007.98,\n  'params': {'ema1_period': 21.37923376276011,\n   'ema2_period': 10.395845348298236}},\n {'target': 1168.98,\n  'params': {'ema1_period': 24.99158812480974,\n   'ema2_period': 12.98307192822218}},\n {'target': 990.58,\n  'params': {'ema1_period': 25.0, 'ema2_period': 16.160763482984994}},\n {'target': 1158.38,\n  'params': {'ema1_period': 23.86634900198165,\n   'ema2_period': 12.294075748068922}},\n {'target': 1148.18,\n  'params': {'ema1_period': 24.790930666853647,\n   'ema2_period': 11.963961085904518}},\n {'target': 1158.88,\n  'params': {'ema1_period': 22.265459234415193,\n   'ema2_period': 14.030698582520076}},\n {'target': 1116.68,\n  'params': {'ema1_period': 18.787132211610984,\n   'ema2_period': 14.716136499573038}},\n {'target': 1059.38,\n  'params': {'ema1_period': 14.075693848032216,\n   'ema2_period': 13.051766130408804}},\n {'target': 923.58,\n  'params': {'ema1_period': 8.149890181902189, 'ema2_period': 10.0}},\n {'target': 905.48, 'params': {'ema1_period': 5.0, 'ema2_period': 50.0}},\n {'target': 931.88,\n  'params': {'ema1_period': 5.0, 'ema2_period': 38.90563746761259}},\n {'target': 1001.38,\n  'params': {'ema1_period': 25.0, 'ema2_period': 39.5881538636381}},\n {'target': 1139.08,\n  'params': {'ema1_period': 20.651108713610626,\n   'ema2_period': 16.189379061835858}},\n {'target': 980.68,\n  'params': {'ema1_period': 12.111792096067155,\n   'ema2_period': 16.738731828066545}},\n {'target': 1120.48,\n  'params': {'ema1_period': 15.659039064119396, 'ema2_period': 10.0}},\n {'target': 1059.08,\n  'params': {'ema1_period': 17.294894350267416,\n   'ema2_period': 11.854171255613114}},\n {'target': 1153.78,\n  'params': {'ema1_period': 13.358213084249549,\n   'ema2_period': 10.194642176893609}},\n {'target': 958.78,\n  'params': {'ema1_period': 18.205943303763114,\n   'ema2_period': 44.0207020913403}},\n {'target': 1168.98,\n  'params': {'ema1_period': 23.680446326785688,\n   'ema2_period': 13.735838545453007}},\n {'target': 1148.28,\n  'params': {'ema1_period': 20.62613055844256,\n   'ema2_period': 14.675593400394167}},\n {'target': 1168.98,\n  'params': {'ema1_period': 23.125098159210452,\n   'ema2_period': 13.152688839392106}},\n {'target': 1129.28,\n  'params': {'ema1_period': 24.15750803502253,\n   'ema2_period': 13.106871154420155}},\n {'target': 1167.88,\n  'params': {'ema1_period': 18.55024818513378,\n   'ema2_period': 17.011813859705974}},\n {'target': 1000.0,\n  'params': {'ema1_period': 16.666731907272982,\n   'ema2_period': 16.309972709233975}},\n {'target': 1099.88,\n  'params': {'ema1_period': 19.84295688106342,\n   'ema2_period': 18.236897349447002}},\n {'target': 1000.0,\n  'params': {'ema1_period': 11.900884939383173,\n   'ema2_period': 11.476046863358087}},\n {'target': 1183.88,\n  'params': {'ema1_period': 14.491292925643293,\n   'ema2_period': 10.915994213005602}},\n {'target': 1158.78,\n  'params': {'ema1_period': 25.0, 'ema2_period': 22.986776489537558}},\n {'target': 941.08,\n  'params': {'ema1_period': 22.970213360673686,\n   'ema2_period': 23.43067442492127}},\n {'target': 1049.48,\n  'params': {'ema1_period': 25.0, 'ema2_period': 21.120811610972957}},\n {'target': 1000.0,\n  'params': {'ema1_period': 24.939170556250275,\n   'ema2_period': 24.758736450266717}},\n {'target': 1080.28,\n  'params': {'ema1_period': 22.613003726990616,\n   'ema2_period': 15.523232440237472}},\n {'target': 1168.38,\n  'params': {'ema1_period': 19.312482131471945,\n   'ema2_period': 16.32229609405573}},\n {'target': 832.18,\n  'params': {'ema1_period': 5.0, 'ema2_period': 31.88471517572175}},\n {'target': 990.58,\n  'params': {'ema1_period': 9.272240873628983,\n   'ema2_period': 44.5393963067013}},\n {'target': 940.58,\n  'params': {'ema1_period': 5.0, 'ema2_period': 15.34896487959813}},\n {'target': 903.28,\n  'params': {'ema1_period': 20.276612482728982,\n   'ema2_period': 38.802859770958676}},\n {'target': 1116.58,\n  'params': {'ema1_period': 20.738429168660833,\n   'ema2_period': 12.743828231186654}},\n {'target': 851.38,\n  'params': {'ema1_period': 5.0, 'ema2_period': 44.276967827437716}},\n {'target': 991.78,\n  'params': {'ema1_period': 10.690654560087063,\n   'ema2_period': 21.404388749369588}},\n {'target': 983.08,\n  'params': {'ema1_period': 13.368519031692625,\n   'ema2_period': 45.275890440218625}},\n {'target': 1128.28,\n  'params': {'ema1_period': 23.296772689935423,\n   'ema2_period': 11.13050045962189}},\n {'target': 920.38,\n  'params': {'ema1_period': 25.0, 'ema2_period': 35.58095956641047}},\n {'target': 889.88,\n  'params': {'ema1_period': 9.794725854384458,\n   'ema2_period': 35.55888935465831}},\n {'target': 951.88,\n  'params': {'ema1_period': 8.697028538956616,\n   'ema2_period': 25.627089941494667}},\n {'target': 1183.88,\n  'params': {'ema1_period': 14.27298082987814,\n   'ema2_period': 10.071930578041508}},\n {'target': 988.98,\n  'params': {'ema1_period': 16.820702126430202,\n   'ema2_period': 48.6940519873581}},\n {'target': 966.38,\n  'params': {'ema1_period': 9.206078675429975,\n   'ema2_period': 49.78446663997862}},\n {'target': 991.38,\n  'params': {'ema1_period': 25.0, 'ema2_period': 42.70969192180956}},\n {'target': 1090.28,\n  'params': {'ema1_period': 24.98343902319946,\n   'ema2_period': 14.445692015199473}},\n {'target': 805.18,\n  'params': {'ema1_period': 8.465575456828407,\n   'ema2_period': 17.83907197048665}},\n {'target': 1020.38,\n  'params': {'ema1_period': 18.28572833853306,\n   'ema2_period': 25.91540798373051}},\n {'target': 941.18,\n  'params': {'ema1_period': 20.59592668849432,\n   'ema2_period': 29.152119970740372}},\n {'target': 901.58, 'params': {'ema1_period': 5.0, 'ema2_period': 10.0}},\n {'target': 961.48,\n  'params': {'ema1_period': 14.856341812857364,\n   'ema2_period': 34.81561054038492}},\n {'target': 931.38,\n  'params': {'ema1_period': 20.659653888798854,\n   'ema2_period': 46.9855277271525}},\n {'target': 1080.48,\n  'params': {'ema1_period': 15.341335454006565,\n   'ema2_period': 11.781981561761237}},\n {'target': 1000.0,\n  'params': {'ema1_period': 18.077082576210326,\n   'ema2_period': 18.33988948568267}},\n {'target': 1010.18,\n  'params': {'ema1_period': 22.07265091346131,\n   'ema2_period': 18.609541618500053}},\n {'target': 880.18,\n  'params': {'ema1_period': 9.327668638894496,\n   'ema2_period': 40.892176646963904}},\n {'target': 1049.28,\n  'params': {'ema1_period': 18.5640244586111,\n   'ema2_period': 10.053659091807896}},\n {'target': 882.58,\n  'params': {'ema1_period': 5.0, 'ema2_period': 26.95944923164176}},\n {'target': 1163.58,\n  'params': {'ema1_period': 13.779746700052113,\n   'ema2_period': 11.108478766994596}},\n {'target': 1129.38,\n  'params': {'ema1_period': 19.366662459104866,\n   'ema2_period': 17.15760802939098}},\n {'target': 1168.18,\n  'params': {'ema1_period': 18.141950282456357,\n   'ema2_period': 16.051442329052637}},\n {'target': 1015.88,\n  'params': {'ema1_period': 25.0, 'ema2_period': 47.205351989665026}},\n {'target': 1168.28,\n  'params': {'ema1_period': 22.33630108241034,\n   'ema2_period': 12.1509516793809}},\n {'target': 973.98,\n  'params': {'ema1_period': 16.337543318886247,\n   'ema2_period': 41.13613021117229}},\n {'target': 821.68,\n  'params': {'ema1_period': 13.488166159661178,\n   'ema2_period': 21.536572495154157}},\n {'target': 918.18,\n  'params': {'ema1_period': 21.7369805141657,\n   'ema2_period': 42.47618105130706}},\n {'target': 1158.28,\n  'params': {'ema1_period': 21.9637823599262,\n   'ema2_period': 13.065836896481148}},\n {'target': 923.68,\n  'params': {'ema1_period': 10.854437512173494,\n   'ema2_period': 46.892927403890354}},\n {'target': 1100.68,\n  'params': {'ema1_period': 23.057012354070434,\n   'ema2_period': 14.073291499922789}},\n {'target': 1006.38,\n  'params': {'ema1_period': 19.006923921610003,\n   'ema2_period': 12.76269782337687}},\n {'target': 1148.58,\n  'params': {'ema1_period': 21.56482060049935,\n   'ema2_period': 14.8467780066263}},\n {'target': 923.18,\n  'params': {'ema1_period': 21.718941415777536,\n   'ema2_period': 33.54896502833806}},\n {'target': 1158.28,\n  'params': {'ema1_period': 21.289861701159634,\n   'ema2_period': 13.862726058792687}},\n {'target': 1000.0,\n  'params': {'ema1_period': 20.48510748382018,\n   'ema2_period': 20.640945825948357}},\n {'target': 1009.68,\n  'params': {'ema1_period': 13.936427380371146,\n   'ema2_period': 30.140490342646068}},\n {'target': 1009.08,\n  'params': {'ema1_period': 16.00206694681906,\n   'ema2_period': 26.266958206870296}},\n {'target': 841.08,\n  'params': {'ema1_period': 9.331635608795109,\n   'ema2_period': 13.726008184167034}},\n {'target': 985.48,\n  'params': {'ema1_period': 17.172182918252197,\n   'ema2_period': 37.249656668023086}},\n {'target': 1010.28,\n  'params': {'ema1_period': 22.63126543309579, 'ema2_period': 50.0}},\n {'target': 880.68,\n  'params': {'ema1_period': 5.142508234294967,\n   'ema2_period': 35.795516922231}},\n {'target': 913.68,\n  'params': {'ema1_period': 13.632341450872602,\n   'ema2_period': 42.63769158021708}},\n {'target': 1168.28,\n  'params': {'ema1_period': 19.584294442327476,\n   'ema2_period': 15.444791845246}},\n {'target': 931.98,\n  'params': {'ema1_period': 15.928785931082647,\n   'ema2_period': 46.05208119901655}},\n {'target': 840.38,\n  'params': {'ema1_period': 11.582325005508874,\n   'ema2_period': 26.912621319171105}},\n {'target': 1009.68,\n  'params': {'ema1_period': 12.793390235089392,\n   'ema2_period': 32.74133683328118}},\n {'target': 1158.38,\n  'params': {'ema1_period': 23.047933535470055,\n   'ema2_period': 12.150724459158972}},\n {'target': 961.18,\n  'params': {'ema1_period': 17.778300558960947,\n   'ema2_period': 31.297158759923438}},\n {'target': 1023.18,\n  'params': {'ema1_period': 8.635771418318257,\n   'ema2_period': 22.567712574377}},\n {'target': 941.18,\n  'params': {'ema1_period': 20.784284037917093,\n   'ema2_period': 26.030595536998288}},\n {'target': 1166.28,\n  'params': {'ema1_period': 18.794000816623786,\n   'ema2_period': 15.910464691478818}},\n {'target': 1007.38,\n  'params': {'ema1_period': 16.618130761689574,\n   'ema2_period': 13.954332553326969}},\n {'target': 1183.88,\n  'params': {'ema1_period': 14.095958885138787,\n   'ema2_period': 10.566009341781415}},\n {'target': 940.78,\n  'params': {'ema1_period': 7.457500499869645,\n   'ema2_period': 47.11754540315395}},\n {'target': 1183.88,\n  'params': {'ema1_period': 14.888567396985707,\n   'ema2_period': 10.316376491239119}},\n {'target': 999.48,\n  'params': {'ema1_period': 18.98835128471946,\n   'ema2_period': 23.662395858781387}},\n {'target': 949.48,\n  'params': {'ema1_period': 24.971109348412657,\n   'ema2_period': 18.98760036604802}},\n {'target': 1048.78,\n  'params': {'ema1_period': 24.497526989814848,\n   'ema2_period': 22.333652519220212}},\n {'target': 1116.18,\n  'params': {'ema1_period': 23.73256370723252, 'ema2_period': 10.0}},\n {'target': 1168.18,\n  'params': {'ema1_period': 18.50478834011814,\n   'ema2_period': 16.46397043290822}},\n {'target': 911.48,\n  'params': {'ema1_period': 8.835371518774815,\n   'ema2_period': 32.30291546362748}},\n {'target': 879.98,\n  'params': {'ema1_period': 5.0459487202167335,\n   'ema2_period': 18.56001336792902}},\n {'target': 1148.18,\n  'params': {'ema1_period': 24.21178223892833,\n   'ema2_period': 11.244789923844554}},\n {'target': 962.18,\n  'params': {'ema1_period': 15.410286575620907, 'ema2_period': 50.0}},\n {'target': 1096.68,\n  'params': {'ema1_period': 21.390181027727948,\n   'ema2_period': 11.92155540786963}},\n {'target': 1177.58,\n  'params': {'ema1_period': 11.869915591258794, 'ema2_period': 10.0}},\n {'target': 1000.0,\n  'params': {'ema1_period': 10.556307816364255,\n   'ema2_period': 10.181803416334873}},\n {'target': 1139.08,\n  'params': {'ema1_period': 12.70110494601057,\n   'ema2_period': 10.041751179915543}},\n {'target': 990.58,\n  'params': {'ema1_period': 13.533095676211609,\n   'ema2_period': 15.00458335103823}},\n {'target': 1080.18,\n  'params': {'ema1_period': 21.78285238427478,\n   'ema2_period': 16.765673288377663}},\n {'target': 947.78,\n  'params': {'ema1_period': 23.09329064098076,\n   'ema2_period': 37.80910107711412}},\n {'target': 863.78,\n  'params': {'ema1_period': 10.612258262076857,\n   'ema2_period': 23.71125217656028}},\n {'target': 959.88,\n  'params': {'ema1_period': 16.51684378123409,\n   'ema2_period': 24.209438295633422}},\n {'target': 1148.38,\n  'params': {'ema1_period': 20.360446903741124,\n   'ema2_period': 15.499116298711595}},\n {'target': 1010.68,\n  'params': {'ema1_period': 5.0, 'ema2_period': 12.844194652925767}},\n {'target': 1183.88,\n  'params': {'ema1_period': 14.741470537934276, 'ema2_period': 10.0}},\n {'target': 1183.88,\n  'params': {'ema1_period': 14.521934917946664,\n   'ema2_period': 10.433183075499748}},\n {'target': 960.28,\n  'params': {'ema1_period': 7.707940930238135,\n   'ema2_period': 28.987389623243452}},\n {'target': 1166.28,\n  'params': {'ema1_period': 17.954898075058626,\n   'ema2_period': 16.777581161834227}},\n {'target': 940.68,\n  'params': {'ema1_period': 18.108759882883813, 'ema2_period': 50.0}},\n {'target': 1016.88,\n  'params': {'ema1_period': 24.995807903356926,\n   'ema2_period': 45.27022570656085}},\n {'target': 1168.28,\n  'params': {'ema1_period': 22.48599997993239,\n   'ema2_period': 12.666054955008148}},\n {'target': 961.78,\n  'params': {'ema1_period': 19.810223957364684,\n   'ema2_period': 35.986763861293554}},\n {'target': 879.48,\n  'params': {'ema1_period': 8.58158165054128,\n   'ema2_period': 20.8404704658319}},\n {'target': 1033.28,\n  'params': {'ema1_period': 7.081364568924475,\n   'ema2_period': 24.033222271818524}},\n {'target': 996.88,\n  'params': {'ema1_period': 23.181479709260866,\n   'ema2_period': 47.91322054242905}},\n {'target': 1126.68,\n  'params': {'ema1_period': 20.126724633772042,\n   'ema2_period': 13.884560506154262}},\n {'target': 1170.48,\n  'params': {'ema1_period': 14.201390971553254,\n   'ema2_period': 11.485030342380202}},\n {'target': 923.48,\n  'params': {'ema1_period': 18.697284612918192,\n   'ema2_period': 41.33003729581113}},\n {'target': 1049.28,\n  'params': {'ema1_period': 25.0, 'ema2_period': 23.51459613194142}},\n {'target': 981.38,\n  'params': {'ema1_period': 24.983844076917126,\n   'ema2_period': 27.02267723731231}},\n {'target': 973.68,\n  'params': {'ema1_period': 13.964468683441117,\n   'ema2_period': 18.19329855403838}},\n {'target': 1080.08,\n  'params': {'ema1_period': 20.631826022379315,\n   'ema2_period': 17.453539083824424}},\n {'target': 970.58,\n  'params': {'ema1_period': 15.549722003124293,\n   'ema2_period': 29.602369703146575}},\n {'target': 961.38,\n  'params': {'ema1_period': 14.021460240129553,\n   'ema2_period': 47.70673886808691}},\n {'target': 1048.78,\n  'params': {'ema1_period': 24.977641943727175,\n   'ema2_period': 22.5679194673917}},\n {'target': 959.08,\n  'params': {'ema1_period': 23.30005193476663,\n   'ema2_period': 20.831122632655585}},\n {'target': 881.28,\n  'params': {'ema1_period': 7.9924398456315355,\n   'ema2_period': 38.106256484478465}},\n {'target': 1080.38,\n  'params': {'ema1_period': 17.08849767634066,\n   'ema2_period': 10.300420612152127}},\n {'target': 922.48,\n  'params': {'ema1_period': 5.0, 'ema2_period': 41.38821206164775}},\n {'target': 970.78,\n  'params': {'ema1_period': 12.594980313696764,\n   'ema2_period': 35.79539803251298}},\n {'target': 960.78,\n  'params': {'ema1_period': 18.52578259660658,\n   'ema2_period': 27.763131747624527}},\n {'target': 941.28,\n  'params': {'ema1_period': 11.169236834394445,\n   'ema2_period': 43.53722828056012}},\n {'target': 1118.58,\n  'params': {'ema1_period': 17.7676151298498,\n   'ema2_period': 15.045610682755894}},\n {'target': 940.78,\n  'params': {'ema1_period': 22.916244659368047,\n   'ema2_period': 27.713663247300477}},\n {'target': 1012.48,\n  'params': {'ema1_period': 11.514894035162913,\n   'ema2_period': 19.25533486006794}},\n {'target': 884.78,\n  'params': {'ema1_period': 24.797039824516364,\n   'ema2_period': 32.99550711728038}},\n {'target': 971.48,\n  'params': {'ema1_period': 15.787031084425767,\n   'ema2_period': 38.78878866008513}},\n {'target': 911.28,\n  'params': {'ema1_period': 5.034567903783698,\n   'ema2_period': 47.44685386552452}},\n {'target': 937.88,\n  'params': {'ema1_period': 23.421709203727367,\n   'ema2_period': 40.7231379428959}},\n {'target': 961.68,\n  'params': {'ema1_period': 16.577777252596135,\n   'ema2_period': 33.518558781275914}},\n {'target': 1148.18,\n  'params': {'ema1_period': 24.9780060324738,\n   'ema2_period': 11.13199810215114}},\n {'target': 1129.28,\n  'params': {'ema1_period': 24.9717596883115,\n   'ema2_period': 13.618048612634816}},\n {'target': 941.48,\n  'params': {'ema1_period': 20.152864093244883,\n   'ema2_period': 31.625879906904622}},\n {'target': 928.58,\n  'params': {'ema1_period': 18.295557713041728,\n   'ema2_period': 46.82376892904847}},\n {'target': 1168.68,\n  'params': {'ema1_period': 21.413811957680675,\n   'ema2_period': 15.70259995201595}},\n {'target': 890.98,\n  'params': {'ema1_period': 7.6711687975527765,\n   'ema2_period': 42.850069122818006}},\n {'target': 900.58,\n  'params': {'ema1_period': 6.870747444125074,\n   'ema2_period': 12.274723529743445}},\n {'target': 1150.28,\n  'params': {'ema1_period': 13.445409774891743,\n   'ema2_period': 12.106809771766308}},\n {'target': 849.68,\n  'params': {'ema1_period': 12.56535553102565,\n   'ema2_period': 13.269968387488962}},\n {'target': 852.58,\n  'params': {'ema1_period': 5.0, 'ema2_period': 24.538432936213617}},\n {'target': 948.98,\n  'params': {'ema1_period': 21.044991487156803,\n   'ema2_period': 44.71046724949366}},\n {'target': 1090.28,\n  'params': {'ema1_period': 24.067855786527993,\n   'ema2_period': 14.5277997743446}},\n {'target': 1140.58,\n  'params': {'ema1_period': 16.054388687470038,\n   'ema2_period': 10.988825690014368}},\n {'target': 949.98,\n  'params': {'ema1_period': 10.932257528973008,\n   'ema2_period': 38.372194576556154}},\n {'target': 1120.48,\n  'params': {'ema1_period': 15.243512674609635,\n   'ema2_period': 10.867858090414622}},\n {'target': 952.68,\n  'params': {'ema1_period': 11.128967860553141, 'ema2_period': 50.0}},\n {'target': 1050.48,\n  'params': {'ema1_period': 20.596292065546145,\n   'ema2_period': 22.67189753618319}},\n {'target': 913.48,\n  'params': {'ema1_period': 16.0256009531971,\n   'ema2_period': 43.422958994508335}},\n {'target': 987.48,\n  'params': {'ema1_period': 19.710801504408934,\n   'ema2_period': 11.126231854305356}},\n {'target': 1166.48,\n  'params': {'ema1_period': 19.731788301467354,\n   'ema2_period': 14.753197199748268}},\n {'target': 969.88,\n  'params': {'ema1_period': 11.15466734923657,\n   'ema2_period': 33.379964144972256}},\n {'target': 1096.78,\n  'params': {'ema1_period': 22.322296626351495,\n   'ema2_period': 11.41829262088201}},\n {'target': 1060.38,\n  'params': {'ema1_period': 14.140943725768357,\n   'ema2_period': 12.218265556787987}},\n {'target': 1007.28,\n  'params': {'ema1_period': 15.011751608101356,\n   'ema2_period': 14.48384836568843}},\n {'target': 974.48,\n  'params': {'ema1_period': 7.309166472100912,\n   'ema2_period': 49.95728089364002}},\n {'target': 1163.58,\n  'params': {'ema1_period': 13.036866406643677,\n   'ema2_period': 11.618876689970365}},\n {'target': 813.68,\n  'params': {'ema1_period': 15.875952021946377,\n   'ema2_period': 18.945529780098042}},\n {'target': 1000.0,\n  'params': {'ema1_period': 19.396318495854057,\n   'ema2_period': 19.509340069043986}},\n {'target': 1139.08,\n  'params': {'ema1_period': 12.183151647729268,\n   'ema2_period': 10.455214390028633}},\n {'target': 971.08,\n  'params': {'ema1_period': 15.014676280285737,\n   'ema2_period': 36.878499830844966}},\n {'target': 1128.28,\n  'params': {'ema1_period': 24.51447729012598,\n   'ema2_period': 23.095740953349818}},\n {'target': 990.18,\n  'params': {'ema1_period': 16.039640016653433,\n   'ema2_period': 27.79675829919071}}]</pre> In\u00a0[9]: Copied! <pre>import pandas as pd\n\ndf = pd.DataFrame(columns=[\"ema1_period\", \"ema2_period\", \"score\"])\nfor i, trial in enumerate(optimizer.res):\n    df.loc[i] = [\n        int(trial[\"params\"][\"ema1_period\"]),\n        int(trial[\"params\"][\"ema2_period\"]),\n        trial[\"target\"],\n    ]\n\ndf\n</pre> import pandas as pd  df = pd.DataFrame(columns=[\"ema1_period\", \"ema2_period\", \"score\"]) for i, trial in enumerate(optimizer.res):     df.loc[i] = [         int(trial[\"params\"][\"ema1_period\"]),         int(trial[\"params\"][\"ema2_period\"]),         trial[\"target\"],     ]  df Out[9]: ema1_period ema2_period score 0 13.0 38.0 921.98 1 5.0 22.0 875.38 2 13.0 39.0 920.98 3 18.0 33.0 971.28 4 25.0 30.0 864.48 ... ... ... ... 197 19.0 19.0 1000.00 198 12.0 10.0 1139.08 199 15.0 36.0 971.08 200 24.0 23.0 1128.28 201 16.0 27.0 990.18 <p>202 rows \u00d7 3 columns</p> In\u00a0[10]: Copied! <pre>from plotly import express as px\n\nfig = px.scatter(df, x=df.index, y=\"score\")\nfig.show()\n</pre> from plotly import express as px  fig = px.scatter(df, x=df.index, y=\"score\") fig.show() In\u00a0[11]: Copied! <pre>import plotly.express as px\n\n\nfig = px.density_contour(\n    df,\n    x=\"ema1_period\",\n    y=\"ema2_period\",\n    z=\"score\",\n    histfunc=\"max\",\n)\nfig.update_traces(contours_coloring=\"fill\", contours_showlabels=True)\nfig.show()\n</pre> import plotly.express as px   fig = px.density_contour(     df,     x=\"ema1_period\",     y=\"ema2_period\",     z=\"score\",     histfunc=\"max\", ) fig.update_traces(contours_coloring=\"fill\", contours_showlabels=True) fig.show() In\u00a0[12]: Copied! <pre>import plotly.express as px\n\nfig = px.density_heatmap(\n    df,\n    x=\"ema1_period\",\n    y=\"ema2_period\",\n    z=\"score\",\n    nbinsx=20,\n    nbinsy=40,\n    histfunc=\"max\",\n    color_continuous_scale=\"Viridis\",\n)\nfig.show()\n</pre> import plotly.express as px  fig = px.density_heatmap(     df,     x=\"ema1_period\",     y=\"ema2_period\",     z=\"score\",     nbinsx=20,     nbinsy=40,     histfunc=\"max\",     color_continuous_scale=\"Viridis\", ) fig.show()"},{"location":"tutorial/optimize/7.bayesopt/#optimize-with-bayesopt","title":"Optimize with BayesOpt\u00b6","text":"<p>Home | Document</p>"},{"location":"tutorial/optimize/7.bayesopt/#installation","title":"Installation\u00b6","text":""},{"location":"tutorial/optimize/7.bayesopt/#sample-strategy","title":"Sample Strategy\u00b6","text":""},{"location":"tutorial/optimize/7.bayesopt/#optimize","title":"Optimize\u00b6","text":""},{"location":"tutorial/optimize/7.bayesopt/#plot","title":"Plot\u00b6","text":""},{"location":"tutorial/optimize/7.bayesopt/#plot-plotly","title":"Plot plotly\u00b6","text":""},{"location":"tutorial/optimize/7.bayesopt/#init-plotly-environment","title":"Init Plotly environment\u00b6","text":""},{"location":"tutorial/optimize/7.bayesopt/#type-1","title":"Type 1\u00b6","text":""},{"location":"tutorial/optimize/7.bayesopt/#type-2","title":"Type 2\u00b6","text":""},{"location":"tutorial/optimize/7.bayesopt/#type-3","title":"Type 3\u00b6","text":""},{"location":"tutorial/optimize/8.blackbox/","title":"Optimize with blackbox","text":"In\u00a0[\u00a0]: Copied! <pre>!pip install git+https://github.com/paulknysh/blackbox.git@master\n</pre> !pip install git+https://github.com/paulknysh/blackbox.git@master In\u00a0[1]: Copied! <pre>import talib.abstract as ta\n\nfrom lettrade import DataFeed, Strategy, indicator as i\nfrom lettrade.exchange.backtest import ForexBackTestAccount, let_backtest\n\n\nclass SmaCross(Strategy):\n    ema1_period = 9\n    ema2_period = 21\n\n    def indicators(self, df: DataFeed):\n        df[\"ema1\"] = ta.EMA(df, timeperiod=self.ema1_period)\n        df[\"ema2\"] = ta.EMA(df, timeperiod=self.ema2_period)\n\n        df[\"signal_ema_crossover\"] = i.crossover(df.ema1, df.ema2)\n        df[\"signal_ema_crossunder\"] = i.crossunder(df.ema1, df.ema2)\n\n    def next(self, df: DataFeed):\n        if len(self.orders) &gt; 0 or len(self.positionsons) &gt; 0:\n            return\n\n        if df.l.signal_ema_crossover[-1]:\n            price = self.data.l.close[-1]\n            self.buy(size=0.1, sl=price - 0.001, tp=price + 0.001)\n        elif df.l.signal_ema_crossunder[-1]:\n            price = self.data.l.close[-1]\n            self.sell(size=0.1, sl=price + 0.001, tp=price - 0.001)\n\n\nlt = let_backtest(\n    strategy=SmaCross,\n    datas=\"example/data/data/EURUSD_5m_0_10000.csv\",\n    account=ForexBackTestAccount,\n)\n</pre> import talib.abstract as ta  from lettrade import DataFeed, Strategy, indicator as i from lettrade.exchange.backtest import ForexBackTestAccount, let_backtest   class SmaCross(Strategy):     ema1_period = 9     ema2_period = 21      def indicators(self, df: DataFeed):         df[\"ema1\"] = ta.EMA(df, timeperiod=self.ema1_period)         df[\"ema2\"] = ta.EMA(df, timeperiod=self.ema2_period)          df[\"signal_ema_crossover\"] = i.crossover(df.ema1, df.ema2)         df[\"signal_ema_crossunder\"] = i.crossunder(df.ema1, df.ema2)      def next(self, df: DataFeed):         if len(self.orders) &gt; 0 or len(self.positionsons) &gt; 0:             return          if df.l.signal_ema_crossover[-1]:             price = self.data.l.close[-1]             self.buy(size=0.1, sl=price - 0.001, tp=price + 0.001)         elif df.l.signal_ema_crossunder[-1]:             price = self.data.l.close[-1]             self.sell(size=0.1, sl=price + 0.001, tp=price - 0.001)   lt = let_backtest(     strategy=SmaCross,     datas=\"example/data/data/EURUSD_5m_0_10000.csv\",     account=ForexBackTestAccount, ) In\u00a0[2]: Copied! <pre>import blackbox as bb\n\n\ndef params_parser(args):\n    return {\"ema1_period\": int(args[0]), \"ema2_period\": int(args[1])}\n\n\ndef result_parser(result):\n    return result[\"equity\"]\n\n\nresult = bb.minimize(\n    f=lt.optimize_model(\n        params_parser=params_parser,\n        result_parser=result_parser,\n    ),\n    domain=[[5, 25, 1], [10, 50, 1]],  # ranges of each parameter\n    budget=300,  # total number of function calls available\n    batch=12,  # number of calls that will be evaluated in parallel\n)\n\nlt.optimize_done()\n</pre> import blackbox as bb   def params_parser(args):     return {\"ema1_period\": int(args[0]), \"ema2_period\": int(args[1])}   def result_parser(result):     return result[\"equity\"]   result = bb.minimize(     f=lt.optimize_model(         params_parser=params_parser,         result_parser=result_parser,     ),     domain=[[5, 25, 1], [10, 50, 1]],  # ranges of each parameter     budget=300,  # total number of function calls available     batch=12,  # number of calls that will be evaluated in parallel )  lt.optimize_done() <pre>INFO     evaluating batch 1/25 (samples 1..12/300) 06-13 05:59:26\nINFO     evaluating batch 2/25 (samples 13..24/300) 06-13 05:59:26\nINFO     evaluating batch 3/25 (samples 25..36/300) 06-13 05:59:27\nINFO     evaluating batch 4/25 (samples 37..48/300) 06-13 05:59:27\nINFO     evaluating batch 5/25 (samples 49..60/300) 06-13 05:59:27\nINFO     evaluating batch 6/25 (samples 61..72/300) 06-13 05:59:27\nINFO     evaluating batch 7/25 (samples 73..84/300) 06-13 05:59:27\nINFO     evaluating batch 8/25 (samples 85..96/300) 06-13 05:59:27\nINFO     evaluating batch 9/25 (samples 97..108/300) 06-13 05:59:28\nINFO     evaluating batch 10/25 (samples 109..120/300) 06-13 05:59:28\nINFO     evaluating batch 11/25 (samples 121..132/300) 06-13 05:59:28\nINFO     evaluating batch 12/25 (samples 133..144/300) 06-13 05:59:28\nINFO     evaluating batch 13/25 (samples 145..156/300) 06-13 05:59:28\nINFO     evaluating batch 14/25 (samples 157..168/300) 06-13 05:59:28\nINFO     evaluating batch 15/25 (samples 169..180/300) 06-13 05:59:30\nINFO     evaluating batch 16/25 (samples 181..192/300) 06-13 05:59:32\nINFO     evaluating batch 17/25 (samples 193..204/300) 06-13 05:59:34\nINFO     evaluating batch 18/25 (samples 205..216/300) 06-13 05:59:37\nINFO     evaluating batch 19/25 (samples 217..228/300) 06-13 05:59:39\nINFO     evaluating batch 20/25 (samples 229..240/300) 06-13 05:59:41\nINFO     evaluating batch 21/25 (samples 241..252/300) 06-13 05:59:44\nINFO     evaluating batch 22/25 (samples 253..264/300) 06-13 05:59:47\nINFO     evaluating batch 23/25 (samples 265..276/300) 06-13 05:59:49\nINFO     evaluating batch 24/25 (samples 277..288/300) 06-13 05:59:52\nINFO     evaluating batch 25/25 (samples 289..300/300) 06-13 05:59:55\nINFO     DONE 06-13 05:59:59\n</pre> In\u00a0[3]: Copied! <pre>lt.plotter.heatmap(x=\"ema1_period\", y=\"ema2_period\")\n</pre> lt.plotter.heatmap(x=\"ema1_period\", y=\"ema2_period\") In\u00a0[4]: Copied! <pre>lt.plotter.contour(x=\"ema1_period\", y=\"ema2_period\")\n</pre> lt.plotter.contour(x=\"ema1_period\", y=\"ema2_period\") In\u00a0[5]: Copied! <pre>import plotly.io as pio\n\npio.renderers.default = \"notebook\"\npio.templates.default = \"plotly_dark\"\n</pre> import plotly.io as pio  pio.renderers.default = \"notebook\" pio.templates.default = \"plotly_dark\" In\u00a0[6]: Copied! <pre>import pandas as pd\n\ndf = pd.DataFrame(\n    {\n        \"ema1_period\": [r[0] for r in result[\"all_xs\"]],\n        \"ema2_period\": [r[1] for r in result[\"all_xs\"]],\n        \"equity\": result[\"all_fs\"],\n    }\n)\n\ndf.columns = [\"x\", \"y\", \"z\"]\ndf.x = df.x.astype(int)\ndf.y = df.y.astype(int)\n\ndf\n</pre> import pandas as pd  df = pd.DataFrame(     {         \"ema1_period\": [r[0] for r in result[\"all_xs\"]],         \"ema2_period\": [r[1] for r in result[\"all_xs\"]],         \"equity\": result[\"all_fs\"],     } )  df.columns = [\"x\", \"y\", \"z\"] df.x = df.x.astype(int) df.y = df.y.astype(int)  df Out[6]: x y z 0 10 12 840.88 1 5 35 880.68 2 20 18 1080.18 3 15 41 986.28 4 10 23 863.78 ... ... ... ... 295 8 45 940.58 296 18 47 918.98 297 8 45 940.58 298 19 11 987.48 299 16 32 932.08 <p>300 rows \u00d7 3 columns</p> In\u00a0[7]: Copied! <pre>import plotly.express as px\n\nfig = px.density_contour(\n    df,\n    x=\"x\",\n    y=\"y\",\n    z=\"z\",\n    histfunc=\"max\",\n)\nfig.update_traces(contours_coloring=\"fill\", contours_showlabels=True)\nfig.show()\n</pre> import plotly.express as px  fig = px.density_contour(     df,     x=\"x\",     y=\"y\",     z=\"z\",     histfunc=\"max\", ) fig.update_traces(contours_coloring=\"fill\", contours_showlabels=True) fig.show() In\u00a0[8]: Copied! <pre>import plotly.express as px\n\nfig = px.density_heatmap(\n    df,\n    x=\"x\",\n    y=\"y\",\n    z=\"z\",\n    nbinsx=20,\n    nbinsy=40,\n    histfunc=\"max\",\n    color_continuous_scale=\"Viridis\",\n)\nfig.show()\n</pre> import plotly.express as px  fig = px.density_heatmap(     df,     x=\"x\",     y=\"y\",     z=\"z\",     nbinsx=20,     nbinsy=40,     histfunc=\"max\",     color_continuous_scale=\"Viridis\", ) fig.show() In\u00a0[9]: Copied! <pre>import plotly.graph_objects as go\n\nfig = go.Figure(\n    go.Histogram2d(\n        x=df.x,\n        y=df.y,\n        z=df.z,\n        nbinsx=20,\n        nbinsy=40,\n        histfunc=\"max\",\n    )\n)\n\nfig.show()\n</pre> import plotly.graph_objects as go  fig = go.Figure(     go.Histogram2d(         x=df.x,         y=df.y,         z=df.z,         nbinsx=20,         nbinsy=40,         histfunc=\"max\",     ) )  fig.show()"},{"location":"tutorial/optimize/8.blackbox/#optimize-with-blackbox","title":"Optimize with blackbox\u00b6","text":"<p>Home</p> <p>Install latest blackbox optimize from PyPi</p>"},{"location":"tutorial/optimize/8.blackbox/#sample-strategy","title":"Sample strategy\u00b6","text":""},{"location":"tutorial/optimize/8.blackbox/#run-optimize","title":"Run optimize\u00b6","text":""},{"location":"tutorial/optimize/8.blackbox/#plot","title":"Plot\u00b6","text":""},{"location":"tutorial/optimize/8.blackbox/#plot-plotly","title":"Plot Plotly\u00b6","text":""},{"location":"tutorial/optimize/8.blackbox/#init-plotly-environment","title":"Init Plotly environment\u00b6","text":""},{"location":"tutorial/optimize/8.blackbox/#clean-data","title":"Clean data\u00b6","text":""},{"location":"tutorial/optimize/8.blackbox/#type-1","title":"Type 1\u00b6","text":""},{"location":"tutorial/optimize/8.blackbox/#type-2","title":"Type 2\u00b6","text":""},{"location":"tutorial/optimize/8.blackbox/#type-3","title":"Type 3\u00b6","text":""},{"location":"tutorial/optimize/8.blackbox/#source","title":"Source\u00b6","text":"<pre>--8&lt;-- \"example/optimize/blackbox.py\"\n</pre>"},{"location":"tutorial/optimize/9.hyperactive/","title":"Optimize with Hyperactive","text":"In\u00a0[\u00a0]: Copied! <pre>!pip install hyperactive\n# Re-install pandas 2.2\n!pip install --upgrade pandas\n</pre> !pip install hyperactive # Re-install pandas 2.2 !pip install --upgrade pandas In\u00a0[1]: Copied! <pre># import talib.abstract as ta\n\nfrom lettrade import DataFeed, Strategy, indicator as i\nfrom lettrade.exchange.backtest import ForexBackTestAccount, let_backtest\nfrom lettrade.indicator.vendor.qtpylib import inject_indicators\n\ninject_indicators()\n\n\nclass SmaCross(Strategy):\n    ema1_period = 9\n    ema2_period = 21\n\n    def indicators(self, df: DataFeed):\n        # df[\"ema1\"] = ta.EMA(df, timeperiod=self.ema1_period)\n        # df[\"ema2\"] = ta.EMA(df, timeperiod=self.ema2_period)\n        df[\"ema1\"] = df.close.ema(window=self.ema1_period)\n        df[\"ema2\"] = df.close.ema(window=self.ema2_period)\n\n        df[\"signal_ema_crossover\"] = i.crossover(df.ema1, df.ema2)\n        df[\"signal_ema_crossunder\"] = i.crossunder(df.ema1, df.ema2)\n\n    def next(self, df: DataFeed):\n        if len(self.orders) &gt; 0 or len(self.positionsons) &gt; 0:\n            return\n\n        if df.l.signal_ema_crossover[-1]:\n            price = df.l.close[-1]\n            self.buy(size=0.1, sl=price - 0.001, tp=price + 0.001)\n        elif df.l.signal_ema_crossunder[-1]:\n            price = df.l.close[-1]\n            self.sell(size=0.1, sl=price + 0.001, tp=price - 0.001)\n\n\nlt = let_backtest(\n    strategy=SmaCross,\n    datas=\"example/data/data/EURUSD_5m_0_10000.csv\",\n    account=ForexBackTestAccount,\n    # plotter=None,\n)\n</pre> # import talib.abstract as ta  from lettrade import DataFeed, Strategy, indicator as i from lettrade.exchange.backtest import ForexBackTestAccount, let_backtest from lettrade.indicator.vendor.qtpylib import inject_indicators  inject_indicators()   class SmaCross(Strategy):     ema1_period = 9     ema2_period = 21      def indicators(self, df: DataFeed):         # df[\"ema1\"] = ta.EMA(df, timeperiod=self.ema1_period)         # df[\"ema2\"] = ta.EMA(df, timeperiod=self.ema2_period)         df[\"ema1\"] = df.close.ema(window=self.ema1_period)         df[\"ema2\"] = df.close.ema(window=self.ema2_period)          df[\"signal_ema_crossover\"] = i.crossover(df.ema1, df.ema2)         df[\"signal_ema_crossunder\"] = i.crossunder(df.ema1, df.ema2)      def next(self, df: DataFeed):         if len(self.orders) &gt; 0 or len(self.positionsons) &gt; 0:             return          if df.l.signal_ema_crossover[-1]:             price = df.l.close[-1]             self.buy(size=0.1, sl=price - 0.001, tp=price + 0.001)         elif df.l.signal_ema_crossunder[-1]:             price = df.l.close[-1]             self.sell(size=0.1, sl=price + 0.001, tp=price - 0.001)   lt = let_backtest(     strategy=SmaCross,     datas=\"example/data/data/EURUSD_5m_0_10000.csv\",     account=ForexBackTestAccount,     # plotter=None, ) In\u00a0[2]: Copied! <pre>from hyperactive import Hyperactive\nfrom hyperactive.optimizers import HillClimbingOptimizer\n\n\n# define the model in a function\ndef params_parser(args):\n    return {\n        \"ema1_period\": args[\"ema1_period\"],\n        \"ema2_period\": args[\"ema2_period\"],\n    }\n\n\ndef result_parser(result):\n    return result[\"equity\"]\n\n\nmodel = lt.optimize_model(\n    params_parser=params_parser,\n    result_parser=result_parser,\n)\n\n# search space determines the ranges of parameters you want the optimizer to search through\nsearch_space = {\n    \"ema1_period\": list(range(5, 25, 1)),\n    \"ema2_period\": list(range(10, 50)),\n}\n\noptimizer = HillClimbingOptimizer(epsilon=0.1, distribution=\"laplace\", n_neighbours=4)\n\n# start the optimization run\nhyper = Hyperactive()\nhyper.add_search(model, search_space, optimizer=optimizer, n_iter=1000)\nhyper.run()\n</pre> from hyperactive import Hyperactive from hyperactive.optimizers import HillClimbingOptimizer   # define the model in a function def params_parser(args):     return {         \"ema1_period\": args[\"ema1_period\"],         \"ema2_period\": args[\"ema2_period\"],     }   def result_parser(result):     return result[\"equity\"]   model = lt.optimize_model(     params_parser=params_parser,     result_parser=result_parser, )  # search space determines the ranges of parameters you want the optimizer to search through search_space = {     \"ema1_period\": list(range(5, 25, 1)),     \"ema2_period\": list(range(10, 50)), }  optimizer = HillClimbingOptimizer(epsilon=0.1, distribution=\"laplace\", n_neighbours=4)  # start the optimization run hyper = Hyperactive() hyper.add_search(model, search_space, optimizer=optimizer, n_iter=1000) hyper.run() <pre>[0] _optimize_model (Hill Climbing): 100%|\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500| 1000/1000 [00:01&lt;00:00, 758.47it/s, best_iter=0, best_pos=[9 0], best_score=1183.88] \n</pre> <pre>\n\nResults: '_optimize_model'  \n   Best score: 1183.88  \n   Best parameter set:\n      'ema1_period' : 14.0  \n      'ema2_period' : 10.0  \n   Best iteration: 0  \n \n   Random seed: 1082602856  \n \n   Evaluation time   : 0.4881856441497803 sec    [83.53 %]\n   Optimization time : 0.09622955322265625 sec    [16.47 %]\n   Iteration time    : 0.5844151973724365 sec    [1711.11 iter/sec]\n \n</pre> In\u00a0[3]: Copied! <pre>df = hyper.search_data(model)\ndf\n</pre> df = hyper.search_data(model) df Out[3]: ema1_period ema2_period score 0 9 29 850.48 1 23 27 971.48 2 11 23 851.68 3 11 36 940.68 4 17 23 959.68 ... ... ... ... 995 11 24 831.78 996 8 20 879.48 997 21 11 1096.68 998 8 35 890.58 999 15 14 1007.28 <p>1000 rows \u00d7 3 columns</p> In\u00a0[4]: Copied! <pre>lt.plotter.heatmap()\n</pre> lt.plotter.heatmap() In\u00a0[5]: Copied! <pre>lt.plotter.contour(x=\"ema1_period\", y=\"ema2_period\", z=\"equity\")\n</pre> lt.plotter.contour(x=\"ema1_period\", y=\"ema2_period\", z=\"equity\") In\u00a0[6]: Copied! <pre>import plotly.io as pio\n\npio.renderers.default = \"notebook\"\npio.templates.default = \"plotly_dark\"\n</pre> import plotly.io as pio  pio.renderers.default = \"notebook\" pio.templates.default = \"plotly_dark\" In\u00a0[9]: Copied! <pre>import plotly.express as px\n\nfig = px.density_heatmap(\n    df,\n    x=\"ema1_period\",\n    y=\"ema2_period\",\n    z=\"score\",\n    nbinsx=20,\n    nbinsy=40,\n    histfunc=\"max\",\n    color_continuous_scale=\"Viridis\",\n)\nfig.show()\n</pre> import plotly.express as px  fig = px.density_heatmap(     df,     x=\"ema1_period\",     y=\"ema2_period\",     z=\"score\",     nbinsx=20,     nbinsy=40,     histfunc=\"max\",     color_continuous_scale=\"Viridis\", ) fig.show() In\u00a0[8]: Copied! <pre>import plotly.express as px\n\nfig = px.density_contour(\n    df,\n    x=\"ema1_period\",\n    y=\"ema2_period\",\n    z=\"score\",\n    histfunc=\"max\",\n)\nfig.update_traces(contours_coloring=\"fill\", contours_showlabels=True)\nfig.show()\n</pre> import plotly.express as px  fig = px.density_contour(     df,     x=\"ema1_period\",     y=\"ema2_period\",     z=\"score\",     histfunc=\"max\", ) fig.update_traces(contours_coloring=\"fill\", contours_showlabels=True) fig.show()"},{"location":"tutorial/optimize/9.hyperactive/#optimize-with-hyperactive","title":"Optimize with Hyperactive\u00b6","text":"<p>Home</p>"},{"location":"tutorial/optimize/9.hyperactive/#install","title":"Install\u00b6","text":""},{"location":"tutorial/optimize/9.hyperactive/#sample-strategy","title":"Sample strategy\u00b6","text":""},{"location":"tutorial/optimize/9.hyperactive/#example","title":"Example\u00b6","text":""},{"location":"tutorial/optimize/9.hyperactive/#plot","title":"Plot\u00b6","text":""},{"location":"tutorial/optimize/9.hyperactive/#plot-plotly","title":"Plot plotly\u00b6","text":""},{"location":"tutorial/optimize/9.hyperactive/#init-plotly-environment","title":"Init Plotly environment\u00b6","text":""},{"location":"tutorial/optimize/9.hyperactive/#type-1","title":"Type 1\u00b6","text":""},{"location":"tutorial/optimize/9.hyperactive/#type-2","title":"Type 2\u00b6","text":""},{"location":"tutorial/plot/candlestick/","title":"Plot EMA and Candlestick","text":"In\u00a0[1]: Copied! <pre>import talib.abstract as ta\nimport pandas_ta as pdta\n\nfrom lettrade import DataFeed, Strategy, indicator as i\nfrom lettrade.exchange.backtest import ForexBackTestAccount, let_backtest\n\n\nclass SmaCross(Strategy):\n    ema1_period = 9\n    ema2_period = 21\n\n    def indicators(self, df: DataFeed):\n        df[\"ema1\"] = ta.EMA(df, timeperiod=self.ema1_period)\n        df[\"ema2\"] = ta.EMA(df, timeperiod=self.ema2_period)\n\n        df[\"signal_ema_crossover\"] = i.crossover(df.ema1, df.ema2)\n        df[\"signal_ema_crossunder\"] = i.crossunder(df.ema1, df.ema2)\n\n        df[\"cdl_doji\"] = pdta.cdl_doji(df.open, df.high, df.low, df.close)\n\n    def next(self, df: DataFeed):\n        if len(self.orders) &gt; 0 or len(self.positions) &gt; 0:\n            return\n\n        if df.l.signal_ema_crossover[-1]:\n            price = df.l.close[-1]\n            self.buy(size=0.1, sl=price - 0.001, tp=price + 0.001)\n        elif df.l.signal_ema_crossunder[-1]:\n            price = df.l.close[-1]\n            self.sell(size=0.1, sl=price + 0.001, tp=price - 0.001)\n\n    def plot(self, df: DataFeed) -&gt; dict:\n        from lettrade.plot import PlotColor\n        from lettrade.plot.plotly import (\n            plot_candle_highlight,\n            plot_line,\n            plot_merge,\n        )\n\n        plot_ema1 = plot_line(df[\"ema1\"], color=\"yellow\")\n        plot_ema2 = plot_line(df[\"ema2\"], color=\"green\")\n        plot_cdl_doji = plot_candle_highlight(\n            df[df[\"cdl_doji\"] != 0],\n            name=f\"Doji {df.name}\",\n            width=3,\n        )\n        return plot_merge(\n            plot_ema1,\n            plot_ema2,\n            plot_cdl_doji,\n        )\n\n\nlt = let_backtest(\n    strategy=SmaCross,\n    datas=\"example/data/data/EURUSD_5m_0_1000.csv\",\n    account=ForexBackTestAccount,\n    # plotter=None,\n)\n</pre> import talib.abstract as ta import pandas_ta as pdta  from lettrade import DataFeed, Strategy, indicator as i from lettrade.exchange.backtest import ForexBackTestAccount, let_backtest   class SmaCross(Strategy):     ema1_period = 9     ema2_period = 21      def indicators(self, df: DataFeed):         df[\"ema1\"] = ta.EMA(df, timeperiod=self.ema1_period)         df[\"ema2\"] = ta.EMA(df, timeperiod=self.ema2_period)          df[\"signal_ema_crossover\"] = i.crossover(df.ema1, df.ema2)         df[\"signal_ema_crossunder\"] = i.crossunder(df.ema1, df.ema2)          df[\"cdl_doji\"] = pdta.cdl_doji(df.open, df.high, df.low, df.close)      def next(self, df: DataFeed):         if len(self.orders) &gt; 0 or len(self.positions) &gt; 0:             return          if df.l.signal_ema_crossover[-1]:             price = df.l.close[-1]             self.buy(size=0.1, sl=price - 0.001, tp=price + 0.001)         elif df.l.signal_ema_crossunder[-1]:             price = df.l.close[-1]             self.sell(size=0.1, sl=price + 0.001, tp=price - 0.001)      def plot(self, df: DataFeed) -&gt; dict:         from lettrade.plot import PlotColor         from lettrade.plot.plotly import (             plot_candle_highlight,             plot_line,             plot_merge,         )          plot_ema1 = plot_line(df[\"ema1\"], color=\"yellow\")         plot_ema2 = plot_line(df[\"ema2\"], color=\"green\")         plot_cdl_doji = plot_candle_highlight(             df[df[\"cdl_doji\"] != 0],             name=f\"Doji {df.name}\",             width=3,         )         return plot_merge(             plot_ema1,             plot_ema2,             plot_cdl_doji,         )   lt = let_backtest(     strategy=SmaCross,     datas=\"example/data/data/EURUSD_5m_0_1000.csv\",     account=ForexBackTestAccount,     # plotter=None, ) In\u00a0[2]: Copied! <pre>lt.run()\n</pre> lt.run() <pre># Strategy         &lt;class '__main__.SmaCross'&gt;\nStart                2024-05-13 21:15:00+00:00\nEnd                  2024-05-17 08:30:00+00:00\nDuration                       3 days 11:15:00\nStart Balance                             1000\nEquity [$]                              980.08\nPL [$]                                  -19.92\nPL [%]                                   -1.99\n                                              \n# Trades                                    15\nWin Rate [%]                               0.4\nFee [$]                                  -0.58\nBest Trade [%]                           10.06\nWorst Trade [%]                         -10.14\nSQN                                      -0.64\nKelly Criterion                      -0.164918\nProfit Factor                         0.708067\n</pre> In\u00a0[3]: Copied! <pre>lt.plot()\n</pre> lt.plot()"},{"location":"tutorial/plot/candlestick/#plot-ema-and-candlestick","title":"Plot EMA and Candlestick\u00b6","text":""},{"location":"tutorial/plot/candlestick/#strategy","title":"Strategy\u00b6","text":""},{"location":"tutorial/plot/candlestick/#run","title":"Run\u00b6","text":""},{"location":"tutorial/plot/candlestick/#plot","title":"Plot\u00b6","text":""}]}